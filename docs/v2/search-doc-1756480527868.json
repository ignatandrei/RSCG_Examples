{"searchDocs":[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/blog/first-blog-post","content":"Lorem ipsum dolor sit amet... ...consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. For example, use JSX to create an interactive button: &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Here are a few tips you might find useful. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"About","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/about","content":"","keywords":"","version":"Next"},{"title":"Content​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#content","content":" You will find here code examples of 215 Roslyn Source Code Generator (RSCG) that can be useful for you. That means, you will write more elegant and concise code - even if the generators code is not always nice to look.  ","version":"Next","tagName":"h2"},{"title":"Are those examples ready for production?​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#are-those-examples-ready-for-production","content":" I have done due diligence to test the RSCG that I have shown to you here. However, I cannot guarantee that will fit your code. That means that you can test it for your case and, because all are open source on Github.com, you can contribute to improve them .  Also I have selected only Incremental Source Code Generator. I have also verified that the RSCG are working with .NET 7. Also verified that works with namespaces and classes.  ","version":"Next","tagName":"h2"},{"title":"How to use this site​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#how-to-use-this-site","content":" For each RSCG, you will find  Name of the RSCG and link to the NuGet package / GitHub repositoryWhat the RSCG can doWhat you need to include in .csproj fileWhat will be the initial codeCode Generated by RSCGLink to the downloadable code to practice  ","version":"Next","tagName":"h2"},{"title":"I have a suggestion for a new RSCG that is worth mentioning in this site. What can I do?​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#i-have-a-suggestion-for-a-new-rscg-that-is-worth-mentioning-in-this-site-what-can-i-do","content":" Please send me an email to ignatandrei@yahoo.com  ","version":"Next","tagName":"h2"},{"title":"I want to make a RSCG that will be useful. How can I do?​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#i-want-to-make-a-rscg-that-will-be-useful-how-can-i-do","content":" In the introduction I have put the links to get you started with RSCG.  ","version":"Next","tagName":"h2"},{"title":"I want to contribute to the site. How can I do?​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#i-want-to-contribute-to-the-site-how-can-i-do","content":" Please send me an email to ignatandrei@yahoo.com  ","version":"Next","tagName":"h2"},{"title":"Did you wrote any RSCG ?​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#did-you-wrote-any-rscg-","content":" Full disclosure: Yes, and they are presented here.  ","version":"Next","tagName":"h2"},{"title":"I want to see the previous version of the site. Where can I find it?​","type":1,"pageTitle":"About","url":"/RSCG_Examples/v2/docs/about#i-want-to-see-the-previous-version-of-the-site-where-can-i-find-it","content":" For v1 with .NET 5 see (docs/v1) ","version":"Next","tagName":"h2"},{"title":"ApparatusAOT by Stanislav Silin","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ApparatusAOT","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#info","content":" info Name: ApparatusAOT Apparatus.AOT.Reflection Author: Stanislav Silin NuGet:https://www.nuget.org/packages/Apparatus.AOT.Reflection/ You can find more details at https://github.com/byme8/Apparatus.AOT.Reflection Source: https://github.com/byme8/Apparatus.AOT.Reflection  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#original-readme","content":" note AOT.Reflection is faster reflection powered via Source Generators This library aims to create a subset of reflection that will be faster than the default one and will not break at the platforms with the AOT compilation support. The source generators will help us with that. How to use To make it work, you will need to install a NuGet package Apparatus.AOT.Reflection: dotnet add package Apparatus.AOT.Reflection Then you can use it like that: public class User { [Required] public string FirstName { get; set; } [Required] public string LastName { get; set; } } public static void Main() { var user = new User(); var properties = user.GetProperties().Values; foreach (var property in properties) { Console.WriteLine(property.Name); } } This sample will print the names of properties. FirstName LastName Also, it works for enums too: public enum UserKind { User, Admin } // ... public static void Main() { var values = EnumHelper.GetEnumInfo&lt;UserKind&gt;(); foreach (var value in values) { Console.WriteLine(value.Name); } } You will see: User Admin It does not end with the only property names. You can get property values and assigned attributes. Here is an example: var requiredProperties = _user .GetProperties() .Values .Where(o =&gt; o.Attributes.Any(attr =&gt; attr is RequiredAttribute)) .ToArray(); foreach (var requiredProperty in requiredProperties) { if (requiredProperty.TryGetValue(_user, out var value)) { Console.WriteLine($&quot;{requiredProperty.Name} =&gt; {value}&quot;); } } The same applies to enums too. Let have a look at the following sample: public enum AccountKind { [Description(&quot;User account&quot;)] User, [Description(&quot;Admin account&quot;)] Admin, [Description(&quot;Customer account&quot;)] Customer, [Description(&quot;Manager account&quot;)] Manager } // ... var values = EnumHelper.GetEnumInfo&lt;AccountKind&gt;(); foreach (var value in values) { var description = value.Attributes .OfType&lt;DescriptionAttribute&gt;() .First(); Console.WriteLine($&quot;{value.Name} =&gt; {description.Description}&quot;); } KeyOf The AOT.Reflection contains a way to express the intention safely when you want to pass the property inside the method. It works similarly to keyof from TypeScript. Here is an example: using Apparatus.AOT.Reflection; var user = new User {FirstName = &quot;Jon&quot;, LastName = &quot;Smith&quot;}; var firstName = DoIt (user, &quot;FirstName&quot;); // no error var lastName = DoIt (user, &quot;LastName&quot;); // no error var missingProperty = DoIt (user, &quot;Test&quot;); // compilation error object DoIt &lt;T&gt; (T value, KeyOf &lt;T&gt; propertyName) { var property = value.GetProperties () [propertyName]; if (property.TryGetValue (value, out var propertyValue)) { return propertyValue; } return null; } class User { public string FirstName {get; set; } public string LastName {get; set; } } More information you can find in separate article. Performance Let's imagine that we need to find a property with Required attribute and the name FirstName. If it exists, then print the value of the property, otherwise return the empty string. The implementation will be messy because I don't want to measure the LINQ performance, but the overall idea must be clear. Here is the source code with default reflection: var type = _user.GetType(); var property = type.GetProperty(nameof(User.FirstName)); var required = false; foreach (var o in property.GetCustomAttributes()) { if (o.GetType() == typeof(RequiredAttribute)) { required = true; break; } } if (required) { return (string)property.GetMethod?.Invoke(_user, null); } return string.Empty; Here the source code with aot reflection: var entries = _user.GetProperties(); var firstName = entries[nameof(User.FirstName)]; var required = false; foreach (var o in firstName.Attributes) { if (o is RequiredAttribute) { required = true; break; } } if (required) { if (firstName.TryGetValue(_user, out var value)) { return (string)value; } return string.Empty; } return string.Empty; Here are the benchmark results: BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1165 (21H1/May2021Update) 11th Gen Intel Core i7-11700KF 3.60GHz, 1 CPU, 16 logical and 8 physical cores .NET SDK=6.0.100-preview.7.21379.14 [Host] : .NET 5.0.7 (5.0.721.25508), X64 RyuJIT DefaultJob : .NET 5.0.7 (5.0.721.25508), X64 RyuJIT | Method | Mean | Error | StdDev | Gen 0 | Allocated | |-------------- |------------:|---------:|---------:|-------:|----------:| | Reflection | 1,758.91 ns | 2.714 ns | 2.406 ns | 0.1278 | 1,072 B | | AOTReflection | 16.01 ns | 0.090 ns | 0.075 ns | - | - | As you can see, the AOT.Reflection is significantly faster comparing to default reflection. Now let's have a look at enums performance. Imagine that we have the enum value, and we need to get a description associated with it. Here how it will look: var attributes = _account.GetEnumValueInfo().Attributes; for (int i = 0; i &lt; attributes.Length; i++) { var attribute = attributes[i]; if (attribute is DescriptionAttribute descriptionAttribute) { return descriptionAttribute.Description; } } return &quot;&quot;; Here is the results: | Method | Mean | Error | StdDev | Gen 0 | Allocated | |-------------------- |-----------:|----------:|----------:|-------:|----------:| | GetValuesAOT | 6.253 ns | 0.0394 ns | 0.0329 ns | - | - | | GetValuesReflection | 734.563 ns | 2.3173 ns | 1.9351 ns | 0.0324 | 272 B | And again, the AOT reflection works much faster. The complete source code of benchmarks you can find here. Limitations I would recommend being careful when you try to use these APIs inside the generic methods because, at this point, there is no easy way to analyze them and identify the correct signatures. It means the source generation will not happen. As a result, we will have an error at runtime. Let's have a look at the following sample: public class Program { public static string? GetDescription&lt;T&gt;(T enumValue) where T : Enum { return enumValue .GetEnumValueInfo() .Attributes .OfType&lt;DescriptionAttribute&gt;() .FirstOrDefault() ?.Description; } public static void Main() { var account = AccountKind.Admin; Console.WriteLine(GetDescription(account)); } } We will have an exception if we run it because the source generator could not figure out the signatures. The type T is the mystery for it. But we can fix it with a small trick: public class Program { private void DontCallMe() { EnumHelper.GetEnumInfo&lt;AccountKind&gt;(); } public static string? GetDescription&lt;T&gt;(T enumValue) where T : Enum { return enumValue .GetEnumValueInfo() .Attributes .OfType&lt;DescriptionAttribute&gt;() .FirstOrDefault() ?.Description; } public static void Main() { var account = AccountKind.Admin; Console.WriteLine(GetDescription(account)); } } Pay attention to the DontCallMe method. We do not have any intention to use it anywhere. It is here to help the source generator to analyze the source code. Now, if we run it, everything works as expected. The same issue exists for the properties reflection, and we can use the same trick to avoid it. Support Right now, only public properties and enums are supported. Regarding the private members, I doubt them because they would ruin the performance, but we will see.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#about","content":" note This will generate code for investigating at runtime the properties of an object  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references ApparatusAOT &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Apparatus.AOT.Reflection&quot; Version=&quot;0.2.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ApparatusDemo_PersonExtensions.cs using System; using System.Linq; namespace Apparatus.AOT.Reflection { public static class ApparatusDemo_PersonExtensions { [global::System.Runtime.CompilerServices.ModuleInitializer] public static void Bootstrap() { MetadataStore&lt;global::ApparatusDemo.Person&gt;.Data = _lazy; } private static global::System.Lazy&lt;global::System.Collections.Generic.IReadOnlyDictionary&lt;string, IPropertyInfo&gt;&gt; _lazy = new global::System.Lazy&lt;global::System.Collections.Generic.IReadOnlyDictionary&lt;string, IPropertyInfo&gt;&gt;(new global::System.Collections.Generic.Dictionary&lt;string, IPropertyInfo&gt; { { &quot;FirstName&quot;, new global::Apparatus.AOT.Reflection.PropertyInfo&lt;global::ApparatusDemo.Person,string&gt;( &quot;FirstName&quot;, new global::System.Attribute[] { new global::System.ComponentModel.DataAnnotations.RequiredAttribute(), }, instance =&gt; instance.FirstName, (instance, value) =&gt; instance.FirstName = value) }, { &quot;LastName&quot;, new global::Apparatus.AOT.Reflection.PropertyInfo&lt;global::ApparatusDemo.Person,string&gt;( &quot;LastName&quot;, new global::System.Attribute[] { }, instance =&gt; instance.LastName, (instance, value) =&gt; instance.LastName = value) }, }); internal static global::System.Collections.Generic.IReadOnlyDictionary&lt;string, IPropertyInfo&gt; GetProperties(this global::ApparatusDemo.Person value) { return _lazy.Value; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#download-example-net--c","content":" tip Download Example project ApparatusAOT   ","version":"Next","tagName":"h3"},{"title":"Share ApparatusAOT​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#share-apparatusaot","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ApparatusAOT  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ApparatusAOT by Stanislav Silin","url":"/RSCG_Examples/v2/docs/ApparatusAOT#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"ActorSrcGen by Andrew Matthews","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ActorSrcGen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#info","content":" info Name: ActorSrcGen A C# Source Generator to adapt a simple class to allow it to use TPL Dataflow for robust high performance computation Author: Andrew Matthews NuGet:https://www.nuget.org/packages/ActorSrcGen/ You can find more details at https://github.com/aabs/ActorSrcGen Source: https://github.com/aabs/ActorSrcGen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#original-readme","content":" note Welcome To ActorSrcGen ActorSrcGen is a C# Source Generator allowing the conversion of simple C# classes into Dataflow compatible pipelines supporting the actor model. ActorSrcGen is currently a solo effort to create a useful and powerful source code generator to simplify the creation of high performance pipeline code conforming to the actor model. We welcome any feedback, suggestions, and contributions from the community. If you encounter any issues or have any questions, please don't hesitate to submit an issue report. This helps me understand any problems or limitations of the project and allows me to address them promptly. If you have an idea for a new feature or enhancement, I encourage you to submit a feature request. Your input will shape the future direction of ActorSrcGen and help make it even better. If you have any code changes or improvements you'd like to contribute, I welcome pull requests (PRs). Please follow the guidelines provided in our project's contribution guidelines and README file. I will review your changes and provide feedback, helping you ensure a smooth integration process. How Do You Use It?​ It's really easy to use ActorSrcGen to inject pipeline processing code into your project. Install the Nuget Package into your project dotnet add package ActorSrcGen --version 1.0.2 Adorn your actor class with the Actor Attribute [Actor] public class MyActor{ . . . } Define the initial starting step of your pipeline, being sure to indicate what step comes next [FirstStep(&quot;SomeName&quot;)] [NextStep(nameof(DecodeMsg))] [NextStep(nameof(LogMsg))] public string ReceiveMsgFromSomewhere(string x){ . . . } Add a sequence of intermediate steps [Step, NextStep(nameof(ProcessMsg))] public Request DecodeMsg(string x){ . . . } [Step] public void LogMsg(string x){ . . . } Finish up with the last step [LastStep] public void ProcessMsg(Request req){ . . . } Behind the scenes, the source generator will generate the wiring for your actor, so that all you then need to do is invoke the actor with a call to Call orCast depending on whether you want the invocation to be blocking or not. var a = new MyActor(); a.Call(&quot;hello world!&quot;); Naturally there are various other details related to DataflowEx and TPL dataflow that you can take advantage of, but the gist is to make the actor as simple as that to write. The generator will create the wiring. You just need to implement the steps of the pipeline itself. What It Does​ The source generator in the provided code is a tool that automatically generates additional code based on a simple C# class. Its purpose is to simplify the usage of TPL Dataflow, a library that helps with writing robust and performant asynchronous and concurrent code in .NET. In this specific case, the source generator takes a regular C# class and extends it by generating the necessary boilerplate code to use TPL Dataflow. The generated code creates a pipeline of dataflow components that support the actor model. The generated code includes the following components TransformManyBlock: This block transforms input data and produces multiple output data items.ActionBlock: This block performs an action on the input data without producing any output.DataflowLinkOptions: This class specifies options for linking dataflow blocks together.ExecutionDataflowBlockOptions: This class specifies options for configuring the execution behavior of dataflow blocks. The generated code also includes the necessary wiring to connect the methods of the original class together using the TPL Dataflow components. This allows the methods to be executed in a coordinated and concurrent manner. Overall, the source generator simplifies the process of using TPL Dataflow by automatically generating the code that would otherwise need to be written manually. It saves developers from writing a lot of boilerplate code and allows them to focus on the core logic of their application. [Actor] public partial class MyActor { public List&lt;int&gt; Results { get; set; } = []; public int Counter { get; set; } [FirstStep(&quot;blah&quot;)] [Receiver] [NextStep(nameof(DoTask2))] [NextStep(nameof(LogMessage))] public Task&lt;string&gt; DoTask1(int x) { Console.WriteLine(&quot;DoTask1&quot;); return Task.FromResult(x.ToString()); } protected async partial Task&lt;int&gt; ReceiveDoTask1(CancellationToken ct) { await Task.Delay(1000, ct); return Counter++; } [Step] [NextStep(nameof(DoTask3))] public Task&lt;string&gt; DoTask2(string x) { Console.WriteLine(&quot;DoTask2&quot;); return Task.FromResult($&quot;100{x}&quot;); } [LastStep] public async Task&lt;int&gt; DoTask3(string input) { await Console.Out.WriteLineAsync(&quot;DoTask3&quot;); var result = int.Parse(input); Results.Add(result); return result; } [LastStep] public void LogMessage(string x) { Console.WriteLine(&quot;Incoming Message: &quot; + x); } } And the source generator will extend it, adding the boilerplate TPL Dataflow code to wire the methods together in a clean way: // Generated on 2024-05-08 #pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type. #pragma warning disable CS0108 // hides inherited member. namespace ActorSrcGen.Abstractions.Playground; using System.Threading.Tasks.Dataflow; using Gridsum.DataflowEx; public partial class MyActor : Dataflow&lt;Int32, Int32&gt;, IActor&lt;Int32&gt; { public MyActor() : base(DataflowOptions.Default) { _LogMessage = new ActionBlock&lt;String&gt;( (String x) =&gt; { try { LogMessage(x); }catch{} }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_LogMessage); _DoTask3 = new TransformManyBlock&lt;String,Int32&gt;( async (String x) =&gt; { var result = new List&lt;Int32&gt;(); try { var newValue = await DoTask3(x); result.Add(newValue); }catch{} return result; }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_DoTask3); _DoTask2 = new TransformManyBlock&lt;String,String&gt;( async (String x) =&gt; { var result = new List&lt;String&gt;(); try { var newValue = await DoTask2(x); result.Add(newValue); }catch{} return result; }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_DoTask2); _DoTask1 = new TransformManyBlock&lt;Int32,String&gt;( async (Int32 x) =&gt; { var result = new List&lt;String&gt;(); try { var newValue = await DoTask1(x); result.Add(newValue); }catch{} return result; }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_DoTask1); _DoTask1BC = new BroadcastBlock&lt;String&gt;( (String x) =&gt; x, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_DoTask1BC); _DoTask2.LinkTo(_DoTask3, new DataflowLinkOptions { PropagateCompletion = true }); _DoTask1.LinkTo(_DoTask1BC, new DataflowLinkOptions { PropagateCompletion = true }); _DoTask1BC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true }); _DoTask1BC.LinkTo(_DoTask2, new DataflowLinkOptions { PropagateCompletion = true }); } ActionBlock&lt;String&gt; _LogMessage; TransformManyBlock&lt;String,Int32&gt; _DoTask3; TransformManyBlock&lt;String,String&gt; _DoTask2; TransformManyBlock&lt;Int32,String&gt; _DoTask1; BroadcastBlock&lt;String&gt; _DoTask1BC; protected partial Task&lt;Int32&gt; ReceiveDoTask1(CancellationToken cancellationToken); public async Task ListenForReceiveDoTask1(CancellationToken cancellationToken) { while (!cancellationToken.IsCancellationRequested) { Int32 incomingValue = await ReceiveDoTask1(cancellationToken); Call(incomingValue); } } public override ITargetBlock&lt;Int32&gt; InputBlock { get =&gt; _DoTask1; } public override ISourceBlock&lt;Int32&gt; OutputBlock { get =&gt; _DoTask3; } public bool Call(Int32 input) =&gt; InputBlock.Post(input); public async Task&lt;bool&gt; Cast(Int32 input) =&gt; await InputBlock.SendAsync(input); public async Task&lt;Int32&gt; AcceptAsync(CancellationToken cancellationToken) { try { var result = await _DoTask3.ReceiveAsync(cancellationToken); return result; } catch (OperationCanceledException operationCanceledException) { return Task.FromCanceled&lt;int&gt;(cancellationToken); } } } Use of your class is a straightforward call to send a message to the actor: var actor = new MyActor(); try { if (actor.Call(10)) Console.WriteLine(&quot;Called Synchronously&quot;); var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5)); var t = Task.Run(async () =&gt; await actor.ListenForReceiveDoTask1(cts.Token), cts.Token); while (!cts.Token.IsCancellationRequested) { var result = await actor.AcceptAsync(cts.Token); Console.WriteLine($&quot;Result: {result}&quot;); } await actor.SignalAndWaitForCompletionAsync(); } catch (OperationCanceledException operationCanceledException) { Console.WriteLine(&quot;All Done!&quot;); } Which produces what you would expect: Called Synchronously DoTask1 Incoming Message: 10 DoTask2 DoTask3 Result: 10010 DoTask1 Incoming Message: 0 DoTask2 DoTask3 Result: 1000 DoTask1 DoTask2 Incoming Message: 1 DoTask3 Result: 1001 DoTask1 DoTask2 Incoming Message: 2 DoTask3 Result: 1002 DoTask1 DoTask2 DoTask3 Result: 1003 Incoming Message: 3 All Done! Why Bother?​ You might be wondering what the architectural benefits of using a model like this might be. Writing robust and performant asynchronous and concurrent code in .NET is a laborious process. TPL Dataflow makes it easier - it &quot;provides dataflow components to help increase the robustness of concurrency-enabled applications. This dataflow model promotes actor-based programming by providing in-process message passing for coarse-grained dataflow and pipelining tasks&quot; (seedocs). ActorSrcGen allows you to take advantage of that model without needing to write a lot of the necessary boilerplate code. The Actor Model​ The Actor Model is a programming paradigm that is based on the concept of actors, which are autonomous units of computation. It has several benefits in programming: Concurrency: Actors can be executed concurrently, allowing for efficient use of multiple CPU cores. This can lead to significant performance improvements in systems that require concurrent execution.Fault tolerance: Actors can be designed to be fault-tolerant, meaning that if an actor fails or crashes, it can be restarted without affecting the rest of the system. This can improve the reliability and availability of the system.Encapsulation: Actors encapsulate their state and behavior, making it easier to reason about and test the code. This can lead to better code quality and maintainability. TPL Dataflow​ The Task Parallel Library (TPL) Dataflow in .NET provides a powerful framework for building high-throughput systems. Here are some benefits of using TPL Dataflow for high-throughput systems: Efficiency: TPL Dataflow is designed to optimize the execution of tasks and dataflows. It automatically manages the execution of tasks based on available resources, reducing unnecessary overhead and maximizing throughput.Scalability: TPL Dataflow allows you to easily scale your system by adding or removing processing blocks. You can dynamically adjust the number of processing blocks based on the workload, ensuring that your system can handle varying levels of throughput.Flexibility: TPL Dataflow provides a variety of processing blocks, such as buffers, transform blocks, and action blocks, which can be combined and customized to fit your specific requirements. This flexibility allows you to build complex dataflows that can handle different types of data and processing logic. Acknowledgements​ The generated source builds atopDataflowEx for a clean stateful object-oriented wrapper around your pipeline. With thanks to: Gridsum DataflowExBnaya.SourceGenerator.Template (see article)  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#about","content":" note Generating source code for actors in C#.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDayWorkflow.csPerson.cs This is the CSharp Project that references ActorSrcGen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ActorSrcGen&quot; Version=&quot;1.1.2&quot; /&gt; &lt;PackageReference Include=&quot;ActorSrcGen.Abstractions&quot; Version=&quot;1.1.2&quot; /&gt; &lt;PackageReference Include=&quot;Gridsum.DataflowEx&quot; Version=&quot;2.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DayWorkflow.generated.cs // Generated on 2025-07-24 #pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type. #pragma warning disable CS0108 // hides inherited member. using ActorSrcGen; using System.Diagnostics.Metrics; namespace ActorDemo; using System.Threading.Tasks.Dataflow; using Gridsum.DataflowEx; public partial class DayWorkflow : Dataflow&lt;Person&gt;, IActor&lt;Person&gt; { public DayWorkflow() : base(DataflowOptions.Default) { _LogMessage = new ActionBlock&lt;Person&gt;( (Person x) =&gt; { try { LogMessage(x); }catch{} }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_LogMessage); _Eat = new TransformManyBlock&lt;Person,Person&gt;( async (Person x) =&gt; { var result = new List&lt;Person&gt;(); try { var newValue = await Eat(x); result.Add(newValue); }catch{} return result; }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_Eat); _EatBC = new BroadcastBlock&lt;Person&gt;( (Person x) =&gt; x, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_EatBC); _WashFace = new TransformManyBlock&lt;Person,Person&gt;( async (Person x) =&gt; { var result = new List&lt;Person&gt;(); try { var newValue = await WashFace(x); result.Add(newValue); }catch{} return result; }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_WashFace); _WashFaceBC = new BroadcastBlock&lt;Person&gt;( (Person x) =&gt; x, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_WashFaceBC); _StartDay = new TransformManyBlock&lt;Person,Person&gt;( async (Person x) =&gt; { var result = new List&lt;Person&gt;(); try { var newValue = await StartDay(x); result.Add(newValue); }catch{} return result; }, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_StartDay); _StartDayBC = new BroadcastBlock&lt;Person&gt;( (Person x) =&gt; x, new ExecutionDataflowBlockOptions() { BoundedCapacity = 5, MaxDegreeOfParallelism = 8 }); RegisterChild(_StartDayBC); _Eat.LinkTo(_EatBC, new DataflowLinkOptions { PropagateCompletion = true }); _EatBC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true }); _WashFace.LinkTo(_WashFaceBC, new DataflowLinkOptions { PropagateCompletion = true }); _WashFaceBC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true }); _WashFaceBC.LinkTo(_Eat, new DataflowLinkOptions { PropagateCompletion = true }); _StartDay.LinkTo(_StartDayBC, new DataflowLinkOptions { PropagateCompletion = true }); _StartDayBC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true }); _StartDayBC.LinkTo(_WashFace, new DataflowLinkOptions { PropagateCompletion = true }); } ActionBlock&lt;Person&gt; _LogMessage; TransformManyBlock&lt;Person,Person&gt; _Eat; BroadcastBlock&lt;Person&gt; _EatBC; TransformManyBlock&lt;Person,Person&gt; _WashFace; BroadcastBlock&lt;Person&gt; _WashFaceBC; TransformManyBlock&lt;Person,Person&gt; _StartDay; BroadcastBlock&lt;Person&gt; _StartDayBC; public override ITargetBlock&lt;Person&gt; InputBlock { get =&gt; _StartDay; } public bool Call(Person input) =&gt; InputBlock.Post(input); public async Task&lt;bool&gt; Cast(Person input) =&gt; await InputBlock.SendAsync(input); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#download-example-net--c","content":" tip Download Example project ActorSrcGen   ","version":"Next","tagName":"h3"},{"title":"Share ActorSrcGen​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#share-actorsrcgen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ActorSrcGen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Actor\" has the following generators:​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#category-actor-has-the-following-generators","content":" 1 ActorSrcGen  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ActorSrcGen by Andrew Matthews","url":"/RSCG_Examples/v2/docs/ActorSrcGen#see-category","content":" Actor ","version":"Next","tagName":"h3"},{"title":"Architect.DomainModeling by Timo van Zijll Langhout","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#info","content":" info Name: Architect.DomainModeling For Domain-Driven Design (DDD), this package provides tools for implementing domain models, such as base types and source generators. Author: Timo van Zijll Langhout NuGet:https://www.nuget.org/packages/Architect.DomainModeling/ You can find more details at https://github.com/TheArchitectDev/Architect.DomainModeling Source: https://github.com/TheArchitectDev/Architect.DomainModeling  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#original-readme","content":" note Architect.DomainModeling A complete Domain-Driven Design (DDD) toolset for implementing domain models, including base types and source generators. Base types, including: ValueObject, WrapperValueObject, Entity, IIdentity, IApplicationService, IDomainService.Source generators, for types including: ValueObject, WrapperValueObject, DummyBuilder, IIdentity.Structural implementations for hash codes and equality on collections (also used automatically by source-generated value objects containing collections).(De)serialization support, such as for JSON.Optional generated mapping code for Entity Framework. Source Generators​ This package uses source generators (introduced in .NET 5). Source generators write additional C# code as part of the compilation process. Among other advantages, source generators enable IntelliSense on generated code. They are primarily used here to generate boilerplate code, such as overrides of ToString(), GetHashCode(), and Equals(), as well as operator overloads. Domain Object Types​ ValueObject​ A value object is an an immutable data model representing one or more values. Such an object is identified and compared by its values. Value objects cannot be mutated, but new ones with different values can be created. Built-in examples from .NET itself are string and DateTime. Consider the following type: public class Color : ValueObject { public ushort Red { get; private init; } public ushort Green { get; private init; } public ushort Blue { get; private init; } public Color(ushort red, ushort green, ushort blue) { this.Red = red; this.Green = green; this.Blue = blue; } } This is the non-boilerplate portion of the value object, i.e. everything that we would like to define by hand. However, the type is missing the following: A ToString() override.A GetHashCode() override.An Equals() override.The IEquatable&lt;Color&gt; interface implementation.Operator overloads for == and != based on Equals(), since a value object only ever cares about its contents, never its reference identity.Potentially the IComparable&lt;Color&gt; interface implementation.Correctly configured nullable reference types (? vs. no ?) on all mentioned boilerplate code.Unit tests on any hand-written boilerplate code. Change the type as follows to have source generators tackle all of the above and more: [ValueObject] public partial class Color { // Snip } Note that the ValueObject base class is now optional, as the generated partial class implements it. The IComparable&lt;Color&gt; interface can optionally be added, if the type is considered to have a natural order. In such case, the type's properties are compared in the order in which they are defined. When adding the interface, make sure that the properties are defined in the intended order for comparison. Alterantively, if we inherit from ValueObject but omit the [ValueObject] attribute, we get partial benefits: Overriding ToString() is made mandatory before the type will build.GetHashCode() and Equals() are overridden to throw a NotSupportedException. Value objects should use structural equality, and an exception is better than unintentional reference equality (i.e. bugs).Operators == and != are implemented to delegate to Equals(), to avoid unintentional reference equality. WrapperValueObject​ A wrapper value object is a value object that represents and wraps a single value. For example, a domain model may define a Description value object, a string with certain restrictions on its length and permitted characters. The wrapper value object is just another value object. Its existence is merely a technical detail to make it easier to implement value objects that represent a single value. Consider the following type: public class Description : WrapperValueObject&lt;string&gt; { protected override StringComparison StringComparison =&gt; StringComparison.Ordinal; public string Value { get; private init; } public Description(string value) { this.Value = value ?? throw new ArgumentNullException(nameof(value)); if (this.Value.Length == 0) throw new ArgumentException($&quot;A {nameof(Description)} must not be empty.&quot;); if (this.Value.Length &gt; MaxLength) throw new ArgumentException($&quot;A {nameof(Description)} must not be over {MaxLength} characters long.&quot;); if (ContainsNonPrintableCharacters(this.Value, flagNewLinesAndTabs: false)) throw new ArgumentException($&quot;A {nameof(Description)} must contain only printable characters.&quot;); } } Besides all the things that the value object in the previous section was missing, this type is missing the following: An implementation of the ContainsNonPrintableCharacters() method.An explicit conversion from string (explicit since not every string is a Description).An implicit conversion to string (implicit since every Description is a valid string).If the underlying type had been a value type (e.g. int), conversions from and to its nullable counterpart (e.g. int?).Ideally, JSON converters that convert instances to and from &quot;MyDescription&quot; rather than {&quot;Value&quot;:&quot;MyDescription&quot;}. Change the type as follows to have source generators tackle all of the above and more: [WrapperValueObject&lt;string&gt;] public partial class Description { // Snip } Again, the WrapperValueObject&lt;string&gt; base class has become optional, as the generated partial class implements it. To also have comparison methods generated, the IComparable&lt;Description&gt; interface can optionally be added, if the type is considered to have a natural order. Entity​ An entity is a data model that is defined by its identity and a thread of continuity. It may be mutated during its life cycle. Entities are often stored in a database. For entities themselves, the package offers base types, with no source generation required. However, it is often desirable to have a custom type for an entity's ID. For example, PaymentId tends to be a more expressive type than ulong. Unfortunately, such custom ID types tend to consist of boilerplate code that gets in the way, is a hassle to write, and is easy to make mistakes in. Consider the following type: [Entity] public class Payment : Entity&lt;PaymentId&gt; { public string Currency { get; } public decimal Amount { get; } public Payment(string currency, decimal amount) : base(new PaymentId()) { this.Currency = currency ?? throw new ArgumentNullException(nameof(currency)); this.Amount = amount; } } The entity needs a PaymentId type. This type could be a full-fledged WrapperValueObject&lt;ulong&gt; or WrapperValueObject&lt;string&gt;, with IComparable&lt;PaymentId&gt;. In fact, it might also be desirable for such a type to be a struct. Change the type as follows to get a source-generated ID type for the entity: [Entity] public class Payment : Entity&lt;PaymentId, string&gt; { // Snip } The Entity&lt;TId, TIdPrimitive&gt; base class is what triggers source generation of the TId, if no such type exists. The TIdPrimitive type parameter specifies the underlying primitive to use. Using this base class to have the ID type generated is equivalent to manually declaring one. When entities share a custom base class, such as in a scenario with a Banana and a Strawberry entity each inheriting from Fruit, then it is possible to have Fruit inherit from Entity&lt;FruitId, TPrimitive&gt;, causing FruitId to be generated. The [Entity] attribute, however, should only be applied to the concrete types, Banana and Strawberry'. Furthermore, the above example entity could be modified to create a new, unique ID on construction: public Payment(string currency, decimal amount) : base(new PaymentId(Guid.NewGuid().ToString(&quot;N&quot;))) { // Snip } For a more database-friendly alternative to UUIDs, see Distributed IDs. Identity​ Identity types are a special case of value objects. Unlike other value objects, they are perfectly suitable to be implemented as structs: The enforced default constructor is unproblematic, because there is hardly such a thing as an invalid ID value. Although ID 0 or -1 might not exist, the same might be true for ID 999999, which would still be valid as a value.The possibility of an ID variable containing null is often undesirable. Structs avoid this complication. (Where we want nullability, a nullable struct can be used, e.g. PaymentId?.If the underlying type is string, the generator ensures that its Value property returns the empty string instead of null. This way, even string-wrapping identities know only one &quot;empty&quot; value and avoid representing null. Since an application is expected to work with many ID instances, using structs for them is a nice optimization that reduces heap allocations. Source-generated identities implement both IEquatable&lt;T&gt; and IComparable&lt;T&gt; automatically. They are declared as follows: [Identity&lt;ulong&gt;] public readonly partial struct PaymentId : IIdentity&lt;ulong&gt; { } For even terser syntax, we can omit the interface and the readonly keyword (since they are generated), and even use a record struct to omit the curly braces: [Identity&lt;string&gt;] public partial record struct ExternalId; Note that an entity has the option of having its own ID type generated implicitly, with practically no code at all. Domain Event​ There are many ways of working with domain events, and this package does not advocate any particular one. As such, no interfaces, base types, or source generators are included that directly implement domain events. To mark domain event types as such, regardless of how they are implemented, the [DomainEvent] attribute can be used: [DomainEvent] public class OrderCreatedEvent : // Snip Besides providing consistency, such a marker attribute can enable miscellaneous concerns. For example, if the package's Entity Framework mappings are used, domain events can be included. DummyBuilder​ Domain objects have parameterized constructors, so that they can guarantee a valid state. For many value objects, such constructors are unlikely to ever change: new PaymentId(1), new Description(&quot;Example&quot;), new Color(1, 1, 1). However, entities have constructors that tend to change. The same applies for value objects that exist simply to group clusters of an entity's properties, e.g. PaymentConfiguration. When one of these constructors changes, such as when the Payment entity gets a new property (one that should be passed to the constructor), then all the callers need to change accordingly. Usually, production code has just a handful of callers of an entity's constructor. However, test code can easily have dozens of callers of that constructor. The simple act of adding one property would require dozens of additional changes instead of a handful, only because of the existence of test code. The changes are &quot;dumb&quot; changes, as the test methods do not care about the new property, which never existed when they were written. The Builder pattern fixes this problem: public class PaymentDummyBuilder { // Have a default value for each property, along with a fluent method to change it private string Currency { get; set; } = &quot;EUR&quot;; public PaymentDummyBuilder WithCurrency(string value) =&gt; this.With(b =&gt; b.Currency = value); private decimal Amount { get; set; } = 1.00m; public PaymentDummyBuilder WithAmount(decimal value) =&gt; this.With(b =&gt; b.Amount = value); private PaymentDummyBuilder With(Action&lt;PaymentDummyBuilder&gt; assignment) { assignment(this); return this; } // Have a Build() method to invoke the most usual constructor with the configured values public override Payment Build() { var result = new Payment( currency: this.Currency, amount: this.Amount); return result; } } Test methods avoid constructor invocations, e.g. new Payment(&quot;EUR&quot;, 1.00m), and instead use the following: new PaymentBuilder().Build(); // Completely default instance new PaymentBuilder().WithCurrency(&quot;USD&quot;).Build(); // Partially modified instance for a specific test For example, to test that the constructor throws the appropriate exception when given a null currency: Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; new PaymentBuilder().WithCurrency(null!).Build()); This way, whenever a constructor is changed, the only test code that breaks is the dummy builder. Instead of dozens of additional changes, we need only make a handful. As the builder is repaired to account for the changed constructor, all tests work again. If a new constructor parameter was added, existing tests tend to work perfectly fine as long as the builder provides a sensible default value for the parameter. Unfortunately, the dummy builders tend to consist of boilerplate code and can be tedious to write and maintain. Change the type as follows to get source generation for it: [DummyBuilder&lt;Payment&gt;] public partial class PaymentDummyBuilder { // Anything defined manually will cause the source generator to outcomment its conflicting code, i.e. manual code always takes precedence // The source generator is fairly good at instantiating default values, but not everything it generates is sensible to the domain model // Since the source generator cannot guess what an example currency value might look like, we define that property and its initializer manually // Everything else we let the source generator provide private string Currency { get; set; } = &quot;EUR&quot;; } The generated Build() method opts for the most visible, simplest parameterized constructor, since it tends to represent the most &quot;regular&quot; way of constructing the domain object. Specifically, it picks by greatest visibility, parameterized over default, fewest parameters . The builder's properties and fluent methods are based on that same constructor. We can deviate by manually implementing the Build() method and manually adding properties and fluent methods. To remove generated fluent methods, we can obscure them by manually implementing them as private, protected, or internal. Dummy builders generally live in a test project, or in a library project consumed solely by test projects. Constructor Validation​ DDD promotes the validation of domain rules and invariants in the constructors of the domain objects. This pattern is fully supported: public const ushort MaxLength = 255; public Description(string value) { this.Value = value ?? throw new ArgumentNullException(nameof(value)); if (this.Value.Length == 0) throw new ArgumentException($&quot;A {nameof(Description)} must not be empty.&quot;); if (this.Value.Length &gt; MaxLength) throw new ArgumentException($&quot;A {nameof(Description)} must not be over {MaxLength} characters long.&quot;); if (ContainsNonPrintableCharacters(this.Value, flagNewLinesAndTabs: false)) throw new ArgumentException($&quot;A {nameof(Description)} must contain only printable characters.&quot;); } Any type that inherits from ValueObject also gains access to a set of (highly optimized) validation helpers, such as ContainsNonPrintableCharacters() and ContainsNonAlphanumericCharacters(). Construct Once​ From the domain model's perspective, any instance is constructed only once. The domain model does not care if it is serialized to JSON or persisted in a database before being reconstituted in main memory. The object is considered to have lived on. As such, constructors in the domain model should not be re-run when objects are reconstituted. The source generators provide this property: Each generated IIdentity&lt;T&gt; and WrapperValueObject&lt;TValue&gt; comes with a JSON converter for both System.Text.Json and Newtonsoft.Json, each of which deserialize without the use of (parameterized) constructors.Each generated ValueObject will have an empty default constructor for deserialization purposes, with a [JsonConstructor] attribute for both System.Text.Json and Newtonsoft.Json. Declare its properties with private init and add a [JsonInclude] and [JsonPropertyName(&quot;StableName&quot;)] attribute to allow them to be rehydrated.If the generated Entity Framework mappings are used, all domain objects are reconstituted without the use of (parameterized) constructors.Third party extensions can use the methods on DomainObjectSerializer to (de)serialize according to the same conventions. Serialization​ First and foremost, serialization of domain objects for public purposes should be avoided. To expose data outside of the bounded context, create separate contracts and adapters to convert back and forth. It is advisable to write such adapters manually, so that a compiler error occurs when changes to either end would break the adaptation. Serialization inside the bounded context is useful, such as for persistence, be it in the form of JSON documents or in relational database tables. Identity and WrapperValueObject Serialization​ The generated JSON converters and Entity Framework mappings (optional) end up calling the generated Serialize and Deserialize methods, which are fully customizable. Deserialization uses the default constructor and the value property's initializer ({ get; private init }). Fallbacks are in place in case a value property was manually declared with no initializer. ValueObject Serialization​ Generated value object types have a private, empty default constructor intended solely for deserialization. System.Text.Json, Newtonsoft.Json, and Entity Framework each prefer this constructor. Value object properties should be declared as { get; private init; }. If no initializer is provided, the included analyzer emits a warning, since properties may not be deserializable. If a value object is ever serialized to JSON, its properties should have the [JsonInclude] attribute. Since renaming a property would break any existing JSON blobs, it is advisable to hardcode a property name for use in JSON through the [JsonPropertyName(&quot;StableName&quot;)]. Avoid nameof(), so that JSON serialization is unaffected by future renames. For Entity Framework, when storing a complex value object directly into an entity's table, prefer the ComplexProperty() feature (either with or without ToJson()). Property renames for individual columns are handled by migrations. Property renames inside JSON blobs are covered by earlier paragraphs. At the time of writing, Entity Framework's ComplexProperty() does not yet combine with ToJson(), necessitating manual JSON serialization. Entity and Domain Event Serialization​ If an entity or domain event is ever serialized to JSON, it is up to the developer to provide an empty default constructor, since there is no other need to generate source for these types. The [Obsolete] attribute and private accessibility can be used to prevent a constructor's unintended use. If the generated Entity Framework mappings are used, entities and/or domain objects can be reconstituted entirely without the use of constructors, thus avoiding the need to declare empty default constructors. Entity Framework Conventions​ Conventions to provide Entity Framework mappings are generated on-demand, only if any override of ConfigureConventions(ModelConfigurationBuilder) is declared. There are no hard dependencies on Entity Framework, nor is there source code overhead in its absence. It is up to the developer which conventions, if any, to use. internal sealed class MyDbContext : DbContext { // Snip protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) { // Recommended to keep EF from throwing if it sees no usable constructor, if we are keeping it from using constructors anyway configurationBuilder.Conventions.Remove&lt;ConstructorBindingConvention&gt;(); configurationBuilder.ConfigureDomainModelConventions(domainModel =&gt; { domainModel.ConfigureIdentityConventions(); domainModel.ConfigureWrapperValueObjectConventions(); domainModel.ConfigureEntityConventions(); domainModel.ConfigureDomainEventConventions(); }); } } ConfigureDomainModelConventions() itself does not have any effect other than to invoke its action, which allows the specific mapping kinds to be chosen. The inner calls, such as to ConfigureIdentityConventions(), configure the various conventions. Thanks to the provided conventions, no manual boilerplate mappings are needed, like conversions to primitives. The developer need only write meaningful mappings, such as the maximum length of a string property. Since only conventions are registered, regular mappings can override any part of the provided behavior. The conventions map each domain object type explicitly and are trimmer-safe. Third-Party Mappings​ If there are other concerns than Entity Framework that need to map each domain object, they can benefit from the same underlying mechanism. For example, JSON mappings for additional JSON libraries could made. A concrete configurator can be created implementing IEntityConfigurator, IDomainEventConfigurator, IIdentityConfigurator, or IWrapperValueObjectConfigurator. For example, to log each concrete entity type: public sealed clas LoggingEntityConfigurator : Architect.DomainModeling.Configuration.IEntityConfigurator { // Note: The attributes on the type parameter may look complex, but are provided by the IDE when implementing the interface public void ConfigureEntity&lt;[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] TEntity&gt;( in Architect.DomainModeling.Configuration.IEntityConfigurator.Args args) where TEntity : IEntity { Console.WriteLine($&quot;Registered entity {typeof(TEntity).Name}.&quot;); } } The ConfigureEntity() method can then be invoked once for each annotated entity type as follows: var entityConfigurator = new LoggingEntityConfigurator(); MyDomainLayerAssemblyName.EntityDomainModelConfigurator.ConfigureEntities(entityConfigurator); // If we have multiple assemblies containing entities MyOtherDomainLayerAssemblyName.EntityDomainModelConfigurator.ConfigureEntities(entityConfigurator); The static EntityDomainModelConfigurator (and corresponding types for the other kinds of domain object) is generated once for each assembly that contains such domain objects. Its ConfigureEntities(IEntityConfigurator) method calls back into the given configurator, once for each annotated entity type in the assembly. Structural Equality​ Value objects (including identities and wrappers) should have structural equality, i.e. their equality should depend on their contents. For example, new Color(1, 1, 1) == new Color(1, 1, 1) should evaluate to true. The source generators provide this for all Equals() overloads and for GetHashCode(). Where applicable, CompareTo() is treated the same way. The provided structural equality is non-recursive: a value object's properties are expected to each be of a type that itself provides structural equality, such as a primitive, a ValueObject, a WrapperValueObject&lt;TValue&gt;, or an IIdentity&lt;T&gt;. The generators also provide structural equality for members that are of collection types, by comparing the elements. Even nested collections are account for, as long as the nesting is direct, e.g. int[][], Dictionary&lt;int, List&lt;string&gt;&gt;, or int[][][]. For CompareTo(), a structural implementation for collections is not supported, and the generators will skip CompareTo() if any property lacks the IComparable&lt;TSelf&gt; interface. The logic for structurally comparing collection types is made publicly available through the EnumerableComparer, DictionaryComparer, and LookupComparer types. The collection equality checks inspect and compare the collections as efficiently as possible. Optimized paths are in place for common collection types. Sets, being generally order-agnostic, are special-cased: they dictate their own comparers; a set is never equal to a non-set (unless both are null or both are empty); two sets are equal if each considers the other to contain all of its elements. Dictionary and lookup equality is similar to set equality when it comes to their keys. For the sake of completeness, the collection comparers also provide overloads for the non-generic IEnumerable. These should be avoided. Working with non-generic enumerables tends to be inefficient due to virtual calls and boxing. These overloads work hard to return identical results to the generic overloads, at additional costs to efficiency. Testing​ Generated Files​ While &quot;Go To Definition&quot; works for inspecting source-generated code, sometimes you may want to have the generated code in files. To have source generators write a copy to a file for each generated piece of code, add the following to the project file containing your source-generated types and find the files in the obj directory: &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;True&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)/GeneratedFiles&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Debugging​ Source generators can be debugged by enabling the following (outcommented) line in the DomainModeling.Generator project. To start debugging, rebuild and choose the current Visual Studio instance in the dialog that appears. if (!System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#about","content":" note Domain Modelling -DDD, Entity and more. Here I will show just the builder  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonBuilder.cs This is the CSharp Project that references Architect.DomainModeling &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Architect.DomainModeling&quot; Version=&quot;3.0.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#generated-files-1","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonBuilder.g.cs using System; using System.Collections.Generic; using System.Diagnostics.CodeAnalysis; using System.Globalization; #nullable disable namespace Builder { /// &lt;summary&gt; /// &lt;para&gt; /// Implements the Builder pattern to construct &lt;see cref=&quot;Builder.Person&quot;/&gt; objects for testing purposes. /// &lt;/para&gt; /// &lt;para&gt; /// Where production code relies on the type's constructor, test code can rely on this builder. /// That way, if the constructor changes, only the builder needs to be adjusted, rather than lots of test methods. /// &lt;/para&gt; /// &lt;/summary&gt; /* Generated */ public partial class PersonBuilder { private string FirstName { get; set; } = &quot;FirstName&quot;; public PersonBuilder WithFirstName(string value) =&gt; this.With(b =&gt; b.FirstName = value); private string LastName { get; set; } = &quot;LastName&quot;; public PersonBuilder WithLastName(string value) =&gt; this.With(b =&gt; b.LastName = value); private PersonBuilder With(Action&lt;PersonBuilder&gt; assignment) { assignment(this); return this; } public Builder.Person Build() { var result = new Builder.Person( firstName: this.FirstName, lastName: this.LastName); return result; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#download-example-net--c-","content":" tip Download Example project Architect.DomainModeling   ","version":"Next","tagName":"h3"},{"title":"Share Architect.DomainModeling​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#share-architectdomainmodeling","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Architect.DomainModeling  ","version":"Next","tagName":"h3"},{"title":"In the same category (Builder) - 4 other generators​","type":1,"pageTitle":"Architect.DomainModeling by Timo van Zijll Langhout","url":"/RSCG_Examples/v2/docs/Architect.DomainModeling#in-the-same-category-builder---4-other-generators","content":" BuilderGenerator​  Fluentify​  Hsu.Sg.FluentMember​  StepwiseBuilderGenerator​ ","version":"Next","tagName":"h3"},{"title":"ArgumentParsing by","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ArgumentParsing","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#info","content":" info Name: ArgumentParsing Source generator based command line arguments parser Author: NuGet:https://www.nuget.org/packages/ArgumentParsing/ You can find more details at https://github.com/DoctorKrolic/ArgumentParsing Source: https://github.com/DoctorKrolic/ArgumentParsing  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#original-readme","content":" note Argument Parsing Library for command line arguments parsing with intuitive API in declarative style, allowing you to build complex command line applications by simply declaring options type and annotating its members with attributes to get the desired behavior. All logic is source-generated, making this library completely AOT-friendly! Overview​ Best works on latest .NET version, but is .NET Standard 2.0 compatible, meaning it works on a huge variety of .NET versions, including .NET FrameworkProvides simple declarative API: you define what you want and the library figures out how to achieve thatSupports wide variety of types, including nullable value types and immutable sequences like ImmutableArray&lt;T&gt;Good integration with modern C# features (e.g. you can specify a required option/parameter by making its corresponding property required)Provides default implementations of --help and --version commands with additional customizationAll parsing logic is entirely source-generated, making this library completely NativeAOT-friendlyDelivers rich developer experience: the editor provides real-time diagnostics, including error detection, code suggestions and more as you typeIncludes detailed and comprehensive wiki documentation Quick start example​ using ArgumentParsing; using ArgumentParsing.Generated; using ArgumentParsing.Results; using ArgumentParsing.SpecialCommands.Help; using System; using System.Collections.Immutable; using System.Linq; namespace SimpleSumApp; partial class Program { private static void Main(string[] args) { ParseArguments(args).ExecuteDefaults(ExecuteMainApp); } [GeneratedArgumentParser] private static partial ParseResult&lt;Options&gt; ParseArguments(string[] args); private static void ExecuteMainApp(Options options) { // At this point all errors and special cases are handled, // so we get valid options object we can work with var sum = options.FirstRequiredParameter + options.SecondRequiredParameter; if (options.Verbose) { Console.WriteLine($&quot;Sum of 2 required parameters: {sum}&quot;); } var remainingSum = options.RemainingParameters.Sum(); if (options.Verbose) { Console.WriteLine($&quot;Sum of remaining parameters: {remainingSum}&quot;); } Console.WriteLine($&quot;Total sum: {sum + remainingSum}&quot;); } } [OptionsType] class Options { [Option('v'), HelpInfo(&quot;Enables verbose logging&quot;)] public bool Verbose { get; init; } [Parameter(0)] public required int FirstRequiredParameter { get; init; } [Parameter(1)] public required int SecondRequiredParameter { get; init; } [RemainingParameters] public ImmutableArray&lt;int&gt; RemainingParameters { get; init; } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#about","content":" note Transform command line arguments into strongly typed objects  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#example-source-csproj-source-files","content":" CSharp ProjectProgram.csFileProcessorOptions.cs This is the CSharp Project that references ArgumentParsing &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;!--&lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\src\\ArgumentParsing\\ArgumentParsing.csproj&quot; /&gt; &lt;ProjectReference Include=&quot;..\\src\\ArgumentParsing.Generators\\ArgumentParsing.Generators.csproj&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt;--&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ArgumentParsing&quot; Version=&quot;0.3.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ExampleProject.FileProcessorOptions.g.csHelpCommandHandler.ExampleProject.FileProcessorOptions.g.csVersionCommandHandler.ArgPars.g.cs // &lt;auto-generated/&gt; #nullable disable #pragma warning disable namespace ArgumentParsing.Generated { internal static partial class ParseResultExtensions { /// &lt;summary&gt; /// Executes common default actions for the given &lt;see cref=&quot;global::ArgumentParsing.Results.ParseResult{TOptions}&quot;/&gt; /// &lt;list type=&quot;bullet&quot;&gt; /// &lt;item&gt;If &lt;paramref name=&quot;result&quot;/&gt; is in &lt;see cref=&quot;global::ArgumentParsing.Results.ParseResultState.ParsedOptions&quot;/&gt; state invokes provided &lt;paramref name=&quot;action&quot;/&gt; with parsed options object&lt;/item&gt; /// &lt;item&gt;If &lt;paramref name=&quot;result&quot;/&gt; is in &lt;see cref=&quot;global::ArgumentParsing.Results.ParseResultState.ParsedWithErrors&quot;/&gt; state writes help screen text with parse errors to &lt;see cref=&quot;global::System.Console.Error&quot;/&gt; and exits application with code 1&lt;/item&gt; /// &lt;item&gt;If &lt;paramref name=&quot;result&quot;/&gt; is in &lt;see cref=&quot;global::ArgumentParsing.Results.ParseResultState.ParsedSpecialCommand&quot;/&gt; state executes parsed handler and exits application with code, returned from the handler&lt;/item&gt; /// &lt;/list&gt; /// &lt;/summary&gt; /// &lt;param name=&quot;result&quot;&gt;Parse result&lt;/param&gt; /// &lt;param name=&quot;action&quot;&gt;Action, which will be invoked if options type is correctly parsed&lt;/param&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;ArgumentParsing.Generators.ArgumentParserGenerator&quot;, &quot;0.3.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute] public static void ExecuteDefaults(this global::ArgumentParsing.Results.ParseResult&lt;global::ExampleProject.FileProcessorOptions&gt; result, global::System.Action&lt;global::ExampleProject.FileProcessorOptions&gt; action) { switch (result.State) { case global::ArgumentParsing.Results.ParseResultState.ParsedOptions: action(result.Options); break; case global::ArgumentParsing.Results.ParseResultState.ParsedWithErrors: string errorScreenText = global::ArgumentParsing.Generated.HelpCommandHandler_ExampleProject_FileProcessorOptions.GenerateHelpText(result.Errors); global::System.Console.Error.WriteLine(errorScreenText); global::System.Environment.Exit(1); break; case global::ArgumentParsing.Results.ParseResultState.ParsedSpecialCommand: int exitCode = result.SpecialCommandHandler.HandleCommand(); global::System.Environment.Exit(exitCode); break; } } } } namespace ExampleProject { partial class Program { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;ArgumentParsing.Generators.ArgumentParserGenerator&quot;, &quot;0.3.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute] private static partial global::ArgumentParsing.Results.ParseResult&lt;global::ExampleProject.FileProcessorOptions&gt; ParseArguments(string[] args) { bool Verbose_val = default(bool); global::ExampleProject.OutputFormat OutputFormat_val = default(global::ExampleProject.OutputFormat); long MaxFileSizeBytes_val = default(long); string OutputFile_val = default(string); string InputFile_val = default(string); global::System.Collections.Immutable.ImmutableArray&lt;string&gt;.Builder remainingParametersBuilder = global::System.Collections.Immutable.ImmutableArray.CreateBuilder&lt;string&gt;(); int state = -3; int seenOptions = 0; global::System.Collections.Generic.HashSet&lt;global::ArgumentParsing.Results.Errors.ParseError&gt; errors = null; global::System.Span&lt;global::System.Range&gt; longArgSplit = stackalloc global::System.Range[2]; global::System.ReadOnlySpan&lt;char&gt; latestOptionName = default(global::System.ReadOnlySpan&lt;char&gt;); string previousArgument = null; int parameterIndex = 0; foreach (string arg in args) { if (state == -3) { switch (arg) { case &quot;--help&quot;: return new global::ArgumentParsing.Results.ParseResult&lt;global::ExampleProject.FileProcessorOptions&gt;(new global::ArgumentParsing.Generated.HelpCommandHandler_ExampleProject_FileProcessorOptions()); case &quot;--version&quot;: return new global::ArgumentParsing.Results.ParseResult&lt;global::ExampleProject.FileProcessorOptions&gt;(new global::ArgumentParsing.Generated.VersionCommandHandler()); } state = 0; } global::System.ReadOnlySpan&lt;char&gt; val; bool hasLetters = global::System.Linq.Enumerable.Any(arg, char.IsLetter); bool startsOption = hasLetters &amp;&amp; arg.Length &gt; 1 &amp;&amp; arg.StartsWith('-'); if (state &gt; 0 &amp;&amp; startsOption) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.OptionValueIsNotProvidedError(previousArgument)); state = 0; } if (state != -2) { if (arg.StartsWith(&quot;--&quot;) &amp;&amp; (hasLetters || arg.Length == 2 || arg.Contains('='))) { global::System.ReadOnlySpan&lt;char&gt; slice = global::System.MemoryExtensions.AsSpan(arg, 2); int written = global::System.MemoryExtensions.Split(slice, longArgSplit, '='); latestOptionName = slice[longArgSplit[0]]; switch (latestOptionName) { case &quot;&quot;: if (written == 1) { state = -2; } else { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.UnrecognizedArgumentError(arg)); } continue; case &quot;verbose&quot;: if ((seenOptions &amp; 0b0001) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;verbose&quot;)); } Verbose_val = true; state = -10; seenOptions |= 0b0001; break; case &quot;format&quot;: if ((seenOptions &amp; 0b0010) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;format&quot;)); } state = 2; seenOptions |= 0b0010; break; case &quot;max-size&quot;: if ((seenOptions &amp; 0b0100) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;max-size&quot;)); } state = 3; seenOptions |= 0b0100; break; case &quot;output&quot;: if ((seenOptions &amp; 0b1000) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;output&quot;)); } state = 4; seenOptions |= 0b1000; break; default: errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.UnknownOptionError(latestOptionName.ToString(), arg)); if (written == 1) { state = -1; } goto continueMainLoop; } if (written == 2) { val = slice[longArgSplit[1]]; goto decodeValue; } goto continueMainLoop; } if (startsOption) { global::System.ReadOnlySpan&lt;char&gt; slice = global::System.MemoryExtensions.AsSpan(arg, 1); for (int i = 0; i &lt; slice.Length; i++) { if (state &gt; 0) { val = slice.Slice(i); goto decodeValue; } char shortOptionName = slice[i]; latestOptionName = new global::System.ReadOnlySpan&lt;char&gt;(in slice[i]); switch (shortOptionName) { case 'v': if ((seenOptions &amp; 0b0001) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;v&quot;)); } Verbose_val = true; state = -10; seenOptions |= 0b0001; break; case 'f': if ((seenOptions &amp; 0b0010) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;f&quot;)); } state = 2; seenOptions |= 0b0010; break; case 'm': if ((seenOptions &amp; 0b0100) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;m&quot;)); } state = 3; seenOptions |= 0b0100; break; case 'o': if ((seenOptions &amp; 0b1000) &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError(&quot;o&quot;)); } state = 4; seenOptions |= 0b1000; break; default: if (state &lt;= -10) { val = slice.Slice(i); latestOptionName = new global::System.ReadOnlySpan&lt;char&gt;(in slice[i - 1]); goto decodeValue; } errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.UnknownOptionError(shortOptionName.ToString(), arg)); state = -1; goto continueMainLoop; } } goto continueMainLoop; } } val = global::System.MemoryExtensions.AsSpan(arg); decodeValue: switch (state) { case -1: break; case 2: if (!global::System.Enum.TryParse&lt;global::ExampleProject.OutputFormat&gt;(val, out OutputFormat_val)) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.BadOptionValueFormatError(val.ToString(), latestOptionName.ToString())); } break; case 3: if (!long.TryParse(val, global::System.Globalization.NumberStyles.Integer, global::System.Globalization.CultureInfo.InvariantCulture, out MaxFileSizeBytes_val)) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.BadOptionValueFormatError(val.ToString(), latestOptionName.ToString())); } break; case 4: OutputFile_val = val.ToString(); break; default: switch (parameterIndex++) { case 0: InputFile_val = arg; break; default: remainingParametersBuilder.Add(arg); break; } break; } state = 0; continueMainLoop: previousArgument = arg; } if (state &gt; 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.OptionValueIsNotProvidedError(previousArgument)); } if (parameterIndex &lt;= 0) { errors ??= new(); errors.Add(new global::ArgumentParsing.Results.Errors.MissingRequiredParameterError( &quot;input-file&quot;, 0)); } if (errors != null) { return new global::ArgumentParsing.Results.ParseResult&lt;global::ExampleProject.FileProcessorOptions&gt;(global::ArgumentParsing.Results.Errors.ParseErrorCollection.AsErrorCollection(errors)); } global::ExampleProject.FileProcessorOptions options = new global::ExampleProject.FileProcessorOptions { Verbose = Verbose_val, OutputFormat = OutputFormat_val, MaxFileSizeBytes = MaxFileSizeBytes_val, OutputFile = OutputFile_val, InputFile = InputFile_val, AdditionalFiles = remainingParametersBuilder.ToImmutable(), }; return new global::ArgumentParsing.Results.ParseResult&lt;global::ExampleProject.FileProcessorOptions&gt;(options); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#download-example-net--c","content":" tip Download Example project ArgumentParsing   ","version":"Next","tagName":"h3"},{"title":"Share ArgumentParsing​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#share-argumentparsing","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ArgumentParsing  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"CommandLine\" has the following generators:​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#category-commandline-has-the-following-generators","content":" 1 ArgumentParsing  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ArgumentParsing by","url":"/RSCG_Examples/v2/docs/ArgumentParsing#see-category","content":" CommandLine ","version":"Next","tagName":"h3"},{"title":"AssemblyVersionInfo by Black White Yoshi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#info","content":" info Name: AssemblyVersionInfo AssemblyVersionInfo is a very simple source generator that generates constant strings of your assembly name and version. The intended usage is for the System.CodeDom.Compiler.GeneratedCodeAttribute. Author: Black White Yoshi NuGet:https://www.nuget.org/packages/AssemblyVersionInfo/ You can find more details at https://github.com/BlackWhiteYoshi/AssemblyVersionInfo Source: https://github.com/BlackWhiteYoshi/AssemblyVersionInfo  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#original-readme","content":" note AssemblyVersionInfo AssemblyVersionInfo is a very simple source generator that generates constant strings of your assembly name and version. The intended usage is for the GeneratedCodeAttribute. All it does is generating a the static class Assembly in the namespace AssemblyVersionInfo: // &lt;auto-generated/&gt; namespace AssemblyVersionInfo; internal static class Assembly { public const string NAME = &quot;{{compilation.name}}&quot;; public const string VERSION_MAJOR = &quot;{{compilation.version.Major}}&quot;; public const string VERSION_MINOR = &quot;{{compilation.version.Minor}}&quot;; public const string VERSION_BUILD = &quot;{{compilation.version.Build}}&quot;; public const string VERSION_REVISION = &quot;{{compilation.version.Revision}}&quot;; public const string VERSION = &quot;{{compilation.version}}&quot;; public const string VERSION_MAJOR_MINOR = &quot;{{compilation.version.Major}}.{{compilation.version.Minor}}&quot;; public const string VERSION_MAJOR_MINOR_BUILD = &quot;{{compilation.version.Major}}.{{compilation.version.Minor}}.{{compilation.version.Build}}&quot;; } Get Started​ Add PackageReference to your .csproj file. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AssemblyVersionInfo&quot; Version=&quot;{latest version}&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; Access the strings in the Assembly class. using AssemblyVersionInfo; const string example = $&quot;AssemblyName={Assembly.NAME}, AssemblyVersion={Assembly.VERSION}&quot;; Console.WriteLine(example);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#about","content":" note Generating assembly version and other info from csproj to csharp  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references AssemblyVersionInfo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AssemblyVersionInfo&quot; Version=&quot;1.0.2&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Assembly.g.csBuilderAttribute.g.csNullObjectAttribute.g.csShadowWriter.TheProject.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations namespace AssemblyVersionInfo; /// &lt;summary&gt; /// This class provides constant strings holding information about the Assembly name and version. /// &lt;/summary&gt; [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;AssemblyVersionInfo&quot;, &quot;1.0.2&quot;)] internal static class Assembly { /// &lt;summary&gt; /// The simple name of the assembly. /// &lt;/summary&gt; public const string NAME = &quot;DemoAttr&quot;; /// &lt;summary&gt; /// The major component of the version number, thats usually the first number. /// &lt;/summary&gt; public const string VERSION_MAJOR = &quot;1&quot;; /// &lt;summary&gt; /// The minor component of the version number, thats usually the second number. /// &lt;/summary&gt; public const string VERSION_MINOR = &quot;0&quot;; /// &lt;summary&gt; /// The build component of the version number, thats usually the third number. /// &lt;/summary&gt; public const string VERSION_BUILD = &quot;0&quot;; /// &lt;summary&gt; /// The revision component of the version number, thats usually the fourth number. /// &lt;/summary&gt; public const string VERSION_REVISION = &quot;0&quot;; /// &lt;summary&gt; /// &lt;para&gt;The full version number:&lt;/para&gt; /// &lt;para&gt;{Major}.{Minor}.{Build}.{Revision}&lt;/para&gt; /// &lt;/summary&gt; public const string VERSION = &quot;1.0.0.0&quot;; /// &lt;summary&gt; /// &lt;para&gt;Version number with only major and minor:&lt;/para&gt; /// &lt;para&gt;{Major}.{Minor}&lt;/para&gt; /// &lt;/summary&gt; public const string VERSION_MAJOR_MINOR = &quot;1.0&quot;; /// &lt;summary&gt; /// &lt;para&gt;Version number with only major, minor and build:&lt;/para&gt; /// &lt;para&gt;{Major}.{Minor}.{Build}&lt;/para&gt; /// &lt;/summary&gt; public const string VERSION_MAJOR_MINOR_BUILD = &quot;1.0.0&quot;; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#download-example-net--c","content":" tip Download Example project AssemblyVersionInfo   ","version":"Next","tagName":"h3"},{"title":"Share AssemblyVersionInfo​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#share-assemblyversioninfo","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AssemblyVersionInfo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AssemblyVersionInfo by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AssemblyVersionInfo#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"AspectGenerator by Igor Tkachev","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AspectGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#info","content":" info Name: AspectGenerator The Aspect Generator can help you easily create your own aspects. Author: Igor Tkachev NuGet:https://www.nuget.org/packages/AspectGenerator/ You can find more details at https://github.com/igor-tkachev/AspectGenerator Source: https://github.com/igor-tkachev/AspectGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#original-readme","content":" note Aspect Generator The Aspect Generator can help you easily create your own aspects. [!WARNING]Interceptors are an experimental compiler feature planned to ship in .NET 8 (with support for C# only). The feature may be subject to breaking changes or removal in a future release. [!NOTE] The community still has doubts about the usefulness of this feature. On the one hand, it looks like not kosher fake AOP. On the other hand, it works just fine. This project can help you to try it and share your own opinion. Download and Install​ Install nuget &gt; dotnet add package AspectGenerator Modify your project file &lt;PropertyGroup&gt; ... &lt;LangVersion&gt;preview&lt;/LangVersion&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);AspectGenerator&lt;/InterceptorsPreviewNamespaces&gt; &lt;!-- Add these settings to specify generated files output path --&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GeneratedFiles&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Read documentation​ How it works Creating your own aspect OpenTelemetry Aspect example​ Create OpenTelemetryFactory and Metrics aspect: using System; using System.Diagnostics; using OpenTelemetry; using OpenTelemetry.Resources; using OpenTelemetry.Trace; namespace AspectGenerator { /// &lt;summary&gt; /// Initializes OpenTelemetry. /// &lt;/summary&gt; static class OpenTelemetryFactory { public static TracerProvider? Create() { return Sdk.CreateTracerProviderBuilder() .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(&quot;MySample&quot;)) .AddSource(&quot;Sample.Aspect&quot;) .AddConsoleExporter() .Build(); } } /// &lt;summary&gt; /// Metrics aspect. /// &lt;/summary&gt; [Aspect( // Specify the name of the method used in the 'using' statement // that returns an IDisposable object. OnUsing = nameof(OnUsing) )] [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] sealed class MetricsAttribute : Attribute { static readonly ActivitySource _activitySource = new(&quot;Sample.Aspect&quot;); public static Activity? OnUsing(InterceptInfo info) { return _activitySource.StartActivity(info.MemberInfo.Name); } } } Use it: using System; using System.Threading; using Aspects; namespace OpenTelemetryAspect { static class Program { static void Main() { using var _ = OpenTelemetryFactory.Create(); Method1(); Method2(); Method1(); } [Metrics] public static void Method1() { Thread.Sleep(100); } [Metrics] public static void Method2() { Thread.Sleep(200); } } } Application output: Activity.TraceId: d47417e726824c7b39055efb4685a9dd Activity.SpanId: 12fbf29f5b622e13 Activity.TraceFlags: Recorded Activity.ActivitySourceName: Sample.Aspect Activity.DisplayName: Method1 Activity.Kind: Internal Activity.StartTime: 2023-11-22T00:50:15.9079068Z Activity.Duration: 00:00:00.1016180 Resource associated with Activity: service.name: MySample service.instance.id: 86dbd377-c850-42a3-b878-be07de30faf1 telemetry.sdk.name: opentelemetry telemetry.sdk.language: dotnet telemetry.sdk.version: 1.6.0 Activity.TraceId: b90735bfb52cb0b52a504d02bc5ead2e Activity.SpanId: 75109ef3af25a3e9 Activity.TraceFlags: Recorded Activity.ActivitySourceName: Sample.Aspect Activity.DisplayName: Method2 Activity.Kind: Internal Activity.StartTime: 2023-11-22T00:50:16.0360160Z Activity.Duration: 00:00:00.2058166 Resource associated with Activity: service.name: MySample service.instance.id: 86dbd377-c850-42a3-b878-be07de30faf1 telemetry.sdk.name: opentelemetry telemetry.sdk.language: dotnet telemetry.sdk.version: 1.6.0 Activity.TraceId: e9653008f381b6330a8e538e02b7a61d Activity.SpanId: be3d7cd1d4376bd7 Activity.TraceFlags: Recorded Activity.ActivitySourceName: Sample.Aspect Activity.DisplayName: Method1 Activity.Kind: Internal Activity.StartTime: 2023-11-22T00:50:16.2517480Z Activity.Duration: 00:00:00.1135186 Resource associated with Activity: service.name: MySample service.instance.id: 86dbd377-c850-42a3-b878-be07de30faf1 telemetry.sdk.name: opentelemetry telemetry.sdk.language: dotnet telemetry.sdk.version: 1.6.0 Generated code: // &lt;auto-generated/&gt; #pragma warning disable #nullable enable using System; using SR = System.Reflection; using SLE = System.Linq.Expressions; using SCG = System.Collections.Generic; namespace Aspects { static partial class Interceptors { static SR.MethodInfo GetMethodInfo(SLE.Expression expr) { return expr switch { SLE.MethodCallExpression mc =&gt; mc.Method, _ =&gt; throw new InvalidOperationException() }; } static SR.MethodInfo MethodOf&lt;T&gt;(SLE.Expression&lt;Func&lt;T&gt;&gt; func) =&gt; GetMethodInfo(func.Body); static SR.MethodInfo MethodOf (SLE.Expression&lt;Action&gt; func) =&gt; GetMethodInfo(func.Body); static SR. MemberInfo Method1_Interceptor_MemberInfo = MethodOf(() =&gt; OpenTelemetryAspect.Program.Method1()); static SCG.Dictionary&lt;string,object?&gt; Method1_Interceptor_AspectArguments_0 = new () { }; // /// &lt;summary&gt; /// Intercepts OpenTelemetryAspect.Program.Method1(). /// &lt;/summary&gt; // // Intercepts Method1(). [System.Runtime.CompilerServices.InterceptsLocation(@&quot;P:\\AspectGenerator\\Examples\\OpenTelemetryAspect\\Program.cs&quot;, line: 14, character: 4)] // // Intercepts Method1(). [System.Runtime.CompilerServices.InterceptsLocation(@&quot;P:\\AspectGenerator\\Examples\\OpenTelemetryAspect\\Program.cs&quot;, line: 16, character: 4)] // [System.Runtime.CompilerServices.CompilerGenerated] //[System.Diagnostics.DebuggerStepThrough] public static void Method1_Interceptor() { // Aspects.MetricsAttribute // var __info__0 = new Aspects.InterceptInfo&lt;Void&gt; { MemberInfo = Method1_Interceptor_MemberInfo, AspectType = typeof(Aspects.MetricsAttribute), AspectArguments = Method1_Interceptor_AspectArguments_0, }; using (Aspects.MetricsAttribute.OnUsing(__info__0)) { OpenTelemetryAspect.Program.Method1(); } } static SR. MemberInfo Method2_Interceptor_MemberInfo = MethodOf(() =&gt; OpenTelemetryAspect.Program.Method2()); static SCG.Dictionary&lt;string,object?&gt; Method2_Interceptor_AspectArguments_0 = new () { }; // /// &lt;summary&gt; /// Intercepts OpenTelemetryAspect.Program.Method2(). /// &lt;/summary&gt; // // Intercepts Method2(). [System.Runtime.CompilerServices.InterceptsLocation(@&quot;P:\\AspectGenerator\\Examples\\OpenTelemetryAspect\\Program.cs&quot;, line: 15, character: 4)] // [System.Runtime.CompilerServices.CompilerGenerated] //[System.Diagnostics.DebuggerStepThrough] public static void Method2_Interceptor() { // Aspects.MetricsAttribute // var __info__0 = new Aspects.InterceptInfo&lt;Void&gt; { MemberInfo = Method2_Interceptor_MemberInfo, AspectType = typeof(Aspects.MetricsAttribute), AspectArguments = Method2_Interceptor_AspectArguments_0, }; using (Aspects.MetricsAttribute.OnUsing(__info__0)) { OpenTelemetryAspect.Program.Method2(); } } } } More advanced version of the Metrics aspect can also set activity status and support await using. [Aspect( OnUsing = nameof(OnUsing), OnAsyncUsing = nameof(OnAsyncUsing), OnFinally = nameof(OnFinally) )] [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] sealed class MetricsAttribute : Attribute { static readonly ActivitySource _activitySource = new(&quot;Sample.Aspect&quot;); public static Activity? OnUsing(InterceptInfo info) { var activity = _activitySource.StartActivity(info.MemberInfo.Name); info.Tag = activity; return activity; } class AsyncActivity(Activity activity) : IAsyncDisposable { public readonly Activity Activity = activity; public ValueTask DisposeAsync() { Activity.Dispose(); return ValueTask.CompletedTask; } } public static IAsyncDisposable? OnAsyncUsing(InterceptInfo info) { var activity = _activitySource.StartActivity(info.MemberInfo.Name); if (activity == null) return null; var asyncActivity = new AsyncActivity(activity); info.Tag = asyncActivity; return asyncActivity; } public static void OnFinally(InterceptInfo info) { switch (info) { case { Tag: Activity activity, Exception: var ex } : SetStatus(activity, ex); break; case { Tag: AsyncActivity aa, Exception: var ex } : SetStatus(aa.Activity, ex); break; } static void SetStatus(Activity activity, Exception? ex) =&gt; activity.SetStatus(ex is null ? ActivityStatusCode.Ok : ActivityStatusCode.Error); } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#about","content":" note AOP for methods in the same project. Uses interceptors  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csAG.cs This is the CSharp Project that references AspectGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AspectGenerator&quot; Version=&quot;0.0.9-preview&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);AspectGenerator&lt;/InterceptorsPreviewNamespaces&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AspectAttribute.g.csInterceptors.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable using System; #if AG_GENERATE_API || !AG_NOT_GENERATE_API namespace AspectGenerator { /// &lt;summary&gt; /// &lt;para&gt;Defines an aspect.&lt;/para&gt; /// &lt;para&gt;Create a new attribute decorated with this attribute to define an aspect.&lt;/para&gt; /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] #if AG_PUBLIC_API public #endif sealed class AspectAttribute : Attribute { public string? OnInit { get; set; } public string? OnUsing { get; set; } public string? OnUsingAsync { get; set; } public string? OnBeforeCall { get; set; } public string? OnBeforeCallAsync { get; set; } public string? OnCall { get; set; } public string? OnAfterCall { get; set; } public string? OnAfterCallAsync { get; set; } public string? OnCatch { get; set; } public string? OnCatchAsync { get; set; } public string? OnFinally { get; set; } public string? OnFinallyAsync { get; set; } public string[]? InterceptMethods { get; set; } public bool UseInterceptType { get; set; } public bool PassArguments { get; set; } public bool UseInterceptData { get; set; } } #if AG_PUBLIC_API public #endif enum InterceptType { OnInit, OnUsing, OnBeforeCall, OnAfterCall, OnCatch, OnFinally } #if AG_PUBLIC_API public #endif enum InterceptResult { Continue, Return, ReThrow = Continue, IgnoreThrow = Return } #if AG_PUBLIC_API public #endif struct Void { } #if AG_PUBLIC_API public #endif partial class InterceptInfo { public object? Tag; public InterceptType InterceptType; public InterceptResult InterceptResult; public Exception? Exception; public InterceptInfo? PreviousInfo; public System.Reflection.MemberInfo MemberInfo; public object?[]? MethodArguments; public Type AspectType; public System.Collections.Generic.Dictionary&lt;string,object?&gt; AspectArguments; } #if AG_PUBLIC_API public #endif partial class InterceptInfo&lt;T&gt; : InterceptInfo { public T ReturnValue; } #if AG_PUBLIC_API public #endif partial struct InterceptData&lt;T&gt; { public object? Tag; public InterceptType InterceptType; public InterceptResult InterceptResult; public Exception? Exception; public InterceptInfo&lt;T&gt;? PreviousInfo; public System.Reflection.MemberInfo MemberInfo; public object?[]? MethodArguments; public Type AspectType; public System.Collections.Generic.Dictionary&lt;string,object?&gt; AspectArguments; public T ReturnValue; } } #endif #if AG_GENERATE_InterceptsLocationAttribute || !AG_NOT_GENERATE_InterceptsLocationAttribute namespace System.Runtime.CompilerServices { [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] sealed class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute { } } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#download-example-net--c","content":" tip Download Example project AspectGenerator   ","version":"Next","tagName":"h3"},{"title":"Share AspectGenerator​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#share-aspectgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AspectGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AspectGenerator by Igor Tkachev","url":"/RSCG_Examples/v2/docs/AspectGenerator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"AutoCtor by Cameron MacFarland","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoCtor","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#info","content":" info Name: AutoCtor Source Generator to automatically create a constructor with all the readonly fields set. Author: Cameron MacFarland NuGet:https://www.nuget.org/packages/AutoCtor/ You can find more details at Source: https://github.com/distantcam/AutoCtor  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#original-readme","content":" note AutoCtor AutoCtor is a Roslyn Source Generator that will automatically create a constructor for your class for use with constructor Dependency Injection. NuGet packages​ https://nuget.org/packages/AutoCtor/ Usage​ Your code​ [AutoConstruct] public partial class ExampleClass { private readonly ICustomService _customService; } What gets generated​ partial class ExampleClass { public ExampleClass(ICustomService customService) { _customService = customService; } } More examples​ You can also initialize readonly fields, and AutoCtor will not include them in the constructor. [AutoConstruct] public partial class ClassWithInitializer { private readonly ICustomService _customService; private readonly IList&lt;string&gt; _list = new List&lt;string&gt;(); } partial class ClassWithInitializer { public ClassWithInitializer(ICustomService customService) { _customService = customService; // no code to set _list } } If there is a single base constructor with parameters, AutoCtor will include that base constructor in the constructor it creates. public abstract class BaseClass { protected IAnotherService _anotherService; public BaseClass(IAnotherService anotherService) { _anotherService = anotherService; } } [AutoConstruct] public partial class ClassWithBase : BaseClass { private readonly ICustomService _customService; } partial class ClassWithBase { public ClassWithBase(IAnotherService anotherService, ICustomService customService) : base(anotherService) { _customService = customService; } } Embedding the attributes in your project​ By default, the [AutoConstruct] attributes referenced in your project are contained in an external dll. It is also possible to embed the attributes directly in your project. To do this, you must do two things: Define the MSBuild constant AUTOCTOR_EMBED_ATTRIBUTES. This ensures the attributes are embedded in your project.Add compile to the list of excluded assets in your &lt;PackageReference&gt; element. This ensures the attributes in your project are referenced, insted of the AutoCtor.Attributes.dll library. Your project file should look like this: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;!-- Define the MSBuild constant --&gt; &lt;DefineConstants&gt;AUTOCTOR_EMBED_ATTRIBUTES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;AutoCtor&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;compile;runtime&quot; /&gt; &lt;!-- ☝ Add compile to the list of excluded assets. --&gt; &lt;/Project&gt; Preserving usage of the [AutoConstruct] attribute​ The [AutoConstruct] attributes are decorated with the [Conditional] attribute, so their usage will not appear in the build output of your project. If you use reflection at runtime you will not find the [AutoConstruct] attributes. If you wish to preserve these attributes in the build output, you can define the AUTOCTOR_USAGES MSBuild variable. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;!-- Define the MSBuild constant --&gt; &lt;DefineConstants&gt;AUTOCTOR_USAGES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;AutoCtor&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#about","content":" note Generate constructor from non-initialized fields  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references AutoCtor &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoCtor&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoConstructAttribute.g.csAutoCtorDemo.Person.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by https://github.com/distantcam/AutoCtor // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #if AUTOCTOR_EMBED_ATTRIBUTES namespace AutoCtor { [System.Runtime.CompilerServices.CompilerGenerated] [System.AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)] [System.Diagnostics.Conditional(&quot;AUTOCTOR_USAGES&quot;)] internal sealed class AutoConstructAttribute : System.Attribute { [System.Runtime.CompilerServices.CompilerGenerated] public AutoConstructAttribute() { } } } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#download-example-net--c","content":" tip Download Example project AutoCtor   ","version":"Next","tagName":"h3"},{"title":"Share AutoCtor​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#share-autoctor","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoCtor  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Constructor\" has the following generators:​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#category-constructor-has-the-following-generators","content":" 1 AutoConstructor  2 AutoCtor  3 AutoDeconstruct  4 ConstructorGenerator  5 PrimaryParameter  6 QuickConstructor  7 sourcedepend  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoCtor by Cameron MacFarland","url":"/RSCG_Examples/v2/docs/AutoCtor#see-category","content":" Constructor ","version":"Next","tagName":"h3"},{"title":"AsyncIt by Oleg Shilo","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AsyncIt","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#info","content":" info Name: AsyncIt AsyncIt is a C# source generator (CodeAnalyzer) for automatic generation of async/sync versions of the type API. Author: Oleg Shilo NuGet:https://www.nuget.org/packages/AsyncIt/ You can find more details at https://github.com/oleg-shilo/AsyncIt/ Source: https://github.com/oleg-shilo/AsyncIt  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#original-readme","content":" note AsyncIt AsyncIt is a NuGet package library that allows the automatic generation of additional synchronous and asynchronous APIs for existing user codebase and external packages. It aims to extend user-defined CLR types by automating the otherwise manual process of defining repetitive and straightforward routines. Thus, the development, maintenance and consumption of the released API are simplified due to the balanced (close to ideal) ratio of the synchronous and asynchronous API endpoints: Every functionality point has both Async and Sync API endpoints available. This content is an extract from the project's main Wiki page. It is highly recommended that you read it, as it explains the deep reasons behind this project and details the more concrete usage scenarios. Overview​ AsyncIt is a source generator that is integrated into the .NET build process as a special tool type - the so-called &quot;Analyzer&quot;. It is invoked by the compiler during the assembly build and allows the injection of missing API endpoints based on the present assembly API. Thus, if the assembly being built has the GetStatus but not the GetStatusAsync method, then AsyncIt will generate the missing method with a straightforward implementation. It can also generate the synchronous API if it is not present in the original codebase: The API defines synchronous methods only: Original code public partial class DeviceLib { public static string GetStatus() {. . .} } Code that is fed to the C# compiler public partial class DeviceLib { public static string GetStatus() {. . .} } public partial class DeviceLib // AsyncIt generated { public static Task&lt;string&gt; GetStatusAsync() =&gt; TaskRun(() =&gt; GetStatus()); } AsyncIt does not do anything fancy. Like the await keyword, it cannot magically convert a synchronous routine into an asynchronous one and vice versa. Instead, it simply emits the code that the developer would type manually if he/she decides to use the API in a concurrency way that the API author did not anticipate. AsyncIt can also be used to balance API of the external assemblies (e.g. .NET base classes, nuget packages) This is where AsyncIt is placed in the overall .NET concurrency model architecture: Usage​ In order to integrate AsyncIt with your .NET project, add AsyncIt Nuget package. dotnet add package AsyncIt That's it. Now, you can mark any type for which you want to generate async/sync methods with the [Async] attribute (see the details below), and the new source code will be generated and included in the build. You can always inspect the generated code in the Visual Studio solution explorer: Extending user-defined types​ In this scenario, a user type containing sync/async methods is extended by additional source file(s) implementing additional API methods. The type can be extended either with an additional partial class definition or by the extension methods class. A typical usage can be illustrated by the code below. Async scenario: [Async] public partial class BankService { public partial class OrderService { public Order GetOrder(int id) // and GetOrderAsync will be created by AsyncIt {...} } } ... async Task OnButtonClick(object sender, EventArgs args) { Order order = await service.GetOrderAsync(this.OrderId); orderLabel.Text = order.Name; } Sync scenario: [Async(Interface = Interface.Sync)] partial class AccountService { public async Task&lt;Account&gt; GetAccountAsync(int id) // and GetAccount will be created by AsyncIt {...} } ... static void Main() { var account = new AccountService().GetAccount(333); File.WriteAllText($&quot;account_{account.Id}.txt&quot;, account.Balance.ToString()); } Extending external types​ In this scenario, an external type (from a referenced assembly) containing sync/async methods is extended by additional source file(s) implementing additional API methods. The type can be extended by the extension methods class. A typical usage can be illustrated by the code below for generating on-fly synchronous methods for type HttpClient . Async scenario: // For all synchronous methods of DirectoryInfo will be created an async equivalent by AsyncIt [assembly: AsyncExternal(typeof(DirectoryInfo), Interface.Async)] ... async Task OnButtonClick(object sender, EventArgs args) { var info = new DirectoryInfo(workingDir); string[] folders = await info.GetDirectoriesAsync(&quot;*&quot;, SearchOption.AllDirectories); foreach(var path in folders) foldersListBox.Add(path); } Sync scenario: // For all asynchronous methods of HttpClient will be created a sync equivalent by AsyncIt [assembly: AsyncExternal(typeof(HttpClient), Interface.Sync)]; ... static void Main() =&gt; File.WriteAllText( &quot;temperature.txt&quot;, new HttpClient().GetString(&quot;https://www.weather.com/au/melbourne/temperature&quot;));   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#about","content":" note Generate async from sync or sync from async  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references AsyncIt &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AsyncIt&quot; Version=&quot;1.0.0-pre4&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AsyncAttribute.g.csPerson.AsyncDemo.Person.g.cs // &lt;auto-generated/&gt; using System; using System.Reflection; namespace AsyncIt { [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class AsyncAttribute : Attribute { public AsyncAttribute() { } public AsyncAttribute(Algorithm algorithm, Interface @interface) { Algorithm = algorithm; Interface = @interface; } public AsyncAttribute(Interface @interface, Algorithm algorithm) { Algorithm = algorithm; Interface = @interface; } public AsyncAttribute(Algorithm algorithm) { Algorithm = algorithm; } public AsyncAttribute(Interface @interface) { Interface = @interface; } public Algorithm Algorithm { get; set; } public Interface Interface { get; set; } internal string TypeGenericArgs; internal string NamePattern; } [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)] public sealed class AsyncExternalAttribute : Attribute { public AsyncExternalAttribute() { } public AsyncExternalAttribute(Type type) { Type = type; } public AsyncExternalAttribute(Type type, Interface @interface) { Type = type; Interface = @interface; } public AsyncExternalAttribute(Type type, Interface @interface, string methods) { Type = type; Interface = @interface; Methods = methods; } public Interface Interface { get; set; } public Type Type { get; set; } public string Methods { get; set; } = &quot;*&quot;; } [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class IgnoreAttribute : Attribute { } public enum Interface { Async, Sync, Full, } public enum Algorithm { PartialType, ExtensionMethods } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#download-example-net--c","content":" tip Download Example project AsyncIt   ","version":"Next","tagName":"h3"},{"title":"Share AsyncIt​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#share-asyncit","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AsyncIt  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Async\" has the following generators:​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#category-async-has-the-following-generators","content":" 1 AsyncIt  2 HsuSgSync  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AsyncIt by Oleg Shilo","url":"/RSCG_Examples/v2/docs/AsyncIt#see-category","content":" Async ","version":"Next","tagName":"h3"},{"title":"AutoDTO by Ohorodnikov","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoDTO","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#info","content":" info Name: AutoDTO Auto copy properties from bl mode to dto Author: Ohorodnikov NuGet:https://www.nuget.org/packages/AutoDTO/ You can find more details at https://github.com/Ohorodnikov/AutoDto Source: https://github.com/Ohorodnikov/AutoDto  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#original-readme","content":" note AutoDto This tool allows to auto create DTO model from BL model in compile time. It supports different strategies for relations, such as ReplaceToIdProperty, AddIdProperty and ReplaceToDtoProperty Setup​ To use AutoDto, first install the NuGet package: dotnet add package AutoDto Declare partial DTO type like public partial SomeDto {}Add attribute [DtoFrom(typeof(SomeBlType))]Build project Full simple setup: [DtoFrom(typeof(SomeBlType))] public partial SomeDto {} AutoDto tool will generate partial SomeDto class with all public properties from SomeBlType. Relation Strategies​ Relation strategy means what to do with relation property during generating DTO. Supported strategies: NoneReplaceToIdPropertyAddIdPropertyReplaceToDtoProperty Usage​ Set strategy in [DtoFrom] attribute after BL type. [DtoFrom(typeof(SomeBlType), RelationStrategy.AddIdProperty)] public partial SomeDto {} If not specified - RelationStrategy.None will be used None​ DTO will have property on BL type ReplaceToIdProperty​ If BL relation property has Id property: DTO will have only RelationPropNameId property of BL relation Id prop type. If BlType has relation with array or enumerable - generated name will be RelationPropNameIds ❗ If no Id found in relation entity - result will be same as with None strategy AddIdProperty​ DTO will have relation type property and Id property is found ReplaceToDtoProperty​ Try find DTO, generated for RelationType and replace to RelationTypeDto. ❗ If many DTOs exists for RelationType - use [MainDto] attribute to mark which one should be used in ReplaceToDtoProperty Ignore properties​ To avoid some properties from BlType, use [DtoIgnore] attribute: [DtoFrom(typeof(SomeBlType), RelationStrategy.AddIdProperty)] [DtoIgnore(nameof(SomeBlType.PropName1), nameof(SomeBlType.PropName2))] public partial SomeDto {} Options​ Options can be set only in .editorconfig. ❗ All options are applied once, after first generator running (mostly after open project). Generator running​ Generator is based on IIncrementalGenerator. Generator is running on every class declaration change event (on every change that affects class structure). To avoid performance issues, it is used debouncer for collecting all events to regenerate classes. By default debounce time is 500 ms. After some time debouncer will collect execution statistic and rebalance timer. Any user can turn off debouncer, set initial time ets by setting options in .editorconfig. Supported options: auto_dto.debounce.enabled - true/false - use debounce or always run generation for every eventauto_dto.debounce.interval - int - in milliseconds - set initial debounce intervalauto_dto.debounce.auto_rebalance_enabled - true/false - allow auto timer change or not. Default values: auto_dto.debounce.enabled = trueauto_dto.debounce.interval = 500auto_dto.debounce.auto_rebalance_enabled = true ⚠️ Debouncer can be turned off and switched to every request generating. Logging​ Logger is disabled by default. If any issues with generator - enable logger, set folder path for logs and set logging level. Supported options: auto_dto.logger.folder_path - string - path to folder where logs will be generatedauto_dto.logger.enabled - true/falseauto_dto.logger.log_level - Serilog log levels. See LogEventLevel Default values: auto_dto.logger.folder_path = Try get value from build_property.projectdir. If cannot - Path.Combine(Environment.CurrentDirectory, &quot;Logs&quot;) is usingauto_dto.logger.enabled = falseauto_dto.logger.log_level = Warning  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#about","content":" note Generate DTO classes from business/ef classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDepartment.csDepartmentDTO.cs This is the CSharp Project that references AutoDTO &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoDto&quot; Version=&quot;2.1.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#download-example-net--c","content":" tip Download Example project AutoDTO   ","version":"Next","tagName":"h3"},{"title":"Share AutoDTO​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#share-autodto","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoDTO  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoDTO by Ohorodnikov","url":"/RSCG_Examples/v2/docs/AutoDTO#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"AutoDeconstruct by Jason Bock","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoDeconstruct","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#info","content":" info Name: AutoDeconstruct Generates deconstruction methods for type definitions. Author: Jason Bock NuGet:https://www.nuget.org/packages/AutoDeconstruct You can find more details at https://github.com/JasonBock/AutoDeconstruct/blob/main/docs/Overview.md Source: https://github.com/jasonbock/autodeconstruct  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#original-readme","content":" note AutoDeconstruct A library that automatically adds support for object deconstruction in C#. Overview​ The idea started with this tweet - specifically, this reply. I thought...how automatic can I make object deconstruction in C#? That's what this source generator is all about. Read the overview document for further details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#about","content":" note Automatically add deconstruct for all types in an assembly  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references AutoDeconstruct &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoDeconstruct&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoDeconstruct.g.cs #nullable enable public static partial class PersonExtensions { public static void Deconstruct(this global::Person @self, out string? @firstName, out string? @lastName, out string? @title) { global::System.ArgumentNullException.ThrowIfNull(@self); (@firstName, @lastName, @title) = (@self.FirstName, @self.LastName, @self.Title); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#download-example-net--c","content":" tip Download Example project AutoDeconstruct   ","version":"Next","tagName":"h3"},{"title":"Share AutoDeconstruct​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#share-autodeconstruct","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoDeconstruct  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Constructor\" has the following generators:​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#category-constructor-has-the-following-generators","content":" 1 AutoConstructor  2 AutoCtor  3 AutoDeconstruct  4 ConstructorGenerator  5 PrimaryParameter  6 QuickConstructor  7 sourcedepend  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoDeconstruct by Jason Bock","url":"/RSCG_Examples/v2/docs/AutoDeconstruct#see-category","content":" Constructor ","version":"Next","tagName":"h3"},{"title":"AutoConstructor by Kévin Gallienne","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoConstructor","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#info","content":" info Name: AutoConstructor Source generator for automatic constructor generation. Author: Kévin Gallienne NuGet:https://www.nuget.org/packages/AutoConstructor/ You can find more details at https://github.com/k94ll13nn3/AutoConstructor Source: https://github.com/k94ll13nn3/AutoConstructor  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#original-readme","content":" note AutoConstructor C# source generator that generates a constructor from readonly fields/properties in a class. Installation​ Grab the latest package on NuGet. Basic usage​ The following code: [AutoConstructor] public partial class MyClass { private readonly MyDbContext _context; private readonly IHttpClientFactory _clientFactory; private readonly IService _service; [AutoConstructorInject(&quot;options?.Value&quot;, &quot;options&quot;, typeof(IOptions&lt;ApplicationOptions&gt;))] private readonly ApplicationOptions _options; } will generate: partial class MyClass { public MyClass( MyApp.MyDbContext context, System.Net.Http.IHttpClientFactory clientFactory, MyApp.IService service, Microsoft.Extensions.Options.IOptions&lt;MyApp.ApplicationOptions&gt; options) { this._context = context; this._clientFactory = clientFactory; this._service = service; this._options = options?.Value; } } A sample containing more cases is available at the end of this README. How to use​ For any class where the generator will be used: Mark the class as partialUse AutoConstructorAttribute on the class By default, all readonly non-static fields without initialization will be used. They will be injected with the same name without any leading _. Fields marked with AutoConstructorIgnoreAttribute will be ignored. Use AutoConstructorInjectAttribute to customize the behavior, usually when the injected parameter and the fields do not have the same type. It takes three optional parameters: initializer: a string that will be used to initialize the field (by example myService.GetData()), default to the parameterName if null or empty.parameterName: the name of the parameter to used in the constructor (by example myService), default to the field name trimmed if null or empty.injectedType: the type of the parameter to used in the constructor (by example IMyService), default to the field type if null. If no parameters are provided, the behavior will be the same as without the attribute. Using the attribute on a field that would not be injected otherwise won't make the field injectable. When using AutoConstructorInjectAttribute, the parameter name can be shared across multiple fields, and even use a parameter from another field not annotated with AutoConstructorInjectAttribute, but type must match. Constructor accessibility​ Constructor accessibility can be changed using the optionnal parameter accessibility on AutoConstructorAttribute (like [AutoConstructor(&quot;internal&quot;)]). The default is public and it can be set to one of the following values: publicprivateprotectedinternalprotected internalprivate protected Initializer method​ It is possible to add a method call at the end of the constructor. To do this, the attribute AutoConstructorInitializer can be added to a parameterless method that returns void. This will generate a call to the method at the end. [AutoConstructor] internal partial class Test { private readonly int _t; [AutoConstructorInitializer] public void Initializer() { } } will generate public Test(int t) { this._t = t; this.Initializer(); } Properties injection​ Get-only properties (public int Property { get; }) are injected by the generator by default. Non get-only properties (public int Property { get; set;}) are injected only if marked with ([field: AutoConstructorInject]) attributte. The behavior of the injection can be modified using auto-implemented property field-targeted attributes on its backing field. The following code show an injected get-only property with a custom injecter: [field: AutoConstructorInject(initializer: &quot;injected.ToString()&quot;, injectedType: typeof(int), parameterName: &quot;injected&quot;)] public int Property { get; } ⚠️ The compiler support for auto-implemented property field-targeted attributes is not perfect (as described in the link above), and Roslyn analyzers are not running on backings fields so some warnings may not be reported. Configuration​ Generating ArgumentNullException​ By default, null checks with ArgumentNullException are not generated when needed. To enable this behavior, set AutoConstructor_DisableNullChecking to false in the project file: &lt;AutoConstructor_DisableNullChecking&gt;false&lt;/AutoConstructor_DisableNullChecking&gt; Generating XML documentation comment​ By default, no XML documentation comment will be generated for the constructor. To enable this behavior, set AutoConstructor_GenerateConstructorDocumentation to true in the project file: &lt;AutoConstructor_GenerateConstructorDocumentation&gt;true&lt;/AutoConstructor_GenerateConstructorDocumentation&gt; This will generate a default comment like this one, with each parameter reusing the corresponding field summary if available, and the parameter name otherwise: /// &lt;summary&gt; /// Initializes a new instance of the Test class. /// &lt;/summary&gt; /// &lt;param name=&quot;&quot;t1&quot;&quot;&gt;Some field.&lt;/param&gt; /// &lt;param name=&quot;&quot;t2&quot;&quot;&gt;t2&lt;/param&gt; By using the AutoConstructor_ConstructorDocumentationComment property, you can configure the comment message: &lt;AutoConstructor_ConstructorDocumentationComment&gt;Some comment for the {0} class.&lt;/AutoConstructor_ConstructorDocumentationComment&gt; This will generate the following code: /// &lt;summary&gt; /// Some comment for the Test class. /// &lt;/summary&gt; /// &lt;param name=&quot;&quot;t1&quot;&quot;&gt;Some field.&lt;/param&gt; /// &lt;param name=&quot;&quot;t2&quot;&quot;&gt;t2&lt;/param&gt; Samples describing some cases​ Sample for fields​ The following code [AutoConstructor] partial class Test { private readonly string _name; // Won't be injected private readonly Uri _uri = new Uri(&quot;/non-modified&quot;, UriKind.Relative); // Won't be injected [AutoConstructorIgnore] private readonly DateTime _dateNotTaken; // Won't be injected because not readonly. Attribute would be taken into account if this were a property, not a field. [AutoConstructorInject] private int _stuff; // Won't be injected private int? _toto; // Support for nullables private readonly DateTime? _date; // Support for generics private readonly List&lt;DateTime&gt; _items; // Inject with custom initializer [AutoConstructorInject(&quot;guid.ToString()&quot;, &quot;guid&quot;, typeof(Guid))] private readonly string _guidString; // Use existing parameter defined with AutoConstructorInject [AutoConstructorInject(&quot;guid.ToString().Length&quot;, &quot;guid&quot;, typeof(Guid))] private readonly int _guidLength; // Use existing parameter from a basic injection [AutoConstructorInject(&quot;name.ToUpper()&quot;, &quot;name&quot;, typeof(string))] private readonly string _nameShared; } will generate public Test(string name, System.DateTime? date, System.Collections.Generic.List&lt;System.DateTime&gt; items, System.Guid guid) { this._name = name ?? throw new System.ArgumentNullException(nameof(name)); this._date = date ?? throw new System.ArgumentNullException(nameof(date)); this._items = items ?? throw new System.ArgumentNullException(nameof(items)); this._guidString = guid.ToString() ?? throw new System.ArgumentNullException(nameof(guid)); this._guidLength = guid.ToString().Length; this._nameShared = name.ToUpper() ?? throw new System.ArgumentNullException(nameof(name)); } Sample for get-only properties​ The following code [AutoConstructor] public partial class Test { [field: AutoConstructorInject] public int Injected { get; } public int AlsoInjectedEvenWhenMissingAttribute { get; } /// &lt;summary&gt; /// Some property. /// &lt;/summary&gt; [field: AutoConstructorInject] public int InjectedWithDocumentation { get; } [field: AutoConstructorInject] public int InjectedBecauseExplicitInjection { get; set; } [field: AutoConstructorInject] public static int NotInjectedBecauseStatic { get; } [field: AutoConstructorInject] public int NotInjectedBecauseInitialized { get; } = 2; [field: AutoConstructorIgnore] public int NotInjectedBecauseHasIgnoreAttribute { get; } [field: AutoConstructorInject(initializer: &quot;&quot;injected.ToString()&quot;&quot;, injectedType: typeof(int), parameterName: &quot;&quot;injected&quot;&quot;)] public string InjectedWithoutCreatingAParam { get; } } will generate partial class Test { /// &lt;summary&gt; /// Initializes a new instance of the Test class. /// &lt;/summary&gt; /// &lt;param name=&quot;&quot;injected&quot;&quot;&gt;injected&lt;/param&gt; /// &lt;param name=&quot;&quot;injectedWithDocumentation&quot;&quot;&gt;Some property.&lt;/param&gt; /// &lt;param name=&quot;&quot;injectedBecauseExplicitInjection&quot;&quot;&gt;injectedBecauseExplicitInjection&lt;/param&gt; /// &lt;param name=&quot;&quot;alsoInjectedEvenWhenMissingAttribute&quot;&quot;&gt;alsoInjectedEvenWhenMissingAttribute&lt;/param&gt; public Test(int injected, int injectedWithDocumentation, int injectedBecauseExplicitInjection, int alsoInjectedEvenWhenMissingAttribute) { this.Injected = injected; this.InjectedWithDocumentation = injectedWithDocumentation; this.InjectedBecauseExplicitInjection = injectedBecauseExplicitInjection; this.AlsoInjectedEvenWhenMissingAttribute = alsoInjectedEvenWhenMissingAttribute; this.InjectedWithoutCreatingAParam = injected.ToString() ?? throw new System.ArgumentNullException(nameof(injected)); } } Diagnostics​ ACONS01​ The AutoConstructor attribute is used on a class that is not partial. ACONS02​ The AutoConstructor attribute is used on a class without fields to inject. ACONS03​ The AutoConstructorIgnore attribute is used on a field that won't already be processed. ACONS04​ The AutoConstructorInject attribute is used on a field that won't already be processed. ACONS05​ The AutoConstructorIgnore or AutoConstructorInject are used on a class without the AutoConstructor attribute. ACONS06​ A type specified in AutoConstructorInject attribute does not match the type of another parameter with the same name. In the following sample, both fields will be injected with guid as parameter name, but one of type string and the other of type Guid, preventing the generator from running. public partial class Test { [AutoConstructorInject(&quot;guid.ToString()&quot;, &quot;guid&quot;, typeof(Guid))] private readonly string _guid2; private readonly string _guid; } ACONS07​ The accessibility defined in the AutoConstructor attribute is not an allowed value. ACONS08​ AutoConstructorInitializer attribute used on multiple methods. ACONS09​ AutoConstructorInitializer attribute used on a method not returning void. ACONS10​ AutoConstructorInitializer attribute used on a method with parameters.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#about","content":" note Generating constructor for class with many properties  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references AutoConstructor &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoConstructor&quot; Version=&quot;4.1.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoConstructorAttribute.csAutoConstructorIgnoreAttribute.csAutoConstructorInjectAttribute.csQuickConstructorDemo.Person.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the AutoConstructor source generator. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class AutoConstructorAttribute : System.Attribute { }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#download-example-net--c-","content":" tip Download Example project AutoConstructor   ","version":"Next","tagName":"h3"},{"title":"Share AutoConstructor​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#share-autoconstructor","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoConstructor  ","version":"Next","tagName":"h3"},{"title":"In the same category (Constructor) - 6 other generators​","type":1,"pageTitle":"AutoConstructor by Kévin Gallienne","url":"/RSCG_Examples/v2/docs/AutoConstructor#in-the-same-category-constructor---6-other-generators","content":" AutoCtor​  AutoDeconstruct​  ConstructorGenerator​  PrimaryParameter​  QuickConstructor​  sourcedepend​ ","version":"Next","tagName":"h3"},{"title":"AutoGen by Feast Antelcat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoGen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#info","content":" info Name: AutoGen Auto generate anything you want Author: Feast Antelcat NuGet:https://www.nuget.org/packages/Antelcat.AutoGen/ You can find more details at ,https://github.com/Antelcat/AutoGen Source: https://github.com/Antelcat/AutoGen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#original-readme","content":" note Antelcat.AutoGen 🇨🇳 中文 Auto generate anything you may want unless we can't Supported​ Antelcat.AutoGen.ComponentModel :​ [AutoStringTo(string, Accessibility)] :​ Auto generate string To extension only on assembly and static partial class Mapping :​ [AutoMap(Accessibility)] :​ Auto generate mappings between types Only on partial method You can use to generate shallow copy [MapBetween(fromProperty, toProperty)] :​ Specify property mapping between types By : Method being called when mapping this property [MapIgnore] :​ To be ignored when generate mapping code [MapInclude(property)] :​ Explicit include properties when [MapIgnore] [MapExclude(string)] :​ To be excluded when mapping [MapConstructor(params string[])] :​ Specified property to be added in constructor, will auto detect if null [AutoFilePath]:​ Auto generate FilePath which is ref readonly struct void Fun([CallerFilePath] string path = &quot;&quot;) { var directory = (FilePath)path &lt;&lt; 1; var full = directory / &quot;Antelcat.AutoGen.Sample&quot; / &quot;Example.cs&quot;; var changeExtension = full - 2 + &quot;.g.cs&quot;; } [AutoDeconstructIndexable]:​ Auto generate Deconstruct method for IList&lt;&gt; and custom types [assembly: AutoDeconstructIndexable(16/*default size is 16*/, typeof(Foo))] int[] list = [1,2,3]; var (a, b, c) = list; class Foo{ public object this[int index] =&gt; index; } var (a, b, c, d) = new Foo();   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#about","content":" note Generating function to map DTOs  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDTO.csExtensions.cs This is the CSharp Project that references AutoGen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Antelcat.AutoGen&quot; Version=&quot;1.0.0-pre-alpha-7&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoMap__.mapperDemo.Extensions.g.cs // &lt;auto-generated/&gt; By Antelcat.AutoGen #pragma warning disable #nullable enable namespace mapperDemo { partial class Extensions { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Antelcat.AutoGen.SourceGenerators.Generators.Mapping.MapperGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute] public static partial global::mapperDemo.PersonDTO ToDTO(this global::Person person) { var ret = new global::mapperDemo.PersonDTO() { ID = person.ID, FirstName = person.FirstName, LastName = person.LastName, }; global::mapperDemo.Extensions.AfterMap(person, ret); return ret; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#download-example-net--c","content":" tip Download Example project AutoGen   ","version":"Next","tagName":"h3"},{"title":"Share AutoGen​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#share-autogen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoGen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoGen by Feast Antelcat","url":"/RSCG_Examples/v2/docs/AutoGen#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"AutoRegisterInject by Patrick Klaeren","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoRegisterInject","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#info","content":" info Name: AutoRegisterInject C# Source Generator to automatically register dependencies in Microsoft Dependency Injection Service Collection Author: Patrick Klaeren NuGet:https://www.nuget.org/packages/AutoRegisterInject/ You can find more details at https://github.com/patrickklaeren/AutoRegisterInject Source: https://github.com/patrickklaeren/AutoRegisterInject  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#original-readme","content":" note AutoRegisterInject AutoRegisterInject, also referred to as ARI, is a C# source generator that will automatically create Microsoft.Extensions.DependencyInjection registrations for types marked with attributes. This is a compile time alternative to reflection/assembly scanning for your injections or manually adding to the ServiceCollection every time a new type needs to be registered. For example: namespace MyProject; [RegisterScoped] public class Foo { } will automatically generate an extension method called AutoRegister() for IServiceProvider, that registers Foo, as scoped. internal IServiceCollection AutoRegister(this IServiceCollection serviceCollection) { serviceCollection.AddScoped&lt;Foo&gt;(); return serviceCollection; } In larger projects, dependency injection registration becomes tedious and in team situations can lead to merge conflicts which can be easily avoided. AutoRegisterInject moves the responsibility of service registration to the owning type rather than external service collection configuration, giving control and oversight of the type that is going to be registered with the container. Installation​ Install the Nuget package, and start decorating classes with ARI attributes. Use dotnet add package AutoRegisterInject or add a package reference manually: &lt;PackageReference Include=&quot;AutoRegisterInject&quot; /&gt; Usage​ Classes should be decorated with one of four attributes: [RegisterScoped][RegisterSingleton][RegisterTransient][RegisterHostedService] Register a class: [RegisterScoped] class Foo; and get the following output: serviceCollection.AddScoped&lt;Foo&gt;(); Update the service collection by invoking: var serviceCollection = new ServiceCollection(); serviceCollection.AutoRegister(); serviceCollection.BuildServiceProvider(); You can now inject Foo as a dependency and have this resolved as scoped. Alternatively, you can register hosted services by: [RegisterHostedService] class Foo; and get: serviceCollection.AddHostedService&lt;Foo&gt;(); Register as interface​ Implement one or many interfaces on your target class: [RegisterTransient] class Bar : IBar; and get the following output: serviceCollection.AddTransient&lt;IBar, Bar&gt;(); Important note: AutoRegisterInject is opinionated and Bar will only be registered with its implemented interface. ARI will not register Bar. Bar will always need to be resolved from IBar in your code. Implementing multiple interfaces will have the implementing type be registered for each distinct interface. [RegisterTransient] class Bar : IBar, IFoo, IBaz; will output the following: serviceCollection.AddTransient&lt;IBar, Bar&gt;(); serviceCollection.AddTransient&lt;IFoo, Bar&gt;(); serviceCollection.AddTransient&lt;IBaz, Bar&gt;(); Important note: AutoRegisterInject is opinionated and Bar will only be registered with its implemented interfaces. ARI will not register Bar. Bar will always need to be resolved from IBar, IFoo or IBaz in your code. Multiple assemblies​ In addition to the AutoRegister extension method, every assembly that AutoRegisterInject is a part of, a AutoRegisterFromAssemblyName will be generated. This allows you to configure your service collection from one, main, executing assembly. Given 3 assemblies, MyProject.Main, MyProject.Services, MyProject.Data, you can configure the ServiceCollection as such: var serviceCollection = new ServiceCollection(); serviceCollection.AutoRegisterFromMyProjectMain(); serviceCollection.AutoRegisterFromMyProjectServices(); serviceCollection.AutoRegisterFromMyProjectData(); serviceCollection.BuildServiceProvider(); AutoRegisterInject will remove illegal characters from assembly names in order to generate legal C# method names. ,, . and will be removed. License​ AutoRegisterInject is MIT licensed. Do with it what you please under the terms of MIT.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#about","content":" note Generating class DI registration from attributes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.csIDatabase.csDatabaseCon.cs This is the CSharp Project that references AutoRegisterInject &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoRegisterInject&quot; Version=&quot;1.2.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoRegisterInject.Attributes.g.csAutoRegisterInject.ServiceCollectionExtension.g.cs // &lt;auto-generated&gt; // Automatically generated by AutoRegisterInject. // Changes made to this file may be lost and may cause undesirable behaviour. // &lt;/auto-generated&gt; [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class RegisterScopedAttribute : System.Attribute { } [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class RegisterSingletonAttribute : System.Attribute { } [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class RegisterTransientAttribute : System.Attribute { } [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class RegisterHostedServiceAttribute : System.Attribute { }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#download-example-net--c","content":" tip Download Example project AutoRegisterInject   ","version":"Next","tagName":"h3"},{"title":"Share AutoRegisterInject​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#share-autoregisterinject","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoRegisterInject  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoRegisterInject by Patrick Klaeren","url":"/RSCG_Examples/v2/docs/AutoRegisterInject#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"AutoInvoke.Generator by Patrick Kranz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#info","content":" info Name: AutoInvoke.Generator A generator that invokes a specified Metohd for ever Type in your Project that sattisfis a defined constraint Author: Patrick Kranz NuGet:https://www.nuget.org/packages/AutoInvoke.Generator/ You can find more details at https://github.com/LokiMidgard/AutoInvoke.Generator Source: https://github.com/LokiMidgard/AutoInvoke.Generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#original-readme","content":" note AutoInvoke This Generator let you anotate an Parameterless Generic Method with exactly one TypeArgument. It will then generate a method with the same name and no type arguments that calls your anotated method for every (non static) Type decleared in your project, that satisfies the type constraints. Sample​ Assume you have the following Interface: internal interface IFileLoder { public abstract static IFileLoder Init(string path); public abstract static string FileExtension { get; } } This describes a File loader for different types in our project. And following implementation: internal class AudioLoader : IFileLoder { public static string FileExtension =&gt; &quot;.mp3&quot;; public static IFileLoder Init(string Path) { return new AudioLoader(path); } // the rest of the code... } Which defines how we want to load mp3 files. We now want to automaticly get a list of all IFileLoader so we know what files we can handle, and we do not want to manualy handel such a list. An Implementation could look like this: internal delegate IFileLoder LoadFile(string path); internal partial class FileHandler { private readonly Dictionary&lt;string, LoadFile&gt; loaders = new(); public FileHandler() { LoadLoaders(); } public void LoadFile(string file) { if (loaders.TryGetValue(Path.GetExtension(file), out var loaderFactory)) { var loader = loaderFactory(file); // use loader to do things } } [AutoInvoke.Generator.FindAndInvoke] public void LoadLoaders&lt;T&gt;() where T : IFileLoder { this.loaders.Add(T.FileExtension, T.Init); } } The field loaders will have all extensions our code can handle, and has to every extension the corresponding Init-Method. The Generated code will look like this: partial class FileHandler { private void LoadLoaders() { LoadLoaders&lt;AutoInvoke.Generator.Example.AudioLoader&gt;(); } } Featurs and limitations​ You can control wich type of types shold get called. E.g. by default no calls are generated for abstract classes or types defined in referenced Assemblys. But you can overide this settingThe anotated method can be staticIf the anotated method has parameters the generated method has the same parametrsIf the return type is not void the generated methods returntype is an array of the return type of the attributed method Limitations​ When using multiple Type Parameters, one Type Parameter must contain all others (transitiv) like Foo&lt;T1, T2, T3&gt;() where T1: IComparable&lt;T2&gt; where T2 : IComparable&lt;T3&gt;You can't call static Types. Generics do not allow this.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#about","content":" note Finding all implementation of an interface/class and invoke them.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csRemoteCollection.csPCRemote.csTVRemote.cs This is the CSharp Project that references AutoInvoke.Generator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoInvoke.Generator&quot; Version=&quot;0.0.9&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  attribute.g.csAutoAdd.class.LoadLoaders.g.cs // &lt;auto-generated/&gt; #nullable enable namespace AutoInvoke; [System.AttributeUsage(System.AttributeTargets.Method, Inherited = false, AllowMultiple = true)] [System.Diagnostics.Conditional(&quot;AutoNotifyGenerator_DEBUG&quot;)] internal sealed class FindAndInvokeAttribute : System.Attribute { #pragma warning disable CS0169 // Remove unused parameter #pragma warning disable IDE0060 // Remove unused parameter #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable. public FindAndInvokeAttribute() { } public FindAndInvokeAttribute(string pattern) { } public bool ScanExternalAssamblies { get; set; } public string MethodName { get; set; } public bool CallForAbstractClasses { get; set; } public bool CallForInterfaces { get; set; } public bool CallForStructs { get; set; } public bool CallForClasses { get; set; } public bool CallForRecords { get; set; } #pragma warning restore CS0169 // Remove unused parameter #pragma warning restore IDE0060 // Remove unused parameter #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable. }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#download-example-net--c","content":" tip Download Example project AutoInvoke.Generator   ","version":"Next","tagName":"h3"},{"title":"Share AutoInvoke.Generator​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#share-autoinvokegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoInvoke.Generator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoInvoke.Generator by Patrick Kranz","url":"/RSCG_Examples/v2/docs/AutoInvoke.Generator#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"AutoInterface by Black White Yoshi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoInterface","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#info","content":" info Name: AutoInterface AutoInterface is a source generator that generates an interface based on your class/struct. Basically, you write your class and get the corresponding interface for free. Author: Black White Yoshi NuGet:https://www.nuget.org/packages/AutoInterface/ You can find more details at https://github.com/BlackWhiteYoshi/AutoInterface Source: https://github.com/BlackWhiteYoshi/AutoInterface  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#original-readme","content":" note AutoInterface AutoInterface is a source generator that generates an interface based on your class/struct. Basically, you write your class and get the corresponding interface for free. using AutoInterfaceAttributes; [AutoInterface] public class Example : IExample { public int Number { get; private set; } public Example() { ResetNumber(); } /// &lt;summary&gt; /// some method description /// &lt;/summary&gt; public int AddToNumber(int increase) { Number += increase; return Number; } private void ResetNumber() =&gt; Number = 0; } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IExample { int Number { get; } /// &lt;summary&gt; /// some method description /// &lt;/summary&gt; int AddToNumber(int increase); } AutoInterface supports: classes, records and structsall members (Method, Property, Indexer, Event)also explicit Interface membersmultiple attributes on same classsummary of class/struct and membersgenericparameters for interface nameinterface modifierinterface namespaceinterface inheritanceinterface nestingstatic members as static abstractaccess modifierignore specific members Examples​ AutoInterfaceAttribute on struct​ using AutoInterfaceAttributes; [AutoInterface] public struct Point { public int X { get; private set; } public int Y { get; private set; } public Point(int x, int y) =&gt; (X, Y) = (x, y); } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IPoint { int X { get; } int Y { get; } } AutoInterfaceAttribute with all kinds of members​ using AutoInterfaceAttributes; [AutoInterface] public sealed class FullExample { public void SomeMethod() { } public int SomeProperty { get; init; } public int this[int i] =&gt; i; public event Action? someEvent; public event Action SomeEvent { add { } remove { } } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IFullExample { void SomeMethod(); int SomeProperty { get; init; } int this[int i] { get; } event Action? someEvent; event Action SomeEvent; } AutoInterfaceAttribute with explicit interface specifier​ using AutoInterfaceAttributes; [AutoInterface] public sealed class ExplicitExample : IExplicitExample { void IExplicitExample.SomeMethod() { } int IExplicitExample.SomeProperty { get; init; } int IExplicitExample.this[int i] =&gt; i; event Action IExplicitExample.SomeEvent { add { } remove { } } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IExplicitExample { void SomeMethod(); int SomeProperty { get; init; } int this[int i] { get; } event Action SomeEvent; } multiple AutoInterfaceAttributes on same class​ using AutoInterfaceAttributes; [AutoInterface(Name = &quot;IMultipleExample1&quot;)] [AutoInterface(Name = &quot;IMultipleExample2&quot;)] public sealed class MultipleExample : IMultipleExample1, IMultipleExample2 { public void SomeMethod() { } int IMultipleExample1.PropertyFirst { get; set; } string IMultipleExample2.PropertySecond { get; set; } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IMultipleExample1 { void SomeMethod(); int PropertyFirst { get; set; } } ... // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IMultipleExample2 { void SomeMethod(); string PropertySecond { get; set; } } AutoInterfaceAttribute with summary documentation​ using AutoInterfaceAttributes; /// &lt;summary&gt; /// my class description /// &lt;/summary&gt; [AutoInterface] public sealed class SummaryExample { /// &lt;summary&gt; /// some method description /// &lt;/summary&gt; public void SomeMethod() { } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; /// &lt;summary&gt; /// my class description /// &lt;/summary&gt; public partial interface ISummaryExample { /// &lt;summary&gt; /// some method description /// &lt;/summary&gt; void SomeMethod(); } AutoInterfaceAttribute with generic class​ using AutoInterfaceAttributes; [AutoInterface] public sealed class GenericExample&lt;T&gt; { public T Identity(T parameter) =&gt; parameter; } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IGenericExample&lt;T&gt; { T Identity(T parameter); } Parameter​ Name​ Type: string Default: $&quot;I{ClassName}&quot; If you want another name for your interface, put it here. using AutoInterfaceAttributes; [AutoInterface(Name = &quot;NewName&quot;)] public sealed class Example; // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface NewName {} Modifier​ Type: string Default: &quot;public partial&quot; If you want another visible modifier or make the interface non-partial or unsafe, you can do this here. using AutoInterfaceAttributes; [AutoInterface(Modifier = &quot;internal&quot;)] public sealed class Example; // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; internal interface IExample {} Namespace​ Type: string Default: $&quot;{ClassNamespace}&quot; When the generated interface should live in a specific namespace, you can specify it here. For global namespace, use an empty string. using AutoInterfaceAttributes; namespace MyApp.Core; [AutoInterface(Namespace = &quot;MyApp.Utils&quot;)] public sealed class Example; // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; namespace MyApp.Utils; public partial interface IExample {} Inheritance​ Type: Type[] Default: [] If the generated interface should inherit from one or more other interfaces, you can list them here. using AutoInterfaceAttributes; [AutoInterface(Inheritance = [typeof(ICore)])] public sealed class Example; public partial interface ICore { ... } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IExample : ICore {} Nested​ Type: string[] Default: [] When the interface should be nested inside other classes, structs or interfaces, declare them here. using AutoInterfaceAttributes; [AutoInterface(Nested = [&quot;public partial class MyWrapper&quot;, &quot;public partial interface OuterInterface&quot;])] public sealed class Example { public void SomeMethod() { } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial class MyWrapper { public partial interface OuterInterface { public partial interface IExample { void SomeMethod(); } } } StaticMembers​ Type: bool Default: false Normally, static members are just ignored. However, an interface can contain static members as a &quot;static abstract&quot; member. To accept static members to generate &quot;static abstract&quot; members, set this flag to true. using AutoInterfaceAttributes; [AutoInterface(StaticMembers = true)] public sealed class Example { public static void SomeMethod() { } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IExample { static abstract void SomeMethod(); } Access Modifier​ When you want to set the visibility of a specific member, you can decorate it with a [AutoInterfaceVisibility...] attribute. There are 5 different Visibility attribute: [AutoInterfaceVisibilityPublic][AutoInterfaceVisibilityInternal][AutoInterfaceVisibilityProtected][AutoInterfaceVisibilityProtectedInternal][AutoInterfaceVisibilityPrivateProtected] using AutoInterfaceAttributes; [AutoInterface] public sealed class Example : IExample { [AutoInterfaceVisibilityPublic] public void PublicMethod() { } [AutoInterfaceVisibilityInternal] void IExample.InternalMethod() { } [AutoInterfaceVisibilityProtected] void IExample.ProtectedMethod() { } [AutoInterfaceVisibilityProtectedInternal] void IExample.ProtectedInternalMethod() { } [AutoInterfaceVisibilityPrivateProtected] void IExample.PrivateProtectedMethod() { } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IExample { [AutoInterfaceVisibilityPublic] public void PublicMethod(); [AutoInterfaceVisibilityInternal] internal void InternalMethod(); [AutoInterfaceVisibilityProtected] protected void ProtectedMethod(); [AutoInterfaceVisibilityProtectedInternal] protected internal void ProtectedInternalMethod(); [AutoInterfaceVisibilityPrivateProtected] private protected void PrivateProtectedMethod(); } Note: The access modifiers private and file are not possible, because private members needs an implementation and file members would not be visible to the outside. IgnoreAutoInterfaceAttribute​ When you want a specific member to be ignored by the generator, you can decorate it with [IgnoreAutoInterface]. using AutoInterfaceAttributes; [AutoInterface] public sealed class Example { [IgnoreAutoInterface] public void SomeMethod() { } } // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using AutoInterfaceAttributes; public partial interface IExample {} Disable Attribute Generation​ You can disable the generation of the attributes by defining a constant for your compilation: &lt;PropertyGroup&gt; &lt;DefineConstants&gt;AUTOINTERFACE_EXCLUDE_ATTRIBUTES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; This functionality is specific for the use case when you have a project referencing another project, both projects using this generator and you have InternalsVisibleTo enabled. In that case you have the attributes defined twice in your referencing project and you get a warning about that. By defining this constant in your referencing project, you prevent one generation, so the attributes are only defined once in the referenced project. Remarks​ Using-statements will always be placed on the top, so using not fully-qualified using-statements might cause compile errors. using AutoInterfaceAttributes; namespace System.Collections { using Generic; // &lt;-- refers to &quot;System.Collections.Generic&quot; [AutoInterface] public sealed class Example; } // ... // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using Generic; // &lt;-- refers to &quot;Generic&quot; using AutoInterfaceAttributes; public partial interface IExample {} You also should not use not fully-qualified using-statements in the first place, because they can be ambiguous. By introducing an additional namespace, the referring of a not fully-qualified using-statement might change and your application breaks at unrelated places. Just put your using statements at the top.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#about","content":" note generating interface from a class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDepartment.csEmployee.cs This is the CSharp Project that references AutoInterface &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoInterface&quot; Version=&quot;2.4.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoInterfaceAttribute.g.csAutoInterfaceVisibilityInternalAttribute.g.csAutoInterfaceVisibilityPrivateProtectedAttribute.g.csAutoInterfaceVisibilityProtectedAttribute.g.csAutoInterfaceVisibilityProtectedInternalAttribute.g.csAutoInterfaceVisibilityPublicAttribute.g.csIDepartment_NullInterface.Department_Department.cs.g.csIDepartment_NullInterface.Department_IDepartment.cs.g.csIEmployee_NullInterface.Employee_Employee.cs.g.csIgnoreAutoInterfaceAttribute.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations #if !AUTOINTERFACE_EXCLUDE_ATTRIBUTES using System; namespace AutoInterfaceAttributes; /// &lt;summary&gt; /// Generates an interface for the decorated class/struct. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;AutoInterface&quot;, &quot;2.4.0&quot;)] internal sealed class AutoInterfaceAttribute : Attribute { /// &lt;summary&gt; /// &lt;para&gt;The name of the generated interface.&lt;/para&gt; /// &lt;para&gt;Default is &quot;I{ClassName}&quot;&lt;/para&gt; /// &lt;/summary&gt; public string Name { get; init; } /// &lt;summary&gt; /// &lt;para&gt;The modifier(s) for the interface.&lt;/para&gt; /// &lt;para&gt;Deault is &quot;public partial&quot;&lt;/para&gt; /// &lt;/summary&gt; public string Modifier { get; init; } /// &lt;summary&gt; /// &lt;para&gt;The namespace declaration for the interface.&lt;/para&gt; /// &lt;para&gt;If empty string, no namespace directive will be used (global namespace).&lt;br /&gt; /// Default (if not present) it will be mapped to the same namespace as the namespace of the class/struct.&lt;/para&gt; /// &lt;/summary&gt; public string Namespace { get; init; } /// &lt;summary&gt; /// &lt;para&gt;interface inheritance: Name(s) of interfaces this interface will inherit.&lt;/para&gt; /// &lt;para&gt;Default is Array.Empty&lt;/para&gt; /// &lt;/summary&gt; public Type[] Inheritance { get; init; } /// &lt;summary&gt; /// &lt;para&gt; /// The Classes, structs or interfaces containing the generated interface.&lt;br /&gt; /// e.g. [&quot;public sealed partial class Example&quot;] will wrap the interface with that expression. /// &lt;/para&gt; /// &lt;para&gt;Default is Array.Empty&lt;/para&gt; /// &lt;/summary&gt; public string[] Nested { get; init; } /// &lt;summary&gt; /// &lt;para&gt;If enabled, static members get accepted and are generating &quot;static abstract&quot; members.&lt;/para&gt; /// &lt;para&gt;Default is false&lt;/para&gt; /// &lt;/summary&gt; public bool StaticMembers { get; init; } } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#download-example-net--c","content":" tip Download Example project AutoInterface   ","version":"Next","tagName":"h3"},{"title":"Share AutoInterface​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#share-autointerface","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoInterface  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoInterface by Black White Yoshi","url":"/RSCG_Examples/v2/docs/AutoInterface#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#info","content":" info Name: BenutomoAutomaticDisposeImplSourceGenerator A Source Generator that automatically implements the Dispose method of IDisposable and the DisposeAsync method of IAsyncDisposable. Author: benutomo NuGet:https://www.nuget.org/packages/Benutomo.AutomaticDisposeImpl.SourceGenerator/ You can find more details at https://github.com/benutomo-dev/RoslynComponents Source: https://github.com/benutomo-dev/RoslynComponents  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#original-readme","content":" note RoslynComponents C#のRoslynコンパイラ用のアナライザ/ソースジェネレータです。 一覧​ AutomaticDisposeImpl C#でIDisposableとIAsyncDisposableの実装パターンに対応するメソッドを自動実装するソースジェネレータAutomaticNotifyPropertyChangedImpl C#でINotifyPropertyChangedなどの変更通知付きプロパティの実装を補助するソースジェネレータCancellationAnalyzer キャンセルトークンの適切な引き渡しとキャンセルトークン付きのシグネチャのメソッドの優先的使用を補助するためのアナライザCs0436Relaxation ソースジェネレータが生成したクラス等を含むアセンブリ同士でInternalsVisbleTo属性が指定されている場合に発生する場合があるCS0436警告を適切に緩和(ソースジェネレータ起因でない報告のみを別IDで再警告)するためのアナライザ AutomaticDisposeImpl​ C#でIDisposableとIAsyncDisposableの実装パターンに対応するメソッドを自動実装するソースジェネレータです。 Introduction​ 以下のサンプルで示すように、IDisposableとIAsyncDisposableインターフェイスの少なくとも一方を実装するクラスにpartialキーワードとAutomaticDisposeImpl属性を付与すると、クラス内に含まれるIDisposableとIAsyncDisposableインターフェイスを実装している型を持つメンバを破棄するDispose()とDisposeAsync()が自動実装されるようになります。 サンプルコード​ using System; using System.Threading.Tasks; using Benutomo; namespace SampleCode { // 自動実装を適用するクラス [AutomaticDisposeImpl] public partial class DisposeableTest : IDisposable, IAsyncDisposable { // DisposeableTestのDipose()とDiposeAsync()は自動実装されるため、定義不要 // IDisposable.Dispose()による破棄が可能なフィールド [EnableAutomaticDispose] ConsoleOutputDisposable consoleOutputDisposable = new ConsoleOutputDisposable(); // IDisposable.Dispose()とIAsyncDisposable.DisposeAsync()のどちらでも破棄が可能なプロパティ [EnableAutomaticDispose] ConsoleOutputAsyncDisposable consoleOutputAsyncDisposable { get; } = new ConsoleOutputAsyncDisposable(); public DisposeableTest() { Console.WriteLine(&quot;Created new DisposeableTest&quot;); } } // 以降は、出力例のためのコード class Program { public static async Task Main() { var disposeTestInstance = new DisposeableTest(); Console.WriteLine(&quot;Begin disposeTestInstance.Dispose()&quot;); disposeTestInstance.Dispose(); Console.WriteLine(&quot;End disposeTestInstance.Dispose()&quot;); Console.WriteLine(); var asyncDisposeTestInstance = new DisposeableTest(); Console.WriteLine(&quot;Begin disposeTestInstance.DisposeAsync()&quot;); await asyncDisposeTestInstance.DisposeAsync(); Console.WriteLine(&quot;End disposeTestInstance.DisposeAsync()&quot;); Console.WriteLine(); } } class ConsoleOutputDisposable : IDisposable { public void Dispose() { Console.WriteLine(&quot; Called Dispose() of ConsoleOutputDisposable.&quot;); } } class ConsoleOutputAsyncDisposable : IDisposable, IAsyncDisposable { public void Dispose() { Console.WriteLine(&quot; Called Dispose() of ConsoleOutputAsyncDisposable.&quot;); } public ValueTask DisposeAsync() { Console.WriteLine(&quot; Called DisposeAsync() of ConsoleOutputAsyncDisposable.&quot;); return default; } } } サンプルコードを実行した際の出力例​ 以下のようにクラス内に含まれるIDisposableまたはIAsyncDisposableを実装したメンバのDispose()とDisposeAsync()は、自動実装されたコードから呼び出されます。 自動実装クラスのDisposeAsync()は基本的にメンバの破棄にもDisposeAsync()を呼び出しますが、メンバがIDisposableしか実装していない場合はDispose()を使用して破棄します。 Created new DisposeableTest Begin disposeTestInstance.Dispose() Called Dispose() of ConsoleOutputDisposable. Called Dispose() of ConsoleOutputAsyncDisposable. End disposeTestInstance.Dispose() Created new DisposeableTest Begin disposeTestInstance.DisposeAsync() Called DisposeAsync() of ConsoleOutputAsyncDisposable. Called Dispose() of ConsoleOutputDisposable. End disposeTestInstance.DisposeAsync() 使用方法​ インストール​ ⚠️ VisualStudioを利用する場合は2022の最新版が必要です。 Nugetなどを利用してプロジェクトのアナライザにBenutomo.AutomaticDisposeImpl.SourceGenerator.dllを追加します。 Install-Package Benutomo.AutomaticDisposeImpl.SourceGenerator 基本​ 以下のように、破棄の自動実装を使用したいクラスを含むC#のソースコードの先頭部にusing Benutomo;を追加し、IDisposableとIAsyncDisposableの少なくとも一方を実装しているクラスにpartialキーワードと[AutomaticDisposeImpl]属性を追加します。EnableDisposeImpl属性を追加したフィールドまはたプロパティはメンバを含むクラスが破棄と同時に自動的に破棄されます。DisnableDisposeImpl属性を追加したフィールドまはたプロパティは自動的な破棄の対象外となります。 自動実装する意味がありませんが、メンバは空でも問題ありません。 using Benutomo; using System; // 同期的な破棄(IDisposable)を自動実装 [AutomaticDisposeImpl] partial class Sample1 : IDisposable { // 自動破棄するメンバにはEnableAutomaticDispose属性を付与 [EnableAutomaticDispose] IDisposable _disposable; // 自動破棄しないメンバにはDisableAutomaticDispose属性を付与 [DisableAutomaticDispose] IDisposable Disposable =&gt; _disposable; } // 非同期的な破棄(IAsyncDisposable)を自動実装 [AutomaticDisposeImpl] partial class Sample2 : IAsyncDisposable { } // 同期的な破棄(IDisposable)と非同期的な破棄(IAsyncDisposable)を自動実装 [AutomaticDisposeImpl] partial class Sample3 : IDisposable, IAsyncDisposable { } // インターフェイスが明示的に実装されていないため、NG。IDisposableとIAsyncDisposableの少なくとどちらか一方の実装が必要。 [AutomaticDisposeImpl] partial class Sample4 { } ℹ 自動実装コードからメンバの破棄が行われるのは呼び出し方に関わらず(自動実装クラスのDispose()とDisposeAysnc()のどちらが先に何回呼び出されても)、最大１回です。標準のDisposeパターンと同様に重複する呼び出しは無視されます。 ℹ 自動実装されたメンバの破棄で生じた例外は、リリースビルド時は無視され、デバッグビルド時はDebug.Fail()によってデバッガを停止させます。標準的なDispose()等は例外を発生させることなく複数回の呼び出しが可能である必要があります(Disposeメソッドの実装)。自動実装されるコードはそれが守られていることを期待しているため、破棄で例外を発生させるメンバが存在する場合は、自動実装対象から除外し、独自処理メソッドの中で破棄と例外のハンドリングを行って下さい。 Dispose()などが呼び出されるタイミングで自動実装されるメンバの破棄と同時に独自の処理も実行する​ [ManagedObjectDisposeMethod]属性と[ManagedObjectAsyncDisposeMethod]属性を使用すると、自動実装されるDispose()および、DisposeAsync()の中からユーザ側のコードで実装されるメソッドを呼び出させることができます。 [AutomaticDisposeImpl] partial class UserDefinedDisposeImplSample : IDisposable, IAsyncDisposable { [ManagedObjectDisposeMethod] void ManagedObjectDisposeMethod() { } // 自動実装のDispose()から呼び出される。メンバの自動破棄以外のユーザ独自の処理はここで実装することができる。 [ManagedObjectAsyncDisposeMethod] ValueTask ManagedObjectDisposeMethodAsync() =&gt; default; // 自動実装のDisposeAsync()から呼び出される。メンバの自動破棄以外のユーザ独自の処理はここで実装することができる。 } [ManagedObjectDisposeMethod]属性を付与するメソッドは戻り値がvoidかつ引数の存在しないインスタンスメソッドである必要があります。 [ManagedObjectAsyncDisposeMethod]属性を付与するメソッドは戻り値がValueTaskまたはTaskかつ引数の存在しないインスタンスメソッドである必要があります。 どちらの場合も、一つのクラス内で同じ属性を複数のメソッドに付与することはできません。 ℹ この機能の仕様として、自動実装コードが実行する破棄は同期的な破棄と非同期な破棄を含めて最大１回のみであることにご注意下さい。 例えば、自動実装したクラスのメソッドが var sample = new UserDefinedDisposeImplSample(); sample.Dipose(); // この破棄のみが有効。以降の重複呼び出しは無視される。 await sample.DiposeAsync(); sample.Dipose(); のように呼び出された場合、ユーザのメソッドが呼ばれるのは最初のsample.Dispose()のタイミングでManagedObjectDisposeMethod()が呼び出される１回のみです。そのあとに続くawait sample.DiposeAsync()と２回目のsample.Dispose()は完全に無視されます。上記の例でManagedObjectDisposeMethodAsync()が呼び出されることはありません。 もし、最初の破棄がawait sample.DiposeAsync()で行われた場合は、ManagedObjectDisposeMethodAsync()が１回のみ呼び出され、それ以降は同様に無視されます。 ⚠ 自動実装のメンバ破棄と独自の処理の実行順は不確定です。将来のバージョンでは順番が入れ替わる可能性がありますので、現在の自動実装の順番に依存しないように注意して下さい。 アンマネージドリソースの破棄​ IDisposable.Dipose()などで自動破棄できるメンバのほかに、System.IntPtr等を利用してアンマネージドリソースのハンドルなどを保持している場合は[UnmanagedResourceReleaseMethod]属性を利用することで、アンマネージドリソースの破棄を行うメソッドを自動実装されるコードから呼び出させることができます。 [AutomaticDisposeImpl] partial class UserDefinedFinalizeImplSample : IDisposable, IAsyncDisposable { [UnmanagedResourceReleaseMethod] void UnmanagedResourceReleaseMethod() { } // 自動実装のDispose(),DiposeAsync(),~UserDefinedFinalizeImplSample()から呼び出される。アンマネージドリソースの破棄はここで実装することができる。 } ℹ [UnmanagedResourceReleaseMethod]属性を使用したクラスはファイナライザも自動実装されます。そのため、明示的にDispose()またはDisposeAsync()の呼び出しがされずにオブジェクトがガーベジコレクトされた場合もガーベジコレクタのファイナライズのタイミングで自動実装されたファイナライザを経由して[UnmanagedResourceReleaseMethod]属性を付与したメソッドが呼び出されます。 ℹ [ManagedObjectDisposeMethod]属性で破棄を自動実装したクラスはIDisposableとIAsyncDisposableを直接実装しているsealdクラスであるか、継承関係にある親クラス・子クラスが同期および非同期の破棄パターンを正しく実装している限り、[UnmanagedResourceReleaseMethod]属性を付与したメソッドはオブジェクトが生成されてから消滅するまでに、その間の明示的な破棄の有無や回数に関わらず、自動実装側からの呼び出し回数が必ず１回なることが保証されます。 AutomaticNotifyPropertyChangedImpl​ TODO CancellationAnalyzer​ TODO Cs0436Relaxation​ ソースジェネレータが生成したクラス等を含むアセンブリ同士でInternalsVisbleTo属性が指定されている場合に発生する場合があるCS0436警告を適切に緩和するためのアナライザです。 Introduction​ ソースジェネレータを利用するアセンブリ同士の参照にInternalsVisbleTo属性が適用されていると、InternalsVisbleToに指定されたアセンブリからソースジェネレータが生成した属性などを利用する箇所で、CS0436警告が発生する場合があります。 ソースジェネレータを利用する場合、ソースジェネレータが属性などをinternalなクラスとしてソース生成し、ユーザコード内でそれらをソース生成に関するマークとして使用する場合があります。通常、internalなクラスは異なるアセンブリを跨いで直接参照することが出来ないため問題となりませんが、InternalsVisbleTo属性が指定されている場合はinternalクラスも参照できてしまうため、ソースジェネレータが生成した型が、自分自身と参照アセンブリの両方に全く同一の名前空間と識別子で存在する状態となってしまい、以下の例の中にあるような形で競合(CS0436)が発生します。 // この例で、A.dll,B.dll,C.dllアセンブリに対してソースジェネレータが暗黙的に生成している属性クラス namespace SourceGen; internal ExampleMarkerAttribute : Attribute {} // A.dll [assembly: InternalsVisibleTo(&quot;C&quot;)] namespace A; // A.dllでは自分自身の中で生成されているソースが // 唯一のExampleMarker属性の定義であるので、 // ExampleMarkerが競合することはない [SourceGen.ExampleMarker] class ClassA {} // B.dll (A.dllを参照アセンブリに含む) namespace B; // B.dllでは、自分自身と参照アセンブリのA.dllで // ExampleMarkerの定義が重複しているが、 // ExampleMarkerがinternalでB.dllからアクセスが出来ないため、 // A.dllとB.dllのExampleMarkerは競合しない [SourceGen.ExampleMarker] class ClassB {} // C.dll (A.dllを参照アセンブリに含む) namespace C; // C.dllでは、自分自身と参照アセンブリのA.dllで // ExampleMarkerの定義が重複している上に、 // C.dllからA.dllのinternalな型やメンバにもアクセスが出来てしまうため、 // A.dllとC.dllのExampleMarkerが競合する [SourceGen.ExampleMarker] // CS0436が発生する class ClassC {} Cs0436Relaxationは、CS0436を一旦抑止(suggestion化)する代わりに、Cs0436Relaxationgaが上記の様なソースジェネレータ都合以外で発生する抑止する必要のなかったCS0436を別のID(RX_CS0436_1)のwarningとして報告することで、実質的にソースジェネレータに関わるCS0436だけを抑止することが出来ます。 インストール​ ⚠️ VisualStudioを利用する場合は2022の最新版が必要です。 Cs0436Relaxationを利用するためにはCs0436Relaxation自体をプロジェクトのPackageReferenceに加えるだけでなく、生のCS0436をwarningからsuggestionに変更するeditorconfigの設定も必要になります。また、Cs0436Relaxationが機能していないプロジェクトでeditorconfigの設定の方だけが有効となってしまうとそのプロジェクトでは単純にCS0436が警告対象から外れたままとなってしまうので、どちらの設定も全てのプロジェクトで共通化されるように設定することをお勧めします。 以下の手順は、全てのプロジェクトに共通で設定する前提のものです。 手順１ Directory.Build.propsの配置(編集)​ 以下のDirectory.Build.propsを全てのプロジェクトを含むルートフォルダに配置します。 &lt;Project&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Benutomo.Cs0436Relaxation&quot; Version=&quot;1.0.0-alpha9&quot; PrivateAssets=&quot;true&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; 既にDirectory.Build.propsが存在している場合は、既存のDirectory.Build.propsの中に上記のPackageReferenceを加えます。 最新のバージョンはNuGetをご参照ください。 参考​ ビルドのカスタマイズ 手順２ editorconfigの配置(編集)​ 以下の.editorconfigを全てのプロジェクトを含むルートフォルダに配置します。 # CS0436(型がインポートされた型と競合しています)を抑止。ソースジェネレータ起因以外のCS0436はCs0436RelaxationがRX_CS0436_1としてwarning。 dotnet_diagnostic.CS0436.severity = suggestion 既存の.editorconfigが既に存在する場合はその中に付け加えます。Cs0436Relaxationが働くプロジェクトに対してCS0436の重要度をwarningからsuggestionまで落とします。 参考​ EditorConfig.orgEditorConfig で移植可能なカスタム エディター設定を作成する Cs0436Relaxationが正しく機能している場合の警告について​ Cs0436Relaxationが機能している環境では以下の警告が発生します。下記の通り、ソースジェネレータ起因でないCS0436のみが、RX_CS0436_1として報告されるようになります。 ID\t概要RX_CS0436_0\tCs0436Relaxationが機能しているプロジェクトのコンパイルでCS0436がwarningとして発生した場合に発生するwarningです。Cs0436Relaxationを取り除くか.editroconfigを編集してCS0436をsuggestionにする必要があります。 RX_CS0436_1\tソースジェネレータに起因する定義以外に対してCS0436が発生したことをwarningで知らせます。生のCS0436が発生した場合と同様の対処が必要です。  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#about","content":" note Automatic dispose resources  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDALDB.csConnectionDB.cs This is the CSharp Project that references BenutomoAutomaticDisposeImplSourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Benutomo.AutomaticDisposeImpl.SourceGenerator&quot; Version=&quot;2.0.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutomaticDisposeImplAttribute.csAutomaticDisposeImplMode.csDisableAutomaticDisposeAttribute.csEnableAutomaticDisposeAttribute.csgen_DALDB_IDisposableGeneratorDemo_AutomaticDisposeImpl.csManagedObjectAsyncDisposeMethodAttribute.csManagedObjectDisposeMethodAttribute.csUnmanagedResourceReleaseMethodAttribute.cs #pragma warning disable CS0436 #nullable enable namespace Benutomo { /// &lt;summary&gt; /// 指定したクラスに破棄(&lt;see cref=&quot;&quot;System.IDisposable&quot;&quot; /&gt;,&lt;see cref=&quot;&quot;System.IAsyncDisposable&quot;&quot; /&gt;)をサポートするメンバを破棄する&lt;see cref=&quot;&quot;System.IDisposable.Dispose&quot;&quot; /&gt;メソッドおよび&lt;see cref=&quot;&quot;System.IAsyncDisposable.DisposeAsync&quot;&quot; /&gt;メソッド(当該クラスに&lt;see cref=&quot;&quot;System.IAsyncDisposable&quot;&quot; /&gt;インターフェイスが含まれている場合のみ)を自動実装する。 /// &lt;/summary&gt; [global::System.AttributeUsage(global::System.AttributeTargets.Class)] internal class AutomaticDisposeImplAttribute : global::System.Attribute { /// &lt;summary&gt; /// 自動破棄実装の既定動作を設定する。 /// &lt;/summary&gt; public AutomaticDisposeImplMode Mode { get; set; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#download-example-net--c","content":" tip Download Example project BenutomoAutomaticDisposeImplSourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share BenutomoAutomaticDisposeImplSourceGenerator​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#share-benutomoautomaticdisposeimplsourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Disposer\" has the following generators:​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#category-disposer-has-the-following-generators","content":" 1 BenutomoAutomaticDisposeImplSourceGenerator  2 Coplt.Dropping  3 DisposableHelpers  4 Disposer  5 IDisposableGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"BenutomoAutomaticDisposeImplSourceGenerator by benutomo","url":"/RSCG_Examples/v2/docs/BenutomoAutomaticDisposeImplSourceGenerator#see-category","content":" Disposer ","version":"Next","tagName":"h3"},{"title":"BitsKit by barncastle","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/BitsKit","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#info","content":" info Name: BitsKit BitsKit is a library for efficient bit-level reading and writing also adding bit field support. Author: barncastle NuGet:https://www.nuget.org/packages/BitsKit/ You can find more details at https://github.com/barncastle/BitsKit Source: https://github.com/barncastle/BitsKit  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#original-readme","content":" note BitsKit BitsKit is a lightweight C# library that provides efficient bit-level reading, writing and manipulation. As well as adding bit-field support to C#, not dissimilar to C/C++ languages. All features support integral and memory types, as well as targeting both, Little Endian (LE) Least Significant Bit (LSB) and Big Endian (BE) Most Significant Bit (MSB). Features​ BitPrimitivesBit FieldsIO ClassesUtility Methods Usage​ BitPrimitives​ BitsKit.Primitives.BitPrimitives is the workhorse of the library containing all of the read and write logic. This class is the bit equivalent of System.Buffers.Binary.BinaryPrimitives and contains a MSB and LSB read and write method for each of the below integral types: sbyte, byte, short, ushort, int, uint, long, ulong, nint, nuint Each type has two overloads allowing the source/destination to be either a Span&lt;byte&gt; or T e.g., // reads a range of bits from a uint as MSB static uint ReadUInt32MSB(uint source, int bitOffset, int bitCount); // reads a range of bits from a span as MSB static uint ReadUInt32MSB(ReadOnlySpan&lt;byte&gt; source, int bitOffset, int bitCount); // writes a range of bits to a uint as MSB static void WriteUInt32MSB(ref uint destination, int bitOffset, uint value, int bitCount); // writes a range of bits to a span as MSB static void WriteUInt32MSB(Span&lt;byte&gt; destination, int bitOffset, uint value, int bitCount); This class also provides a ReverseBitOrder method for each integral type which inverts the bit order of each byte within the value, but not the order (endianness) of the bytes themselves e.g. // reverses the bit order of each byte static uint ReverseBitOrder(uint value); //7......0 7......0 0......7 0......7 0b11001000_00111011 =&gt; 0b00010011_11011100 Bit Fields​ BitsKit provides the ability to generate bit-fields within types and aims to be as feature complete as the C and C++ implementations. This is achieved through the use of attributes applied to backing fields, which describe the structure and layout. These are converted into properties via a source generator. Bit fields can be added to class, struct and record types, supporting all of their variants too e.g., readonly struct, record struct etc. Objects containing bit-fields are declared by the [BitObjectAttribute(BitOrder)] attribute which also declares the default bit order for the type. Types must be partial and not nested. Due to the nature of source generators, the user must generate the backing fields. Whilst this is more verbose than in C, it does provide much more granularity and control opening up some interesting dynamics. Backing fields must be a field and either; one of integral types above or one of the memory types below. byte[], fixed byte[], byte*, Span&lt;byte&gt;, ReadOnlySpan&lt;byte&gt;, Memory&lt;byte&gt;, ReadOnlyMemory&lt;byte&gt; Bit fields are declared using the [BitFieldAttribute] attribute which describes their name, size, bit order and properties. Each attribute defines a new bit-field sequential from the previous. A backing field can have as many bit-fields as desired, limited only by field boundaries. Notes: If the backing field is an integral type, the bit-field will be of the same type.If the backing field is a memory type, the FieldType is required as it cannot be inferred.If the backing field is readonly or represents a readonly type, the bit-field will also be readonly. // Constructor for integral backed bit-fields [BitFieldAttribute(string name, byte size)] // Constructor for memory backed bit-fields [BitFieldAttribute(string name, byte size, BitFieldType fieldType)] Fields: // The name of the bit-field public string? Name { get; } // The number of bits the field occupies public byte Size { get; } // The integral type of the field if backed by a memory type public BitFieldType? FieldType { get; } // Uses the opposite bit order than declared on the type public bool ReverseBitOrder { get; set; } // Modifiers that change the source generation public BitFieldModifiers Modifiers { get; set; } Padding Fields​ Like C, an unnamed bit-field generates a set of inaccessible &quot;padding&quot; bits. These are primarily used for alignment or to map reserved/unused bits. There is a constructor overload dedicated to these fields. // Constructor for integral padding bit-fields [BitFieldAttribute(byte size)] // Constructor for boolean padding bit-fields [BooleanFieldAttribute] // Constructor for enum padding bit-fields [EnumFieldAttribute(byte size)] Boolean Bit Fields​ Boolean bit-fields are supported by the [BooleanFieldAttribute] helper attribute. Boolean fields consume a single bit and return if it is set or not. This attribute can be applied to any valid backing field and inherits from the [BitFieldAttribute] attribute. Boolean fields can be mixed with integer and enum fields without incurring a new unit. // Constructor for boolean bit-fields [BooleanFieldAttribute(string name)] Enum Bit Fields​ Enum bit-fields are supported by the [EnumFieldAttribute] helper attribute. This attribute can be applied to any valid backing field and inherits from the [BitFieldAttribute] attribute. The enum type must be passed as a type argument i.e., typeof(MyEnum). Enum fields can be mixed with integer and boolean fields without incurring a new unit. // Constructor for enum bit-fields [EnumFieldAttribute(string name, byte size, Type enumType)] Modifiers​ The BitFieldModifiers enum allows alterations to the way that the source generator produces the bit-fields. By default all bit-fields are generated as a public read/write or public readonly properties relative to their backing field's accessibility. The Modifiers field allows control over this and provides the ability to change a bit-field's accessibility and if it is readonly, init only (.NET 6.0) and/or required (.NET 7.0). Note: Currently both the getter and setter share the same accessibility therefore you cannot have public bit-fields with private setters. Examples​ Putting this into action with the following C struct: struct S { // occupies 2 bytes: unsigned char b1 : 3; // 1st 3 bits (in 1st byte) are b1 unsigned char : 2; // next 2 bits (in 1st byte) are unused &quot;padding&quot; unsigned char b2 : 1; // next 1 bit (in 1st byte) is b2 unsigned char b3 : 6; // 6 bits for b3 - doesn't fit into the 1st byte =&gt; starts a 2nd unsigned char b4 : 2; // 2 bits for b4 - next (and final) bits in the 2nd byte }; Converted to it's BitsKit representation: [BitObject(BitOrder.LeastSignificantBit)] public partial struct S { [BitField(&quot;b1&quot;, 3)] // 1st 3 bits (in 1st byte) are b1 [BitField(2)] // next 2 bits (in 1st byte) are unused &quot;padding&quot; [BitField(&quot;b2&quot;, 1)] // next 1 bit (in 1st byte) is b2 private byte _backingField1; [BitField(&quot;b3&quot;, 6)] // 6 bits for b3 - doesn't fit into the 1st byte =&gt; use a 2nd [BitField(&quot;b4&quot;, 2)] // 2 bits for b4 - next (and final) bits in the 2nd byte private byte _backingField2; } Which produces a new generated partial class containing: public partial struct S { public byte b1 { get =&gt; ..; set =&gt; ..; }; // _backingField1 0..2 public byte b2 { get =&gt; ..; set =&gt; ..; }; // _backingField1 5 public byte b3 { get =&gt; ..; set =&gt; ..; }; // _backingField2 0..5 public byte b4 { get =&gt; ..; set =&gt; ..; }; // _backingField2 6..7 } Straddling Unit Boundaries​ Some C compilers support straddling storage-unit boundaries. An example of this would be the &quot;b3&quot; field in the above example occupying the last 2 bits in the first byte and the first 4 bits in the second byte. BitsKit enforces unit boundaries for integral types however memory types do allow this. [BitObject(BitOrder.LeastSignificantBit)] public unsafe partial struct S { [BitField(&quot;b1&quot;, 3)] // 1st 3 bits (in 1st byte) are b1 [BitField(2)] // next 2 bits (in 1st byte) are unused &quot;padding&quot; [BitField(&quot;b2&quot;, 1)] // next 1 bit (in 1st byte) is b2 [BitField(&quot;b3&quot;, 6)] // next (and final) 2 bits in 1st byte and 1st 4 bits in 2nd byte [BitField(&quot;b4&quot;, 4)] // 4 bits for b4 - next (and final) bits in the 2nd byte private fixed byte _backingField[2]; } Errors​ Below are the diagnostics BitsKit produces. Additionally, an ArgumentOutOfRangeException exception is thrown if the bit offset or count exceed the bounds of the backing field/source. Rule ID\tSeverity\tNotesBITSKIT001\tError\tBitsKit object must be partial BITSKIT002\tError\tBitsKit object must not be a nested type BITSKIT003\tError\tCannot infer FieldType BITSKIT004\tWarning\tConflicting accessibility modifiers BITSKIT005\tWarning\tConflicting setter modifiers BITSKIT006\tError\tEnum type argument expected IO Classes​ There are a number of IO types available under the BitsKit.IO namespace built to sequentially read/write regions of bit data. Each of these classes expose all the BitPrimitives methods whilst supporting seeking and writing in-place. BitReader/BitWriter - Classes for reading/writing to a byte array.MemoryBitReader/MemoryBitWriter - Ref structs for reading/writing to a Span&lt;byte&gt;.BitStreamReader/BitStreamWriter - Classes for reading/writing to a stream. Notes: The array and span backed types support up to int.MaxValue bits as they use a signed integer for positioning to boost performance. This limits the source to being less than 0x10000000 bytes.The BitStreamWriter class does support writing in-place however, the destination stream must be both readable and seekable to allowing buffering of the stream's existing data. Utility Methods​ Additional utilities for common bit processing tasks are provided under the BitsKit.Utilities namespace. Many of these functions have been taken from the awesome Bit Twiddling Hacks page created by Sean Eron Anderson. BitUtilities.InterleaveBits (See) Interleaves the bits of two integral numbers. This is also known as &quot;Morton numbers&quot; or &quot;Morton codes&quot; e.g., static uint InterleaveBits(ushort a, ushort b) // a b baba_baba_baba 0b00_1111, 0b10_0010 =&gt; 0b1000_0101_1101 BitUtilities.MergeBits (See) Merges the bits of two integral numbers according to a mask. If the mask bit is a 0, the bit is taken from a otherwise it is taken from b e.g., static uint MergeBits(uint a, uint b, uint mask) // a b mask bbbbaaaa 0b10101110, 0b11001010, 0b11110000 =&gt; 0b11001110 BitUtilities.NegateBits Negates a range of bits within an integral number e.g., static uint NegateBits(uint value, int bitOffset, int bitCount) // value offset count xxxx 0b1100_1101 4 4 =&gt; 0b0011_1101 BitUtilities.ReverseBits (See) Reverses both the bit and byte order (endian) of an integral number e.g., static uint ReverseBits(uint value) // a b b a //7......0 7......0 0......7 0......7 0b11001000_00111011 =&gt; 0b11011100_00010011 BitUtilities.SwapBits (See) Swaps the positions of two ranges of bits within an integral number e.g., static uint SwapBits(uint value, int offsetA, int offsetB, int bitCount) // value offsetA offsetB bitCount bbaa 0b1100_1101 4 6 2 =&gt; 0b0011_1101 ZigZag An integer encoding used to convert signed integers to unsigned integers whilst maintaining a relative sized bit count. This is achieved by making the least significant bit the sign bit thus making the bit count proportional to the magnitude. This encoding is particularly useful for deltas with a small range e.g., static uint Encode(int value) static int Decode(uint value) // -2 -1 0 1 2 // Two's complement 0b11111110 0b11111111 0b00000000 0b00000001 0b00000010 // ZigZag Encoded 0b00000011 0b00000001 0b00000000 0b00000010 0b00000100   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#about","content":" note Reading efficiently from a bit structure  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#example-source-csproj-source-files","content":" CSharp ProjectProgram.csBitStruct.cs This is the CSharp Project that references BitsKit &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;BitsKit&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BitsKitGeneratedFields.g.cs #nullable enable #pragma warning disable IDE0005 // Using directive is unnecessary #pragma warning disable IDE0005_gen // Using directive is unnecessary #pragma warning disable CS8019 // Unnecessary using directive. #pragma warning disable IDE0161 // Convert to file-scoped namespace using System; using System.Runtime.InteropServices; using BitsKit.Primitives; namespace BitsDemo { partial struct zlib_header { public Byte CM { get =&gt; BitPrimitives.ReadUInt8LSB(CMF, 0, 4); set =&gt; BitPrimitives.WriteUInt8LSB(ref CMF, 0, value, 4); } public Byte CINFO { get =&gt; BitPrimitives.ReadUInt8LSB(CMF, 4, 4); set =&gt; BitPrimitives.WriteUInt8LSB(ref CMF, 4, value, 4); } public Byte FCHECK { get =&gt; BitPrimitives.ReadUInt8LSB(FLG, 0, 5); set =&gt; BitPrimitives.WriteUInt8LSB(ref FLG, 0, value, 5); } public Byte FDICT { get =&gt; BitPrimitives.ReadUInt8LSB(FLG, 5, 1); set =&gt; BitPrimitives.WriteUInt8LSB(ref FLG, 5, value, 1); } public Byte FLEVEL { get =&gt; BitPrimitives.ReadUInt8LSB(FLG, 6, 2); set =&gt; BitPrimitives.WriteUInt8LSB(ref FLG, 6, value, 2); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#download-example-net--c","content":" tip Download Example project BitsKit   ","version":"Next","tagName":"h3"},{"title":"Share BitsKit​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#share-bitskit","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/BitsKit  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Bitwise\" has the following generators:​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#category-bitwise-has-the-following-generators","content":" 1 BitsKit  2 Darp.BinaryObjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"BitsKit by barncastle","url":"/RSCG_Examples/v2/docs/BitsKit#see-category","content":" Bitwise ","version":"Next","tagName":"h3"},{"title":"Biwen.AutoClassGen by vipwan","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#info","content":" info Name: Biwen.AutoClassGen Biwen.AutoClassGen, CodeGEN Author: vipwan NuGet:https://www.nuget.org/packages/Biwen.AutoClassGen/ You can find more details at https://github.com/vipwan/Biwen.AutoClassGen Source: https://github.com/vipwan/Biwen.AutoClassGen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#original-readme","content":" note Biwen.AutoClassGen Usage scenario​ In many cases, we will have a lot of request objects, such as GetIdRequest, GetUserRequest, etc..., and these requests may have a large number of the same fields. For example, the multi-tenant Id, the number of pages, and these attribute fields may have validation rules, binding rules, and Swagger descriptions. If all this code needs to be written, it will add a lot of work, so Biwen.AutoClassGen came into being to solve this pain point...In many cases, we will have a lot of DTO objects,AOP &amp; Decorator 中文 Usage​ dotnet add package Biwen.AutoClassGen.Attributes Gen DTO Usage docGen Request Usage docGen Decoration Usage doc Used by​ if you use this library, please tell me, I will add your project here.​ Biwen.QuickApi  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#about","content":" note Generating properties from interface to class.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csIPerson.csIPerson2.cs This is the CSharp Project that references Biwen.AutoClassGen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Biwen.AutoClassGen&quot; Version=&quot;1.0.0.6&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;Biwen.AutoClassGen.Attributes&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Biwen.AutoClassGen.Person.IPerson2.g.cs // &lt;auto-generated /&gt; // author:vipwan@outlook.com 万雅虎 // issue:https://github.com/vipwan/Biwen.AutoClassGen/issues // 如果你在使用中遇到问题,请第一时间issue,谢谢! // This file is generated by Biwen.AutoClassGen.SourceGenerator using System; using System.Collections.Generic; using System.Text; using System.Threading.Tasks; using FromInterface; #pragma warning disable namespace FromInterface { public partial class Person : IPerson2 { /// &lt;inheritdoc cref = &quot;IPerson.FirstName&quot;/&gt; [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)] [System.ComponentModel.DescriptionAttribute(&quot;person first name&quot;)] public string FirstName { get; set; } /// &lt;inheritdoc cref = &quot;IPerson.LastName&quot;/&gt; public string LastName { get; set; } } } #pragma warning restore   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#download-example-net--c","content":" tip Download Example project Biwen.AutoClassGen   ","version":"Next","tagName":"h3"},{"title":"Share Biwen.AutoClassGen​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#share-biwenautoclassgen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Biwen.AutoClassGen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Biwen.AutoClassGen by vipwan","url":"/RSCG_Examples/v2/docs/Biwen.AutoClassGen#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"AutoSpectre by Jeppe Roi Kristensen","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/AutoSpectre","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#info","content":" info Name: AutoSpectre A quick and dirty tool to generate a form through with a source generator that can collect data Author: Jeppe Roi Kristensen NuGet:https://www.nuget.org/packages/AutoSpectre.SourceGeneration https://www.nuget.org/packages/AutoSpectre You can find more details at https://github.com/jeppevammenkristensen/auto-spectre Source: https://github.com/jeppevammenkristensen/auto-spectre  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#original-readme","content":" note Auto Spectre Source generator project to generate classes that can be used in a console to prompt for values using Spectre.Console Short Guide​ Decorate a class with the AutoSpectreForm attribute and then decorate the properties (must be settable) with a TextPrompt or SelectPrompt attribute. NOTE The AskAttribute has been marked as obsolete and split into TextPromptAttribute and SelectPromptAttribute to avoid having a lot of properties only relevant for one or another type of prompt. Example input​ [AutoSpectreForm(Culture = &quot;da-DK&quot;)] public class Example { [TextPrompt(Title = &quot;Add item&quot;)] public int[] IntItems { get; set; } = Array.Empty&lt;int&gt;(); [TextPrompt(Title = &quot;Enter first name&quot;, DefaultValueStyle = &quot;bold&quot;, DefaultValueSource = nameof(FirstNameDefaultValue))] public string? FirstName { get; set; } public readonly string? FirstNameDefaultValue = &quot;John Doe&quot;; [TextPrompt(PromptStyle = &quot;green bold&quot;)] public bool LeftHanded { get; set; } [TextPrompt(Title = &quot;Choose your [red]value[/]&quot;)] public SomeEnum Other { get; set; } [TextPrompt(Secret = true, Mask = '*')] public string? Password { get; set; } [TextPrompt(ChoicesSource = nameof(NameChoices), ChoicesStyle = &quot;red on yellow&quot;, ChoicesInvalidText = &quot;Must be one of the names&quot;)] public string Name { get; set; } = null!; public static readonly string[] NameChoices = new[] {&quot;Kurt&quot;, &quot;Krist&quot;, &quot;David&quot;, &quot;Pat&quot;}; [TextPrompt] public OtherAutoSpectreFormClass ChildForm { get; set; } = new(); [TextPrompt] public IReadOnlyList&lt;OtherAutoSpectreFormClass&gt; Investors { get; set; } = new List&lt;OtherAutoSpectreFormClass&gt;(); [TaskStep(UseStatus = true, StatusText = &quot;This will take a while&quot;, SpinnerType = SpinnerKnownTypes.Christmas, SpinnerStyle = &quot;green on yellow&quot;)] public void DoSomething(IAnsiConsole console) { console.Write(new FigletText(&quot;A figlet text is needed&quot;)); } [SelectPrompt(WrapAround = true, PageSize = 3, MoreChoicesText = &quot;Press down to see more choices&quot;, HighlightStyle = &quot;purple&quot;)] //[SelectPrompt(Source = nameof(ItemSource))] public string Item { get; set; } = string.Empty; public List&lt;string&gt; ItemSource { get; } = new() {&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;}; [SelectPrompt(InstructionsText = &quot;Check the special items you want to select&quot;)] //[SelectPrompt(Converter = nameof(SpecialProjectionConverter))] public List&lt;int&gt; SpecialProjection { get; set; } = new(); public string SpecialProjectionConverter(int source) =&gt; $&quot;Number {source}&quot;; public List&lt;int&gt; SpecialProjectionSource { get; set; } = new() {1, 2, 3, 4}; [TextPrompt] // [TextPrompt(Validator = nameof(EnterYearValidator))] public int EnterYear { get; set; } public string? EnterYearValidator(int year) { return year &lt;= DateTime.Now.Year ? null : &quot;Year cannot be larger than current year&quot;; } [TextPrompt] public HashSet&lt;string&gt; Names { get; set; } = new(StringComparer.OrdinalIgnoreCase); public string? NamesValidator(List&lt;string&gt; items, string newItem) { if (newItem == &quot;Foobar&quot;) return &quot;Cannot be Foobar&quot;; if (items.Contains(newItem)) return $&quot;{newItem} has already been added&quot;; return null; } [TextPrompt] public bool AddExistingName { get; set; } [TextPrompt(Condition = nameof(AddExistingName))] public string? ExistingName { get; set; } [TextPrompt(Condition = nameof(AddExistingName), NegateCondition = true)] public string? NewName { get; set; } } Behind the scenes this will generate an interface factory and implentation using Spectre.Console to prompt for the values. Example output​ /// &lt;summary&gt; /// Helps create and fill &lt;see cref = &quot;Example&quot;/&gt; with values /// &lt;/summary&gt; public interface IExampleSpectreFactory { Example Get(Example destination = null); } /// &lt;summary&gt; /// Helps create and fill &lt;see cref = &quot;Example&quot;/&gt; with values /// &lt;/summary&gt; public class ExampleSpectreFactory : IExampleSpectreFactory { public Example Get(Example destination = null) { IOtherAutoSpectreFormClassSpectreFactory OtherAutoSpectreFormClassSpectreFactory = new OtherAutoSpectreFormClassSpectreFactory(); destination ??= new Autospectre.Examples.Examples.GithubSample.Example(); var culture = new CultureInfo(&quot;da-DK&quot;); // Prompt for values for destination.IntItems { List&lt;int&gt; items = new List&lt;int&gt;(); bool continuePrompting = true; do { var item = AnsiConsole.Prompt(new TextPrompt&lt;int&gt;(&quot;Add item&quot;).WithCulture(culture)); items.Add(item); continuePrompting = AnsiConsole.Confirm(&quot;Add more items?&quot;); } while (continuePrompting); int[] result = items.ToArray(); destination.IntItems = result; } destination.FirstName = AnsiConsole.Prompt(new TextPrompt&lt;string?&gt;(&quot;Enter first name&quot;).AllowEmpty().WithCulture(culture).DefaultValue(destination.FirstNameDefaultValue).DefaultValueStyle(&quot;bold&quot;)); destination.LeftHanded = AnsiConsole.Confirm(&quot;Enter [green]LeftHanded[/]&quot;); destination.Other = AnsiConsole.Prompt(new SelectionPrompt&lt;SomeEnum&gt;().Title(&quot;Choose your [red]value[/]&quot;).PageSize(10).AddChoices(Enum.GetValues&lt;SomeEnum&gt;())); destination.Password = AnsiConsole.Prompt(new TextPrompt&lt;string?&gt;(&quot;Enter [green]Password[/]&quot;).AllowEmpty().WithCulture(culture).Secret('*')); destination.Name = AnsiConsole.Prompt(new TextPrompt&lt;string&gt;(&quot;Enter [green]Name[/]&quot;).WithCulture(culture).AddChoices(Example.NameChoices()).ChoicesStyle(&quot;red on yellow&quot;).InvalidChoiceMessage(&quot;Must be one of the names&quot;)); { AnsiConsole.MarkupLine(&quot;Enter [green]ChildForm[/]&quot;); var item = new Autospectre.Examples.Examples.GithubSample.OtherAutoSpectreFormClass(); OtherAutoSpectreFormClassSpectreFactory.Get(item); destination.ChildForm = item; } // Prompt for values for destination.Investors { List&lt;OtherAutoSpectreFormClass&gt; items = new List&lt;OtherAutoSpectreFormClass&gt;(); bool continuePrompting = true; do { { AnsiConsole.MarkupLine(&quot;Enter [green]Investors[/]&quot;); var newItem = new Autospectre.Examples.Examples.GithubSample.OtherAutoSpectreFormClass(); OtherAutoSpectreFormClassSpectreFactory.Get(newItem); items.Add(newItem); } continuePrompting = AnsiConsole.Confirm(&quot;Add more items?&quot;); } while (continuePrompting); System.Collections.Generic.IReadOnlyList&lt;Autospectre.Examples.Examples.GithubSample.OtherAutoSpectreFormClass&gt; result = items; destination.Investors = result; } AnsiConsole.Status().SpinnerStyle(&quot;green on yellow&quot;).Spinner(Spinner.Known.Christmas).Start(&quot;This will take a while&quot;, ctx =&gt; { destination.DoSomething(AnsiConsole.Console); }); destination.Item = AnsiConsole.Prompt(new SelectionPrompt&lt;string&gt;().Title(&quot;Enter [green]Item[/]&quot;).PageSize(3).WrapAround(true).MoreChoicesText(&quot;Press down to see more choices&quot;).HighlightStyle(&quot;purple&quot;).AddChoices(destination.ItemSource.ToArray())); destination.SpecialProjection = AnsiConsole.Prompt(new MultiSelectionPrompt&lt;int&gt;().Title(&quot;Enter [green]SpecialProjection[/]&quot;).UseConverter(destination.SpecialProjectionConverter).PageSize(10).InstructionsText(&quot;Check the special items you want to select&quot;).AddChoices(destination.SpecialProjectionSource.ToArray())); destination.EnterYear = AnsiConsole.Prompt(new TextPrompt&lt;int&gt;(&quot;Enter [green]EnterYear[/]&quot;).WithCulture(culture).Validate(ctx =&gt; { var result = destination.EnterYearValidator(ctx); return result == null ? ValidationResult.Success() : ValidationResult.Error(result); })); // Prompt for values for destination.Names { List&lt;string&gt; items = new List&lt;string&gt;(); bool continuePrompting = true; do { bool valid = false; while (!valid) { var item = AnsiConsole.Prompt(new TextPrompt&lt;string&gt;(&quot;Enter [green]Names[/]&quot;).WithCulture(culture)); var validationResult = destination.NamesValidator(items, item); if (validationResult is { } error) { AnsiConsole.MarkupLine($&quot;[red]{error}[/]&quot;); valid = false; } else { valid = true; items.Add(item); } } continuePrompting = AnsiConsole.Confirm(&quot;Add more items?&quot;); } while (continuePrompting); System.Collections.Generic.HashSet&lt;string&gt; result = new System.Collections.Generic.HashSet&lt;string&gt;(items); destination.Names = result; } destination.AddExistingName = AnsiConsole.Confirm(&quot;Enter [green]AddExistingName[/]&quot;); if (destination.AddExistingName == true) { destination.ExistingName = AnsiConsole.Prompt(new TextPrompt&lt;string?&gt;(&quot;Enter [green]ExistingName[/]&quot;).AllowEmpty().WithCulture(culture)); } if (destination.AddExistingName == false) { destination.NewName = AnsiConsole.Prompt(new TextPrompt&lt;string?&gt;(&quot;Enter [green]NewName[/]&quot;).AllowEmpty().WithCulture(culture)); } return destination; } } How to call​ IExampleSpectreFactory formFactory = new ExampleSpectreFactory(); // The form object is initialized in the Get method var form = formFactory.Get(); // We pass a pre initialized form object to the get method var preinitializedForm = new Example(); preinitializedForm = formFactory.Get(preinitializedForm); // An alternative can be to use the generated extension method // this will initalize the factory and call the get Method var form = new Example().SpectrePrompt(); // If you want to dump the values to the console you can use the Dump extension method form.SpectreDump(); The form attribute​ The class that you wan't populated, should be decorated with the AutoSpectreForm attribute. If it has at least one valid property or method decorated with an attribute the SpectreFactory is generated. Culture​ You can control the overall culture used by setting the culture property. This will be used for TextPrompts. If it's isn't set the CurrentUICulture will be used. DisableDump​ If you do want to generate the SpectreDump method, you can disable it using the DisableDump property. Inheritance​ This class can inherit from other classes that has the properties or methods decorated with attributes. It is not required that the baseclass has the AutoSpectreForm. The steps on the base class will be generated last public class BaseClass { [TextPrompt] public string BaseProperty { get;set;} } [AutoSpectreForm] public class DerivedClass : BaseClass { [TextPrompt] public string DerivedProperty { get;set;} } Constructor​ Since version 0.5.0 the class is allowed to not have an empty constructor. But in that case the Get/GetAsync method will change to be for a passed in instance. Requirering you to new up the class before calling the Get method. If you have multiple constructors, you can decorate the constructor intended for initalization by using the UsedConstructorattribute public void Get(Example destination) Compared to below where destination can be preinitialized or null (in which case the result will be newed up in the call) public Example Get(Example destination = null) The property attributes​ These properties are applied to properties. The properties must be settable and public. The two attributes share the following Properties Title (can be used to overrule the default title)Condition (points to a property or method that returns bool to determine if the given property should be prompted for)NegateCondition negates the condition. A short note on sources​ Some of the properties of the attributes are source properties. It can vary if they can point to fields, properties or methods. But a general rule is that the sources must be public and available on the AutoSpectreForm decorated class. TextPromptAttribute​ This will in the end present some kind of input prompt to the user, that tries to prompt the use for the value of a given type. Per default it will try to convert a string to the given value. However if the type is bool it will produce a ConfirmationPrompt (y/n). If the type is an enum it will generate a selection prompt (but unlike using the SelectPrompt, you do not have to provide a source). If the type is another class that has been decorated with the AutoSpectreForm attribute it will use that forms SpectreFactory to prompt for the values. Default value​ Note that the logic behind default value has changed. Earlier the default value was determined by the value set to a property like below: public string FirstName { get; set; } = &quot;John Doe&quot;; The new approach from version 0.7.0 is that it can be set by using the DefaultValueSource. The source can be a method, property or field. And can be instance or static and must be public The style can be controlled by setting the DefaultValueStyle Default value is only currently used for single items (not enumerables) IEnumerable types​ In the case of a TextPromptAttribute and an IEnumerable of T value. The rules above will be applied to a single type, and after collecting input the user will be prompted if the want's to continue. Other functionality​ The textprompt allows you to add validation, see more belowadd a password prompt by using the Secret and/or Mask propertycontrol styles with the DefaultValueStylefor the DefaultValue and PromptStyle for the prompt itself. See styles.support Choices (autocomplete) with the SelectPromptAttribute​ The select prompt will adjust based on whether or not the property type is single or enumerable. If it's single select prompt will be used and other a multiselect prompt. It's required that you define a source. Either by pointing the Source property to the name of the property or method that returns the sources to use or by convention (see source convention) Here you can use the converter to control how the values are presented to the user. Other interesting attribute properties are: PageSize (defaults to 10)WrapAround. If set to true we can cycle through the elements. If you reach the end you will go to the first element and vice versaMoreChoicesText. If set this will be displayed when you reach the end of the page sizeInstructionsText (only for multiselect). This is custom text to guide them to select mulitiple itemsHighlightStyle The method attribute​ If you wan't to do something that doesn't fit prompting. Between some of the steps you can use the TaskStepAttribute to do that. The filosophy for this method is that you can do 'custom' things. You can choose display whatever you may want to the user (for instance figlet text)You can do a lookup to a database or an api.You can do some processing of the data you currently collectedIf the current supplied property step attributes does not fit your needs you do some custom prompting to set a property values. NOTE If you use the Status bar, prompting is not allowed, so it would be important that UseStatus is set to false in that case. Requirements for the method​ It can return either void or Task. If the return type is Task this will affect how the SpectreFactory is generated. As the Get call will be async instead and be named GetAsync. It allows you to have IAnsiConsole as a parameter, and that will be injected into the method when it's called. This should make it easier to do testing if that is desired. Title​ Unlike the property based step attributes we will not generate a default title if the Title is not set. If you input an IAnsiConsole it might be overkill to also add a Title. But there is nothing hindering you from doing so. Status bar​ You can control whether or not you want a status bar(spinner) to run when the method is called. This is done by setting the UseStatus property to true and adding text to the StatusText property. Both are required. The choice was that it was more intuitive that the status will be displayed by having two properties instead of StatusText being optional. You can control the spinner type and style by using the SpinnerType and SpinnerStyle properties. The spinner type is set by using the SpinnerKnownTypes this has been generated from the KnownTypes. Custom spinner types are not possible. Alternatively you can generate the status inside the method, and thereby allowing you all the flexibility you want. Collections strategy​ When requesting input for a collection we will often work with a List of T and converted it to the type of the property. Most cases should be covered. But here is a short list of some of the &quot;conversions&quot; behind the scenes. Array will result in a ToList()HashSet will be initalized with new HashSet of TImmutable collection types will append ToImmutable{Type}()Interfaces like IList of T ICollection of T IEnumerable of T IReadOnlyCollection of T IReadOnlyList of T have their values directly set as List of T inherit directly from them Example​ Code​ [AutoSpectreForm] public class CollectionSample { [SelectPrompt(Source = nameof(Items), Title = &quot;Select multiple items&quot;)] public IReadOnlyList&lt;string&gt; Multiselect { get; set; } [SelectPrompt(Source = nameof(Items))] public string[] ArrayMultiSelect { get; set; } = Array.Empty&lt;string&gt;(); [SelectPrompt(Source = nameof(Items))] public ImmutableArray&lt;string&gt; ArrayMultiSelectMultiple { get; set; } [SelectPrompt(Source = nameof(Numbers))] public List&lt;int&gt; ListNumbers { get; set; } = new List&lt;int&gt;(); public int[] Numbers { get; } = new[] {1, 2, 3}; public List&lt;string&gt; Items { get; } = new List&lt;string&gt;() { &quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot; }; } Generated​ public interface ICollectionSampleSpectreFactory { CollectionSample Get(CollectionSample destination = null); } public class CollectionSampleSpectreFactory : ICollectionSampleSpectreFactory { public CollectionSample Get(CollectionSample destination = null) { destination ??= new Test.CollectionSample(); destination.Multiselect = AnsiConsole.Prompt(new MultiSelectionPrompt&lt;string&gt;().Title(&quot;Select multiple items&quot;).PageSize(10).AddChoices(destination.Items.ToArray())); destination.ArrayMultiSelect = AnsiConsole.Prompt(new MultiSelectionPrompt&lt;string&gt;().Title(&quot;Enter [green]ArrayMultiSelect[/]&quot;).PageSize(10).AddChoices(destination.Items.ToArray())).ToArray(); destination.ArrayMultiSelectMultiple = AnsiConsole.Prompt(new MultiSelectionPrompt&lt;string&gt;().Title(&quot;Enter [green]ArrayMultiSelectMultiple[/]&quot;).PageSize(10).AddChoices(destination.Items.ToArray())).ToImmutableArray(); destination.ListNumbers = AnsiConsole.Prompt(new MultiSelectionPrompt&lt;int&gt;().Title(&quot;Enter [green]ListNumbers[/]&quot;).PageSize(10).AddChoices(destination.Numbers.ToArray())); return destination; } } Converter​ You can add a converter method that will transform a given class to a string. This can be used when the attribute is SelectPrompt to give a string representation of a class. Currently the converter must be a method on the class with the [AutoSpectreForm] attribute on and it must be at least public or internal. The method should take the given type as input parameter and return a string. Example​ Code​ public record Person(string FirstName, string LastName); [AutoSpectreForm] public class ConverterForms { [SelectPrompt(Title = &quot;Select person&quot;, Source = nameof(GetPersons), Converter = nameof(PersonToString))] public Person? Person { get; set; } [SelectPrompt(Title = &quot;Select persons&quot;, Source = nameof(GetPersons), Converter = nameof(PersonToString))] public List&lt;Person&gt; Persons { get; set; } = new List&lt;Person&gt;(); public string PersonToString(Person person) =&gt; $&quot;{person.FirstName} {person.LastName}&quot;; public IEnumerable&lt;Person&gt; GetPersons() { yield return new Person(&quot;John&quot;, &quot;Doe&quot;); yield return new Person(&quot;Jane&quot;, &quot;Doe&quot;); yield return new Person(&quot;John&quot;, &quot;Smith&quot;); yield return new Person(&quot;Jane&quot;, &quot;Smith&quot;); } } Generated​ public class ConverterFormsSpectreFactory : IConverterFormsSpectreFactory { public ConverterForms Get(ConverterForms destination = null) { destination ??= new ConsoleApp1.ConverterForms(); destination.Person = AnsiConsole.Prompt(new SelectionPrompt&lt;ConsoleApp1.Person?&gt;().Title(&quot;Select person&quot;).UseConverter(destination.PersonToString).PageSize(10).AddChoices(destination.GetPersons().ToArray())); destination.Persons = AnsiConsole.Prompt(new MultiSelectionPrompt&lt;ConsoleApp1.Person&gt;().Title(&quot;Select persons&quot;).UseConverter(destination.PersonToString).PageSize(10).AddChoices(destination.GetPersons().ToArray())); return destination; } } Validation​ You can define validation by using the Validator property on the TextPromptAttribute or by following the {PropertyName}Validator convention. The method being pointed to should return a nullable string. If validation is succesfull null should be returned, otherwise the validation error text message should be returned. Based on the return type there are two types of parameters needed Single property. It's expected that the method has one parameter that is the same as the propertyEnumerable property. It's expected that the first parameter is an IEnumerable of the property type and the second parameter is the type The method pointed to must be public, but can be instance and static. Example​ [TextPrompt(Validator = nameof(ValidateAge))] public int Age { get; set; } [TextPrompt()] public int[] Ages { get; set; } = Array.Empty&lt;int&gt;(); public string? AgesValidator(List&lt;int&gt; items, int item) { if (ValidateAge(item) is { } error) return error; if (items?.Contains(item) == true) { return $&quot;{item} allready added&quot;; } return null; } public string? ValidateAge(int age) { return age &gt;= 18 ? null : &quot;Age must be at least 18&quot;; } Generated​ destination.Age = AnsiConsole.Prompt(new TextPrompt&lt;int&gt;(&quot;Enter [green]Age[/]&quot;).Validate( ctx =&gt; { var result = destination.ValidateAge(ctx); return result == null ? ValidationResult.Success() : ValidationResult.Error(result); })); // Prompt for values for destination.Ages { List&lt;int&gt; items = new List&lt;int&gt;(); bool continuePrompting = true; do { bool valid = false; while (!valid) { var item = AnsiConsole.Prompt(new TextPrompt&lt;int&gt;(&quot;Enter [green]Ages[/]&quot;)); var validationResult = destination.AgesValidator(items, item); if (validationResult is { } error) { AnsiConsole.MarkupLine($&quot;[red]{error}[/]&quot;); valid = false; } else { valid = true; items.Add(item); } } continuePrompting = AnsiConsole.Confirm(&quot;Add more items?&quot;); } while (continuePrompting); int[] result = items.ToArray(); destination.Ages = result; } Choices​ You can define choices for a property by using the ChoicesSource property or by following the {PropertyName}Choices convention. The source can be a property, method (no parameters) or field that returns the singular type of the property. The choices are autocomplete and will be displayed in the prompt. The style of how they are displayed can be controlled through the ChoicesStyle prpoerty. When the user types something that is not in the choices, an invalid text will be displayed (this can be overloaded with ChoicesInvalidText). Example​ [TextPrompt( ChoicesSource = nameof(NameChoices), ChoicesStyle = &quot;red on yellow&quot;,ChoicesInvalidText = &quot;Must be one of the names&quot;)] public string Name { get; set; } = null!; public static readonly string[] NameChoices = new[] {&quot;Kurt&quot;, &quot;Krist&quot;, &quot;David&quot;, &quot;Pat&quot;}; Generated​ destination.Name = AnsiConsole.Prompt( new TextPrompt&lt;string&gt;(&quot;Enter [green]Name[/]&quot;) .WithCulture(culture) .AddChoices(Example.NameChoices) .ChoicesStyle(&quot;red on yellow&quot;) .InvalidChoiceMessage(&quot;Must be one of the names&quot;)); Type initialization​ If you have a property type that is another form. For instance [AutoSpectreForm] public class MainForm { [TextPrompt] public OtherForm ChildForm { get; set; } } [AutoSpectreForm] public class OtherForm { public OtherForm(string title) { } ... } If the constructor of the other type is not empty (no parameters), you will get an error. This can however be amended by using the TypeInitalizer and point it to a method that return the type you want to initalize. The method pointing to should be public or internal and should return the given type and not have any parameters. ... [TextPrompt(TypeInitializer = nameof(InitializeChildForm))] public OtherForm ChildForm { get;set; } public OtherForm InitializeChildForm() =&gt; new(&quot;Some title&quot;); ... Like in other scenarios this can also be achieved by convention. This is done by naming the method Init{TypeName} and have the correct signature. ## Styles There are different properties to control the style. We won't go into detail here but we take a string as input and try to evaluate the style. If it can't be parsed an error will be outputted in the build log(since it's a source generator it will often first appear after a build). Styles can be, in very rough terms, [colors](https://spectreconsole.net/appendix/colors) or [styles](https://spectreconsole.net/appendix/styles) and used in different combinations. Try them out, you will be &quot;told&quot; if it's not allowed by the AutoSpectre SourceGenerator. :) * Red * Green slowblink * Red on white (red foreground on white background) * italic blue on yellow ## Conditions Using the `Condition` you can instruct whether prompting should occur for a given property. The condition should point to either a public bool property or a public method with no parameters returning bool. You can negate this by using the `NegateCondition` property. ### Example ```csharp [AutoSpectreForm] public class ConditionSampleForm { [TextPrompt] public bool AskFriendlyCondition { get; set; } [TextPrompt(Title =&quot;Please sir what is your name?&quot;)] public string AskFriendly { get; set; } [TextPrompt(Title = &quot;What is your #!^$ name&quot;, Condition = nameof(AskFriendlyCondition), NegateCondition = true)] public string AskHostile { get; set; } } Generated​ destination.AskFriendlyCondition = AnsiConsole.Confirm(&quot;Enter [green]AskFriendlyCondition[/]&quot;); if (destination.AskFriendlyCondition == true) { destination.AskFriendly = AnsiConsole.Prompt(new TextPrompt&lt;string&gt;(&quot;Please sir what is your name?&quot;)); } if (destination.AskFriendlyCondition == false) { destination.AskHostile = AnsiConsole.Prompt(new TextPrompt&lt;string&gt;(&quot;What is your #!^$ name&quot;)); } Conventions​ The following conventions come into play Source​ You can leave out the Source in the SelectPromptAttribute if you have a property or method that is named {NameOfProperty}Source and have the correct structure ( No input parameters and returns an enumerable of the type of the given property) Example​ [SelectPrompt] public string Name { get; set; } public IEnumerable&lt;string&gt; NameSource() { yield return &quot;John Doe&quot;; yield return &quot;Jane Doe&quot;; yield return &quot;John Smith&quot;; } Converter​ You can also leave out the Converter in the AskAttribute if you have a method with the name {NameOfProperty}Converter and the correct structure (One parameter of the same type as the property and returning a string) Example​ [SelectPrompt(AskType = AskType.Selection)] public FullName Name { get; set; } public string NameConverter(FullName name) =&gt; $&quot;{name.FirstName} {name.LastName}&quot;; Validation​ It's possible to leave out the Validator in the TextPromptAttribute if you have a method with the name {NameOfProperty}Validator and the correct structure (see the part about Validation) Example​ [TextPrompt] public int Age {get;set;} public string? AgeValidator(int age) { return age &gt;= 18 ? null : &quot;Age must be at least 18&quot;; } Condition​ It's possible to leave out the Condition in a prompt attribute if you have a method with no parameters returning bool or a property returning bool that matches {NameOfProperty}Condition. If you want to negate this you will still need to provide the NegateCondition manually. [TextPrompt] public string FirstName { get; set; } public bool FirstNameCondition =&gt; true; [TextPrompt(NegateCondition = true)] public string NegatePrompt { get; set; } public bool NegatePromptCondition =&gt; false;   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#about","content":" note Generating prompt to input values for a console application.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#example-source-csproj-source-files","content":" CSharp ProjectProgram.csReadPerson.cs This is the CSharp Project that references AutoSpectre &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutoSpectre&quot; Version=&quot;0.8.1&quot; /&gt; &lt;PackageReference Include=&quot;AutoSpectre.SourceGeneration&quot; Version=&quot;0.8.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ReadData.ReadPersonAutoSpectreFactory.g.cs using Spectre.Console; using System; using System.Collections.Generic; using System.Linq; using System.Collections.Immutable; using System.Globalization; using AutoSpectre.Extensions; using Spectre.Console.Rendering; namespace ReadData { /// &lt;summary&gt; /// Helps create and fill &lt;see cref = &quot;ReadPerson&quot;/&gt; with values /// &lt;/summary&gt; public interface IReadPersonSpectreFactory { ReadPerson Get(ReadPerson destination = null); } /// &lt;summary&gt; /// Helps create and fill &lt;see cref = &quot;ReadPerson&quot;/&gt; with values /// &lt;/summary&gt; public class ReadPersonSpectreFactory : IReadPersonSpectreFactory { public ReadPerson Get(ReadPerson destination = null) { destination ??= new ReadData.ReadPerson(); var culture = CultureInfo.CurrentUICulture; destination.FirstName = AnsiConsole.Prompt(new TextPrompt&lt;string?&gt;(&quot;Enter first name&quot;).AllowEmpty().WithCulture(culture).DefaultValue(destination.FirstNameDefaultValue).DefaultValueStyle(&quot;bold&quot;)); destination.LastName = AnsiConsole.Prompt(new TextPrompt&lt;string?&gt;(&quot;Enter [green]LastName[/]&quot;).AllowEmpty().WithCulture(culture).DefaultValue(destination.LastNameDefaultValue).PromptStyle(&quot;green bold&quot;)); return destination; } } public static class ReadPersonSpectreFactoryExtensions { public static ReadPerson SpectrePrompt(this ReadPerson source) { ReadPersonSpectreFactory factory = new(); return factory.Get(source); } /// &lt;summary&gt; /// Returns data as a IRenderable /// Experimental. Might break /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public static IRenderable GenerateTable(this ReadPerson source) { var table = new Table(); table.AddColumn(new TableColumn(&quot;Name&quot;)); table.AddColumn(new TableColumn(&quot;Value&quot;)); table.AddRow(new Markup(&quot;FirstName&quot;), new Markup(source.FirstName?.ToString())); table.AddRow(new Markup(&quot;LastName&quot;), new Markup(source.LastName?.ToString())); return table; } /// &lt;summary&gt; /// Renders the table /// Experimental. Might break /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public static void SpectreDump(this ReadPerson source) { AnsiConsole.Write(source.GenerateTable()); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#download-example-net--c","content":" tip Download Example project AutoSpectre   ","version":"Next","tagName":"h3"},{"title":"Share AutoSpectre​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#share-autospectre","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoSpectre  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"AutoSpectre by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/AutoSpectre#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"BadIdeas.Icons.FontAwesome by Phil Scott","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#info","content":" info Name: BadIdeas.Icons.FontAwesome Package Description Author: Phil Scott NuGet:https://www.nuget.org/packages/BadIdeas.Icons.FontAwesome/ You can find more details at https://github.com/phil-scott-78/Icons/ Source: https://github.com/phil-scott-78/Icons/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#original-readme","content":" note BadIdeas.Icons I had a bad idea about building out all the icons in Font Awesome in a huge blazor assembly and relying on dotnet trimming to keep the file size low. This is the result. Install​ dotnet add package BadIdeas.Icons.FontAwesome Use​ All the icons are components in the Icon namespace. They have zero styling, so you'll need to apply a width and a fill color with whatever CSS library you're into. @using BadIdeas.FontAwesome.Icons &lt;Icon Data=&quot;Brands.Github()&quot; class=&quot;...your styling...&quot;&gt; &lt;/Icon&gt; Neat​ This will render the svg for the GitHub icon. No external javascript or CSS is needed for this, just a few KBs for the SVG content. And because of the assembly trimming, only the SVGs that are needed are deployed.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#about","content":" note generate font awesome icons  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#example-source-csproj-source-files","content":" CSharp ProjectHome.razor This is the CSharp Project that references BadIdeas.Icons.FontAwesome &lt;Project Sdk=&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;BadIdeas.Icons.FontAwesome&quot; Version=&quot;0.0.0-alpha.0.21&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly&quot; Version=&quot;9.0.8&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot; Version=&quot;9.0.8&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  App_razor.g.csLayout_MainLayout_razor.g.csLayout_NavMenu_razor.g.csPages_Counter_razor.g.csPages_Home_razor.g.csPages_Weather_razor.g.cs_Imports_razor.g.cs #pragma checksum &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; &quot;{8829d00f-11b8-4213-878b-770e8597ac16}&quot; &quot;ca69fbc161c0130d6d7831728befc975abb17b04491a271bc49266261055543b&quot; // &lt;auto-generated/&gt; #pragma warning disable 1591 namespace DemoBlazor { #line default using global::System; using global::System.Collections.Generic; using global::System.Linq; using global::System.Threading.Tasks; using global::Microsoft.AspNetCore.Components; #nullable restore #line (1,2)-(1,23) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using System.Net.Http #nullable disable ; #nullable restore #line (2,2)-(2,28) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using System.Net.Http.Json #nullable disable ; #nullable restore #line (3,2)-(3,45) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.Forms #nullable disable ; #nullable restore #line (4,2)-(4,47) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.Routing #nullable disable ; #nullable restore #line (5,2)-(5,43) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.Web #nullable disable ; #nullable restore #line (6,2)-(6,58) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.Web.Virtualization #nullable disable ; #nullable restore #line (7,2)-(7,56) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.WebAssembly.Http #nullable disable ; #nullable restore #line (8,2)-(8,27) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using Microsoft.JSInterop #nullable disable ; #nullable restore #line (9,2)-(9,18) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using DemoBlazor #nullable disable ; #nullable restore #line (10,2)-(10,25) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\_Imports.razor&quot; using DemoBlazor.Layout #nullable disable ; #line default #line hidden #nullable restore public partial class App : global::Microsoft.AspNetCore.Components.ComponentBase #nullable disable { #pragma warning disable 1998 protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder) { __builder.OpenComponent&lt;global::Microsoft.AspNetCore.Components.Routing.Router&gt;(0); __builder.AddComponentParameter(1, nameof(global::Microsoft.AspNetCore.Components.Routing.Router. #nullable restore #line (1,9)-(1,20) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; AppAssembly #line default #line hidden #nullable disable ), global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::System.Reflection.Assembly&gt;( #nullable restore #line (1,23)-(1,43) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; typeof(App).Assembly #line default #line hidden #nullable disable )); __builder.AddAttribute(2, &quot;Found&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment&lt;global::Microsoft.AspNetCore.Components.RouteData&gt;)((routeData) =&gt; (__builder2) =&gt; { __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.RouteView&gt;(3); __builder2.AddComponentParameter(4, nameof(global::Microsoft.AspNetCore.Components.RouteView. #nullable restore #line (3,20)-(3,29) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; RouteData #line default #line hidden #nullable disable ), global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::Microsoft.AspNetCore.Components.RouteData&gt;( #nullable restore #line (3,32)-(3,41) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; routeData #line default #line hidden #nullable disable )); __builder2.AddComponentParameter(5, nameof(global::Microsoft.AspNetCore.Components.RouteView. #nullable restore #line (3,43)-(3,56) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; DefaultLayout #line default #line hidden #nullable disable ), global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::System.Type&gt;( #nullable restore #line (3,59)-(3,77) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; typeof(MainLayout) #line default #line hidden #nullable disable )); __builder2.CloseComponent(); __builder2.AddMarkupContent(6, &quot;\\r\\n &quot;); __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate&gt;(7); __builder2.AddComponentParameter(8, nameof(global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate. #nullable restore #line (4,26)-(4,35) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; RouteData #line default #line hidden #nullable disable ), global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::Microsoft.AspNetCore.Components.RouteData&gt;( #nullable restore #line (4,38)-(4,47) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; routeData #line default #line hidden #nullable disable )); __builder2.AddComponentParameter(9, nameof(global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate. #nullable restore #line (4,49)-(4,57) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; Selector #line default #line hidden #nullable disable ), &quot;h1&quot;); __builder2.CloseComponent(); } )); __builder.AddAttribute(10, &quot;NotFound&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder2) =&gt; { __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.Web.PageTitle&gt;(11); __builder2.AddAttribute(12, &quot;ChildContent&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder3) =&gt; { __builder3.AddContent(13, &quot;Not found&quot;); } )); __builder2.CloseComponent(); __builder2.AddMarkupContent(14, &quot;\\r\\n &quot;); __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.LayoutView&gt;(15); __builder2.AddComponentParameter(16, nameof(global::Microsoft.AspNetCore.Components.LayoutView. #nullable restore #line (8,21)-(8,27) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; Layout #line default #line hidden #nullable disable ), global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::System.Type&gt;( #nullable restore #line (8,30)-(8,48) &quot;D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\BadIdeas.Icons.FontAwesome\\src\\DemoBlazor\\DemoBlazor\\App.razor&quot; typeof(MainLayout) #line default #line hidden #nullable disable )); __builder2.AddAttribute(17, &quot;ChildContent&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder3) =&gt; { __builder3.AddMarkupContent(18, &quot;&lt;p role=\\&quot;alert\\&quot;&gt;Sorry, there\\'s nothing at this address.&lt;/p&gt;&quot;); } )); __builder2.CloseComponent(); } )); __builder.CloseComponent(); } #pragma warning restore 1998 } } #pragma warning restore 1591   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#download-example-net--c","content":" tip Download Example project BadIdeas.Icons.FontAwesome   ","version":"Next","tagName":"h3"},{"title":"Share BadIdeas.Icons.FontAwesome​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#share-badideasiconsfontawesome","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Blazor\" has the following generators:​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#category-blazor-has-the-following-generators","content":" 1 BadIdeas.Icons.FontAwesome  2 Blazor.TSRuntime  3 Blazorators  4 GoLive.Generator.BlazorInterop  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"BadIdeas.Icons.FontAwesome by Phil Scott","url":"/RSCG_Examples/v2/docs/BadIdeas.Icons.FontAwesome#see-category","content":" Blazor ","version":"Next","tagName":"h3"},{"title":"BuilderGenerator by Mell Grubb","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/BuilderGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#info","content":" info Name: BuilderGenerator Generates builder classes for testing and/or seed data. Author: Mell Grubb NuGet:https://www.nuget.org/packages/BuilderGenerator/ You can find more details at https://github.com/MelGrubb/BuilderGenerator Source: https://github.com/MelGrubb/BuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#original-readme","content":" note Builder Generator This is a .Net Source Generator designed to add &quot;Builders&quot; to your projects. Builders are an object creation pattern, similar to the Object Mother pattern. Object Mothers and Builders are most commonly used to create objects for testing, but they can be used anywhere you want &quot;canned&quot; objects. For more complete documentation, please see the documentation site or the raw documentation source. Known Issues​ This project has moved to the .Net 6 version of source generators, which unfortuntely means that it's incompatible with Visual Studio 2019. It's also breaking the GitHub build pipeline at the moment. It all seems to work just fine in VS2022 though. If you're stuck on .Net 5 and VS2019, you can always use the v1.x series, although its usage is different. Installation​ BuilderGenerator is installed as an analyzer via NuGet package (https://www.nuget.org/packages/BuilderGenerator/). You can find it through the &quot;Manage NuGet Packages&quot; dialog in Visual Studio, or from the command line. Install-Package BuilderGenerator Usage​ After installation, create a partial class to define your builder in. Decorate it with the BuilderFor attribute, specifying the type of class that the builder is meant to build (e.g. [BuilderFor(typeof(Foo))]. Define any factory and helper methods in this partial class. Meanwhile, another partial class definition will be auto-generated which contains all the &quot;boring&quot; parts such as the backing fields and &quot;with&quot; methods. Version History​ v2.3.0 Major caching and performance improvementsInternal code cleanupConversion of templates to embedded resources v2.2.0 Changed generated file extension to .g.cs v2.0.7 Fixed #13, NetStandard2.0 compatibility v2.0.6 Fixed #12, Generated files now marked with auth-generated header v2.0.5 Fixed #14, duplicate properties v2.0.3 Attempting to fix NuGet packaging problems v2.0.2 Setters for base class properties rendering properly v2.0.1 Improved error handling v2.0.0 Updated to .Net 6 and IIncrementalGenerator (See note above about incompatibility with VS2019)Changed usage pattern from marking target classes with attributes to marking partial builder classes v1.2 Solution reorganizationVersion number synchronizationAutomated build pipeline v1.0 First major release v0.5 Public betaWorking NuGet packageCustomizable templates Roadmap​ Read-only collection support in default templatesAttribute-less generation of partial classesCompleted documentationUnit tests for generation components Attributions​ The BuilderGenerator logo includes tools by John Caserta from the Noun Project.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#about","content":" note Generating Builder class for an object  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonBuilder.cs This is the CSharp Project that references BuilderGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;BuilderGenerator&quot; Version=&quot;2.3.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BuilderBaseClass.csBuilderForAttribute.csPersonBuilder.g.cs #nullable disable namespace BuilderGenerator { /// &lt;summary&gt;Base class for object builder classes.&lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;The type of the objects built by this builder.&lt;/typeparam&gt; public abstract class Builder&lt;T&gt; where T : class { /// &lt;summary&gt;Gets or sets the object returned by this builder.&lt;/summary&gt; /// &lt;value&gt;The constructed object.&lt;/value&gt; #pragma warning disable CA1720 // Identifier contains type name protected System.Lazy&lt;T&gt; Object { get; set; } #pragma warning restore CA1720 // Identifier contains type name /// &lt;summary&gt;Builds the object instance.&lt;/summary&gt; /// &lt;returns&gt;The constructed object.&lt;/returns&gt; public abstract T Build(); protected virtual void PostProcess(T value) { } /// &lt;summary&gt;Sets the object to be returned by this instance.&lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The object to be returned.&lt;/param&gt; /// &lt;returns&gt;A reference to this builder instance.&lt;/returns&gt; public Builder&lt;T&gt; WithObject(T value) { Object = new System.Lazy&lt;T&gt;(() =&gt; value); return this; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#download-example-net--c","content":" tip Download Example project BuilderGenerator   ","version":"Next","tagName":"h3"},{"title":"Share BuilderGenerator​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#share-buildergenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/BuilderGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Builder\" has the following generators:​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#category-builder-has-the-following-generators","content":" 1 Architect.DomainModeling  2 BuilderGenerator  3 DimonSmart.BuilderGenerator  4 Fluentify  5 Hsu.Sg.FluentMember  6 ShadowWriterBuilder  7 StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"BuilderGenerator by Mell Grubb","url":"/RSCG_Examples/v2/docs/BuilderGenerator#see-category","content":" Builder ","version":"Next","tagName":"h3"},{"title":"Blazorators by David Pine","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Blazorators","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#info","content":" info Name: Blazorators The source generator used to generate extension methods on the IJSInProcessRuntime type for WebAssembly JavaScript interop. Author: David Pine NuGet:https://www.nuget.org/packages/Blazor.SourceGenerators/ You can find more details at https://github.com/IEvangelist/blazorators/ Source: https://github.com/IEvangelist/blazorators/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#original-readme","content":" note Blazorators: Blazor C# Source Generators Thank you for perusing my Blazor C# Source Generator repository. I'd really appreciate a ⭐ if you find this interesting. A C# source generator that creates fully functioning Blazor JavaScript interop code, targeting either the IJSInProcessRuntime or IJSRuntime types. This library provides several NuGet packages: Core libraries NuGet package\tNuGet version\tDescriptionBlazor.SourceGenerators Core source generator library. Blazor.Serialization Common serialization library, required in some scenarios when using generics. WebAssembly libraries NuGet package\tNuGet version\tDescriptionBlazor.LocalStorage.WebAssembly Blazor WebAssembly class library exposing DI-ready IStorageService type for the localStorage implementation (relies on IJSInProcessRuntime). Blazor.SessionStorage.WebAssembly Blazor WebAssembly class library exposing DI-ready IStorageService type for the sessionStorage implementation (relies on IJSInProcessRuntime). Blazor.Geolocation.WebAssembly Razor class library exposing DI-ready IGeolocationService type (and dependent callback types) for the geolocation implementation (relies on IJSInProcessRuntime). Blazor.SpeechSynthesis.WebAssembly Razor class library exposing DI-ready ISpeechSynthesisService type for the speechSynthesis implementation (relies on IJSInProcessRuntime). Targets the IJSInProcessRuntime type. Server libraries NuGet package\tNuGet version\tDescriptionBlazor.LocalStorage Blazor Server class library exposing DI-ready IStorageService type for the localStorage implementation (relies on IJSRuntime) Blazor.SessionStorage Blazor Server class library exposing DI-ready IStorageService type for the sessionStorage implementation (relies on IJSRuntime) Blazor.Geolocation Razor class library exposing DI-ready IGeolocationService type (and dependent callback types) for the geolocation implementation (relies on IJSRuntime). Blazor.SpeechSynthesis Razor class library exposing DI-ready ISpeechSynthesisService type for the speechSynthesis implementation (relies on IJSRuntime). Targets the IJSRuntime type. Note The reason that I generate two separate packages, one with an async API and another with the synchronous version is due to the explicit usage of IJSInProcessRuntime when using Blazor WebAssembly. This decision allows the APIs to be separate, and easily consumable from their repsective consuming Blazor apps, either Blazor server or Blazor WebAssembly. I might change it later to make this a consumer configuration, in that each consuming library will have to explicitly define a preprocessor directive to specify IS_WEB_ASSEMBLY defined. Using the Blazor.SourceGenerators package 📦​ As an example, the official Blazor.LocalStorage.WebAssembly package consumes the Blazor.SourceGenerators package. It exposes extension methods specific to Blazor WebAssembly and the localStorage Web API. Consider the IStorageService.cs C# file: // Copyright (c) David Pine. All rights reserved. // Licensed under the MIT License. namespace Microsoft.JSInterop; [JSAutoGenericInterop( TypeName = &quot;Storage&quot;, Implementation = &quot;window.localStorage&quot;, Url = &quot;https://developer.mozilla.org/docs/Web/API/Window/localStorage&quot;, GenericMethodDescriptors = new[] { &quot;getItem&quot;, &quot;setItem:value&quot; })] public partial interface IStorageService { } This code designates itself into the Microsoft.JSInterop namespace, making the source generated implementation available to anyone consumer who uses types from this namespace. It uses the JSAutoGenericInterop to specify: TypeName = &quot;Storage&quot;: sets the type to Storage.Implementation = &quot;window.localStorage&quot;: expresses how to locate the implementation of the specified type from the globally scoped window object, this is the localStorage implementation.Url: sets the URL for the implementation.GenericMethodDescriptors: Defines the methods that should support generics as part of their source-generation. The localStorage.getItem is specified to return a generic TResult type, and the localStorage.setItem has its parameter with a name of value specified as a generic TArg type. The generic method descriptors syntax is:&quot;methodName&quot; for generic return type and &quot;methodName:parameterName&quot; for generic parameter type. The file needs to define an interface and it needs to be partial, for example; public partial interface. Decorating the class with the JSAutoInterop (or `JSAutoGenericInterop) attribute will source generate the following C# code, as shown in the source generated IStorageServiceService.g.cs: using Blazor.Serialization.Extensions; using System.Text.Json; #nullable enable namespace Microsoft.JSInterop; /// &lt;summary&gt; /// Source generated interface definition of the &lt;c&gt;Storage&lt;/c&gt; type. /// &lt;/summary&gt; public partial interface IStorageServiceService { /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.length&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/length&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; double Length { get; } /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.clear&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/clear&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; void Clear(); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.getItem&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/getItem&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; TValue? GetItem&lt;TValue&gt;(string key, JsonSerializerOptions? options = null); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.key&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/key&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; string? Key(double index); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.removeItem&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/removeItem&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; void RemoveItem(string key); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.setItem&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/setItem&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; void SetItem&lt;TValue&gt;(string key, TValue value, JsonSerializerOptions? options = null); } These internal extension methods rely on the IJSInProcessRuntime to perform JavaScript interop. From the given TypeName and corresponding Implementation, the following code is also generated: IStorageService.g.cs: The interface for the corresponding Storage Web API surface area.LocalStorgeService.g.cs: The internal implementation of the IStorageService interface.LocalStorageServiceCollectionExtensions.g.cs: Extension methods to add the IStorageService service to the dependency injection IServiceCollection. Here is the source generated LocalStorageService implementation: // Copyright (c) David Pine. All rights reserved. // Licensed under the MIT License: // https://github.com/IEvangelist/blazorators/blob/main/LICENSE // Auto-generated by blazorators. #nullable enable using Blazor.Serialization.Extensions; using Microsoft.JSInterop; using System.Text.Json; namespace Microsoft.JSInterop; /// &lt;inheritdoc /&gt; internal sealed class LocalStorageService : IStorageService { private readonly IJSInProcessRuntime _javaScript = null; /// &lt;inheritdoc cref=&quot;P:Microsoft.JSInterop.IStorageService.Length&quot; /&gt; double IStorageService.Length =&gt; _javaScript.Invoke&lt;double&gt;(&quot;eval&quot;, new object[1] { &quot;window.localStorage.length&quot; }); public LocalStorageService(IJSInProcessRuntime javaScript) { _javaScript = javaScript; } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IStorageService.Clear&quot; /&gt; void IStorageService.Clear() { _javaScript.InvokeVoid(&quot;window.localStorage.clear&quot;); } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IStorageService.GetItem``1(System.String,System.Text.Json.JsonSerializerOptions)&quot; /&gt; TValue? IStorageService.GetItem&lt;TValue&gt;(string key, JsonSerializerOptions? options) { return _javaScript.Invoke&lt;string&gt;(&quot;window.localStorage.getItem&quot;, new object[1] { key }).FromJson&lt;TValue&gt;(options); } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IStorageService.Key(System.Double)&quot; /&gt; string? IStorageService.Key(double index) { return _javaScript.Invoke&lt;string&gt;(&quot;window.localStorage.key&quot;, new object[1] { index }); } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IStorageService.RemoveItem(System.String)&quot; /&gt; void IStorageService.RemoveItem(string key) { _javaScript.InvokeVoid(&quot;window.localStorage.removeItem&quot;, key); } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IStorageService.SetItem``1(System.String,``0,System.Text.Json.JsonSerializerOptions)&quot; /&gt; void IStorageService.SetItem&lt;TValue&gt;(string key, TValue value, JsonSerializerOptions? options) { _javaScript.InvokeVoid(&quot;window.localStorage.setItem&quot;, key, value.ToJson&lt;TValue&gt;(options)); } } Finally, here is the source generated service collection extension methods: using Microsoft.JSInterop; namespace Microsoft.Extensions.DependencyInjection; /// &lt;summary&gt;&lt;/summary&gt; public static class LocalStorageServiceCollectionExtensions { /// &lt;summary&gt; /// Adds the &lt;see cref=&quot;IStorageService&quot; /&gt; service to the service collection. /// &lt;/summary&gt; public static IServiceCollection AddLocalStorageServices( this IServiceCollection services) =&gt; services.AddSingleton&lt;IJSInProcessRuntime&gt;(serviceProvider =&gt; (IJSInProcessRuntime)serviceProvider.GetRequiredService&lt;IJSRuntime&gt;()) .AddSingleton&lt;IStorageService, LocalStorageService&gt;(); } Putting this all together, the Blazor.LocalStorage.WebAssembly NuGet package is actually less than 15 lines of code, and it generates full DI-ready services with JavaScript interop. The Blazor.LocalStorage package, generates extensions on the IJSRuntime type. // Copyright (c) David Pine. All rights reserved. // Licensed under the MIT License. namespace Microsoft.JSInterop; [JSAutoInterop( TypeName = &quot;Storage&quot;, Implementation = &quot;window.localStorage&quot;, HostingModel = BlazorHostingModel.Server, OnlyGeneratePureJS = true, Url = &quot;https://developer.mozilla.org/docs/Web/API/Window/localStorage&quot;)] public partial interface IStorageServiceService { } Generates the following: // Copyright (c) David Pine. All rights reserved. // Licensed under the MIT License: // https://github.com/IEvangelist/blazorators/blob/main/LICENSE // Auto-generated by blazorators. using System.Threading.Tasks; #nullable enable namespace Microsoft.JSInterop; public partial interface IStorageServiceService { /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.length&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/length&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; ValueTask&lt;double&gt; Length { get; } /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.clear&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/clear&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; ValueTask ClearAsync(); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.getItem&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/getItem&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; ValueTask&lt;string?&gt; GetItemAsync(string key); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.key&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/key&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; ValueTask&lt;string?&gt; KeyAsync(double index); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.removeItem&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/removeItem&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; ValueTask RemoveItemAsync(string key); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.localStorage.setItem&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Storage/setItem&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; ValueTask SetItemAsync(string key, string value); } Notice, that since the generic method descriptors are not added generics are not supported. This is not yet implemented as I've been focusing on WebAssembly scenarios. Design goals 🎯​ I was hoping to use the TypeScript lib.dom.d.ts bits as input. This input would be read, parsed, and cached within the generator. The generator code would be capable of generating extension methods on the IJSRuntime. Additionally, the generator will create object graphs from the well know web APIs. Using the lib.dom.d.ts file, we could hypothetically parse various TypeScript type definitions. These definitions could then be converted to C# counterparts. While I realize that not all TypeScript is mappable to C#, there is a bit of room for interpretation. Consider the following type definition: /** An object can programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location. */ interface Geolocation { clearWatch(watchId: number): void; getCurrentPosition( successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions): void; watchPosition( successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions): number; } This is from the TypeScript repo, lib.dom.d.ts file lines 5,498-5,502. Example consumption of source generator ✔️​ Ideally, I would like to be able to define a C# class such as this: // Copyright (c) David Pine. All rights reserved. // Licensed under the MIT License. namespace Microsoft.JSInterop; [JSAutoInterop( TypeName = &quot;Geolocation&quot;, Implementation = &quot;window.navigator.geolocation&quot;, Url = &quot;https://developer.mozilla.org/docs/Web/API/Geolocation&quot;)] public partial interface IGeolocationService { } The source generator will expose the JSAutoInteropAttribute, and consuming libraries will decorate their classes with it. The generator code will see this class, and use the TypeName from the attribute to find the corresponding type to implement. With the type name, the generator will generate the corresponding methods, and return types. The method implementations will be extensions of the IJSRuntime. The following is an example resulting source generated IGeolocationService object: namespace Microsoft.JSInterop; public partial interface IGeolocationService { /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.navigator.geolocation.clearWatch&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Geolocation/clearWatch&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; void ClearWatch(double watchId); /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.navigator.geolocation.getCurrentPosition&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Geolocation/getCurrentPosition&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; /// &lt;param name=&quot;component&quot;&gt;The calling Razor (or Blazor) component.&lt;/param&gt; /// &lt;param name=&quot;onSuccessCallbackMethodName&quot;&gt;Expects the name of a &lt;c&gt;&quot;JSInvokableAttribute&quot;&lt;/c&gt; C# method with the following &lt;c&gt;System.Action{GeolocationPosition}&quot;&lt;/c&gt;.&lt;/param&gt; /// &lt;param name=&quot;onErrorCallbackMethodName&quot;&gt;Expects the name of a &lt;c&gt;&quot;JSInvokableAttribute&quot;&lt;/c&gt; C# method with the following &lt;c&gt;System.Action{GeolocationPositionError}&quot;&lt;/c&gt;.&lt;/param&gt; /// &lt;param name=&quot;options&quot;&gt;The &lt;c&gt;PositionOptions&lt;/c&gt; value.&lt;/param&gt; void GetCurrentPosition&lt;TComponent&gt;( TComponent component, string onSuccessCallbackMethodName, string? onErrorCallbackMethodName = null, PositionOptions? options = null) where TComponent : class; /// &lt;summary&gt; /// Source generated implementation of &lt;c&gt;window.navigator.geolocation.watchPosition&lt;/c&gt;. /// &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Geolocation/watchPosition&quot;&gt;&lt;/a&gt; /// &lt;/summary&gt; /// &lt;param name=&quot;component&quot;&gt;The calling Razor (or Blazor) component.&lt;/param&gt; /// &lt;param name=&quot;onSuccessCallbackMethodName&quot;&gt;Expects the name of a &lt;c&gt;&quot;JSInvokableAttribute&quot;&lt;/c&gt; C# method with the following &lt;c&gt;System.Action{GeolocationPosition}&quot;&lt;/c&gt;.&lt;/param&gt; /// &lt;param name=&quot;onErrorCallbackMethodName&quot;&gt;Expects the name of a &lt;c&gt;&quot;JSInvokableAttribute&quot;&lt;/c&gt; C# method with the following &lt;c&gt;System.Action{GeolocationPositionError}&quot;&lt;/c&gt;.&lt;/param&gt; /// &lt;param name=&quot;options&quot;&gt;The &lt;c&gt;PositionOptions&lt;/c&gt; value.&lt;/param&gt; double WatchPosition&lt;TComponent&gt;( TComponent component, string onSuccessCallbackMethodName, string? onErrorCallbackMethodName = null, PositionOptions? options = null) where TComponent : class; } The generator will also produce the corresponding APIs object types. For example, the Geolocation API defines the following: GeolocationServicePositionOptionsGeolocationCoordinatesGeolocationPositionGeolocationPositionError namespace Microsoft.JSInterop; /// &lt;inheritdoc /&gt; internal sealed class GeolocationService : IGeolocationService { private readonly IJSInProcessRuntime _javaScript = null; public GeolocationService(IJSInProcessRuntime javaScript) { _javaScript = javaScript; } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IGeolocationService.ClearWatch(System.Double)&quot; /&gt; void IGeolocationService.ClearWatch(double watchId) { _javaScript.InvokeVoid(&quot;window.navigator.geolocation.clearWatch&quot;, watchId); } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IGeolocationService.GetCurrentPosition``1(``0,System.String,System.String,Microsoft.JSInterop.PositionOptions)&quot; /&gt; void IGeolocationService.GetCurrentPosition&lt;TComponent&gt;( TComponent component, string onSuccessCallbackMethodName, string? onErrorCallbackMethodName, PositionOptions? options) { _javaScript.InvokeVoid(&quot;blazorators.getCurrentPosition&quot;, DotNetObjectReference.Create&lt;TComponent&gt;(component), onSuccessCallbackMethodName, onErrorCallbackMethodName, options); } /// &lt;inheritdoc cref=&quot;M:Microsoft.JSInterop.IGeolocationService.WatchPosition``1(``0,System.String,System.String,Microsoft.JSInterop.PositionOptions)&quot; /&gt; double IGeolocationService.WatchPosition&lt;TComponent&gt;( TComponent component, string onSuccessCallbackMethodName, string? onErrorCallbackMethodName, PositionOptions? options) { return _javaScript.Invoke&lt;double&gt;(&quot;blazorators.watchPosition&quot;, new object[4] { DotNetObjectReference.Create&lt;TComponent&gt;(component), onSuccessCallbackMethodName, onErrorCallbackMethodName, options }); } } using System.Text.Json.Serialization; namespace Microsoft.JSInterop; /// &lt;summary&gt; /// Source-generated object representing an ideally immutable &lt;c&gt;GeolocationPosition&lt;/c&gt; value. /// &lt;/summary&gt; public class GeolocationPosition { /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPosition.coords&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;coords&quot;)] public GeolocationCoordinates Coords { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPosition.timestamp&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;timestamp&quot;)] public long Timestamp { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPosition.timestamp&lt;/c&gt; value, /// converted as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; in UTC. /// &lt;/summary&gt; [JsonIgnore] public DateTime TimestampAsUtcDateTime =&gt; Timestamp.ToDateTimeFromUnix(); } /// &lt;summary&gt; /// Source-generated object representing an ideally immutable &lt;c&gt;GeolocationCoordinates&lt;/c&gt; value. /// &lt;/summary&gt; public class GeolocationCoordinates { /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.accuracy&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;accuracy&quot;)] public double Accuracy { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.altitude&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;altitude&quot;)] public double? Altitude { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.altitudeAccuracy&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;altitudeAccuracy&quot;)] public double? AltitudeAccuracy { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.heading&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;heading&quot;)] public double? Heading { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.latitude&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;latitude&quot;)] public double Latitude { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.longitude&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;longitude&quot;)] public double Longitude { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationCoordinates.speed&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;speed&quot;)] public double? Speed { get; set; } } /// &lt;summary&gt; /// Source-generated object representing an ideally immutable &lt;c&gt;GeolocationPositionError&lt;/c&gt; value. /// &lt;/summary&gt; public class GeolocationPositionError { /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPositionError.code&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;code&quot;)] public double Code { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPositionError.message&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;message&quot;)] public string Message { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPositionError.PERMISSION_DENIED&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;PERMISSION_DENIED&quot;)] public double PERMISSION_DENIED { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPositionError.POSITION_UNAVAILABLE&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;POSITION_UNAVAILABLE&quot;)] public double POSITION_UNAVAILABLE { get; set; } /// &lt;summary&gt; /// Source-generated property representing the &lt;c&gt;GeolocationPositionError.TIMEOUT&lt;/c&gt; value. /// &lt;/summary&gt; [JsonPropertyName(&quot;TIMEOUT&quot;)] public double TIMEOUT { get; set; } } // Additional models omitted for brevity... In addition to this GeolocationExtensions class being generated, the generator will also generate a bit of JavaScript. Some methods cannot be directly invoked as they define callbacks. The approach the generator takes is to delegate callback methods on a given T instance, with the JSInvokable attribute. Our generator should also warn when the corresponding T instance doesn't define a matching method name that is also JSInvokable. const getCurrentLocation = (dotnetObj, successMethodName, errorMethodName, options) =&gt; { if (navigator &amp;&amp; navigator.geolocation) { navigator.geolocation.getCurrentPosition( (position) =&gt; { dotnetObj.invokeMethodAsync( successMethodName, position); }, (error) =&gt; { dotnetObj.invokeMethodAsync( errorMethodName, error); }, options); } }; // Other implementations omitted for brevity... // But we'd also define a &quot;watchPosition&quot; wrapper. // The &quot;clearWatch&quot; is a straight pass-thru, no wrapper needed. window.blazorator = { getCurrentLocation, watchPosition }; The resulting JavaScript will have to be exposed to consuming projects. Additionally, consuming projects will need to adhere to extension method consumption semantics. When calling generated extension methods that require .NET object references of type T, the callback names should be marked with JSInvokable and the nameof operator should be used to ensure names are accurate. Consider the following example consuming Blazor component: using Microsoft.AspNetCore.Components; using Microsoft.JSInterop; using Microsoft.JSInterop.Extensions; namespace Example.Components; // This is the other half of ConsumingComponent.razor public sealed partial class ConsumingComponent { [Inject] public IJSRuntime JavaScript { get; set; } protected override async Task OnAfterRenderAsync(bool firstRender) { if (firstRender) { await JavaScript.GetCurrentPositionAsync( this, nameof(OnCoordinatesPermitted), nameof(OnErrorRequestingCoordinates)); } } [JSInvokable] public async Task OnCoordinatesPermitted( GeolocationPosition position) { // TODO: consume/handle position. await InvokeAsync(StateHasChanged); } [JSInvokable] public async Task OnErrorRequestingCoordinates( GeolocationPositionError error) { // TODO: consume/handle error. await InvokeAsync(StateHasChanged); } } Pseudocode and logical flow ➡️​ Consumer decorates a static partial class with the JSAutoInteropAttribute.Source generator is called: JavaScriptInteropGenerator.InitializeJavaScriptInteropGenerator.Execute The generator determines the TypeName from the attribute of the contextual class. The TypeName is used to look up the corresponding TypeScript type definition.If found, and a valid API - attempt source generation. Future work​ https://developer.mozilla.org/docs/Web/API/CredentialsContainerhttps://developer.mozilla.org/docs/Web/API/WakeLockhttps://developer.mozilla.org/docs/Web/API/Navigator/hidhttps://developer.mozilla.org/docs/Web/API/Web_Crypto_API Known limitations ⚠️​ At the time of writing, only pure JavaScript interop is supported. It is a stretch goal to add the following (currently missing) features: Source generate corresponding (and supporting) JavaScript files. We'd need to accept a desired output path from the consumer, JavaScriptOutputPath.We would need to append all JavaScript into a single builder, and emit it collectively. Allow for declarative and custom type mappings, for example; suppose the consumer wants the API to use generics instead of string. We'd need to expose a TypeConverter parameter and allow for consumers to implement their own.We'd provide a default one for standard JSON serialization, StringTypeConverter (maybe make this the default). References and resources 📑​ MDN Web Docs: Web APIsTypeScript DOM lib generatorASP.NET Core Docs: Blazor JavaScript interopJared Parsons - GitHub Channel 9 Source Generators.NET Docs: C# Source GeneratorsSource Generators CookbookSource Generators: Design Document Contributors ✨​ Thanks goes to these wonderful people (emoji key): Weihan Li 💻 David Pine 💻 🎨 👀 🤔 ⚠️ Robert McLaws 💻 🐛 🤔 Colin Dembovsky 🚇 📦 Tanay Parikh 📖 Andreas Müller 🐛 💻 Mahmudul Hasan 💻 fabiansanchez18 🐛 Sean Feldman 🐛 daver77 🤔 This project follows the all-contributors specification. Contributions of any kind are welcome!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#about","content":" note Generate javascript interop code for Blazor WASM projects.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#example-source-csproj-source-files","content":" CSharp ProjectProgram.csILocalStorageService.csHome.razor This is the CSharp Project that references Blazorators &lt;Project Sdk=&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly&quot; Version=&quot;8.0.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot; Version=&quot;8.0.1&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Blazor.Serialization&quot; Version=&quot;8.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Blazor.SourceGenerators&quot; Version=&quot;8.0.0&quot; OutputItemType=&quot;Analyzer&quot; SetTargetFramework=&quot;TargetFramework=netstandard2.0&quot; ReferenceOutputAssembly=&quot;false&quot;&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BlazorHostingModel.g.csILocalStorageService.g.csJSAutoGenericInteropAttribute.g.csJSAutoInteropAttribute.g.csLocalStorageService.g.csLocalStorageServiceCollectionExtensions.g.csRecordCompat.g.cs /// &lt;summary&gt; /// The Blazor hosting model source, either WebAssembly or Server. /// &lt;/summary&gt; public enum BlazorHostingModel { /// &lt;summary&gt; /// This is the default. Use this to source generate targeting the synchronous &lt;c&gt;IJSInProcessRuntime&lt;/c&gt; type. /// &lt;/summary&gt; WebAssembly, /// &lt;summary&gt; /// Use this to source generate targeting the synchronous &lt;c&gt;IJSRuntime&lt;/c&gt; type. /// &lt;/summary&gt; Server };   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#download-example-net--c","content":" tip Download Example project Blazorators   ","version":"Next","tagName":"h3"},{"title":"Share Blazorators​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#share-blazorators","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Blazorators  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Blazor\" has the following generators:​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#category-blazor-has-the-following-generators","content":" 1 BadIdeas.Icons.FontAwesome  2 Blazor.TSRuntime  3 Blazorators  4 GoLive.Generator.BlazorInterop  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Blazorators by David Pine","url":"/RSCG_Examples/v2/docs/Blazorators#see-category","content":" Blazor ","version":"Next","tagName":"h3"},{"title":"Blazor.TSRuntime by Black White Yoshi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#info","content":" info Name: Blazor.TSRuntime TSRuntime is an improved JSRuntime with automatic JS-module loading and caching, compile time errors instead of runtime errors and nice IntelliSense guidance. Author: Black White Yoshi NuGet:https://www.nuget.org/packages/Blazor.TSRuntime/ You can find more details at https://github.com/BlackWhiteYoshi/Blazor.TSRuntime Source: https://github.com/BlackWhiteYoshi/Blazor.TSRuntime  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#original-readme","content":" note Blazor.TSRuntime An improved JSRuntime with automatic JS-module loading and cachingcompile time errors instead of runtime errorsIntelliSense guidance Works with JavaScript JSDoc and TypeScript. Available Methods​ Invoke​ Each &quot;export function&quot; in JavaScript will generate up to 3 C#-methods: Invoke - interops synchronousInvokeTrySync - interops synchronous if possible, otherwise asynchronousInvokeAsync - interops asynchronous // saveNumber(name: string, myNumber: number) TsRuntime.SaveNumberInvoke(&quot;key1&quot;, 5); // will invoke sync await TsRuntime.SaveNumberInvokeTrySync(&quot;key1&quot;, 5); // invokes sync if possible, otherwise async await TsRuntime.SaveNumberInvokeAsync(&quot;key1&quot;, 5); // invokes async Note: InvokeTrySync checks if IJSInProcessRuntime is available and if available, executes the call synchronous. So, if the module is already be downloaded and IJSInProcessRuntime is available, this method executes synchronous.Asynchronous JavaScript-functions (JS-functions that return a promise) should be called with InvokeAsync (not Invoke or InvokeTrySync), otherwise the promise will not be awaited.Invoke-interop fails with an exception when module is not loaded. So make sure to await the corresponding preload-method beforehand. Preload​ Each module will generate a method to preload the module. Additionaly, there is a PreloadAllModules method, that preloads all modules. Preloading will start the download of the JS-module and the task completes when the module is downloaded and cached. If a JS-function is called before or while preloading, the download task will first be awaited before executing the function (A sync-call throws an exception). Therefore, it is recommended to call this method as &quot;fire and forget&quot;. _ = PreloadExample(); // loads and caches Example module in the background _ = PreloadAllModules(); // loads and caches all modules in the background await PreloadAllModules(); // awaits the loading of all modules, recommended when using sync-interop Furthermore you can prefetch your modules on page load, so the Preload-methods will only get a reference to the module. &lt;head&gt; ... &lt;link rel=&quot;modulepreload&quot; href=&quot;Page/Example.razor.js&quot; /&gt; &lt;/head&gt; Get Started​ 1. Add NuGet package​ In your .csproj-file put a package reference to Blazor.TSRuntime. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Blazor.TSRuntime&quot; Version=&quot;{latest version}&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; 2. Add &lt;AdditionalFiles&gt;​ In your .csproj-file put an &lt;AdditionalFiles&gt; directive to tsruntime.jsonand an &lt;AdditionalFiles&gt; to make all .js-files available to the source-generator. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Blazor.TSRuntime&quot; Version=&quot;{latest version}&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;AdditionalFiles Include=&quot;tsruntime.json&quot; /&gt; &lt;AdditionalFiles Include=&quot;**/*.js&quot; Exclude=&quot;bin/**;obj/**;Properties/**&quot; /&gt; &lt;/ItemGroup&gt; Create a tsruntime.json-file in the same folder as your .csproj-file. { &quot;invoke function&quot;: { &quot;sync enabled&quot;: false, &quot;trysync enabled&quot;: true, &quot;async enabled&quot;: false, &quot;name pattern&quot;: { &quot;pattern&quot;: &quot;#function#&quot;, &quot;module transform&quot;: &quot;first upper case&quot;, &quot;function transform&quot;: &quot;first upper case&quot;, &quot;action transform&quot;: &quot;none&quot; }, &quot;type map&quot;: { &quot;number&quot;: { &quot;type&quot;: &quot;TNumber&quot;, &quot;generic types&quot;: { &quot;name&quot;: &quot;TNumber&quot;, &quot;constraint&quot;: &quot;INumber&lt;TNumber&gt;&quot; } }, &quot;boolean&quot;: &quot;bool&quot;, &quot;Uint8Array&quot;: &quot;byte[]&quot;, &quot;HTMLElement&quot;: &quot;ElementReference&quot; } } } 3. Register ITSRuntime​ If everything is set up correctly, the generator should already be generating the 2 files TSRuntime, ITSRuntime. Register them in your dependency container. using Microsoft.JSInterop; // IServiceCollection services services.AddTSRuntime(); 4. Hello World​ Now you are ready to rumble, to make a &quot;Hello World&quot; test you can create 2 files: Example.razor &lt;button @onclick=&quot;InvokeJS&quot;&gt;InvokeJS&lt;/button&gt; @code { [Inject] public required ITSRuntime TsRuntime \\{ private get; init; } private async Task InvokeJS() =&gt; await TsRuntime.Example(); } Example.razor.js export function example() { console.log(&quot;Hello World&quot;); } Optional​ You can add a jsconfig.json file and rename tsruntime.json to jsconfig.tsruntime.json. Here is an example jsconfig.json: { &quot;compilerOptions&quot;: { &quot;target&quot;: &quot;es2022&quot;, &quot;checkJs&quot;: true, &quot;strictNullChecks&quot;: true, &quot;noImplicitAny&quot;: true } } TypeScript​ For using TypeScript, you only need a few adjustments: tsconfig.json instead of jsconfig.json rename jsconfig.tsruntime.json to tsconfig.tsruntime.json change &lt;AdditionalFiles Include=&quot;**\\*.js&quot; /&gt; to &lt;AdditionalFiles Include=&quot;**\\*.ts&quot; /&gt; Note: To recognize a module, the file must end with &quot;.js&quot;, &quot;.ts&quot; or &quot;.d.ts&quot;. Function definitions inside a module must start with &quot;export function&quot;. Futhermore a function definition must not contain any line breaks. If using TypeScript types together with JSDoc types, JSDoc takes priority, because JSDoc is parsed after the function declaration and overwrites the previous type. But this problem should not exist in the first place as long you do not mix things up, use JS with JSDoc or TS with TSDoc. Config - tsruntime.json​ All available config keys with its default value: { &quot;webroot path&quot;: &quot;&quot;, &quot;input path&quot;: { &quot;include&quot;: &quot;/&quot;, &quot;excludes&quot;: [ &quot;/bin&quot;, &quot;/obj&quot;, &quot;/Properties&quot; ], &quot;module files&quot;: true }, &quot;using statements&quot;: [ &quot;Microsoft.AspNetCore.Components&quot;, &quot;System.Numerics&quot; ], &quot;invoke function&quot;: { &quot;sync enabled&quot;: false, &quot;trysync enabled&quot;: true, &quot;async enabled&quot;: false, &quot;name pattern&quot;: { &quot;pattern&quot;: &quot;#function#&quot;, &quot;module transform&quot;: &quot;first upper case&quot;, &quot;function transform&quot;: &quot;first upper case&quot;, &quot;action transform&quot;: &quot;none&quot;, &quot;action name&quot;: { &quot;sync&quot;: &quot;Invoke&quot;, &quot;trysync&quot;: &quot;InvokeTrySync&quot;, &quot;async&quot;: &quot;InvokeAsync&quot; } }, &quot;promise&quot;: { &quot;only async enabled&quot;: true, &quot;append async&quot;: false }, &quot;type map&quot;: { &quot;number&quot;: { &quot;type&quot;: &quot;TNumber&quot;, &quot;generic types&quot;: { &quot;name&quot;: &quot;TNumber&quot;, &quot;constraint&quot;: &quot;INumber&lt;TNumber&gt;&quot; } }, &quot;boolean&quot;: &quot;bool&quot;, &quot;Uint8Array&quot;: &quot;byte[]&quot;, &quot;HTMLElement&quot;: &quot;ElementReference&quot; } }, &quot;preload function&quot;: { &quot;name pattern&quot;: { &quot;pattern&quot;: &quot;Preload#module#&quot;, &quot;module transform&quot;: &quot;first upper case&quot; }, &quot;all modules name&quot;: &quot;PreloadAllModules&quot;, }, &quot;module grouping&quot;: { &quot;enabled&quot;: false, &quot;interface name pattern&quot;: { &quot;pattern&quot;: &quot;I#module#Module&quot;, &quot;module transform&quot;: &quot;first upper case&quot; } }, &quot;js runtime&quot;: { &quot;sync enabled&quot;: false, &quot;trysync enabled&quot;: false, &quot;async enabled&quot;: false }, &quot;service extension&quot;: true } [webroot path]: Relative path to the web root (starting folder 'wwwroot' is ignored).[input path]: Folder where to locate the input files. Path relative to [webroot path] and must start with '/'.[using statements]: List of generated using statements at the top of ITSRuntime.[invoke function].[sync enabled]: Toggles whether sync invoke methods should be generated for modules.[invoke function].[trysync enabled]: Toggles whether try-sync invoke methods should be generated for modules.[invoke function].[async enabled]: Toggles whether async invoke methods should be generated for modules.[invoke function].[name pattern].[pattern]: Naming of the generated methods that invoke module functions.[invoke function].[name pattern].[module transform]: Lower/Upper case transform for the variable #module#.[invoke function].[name pattern].[function transform]: Lower/Upper case transform for the variable #function#.[invoke function].[name pattern].[action transform]: Lower/Upper case transform for the variable #action#..[invoke function].[name pattern].[action name][sync]: Naming of the #action# variable for the invoke module functions name pattern when the action is synchronous.[invoke function].[name pattern].[action name][trysync]: Naming of the #action# variable for the invoke module functions name pattern when the action is try synchronous.[invoke function].[name pattern].[action name][async]: Naming of the #action# variable for the invoke module functions name pattern when the action is asynchronous.[invoke function].[promise].[only async enabled]: Generates only async invoke method when return-type is promise.[invoke function].[promise].[append async]: Appends to the name 'Async' when return-type is promise.[invoke function].[type map]: Mapping of TypeScript-types (key) to C#-types (value). Not listed types are mapped unchanged (Identity function).[preload function].[name pattern].[pattern]: Naming of the generated methods that preloads a specific module.[preload function].[name pattern].[module transform]: Lower/Upper case transform for the variable #module#.[preload function].[all modules name]: Naming of the method that preloads all modules.[module grouping].[enabled]: Each module gets it own interface and the functions of that module are only available in that interface.[module grouping].[interface name pattern].[pattern]: Naming of the generated module interfaces when module grouping is enabled.[module grouping].[interface name pattern].[module transform]: Lower/Upper case transform for the variable #module#.[js runtime].[sync enabled]: Toggles whether generic JSRuntime sync invoke method should be generated.[js runtime].[trysync enabled]: Toggles whether generic JSRuntime try-sync invoke method should be generated.[js runtime].[async enabled]: Toggles whether generic JSRuntime async invoke method should be generated.[service extension]: A service extension method is generated, which registers ITSRuntime and if enabled, the module interfaces. Callback (Function as Parameter)​ /** * @param {(key: string) =&gt; Promise&lt;number&gt;} mapToId * @returns {Promise&lt;void&gt;} */ export async function callbackExample(mapToId) { const id = await mapToId(&quot;42&quot;); console.log(id); } // CallbackExample&lt;int&gt;(Func&lt;string, int&gt; mapToId) await TsRuntime.CallbackExample((string key) =&gt; ValueTask.FromResult(key.GetHashCode())); In JavaScript functions are first-class citizens and a variable/parameter can hold a function. In C# the equivalent of that are delegates. Such variables are also called callbacks. When using a JS-function as parameter, it will be mapped automatically to the corresponding Action&lt;&gt;/Func&lt;&gt; type. However, behind the scenes there is a lot going on to make this work and there are a few edge cases you should be aware of. Sync/Async Callbacks​ To interop from C# to JS you can choose from 3 options: Sync/TrySync/Async. You may expect the same when using interop from JS to C#. Unfortunately, it is not implemented that way and you can only choose between Sync and Async: If the return-type is not a Promise&lt;T&gt;, it will be a Sync call. If the return-type is a Promise&lt;T&gt;, it will be Async call. So, to make sure it works in every environment, your callbacks should always return a Promise&lt;T&gt;. Note, in that case the return-type of your delegate will be ValueTask/ValueTask&lt;T&gt;. When your C# method itself is synchronous, just use ValueTask.CompletedTask/ValueTask&lt;T&gt;.FromResult() as return value. Callback Module​ To make the mapping possible, additional JS functions are needed. These JS functions are located in an additional module, the callback-module. This internal module loads automatically. For Sync-invoke scenarios, you must ensure that the used modules are loaded. There is no dedicated Preload()-method for the callback-module, but the PreloadAll()-method awaits also the callback-module. DotNetObjectReference​ For the mapping a DotNetObjectReference is created. To make sure there is no memory leak, the DotNetObjectReference is disposed after the JS-call. That means, immediately after the JS-call the callback is no longer available. So, the JS-function must outlast the callback, otherwise a &quot;System.ArgumentException: There is no tracked object with id ...&quot; occurs. In sync-calls everything works fine, but when your callback is async, your JS function must also be async and must complete after the callback completes. Nested Functions or Returning a Function​ A callback can have its own parameters and return-type. If you put another callback as parameter or return-type, the generated type will be CALLBACK_INSIDE_CALLBACK_NOT_SUPPORTED or CALLBACK_RETURN_TYPE_NOT_SUPPORTED, what leads to a compile error. Only callbacks as parameters without nesting are supported. Release Notes​ 0.0.1 first version, includes all basic functionalities for generating TSRuntime 0.1 improved declaration path: Instead of one include string, an array of objects { &quot;include&quot;: string, &quot;excludes&quot;: string[], &quot;file module path&quot;: string } is now supported 0.2 optional parameters and default parameter values are now supported 0.3 breaking changes: changed config keys, defaults and properties in Config, changed Config.FromJson(string json) to new Config(string json)added key &quot;generate on save&quot; and &quot;action name&quot; keys to config 0.4 module grouping is now supportedsmall breaking change: A namespace that contains IServiceCollection is required when serviceExtension is enabled and namespace Microsoft.Extensions.DependencyInjection was added to the defaults 0.5 generics in type map are now supported 0.6 *** huge Refactoring, many breaking changes ***renamed the project, repository and NuGet package to &quot;Blazor.TSRuntime&quot; (before it was &quot;TSRuntime&quot;)dropped Programmatically Usage and Visual Studio Extension, only Source Generator will be continued -&gt; reduced project structure to 2 projectschanged ISourceGenerator to IIncrementalGenerator tsconfig.tsruntime.json can now be named *.tsruntime.json.d.ts-files must be added with &lt;AdditionalFiles Include=&quot;**\\*.d.ts&quot; /&gt; added config key webroot pathmoved config key [module grouping].[service extension] to [service extension]renamed key &quot;declaration path&quot; to &quot;input path&quot;renamed key &quot;file module path&quot; to &quot;module path&quot;renamed key &quot;append Async&quot; to &quot;append async&quot;Config.InputPath.ModulePath must end with &quot;.js&quot; 0.7 breaking change: [input path] ('include', 'excludes', 'module path') must start with '/'generic TS-functions are now supportedTS-function description is mapped to C# method description. Currently supported tags are &lt;summary&gt;, &lt;remarks&gt;, &lt;param&gt;, &lt;returns&gt;JS-files with JSDocs type annotations are now supportedTS-files are now supported 0.8 scripts are supported (non-module-files: js-files that are included via &lt;script&gt; tag) 1.0 callbacks are supported: Mapping parameters of a function type to the corresponding C# delegate (Action&lt;&gt;/Func&lt;&gt;)JSDoc &quot;@typeparam&quot; tag is now supported  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#about","content":" note Generating C# Code for Blazor from javascript files  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#example-source-csproj-source-files","content":" CSharp ProjectProgram.cstsruntime.jsonHome.razorHome.razor.js This is the CSharp Project that references Blazor.TSRuntime &lt;Project Sdk=&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Blazor.TSRuntime&quot; Version=&quot;1.0.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;AdditionalFiles Include=&quot;tsruntime.json&quot; /&gt; &lt;AdditionalFiles Include=&quot;**/*.js&quot; Exclude=&quot;bin/**;obj/**;Properties/**&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly&quot; Version=&quot;9.0.8&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot; Version=&quot;9.0.8&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ITSRuntime_bootstrap.g.csITSRuntime_bootstrap_bundle.g.csITSRuntime_bootstrap_bundle_min.g.csITSRuntime_bootstrap_esm.g.csITSRuntime_bootstrap_esm_min.g.csITSRuntime_bootstrap_min.g.csITSRuntime_Core.g.csITSRuntime_Home.g.csTSRuntime.g.csTSRuntime_ServiceExtension.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations using System.Threading; using System.Threading.Tasks; using Microsoft.AspNetCore.Components; using System.Numerics; namespace Microsoft.JSInterop; public partial interface ITSRuntime { protected Task&lt;IJSObjectReference&gt; GetbootstrapModule(); /// &lt;summary&gt; /// &lt;para&gt;Loads 'bootstrap' (/wwwroot/lib/bootstrap/dist/js/bootstrap.js) as javascript-module.&lt;/para&gt; /// &lt;para&gt;If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.&lt;/para&gt; /// &lt;/summary&gt; /// &lt;returns&gt;A Task that will complete when the module import have completed.&lt;/returns&gt; public Task PreloadBootstrap() =&gt; GetbootstrapModule(); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#download-example-net--c","content":" tip Download Example project Blazor.TSRuntime   ","version":"Next","tagName":"h3"},{"title":"Share Blazor.TSRuntime​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#share-blazortsruntime","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Blazor.TSRuntime  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Blazor\" has the following generators:​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#category-blazor-has-the-following-generators","content":" 1 BadIdeas.Icons.FontAwesome  2 Blazor.TSRuntime  3 Blazorators  4 GoLive.Generator.BlazorInterop  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Blazor.TSRuntime by Black White Yoshi","url":"/RSCG_Examples/v2/docs/Blazor.TSRuntime#see-category","content":" Blazor ","version":"Next","tagName":"h3"},{"title":"BuildInfo by Steven Giesel","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/BuildInfo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#info","content":" info Name: BuildInfo Exposes the following information for use directly from C# and VB: The generated code contains only constants, so it can be used to construct your own assembly/file version attributes: [assembly: AssemblyVersion(&quot;1.0.0.&quot; + ThisAssembly.BuildEnv.BuildId] Inspired and best used with GitInfo. Author: Steven Giesel NuGet:https://www.nuget.org/packages/BuildInfo/ You can find more details at https://github.com/linkdotnet/BuildInformation Source: https://github.com/linkdotnet/BuildInformation  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#original-readme","content":" note Incremental Build Information Generator This project provides a simple and easy-to-use C# source generator that embeds build information, such as the build time, platform, warning level, and configuration, directly into your code. By using the BuildInformation class, you can quickly access and display these details. Features​ Embeds build date (in UTC) in your codeEmbeds platform (AnyCPU, x86, x64, ...) information in your codeEmbeds compiler warning level in your codeEmbeds build configuration (e.g., Debug, Release) in your codeEmbeds the assembly version and assembly file version in your codeEmbeds the target framework moniker in your codeEmbeds the nullability analysis level in your codeEmbeds the deterministic build flag in your code Configuration​ By default the created class is internal and is not under any namespace. This can be changed by adding the following to your project file: &lt;PropertyGroup&gt; &lt;UseRootNamespaceForBuildInformation&gt;true&lt;/UseRootNamespaceForBuildInformation&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;UseRootNamespaceForBuildInformation&quot; /&gt; &lt;/ItemGroup&gt; This will use the root namespace of the project for the generated class. This is especially helpful if the generator is used in multiple projects, that might be visible to each other. Usage​ To use the BuildInformation class in your project, add the NuGet package: dotnet add package LinkDotNet.BuildInformation Here is some code how to use the class: using System; Console.WriteLine($&quot;Build at: {BuildInformation.BuildAt}&quot;); Console.WriteLine($&quot;Platform: {BuildInformation.Platform}&quot;); Console.WriteLine($&quot;Warning level: {BuildInformation.WarningLevel}&quot;); Console.WriteLine($&quot;Configuration: {BuildInformation.Configuration}&quot;); Console.WriteLine($&quot;Assembly version: {BuildInformation.AssemblyVersion}&quot;); Console.WriteLine($&quot;Assembly file version: {BuildInformation.AssemblyFileVersion}&quot;); Console.WriteLine($&quot;Assembly name: {BuildInformation.AssemblyName}&quot;); Console.WriteLine($&quot;Target framework moniker: {BuildInformation.TargetFrameworkMoniker}&quot;); Console.WriteLine($&quot;Nullability level: {BuildInformation.Nullability}&quot;); Console.WriteLine($&quot;Deterministic build: {BuildInformation.Deterministic}&quot;); You can also hover over the properties to get the currently held value (xmldoc support). An example output could look like this: Build at: 24.03.2023 21:32:17 Platform: AnyCpu Warning level: 7 Configuration: Debug Assembly version: 1.0 Assembly file version: 1.2 Assembly name: LinkDotNet.BuildInformation.Sample Target framework moniker: net7.0 Nullability level: enabled Deterministic build: true Contributing​ If you would like to contribute to the project, please submit a pull request or open an issue on the project's GitHub page. We welcome any feedback, bug reports, or feature requests. License​ This project is licensed under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#about","content":" note Generating build information  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references BuildInfo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;netcoreapp7.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;UseRootNamespaceForBuildInformation&gt;true&lt;/UseRootNamespaceForBuildInformation&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;UseRootNamespaceForBuildInformation&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;LinkDotNet.BuildInformation&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;Version&gt;2024.01.20&lt;/Version&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  LinkDotNet.BuildInformation.g.cs // &lt;auto-generated&gt; // This file was generated by the LinkDotNet.BuildInformation package. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; using System; using System.Globalization; namespace RSCG_Version; internal static class BuildInformation { /// &lt;summary&gt; /// Returns the build date (UTC). /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: 2025-07-24T04:39:49.8012643Z&lt;/remarks&gt; public static readonly DateTime BuildAt = DateTime.ParseExact(&quot;2025-07-24T04:39:49.8012643Z&quot;, &quot;O&quot;, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind); /// &lt;summary&gt; /// Returns the platform. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: AnyCpu&lt;/remarks&gt; public const string Platform = &quot;AnyCpu&quot;; /// &lt;summary&gt; /// Returns the warning level. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: 7&lt;/remarks&gt; public const int WarningLevel = 7; /// &lt;summary&gt; /// Returns the configuration. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: Release&lt;/remarks&gt; public const string Configuration = &quot;Release&quot;; /// &lt;summary&gt; /// Returns the assembly version. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: 2024.1.20.0&lt;/remarks&gt; public const string AssemblyVersion = &quot;2024.1.20.0&quot;; /// &lt;summary&gt; /// Returns the assembly file version. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: 2024.1.20.0&lt;/remarks&gt; public const string AssemblyFileVersion = &quot;2024.1.20.0&quot;; /// &lt;summary&gt; /// Returns the assembly name. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: RSCG_Version&lt;/remarks&gt; public const string AssemblyName = &quot;RSCG_Version&quot;; /// &lt;summary&gt; /// Returns the target framework moniker. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: netcoreapp7.0&lt;/remarks&gt; public const string TargetFrameworkMoniker = &quot;netcoreapp7.0&quot;; /// &lt;summary&gt; /// Returns the nullability level. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: Disable&lt;/remarks&gt; public const string Nullability = &quot;Disable&quot;; /// &lt;summary&gt; /// Returns whether the build is deterministic. /// &lt;/summary&gt; /// &lt;remarks&gt;Value is: true&lt;/remarks&gt; public const bool Deterministic = true; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#download-example-net--c","content":" tip Download Example project BuildInfo   ","version":"Next","tagName":"h3"},{"title":"Share BuildInfo​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#share-buildinfo","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/BuildInfo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"BuildInfo by Steven Giesel","url":"/RSCG_Examples/v2/docs/BuildInfo#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"RSCG by category","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/categories","content":"RSCG by category See time based list","keywords":"","version":"Next"},{"title":"BunnyTailServiceRegistration by Machi Pon","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#info","content":" info Name: BunnyTailServiceRegistration Service registration source generator. Author: Machi Pon NuGet:https://www.nuget.org/packages/BunnyTail.ServiceRegistration/ You can find more details at https://github.com/usausa/service-registration-generator Source: https://github.com/usausa/service-registration-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#original-readme","content":" note BunnyTail.ServiceRegistrationGenerator Package\tInfoBunnyTail.ServiceRegistration What is this?​ Service registory method generator. Usage​ using BunnyTail.ServiceRegistration; using Microsoft.Extensions.DependencyInjection; internal static class Program { public static void Main() { using var provider = new ServiceCollection() .AddServices() .BuildServiceProvider(); var service = provider.GetRequiredService&lt;TestService&gt;(); } } internal static partial class ServiceCollectionExtensions { [ServiceRegistration(Lifetime.Singleton, &quot;Service$&quot;)] public static partial IServiceCollection AddServices(this IServiceCollection services); } internal sealed class TestService { }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#about","content":" note Generating service registration code from attributes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#example-source-csproj-source-files","content":" CSharp ProjectServiceCollectionExtensions.csProgram.csIDatabase.csDatabase.csDatabaseCon.cs This is the CSharp Project that references BunnyTailServiceRegistration &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;BunnyTail.ServiceRegistration&quot; Version=&quot;1.7.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;9.0.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ServiceCollectionExtensions.g.cs // &lt;auto-generated /&gt; #nullable enable using Microsoft.Extensions.DependencyInjection; partial class ServiceCollectionExtensions { public static partial global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddDatabaseServices(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services) { services.AddScoped&lt;global::InjectDemo.Database&gt;(); services.AddScoped&lt;global::InjectDemo.IDatabase, global::InjectDemo.DatabaseCon&gt;(); return services; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#download-example-net--c","content":" tip Download Example project BunnyTailServiceRegistration   ","version":"Next","tagName":"h3"},{"title":"Share BunnyTailServiceRegistration​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#share-bunnytailserviceregistration","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/BunnyTailServiceRegistration  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"BunnyTailServiceRegistration by Machi Pon","url":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"Actor","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Actor","content":"Actor Actor Number RSCG: 1 1 ActorSrcGen","keywords":"","version":"Next"},{"title":"AOP","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/AOP","content":"AOP AOP Number RSCG: 1 1 WhatIAmDoing","keywords":"","version":"Next"},{"title":"Async","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Async","content":"Async Async Number RSCG: 2 1 AsyncIt 2 HsuSgSync","keywords":"","version":"Next"},{"title":"API","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/API","content":"API API Number RSCG: 10 1 immediate.apis 2 Microsoft.Extensions.Configuration.Binder 3 MinimalApiBuilder 4 MinimalApis.Discovery 5 MinimalHelpers.Routing.Analyzers 6 RDG 7 Refit 8 RSCG_WebAPIExports 9 SafeRouting 10 SkinnyControllersCommon","keywords":"","version":"Next"},{"title":"Breezy by Ludovicdln","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Breezy","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#info","content":" info Name: Breezy Breezy is a lightweight Object-Relational Mapping (ORM) library for mapping objects using Source Generator in C#.It provides seamless asynchronous operations for enhanced performance. Author: Ludovicdln NuGet:https://www.nuget.org/packages/Breezy.SourceGenerator/ You can find more details at https://github.com/Ludovicdln/Breezy Source: https://github.com/Ludovicdln/Breezy  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#original-readme","content":" note Breezy is a lightweight Object-Relational Mapping (ORM) library for mapping objects using Source Generator in C#. It provides seamless asynchronous operations for enhanced performance. Installation​ Nugget Package : https://www.nuget.org/packages/Breezy.SourceGenerator/​ To install Breezy, simply add the package reference to your project using NuGet Package Manager or by adding the following line to your .csproj file: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Breezy.SourceGenerator&quot; Version=&quot;1.0.1&quot; /&gt; &lt;/ItemGroup&gt; Getting Started​ Breezy simplifies the mapping of objects and performing database operations. Here's a simple example of querying houses using Breezy's asynchronous operations : public static async Task&lt;IEnumerable&lt;House&gt;&gt; QueryAsync&lt;T&gt;(this DbConnection connection, string sql, object param, ICacheableQuery&lt;House&gt; cacheableQuery, CancellationToken cancellationToken = default) where T : House using Breezy; var houses = await connection.QueryAsync&lt;House&gt;(&quot;SELECT * FROM house&quot;); In the above example, the QueryAsync method executes the provided SQL query and maps the results to a list of House objects asynchronously. Mapping Objects with Relations (N to N || 1 to N)​ Breezy supports mapping objects with relationships. Here's an example of querying posts with tags using Breezy's asynchronous operations : using Breezy; var posts = await connection.QueryAsync&lt;Post&gt;( @&quot;SELECT * FROM test.post p INNER JOIN posts_tags pt ON p.id = pt.post_id INNER JOIN tag t ON t.id = pt.tag_id&quot;); The QueryAsync method executes the provided SQL query and maps the results to a list of Post objects. The Post class is defined as follows : [Table(&quot;post&quot;)] [SplitOn(3, 4)] public class Post { public int Id { get; set; } public string Title { get; set; } public string Body { get; set; } public List&lt;Tag&gt; Tags { get; set; } = new(); } [Table(&quot;tag&quot;)] public class Tag { public int Id { get; set; } public string Name { get; set; } public List&lt;Post&gt; Posts { get; set; } = new(); } In the Post class, the Table attribute specifies the table name, and the SplitOn attribute indicates the column indices to split when mapping the object from the database. Circular reference doesn't throw exception ! Vs Dapper​ var sql = @&quot;SELECT p.id, p.title, p.body, t.id, t.name FROM post p INNER JOIN posts_tags pt ON pt.post_id = p.id INNER JOIN tag t ON t.id = pt.tag_id&quot;; var posts = await connection.QueryAsync&lt;Post, Tag, Post&gt;(sql, (post, tag) =&gt; { post.Tags.Add(tag); return post; }, splitOn: &quot;id&quot;); var result = posts.GroupBy(p =&gt; p.PostId).Select(g =&gt; { var groupedPost = g.First(); groupedPost.Tags = g.Select(p =&gt; p.Tags.Single()).ToList(); return groupedPost; }); // Dapper is less user friendly for theses using case Mapping Objects with Reference Type(s)​ public class UserReference { public int Id { get; set; } public Position Position { get; set; } } public sealed class Position { public string ZipCode { get; set; } public string City { get; set; } public string Address { get; set; } } var users = await connection.QueryAsync&lt;UserReference&gt;(&quot;SELECT u.id, u.zip_code, u.city, u.address FROM user_ref u&quot;); The QueryAsync method executes the SQL query and automatically maps the result columns to the corresponding properties of the UserReference entity, including the reference type Position. Querying with Anonymous Types​ Breezy allows you to query using anonymous types as parameters. Here's an example : var houses = await connection.QueryAsync&lt;House&gt;(&quot;SELECT * FROM house h WHERE h.id = @Id&quot;, new {Id = 1}); The anonymous type is used to pass the Id parameter. IMPORTANT :Make sure that the column index in the SQL query match the property index in any class for the mapping to work correctly. You need to add any relations at the end of you main object ! Caching for Performance Optimization​ Breezy supports implementing caching mechanisms, such as in-memory or distributed caching, to reduce the memory footprint and improve query execution time. You can implement your own caching strategy based on your specific requirements. public interface ICacheableQuery&lt;T&gt; where T : class { public Task&lt;IEnumerable&lt;T&gt;&gt; GetCacheableResultsAsync(IdentityQuery identityQuery); public Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable&lt;T&gt; results); } // Check if the query result is already cached var identityQuery = new IdentityQuery(sql); var cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery); if (cacheableResults.Any()) return cacheableResults; // Execute the query var results = new List&lt;T&gt;(); while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false)) { // processing... } // Cache the query result for X ms/s await cacheableQuery.SetCacheableResultsAsync(identityQuery, results); Example of implementation (Memory Cache) public sealed class MemoryCacheableQuery&lt;T&gt; : ICacheableQuery&lt;T&gt; where T : class { private readonly Dictionary&lt;IdentityQuery, Tuple&lt;DateTime, IEnumerable&lt;T&gt;&gt;&gt; _cacheableData = new(); public Task&lt;IEnumerable&lt;T&gt;&gt; GetCacheableResultsAsync(IdentityQuery identityQuery) { if (_cacheableData.TryGetValue(identityQuery, out var results)) { var (addDate, collection) = results; if ((DateTime.Now - addDate) &lt; TimeSpan.FromSeconds(10)) return Task.FromResult&lt;IEnumerable&lt;T&gt;&gt;(collection); _cacheableData.Remove(identityQuery); } return Task.FromResult&lt;IEnumerable&lt;T&gt;&gt;(Array.Empty&lt;T&gt;()); } public Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable&lt;T&gt; results) { _cacheableData.Add(identityQuery, new Tuple&lt;DateTime, IEnumerable&lt;T&gt;&gt;(DateTime.Now, results)); return Task.CompletedTask; } } Execute a Command that return result​ Breezy provides the ExecuteAsync method for executing SQL statements that can return results. Here's an example of using ExecuteAsync to insert data into a table and retrieve the last inserted ID: public static async Task&lt;int&gt; ExecuteAsync(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default) var lastId = await connection.ExecuteAsync(&quot;INSERT INTO myTable (x, y) VALUES (x, y); SELECT LAST_INSERT_ID();&quot;); Execute a Command that return results with Transaction​ public static async Task&lt;int[]&gt; ExecuteAsync(this DbConnection connection, string[] sql, DbTransaction transaction, CancellationToken cancellationToken = default) var dbTransaction = await _mySqlConnection.BeginTransactionAsync(); var results = await connection.ExecuteAsync(new [] { &quot;INSERT INTO myTable (x, y) VALUES (x, y); SELECT LAST_INSERT_ID();&quot; }, { /* ... */ }, dbTransaction); Performance ~ 10k rows​ BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19044.2965/21H2/November2021Update) AMD Ryzen 5 3500X, 1 CPU, 6 logical and 6 physical cores .NET SDK=8.0.100-preview.2.23157.25 [Host] : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2 DefaultJob : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2 ORM\tMethod\tReturn\tMean\tStdDev\tGen0\tGen1\tGen2\tAllocatedBreezy\tQueryAsync&lt;T&gt;\tNo relation\t491.1 ns\t4.08 ns\t0.0801\t-\t-\t672 B Dapper\tQueryAsync&lt;T&gt;\tNo relation\t14,005,807.3 ns\t85,785.13 ns\t437.5000\t265.6250\t125.0000\t3899691 B Breezy\tQueryFirstOrDefault&lt;T&gt;\tNo relation\t589.8 ns\t7.28 ns\t0.0935\t-\t-\t784 B Dapper\tQueryFirstOrDefault&lt;T&gt;\tNo relation\t540,714.1 ns\t44,717.07 ns\t0.9766\t-\t-\t13081 B Breezy\tQueryAsync&lt;T&gt;\t1 To N relations\t588.5 ns\t9.26 ns\t0.0801\t-\t-\t672 B Dapper\tQueryAsync&lt;T&gt;\t1 To N relations\t98,695,865.6 ns\t740,908.87 ns\t2000.0000\t833.3333\t500.0000\t17760052 B Breezy\tQueryFirstOrDefault&lt;T&gt;\t1 To N relations\t690.7 ns\t13.41 ns\t0.0935\t-\t-\t784 B Dapper\tQueryFirstOrDefault&lt;T&gt;\t1 To N relations\t14,866,187.7 ns\t385,888.24 ns\t-\t-\t-\t30835 B Why Breezy ?​ I wanted to offer similary fonctionalities faster than Dapper with source generator  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#about","content":" note ORM Mapper  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csglobals.cs This is the CSharp Project that references Breezy &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Breezy.SourceGenerator&quot; Version=&quot;1.0.1&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Data.SqlClient&quot; Version=&quot;5.1.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DbConnectionExtensions.g.csICacheableQuery.g.csIdentityQuery.g.csPersonExtensions.g.csSplitOnAttribute.g.csTableAttribute.g.cs // &lt;auto-generated /&gt; using System.Collections.Generic; using System.Data; using System.Data.Common; using System.Threading.Tasks; using System.Collections.Generic; namespace DbConnectionExtensions { public static class DbConnectionExtensions { /// &lt;summary&gt; /// Execute a command asynchronously using Task. /// &lt;/summary&gt; /// &lt;param name = &quot;sql&quot;&gt;The SQL to execute for the query.&lt;/param&gt; /// &lt;returns&gt;The number of rows affected.&lt;/returns&gt; public static async Task&lt;int&gt; ExecuteAsync(this DbConnection connection, string sql, CancellationToken cancellationToken = default) { bool wasClosed = connection.State == ConnectionState.Closed; if (wasClosed) await connection.OpenAsync(cancellationToken); await using var command = connection.CreateCommand(); command.CommandText = sql; try { return await command.ExecuteNonQueryAsync(cancellationToken); } finally { if (wasClosed) connection.Close(); } } /// &lt;summary&gt; /// Execute a command asynchronously using Task. /// &lt;/summary&gt; /// &lt;param name = &quot;sql&quot;&gt;The SQL to execute for the query.&lt;/param&gt; /// &lt;param name = &quot;param&quot;&gt;The parameters to pass, if any.&lt;/param&gt; /// &lt;returns&gt;The number of rows affected.&lt;/returns&gt; public static async Task&lt;int&gt; ExecuteAsync(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default) { bool wasClosed = connection.State == ConnectionState.Closed; if (wasClosed) await connection.OpenAsync(cancellationToken); await using var command = connection.CreateCommand(); command.CommandText = sql; foreach (var property in param.GetType().GetProperties()) { var parameter = command.CreateParameter(); parameter.ParameterName = &quot;@&quot; + property.Name; parameter.Value = property.GetValue(param); command.Parameters.Add(parameter); } try { return await command.ExecuteNonQueryAsync(cancellationToken); } finally { if (wasClosed) connection.Close(); } } /// &lt;summary&gt; /// Execute a command asynchronously using Task. /// &lt;/summary&gt; /// &lt;param name = &quot;sql&quot;&gt;The SQL to execute for the query.&lt;/param&gt; /// &lt;param name = &quot;transaction&quot;&gt;The transaction to use for this query.&lt;/param&gt; /// &lt;returns&gt;The number of rows affected.&lt;/returns&gt; public static async Task&lt;int[]&gt; ExecuteAsync(this DbConnection connection, string[] sql, DbTransaction transaction, CancellationToken cancellationToken = default) { bool wasClosed = connection.State == ConnectionState.Closed; if (wasClosed) await connection.OpenAsync(cancellationToken); var commands = new DbCommand[sql.Length]; for (var i = 0; i &lt; sql.Length; i++) { await using var command = connection.CreateCommand(); command.CommandText = sql[i]; command.Transaction = transaction; commands[i] = command; } try { var results = new int[sql.Length]; for (var i = 0; i &lt; commands.Length; i++) results[i] = await commands[i].ExecuteNonQueryAsync(cancellationToken); await transaction.CommitAsync(); return results; } catch (DbException e) { await transaction.RollbackAsync(); return Array.Empty&lt;int&gt;(); } finally { transaction.Dispose(); if (wasClosed) connection.Close(); } } /// &lt;summary&gt; /// Execute a command asynchronously using Task. /// &lt;/summary&gt; /// &lt;param name = &quot;sql&quot;&gt;The SQL to execute for the query.&lt;/param&gt; /// &lt;param name = &quot;param&quot;&gt;The parameters to pass, if any.&lt;/param&gt; /// &lt;param name = &quot;transaction&quot;&gt;The transaction to use for this query.&lt;/param&gt; /// &lt;returns&gt;The number of rows affected.&lt;/returns&gt; public static async Task&lt;int[]&gt; ExecuteAsync(this DbConnection connection, string[] sql, object[] param, DbTransaction transaction, CancellationToken cancellationToken = default) { bool wasClosed = connection.State == ConnectionState.Closed; if (wasClosed) await connection.OpenAsync(cancellationToken); var commands = new DbCommand[sql.Length]; for (var i = 0; i &lt; sql.Length; i++) { await using var command = connection.CreateCommand(); command.CommandText = sql[i]; command.Transaction = transaction; var paramt = param[i]; foreach (var property in paramt.GetType().GetProperties()) { var parameter = command.CreateParameter(); parameter.ParameterName = &quot;@&quot; + property.Name; parameter.Value = property.GetValue(paramt); command.Parameters.Add(parameter); } commands[i] = command; } try { var results = new int[sql.Length]; for (var i = 0; i &lt; commands.Length; i++) results[i] = await commands[i].ExecuteNonQueryAsync(cancellationToken); await transaction.CommitAsync(); return results; } catch (DbException e) { await transaction.RollbackAsync(); return Array.Empty&lt;int&gt;(); } finally { transaction.Dispose(); if (wasClosed) connection.Close(); } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#download-example-net--c","content":" tip Download Example project Breezy   ","version":"Next","tagName":"h3"},{"title":"Share Breezy​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#share-breezy","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Breezy  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Database\" has the following generators:​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#category-database-has-the-following-generators","content":" 1 Breezy  2 Dapper.AOT  3 EntityLengths.Generator  4 Gedaq  5 TableStorage  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Breezy by Ludovicdln","url":"/RSCG_Examples/v2/docs/Breezy#see-category","content":" Database ","version":"Next","tagName":"h3"},{"title":"Blazor","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Blazor","content":"Blazor Blazor Number RSCG: 4 1 BadIdeas.Icons.FontAwesome 2 Blazor.TSRuntime 3 Blazorators 4 GoLive.Generator.BlazorInterop","keywords":"","version":"Next"},{"title":"Bitwise","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Bitwise","content":"Bitwise Bitwise Number RSCG: 2 1 BitsKit 2 Darp.BinaryObjects","keywords":"","version":"Next"},{"title":"Clone","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Clone","content":"Clone Clone Number RSCG: 2 1 CopyTo 2 Dolly","keywords":"","version":"Next"},{"title":"Builder","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Builder","content":"Builder Builder Number RSCG: 7 1 Architect.DomainModeling 2 BuilderGenerator 3 DimonSmart.BuilderGenerator 4 Fluentify 5 Hsu.Sg.FluentMember 6 ShadowWriterBuilder 7 StepwiseBuilderGenerator","keywords":"","version":"Next"},{"title":"CodeToString","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/CodeToString","content":"CodeToString CodeToString Number RSCG: 3 1 CodeAnalysis 2 RossLean.StringificationGenerator 3 SourceGenerator.Helper.CopyCode","keywords":"","version":"Next"},{"title":"CommandLine","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/CommandLine","content":"CommandLine CommandLine Number RSCG: 1 1 ArgumentParsing","keywords":"","version":"Next"},{"title":"Constructor","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Constructor","content":"Constructor Constructor Number RSCG: 7 1 AutoConstructor 2 AutoCtor 3 AutoDeconstruct 4 ConstructorGenerator 5 PrimaryParameter 6 QuickConstructor 7 sourcedepend","keywords":"","version":"Next"},{"title":"Database","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Database","content":"Database Database Number RSCG: 5 1 Breezy 2 Dapper.AOT 3 EntityLengths.Generator 4 Gedaq 5 TableStorage","keywords":"","version":"Next"},{"title":"Console","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Console","content":"Console Console Number RSCG: 1 1 Figgle","keywords":"","version":"Next"},{"title":"DependencyInjection","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/DependencyInjection","content":"DependencyInjection DependencyInjection Number RSCG: 9 1 AutoRegisterInject 2 BunnyTailServiceRegistration 3 DependencyModules.SourceGenerator 4 depso 5 FactoryGenerator 6 Injectio 7 jab 8 Pure.DI 9 ServiceScan.SourceGenerator","keywords":"","version":"Next"},{"title":"Disposer","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Disposer","content":"Disposer Disposer Number RSCG: 5 1 BenutomoAutomaticDisposeImplSourceGenerator 2 Coplt.Dropping 3 DisposableHelpers 4 Disposer 5 IDisposableGenerator","keywords":"","version":"Next"},{"title":"EnhancementClass","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/EnhancementClass","content":"EnhancementClass EnhancementClass Number RSCG: 27 1 ApparatusAOT 2 AspectGenerator 3 CommonCodeGenerator 4 Comparison 5 DudNet 6 Enhanced.GetTypes 7 FastGenericNew 8 Immutype 9 Ling.Audit 10 Lombok.NET 11 M31.FluentAPI 12 MemberAccessor 13 MemoryPack 14 Meziantou.Polyfill 15 Microsoft.Extensions.Logging 16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator 17 Microsoft.Interop.JavaScript.JSImportGenerator 18 OptionToStringGenerator 19 QueryStringGenerator 20 RSCG_Decorator 21 RSCG_UtilityTypes 22 StaticReflection 23 SyncMethodGenerator 24 System.Runtime.InteropServices 25 System.Text.RegularExpressions 26 TelemetryLogging 27 ThisClass","keywords":"","version":"Next"},{"title":"EnhancementProject","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/EnhancementProject","content":"EnhancementProject EnhancementProject Number RSCG: 20 1 AssemblyVersionInfo 2 AutoInvoke.Generator 3 AutoSpectre 4 BuildInfo 5 CommandLine 6 Credfeto.Version.Information.Generator 7 Larcanum.GitInfo 8 LinqGen.Generator 9 Pekspro.BuildInformationGenerator 10 PlantUmlClassDiagramGenerator 11 RSCG_AMS 12 RSCG_ExportDiagram 13 RSCG_FunctionsWithDI 14 RSCG_NameGenerator 15 RSCG_TimeBombComment 16 RSCG_Wait 17 ShadowWriterProjectInfo 18 ThisAssembly 19 ThisAssembly.Constants 20 ThisAssembly.Metadata","keywords":"","version":"Next"},{"title":"Enum","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Enum","content":"Enum Enum Number RSCG: 9 1 CredFetoEnum 2 EnumClass 3 EnumUtilities 4 Flaggen 5 FusionReactor 6 Genbox.FastEnum 7 jos.enumeration 8 NetEscapades.EnumGenerators 9 PMart.Enumeration","keywords":"","version":"Next"},{"title":"Equals","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Equals","content":"Equals Equals Number RSCG: 3 1 Equatable.Generator 2 GeneratorEquals 3 Valuify","keywords":"","version":"Next"},{"title":"FilesToCode","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/FilesToCode","content":"FilesToCode FilesToCode Number RSCG: 15 1 Chorn.EmbeddedResourceAccessGenerator 2 corecraft 3 Datacute.EmbeddedResourcePropertyGenerator 4 DotnetYang 5 EmbedResourceCSharp 6 LingoGen 7 NotNotAppSettings 8 Podimo.ConstEmbed 9 ResXGenerator 10 RSCG_JSON2Class 11 RSCG_Utils 12 Strings.ResourceGenerator 13 ThisAssembly_Resources 14 ThisAssembly.Strings 15 Weave","keywords":"","version":"Next"},{"title":"FunctionalProgramming","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/FunctionalProgramming","content":"FunctionalProgramming FunctionalProgramming Number RSCG: 16 1 cachesourcegenerator 2 dunet 3 Dusharp 4 Funcky.DiscriminatedUnion 5 FunicularSwitch 6 N.SourceGenerators.UnionTypes 7 OneOf 8 PartiallyApplied 9 polytype 10 rscg_demeter 11 rscg_queryables 12 RSCG_Utils_Memo 13 Sera.Union 14 TypeUtilities 15 UnionGen 16 UnionsGenerator","keywords":"","version":"Next"},{"title":"Hangfire","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Hangfire","content":"Hangfire Hangfire Number RSCG: 1 1 HangfireRecurringJob","keywords":"","version":"Next"},{"title":"Interface","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Interface","content":"Interface Interface Number RSCG: 14 1 AutoInterface 2 Biwen.AutoClassGen 3 CopyCat 4 Farskeptic.AutoCompose 5 MakeInterface.Generator 6 Matryoshki 7 Minerals.AutoInterfaces 8 NetAutomaticInterface 9 ProxyGen 10 Roozie.AutoInterface 11 RSCG_CompositeProvider 12 rscg_Interface_to_null_object 13 RSCG_Static 14 ShadowWriterNullobjects","keywords":"","version":"Next"},{"title":"Linq","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Linq","content":"Linq Linq Number RSCG: 1 1 zlinq","keywords":"","version":"Next"},{"title":"Mapper","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Mapper","content":"Mapper Mapper Number RSCG: 8 1 AutoDTO 2 AutoGen 3 DynamicsMapper 4 LightweightObjectMapper 5 MagicMap 6 mapperly 7 MapTo 8 NextGenMapper","keywords":"","version":"Next"},{"title":"Mediator","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Mediator","content":"Mediator Mediator Number RSCG: 3 1 DeeDee 2 Immediate.Handlers 3 Mediator","keywords":"","version":"Next"},{"title":"cachesourcegenerator by Jeppe Roi Kristensen","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/cachesourcegenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#info","content":" info Name: cachesourcegenerator A tool to wrap a method call with caching Author: Jeppe Roi Kristensen NuGet:https://www.nuget.org/packages/cachesourcegenerator/ You can find more details at https://github.com/jeppevammenkristensen/cachesourcegenerator Source: https://github.com/jeppevammenkristensen/cachesourcegenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#original-readme","content":" note Cache source generator Important CachoAttribute has been renamed to GenerateMemoryCacheAttribute A source generator that can generate simple cache boilerplate to wrap around a method Getting started​ This generator works by wrapping a method in another method with the same signature, that ensures calls are cached. In a partial class decorate the method with the GenerateMemoryCache attribute public partial class SampleEntity { private readonly IMemoryCache _memoryCache; public SampleEntity(IMemoryCache memoryCache) { _memoryCache = memoryCache; } [GenerateMemoryCache(MethodName = &quot;GetId&quot;, CacheEnricherProcessor = nameof(ProcessCacheEntry))] private string? DoGetSomeValue(int id) { return &quot;Someresult&quot;; } public void ProcessCacheEntry(ICacheEntry entry) { entry.SlidingExpiration = TimeSpan.FromMinutes(2); } } And it will generate public partial class SampleEntity { public string? GetId(int id) { var _key_ = new { _MethodName = &quot;DoGetSomeValue&quot;, _ClassName = &quot;SampleEntity&quot;, id }; IMemoryCache _cache_ = _memoryCache; return _cache_.GetOrCreate(_key_, _entry_ =&gt; { ProcessCacheEntry(_entry_); return DoGetSomeValue(id); }); } public void GetId_Evict(int id) { var _key_ = new { _MethodName = &quot;DoGetSomeValue&quot;, _ClassName = &quot;SampleEntity&quot;, id }; IMemoryCache _cache_ = _memoryCache; _cache_.Remove(_key_); } } Note that that defining the CacheEnricherProcessor is optional and can be left out Cache access​ The IMemoryCache can be retrieved in two ways. Autogenerated or by providing it in the class Autogenerated cache access code​ This requires that you install the nuget package Microsoft.Extensions.Caching.Memory. Decorate a method that returns a value on a partial class with the GenerateMemoryCache Attribute public partial class SomeClass { [CacheSourceGenerator.Cache(MethodName = &quot;SomeMethod&quot;)] private string DoSomeMethod(string id, int age) { return $&quot;{id}{age}&quot;; } } This will generate the code below. public partial class SomeClass { private static class CacheInit { static CacheInit() { _memoryCache = new Lazy&lt;IMemoryCache&gt;(() =&gt; new MemoryCache(new MemoryCacheOptions())); } private static Lazy&lt;IMemoryCache&gt; _memoryCache; public static IMemoryCache MemoryCache =&gt; _memoryCache.Value; } public string SomeMethod(string id, int age) { var key = new { _MethodName = &quot;DoSomeMethod&quot;, _ClassName = &quot;SomeClass&quot;, id, age }; IMemoryCache cache = CacheInit.MemoryCache; return cache.GetOrCreate(key, entry =&gt; { return DoSomeMethod(id, age); }); } } Providing the cache from the class​ An alternative is to provide a IMemoryCache instance from the class. This can be done through a FieldPropertyMethod (parameter less) public static partial class SomeOtherClass { private static IMemoryCache GetCache() =&gt; new MemoryCache(new MemoryCacheOptions()); [CacheSourceGenerator.GenerateMemoryCache(MethodName = &quot;SomeMethod&quot;)] public static Task&lt;string&gt; ExecuteCall() { return Task.FromResult(&quot;Hello&quot;); } } This will generate the code below. public static partial class SomeOtherClass { public async static Task&lt;string&gt; SomeMethod() { var key = new { _MethodName = &quot;ExecuteCall&quot;, _ClassName = &quot;SomeOtherClass&quot;, }; IMemoryCache cache = GetCache(); var result = await cache.GetOrCreateAsync(key, async entry =&gt; { return await ExecuteCall(); }); return result ?? throw new InvalidOperationException(&quot;Expected non empty result&quot;); } } Method generation​ if the method is async or returning a Task&lt;T&gt; the generated method will take that into consideration. If the return type is not nullable, the generated method will throw an exception if the result of the method call is null. GenerateMemoryCache Atrribute​ MethodName​ The GenerateMemoryCache needs to as a minimum have MethodName set as this is the desired method name of the generated method. CacheEnricherProcessor​ If you want to control the ICacheEntry object, you can use this property to point to a method that takes a ICacheEntry as input and returns void or if async as Task. This method will be called like below and can be used set for instance expiration var _result_ = _cache_.GetOrCreate(_key_, _entry_ =&gt; { CacheEnricher(_entry_); return DoGetName(id); }); KeyGenerator​ Out of the box a key will be auto generated that will consist of MethodNameClassNameThe parameters of the method If you want to create a custom key, you can use the KeyGenerator property to point to a method that will generate the key. The method must match the parameters of the decorated method by type (it's okay if there is a mismatch between names) The return type can be anything but void So for [GenerateMemoryCache(KeyGenerator=nameof(GenerateKey), MethodName=&quot;SomeName&quot;)] public string Somemethod(string id, int number, bool boolValue) a valid KeyGenerator method could be public (string id, int number, bool boolean)   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#about","content":" note Caching methods results  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csFib.cs This is the CSharp Project that references cachesourcegenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;CacheSourceGenerator&quot; Version=&quot;0.4.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.Abstractions&quot; Version=&quot;8.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.Memory&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  FibTest.g.csGenerateMemoryCache.g.csIgnoreKey.g.cs #nullable enable //autogenerated using Microsoft.Extensions.Caching.Memory; using CacheSourceGenerator; using System; namespace CacheDemo; internal partial class FibTest { public int FibMemo(int n) { var _key_ = new { _MethodName = &quot;Fib&quot;, _ClassName = &quot;FibTest&quot;, n }; IMemoryCache _cache_ = _memoryCache; var _result_ = _cache_.GetOrCreate(_key_, _entry_ =&gt; { ProcessCacheEntry(_entry_); OnCallingFib(n); var _callResult_ = Fib(n); OnCalledFib(n, _callResult_); ; return _callResult_; }); return _result_; } public void FibMemo_Evict(int n) { var _key_ = new { _MethodName = &quot;Fib&quot;, _ClassName = &quot;FibTest&quot;, n }; IMemoryCache _cache_ = _memoryCache; _cache_.Remove(_key_); } partial void OnCallingFib(int n); partial void OnCalledFib(int n, int _returned_); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#download-example-net--c","content":" tip Download Example project cachesourcegenerator   ","version":"Next","tagName":"h3"},{"title":"Share cachesourcegenerator​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#share-cachesourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/cachesourcegenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"cachesourcegenerator by Jeppe Roi Kristensen","url":"/RSCG_Examples/v2/docs/cachesourcegenerator#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"Optimizer","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Optimizer","content":"Optimizer Optimizer Number RSCG: 1 1 StringLiteral","keywords":"","version":"Next"},{"title":"MVVM","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/MVVM","content":"MVVM MVVM Number RSCG: 2 1 CommunityToolkit.Mvvm 2 PropertyChangedSourceGenerator","keywords":"","version":"Next"},{"title":"PrimitiveObsession","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/PrimitiveObsession","content":"PrimitiveObsession PrimitiveObsession Number RSCG: 5 1 DomainPrimitives 2 Strongly 3 StronglyTypedUid 4 UnitGenerator 5 Vogen","keywords":"","version":"Next"},{"title":"SignalR","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/SignalR","content":"SignalR SignalR Number RSCG: 1 1 TypedSignalR.Client","keywords":"","version":"Next"},{"title":"Templating","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Templating","content":"Templating Templating Number RSCG: 14 1 Gobie 2 InlineComposition 3 InterceptorTemplate 4 JKToolKit.TemplatePropertyGenerator 5 Microsoft.NET.Sdk.Razor.SourceGenerators 6 Minerals.AutoMixins 7 MorrisMoxy 8 NTypewriter 9 RazorBlade 10 RazorSlices 11 RSCG_IFormattable 12 RSCG_Templating 13 spreadcheetah 14 Tortuga.Shipwright","keywords":"","version":"Next"},{"title":"Serializer","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Serializer","content":"Serializer Serializer Number RSCG: 6 1 GenPack 2 jsonConverterSourceGenerator 3 JsonPolymorphicGenerator 4 ProtobufSourceGenerator 5 StackXML 6 System.Text.Json","keywords":"","version":"Next"},{"title":"Tests","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/Tests","content":"Tests Tests Number RSCG: 5 1 mocklis 2 MockMe 3 MSTest 4 Ridge 5 Rocks","keywords":"","version":"Next"},{"title":"StateMachine","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/StateMachine","content":"StateMachine StateMachine Number RSCG: 1 1 SuperFluid","keywords":"","version":"Next"},{"title":"WinAPI","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Categories/WinAPI","content":"WinAPI WinAPI Number RSCG: 3 1 Com 2 Microsoft.Windows.CsWin32 3 NativeObjects","keywords":"","version":"Next"},{"title":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#info","content":" info Name: Chorn.EmbeddedResourceAccessGenerator Generates strongly typed access methods for embedded resources. Author: Christoph Hornung NuGet:https://www.nuget.org/packages/Chorn.EmbeddedResourceAccessGenerator/ You can find more details at https://github.com/ChristophHornung/EmbeddedResourceGenerator Source: https://github.com/ChristophHornung/EmbeddedResourceGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#original-readme","content":" note EmbeddedResourceAccessGenerator The EmbeddedResourceAccessGenerator is a code generator to allow easy access to all embedded resources. Usage​ Get the nuget package here. After referencing the Chorn.EmbeddedResourceAccessGenerator nuget the code generation will automatically create a class EmbeddedResources in the root namespace of the project. Together with the generated EmbeddedResource enumeration there are several options to access embedded resources: E.g. for a Test.txt embedded resource in the TestAsset folder: Via enum access through the EmbeddedResource enum: // Via the generated extension methods on the enum using Stream s = EmbeddedResource.TestAsset_Test_txt.GetStream(); using StreamReader sr = EmbeddedResource.TestAsset_Test_txt.GetReader(); Via enum access through the EmbeddedResource[FolderName] enum: // Via the generated extension methods on the enum using Stream s = EmbeddedResourceTestAsset.Test_txt.GetStream(); using StreamReader sr = EmbeddedResourceTestAsset.Test_txt.GetReader(); Via direct static acccess on EmbeddedResources: using StreamReader sr = EmbeddedResources.TestAsset_Test_txt_Reader; Console.WriteLine(sr.ReadToEnd()); // Or via access through the Stream using Stream s = EmbeddedResources.TestAsset_Test_txt_Stream; // ... Motivation​ Instead of using magic strings in the resource access code that may point to non-existant resources this generator guarantees resources to exist and code to not compile when they are removed. Grouping the resources via their path adds path specific enums, e.g. to easily write tests for all embedded resource in a subfolder. Also it saves quite a bit of typing effort.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#about","content":" note Embedded Resources to C# Code  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.cscreateDB.sql This is the CSharp Project that references Chorn.EmbeddedResourceAccessGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;sql/*.sql&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Chorn.EmbeddedResourceAccessGenerator&quot; Version=&quot;1.1.5&quot; OutputItemType=&quot;Analyzer&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EmbeddedResources.generated.cs #nullable enable namespace EmbedDemo; using System; using System.Collections; using System.IO; using System.Reflection; /// &lt;summary&gt; /// Auto-generated class to access all embedded resources in an assembly. /// &lt;/summary&gt; public static partial class EmbeddedResources { /// &lt;summary&gt; /// Gets the embedded resource 'sql.createDB.sql' as a stream. /// &lt;/summary&gt; /// &lt;returns&gt;The stream to access the embedded resource.&lt;/returns&gt; public static Stream sql_createDB_sql_Stream { get { Assembly assembly = typeof(EmbeddedResources).Assembly; string resource = &quot;EmbedDemo.sql.createDB.sql&quot;; return assembly.GetManifestResourceStream(resource)!; } } /// &lt;summary&gt; /// Gets the embedded resource 'sql.createDB.sql' as a stream-reader. /// &lt;/summary&gt; /// &lt;returns&gt;The stream-reader to access the embedded resource.&lt;/returns&gt; public static StreamReader sql_createDB_sql_Reader { get { Assembly assembly = typeof(EmbeddedResources).Assembly; string resource = &quot;EmbedDemo.sql.createDB.sql&quot;; return new StreamReader(assembly.GetManifestResourceStream(resource)!); } } /// &lt;summary&gt; /// Gets the embedded resource's stream. /// &lt;/summary&gt; /// &lt;param name=&quot;resource&quot;&gt;The embedded resource to retrieve the stream for.&lt;/param&gt; /// &lt;returns&gt;The stream to access the embedded resource.&lt;/returns&gt; public static Stream GetStream(this EmbeddedResource resource) { Assembly assembly = typeof(EmbeddedResources).Assembly; return assembly.GetManifestResourceStream(GetResourceName(resource))!; } /// &lt;summary&gt; /// Gets the embedded resource's stream-reader. /// &lt;/summary&gt; /// &lt;param name=&quot;resource&quot;&gt;The embedded resource to retrieve the stream-reader for.&lt;/param&gt; /// &lt;returns&gt;The stream-reader to access the embedded resource.&lt;/returns&gt; public static StreamReader GetReader(this EmbeddedResource resource) { Assembly assembly = typeof(EmbeddedResources).Assembly; return new StreamReader(assembly.GetManifestResourceStream(GetResourceName(resource))!); } /// &lt;summary&gt; /// Gets the embedded resource's name in the format required by &lt;c&gt;GetManifestResourceStream&lt;/c&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;resource&quot;&gt;The embedded resource to retrieve the name for.&lt;/param&gt; /// &lt;returns&gt;The name to access the embedded resource.&lt;/returns&gt; public static string GetResourceName(this EmbeddedResource resource) { return resource switch { EmbeddedResource.sql_createDB_sql =&gt; &quot;EmbedDemo.sql.createDB.sql&quot;, _ =&gt; throw new InvalidOperationException(), }; } /// &lt;summary&gt; /// Gets the embedded resource's stream. /// &lt;/summary&gt; /// &lt;param name=&quot;resource&quot;&gt;The embedded resource to retrieve the stream for.&lt;/param&gt; /// &lt;returns&gt;The stream to access the embedded resource.&lt;/returns&gt; public static Stream GetStream(this EmbeddedResourcesql resource) { Assembly assembly = typeof(EmbeddedResources).Assembly; return assembly.GetManifestResourceStream(GetResourceName(resource))!; } /// &lt;summary&gt; /// Gets the embedded resource's stream-reader. /// &lt;/summary&gt; /// &lt;param name=&quot;resource&quot;&gt;The embedded resource to retrieve the stream-reader for.&lt;/param&gt; /// &lt;returns&gt;The stream-reader to access the embedded resource.&lt;/returns&gt; public static StreamReader GetReader(this EmbeddedResourcesql resource) { Assembly assembly = typeof(EmbeddedResources).Assembly; return new StreamReader(assembly.GetManifestResourceStream(GetResourceName(resource))!); } /// &lt;summary&gt; /// Gets the embedded resource's name in the format required by &lt;c&gt;GetManifestResourceStream&lt;/c&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;resource&quot;&gt;The embedded resource to retrieve the name for.&lt;/param&gt; /// &lt;returns&gt;The name to access the embedded resource.&lt;/returns&gt; public static string GetResourceName(this EmbeddedResourcesql resource) { return resource switch { EmbeddedResourcesql.createDB_sql =&gt; &quot;EmbedDemo.sql.createDB.sql&quot;, _ =&gt; throw new InvalidOperationException(), }; } } /// &lt;summary&gt; /// Auto-generated enumeration for all embedded resources in the assembly. /// &lt;/summary&gt; public enum EmbeddedResource { /// &lt;summary&gt; /// Represents the embedded resource 'sql.createDB.sql'. /// &lt;/summary&gt; sql_createDB_sql, } /// &lt;summary&gt; /// Auto-generated enumeration for all embedded resources in 'sql'. /// &lt;/summary&gt; public enum EmbeddedResourcesql { /// &lt;summary&gt; /// Represents the embedded resource 'createDB.sql' in sql. /// &lt;/summary&gt; createDB_sql, } #nullable restore   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#download-example-net--c","content":" tip Download Example project Chorn.EmbeddedResourceAccessGenerator   ","version":"Next","tagName":"h3"},{"title":"Share Chorn.EmbeddedResourceAccessGenerator​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#share-chornembeddedresourceaccessgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Chorn.EmbeddedResourceAccessGenerator by Christoph Hornung","url":"/RSCG_Examples/v2/docs/Chorn.EmbeddedResourceAccessGenerator#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"Com by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Com","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#info","content":" info Name: Com Provides types that support COM interop and platform invoke services. Commonly Used Types: System.Runtime.InteropServices.GCHandle System.Runtime.InteropServices.GuidAttribute System.Runtime.InteropServices.COMException System.DllNotFoundException System.Runtime.InteropServices.DllImportAttribute Author: Microsoft NuGet:https://www.nuget.org/packages/System.Runtime.InteropServices/ You can find more details at https://learn.microsoft.com/en-us/dotnet/standard/native-interop/comwrappers-source-generation Source: https://github.com/dotnet/runtime  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#original-readme","content":" note .NET Runtime What is .NET?How can I contribute?Reporting security issues and security bugsFiling issuesUseful Links.NET FoundationLicense This repo contains the code to build the .NET runtime, libraries and shared host (dotnet) installers for all supported platforms, as well as the sources to .NET runtime and libraries. What is .NET?​ Official Starting Page: (https://dotnet.microsoft.com) How to use .NET (with VS, VS Code, command-line CLI) Install official releasesInstall daily buildsDocumentation (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) Deploying apps Supported OS versions RoadmapReleases How can I contribute?​ We welcome contributions! Many people all over the world have helped make this project better. Contributing explains what kinds of contributions we welcomeWorkflow Instructions explains how to build and testGet Up and Running on .NET Core explains how to get nightly builds of the runtime and its libraries to test them in your own projects. Reporting security issues and security bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) secure@microsoft.com. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's Security doc. Also see info about related Microsoft .NET Core and ASP.NET Core Bug Bounty Program. Filing issues​ This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the dotnet binary (sometimes known as the muxer) and the installation of the .NET runtime and libraries. For other issues, please file them to their appropriate sibling repos. We have links to many of them on our new issue page. Useful Links​ .NET Core source index / .NET Framework source indexAPI Reference docs.NET API Catalog (incl. APIs from daily builds and API usage info)API docs writing guidelines - useful when writing /// comments.NET Discord Server - a place to discuss the development of .NET and its ecosystem .NET Foundation​ .NET Runtime is a .NET Foundation project. There are many .NET related projects on GitHub. .NET home repo - links to 100s of .NET projects, from Microsoft and the community.ASP.NET Core home - the best place to start learning about ASP.NET Core. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. General .NET OSS discussions: .NET Foundation Discussions License​ .NET (including the runtime repo) is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#about","content":" note Generating Com Declarations  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyShell.cs This is the CSharp Project that references Com &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt; &lt;!-- &lt;PackageReference Include=&quot;System.Runtime.InteropServices&quot; /&gt; --&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  test.IShellExecute.cs // &lt;auto-generated /&gt; #pragma warning disable CS0612, CS0618 file unsafe class InterfaceInformation : global::System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType { public static global::System.Guid Iid { get; } = new(new global::System.ReadOnlySpan&lt;byte&gt;(new byte[] { 249, 20, 2, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 70 })); private static void** _vtable; public static void** ManagedVirtualMethodTable =&gt; _vtable != null ? _vtable : (_vtable = InterfaceImplementation.CreateManagedVirtualFunctionTable()); } [global::System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute] file unsafe partial interface InterfaceImplementation : global::test.IShellExecute { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Interop.ComInterfaceGenerator&quot;, &quot;8.0.12.31117&quot;)] [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute] nint global::test.IShellExecute.ShellExecute(nint hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, int nShowCmd) { var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::test.IShellExecute)); byte* __lpOperation_native = default; byte* __lpFile_native = default; byte* __lpParameters_native = default; byte* __lpDirectory_native = default; nint __retVal = default; int __invokeRetVal = default; // Setup - Perform required setup. scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __lpDirectory_native__marshaller = new(); scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __lpParameters_native__marshaller = new(); scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __lpFile_native__marshaller = new(); scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __lpOperation_native__marshaller = new(); try { // Marshal - Convert managed data to native data. __lpDirectory_native__marshaller.FromManaged(lpDirectory, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]); __lpParameters_native__marshaller.FromManaged(lpParameters, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]); __lpFile_native__marshaller.FromManaged(lpFile, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]); __lpOperation_native__marshaller.FromManaged(lpOperation, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]); { // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned. __lpDirectory_native = __lpDirectory_native__marshaller.ToUnmanaged(); __lpParameters_native = __lpParameters_native__marshaller.ToUnmanaged(); __lpFile_native = __lpFile_native__marshaller.ToUnmanaged(); __lpOperation_native = __lpOperation_native__marshaller.ToUnmanaged(); __invokeRetVal = ((delegate* unmanaged[MemberFunction]&lt;void*, nint, byte*, byte*, byte*, byte*, int, nint*, int&gt; )__vtable_native[3])(__this, hwnd, __lpOperation_native, __lpFile_native, __lpParameters_native, __lpDirectory_native, nShowCmd, &amp;__retVal); } // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call. global::System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal); global::System.GC.KeepAlive(this); } finally { // CleanupCallerAllocated - Perform cleanup of caller allocated resources. __lpDirectory_native__marshaller.Free(); __lpParameters_native__marshaller.Free(); __lpFile_native__marshaller.Free(); __lpOperation_native__marshaller.Free(); } return __retVal; } } file unsafe partial interface InterfaceImplementation { [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })] internal static int ABI_ShellExecute(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native, nint hwnd, byte* __lpOperation_native, byte* __lpFile_native, byte* __lpParameters_native, byte* __lpDirectory_native, int nShowCmd, nint* __invokeRetValUnmanaged__param) { global::test.IShellExecute @this = default; string lpOperation = default; string lpFile = default; string lpParameters = default; string lpDirectory = default; ref nint __invokeRetValUnmanaged = ref *__invokeRetValUnmanaged__param; nint __invokeRetVal = default; int __retVal = default; try { // Unmarshal - Convert native data to managed data. lpDirectory = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__lpDirectory_native); lpParameters = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__lpParameters_native); lpFile = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__lpFile_native); lpOperation = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__lpOperation_native); @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance&lt;global::test.IShellExecute&gt;(__this_native); __invokeRetVal = @this.ShellExecute(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd); // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call. __retVal = 0; // S_OK // Marshal - Convert managed data to native data. __invokeRetValUnmanaged = __invokeRetVal; } catch (global::System.Exception __exception) { __retVal = global::System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller&lt;int&gt;.ConvertToUnmanaged(__exception); } return __retVal; } } file unsafe partial interface InterfaceImplementation { internal static void** CreateManagedVirtualFunctionTable() { void** vtable = (void**)global::System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(typeof(global::test.IShellExecute), sizeof(void*) * 4); { nint v0, v1, v2; global::System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(out v0, out v1, out v2); vtable[0] = (void*)v0; vtable[1] = (void*)v1; vtable[2] = (void*)v2; } { vtable[3] = (void*)(delegate* unmanaged[MemberFunction]&lt;global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint, byte*, byte*, byte*, byte*, int, nint*, int&gt; )&amp;ABI_ShellExecute; } return vtable; } } namespace test { [global::System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute&lt;InterfaceInformation, InterfaceImplementation&gt;] public partial interface IShellExecute { } } namespace test { public partial interface IShellExecute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#download-example-net--c-","content":" tip Download Example project Com   ","version":"Next","tagName":"h3"},{"title":"Share Com​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#share-com","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Com  ","version":"Next","tagName":"h3"},{"title":"In the same category (WinAPI) - 2 other generators​","type":1,"pageTitle":"Com by Microsoft","url":"/RSCG_Examples/v2/docs/Com#in-the-same-category-winapi---2-other-generators","content":" Microsoft.Windows.CsWin32​  NativeObjects​ ","version":"Next","tagName":"h3"},{"title":"CommonCodeGenerator by yamaokunousausa","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#info","content":" info Name: CommonCodeGenerator Common code generator. Author: yamaokunousausa NuGet:https://www.nuget.org/packages/CommonCodeGenerator/ You can find more details at https://github.com/usausa/common-code-generator Source: https://github.com/usausa/common-code-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#original-readme","content":" note CommonCodeGenerator Reference​ Add reference to CommonCodeGenerator and CommonCodeGenerator.SourceGenerator to csproj. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;CommonCodeGenerator&quot; Version=&quot;0.2.0&quot; /&gt; &lt;PackageReference Include=&quot;CommonCodeGenerator.SourceGenerator&quot; Version=&quot;0.2.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; ToString​ Source​ [GenerateToString] public partial class Data { public int Id { get; set; } public string Name { get; set; } = default!; public int[] Values { get; set; } = default!; [IgnoreToString] public int Ignore { get; set; } } Result​ var data = new Data { Id = 123, Name = &quot;xyz&quot;, Values = [1, 2] }; var str = data.ToString(); Assert.Equal(&quot;{ Id = 123, Name = xyz, Values = [1, 2] }&quot;, str);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#about","content":" note Generating ToString from classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references CommonCodeGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;CommonCodeGenerator&quot; Version=&quot;0.2.0&quot; /&gt; &lt;PackageReference Include=&quot;CommonCodeGenerator.SourceGenerator&quot; Version=&quot;0.2.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ToStringData_Person_ToString.g.cs // &lt;auto-generated /&gt; #nullable disable namespace ToStringData { partial class Person { public override string ToString() { var handler = new global::System.Runtime.CompilerServices.DefaultInterpolatedStringHandler(0, 0, default, stackalloc char[256]); handler.AppendLiteral(&quot;Person &quot;); handler.AppendLiteral(&quot;{ &quot;); handler.AppendLiteral(&quot;FirstName = &quot;); handler.AppendFormatted(FirstName); handler.AppendLiteral(&quot;, &quot;); handler.AppendLiteral(&quot;LastName = &quot;); handler.AppendFormatted(LastName); handler.AppendLiteral(&quot; }&quot;); return handler.ToStringAndClear(); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#download-example-net--c","content":" tip Download Example project CommonCodeGenerator   ","version":"Next","tagName":"h3"},{"title":"Share CommonCodeGenerator​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#share-commoncodegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommonCodeGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CommonCodeGenerator by yamaokunousausa","url":"/RSCG_Examples/v2/docs/CommonCodeGenerator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"CodeAnalysis by Feast","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CodeAnalysis","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#info","content":" info Name: CodeAnalysis Auto generate extensions for Microsoft.CodeAnalysis Author: Feast NuGet:https://www.nuget.org/packages/Feast.CodeAnalysis.Literal/ You can find more details at https://github.com/feast107/CodeAnalysis Source: https://github.com/feast107/CodeAnalysis  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#original-readme","content":" note CodeAnalysis 自动生成提供给 SourceGenerator 的扩展 Requires​ PolySharp Supports​ [Literal] Auto generate full qualified string literal for target class if you have a class like [Literal(&quot;Your.Program.Class&quot;)] public class Test { public IEnumerable&lt;string&gt; Name { get; set; } } Then it will generate a class like namespace Your.Program{ public class Class{ public static string Text = &quot;&quot;&quot; public class Test { public global::System.Collection.Generic.IEnumerable&lt;string&gt; Name { get; set; } } &quot;&quot;&quot;; } } Feast.CompileTime class Assembly : System.Reflection.Assembly; class Module : System.Reflection.Module; class Type : System.Type; class MemberInfo : System.Reflection.MemberInfo; class MethodInfo : System.Reflection.MethodInfo; class EventInfo : System.Reflection.EventInfo; class FieldInfo : System.Reflection.FieldInfo; class PropertyInfo : System.Reflection.PropertyInfo; class ParameterInfo : System.Reflection.ParameterInfo; class ConstructorInfo : System.Reflection.ConstructorInfo; Comment​ 我们需要 源代码生成器 因为我们需要生成更多的代码 我们需要 源代码生成器 的 源代码生成器 因为 源代码生成器 现在还不够强大 我们需要 源代码生成器 的 源代码生成器 的 源代码生成器 因为 源代码生成器 的 源代码生成器 现在还不能自举 由此可见 道生一，一生二，二生三，三生万物 总结 玩源生玩的。  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#about","content":" note Code to string literal. Unfortunately, it carries also some other CodeAnalysis generated files, which are not so useful.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references CodeAnalysis &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Feast.CodeAnalysis.Literal&quot; Version=&quot;0.1.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  LiteralAttribute.g.csNamespace_Andrei.Class_Ignat.g.cs #nullable enable using System; namespace System { [global::System.AttributeUsage(global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct | global::System.AttributeTargets.Interface | global::System.AttributeTargets.Enum | global::System.AttributeTargets.Delegate)] public class LiteralAttribute : Attribute { public string? FieldName { get; set; } public LiteralAttribute(string belongToFullyQualifiedClassName){ } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#download-example-net--c","content":" tip Download Example project CodeAnalysis   ","version":"Next","tagName":"h3"},{"title":"Share CodeAnalysis​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#share-codeanalysis","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CodeAnalysis  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"CodeToString\" has the following generators:​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#category-codetostring-has-the-following-generators","content":" 1 CodeAnalysis  2 RossLean.StringificationGenerator  3 SourceGenerator.Helper.CopyCode  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CodeAnalysis by Feast","url":"/RSCG_Examples/v2/docs/CodeAnalysis#see-category","content":" CodeToString ","version":"Next","tagName":"h3"},{"title":"CommandLine by DotMake","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CommandLine","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#info","content":" info Name: CommandLine Declarative syntax for System.CommandLine via attributes for easy, fast, strongly-typed (no reflection) usage. Includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments. Author: DotMake NuGet:https://www.nuget.org/packages/DotMake.CommandLine/ You can find more details at https://github.com/dotmake-build/command-line Source: https://github.com/dotmake-build/command-line  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#original-readme","content":" note DotMake Command-Line System.CommandLine is a very good parser but you need a lot of boilerplate code to get going and the API is hard to discover. This becomes complicated to newcomers and also you would have a lot of ugly code in your Program.cs to maintain. What if you had an easy class-based layer combined with a good parser? DotMake.CommandLine is a library which provides declarative syntax forSystem.CommandLinevia attributes for easy, fast, strongly-typed (no reflection) usage. The library includes includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments. Supportstrimming,AOT compilation anddependency injection! Getting started​ Install the library to your console app project with NuGet. In your project directory, via dotnet cli: dotnet add package DotMake.CommandLine or in Visual Studio Package Manager Console: PM&gt; Install-Package DotMake.CommandLine Prerequisites​ .NET 7.0 and later project or .NET Standard 2.0 and later project. Note that .NET Framework 4.7.2+ or .NET Core 2.0 to NET 6.0 projects can reference our netstandard2.0 target (automatic in nuget). If your target framework is below net5.0, you also need &lt;LangVersion&gt;9.0&lt;/LangVersion&gt; tag (minimum) in your .csproj file.Visual Studio 2022 v17.3+ or .NET SDK 6.0.407+ (when building via dotnet cli). Our incremental source generator requires performance features added first in these versions.Usually a console app project but you can also use a class library project which will be consumed later. Usage​ Delegate-based model​ Create a CLI App with DotMake.Commandline in seconds! In Program.cs, add this simple code: using System; using DotMake.CommandLine; Cli.Run(([CliArgument]string arg1, bool opt1) =&gt; { Console.WriteLine($@&quot;Value for {nameof(arg1)} parameter is '{arg1}'&quot;); Console.WriteLine($@&quot;Value for {nameof(opt1)} parameter is '{opt1}'&quot;); }); And that's it! You now have a fully working command-line app: Summary​ Pass a delegate (a parenthesized lambda expression or a method reference) which has parameters that represent your options and arguments, to Cli.Run.A parameter is by default considered as a CLI option but you can; Mark a parameter with CliArgument attribute to make it a CLI argument and specify settings (see CliArgumentAttribute docs for more info).Mark a parameter with CliOption attribute to specify CLI option settings (see CliOptionAttribute docs for more info).Mark the delegate itself with CliCommand attribute to specify CLI command settings (see CliCommandAttribute docs for more info).Note that for being able to mark a parameter with an attribute in an anonymous lambda function, if your target framework is below net6.0, you also need &lt;LangVersion&gt;10.0&lt;/LangVersion&gt; tag (minimum) in your .csproj file. Set a default value for a parameter if you want it to be optional (not required to be specified on the command-line).Your delegate can be async.Your delegate can have a return type void or int and if it's async Task or Task&lt;int&gt;. Class-based model​ While delegate-based model above is useful for simple apps, for more complex apps, you should use the class-based model because you can have sub-commands and command inheritance. In Program.cs, add this simple code: using System; using DotMake.CommandLine; // Add this single line to run you app! Cli.Run&lt;RootCliCommand&gt;(args); // Create a simple class like this to define your root command: [CliCommand(Description = &quot;A root cli command&quot;)] public class RootCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run() { Console.WriteLine($@&quot;Handler for '{GetType().FullName}' is run:&quot;); Console.WriteLine($@&quot;Value for {nameof(Option1)} property is '{Option1}'&quot;); Console.WriteLine($@&quot;Value for {nameof(Argument1)} property is '{Argument1}'&quot;); Console.WriteLine(); } } And that's it! You now have a fully working command-line app. You just specify the name of your class which represents your root command to Cli.Run&lt;&gt; method and everything is wired. args is the string array typically passed to a program. This is usually the special variable args available in Program.cs (new style with top-level statements) or the string array passed to the program's Main method (old style). We also have method signatures which does not require args, for example you can also call Cli.Run&lt;RootCliCommand&gt;() and in that case args will be retrieved automatically from the current process via Cli.GetArgs(). If you want to go async, just use this: await Cli.RunAsync&lt;RootCliCommand&gt;(args); To handle exceptions, you just use a try-catch block: try { Cli.Run&lt;RootCliCommand&gt;(args); } catch (Exception e) { Console.WriteLine(@&quot;Exception in main: {0}&quot;, e.Message); } System.CommandLine, by default overtakes your exceptions that are thrown in command handlers (even if you don't set an exception handler explicitly) but DotMake.CommandLine, by default allows the exceptions to pass through. However if you wish, you can easily use the default exception handler by passing a CliSettings instance like below. Default exception handler prints the exception in red color to console: Cli.Run&lt;RootCliCommand&gt;(args, new CliSettings { EnableDefaultExceptionHandler = true }); If you need to simply parse the command-line arguments without invocation, use this: var parseResult = Cli.Parse&lt;RootCliCommand&gt;(args); var rootCliCommand = parseResult.Bind&lt;RootCliCommand&gt;(); If you need to examine the parse result, such as errors: var parseResult = Cli.Parse&lt;RootCliCommand&gt;(args); if (parseResult.Errors.Count &gt; 0) { } Summary​ Mark the class with CliCommand attribute to make it a CLI command (see CliCommandAttribute docs for more info). Mark a property with CliOption attribute to make it a CLI option (see CliOptionAttribute docs for more info). Mark a property with CliArgument attribute to make it a CLI argument (see CliArgumentAttribute docs for more info). Add a method with name Run or RunAsync to make it the handler for the CLI command. The method can have one of the following signatures: void Run() int Run() async Task RunAsync() async Task&lt;int&gt; RunAsync() Optionally the method signature can have a CliContext parameter in case you need to access it: Run(CliContext context) RunAsync(CliContext context) The signatures which return int value, sets the ExitCode of the app. If no handler method is provided, then by default it will show help for the command. This can be also controlled manually by extension method ShowHelp in CliContext. Other extension methods IsEmptyCommand and ShowValues are also useful. Call Cli.Run&lt;&gt; orCli.RunAsync&lt;&gt; method with your class name to run your CLI app (see Cli docs for more info). For best practice, create a subfolder named Commands in your project and put your command classes there so that they are easy to locate and maintain in the future. Commands​ A command in command-line input is a token that specifies an action or defines a group of related actions. For example: In dotnet run, run is a command that specifies an action.In dotnet tool install, install is a command that specifies an action, and tool is a command that specifies a group of related commands. There are other tool-related commands, such as tool uninstall, tool list, and tool update. Root commands​ The root command is the one that specifies the name of the app's executable. For example, the dotnet command specifies the dotnet.exe executable. Subcommands​ Most command-line apps support subcommands, also known as verbs. For example, the dotnet command has a run subcommand that you invoke by entering dotnet run. Subcommands can have their own subcommands. In dotnet tool install, install is a subcommand of tool. Command Hierarchy​ Defining sub-commands in DotMake.Commandline is very easy. We simply use nested classes to create a hierarchy. Just make sure you apply CliCommand attribute to the nested classes as well. Command hierarchy in below example is: RootWithNestedChildrenCliCommand -&gt; Level1SubCliCommand -&gt; Level2SubCliCommand [CliCommand(Description = &quot;A root cli command with nested children&quot;)] public class RootWithNestedChildrenCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } [CliCommand(Description = &quot;A nested level 1 sub-command&quot;)] public class Level1SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } [CliCommand(Description = &quot;A nested level 2 sub-command&quot;)] public class Level2SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } } } } Another way to create hierarchy between commands, especially if you want to use standalone classes, is to use Parent property of CliCommand attribute to specify typeof parent class. Consider you have this root command: [CliCommand(Description = &quot;A root cli command with external children and one nested child and testing settings inheritance&quot;)] public class RootWithExternalChildrenCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } [CliCommand( Description = &quot;A nested level 1 sub-command with custom settings, throws test exception&quot;, NameCasingConvention = CliNameCasingConvention.SnakeCase, NamePrefixConvention = CliNamePrefixConvention.ForwardSlash, ShortFormPrefixConvention = CliNamePrefixConvention.ForwardSlash )] public class Level1SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run() { throw new Exception(&quot;This is a test exception from Level1SubCliCommand&quot;); } } } Command hierarchy in below example is: RootWithExternalChildrenCliCommand -&gt; ExternalLevel1SubCliCommand -&gt; Level2SubCliCommand [CliCommand( Description = &quot;An external level 1 sub-command&quot;, Parent = typeof(RootWithExternalChildrenCliCommand) )] public class ExternalLevel1SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } [CliCommand(Description = &quot;A nested level 2 sub-command&quot;)] public class Level2SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } } } Command hierarchy in below example is: RootWithExternalChildrenCliCommand -&gt; Level1SubCliCommand -&gt; ExternalLevel2SubCliCommand -&gt; Level3SubCliCommand [CliCommand( Description = &quot;An external level 2 sub-command&quot;, Parent = typeof(RootWithExternalChildrenCliCommand.Level1SubCliCommand), NameCasingConvention = CliNameCasingConvention.SnakeCase, NamePrefixConvention = CliNamePrefixConvention.ForwardSlash, ShortFormPrefixConvention = CliNamePrefixConvention.ForwardSlash )] public class ExternalLevel2SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } [CliCommand(Description = &quot;A nested level 3 sub-command&quot;)] public class Level3SubCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run(CliContext context) { context.ShowValues(); } } } The class that CliCommand attribute is applied to, will be a root command if the class is not a nested class and Parentproperty is not set.will be a sub command if the class is a nested class or Parent property is set. Command Inheritance​ When you have repeating/common options and arguments for your commands, you can define them once in a base class and then share them by inheriting that base class in other command classes. Interfaces are also supported ! [CliCommand] public class InheritanceCliCommand : CredentialCommandBase, IDepartmentCommand { public string Department { get; set; } = &quot;Accounting&quot;; } public abstract class CredentialCommandBase { [CliOption(Description = &quot;Username of the identity performing the command&quot;)] public string Username { get; set; } = &quot;admin&quot;; [CliOption(Description = &quot;Password of the identity performing the command&quot;)] public string Password { get; set; } public void Run() { Console.WriteLine($@&quot;I am {Username}&quot;); } } public interface IDepartmentCommand { [CliOption(Description = &quot;Department of the identity performing the command (interface)&quot;)] string Department { get; set; } } The property attribute and the property initializer from the most derived class in the hierarchy will be used (they will override the base ones). The command handler (Run or RunAsync) will be also inherited. So in the above example, InheritanceCliCommand inherits options Username, Password from a base class and option Department from an interface. Note that the property initializer for Department is in the derived class, so that default value will be used. The properties for CliCommand attribute (see CliCommandAttribute docs for more info): NameDescriptionAliasesHiddenParentTreatUnmatchedTokensAsErrorsNameCasingConvention (inherited by child options, child arguments and subcommands)NamePrefixConvention (inherited by child options and subcommands)ShortFormPrefixConvention (inherited by child options and subcommands)ShortFormAutoGenerate (inherited by child options and subcommands) Options​ An option is a named parameter that can be passed to a command. POSIX CLIs typically prefix the option name with two hyphens (--). The following example shows two options: dotnet tool update dotnet-suggest --verbosity quiet --global ^---------^ ^------^ As this example illustrates, the value of the option may be explicit (quiet for --verbosity) or implicit (nothing follows --global). Options that have no value specified are typically Boolean parameters that default to true if the option is specified on the command line. For some Windows command-line apps, you identify an option by using a leading slash (/) with the option name. For example: msbuild /version ^------^ Both POSIX and Windows prefix conventions are supported. When manually setting a name (overriding decorated property's name), you should specify the option name including the prefix (e.g. --option, -option or /option) The properties for CliOption attribute (see CliOptionAttribute docs for more info): NameDescriptionAliasesHelpNameHiddenRequiredRecursiveArityAllowedValuesAllowMultipleArgumentsPerTokenValidationRulesValidationPatternValidationMessage Arguments​ An argument is a value passed to an option or a command. The following examples show an argument for the verbosity option and an argument for the build command. dotnet tool update dotnet-suggest --verbosity quiet --global ^---^ dotnet build myapp.csproj ^----------^ Arguments can have default values that apply if no argument is explicitly provided. For example, many options are implicitly Boolean parameters with a default of true when the option name is in the command line. The following command-line examples are equivalent: dotnet tool update dotnet-suggest --global ^------^ dotnet tool update dotnet-suggest --global true ^-----------^ Some options have required arguments. For example in the .NET CLI, --output requires a folder name argument. If the argument is not provided, the command fails. Arguments can have expected types, and System.CommandLine displays an error message if an argument can't be parsed into the expected type. For example, the following command errors because &quot;silent&quot; isn't one of the valid values for --verbosity: dotnet build --verbosity silent Cannot parse argument 'silent' for option '-v' as expected type 'Microsoft.DotNet.Cli.VerbosityOptions'. Did you mean one of the following? Detailed Diagnostic Minimal Normal Quiet The properties for CliArgument attribute (see CliArgumentAttribute docs for more info): NameDescriptionHelpNameHiddenRequiredArityAllowedValuesValidationRulesValidationPatternValidationMessage Model binding​ When the command handler is run, the properties for CLI options and arguments will be already populated and bound from values passed in the command-line. If no matching value is passed, the property will have its default value if it has one or an error will be displayed if it's a required option/argument and it was not specified on the command-line. An option/argument will be considered required when There is no property initializer and the property type is a reference type (e.g. public string Arg { get; set; }).string is a reference type which has a null as the default value but bool and enum are value types which already have non-null default values. Nullable&lt;T&gt; is a reference type, e.g. bool?.There is a property initializer, but it's initialized with null or null! (SuppressNullableWarningExpression) (e.g. public string Arg { get; set; } = null!;).If it's forced via attribute property Required (e.g. [CliArgument(Required = true)]).If it's forced via required modifier (e.g. public required string Opt { get; set; }). Note that for being able to use required modifier, if your target framework is below net7.0, you also need &lt;LangVersion&gt;11.0&lt;/LangVersion&gt; tag (minimum) in your .csproj file (our source generator supplies the polyfills automatically as long as you set C# language version to 11). An option/argument will be considered optional when There is no property initializer (e.g. public bool Opt { get; set; }) but the property type is a value type which already have non-null default value.There is a property initializer, and it's not initialized with null or null! (SuppressNullableWarningExpression) (e.g. public string Arg { get; set; } = &quot;Default&quot;;).If it's forced via attribute property Required (e.g. [CliArgument(Required = false)]). When you run, TestApp.exe NewValueForArgument1 or (note the double hyphen/dash which allows dotnet run to pass arguments to our actual application): dotnet run -- NewValueForArgument1 You see this result: Handler for 'TestApp.Commands.RootCliCommand' is run: Value for Option1 property is 'DefaultForOption1' Value for Argument1 property is 'NewValueForArgument1' Supported types​ Note that you can have a specific type (other than string) for a property which a CliOption or CliArgument attribute is applied to, for example these properties will be parsed and bound/populated automatically: [CliCommand] public class WriteFileCommand { [CliArgument] public FileInfo OutputFile { get; set; } [CliOption] public List&lt;string&gt; Lines { get; set; } } The following types for properties are supported: Booleans (flags) - If true or false is passed for an option having a bool argument, it is parsed and bound as expected. But an option whose argument type is bool doesn't require an argument to be specified. The presence of the option token on the command line, with no argument following it, results in a value of true. Enums - The values are bound by name, and the binding is case insensitive Common CLR types: FileSystemInfo, FileInfo, DirectoryInfoint, long, short, uint, ulong, ushortdouble, float, decimalbyte, sbyteDateTime, DateTimeOffset, TimeSpan, DateOnly, TimeOnlyGuidUri, IPAddress, IPEndPoint Any type with a public constructor or a static Parse method with a string parameter (other parameters, if any, should be optional) - These types can be bound/parsed automatically even if they are wrapped with Enumerable or Nullable type. [CliCommand] public class ArgumentConverterCliCommand { [CliOption] public ClassWithConstructor Opt { get; set; } [CliOption(AllowMultipleArgumentsPerToken = true)] public ClassWithConstructor[] OptArray { get; set; } [CliOption] public CustomStruct? OptNullable { get; set; } [CliOption] public IEnumerable&lt;ClassWithConstructor&gt; OptEnumerable { get; set; } [CliOption] public List&lt;ClassWithConstructor&gt; OptList { get; set; } [CliOption] public CustomList&lt;ClassWithConstructor&gt; OptCustomList { get; set; } [CliArgument] public IEnumerable&lt;ClassWithParser&gt; Arg { get; set; } } public class ClassWithConstructor { private readonly string value; public ClassWithConstructor(string value) { this.value = value; } public override string ToString() { return value; } } public class ClassWithParser { private string value; public override string ToString() { return value; } public static ClassWithParser Parse(string value) { var instance = new ClassWithParser(); instance.value = value; return instance; } } public struct CustomStruct { private readonly string value; public CustomStruct(string value) { this.value = value; } public override string ToString() { return value; } } Arrays, lists, collections: Any type that implements IEnumerable&lt;T&gt; and has a public constructor with a IEnumerable&lt;T&gt; or IList&lt;T&gt; parameter (other parameters, if any, should be optional). CLR collection types already satisfy this condition. If type is generic IEnumerable&lt;T&gt;, IList&lt;T&gt;, ICollection&lt;T&gt; interfaces itself, array T[] will be used to create an instance. If type is non-generic IEnumerable, IList, ICollection interfaces itself, array string[] will be used to create an instance. [CliCommand] public class EnumerableCliCommand { [CliOption] public IEnumerable&lt;int&gt; OptEnumerable { get; set; } [CliOption] public List&lt;string&gt; OptList { get; set; } [CliOption(AllowMultipleArgumentsPerToken = true)] public FileAccess[] OptEnumArray { get; set; } [CliOption] public Collection&lt;string&gt; OptCollection { get; set; } [CliOption] public HashSet&lt;string&gt; OptHashSet { get; set; } [CliOption] public Queue&lt;FileInfo&gt; OptQueue { get; set; } [CliOption] public CustomList&lt;string&gt; OptCustomList { get; set; } [CliArgument] public IList ArgIList { get; set; } } public class CustomList&lt;T&gt; : List&lt;T&gt; { public CustomList(IEnumerable&lt;T&gt; items) : base(items) { } } Validation​ In [CliOption] and [CliArgument] attributes;ValidationRules property allows setting predefined validation rules such as CliValidationRules.ExistingFileCliValidationRules.NonExistingFileCliValidationRules.ExistingDirectoryCliValidationRules.NonExistingDirectoryCliValidationRules.ExistingFileOrDirectoryCliValidationRules.NonExistingFileOrDirectoryCliValidationRules.LegalPathCliValidationRules.LegalFileNameCliValidationRules.LegalUriCliValidationRules.LegalUrl Validation rules can be combined via using bitwise 'or' operator(| in C#). ValidationPattern property allows setting a regular expression pattern for custom validation, and ValidationMessage property allows setting a custom error message to show when ValidationPattern does not match. [CliCommand] public class ValidationCliCommand { [CliOption(Required = false, ValidationRules = CliValidationRules.ExistingFile)] public FileInfo OptFile1 { get; set; } [CliOption(Required = false, ValidationRules = CliValidationRules.NonExistingFile | CliValidationRules.LegalPath)] public string OptFile2 { get; set; } [CliOption(Required = false, ValidationPattern = @&quot;(?i)^[a-z]+$&quot;)] public string OptPattern1 { get; set; } [CliOption(Required = false, ValidationPattern = @&quot;(?i)^[a-z]+$&quot;, ValidationMessage = &quot;Custom error message&quot;)] public string OptPattern2 { get; set; } [CliOption(Required = false, ValidationRules = CliValidationRules.LegalUrl)] public string OptUrl { get; set; } [CliOption(Required = false, ValidationRules = CliValidationRules.LegalUri)] public string OptUri { get; set; } [CliArgument(Required = false, ValidationRules = CliValidationRules.LegalFileName)] public string OptFileName { get; set; } public void Run(CliContext context) { context.ShowValues(); } } Dependency Injection​ Commands can have injected dependencies, this is supported via Microsoft.Extensions.DependencyInjection package (version &gt;= 6.0.0). In your project directory, via dotnet cli: dotnet add package Microsoft.Extensions.DependencyInjection or in Visual Studio Package Manager Console: PM&gt; Install-Package Microsoft.Extensions.DependencyInjection When the source generator detects that your project has reference to Microsoft.Extensions.DependencyInjection, it will generate extension methods for supporting dependency injection. For example, you can now add your services with the extension method Cli.Ext.ConfigureServices: using DotMake.CommandLine; using Microsoft.Extensions.DependencyInjection; Cli.Ext.ConfigureServices(services =&gt; { services.AddTransient&lt;TransientClass&gt;(); services.AddScoped&lt;ScopedClass&gt;(); services.AddSingleton&lt;SingletonClass&gt;(); }); Cli.Run&lt;RootCliCommand&gt;(); Then let them be injected to your command class automatically by providing a constructor with the required services: [CliCommand(Description = &quot;A root cli command with dependency injection&quot;)] public class RootCliCommand { private readonly TransientClass transientDisposable; private readonly ScopedClass scopedDisposable; private readonly SingletonClass singletonDisposable; public RootCliCommand( TransientClass transientDisposable, ScopedClass scopedDisposable, SingletonClass singletonDisposable ) { this.transientDisposable = transientDisposable; this.scopedDisposable = scopedDisposable; this.singletonDisposable = singletonDisposable; } [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run() { Console.WriteLine($@&quot;Handler for '{GetType().FullName}' is run:&quot;); Console.WriteLine($@&quot;Value for {nameof(Option1)} property is '{Option1}'&quot;); Console.WriteLine($@&quot;Value for {nameof(Argument1)} property is '{Argument1}'&quot;); Console.WriteLine(); Console.WriteLine($&quot;Instance for {transientDisposable.Name} is available&quot;); Console.WriteLine($&quot;Instance for {scopedDisposable.Name} is available&quot;); Console.WriteLine($&quot;Instance for {singletonDisposable.Name} is available&quot;); Console.WriteLine(); } } public sealed class TransientClass : IDisposable { public string Name =&gt; nameof(TransientClass); public void Dispose() =&gt; Console.WriteLine($&quot;{nameof(TransientClass)}.Dispose()&quot;); } public sealed class ScopedClass : IDisposable { public string Name =&gt; nameof(ScopedClass); public void Dispose() =&gt; Console.WriteLine($&quot;{nameof(ScopedClass)}.Dispose()&quot;); } public sealed class SingletonClass : IDisposable { public string Name =&gt; nameof(SingletonClass); public void Dispose() =&gt; Console.WriteLine($&quot;{nameof(SingletonClass)}.Dispose()&quot;); } Help output​ When you run the app via TestApp.exe -? in project output path (e.g. in TestApp\\bin\\Debug\\net7.0) or dotnet run -- -? in project directory (e.g. in TestApp) (note the double hyphen/dash which allows dotnet run to pass arguments to our actual application) You see this usage help: DotMake Command-Line TestApp v1.6.0 Copyright © 2023-2024 DotMake A root cli command Usage: TestApp &lt;argument-1&gt; [options] Arguments: &lt;argument-1&gt; Description for Argument1 [required] Options: -o, --option-1 &lt;option-1&gt; Description for Option1 [default: DefaultForOption1] -v, --version Show version information -?, -h, --help Show help and usage information First line comes from AssemblyProductAttribute or AssemblyName. Version comes from AssemblyInformationalVersionAttribute or AssemblyFileVersionAttribute or AssemblyVersionAttribute. Second line comes from AssemblyCopyrightAttribute. Third line comes from CliCommand.Description or AssemblyDescriptionAttribute. Note, how command/option/argument names, descriptions and default values are automatically populated. By default, command/option/argument names are generated as follows; First the following suffixes are stripped out from class and property names: For commands: &quot;RootCliCommand&quot;, &quot;RootCommand&quot;, &quot;SubCliCommand&quot;, &quot;SubCommand&quot;, &quot;CliCommand&quot;, &quot;Command&quot;, &quot;Cli&quot;For options: &quot;RootCommandOption&quot;, &quot;SubCliCommandOption&quot;, &quot;SubCommandOption&quot;, &quot;CliCommandOption&quot;, &quot;CommandOption&quot;, &quot;CliOption&quot;, &quot;Option&quot;For arguments: &quot;RootCliCommandArgument&quot;, &quot;RootCommandArgument&quot;, &quot;SubCliCommandArgument&quot;, &quot;SubCommandArgument&quot;, &quot;CliCommandArgument&quot;, &quot;CommandArgument&quot;, &quot;CliArgument&quot;, &quot;Argument&quot; Then the names are converted to kebab-case, this can be changed by setting NameCasingConvention property of the CliCommand attribute to one of the following values: CliNameCasingConvention.NoneCliNameCasingConvention.LowerCaseCliNameCasingConvention.UpperCaseCliNameCasingConvention.TitleCaseCliNameCasingConvention.PascalCaseCliNameCasingConvention.CamelCaseCliNameCasingConvention.KebabCaseCliNameCasingConvention.SnakeCase For options, double hyphen/dash prefix is added to the name (e.g. --option), this can be changed by setting NamePrefixConvention (default: DoubleHyphen) property of the CliCommand attribute to one of the following values: CliNamePrefixConvention.SingleHyphenCliNamePrefixConvention.DoubleHyphenCliNamePrefixConvention.ForwardSlash For options, short-form alias with first letter (e.g. -o) is automatically added. This can be changed by setting ShortFormAutoGenerate (default: true) and ShortFormPrefixConvention (default: SingleHyphen) properties of the CliCommand attribute. For example, change the name casing and prefix convention: using System; using DotMake.CommandLine; [CliCommand( Description = &quot;A cli command with snake_case name casing and forward slash prefix conventions&quot;, NameCasingConvention = CliNameCasingConvention.SnakeCase, NamePrefixConvention = CliNamePrefixConvention.ForwardSlash, ShortFormPrefixConvention = CliNamePrefixConvention.ForwardSlash )] public class RootSnakeSlashCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } public void Run() { Console.WriteLine($@&quot;Handler for '{GetType().FullName}' is run:&quot;); Console.WriteLine($@&quot;Value for {nameof(Option1)} property is '{Option1}'&quot;); Console.WriteLine($@&quot;Value for {nameof(Argument1)} property is '{Argument1}'&quot;); Console.WriteLine(); } } When you run the app via TestApp.exe -? or dotnet run -- -?, you see this usage help: DotMake Command-Line TestApp v1.6.0 Copyright © 2023-2024 DotMake A cli command with snake_case name casing and forward slash prefix conventions Usage: TestApp &lt;argument_1&gt; [options] Arguments: &lt;argument_1&gt; Description for Argument1 [required] Options: /o, /option_1 &lt;option_1&gt; Description for Option1 [default: DefaultForOption1] /v, /version Show version information -?, -h, /help Show help and usage information Note how even the default options version and help use the new prefix convention ForwardSlash. By the way, as help is a special option, which allows user to discover your app, we still add short-form aliases with other prefix to prevent confusion. Localization​ Localizing commands, options and arguments is supported. You can specify a nameof operator expression with a resource property (generated by resx) in the attribute's argument (for string types only) and the source generator will smartly use the resource property accessor as the value of the argument so that it can localize at runtime. If the property in the nameof operator expression does not point to a resource property, then the name of that property will be used as usual. The reason we use nameof operator is that attributes in .NET only accept compile-time constants and you get CS0182 error if not, so specifying resource property directly is not possible as it's not a compile-time constant but it's a static property access. [CliCommand(Description = nameof(TestResources.CommandDescription))] internal class LocalizedCliCommand { [CliOption(Description = nameof(TestResources.OptionDescription))] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = nameof(TestResources.ArgumentDescription))] public string Argument1 { get; set; } public void Run() { Console.WriteLine($@&quot;Handler for '{GetType().FullName}' is run:&quot;); Console.WriteLine($@&quot;Value for {nameof(Option1)} property is '{Option1}'&quot;); Console.WriteLine($@&quot;Value for {nameof(Argument1)} property is '{Argument1}'&quot;); Console.WriteLine(); } } Triggering help​ If a command represents a group and not an action, you may want to show help. If Run or RunAsync method is missing in a command class, then by default it will show help. You can also manually trigger help in Run or RunAsync method of a command class via calling CliContext.ShowHelp. For testing a command, other methods CliContext.ShowValues and CliContext.IsEmptyCommand are also useful.ShowValues shows parsed values for current command and its arguments and options. See below example; root command does not have a handler method so it will always show help and sub-command will show help if command is specified without any arguments or option, and it will show (dump) values if not: [CliCommand(Description = &quot;A root cli command&quot;)] public class HelpCliCommand { [CliOption(Description = &quot;Description for Option1&quot;)] public string Option1 { get; set; } = &quot;DefaultForOption1&quot;; [CliArgument(Description = &quot;Description for Argument1&quot;)] public string Argument1 { get; set; } = &quot;DefaultForArgument1&quot;; [CliCommand(Description = &quot;A sub cli command&quot;)] public class SubCliCommand { [CliArgument(Description = &quot;Description for Argument2&quot;)] public string Argument2 { get; set; } = &quot;DefaultForArgument2&quot;; public void Run(CliContext context) { if (context.IsEmptyCommand()) context.ShowHelp(); else context.ShowValues(); } } } Additional documentation​ DotMake Command-Line API docsCommand-line syntax overview for System.CommandLine  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#about","content":" note Generating easy command line applications.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references CommandLine &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;DotMake.CommandLine&quot; Version=&quot;1.8.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  CliCommandAsDelegate_1ra93x8.g.csCliCommandAsDelegate_1ra93x8Builder-6ke4hy4.g.csCliCommandAsDelegate_34pdvjr.g.csCliCommandAsDelegate_34pdvjrBuilder-empvmnm.g.cs // &lt;auto-generated /&gt; // Generated by DotMake.CommandLine.SourceGeneration v1.8.0.0 // Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905 // Generation: 1 namespace GeneratedCode { /// &lt;inheritdoc /&gt; [DotMake.CommandLine.CliCommandAttribute] public class CliCommandAsDelegate_1ra93x8 : DotMake.CommandLine.CliCommandAsDelegateDefinition { /// &lt;inheritdoc /&gt; [DotMake.CommandLine.CliArgumentAttribute] public int idData { get; set; } /// &lt;inheritdoc /&gt; public void Run() { InvokeDelegate ( &quot;1ra93x8&quot;, new object[] { idData, } ); } [System.Runtime.CompilerServices.ModuleInitializerAttribute] internal static void Initialize() { // Register this definition class so that it can be found by the command as delegate hash. Register&lt;GeneratedCode.CliCommandAsDelegate_1ra93x8&gt;(&quot;1ra93x8&quot;); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#download-example-net--c","content":" tip Download Example project CommandLine   ","version":"Next","tagName":"h3"},{"title":"Share CommandLine​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#share-commandline","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommandLine  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CommandLine by DotMake","url":"/RSCG_Examples/v2/docs/CommandLine#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"ConstructorGenerator by Swarley97","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ConstructorGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#info","content":" info Name: ConstructorGenerator Generates constructors for you. Author: Swarley97 NuGet:https://www.nuget.org/packages/ConstructorGenerator/ You can find more details at https://github.com/Swarley97/ConstructorGenerator Source: https://github.com/Swarley97/ConstructorGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#original-readme","content":" note ConstructorGenerator ConstructorGenerator is a C# source generator which generates constructors for you. Installation​ Install the ConstructorGenerator NuGet package. Package Manager Console​ Install-Package ConstructorGenerator .NET CLI​ dotnet add package ConstructorGenerator Getting started​ Prerequisites​ ConstructorGenerator requires C# 9.0 or later. Usage​ Add the [GenerateFullConstructor] attribute to your class or struct and a constructor will be generated. [GenerateFullConstructor] public partial class MyClass { private readonly ILogger _logger; private readonly IDependencyA _dependency; private readonly IDependencyB _dependencyB; } The generated constructor will look like this: public MyClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB) { _logger = logger; _dependency = dependency; _dependencyB = dependencyB; } Rules​ Only for the following members a constructor parameter will be generated Read only fields with no initializerGet only Properties or init only properties with no initializerProperties or fields with the [ConstructorDependency] attribute (this override the rules above) Examples // ignored private readonly IDependency _dependency = new Dependency(); // not-ignored private readonly IDependency _dependency; // not-ignored [ConstructorDependency] private readonly IDependency _dependency = new Dependency(); // ignored private readonly IDependency _dependency { get; } = new Dependency(); // ignored private readonly IDependency _dependency { get; set; } // not-ignored private readonly IDependency _dependency { get; init; } // not-ignored [ConstructorDependency] private readonly IDependency _dependency { get; set; } Ignoring properties and fields​ You can ignore properties and fields by adding the [ExcludeConstructorDependency] attribute to them. [GenerateFullConstructor] public partial class MyClass { private readonly ILogger _logger; private readonly IDependencyA _dependency; [ExcludeConstructorDependency] private readonly IDependencyB _dependencyB; } The generated constructor will look like this: public MyClass(ILogger logger, IDependencyA dependency) { _logger = logger; _dependency = dependency; } Explicitly specifying properties and fields​ You can explicitly specify the properties and fields which should be included in the generated constructor by adding the [ConstructorDependency] attribute to them. This can be useful for the following cases: If you do not want to use the [GenerateFullConstructor] attribute on the class or structIf you want to add additional constructor dependencies which are not included by default (see Rules)If you want to specify it as optional parameter (see Optional parameters) public partial class MyClass { [ConstructorDependency] private readonly ILogger _logger = new NullLogger(); [ConstructorDependency] private readonly IDependencyA _dependency; private readonly IDependencyB _dependencyB; } The generated constructor will look like this: public MyClass(ILogger logger, IDependencyA dependency) { _logger = logger; _dependency = dependency; } Inheritance​ ConstructorGenerator supports inheritance. You can put the [GenerateFullConstructor] attribute on a derived class. [GenerateFullConstructor] public MyClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB) { _logger = logger; _dependency = dependency; _dependencyB = dependencyB; } [GenerateFullConstructor] public partial class MyDerivedClass : MyClass { public IDependencyC DependencyC { get; } } The generated constructor will look like this: public MyDerivedClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB, IDependencyC dependencyC) : base(logger, dependency, dependencyB) { DependencyC = dependencyC; } Or, if you just want to generate the base constructor call (for example because your derived class have no constructor dependencies), you can put the [GenerateBaseConstructorCall] attribute on the derived class. // constructor of MyClass public MyClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB) { _logger = logger; _dependency = dependency; _dependencyB = dependencyB; } [GenerateBaseConstructorCall] public partial class MyDerivedClass : MyClass { } The generated constructor will look like this: public MyDerivedClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB) : base(logger, dependency, dependencyB) { } Note: It doesn't matter whether the base class constructor is also generated by the ConstructorGenerator or manually defined in the code. In either case, the constructor call will be generated. Optional parameters​ [GenerateFullConstructor] public partial class MyClass { private readonly ILogger _logger; private readonly IDependencyA _dependency; [ConstructorDependency(IsOptional = true)] private readonly IDependencyB _dependencyB; } The generated constructor will look like this: public MyClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB = null) { _logger = logger; _dependency = dependency; _dependencyB = dependencyB; } Execute code in the generated constructor​ To execute code in the constructor (like attaching events or something like this) you can implement the partial method OnConstructing which will be called after all fields and properties has been set. [GenerateFullConstructor] public partial class MyClass { private readonly ILogger _logger; private readonly IDependencyA _dependency; private readonly IDependencyB _dependencyB; partial void OnConstructing() { // do constructor stuff _logger.Log(&quot;Constructor called&quot;); } } Constructor accessibility​ ConstructorGenerator supports specifying the accessibility of the generated constructor. You can put the [ConstructorAccessibility] attribute on a class or struct and the constructor will be generated with the specified accessibility. [GenerateFullConstructor] [ConstructorAccessibility(Accessibility.Internal)] public partial class MyClass { private readonly ILogger _logger; private readonly IDependencyA _dependency; private readonly IDependencyB _dependencyB; } The generated constructor will look like this: internal MyClass(ILogger logger, IDependencyA dependency, IDependencyB dependencyB) { _logger = logger; _dependency = dependency; _dependencyB = dependencyB; } License​ ConstructorGenerator is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#about","content":" note Generate constructor for classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references ConstructorGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ConstructorGenerator&quot; Version=&quot;1.0.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  QuickConstructorDemo.Person_ConstructorGenerator.g.cs namespace QuickConstructorDemo { internal partial class Person { public Person(string firstName, string lastName) { FirstName = firstName; LastName = lastName; OnConstructing(); } partial void OnConstructing(); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#download-example-net--c","content":" tip Download Example project ConstructorGenerator   ","version":"Next","tagName":"h3"},{"title":"Share ConstructorGenerator​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#share-constructorgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ConstructorGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Constructor\" has the following generators:​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#category-constructor-has-the-following-generators","content":" 1 AutoConstructor  2 AutoCtor  3 AutoDeconstruct  4 ConstructorGenerator  5 PrimaryParameter  6 QuickConstructor  7 sourcedepend  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ConstructorGenerator by Swarley97","url":"/RSCG_Examples/v2/docs/ConstructorGenerator#see-category","content":" Constructor ","version":"Next","tagName":"h3"},{"title":"Coplt.Dropping by 2A5F","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Coplt.Dropping","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#info","content":" info Name: Coplt.Dropping Auto gen dispose pattern Author: 2A5F NuGet:https://www.nuget.org/packages/Coplt.Dropping/ You can find more details at https://github.com/2A5F/Coplt.Dropping Source: https://github.com/2A5F/Coplt.Dropping  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#original-readme","content":" note Coplt.Dropping Auto gen dispose pattern Auto handle Dispose(bool dispoing) patternAuto handle destructor/finalizerAllow multiple dropsSpecify the drop order [Drop(Order = X)]The first argument of Drop target method can be bool disposingMark Drop directly on fields and properties (requires target type have Dispose method)Dose not supported AsyncDispose, too complicated, it is recommended to implement it manuallyDrop can mark on static methods, will pass this on first argument, if have bool disposing will be the second argument Example​ Basic usage [Dropping] public partial class Foo1 { [Drop] public void Drop() { Console.WriteLine(1); } } Generate output: Foo1.dropping.g.cs   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#about","content":" note Generating disposable  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDALDB.csConnectionDB.cs This is the CSharp Project that references Coplt.Dropping &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Coplt.Dropping&quot; Version=&quot;0.5.1&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IDisposableGeneratorDemo.DALDB.dropping.g.cs // &lt;auto-generated/&gt; #nullable enable using Coplt.Dropping; namespace IDisposableGeneratorDemo { internal partial class DALDB : global::System.IDisposable { protected virtual void Dispose(bool disposing) { if (disposing) Drop(); } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } ~DALDB() { Dispose(false); } } } // namespace IDisposableGeneratorDemo   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#download-example-net--c","content":" tip Download Example project Coplt.Dropping   ","version":"Next","tagName":"h3"},{"title":"Share Coplt.Dropping​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#share-copltdropping","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Coplt.Dropping  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Disposer\" has the following generators:​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#category-disposer-has-the-following-generators","content":" 1 BenutomoAutomaticDisposeImplSourceGenerator  2 Coplt.Dropping  3 DisposableHelpers  4 Disposer  5 IDisposableGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Coplt.Dropping by 2A5F","url":"/RSCG_Examples/v2/docs/Coplt.Dropping#see-category","content":" Disposer ","version":"Next","tagName":"h3"},{"title":"Comparison by Fons Sonnemans","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Comparison","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#info","content":" info Name: Comparison A Source Generator package that generates the &gt;, &gt;=, &lt;, &lt;= operators for a partial type (class, struct or record) which implementsIComparable&lt;T&gt;. Author: Fons Sonnemans NuGet:https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/ You can find more details at https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator Source: https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#original-readme","content":" note ReflectionIT.ComparisonOperatorsGenerator A Source Generator package that generates the &gt;, &gt;=, &lt;, &lt;= operators for a partial type (class, struct or record) which implementsIComparable&lt;T&gt;. Generating these additional operators is as simple as adding the ComparisonOperators attribute to your type. Make sure this type is partial and implements System.IComparable&lt;T&gt; NuGet packages Package\tVersionReflectionIT.ComparisonOperatorsGenerator Example​ Add the NuGet package and write the following code: using ReflectionIT.ComparisonOperatorsGenerator.Attributes; [ComparisonOperators] partial class Point : IComparable&lt;Point&gt; { public double X { get; } public double Y { get; } public Point(double x, double y) { this.X = x; this.Y = y; } public void Swap() =&gt; new Point(this.Y, this.X); public double Dist =&gt; Math.Sqrt((X * X) + (Y * Y)); public override string ToString() =&gt; $&quot;({X},{Y})&quot;; public int CompareTo(Point? other) { return Comparer&lt;double?&gt;.Default.Compare(this.Dist, other?.Dist); } } This will generate the following partial class with the 4 comparison operators. partial class Point : System.Numerics.IComparisonOperators&lt;Point,Point,bool&gt; { public static bool operator &lt;(Point left, Point right) =&gt; left.CompareTo(right) &lt; 0; public static bool operator &lt;=(Point left, Point right) =&gt; left.CompareTo(right) &lt;= 0; public static bool operator &gt;(Point left, Point right) =&gt; left.CompareTo(right) &gt; 0; public static bool operator &gt;=(Point left, Point right) =&gt; left.CompareTo(right) &gt;= 0; } Implement IComparisonOperators&lt;TSelf,TOther,TResult&gt; interface​ You can automatically implement the IComparisonOperators&lt;TSelf,TOther,TResult&gt; interface using the ImplementIComparisonOperatorsInterface property of the ComparisonOperators attribute. using ReflectionIT.ComparisonOperatorsGenerator.Attributes; [ComparisonOperators(ImplementIComparisonOperatorsInterface = true)] readonly partial record struct Time : IComparable&lt;Time&gt; { public readonly int TotalMinutes; public int Hours =&gt; TotalMinutes / 60; public int Minutes =&gt; TotalMinutes % 60; public Time(int totalMinutes) { ArgumentOutOfRangeException.ThrowIfNegative(totalMinutes); TotalMinutes = totalMinutes; } public Time(int hours, int minutes) : this(hours * 60 + minutes) { } public override string ToString() =&gt; $&quot;{this.Hours}:{this.Minutes:00}&quot;; public int CompareTo(Time other) =&gt; this.TotalMinutes.CompareTo(other.TotalMinutes); } This will generate the following partial record struct with the 4 comparison operators and the IComparisonOperators&lt;TSelf,TOther,TResult&gt; interface implementation partial record struct Time : global::System.Numerics.IComparisonOperators&lt;Time,Time,bool&gt; { public static bool operator &lt;(Time left, Time right) =&gt; left.CompareTo(right) &lt; 0; public static bool operator &lt;=(Time left, Time right) =&gt; left.CompareTo(right) &lt;= 0; public static bool operator &gt;(Time left, Time right) =&gt; left.CompareTo(right) &gt; 0; public static bool operator &gt;=(Time left, Time right) =&gt; left.CompareTo(right) &gt;= 0; }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#about","content":" note If you want to generate comparison operators for your classes, startin with IComparable  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#example-source-csproj-source-files","content":" CSharp ProjectProgram.csRoom.cs This is the CSharp Project that references Comparison &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ReflectionIT.ComparisonOperatorsGenerator&quot; Version=&quot;0.1.2-preview&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ComparisonDemo.Room.g.csComparisonOperatorsGenerator.Attributes.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the ReflectionIT.ComparisonOperatorsGenerator source generator // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ namespace ComparisonDemo { partial class Room { [global::System.CodeDom.Compiler.GeneratedCode(&quot;ReflectionIT.ComparisonOperatorsGenerator&quot;, &quot;0.1.2.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] /// &lt;summary&gt;Compares two values to determine which is less.&lt;/summary&gt; /// &lt;param name=&quot;left&quot;&gt;The value to compare with &lt;paramref name=&quot;right&quot; /&gt;.&lt;/param&gt; /// &lt;param name=&quot;right&quot;&gt;The value to compare with &lt;paramref name=&quot;left&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool operator &lt;(Room left, Room right) =&gt; left.CompareTo(right) &lt; 0; [global::System.CodeDom.Compiler.GeneratedCode(&quot;ReflectionIT.ComparisonOperatorsGenerator&quot;, &quot;0.1.2.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] /// &lt;summary&gt;Compares two values to determine which is less or equal.&lt;/summary&gt; /// &lt;param name=&quot;left&quot;&gt;The value to compare with &lt;paramref name=&quot;right&quot; /&gt;.&lt;/param&gt; /// &lt;param name=&quot;right&quot;&gt;The value to compare with &lt;paramref name=&quot;left&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool operator &lt;=(Room left, Room right) =&gt; left.CompareTo(right) &lt;= 0; [global::System.CodeDom.Compiler.GeneratedCode(&quot;ReflectionIT.ComparisonOperatorsGenerator&quot;, &quot;0.1.2.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] /// &lt;summary&gt;Compares two values to determine which is greater.&lt;/summary&gt; /// &lt;param name=&quot;left&quot;&gt;The value to compare with &lt;paramref name=&quot;right&quot; /&gt;.&lt;/param&gt; /// &lt;param name=&quot;right&quot;&gt;The value to compare with &lt;paramref name=&quot;left&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool operator &gt;(Room left, Room right) =&gt; left.CompareTo(right) &gt; 0; [global::System.CodeDom.Compiler.GeneratedCode(&quot;ReflectionIT.ComparisonOperatorsGenerator&quot;, &quot;0.1.2.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] /// &lt;summary&gt;Compares two values to determine which is greater or equal.&lt;/summary&gt; /// &lt;param name=&quot;left&quot;&gt;The value to compare with &lt;paramref name=&quot;right&quot; /&gt;.&lt;/param&gt; /// &lt;param name=&quot;right&quot;&gt;The value to compare with &lt;paramref name=&quot;left&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool operator &gt;=(Room left, Room right) =&gt; left.CompareTo(right) &gt;= 0; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#download-example-net--c-","content":" tip Download Example project Comparison   ","version":"Next","tagName":"h3"},{"title":"Share Comparison​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#share-comparison","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Comparison  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementClass) - 27 other generators​","type":1,"pageTitle":"Comparison by Fons Sonnemans","url":"/RSCG_Examples/v2/docs/Comparison#in-the-same-category-enhancementclass---27-other-generators","content":" ApparatusAOT​  AspectGenerator​  CommonCodeGenerator​  DudNet​  Enhanced.GetTypes​  FastGenericNew​  HsuSgSync​  Immutype​  Ling.Audit​  Lombok.NET​  M31.FluentAPI​  MemberAccessor​  MemoryPack​  Meziantou.Polyfill​  Microsoft.Extensions.Logging​  Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator​  Microsoft.Interop.JavaScript.JSImportGenerator​  OptionToStringGenerator​  QueryStringGenerator​  RSCG_Decorator​  RSCG_UtilityTypes​  StaticReflection​  SyncMethodGenerator​  System.Runtime.InteropServices​  System.Text.RegularExpressions​  TelemetryLogging​  ThisClass​ ","version":"Next","tagName":"h3"},{"title":"CopyTo by Paul Braetz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CopyTo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#info","content":" info Name: CopyTo Generate a CopyTo method for copying one instances property values to another. Author: Paul Braetz NuGet:https://www.nuget.org/packages/RhoMicro.CodeAnalysis.CopyToGenerator You can find more details at https://github.com/PaulBraetz/RhoMicro.CodeAnalysis Source: https://github.com/PaulBraetz/RhoMicro.CodeAnalysis  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#original-readme","content":" note Rhomicro.CodeAnalysis This repository contains my explorations on c# source code generation and analysis. The [UnionsGenerator](https://github.com/PaulBraetz/RhoMicro.CodeAnalysis/UnionsGenerator generator enables the use of union types in C#. The [UtilityGenerators](https://github.com/PaulBraetz/RhoMicro.CodeAnalysis/UtilityGenerators generator helps you write code generators and analyzers. The [CopyTo](https://github.com/PaulBraetz/RhoMicro.CodeAnalysis/CopyTo generator generates methods to copy the contents of one instance to another. I created this generator for a friend, so it is not as feature rich as it could be.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#about","content":" note Generating copy to code for properties of a class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references CopyTo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RhoMicro.CodeAnalysis.CopyToGenerator&quot; Version=&quot;14.0.2&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenerateCopyToAttribute.g.csPerson.g.cs namespace RhoMicro.CodeAnalysis; using System; [global::System.AttributeUsage(AttributeTargets.Class)] #if GENERATOR [RhoMicro.CodeAnalysis.GenerateFactory] #endif internal sealed partial class GenerateCopyToAttribute : global::System.Attribute { }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#download-example-net--c","content":" tip Download Example project CopyTo   ","version":"Next","tagName":"h3"},{"title":"Share CopyTo​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#share-copyto","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CopyTo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Clone\" has the following generators:​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#category-clone-has-the-following-generators","content":" 1 CopyTo  2 Dolly  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CopyTo by Paul Braetz","url":"/RSCG_Examples/v2/docs/CopyTo#see-category","content":" Clone ","version":"Next","tagName":"h3"},{"title":"CopyCat by Serhii Buta","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CopyCat","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#info","content":" info Name: CopyCat Decorator pattert source generator with user-defined template Author: Serhii Buta NuGet:https://www.nuget.org/packages/Copycat/ You can find more details at https://github.com/Otaman/Copycat/ Source: https://github.com/Otaman/Copycat/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#original-readme","content":" note Copycat Source generator for creating decorators by templates. The source generator intents to simplify implementation of a Decorator Pattern. The package is still in beta. Currently, caching is not implemented, so the source generator regenerates output for every input, which may slow down IDEs in larger projects. Use Cases​ Les't begin from simple scenario. We need to decorate ISomeInterface: public interface ISomeInterface { void DoSomething(); void DoSomethingElse(int a, string b); } To activate generator, use [Decorate] attribute on a class. The class must be partial and have exactly one interface to decorate: using Copycat; [Decorate] public partial class SimpleDecorator : ISomeInterface { } In this example, Copycat generates pass-through decorator: // &lt;auto-generated/&gt; public partial class SimpleDecorator { private ISomeInterface _decorated; public SimpleDecorator(ISomeInterface decorated) { _decorated = decorated; } public void DoSomething() =&gt; _decorated.DoSomething(); public void DoSomethingElse(int a, string b) =&gt; _decorated.DoSomethingElse(a, b); } Pass-through decorators don't do much, but still can be useful for changing behaviour of particular methods without touching others: Here and after we skip using Copycat; and combine user-defined and auto-generated code for brevity [Decorate] public partial class SimpleDecorator : ISomeInterface { public void DoSomething() { // actually, do nothing } } // &lt;auto-generated/&gt; public partial class SimpleDecorator { private ISomeInterface _decorated; public SimpleDecorator(ISomeInterface decorated) { _decorated = decorated; } public void DoSomethingElse(int a, string b) =&gt; _decorated.DoSomethingElse(a, b); } As we see, Copycat now generates pass-through only for non-implemented methods (DoSomethingElse), allowing us to concentrate on important changes. But what if we want to override behaviour for one method, but throw for all others (assuming we got some huge legacy interface, where most methods are useless for us)? Now it's time to play with templates 😎 To make Copycat generate something different from pass-through we need to define a template: public interface IAmPartiallyUseful { void DoSomethingUseful(); void DoSomething(); void DoSomethingElse(); } [Decorate] public partial class ThrowDecorator : IAmPartiallyUseful { public void DoSomethingUseful() =&gt; Console.WriteLine(&quot;I did some work!&quot;); [Template] private void Throw(Action action) =&gt; throw new NotImplementedException(); } // &lt;auto-generated/&gt; public partial class ThrowDecorator { private IAmPartiallyUseful _decorated; public ThrowDecorator(IAmPartiallyUseful decorated) { _decorated = decorated; } /// &lt;see cref = &quot;ThrowDecorator.Throw(Action)&quot;/&gt; public void DoSomething() =&gt; throw new NotImplementedException(); /// &lt;see cref = &quot;ThrowDecorator.Throw(Action)&quot;/&gt; public void DoSomethingElse() =&gt; throw new NotImplementedException(); } That's better, now we do some work on DoSomethingUseful and throw on DoSomething or DoSomethingElse, but how? We defined a template: [Template] private void Throw(Action action) {...} Template is a method that takes parameterless delegate which has the same return type as the method itself. We can use any names for the template method and a delegate (as usual, it's better to keep them self-explanatory). We didn't use the delegate in the pevious example because we limited ourselves to simple examples where it wasn't needed. Now it's time to explore more real-world scenarios. Decorators fit nicely for aspect-oriented programming (AOP) when using them as wrappers. Logging​ One of the aspects, than can be separated easily is logging. For example: using System.Diagnostics; public interface ISomeInterface { void DoNothing(); void DoSomething(); void DoSomethingElse(int a, string b); } [Decorate] public partial class SimpleDecorator : ISomeInterface { private readonly ISomeInterface _decorated; public SimpleDecorator(ISomeInterface decorated) =&gt; _decorated = decorated; [Template] public void CalculateElapsedTime(Action action) { var sw = Stopwatch.StartNew(); action(); Console.WriteLine($&quot;{nameof(action)} took {sw.ElapsedMilliseconds} ms&quot;); } public void DoNothing() { } } public partial class SimpleDecorator { /// &lt;see cref = &quot;SimpleDecorator.CalculateElapsedTime(Action)&quot;/&gt; public void DoSomething() { var sw = Stopwatch.StartNew(); _decorated.DoSomething(); Console.WriteLine($&quot;{nameof(DoSomething)} took {sw.ElapsedMilliseconds} ms&quot;); } /// &lt;see cref = &quot;SimpleDecorator.CalculateElapsedTime(Action)&quot;/&gt; public void DoSomethingElse(int a, string b) { var sw = Stopwatch.StartNew(); _decorated.DoSomethingElse(a, b); Console.WriteLine($&quot;{nameof(DoSomethingElse)} took {sw.ElapsedMilliseconds} ms&quot;); } } Here DoSomething and DoSomething else are generated as specified by the template CalculateElapsedTime. Copycat has convention to replace delegate invocation with decorated method invocation (includes passing all parameters). For convenience, nameof(delegate) also replaced with nameof(MethodName) for easier use in templating. Retries​ Let's make our generator do some more interesting task. In most situations Polly nuget package is the best choice for retries. But for simple cases it may bring unnecessary complexity, like here: public interface ICache&lt;T&gt; { Task&lt;T&gt; Get(string key); Task&lt;T&gt; Set(string key, T value); } [Decorate] public partial class CacheDecorator&lt;T&gt; : ICache&lt;T&gt; { private readonly ICache&lt;T&gt; _decorated; public CacheDecorator(ICache&lt;T&gt; decorated) =&gt; _decorated = decorated; [Template] public async Task&lt;T&gt; RetryOnce(Func&lt;Task&lt;T&gt;&gt; action, string key) { try { return await action(); } catch (Exception e) { Console.WriteLine($&quot;Retry {nameof(action)} for {key} due to {e.Message}&quot;); return await action(); } } } public partial class CacheDecorator&lt;T&gt; { /// &lt;see cref = &quot;CacheDecorator.RetryOnce(Func{Task{T}}, string)&quot;/&gt; public async Task&lt;T&gt; Get(string key) { try { return await _decorated.Get(key); } catch (Exception e) { Console.WriteLine($&quot;Retry {nameof(Get)} for {key} due to {e.Message}&quot;); return await _decorated.Get(key); } } /// &lt;see cref = &quot;CacheDecorator.RetryOnce(Func{Task{T}}, string)&quot;/&gt; public async Task&lt;T&gt; Set(string key, T value) { try { return await _decorated.Set(key, value); } catch (Exception e) { Console.WriteLine($&quot;Retry {nameof(Set)} for {key} due to {e.Message}&quot;); return await _decorated.Set(key, value); } } } Caching should be fast, so we can't retry many times. One is ok, especially with some log message about the problem. Pay attention to key parameter in the template, it matches nicely our interface methods parameter. If additional parameters defined in template, then generator applies this template only for methods that have same exact parameter. Actually, we can implement more complext retry patterns, too: [Template] public async Task&lt;T&gt; Retry&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; action) { var retryCount = 0; while (true) { try { return await action(); } catch (Exception e) { if (retryCount++ &gt;= 3) throw; Console.WriteLine($&quot;Retry {nameof(action)} {retryCount} due to {e.Message}&quot;); } } } Advanced​ There are plenty use cases, than can be covered with Copycat. Feel free to explore them in src/Copycat/Copycat.IntegrationTests (and Generated folder inside). For instance, defining template in base class (see RetryWrapperWithBase.cs) or using multiple template to match methods with different signature see TestMultipleTemplates.cs).  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#about","content":" note Implementation of the Decorator pattern in C# - only for not implemented methods  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#example-source-csproj-source-files","content":" CSharp ProjectProgram.csICoffee.csCoffee.csCoffeeWithLogging.cs This is the CSharp Project that references CopyCat &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Copycat&quot; Version=&quot;0.2.0-beta.1&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  CoffeeWithLogging.g.cs // &lt;auto-generated/&gt; using Copycat; namespace CCDemo; internal partial class CoffeeWithLogging { private CCDemo.ICoffee _decorated; public CoffeeWithLogging(CCDemo.ICoffee decorated) { _decorated = decorated; } /// &lt;see cref = &quot;CoffeeWithLogging.AddLogging(Func{Task{bool}})&quot;/&gt; public async //for the moment does not work for properties in interface //string? Name { get; set; } Task&lt;bool&gt; Prepare() { try { Console.WriteLine($&quot;start logging {nameof(Prepare)} &quot;); return await _decorated.Prepare(); } catch (Exception e) { Console.WriteLine($&quot;exception {nameof(Prepare)} &quot;); throw; } finally { Console.WriteLine($&quot;end logging {nameof(Prepare)} &quot;); } } /// &lt;see cref = &quot;CoffeeWithLogging.AddLogging(Func{string[]})&quot;/&gt; public string[] GetIngredients() { try { Console.WriteLine($&quot;start logging {nameof(GetIngredients)} &quot;); return _decorated.GetIngredients(); } catch (Exception e) { Console.WriteLine($&quot;exception {nameof(GetIngredients)} &quot;); throw; } finally { Console.WriteLine($&quot;end logging {nameof(GetIngredients)} &quot;); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#download-example-net--c","content":" tip Download Example project CopyCat   ","version":"Next","tagName":"h3"},{"title":"Share CopyCat​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#share-copycat","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CopyCat  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CopyCat by Serhii Buta","url":"/RSCG_Examples/v2/docs/CopyCat#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"CommunityToolkit.Mvvm by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#info","content":" info Name: CommunityToolkit.Mvvm This package includes a .NET Standard MVVM library with helpers such as: ObservableObject: a base class for objects implementing the INotifyPropertyChanged interface.ObservableRecipient: a base class for observable objects with support for the IMessenger service.ObservableValidator: a base class for objects implementing the INotifyDataErrorInfo interface.RelayCommand: a simple delegate command implementing the ICommand interface.AsyncRelayCommand: a delegate command supporting asynchronous operations and cancellation.WeakReferenceMessenger: a messaging system to exchange messages through different loosely-coupled objects.StrongReferenceMessenger: a high-performance messaging system that trades weak references for speed.Ioc: a helper class to configure dependency injection service containers. Author: Microsoft NuGet:https://www.nuget.org/packages/CommunityToolkit.Mvvm You can find more details at https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/generators/overview Source: https://github.com/CommunityToolkit/dotnet  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#original-readme","content":" note 🧰 .NET Community Toolkit .NET Community Toolkit is a collection of helpers and APIs that work for all .NET developers and are agnostic of any specific UI platform. The toolkit is maintained and published by Microsoft, and part of the .NET Foundation. 👀 What does this repo contain?​ This repository contains several .NET libraries (originally developed as part of the Windows Community Toolkit) that can be used both by application developers (regardless on the specific UI framework in use, they work everywhere!) and library authors. These libraries are also being used internally at Microsoft to power many of our first party apps (such as the new Microsoft Store) and constantly improved by listening to feedbacks from other teams, external partners and other developers from the community. Here's a quick breakdown of the various components you'll find in this repository: Package\tLatest stable\tLatest Preview\tDescriptionCommunityToolkit.Common A set of helper APIs shared with other CommunityToolkit libraries. CommunityToolkit.Diagnostics A set of helper APIs (specifically, Guard and ThrowHelper) that can be used for cleaner, more efficient and less error-prone argument validation and error checking. CommunityToolkit.HighPerformance A collection of helpers for working in high-performance scenarios. It includes APIs such as pooled buffer helpers, a fast string pool type, a 2D variant of Memory&lt;T&gt; and Span&lt;T&gt; (Memory2D&lt;T&gt; and Span2D&lt;T&gt;) also supporting discontiguous regions, helpers for bit shift operations (such as BitHelper, also used in Paint.NET), and more. CommunityToolkit.Mvvm (aka MVVM Toolkit) A fast, modular, platform-agnostic MVVM library, which is the official successor of MvvmLight. It's used extensively in the Microsoft Store and other first party apps. The sample app repository is here. 🙌 Getting Started​ Please read the Getting Started with the .NET Community Toolkit page for more detailed information. 📃 Documentation​ All documentation for the toolkit is hosted on Microsoft Docs. All API documentation can be found at the .NET API Browser. 🚀 Contribution​ Do you want to contribute? Check out our .NET Community Toolkit Wiki page to learn more about contribution and guidelines! 📦 NuGet Packages​ NuGet is a standard package manager for .NET applications which is built into Visual Studio. When you open solution in Visual Studio, choose the Tools menu &gt; NuGet Package Manager &gt; Manage NuGet packages for solution… Enter one of the package names mentioned in .NET Community Toolkit NuGet Packages table to search for it online. 🌍 Roadmap​ Read what we plan for next iterations, and feel free to ask questions. Check out our Preview Packages Wiki Page to learn more about updating your NuGet sources in Visual Studio, then you can also get pre-release packages of upcoming versions to try. 📄 Code of Conduct​ This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the .NET Foundation Code of Conduct. 🏢 .NET Foundation​ This project is supported by the .NET Foundation. 🏆 Contributors​ Made with contrib.rocks.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#about","content":" note Shows how to implement INotifyPropertyChanged,ObservableProperty and RelayCommand Unfortunately , not yet a separate package just for those. Also, this show that RSCG could generate multiple partial declarations  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyViewModel.cs This is the CSharp Project that references CommunityToolkit.Mvvm &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;CommunityToolkit.Mvvm&quot; Version=&quot;8.2.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  test.MyViewModel.g.cstest.MyViewModel.g.cs__KnownINotifyPropertyChangedArgs.g.cstest.MyViewModel.SayHello.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable namespace test { /// &lt;inheritdoc/&gt; partial class MyViewModel : global::System.ComponentModel.INotifyPropertyChanged { /// &lt;inheritdoc cref = &quot;global::System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot;/&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged; /// &lt;summary&gt; /// Raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// &lt;/summary&gt; /// &lt;param name = &quot;e&quot;&gt;The input &lt;see cref = &quot;global::System.ComponentModel.PropertyChangedEventArgs&quot;/&gt; instance.&lt;/param&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected virtual void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e) { PropertyChanged?.Invoke(this, e); } /// &lt;summary&gt; /// Raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// &lt;/summary&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected void OnPropertyChanged([global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { OnPropertyChanged(new global::System.ComponentModel.PropertyChangedEventArgs(propertyName)); } /// &lt;summary&gt; /// Compares the current and new values for a given property. If the value has changed, updates /// the property with the new value, then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of the property that changed.&lt;/typeparam&gt; /// &lt;param name = &quot;field&quot;&gt;The field storing the property's value.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are the same. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetProperty&lt;T&gt;([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(&quot;newValue&quot;)] ref T field, T newValue, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { if (global::System.Collections.Generic.EqualityComparer&lt;T&gt;.Default.Equals(field, newValue)) { return false; } field = newValue; OnPropertyChanged(propertyName); return true; } /// &lt;summary&gt; /// Compares the current and new values for a given property. If the value has changed, updates /// the property with the new value, then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// See additional notes about this overload in &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt;. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of the property that changed.&lt;/typeparam&gt; /// &lt;param name = &quot;field&quot;&gt;The field storing the property's value.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;comparer&quot;&gt;The &lt;see cref = &quot;global::System.Collections.Generic.IEqualityComparer{T}&quot;/&gt; instance to use to compare the input values.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetProperty&lt;T&gt;([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(&quot;newValue&quot;)] ref T field, T newValue, global::System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { if (comparer.Equals(field, newValue)) { return false; } field = newValue; OnPropertyChanged(propertyName); return true; } /// &lt;summary&gt; /// Compares the current and new values for a given property. If the value has changed, updates /// the property with the new value, then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// This overload is much less efficient than &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt; and it /// should only be used when the former is not viable (eg. when the target property being /// updated does not directly expose a backing field that can be passed by reference). /// For performance reasons, it is recommended to use a stateful callback if possible through /// the &lt;see cref = &quot;SetProperty{TModel, T}(T, T, TModel, global::System.Action{TModel, T}, string? )&quot;/&gt; whenever possible /// instead of this overload, as that will allow the C# compiler to cache the input callback and /// reduce the memory allocations. More info on that overload are available in the related XML /// docs. This overload is here for completeness and in cases where that is not applicable. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of the property that changed.&lt;/typeparam&gt; /// &lt;param name = &quot;oldValue&quot;&gt;The current property value.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;A callback to invoke to update the property value.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are the same. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetProperty&lt;T&gt;(T oldValue, T newValue, global::System.Action&lt;T&gt; callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { if (global::System.Collections.Generic.EqualityComparer&lt;T&gt;.Default.Equals(oldValue, newValue)) { return false; } callback(newValue); OnPropertyChanged(propertyName); return true; } /// &lt;summary&gt; /// Compares the current and new values for a given property. If the value has changed, updates /// the property with the new value, then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// See additional notes about this overload in &lt;see cref = &quot;SetProperty{T}(T, T, global::System.Action{T}, string)&quot;/&gt;. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of the property that changed.&lt;/typeparam&gt; /// &lt;param name = &quot;oldValue&quot;&gt;The current property value.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;comparer&quot;&gt;The &lt;see cref = &quot;global::System.Collections.Generic.IEqualityComparer{T}&quot;/&gt; instance to use to compare the input values.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;A callback to invoke to update the property value.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetProperty&lt;T&gt;(T oldValue, T newValue, global::System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer, global::System.Action&lt;T&gt; callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { if (comparer.Equals(oldValue, newValue)) { return false; } callback(newValue); OnPropertyChanged(propertyName); return true; } /// &lt;summary&gt; /// Compares the current and new values for a given nested property. If the value has changed, /// updates the property and then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// The behavior mirrors that of &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt;, /// with the difference being that this method is used to relay properties from a wrapped model in the /// current instance. This type is useful when creating wrapping, bindable objects that operate over /// models that lack support for notification (eg. for CRUD operations). /// Suppose we have this model (eg. for a database row in a table): /// &lt;code&gt; /// public class Person /// { /// public string Name { get; set; } /// } /// &lt;/code&gt; /// We can then use a property to wrap instances of this type into our observable model (which supports /// notifications), injecting the notification to the properties of that model, like so: /// &lt;code&gt; /// [INotifyPropertyChanged] /// public partial class BindablePerson /// { /// public Model { get; } /// /// public BindablePerson(Person model) /// { /// Model = model; /// } /// /// public string Name /// { /// get =&gt; Model.Name; /// set =&gt; Set(Model.Name, value, Model, (model, name) =&gt; model.Name = name); /// } /// } /// &lt;/code&gt; /// This way we can then use the wrapping object in our application, and all those &quot;proxy&quot; properties will /// also raise notifications when changed. Note that this method is not meant to be a replacement for /// &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt;, and it should only be used when relaying properties to a model that /// doesn't support notifications, and only if you can't implement notifications to that model directly (eg. by having /// it implement &lt;see cref = &quot;global::System.ComponentModel.INotifyPropertyChanged&quot;/&gt;). The syntax relies on passing the target model and a stateless callback /// to allow the C# compiler to cache the function, which results in much better performance and no memory usage. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;TModel&quot;&gt;The type of model whose property (or field) to set.&lt;/typeparam&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of property (or field) to set.&lt;/typeparam&gt; /// &lt;param name = &quot;oldValue&quot;&gt;The current property value.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;model&quot;&gt;The model containing the property being updated.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;The callback to invoke to set the target property value, if a change has occurred.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are the same. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetProperty&lt;TModel, T&gt;(T oldValue, T newValue, TModel model, global::System.Action&lt;TModel, T&gt; callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) where TModel : class { if (global::System.Collections.Generic.EqualityComparer&lt;T&gt;.Default.Equals(oldValue, newValue)) { return false; } callback(model, newValue); OnPropertyChanged(propertyName); return true; } /// &lt;summary&gt; /// Compares the current and new values for a given nested property. If the value has changed, /// updates the property and then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// The behavior mirrors that of &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt;, /// with the difference being that this method is used to relay properties from a wrapped model in the /// current instance. See additional notes about this overload in &lt;see cref = &quot;SetProperty{TModel, T}(T, T, TModel, global::System.Action{TModel, T}, string)&quot;/&gt;. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;TModel&quot;&gt;The type of model whose property (or field) to set.&lt;/typeparam&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of property (or field) to set.&lt;/typeparam&gt; /// &lt;param name = &quot;oldValue&quot;&gt;The current property value.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;comparer&quot;&gt;The &lt;see cref = &quot;global::System.Collections.Generic.IEqualityComparer{T}&quot;/&gt; instance to use to compare the input values.&lt;/param&gt; /// &lt;param name = &quot;model&quot;&gt;The model containing the property being updated.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;The callback to invoke to set the target property value, if a change has occurred.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetProperty&lt;TModel, T&gt;(T oldValue, T newValue, global::System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer, TModel model, global::System.Action&lt;TModel, T&gt; callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) where TModel : class { if (comparer.Equals(oldValue, newValue)) { return false; } callback(model, newValue); OnPropertyChanged(propertyName); return true; } /// &lt;summary&gt; /// Compares the current and new values for a given field (which should be the backing field for a property). /// If the value has changed, updates the field and then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// The behavior mirrors that of &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt;, with the difference being that /// this method will also monitor the new value of the property (a generic &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt;) and will also /// raise the &lt;see cref = &quot;PropertyChanged&quot;/&gt; again for the target property when it completes. /// This can be used to update bindings observing that &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; or any of its properties. /// This method and its overload specifically rely on the &lt;see cref = &quot;TaskNotifier&quot;/&gt; type, which needs /// to be used in the backing field for the target &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; property. The field doesn't need to be /// initialized, as this method will take care of doing that automatically. The &lt;see cref = &quot;TaskNotifier&quot;/&gt; /// type also includes an implicit operator, so it can be assigned to any &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; instance directly. /// Here is a sample property declaration using this method: /// &lt;code&gt; /// private TaskNotifier myTask; /// /// public Task MyTask /// { /// get =&gt; myTask; /// private set =&gt; SetAndNotifyOnCompletion(ref myTask, value); /// } /// &lt;/code&gt; /// &lt;/summary&gt; /// &lt;param name = &quot;taskNotifier&quot;&gt;The field notifier to modify.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are /// the same. The return value being &lt;see langword=&quot;true&quot;/&gt; only indicates that the new value being assigned to /// &lt;paramref name = &quot;taskNotifier&quot;/&gt; is different than the previous one, and it does not mean the new /// &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; instance passed as argument is in any particular state. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetPropertyAndNotifyOnCompletion([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier? taskNotifier, global::System.Threading.Tasks.Task? newValue, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier(), newValue, null, propertyName); } /// &lt;summary&gt; /// Compares the current and new values for a given field (which should be the backing field for a property). /// If the value has changed, updates the field and then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// This method is just like &lt;see cref = &quot;SetPropertyAndNotifyOnCompletion(ref TaskNotifier, global::System.Threading.Tasks.Task, string)&quot;/&gt;, /// with the difference being an extra &lt;see cref = &quot;global::System.Action{T}&quot;/&gt; parameter with a callback being invoked /// either immediately, if the new task has already completed or is &lt;see langword=&quot;null&quot;/&gt;, or upon completion. /// &lt;/summary&gt; /// &lt;param name = &quot;taskNotifier&quot;&gt;The field notifier to modify.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;A callback to invoke to update the property value.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are the same. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetPropertyAndNotifyOnCompletion([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier? taskNotifier, global::System.Threading.Tasks.Task? newValue, global::System.Action&lt;global::System.Threading.Tasks.Task?&gt; callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier(), newValue, callback, propertyName); } /// &lt;summary&gt; /// Compares the current and new values for a given field (which should be the backing field for a property). /// If the value has changed, updates the field and then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// The behavior mirrors that of &lt;see cref = &quot;SetProperty{T}(ref T, T, string)&quot;/&gt;, with the difference being that /// this method will also monitor the new value of the property (a generic &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt;) and will also /// raise the &lt;see cref = &quot;PropertyChanged&quot;/&gt; again for the target property when it completes. /// This can be used to update bindings observing that &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; or any of its properties. /// This method and its overload specifically rely on the &lt;see cref = &quot;TaskNotifier{T}&quot;/&gt; type, which needs /// to be used in the backing field for the target &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; property. The field doesn't need to be /// initialized, as this method will take care of doing that automatically. The &lt;see cref = &quot;TaskNotifier{T}&quot;/&gt; /// type also includes an implicit operator, so it can be assigned to any &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; instance directly. /// Here is a sample property declaration using this method: /// &lt;code&gt; /// private TaskNotifier&amp;lt;int&amp;gt; myTask; /// /// public Task&amp;lt;int&amp;gt; MyTask /// { /// get =&gt; myTask; /// private set =&gt; SetAndNotifyOnCompletion(ref myTask, value); /// } /// &lt;/code&gt; /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of result for the &lt;see cref = &quot;global::System.Threading.Tasks.Task{TResult}&quot;/&gt; to set and monitor.&lt;/typeparam&gt; /// &lt;param name = &quot;taskNotifier&quot;&gt;The field notifier to modify.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are /// the same. The return value being &lt;see langword=&quot;true&quot;/&gt; only indicates that the new value being assigned to /// &lt;paramref name = &quot;taskNotifier&quot;/&gt; is different than the previous one, and it does not mean the new /// &lt;see cref = &quot;global::System.Threading.Tasks.Task{TResult}&quot;/&gt; instance passed as argument is in any particular state. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetPropertyAndNotifyOnCompletion&lt;T&gt;([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier&lt;T&gt;? taskNotifier, global::System.Threading.Tasks.Task&lt;T&gt;? newValue, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier&lt;T&gt;(), newValue, null, propertyName); } /// &lt;summary&gt; /// Compares the current and new values for a given field (which should be the backing field for a property). /// If the value has changed, updates the field and then raises the &lt;see cref = &quot;PropertyChanged&quot;/&gt; event. /// This method is just like &lt;see cref = &quot;SetPropertyAndNotifyOnCompletion{T}(ref TaskNotifier{T}, global::System.Threading.Tasks.Task{T}, string)&quot;/&gt;, /// with the difference being an extra &lt;see cref = &quot;global::System.Action{T}&quot;/&gt; parameter with a callback being invoked /// either immediately, if the new task has already completed or is &lt;see langword=&quot;null&quot;/&gt;, or upon completion. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of result for the &lt;see cref = &quot;global::System.Threading.Tasks.Task{TResult}&quot;/&gt; to set and monitor.&lt;/typeparam&gt; /// &lt;param name = &quot;taskNotifier&quot;&gt;The field notifier to modify.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;A callback to invoke to update the property value.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; /// &lt;remarks&gt; /// The &lt;see cref = &quot;PropertyChanged&quot;/&gt; event is not raised if the current and new value for the target property are the same. /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected bool SetPropertyAndNotifyOnCompletion&lt;T&gt;([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier&lt;T&gt;? taskNotifier, global::System.Threading.Tasks.Task&lt;T&gt;? newValue, global::System.Action&lt;global::System.Threading.Tasks.Task&lt;T&gt;?&gt; callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) { return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier&lt;T&gt;(), newValue, callback, propertyName); } /// &lt;summary&gt; /// Implements the notification logic for the related methods. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;TTask&quot;&gt;The type of &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; to set and monitor.&lt;/typeparam&gt; /// &lt;param name = &quot;taskNotifier&quot;&gt;The field notifier.&lt;/param&gt; /// &lt;param name = &quot;newValue&quot;&gt;The property's value after the change occurred.&lt;/param&gt; /// &lt;param name = &quot;callback&quot;&gt;(optional) A callback to invoke to update the property value.&lt;/param&gt; /// &lt;param name = &quot;propertyName&quot;&gt;(optional) The name of the property that changed.&lt;/param&gt; /// &lt;returns&gt;&lt;see langword=&quot;true&quot;/&gt; if the property was changed, &lt;see langword=&quot;false&quot;/&gt; otherwise.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] private bool SetPropertyAndNotifyOnCompletion&lt;TTask&gt;(ITaskNotifier&lt;TTask&gt; taskNotifier, TTask? newValue, global::System.Action&lt;TTask?&gt;? callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null) where TTask : global::System.Threading.Tasks.Task { if (ReferenceEquals(taskNotifier.Task, newValue)) { return false; } bool isAlreadyCompletedOrNull = newValue?.IsCompleted ?? true; taskNotifier.Task = newValue; OnPropertyChanged(propertyName); if (isAlreadyCompletedOrNull) { if (callback != null) { callback(newValue); } return true; } async void MonitorTask() { await global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__TaskExtensions.GetAwaitableWithoutEndValidation(newValue!); if (ReferenceEquals(taskNotifier.Task, newValue)) { OnPropertyChanged(propertyName); } if (callback != null) { callback(newValue); } } MonitorTask(); return true; } /// &lt;summary&gt; /// An interface for task notifiers of a specified type. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;TTask&quot;&gt;The type of value to store.&lt;/typeparam&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] private interface ITaskNotifier&lt;TTask&gt; where TTask : global::System.Threading.Tasks.Task { /// &lt;summary&gt; /// Gets or sets the wrapped &lt;typeparamref name = &quot;TTask&quot;/&gt; value. /// &lt;/summary&gt; TTask? Task { get; set; } } /// &lt;summary&gt; /// A wrapping class that can hold a &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; value. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected sealed class TaskNotifier : ITaskNotifier&lt;global::System.Threading.Tasks.Task&gt; { /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref = &quot;TaskNotifier&quot;/&gt; class. /// &lt;/summary&gt; internal TaskNotifier() { } private global::System.Threading.Tasks.Task? task; /// &lt;inheritdoc/&gt; global::System.Threading.Tasks.Task? ITaskNotifier&lt;global::System.Threading.Tasks.Task&gt;.Task { get =&gt; this.task; set =&gt; this.task = value; } /// &lt;summary&gt; /// Unwraps the &lt;see cref = &quot;global::System.Threading.Tasks.Task&quot;/&gt; value stored in the current instance. /// &lt;/summary&gt; /// &lt;param name = &quot;notifier&quot;&gt;The input &lt;see cref = &quot;TaskNotifier{TTask}&quot;/&gt; instance.&lt;/param&gt; public static implicit operator global::System.Threading.Tasks.Task? (TaskNotifier? notifier) { return notifier?.task; } } /// &lt;summary&gt; /// A wrapping class that can hold a &lt;see cref = &quot;global::System.Threading.Tasks.Task{T}&quot;/&gt; value. /// &lt;/summary&gt; /// &lt;typeparam name = &quot;T&quot;&gt;The type of value for the wrapped &lt;see cref = &quot;global::System.Threading.Tasks.Task{T}&quot;/&gt; instance.&lt;/typeparam&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator&quot;, &quot;8.2.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected sealed class TaskNotifier&lt;T&gt; : ITaskNotifier&lt;global::System.Threading.Tasks.Task&lt;T&gt;&gt; { /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref = &quot;TaskNotifier{TTask}&quot;/&gt; class. /// &lt;/summary&gt; internal TaskNotifier() { } private global::System.Threading.Tasks.Task&lt;T&gt;? task; /// &lt;inheritdoc/&gt; global::System.Threading.Tasks.Task&lt;T&gt;? ITaskNotifier&lt;global::System.Threading.Tasks.Task&lt;T&gt;&gt;.Task { get =&gt; this.task; set =&gt; this.task = value; } /// &lt;summary&gt; /// Unwraps the &lt;see cref = &quot;global::System.Threading.Tasks.Task{T}&quot;/&gt; value stored in the current instance. /// &lt;/summary&gt; /// &lt;param name = &quot;notifier&quot;&gt;The input &lt;see cref = &quot;TaskNotifier{TTask}&quot;/&gt; instance.&lt;/param&gt; public static implicit operator global::System.Threading.Tasks.Task&lt;T&gt;? (TaskNotifier&lt;T&gt;? notifier) { return notifier?.task; } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#download-example-net--c","content":" tip Download Example project CommunityToolkit.Mvvm   ","version":"Next","tagName":"h3"},{"title":"Share CommunityToolkit.Mvvm​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#share-communitytoolkitmvvm","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"MVVM\" has the following generators:​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#category-mvvm-has-the-following-generators","content":" 1 CommunityToolkit.Mvvm  2 PropertyChangedSourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CommunityToolkit.Mvvm by Microsoft","url":"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm#see-category","content":" MVVM ","version":"Next","tagName":"h3"},{"title":"Credfeto.Version.Information.Generator by Mark Ridgwell","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#info","content":" info Name: Credfeto.Version.Information.Generator Source code generator for versioning. Author: Mark Ridgwell NuGet:https://www.nuget.org/packages/Credfeto.Version.Information.Generator/ You can find more details at https://github.com/credfeto/credfeto-version-constants-generator Source: https://github.com/credfeto/credfeto-version-constants-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#original-readme","content":" note credfeto-version-constants-generator Source generator for embedding build information as compile time constants in C# projects. Usage​ Add the following to your project file: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Credfeto.Version.Information.Generator&quot; Version=&quot;1.0.2.16&quot; PrivateAssets=&quot;All&quot; ExcludeAssets=&quot;runtime&quot;/&gt; &lt;/ItemGroup&gt; This generates a class called VersionInformation in the root namespace of the project with the following properties taken from properties in the project file: internal static class VersionInformation { public const string Version = &quot;0.0.0.1-test&quot;; public const string Product = &quot;Credfeto.Version.Information.Example.Tests&quot;; public const string Company = &quot;Example Company&quot;; public const string Copyright = &quot;Copyright © Example Company 2024&quot;; } Controlled by the following properties: &lt;PropertyGroup&gt; &lt;Company&gt;Example Company&lt;/Company&gt; &lt;Copyright&gt;Copyright © Example Company 2024&lt;/Copyright&gt; &lt;/PropertyGroup&gt; Version comes from the AssemblyInformationalVersion that can be set using the /p:Version=0.0.1-test command line argument to MSBuild. or a &lt;Version&gt; property in the project file.Product comes from the Root Namespace property for the assembly. Build Status​ Branch\tStatusmain release Changelog​ View changelog Contributors​  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#about","content":" note Embedding build information as compile time constants in C# projects.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references Credfeto.Version.Information.Generator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;!-- this is the code to start RSCG --&gt; &lt;Version&gt;2024.11.15.450&lt;/Version&gt; &lt;Company&gt;AOM&lt;/Company&gt; &lt;Copyright&gt;MIT&lt;/Copyright&gt; &lt;Product&gt;Info Test&lt;/Product&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Credfeto.Version.Information.Generator&quot; Version=&quot;1.0.2.16&quot; PrivateAssets=&quot;All&quot; ExcludeAssets=&quot;runtime&quot;/&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Info.VersionInformation.generated.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // Runtime Version: Current // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System; using System.CodeDom.Compiler; namespace Info; [GeneratedCode(tool: &quot;Credfeto.Version.Information.Generator&quot;, version: &quot;1.0.2.16&quot;)] internal static class VersionInformation { public const string Version = &quot;2024.11.15.450&quot;; public const string Product = &quot;Info&quot;; public const string Company = &quot;AOM&quot;; public const string Copyright = &quot;MIT&quot;; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#download-example-net--c","content":" tip Download Example project Credfeto.Version.Information.Generator   ","version":"Next","tagName":"h3"},{"title":"Share Credfeto.Version.Information.Generator​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#share-credfetoversioninformationgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Credfeto.Version.Information.Generator by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"corecraft by","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/corecraft","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#info","content":" info Name: corecraft A core library to build cross-platform and highly customizable domain models Author: NuGet:https://www.nuget.org/packages/corecraft/ You can find more details at https://github.com/AlexNav73/CoreCraft Source: https://github.com/AlexNav73/CoreCraft  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#original-readme","content":" note Introduction​ CoreCraft is a comprehensive toolkit designed to simplify domain modeling and data management in .NET applications. It offers a range of powerful features and functionalities that enable developers to build robust and scalable domain models. Main Features​ The CoreCraft provides a wealth of features, including: Automatic Domain Model Generation with Roslyn Source Generators: CoreCraft leverages Roslyn Source Generators to automatically generate domain models based on your schema. This automated process eliminates the need for manual coding, saving you time and effort. The generated models are accurate, consistent, and reflect the structure of your schema. Change Tracking: CoreCraft incorporates change tracking mechanisms that allow you to monitor modifications to your domain model. By tracking changes at a granular level, CoreCraft notifies you of specific modifications, enabling you to respond effectively. This feature eliminates the need for manual change detection and parsing of the entire model. Undo/Redo Support: CoreCraft simplifies the implementation of undo and redo operations in your application. It provides built-in support for managing and reverting changes, giving users the ability to undo actions and redo them as needed. Data integrity: CoreCraft follows a command-based execution approach, where the domain model is read-only by default, and modifications are made through commands. When a command executes, it operates on a snapshot of the model, ensuring data integrity in case of exceptions during command execution. Persistence Options: CoreCraft offers seamless support for persisting your generated domain model. With CoreCraft, there's no need for additional code to handle persistence. It supports saving and loading the model's state to a SQLite database and JSON files. The toolkit takes care of the storage and retrieval process, making it convenient and hassle-free. Additionally, CoreCraft allows for easy implementation of additional storage options, making it flexible to adapt to your specific requirements. Plugin Architecture Support: CoreCraft is well-suited for use in a plugin architecture. It provides the necessary abstractions and features to support modular development, allowing different plugins to contribute to the overall application state. Reactive Extensions (Rx.NET) Integration: CoreCraft incorporates Reactive Extensions (Rx.NET) to provide a flexible subscription mechanism. It utilizes the IObservable and IObserver interfaces, allowing you to leverage the power of Rx.NET for event-driven programming and reactive data processing. This integration enables you to easily subscribe to change events and apply custom logic using the extensive set of operators provided by Rx.NET. CoreCraft empowers developers to create robust and scalable domain models with ease. With automatic model generation, change tracking, persistence options, and support for undo/redo operations, CoreCraft simplifies application state management and enhances the user experience. NuGet Packages​ CoreCraft is distributed as NuGet packages. Package\tStatusCoreCraft CoreCraft.Generators CoreCraft.Storage.SQLite CoreCraft.Storage.Json Basic usage​ The only thing is needed to start using the CoreCraft toolkit is to define the schema for the domain model. Create a *.model.json file that describes your entities, properties and their relations. Here's an example: { &quot;shards&quot;: [ { &quot;name&quot;: &quot;ToDo&quot;, &quot;entities&quot;: [ { &quot;name&quot;: &quot;ToDoItem&quot;, &quot;properties&quot;: [ { &quot;name&quot;: &quot;Name&quot;, &quot;type&quot;: &quot;string&quot;, &quot;defaultValue&quot;: &quot;string.Empty&quot; } ] } ], &quot;collections&quot;: [ { &quot;name&quot;: &quot;Items&quot;, &quot;entityType&quot;: &quot;ToDoItem&quot; } ], &quot;relations&quot;: [] } ] } And add the additional files entry to the project file: &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Model.model.json&quot; /&gt; &lt;/ItemGroup&gt; The model schema is the only piece needed to define data of your domain model. Everything else will be automatically generated by the CoreCraft.Generators package. Now, an instance of the domain model can be created using an instance of generated ToDoModelShard class: // Create an instance of the domain model var model = new DomainModel(new[] { new ToDoModelShard() }); Note: instead of using DomainModel class directly, you can use build-in classes (AutoSaveDomainModel, UndoRedoDomainModel) or inherit from it and implement custom logic Then we need to subscribe to the model changes by providing an event handler method to handle the collection changes.: // Subscribe to Items collection change events using var subscription = model.For&lt;IToDoChangesFrame&gt;() .With(x =&gt; x.Items) .Subscribe(OnItemChanged); // Observe changes void OnItemChanged(Change&lt;ICollectionChangeSet&lt;ToDoItem, ToDoItemProperties&gt;&gt; changes) { foreach (var c in changes.Hunk) { Console.WriteLine($&quot;Entity [{c.Entity}] has been {c.Action}ed.&quot;); Console.WriteLine($&quot; Old data: {c.OldData}&quot;); Console.WriteLine($&quot; New data: {c.NewData}&quot;); } } When subscription is done, let's execute a command to modify the model: // Adds new item to the collection model.Run&lt;IMutableToDoModelShard&gt;( (shard, _) =&gt; shard.Items.Add(new() { Name = &quot;test&quot; })); Save the domain model to an SQLite database file. var storage = new SqliteStorage(Array.Empty&lt;IMigration&gt;()); model.Save(storage, &quot;my_data.db&quot;); Please refer to the documentation for comprehensive information on using the CoreCraft toolkit and its features. License​ MIT.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#about","content":" note Decomposing properties and class into Domain Models. Seems however too complicated to use  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#example-source-csproj-source-files","content":" CSharp ProjectJson2Code.csprojProgram.csPerson.model.json This is the CSharp Project that references corecraft &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;Person.model.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Person.model.json&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;CoreCraft&quot; Version=&quot;0.6.0&quot; /&gt; &lt;PackageReference Include=&quot;CoreCraft.Generators&quot; Version=&quot;0.6.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable namespace Json2Code.Person { using CoreCraft.Core; using CoreCraft.ChangesTracking; using CoreCraft.Persistence; using Json2Code.Person.Entities; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] public interface IPersonShardModelShard : IModelShard { ICollection&lt;Person, PersonProperties&gt; Persons { get; } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] public interface IMutablePersonShardModelShard : IModelShard { IMutableCollection&lt;Person, PersonProperties&gt; Persons { get; } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()] internal static class PersonShardModelShardInfo { public static readonly CollectionInfo PersonsInfo = new(&quot;PersonShard&quot;, &quot;Persons&quot;, new PropertyInfo[] { new(&quot;FirstName&quot;, typeof(string), false), new(&quot;LastName&quot;, typeof(string), false) }); } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()] internal sealed partial class PersonShardModelShard : IPersonShardModelShard { public const string PersonsId = &quot;Json2Code.Person.PersonShard.Persons&quot;; public PersonShardModelShard() { Persons = new Collection&lt;Person, PersonProperties&gt;( PersonsId, static id =&gt; new Person(id), static () =&gt; new PersonProperties()); } internal PersonShardModelShard(IMutablePersonShardModelShard mutable) { Persons = ((IMutableState&lt;ICollection&lt;Person, PersonProperties&gt;&gt;)mutable.Persons).AsReadOnly(); } public ICollection&lt;Person, PersonProperties&gt; Persons { get; init; } = null!; } internal sealed partial class PersonShardModelShard : IReadOnlyState&lt;IMutablePersonShardModelShard&gt; { public IMutablePersonShardModelShard AsMutable(global::System.Collections.Generic.IEnumerable&lt;IFeature&gt; features) { var persons = (IMutableCollection&lt;Person, PersonProperties&gt;)Persons; foreach (var feature in features) { persons = feature.Decorate(this, persons); } return new MutablePersonShardModelShard() { Persons = persons, }; } } internal sealed partial class PersonShardModelShard : ICanBeSaved { public void Save(IRepository repository) { repository.Save(PersonShardModelShardInfo.PersonsInfo, Persons); } } internal sealed partial class PersonShardModelShard : IFeatureContext { IChangesFrame IFeatureContext.GetOrAddFrame(IMutableModelChanges modelChanges) { return modelChanges.Register(static () =&gt; new PersonShardChangesFrame()); } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] public interface IPersonShardChangesFrame : IChangesFrame { ICollectionChangeSet&lt;Person, PersonProperties&gt; Persons { get; } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()] internal sealed class PersonShardChangesFrame : IPersonShardChangesFrame, IChangesFrameEx, ICanBeSaved { public PersonShardChangesFrame() { Persons = new CollectionChangeSet&lt;Person, PersonProperties&gt;(PersonShardModelShard.PersonsId); } public ICollectionChangeSet&lt;Person, PersonProperties&gt; Persons { get; private set; } ICollectionChangeSet&lt;TEntity, TProperty&gt;? IChangesFrame.Get&lt;TEntity, TProperty&gt;(ICollection&lt;TEntity, TProperty&gt; collection) { if (Persons.Id == collection.Id) return Persons as ICollectionChangeSet&lt;TEntity, TProperty&gt;; throw new System.InvalidOperationException(&quot;Unable to find collection's changes set&quot;); } IRelationChangeSet&lt;TParent, TChild&gt;? IChangesFrame.Get&lt;TParent, TChild&gt;(IRelation&lt;TParent, TChild&gt; relation) { throw new System.InvalidOperationException($&quot;Unable to find relation's change set&quot;); } IChangesFrame IChangesFrame.Invert() { return new PersonShardChangesFrame() { Persons = Persons.Invert(), }; } public void Apply(IModel model) { var modelShard = model.Shard&lt;IMutablePersonShardModelShard&gt;(); Persons.Apply(modelShard.Persons); } public bool HasChanges() { return Persons.HasChanges(); } public IChangesFrame Merge(IChangesFrame frame) { var typedFrame = (PersonShardChangesFrame)frame; return new PersonShardChangesFrame() { Persons = Persons.Merge(typedFrame.Persons), }; } public void Save(IRepository repository) { repository.Save(PersonShardModelShardInfo.PersonsInfo, Persons); } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()] internal sealed class MutablePersonShardModelShard : IMutablePersonShardModelShard, IMutableState&lt;IPersonShardModelShard&gt;, ICanBeLoaded { public IMutableCollection&lt;Person, PersonProperties&gt; Persons { get; init; } = null!; public IPersonShardModelShard AsReadOnly() { return new PersonShardModelShard(this); } public void Load(IRepository repository) { repository.Load(PersonShardModelShardInfo.PersonsInfo, Persons); } } } namespace Json2Code.Person.Entities { using CoreCraft.Core; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()] public sealed record Person(global::System.Guid Id) : Entity(Id) { internal Person() : this(global::System.Guid.NewGuid()) { } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;C# Source Generator&quot;, &quot;1.0.0.0&quot;)] [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()] public sealed partial record PersonProperties : Properties { public PersonProperties() { FirstName = &quot;Andrei&quot;; LastName = &quot;Ignat&quot;; } public string FirstName { get; init; } public string LastName { get; init; } #if NET5_0_OR_GREATER public override PersonProperties ReadFrom(IPropertiesBag bag) #else public override Properties ReadFrom(IPropertiesBag bag) #endif { return new PersonProperties() { FirstName = bag.Read&lt;string&gt;(&quot;FirstName&quot;), LastName = bag.Read&lt;string&gt;(&quot;LastName&quot;), }; } public override void WriteTo(IPropertiesBag bag) { bag.Write(&quot;FirstName&quot;, FirstName); bag.Write(&quot;LastName&quot;, LastName); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#download-example-net--c","content":" tip Download Example project corecraft   ","version":"Next","tagName":"h3"},{"title":"Share corecraft​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#share-corecraft","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/corecraft  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"corecraft by","url":"/RSCG_Examples/v2/docs/corecraft#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"CredFetoEnum by Mark Ridgwell","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/CredFetoEnum","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#info","content":" info Name: CredFetoEnum Source code generator for Enums. Author: Mark Ridgwell NuGet:https://www.nuget.org/packages/Credfeto.Enumeration.Source.Generation/ You can find more details at https://github.com/credfeto/credfeto-enum-source-generation Source: https://github.com/credfeto/credfeto-enum-source-generation  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#original-readme","content":" note credfeto-enum-source-generation C# Source generator for enums Using​ Add a reference to the Credfeto.Enumeration.Source.Generation package in each project you need the code generation to run. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Credfeto.Enumeration.Source.Generation&quot; Version=&quot;1.0.0.11&quot; PrivateAssets=&quot;All&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;/ItemGroup&gt; For each enum in the project, generates a class with the following extension methods: public static string GetName(this MyEnum value)public static string GetDescription(this MyEnum value) Given an the example enum defined below: public enum ExampleEnumValues { ZERO = 0, [Description(&quot;One \\&quot;1\\&quot;&quot;)] ONE = 1, SAME_AS_ONE = ONE, } To get the name and value of the enum values. In release mode this can be practically instant. ExampleEnumValues value = ExampleEnumValues.ONE; string name = value.GetName(); // ONE string description = value.GetDescription(); // One &quot;1&quot; bool isDefined = value.IsDefine(); // true bool isNotDefined = ((ExampleEnumValues)42).IsDefine(); // false Enums in other assemblies​ Reference the following package in the project that contains the enum extensions class to generate. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Credfeto.Enumeration.Source.Generation.Attributes&quot; Version=&quot;0.0.2.3&quot; PrivateAssets=&quot;All&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;/ItemGroup&gt; Add an EnumText attribute to a partial static extension class for each enum you want to expose. [EnumText(typeof(System.Net.HttpStatusCode))] [EnumText(typeof(ThirdParty.ExampleEnum))] public static partial class EnumExtensions { } Will generate the same extension methods, but for the types nominated in the attributes. Benchmarks​ Benchmarks are in the Benchmark.net project Credfeto.Enumeration.Source.Generation.Benchmarks, with a summary of a run below. Method\tMean\tError\tStdDev\tMedian\tAllocatedGetNameToString\t25.5162 ns\t0.4146 ns\t0.3675 ns\t25.5322 ns\t24 B GetNameReflection\t37.8875 ns\t0.3971 ns\t0.3520 ns\t37.8542 ns\t24 B GetNameCachedReflection\t21.6571 ns\t0.4514 ns\t0.3770 ns\t21.6841 ns\t24 B GetNameCodeGenerated\t0.0009 ns\t0.0039 ns\t0.0036 ns\t0.0000 ns\t- GetDescriptionReflection\t1,380.4979 ns\t15.1089 ns\t13.3937 ns\t1,382.9476 ns\t264 B GetDescriptionCachedReflection\t22.8844 ns\t0.3856 ns\t0.3607 ns\t22.8364 ns\t24 B GetDescriptionCodeGenerated\t0.0035 ns\t0.0057 ns\t0.0053 ns\t0.0000 ns\t- IsDefinedCodeReflection\t48.7961 ns\t0.9675 ns\t1.0352 ns\t48.5573 ns\t24 B IsDefinedCodeReflectionCached\t21.4452 ns\t0.3169 ns\t0.2965 ns\t21.3938 ns\t24 B IsDefinedCodeGenerated\t0.0012 ns\t0.0041 ns\t0.0037 ns\t0.0000 ns\t- // * Warnings * ZeroMeasurement EnumBench.GetNameCodeGenerated: Default -&gt; The method duration is indistinguishable from the empty method duration EnumBench.GetDescriptionCodeGenerated: Default -&gt; The method duration is indistinguishable from the empty method duration EnumBench.IsDefinedCodeGenerated: Default -&gt; The method duration is indistinguishable from the empty method duration // * Legends * Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Median : Value separating the higher half of all measurements (50th percentile) Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ns : 1 Nanosecond (0.000000001 sec) Viewing Compiler Generated files​ Add the following to the csproj file: &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Don't include the output from a previous source generator execution into future runs; the */** trick here ensures that there's at least one subdirectory, which is our key that it's coming from a source generator as opposed to something that is coming from some other tool. --&gt; &lt;Compile Remove=&quot;$(CompilerGeneratedFilesOutputPath)/*/**/*.cs&quot; /&gt; &lt;/ItemGroup&gt; Build Status​ Branch\tStatusmain release Changelog​ View changelog Contributors​  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#about","content":" note Enum / description to string  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#example-source-csproj-source-files","content":" CSharp ProjectProgram.csColors.cs This is the CSharp Project that references CredFetoEnum &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Credfeto.Enumeration.Source.Generation&quot; Version=&quot;1.1.0.138&quot; OutputItemType=&quot;Analyzer&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EnumClassDemo.ColorsGeneratedExtensions.generated.cs using System; using System.CodeDom.Compiler; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Runtime.CompilerServices; namespace EnumClassDemo; [GeneratedCode(tool: &quot;Credfeto.Enumeration.Source.Generation.EnumGenerator&quot;, version: &quot;1.1.0.138+a4e45a10ca3da5e916ae17843913bfff8c33cdef&quot;)] public static class ColorsGeneratedExtensions { [MethodImpl(MethodImplOptions.AggressiveInlining)] public static string GetName(this Colors value) { return value switch { Colors.None =&gt; nameof(Colors.None), Colors.Red =&gt; nameof(Colors.Red), Colors.Green =&gt; nameof(Colors.Green), Colors.Blue =&gt; nameof(Colors.Blue), _ =&gt; ThrowInvalidEnumMemberException(value: value) }; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public static string GetDescription(this Colors value) { return value switch { Colors.None =&gt; &quot;This should be never seen&quot;, _ =&gt; GetName(value) }; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool IsDefined(this Colors value) { return value is Colors.None or Colors.Red or Colors.Green or Colors.Blue; } public static string ThrowInvalidEnumMemberException(this Colors value) { #if NET7_0_OR_GREATER throw new UnreachableException(message: &quot;Colors: Unknown enum member&quot;); #else throw new ArgumentOutOfRangeException(nameof(value), actualValue: value, message: &quot;Unknown enum member&quot;); #endif } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#download-example-net--c","content":" tip Download Example project CredFetoEnum   ","version":"Next","tagName":"h3"},{"title":"Share CredFetoEnum​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#share-credfetoenum","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/CredFetoEnum  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"CredFetoEnum by Mark Ridgwell","url":"/RSCG_Examples/v2/docs/CredFetoEnum#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"Dapper.AOT by Marc Gravell","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Dapper.AOT","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#info","content":" info Name: Dapper.AOT Build time (AOT) tools for Dapper Author: Marc Gravell NuGet:https://www.nuget.org/packages/Dapper.AOT/ You can find more details at https://aot.dapperlib.dev/ Source: https://github.com/DapperLib/DapperAOT  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#original-readme","content":" note Let's face it: ADO.NET is a complicated API, and writing &quot;good&quot; ADO.NET code by hand is time consuming and error-prone. But a lot of times you also don't want the ceremony of an ORM like EF or LLBLGenPro - you just want to execute SQL! For years now, Dapper helped by providing a great low-friction way of talking to arbitrary ADO.NET databases, handling command preparation, invocation, and result parsing. Dapper.AOT radically changes how Dapper works, generating the necessary code during build, and offers a range of usage guidance to improve how you use Dapper. Getting Started | Documentation  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#about","content":" note Generating AOT code for Dapper -hydrating classes from SQL queries.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#example-source-csproj-source-files","content":" CSharp ProjectDapperDemo.csprojProgram.csProduct.csglobals.cs This is the CSharp Project that references Dapper.AOT &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Dapper&quot; Version=&quot;2.1.35&quot; /&gt; &lt;PackageReference Include=&quot;Dapper.AOT&quot; Version=&quot;1.0.31&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Data.SqlClient&quot; Version=&quot;5.2.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);Dapper.AOT&lt;/InterceptorsPreviewNamespaces&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DapperDemo.generated.cs #nullable enable namespace Dapper.AOT // interceptors must be in a known namespace { file static class DapperGeneratedInterceptors { [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(&quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\Dapper.AOT\\\\src\\\\DapperDemo\\\\Product.cs&quot;, 8, 93)] internal static global::DapperDemo.Product QueryFirst0(this global::System.Data.IDbConnection cnn, string sql, object? param, global::System.Data.IDbTransaction? transaction, int? commandTimeout, global::System.Data.CommandType? commandType) { // Query, TypedResult, HasParameters, SingleRow, Text, AtLeastOne, BindResultsByName, KnownParameters // takes parameter: &lt;anonymous type: int productId&gt; // parameter map: productId // returns data: global::DapperDemo.Product global::System.Diagnostics.Debug.Assert(!string.IsNullOrWhiteSpace(sql)); global::System.Diagnostics.Debug.Assert((commandType ?? global::Dapper.DapperAotExtensions.GetCommandType(sql)) == global::System.Data.CommandType.Text); global::System.Diagnostics.Debug.Assert(param is not null); return global::Dapper.DapperAotExtensions.Command(cnn, transaction, sql, global::System.Data.CommandType.Text, commandTimeout.GetValueOrDefault(), CommandFactory0.Instance).QueryFirst(param, RowFactory0.Instance); } private static global::Dapper.CommandFactory&lt;object?&gt; DefaultCommandFactory =&gt; global::Dapper.CommandFactory.Simple; private sealed class RowFactory0 : global::Dapper.RowFactory&lt;global::DapperDemo.Product&gt; { internal static readonly RowFactory0 Instance = new(); private RowFactory0() {} public override object? Tokenize(global::System.Data.Common.DbDataReader reader, global::System.Span&lt;int&gt; tokens, int columnOffset) { for (int i = 0; i &lt; tokens.Length; i++) { int token = -1; var name = reader.GetName(columnOffset); var type = reader.GetFieldType(columnOffset); switch (NormalizedHash(name)) { case 926444256U when NormalizedEquals(name, &quot;id&quot;): token = type == typeof(int) ? 0 : 3; // two tokens for right-typed and type-flexible break; case 2369371622U when NormalizedEquals(name, &quot;name&quot;): token = type == typeof(string) ? 1 : 4; break; case 2521315361U when NormalizedEquals(name, &quot;productid&quot;): token = type == typeof(string) ? 2 : 5; break; } tokens[i] = token; columnOffset++; } return null; } public override global::DapperDemo.Product Read(global::System.Data.Common.DbDataReader reader, global::System.ReadOnlySpan&lt;int&gt; tokens, int columnOffset, object? state) { global::DapperDemo.Product result = new(); foreach (var token in tokens) { switch (token) { case 0: result.ID = reader.GetInt32(columnOffset); break; case 3: result.ID = GetValue&lt;int&gt;(reader, columnOffset); break; case 1: result.Name = reader.GetString(columnOffset); break; case 4: result.Name = GetValue&lt;string&gt;(reader, columnOffset); break; case 2: result.ProductId = reader.GetString(columnOffset); break; case 5: result.ProductId = GetValue&lt;string&gt;(reader, columnOffset); break; } columnOffset++; } return result; } } private sealed class CommandFactory0 : global::Dapper.CommandFactory&lt;object?&gt; // &lt;anonymous type: int productId&gt; { internal static readonly CommandFactory0 Instance = new(); public override void AddParameters(in global::Dapper.UnifiedCommand cmd, object? args) { var typed = Cast(args, static () =&gt; new { productId = default(int) }); // expected shape var ps = cmd.Parameters; global::System.Data.Common.DbParameter p; p = cmd.CreateParameter(); p.ParameterName = &quot;productId&quot;; p.DbType = global::System.Data.DbType.Int32; p.Direction = global::System.Data.ParameterDirection.Input; p.Value = AsValue(typed.productId); ps.Add(p); } public override void UpdateParameters(in global::Dapper.UnifiedCommand cmd, object? args) { var typed = Cast(args, static () =&gt; new { productId = default(int) }); // expected shape var ps = cmd.Parameters; ps[0].Value = AsValue(typed.productId); } public override bool CanPrepare =&gt; true; } } } namespace System.Runtime.CompilerServices { // this type is needed by the compiler to implement interceptors - it doesn't need to // come from the runtime itself, though [global::System.Diagnostics.Conditional(&quot;DEBUG&quot;)] // not needed post-build, so: evaporate [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)] sealed file class InterceptsLocationAttribute : global::System.Attribute { public InterceptsLocationAttribute(string path, int lineNumber, int columnNumber) { _ = path; _ = lineNumber; _ = columnNumber; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#download-example-net--c","content":" tip Download Example project Dapper.AOT   ","version":"Next","tagName":"h3"},{"title":"Share Dapper.AOT​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#share-dapperaot","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dapper.AOT  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Database\" has the following generators:​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#category-database-has-the-following-generators","content":" 1 Breezy  2 Dapper.AOT  3 EntityLengths.Generator  4 Gedaq  5 TableStorage  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Dapper.AOT by Marc Gravell","url":"/RSCG_Examples/v2/docs/Dapper.AOT#see-category","content":" Database ","version":"Next","tagName":"h3"},{"title":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#info","content":" info Name: Datacute.EmbeddedResourcePropertyGenerator This project generates properties for embedded resources in a project. Author: Stephen Denne NuGet:https://www.nuget.org/packages/Datacute.EmbeddedResourcePropertyGenerator/ You can find more details at https://github.com/datacute/EmbeddedResourcePropertyGenerator/ Source: https://github.com/datacute/EmbeddedResourcePropertyGenerator/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#original-readme","content":" note Embedded Resource Property Generator The Embedded Resource Property Generator is a Source Generator which generates properties for text file embedded resources in a project, in a similar way to how properties are generated from the string resources in .resx files. By adding the [EmbeddedResourceProperties] attribute to a partial class, and specifying the filename extension and folder path to search, the source generator will add a property to the class for each matching embedded resource file. Accessing the property will return the text content of the embedded resource file. Why not just use a resx file?​ The use case for this project is when you have a large number of text files that you want to embed in your project, such as SQL queries, and you wish to develop these files with an external editor that supports syntax highlighting, execution, debugging, and other features. While resx files do support including files, doing so requires either the use of another custom editor, or manipulating the xml of the resx file directly. What's wrong with just using Assembly.GetManifestResourceStream?​ The purpose of providing properties to access the text, is to aid the developer by generating doc-comments for the properties, showing the first few lines of the file. /// &lt;summary&gt;Text value of the Embedded Resource: GoodIndenting.cypher&lt;/summary&gt; /// &lt;value&gt; /// &lt;code&gt; /// MERGE (n) /// ON CREATE SET n.prop = 0 /// MERGE (a:A)-[:T]-(b:B) /// ON CREATE SET a.name = 'me' /// ON MATCH SET b.name = 'you' /// RETURN a.prop /// &lt;/code&gt; /// &lt;/value&gt; /// &lt;remarks&gt; /// The value is read from the embedded resource on first access. /// &lt;/remarks&gt; public static string GoodIndenting =&gt; // Generated code to read the resource &quot;Namespace.ClassName.GoodIndenting.cypher&quot;; The full names of the embedded resources are also generated, and no longer need to be supplied by the developer, making it easy to move the location of the resource files to another directory, without needing to find and fix all the references to the resource names. Usage​ Add a reference to the EmbeddedResourcePropertyGenerator project.Add the following section to your .csproj file, to include all EmbeddedResource files as Additional Files for the source generators: &lt;PropertyGroup&gt; &lt;AdditionalFileItemNames&gt;$(AdditionalFileItemNames);EmbeddedResource&lt;/AdditionalFileItemNames&gt; &lt;/PropertyGroup&gt; Add a directory to your project to group the files you want to embed.Add text files to your project, in that directory, and set their Build Action to EmbeddedResource. &gt; SqlQueries SelectAll.sql SelectById.sql Program.cs &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;SqlQueries\\SelectAll.sql&quot; /&gt; &lt;EmbeddedResource Include=&quot;SqlQueries\\SelectById.sql&quot;/&gt; &lt;/ItemGroup&gt; Add a partial class to your code.Include a using statement to the namespace of the code generator.Put the attribute [EmbeddedResourcePropertyGenerator] on the class.Specify the extension and folder path to search for embedded resources.Use the properties generated on the partial class. using Datacute.EmbeddedResourcePropertyGenerator; [EmbeddedResourceProperties(&quot;.sql&quot;, &quot;SqlQueries&quot;)] public static partial class SqlQuery; class Program { static void Main() { Console.WriteLine(SqlQuery.SelectAll); } } Localisation and External Overrides​ Localisation and External Overrides are not supported. If you need these features, consider using a resx file instead. Non-text File Types​ This project expects text files so that it can generate properties that are strings. It currently expects UTF-8 encoded files. If you need to embed other types of files, use theAssembly.GetManifestResourceStream method directly. Extending the Behaviour​ The generated code includes a private nested class EmbeddedResource containing: Method or Class\tPurposeRead(string resourceName)\tMethod for reading embedded resources BackingField\tNested class caching the property values ResourceName\tNested class holding the resource names The implementation supports including two partial methods that can be implemented in the same partial class as the generated properties. If the partial methods are not implemented, the calls to them are removed, and the code effectively reduces to: public static string Example =&gt; EmbeddedResource.BackingField.Example ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Example); Partial methods:​ ReadEmbeddedResourceValue - This method is called to allow the class to override how the value representing the content of the embedded resource is obtained. If the backingField parameter is null when this method ends, the default implementation will be used.AlterEmbeddedResourceReturnValue - This method is called after the text content has been read, and can be used to modify the text content before it is returned. Altering the returned value does not affect the value stored in the backing field. [EmbeddedResourceProperties(&quot;.sql&quot;, &quot;SqlQueries&quot;)] public static partial class SqlQuery { static partial void ReadEmbeddedResourceValue( ref string? backingField, string resourceName, string propertyName) { // This method is called before the default implementation. // The default implementation only reads the resource // if the backingField is null, so by setting it in this method, // the default implementation can be bypassed. // The backingField is a reference to a static field // for the property, and will be null for the first call, // but will retain the value for subsequent calls // for the same property. // Use custom logic to read the text content given the names // of the resource, and of the property. backingField ??= CustomReader(resourceName, propertyName); } static partial void AlterEmbeddedResourceReturnValue( ref string value, string resourceName, string propertyName); { // The value parameter is a reference to a variable that // will be returned as the value of the property. // Implement custom logic to alter the value. value = CustomValueAlteringMethod(value, resourceName, propertyName); } } This is an example of the code generated for a property, showing how the partial methods are called: /// &lt;summary&gt;Text value of the Embedded Resource: Example.txt&lt;/summary&gt; /// &lt;value&gt; /// &lt;code&gt; /// This is the content of the Example.txt file. /// Only the first few lines are shown here. /// &lt;/code&gt; /// &lt;/value&gt; /// &lt;remarks&gt; /// The value is read from the embedded resource on first access. /// &lt;/remarks&gt; public static string Example { get { ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Example, EmbeddedResource.ResourceName.Example, &quot;Example&quot;); var value = EmbeddedResource.BackingField.Example ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Example); AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Example, &quot;Example&quot;); return value; } } Thanks​ Thanks to Andrew Lock for his Series: Creating a source generator. Future Enhancements​ Add an option to leave out the Read method. It is now included in the generated code for each class, but an implementation of the ReadEmbeddedResourceValue partial method might make it unnecessary. Support for alternative text encodings. Overriding ReadEmbeddedResourceValue is a technique that can be used to read the text content of the embedded resource with a different encoding, but the doc-comment will still be generated expecting UTF-8. Support for specifying the number of lines to include in the doc-comment (including zero to exclude the code section). This is currently set to 10 lines. Support generating text formatting methods. Call CompositeFormat.Parse on the loaded text, and additionally count the number of format items, and generate a method that takes the same number of arguments.Using a resx file is probably a better fit that adding this feature. Support generating ReadOnlySpan&lt;byte&gt; properties instead of string The decoding from utf-8 may not be needed.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#about","content":" note Generating class to access easy the embedded resource  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csTestData.csCountries.txt This is the CSharp Project that references Datacute.EmbeddedResourcePropertyGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;TestData\\Countries.txt&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Datacute.EmbeddedResourcePropertyGenerator&quot; Version=&quot;1.0.0&quot; &gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;AdditionalFileItemNames&gt;$(AdditionalFileItemNames);EmbeddedResource&lt;/AdditionalFileItemNames&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EmbedDemo.TestData.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the Datacute.EmbeddedResourcePropertyGenerator. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable namespace EmbedDemo; /// &lt;summary&gt; /// This class's properties are generated from project files meeting the criteria: /// &lt;list type=&quot;bullet&quot;&gt; /// &lt;item&gt; /// &lt;description&gt;they are both an &lt;c&gt;EmbeddedResource&lt;/c&gt; and an &lt;c&gt;AdditionalFile&lt;/c&gt;&lt;/description&gt; /// &lt;/item&gt; /// &lt;item&gt; /// &lt;description&gt;they are in the project folder &lt;c&gt;TestData&lt;/c&gt;&lt;/description&gt; /// &lt;/item&gt; /// &lt;item&gt; /// &lt;description&gt;they have the extension &lt;c&gt;.txt&lt;/c&gt;&lt;/description&gt; /// &lt;/item&gt; /// &lt;/list&gt; /// &lt;/summary&gt; public static partial class TestData { private static class EmbeddedResource { public static string Read(string resourceName) { var assembly = typeof(TestData).Assembly; using var stream = assembly.GetManifestResourceStream(resourceName)!; using var streamReader = new global::System.IO.StreamReader(stream, global::System.Text.Encoding.UTF8); var resourceText = streamReader.ReadToEnd(); return resourceText; } public static class BackingField { public static string? Countries; } public static class ResourceName { public const string Countries = &quot;EmbedDemo.TestData.Countries.txt&quot;; } } static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName); static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName); /// &lt;summary&gt;Text value of the Embedded Resource: Countries.txt&lt;/summary&gt; /// &lt;value&gt; /// &lt;code&gt; /// USA /// Germany /// France /// Romania /// Italy /// /// &lt;/code&gt; /// &lt;/value&gt; /// &lt;remarks&gt; /// The value is read from the embedded resource on first access. /// &lt;/remarks&gt; public static string Countries { get { ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Countries, EmbeddedResource.ResourceName.Countries, &quot;Countries&quot;); var value = EmbeddedResource.BackingField.Countries ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Countries); AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Countries, &quot;Countries&quot;); return value; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#download-example-net--c","content":" tip Download Example project Datacute.EmbeddedResourcePropertyGenerator   ","version":"Next","tagName":"h3"},{"title":"Share Datacute.EmbeddedResourcePropertyGenerator​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#share-datacuteembeddedresourcepropertygenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Datacute.EmbeddedResourcePropertyGenerator by Stephen Denne","url":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"Darp.BinaryObjects by Ross Light GmbH","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#info","content":" info Name: Darp.BinaryObjects A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions for binary serialization. Author: Ross Light GmbH NuGet:https://www.nuget.org/packages/Darp.BinaryObjects/ You can find more details at https://github.com/rosslight/Darp.BinaryObjects Source: https://github.com/rosslight/Darp.BinaryObjects  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#original-readme","content":" note Darp.BinaryObjects A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions.​ [!IMPORTANT] This package is under heavy development. Anything is subject to change. You should use the source generation when you want: Serialization to a buffer of bytesDeserialization from a buffer already completely receivedEndianness during serializationCommon interfaces for serialization are required which allow to implement more complex scenarios by hand without the generatorUsage of something like BinaryPrimitives but for more complex typesCan work with a minimum c# LanguageVersion of 11 and net8.0 / net9.0 If these requirements do not meet your expectations, check out those other wonderful projects Several binary serializers. e.g. MemoryPack, BinaryPack, ... which are great if direct binary serialization is not neededSerialization libraries relying on reflection. e.g. HyperSerializerStructPacker - not supporting allocation less packing/unpackingBinarySerializer - Allows for binary serialization with a way larger feature set but more difficult to understand and relying on reflection Supported properties​ Here is a list of the property types currently supported by the library: Unmanaged types: bool, sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double BinaryObjects implementing IWritable or IReadable Blittable types Enums Other .NET types: BitArray For all of these types, it should be possible to define as array types: Memory abstractions: ReadOnlyMemory&lt;T&gt; Arrays: T[] Lists: List&lt;T&gt; Collections: IEnumerable&lt;T&gt;, IReadOnlyCollection&lt;T&gt;, ICollection&lt;T&gt;, IReadOnlyList&lt;T&gt;, IList&lt;T&gt; To control these types there are attributes BinaryIgnore: Ignore some members BinaryElementCount: Sets the number of elements in an array BinaryReadRemaining: Reads the remaining into an array BinaryLength: Sets the length of a member Unplanned: Unmanaged types have no clearly defined length / endianness: nint, nuint, decimalMultidimensional arrays (e.g. T[,], T[,,], etc.)Jagged arrays (e.g. T[][], etc.)Dictionaries: Dictionary&lt;TKey, TValue&gt;, IDictionary&lt;TKey, TValue&gt; and IReadOnlyDictionary&lt;TKey, TValue&gt;Nullable value types: Nullable&lt;T&gt; or T? What is serialized?​ Any real, user-defined member in a class or struct declaration Any field or auto property which is settable or has a parameter with matching type and name in the constructor If there are multiple constructors defined the one with a BinaryConstructorAttribute is being used There are warnings if: The constructor cannot be resolvedThere are multiple constructors but none with a BinaryConstructorAttributeA member is readonly and does not have a matching constructor argument or is explicitly ignored How it's supposed to work​ Let's pretend we have a series of bytes: 01020003040506 A: 01 B: 0200 Data: 03040506 We now want to read an object from these bytes similar to how we would do with BinaryPrimitives: [BinaryObject] public readonly record struct SomeTestStruct(byte A, ushort B, ReadOnlyMemory&lt;byte&gt; Data); Normally, you would have to write serialization methods for yourself. By adding the BinaryObjectAttribute, this is done automatically by the source generator. Usage​ // Define your object [BinaryObject] partial record struct YourStruct(ushort A, byte B); // Read the struct from the buffer using either little or big endian format var buffer = Convert.FromHexString(&quot;AABBCC&quot;); var success = YourStruct.TryReadLittleEndian(source: buffer, out var value); var success2 = YourStruct.TryReadBigEndian(source: buffer, out var value2, out int bytesRead); // Get the actual size of the struct var size = value.GetByteCount(); // Write the values back to a buffer var writeBuffer = new byte[size]; var success3 = value.TryWriteLittleEndian(destination: writeBuffer); var success4 = value2.TryWriteLittleEndian(destination: writeBuffer, out int bytesWritten); The code generated by the struct will attempt to maximize readability by still maintaining performance and as little allocations as possible. Generated code // &lt;auto-generated/&gt; #nullable enable using BinaryHelpers = global::Darp.BinaryObjects.BinaryHelpers; using NotNullWhenAttribute = global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute; namespace Your.Namespace; /// &lt;remarks&gt; &lt;list type=&quot;table&quot;&gt; /// &lt;item&gt; &lt;term&gt;&lt;b&gt;Field&lt;/b&gt;&lt;/term&gt; &lt;description&gt;&lt;b&gt;Byte Length&lt;/b&gt;&lt;/description&gt; &lt;/item&gt; /// &lt;item&gt; &lt;term&gt;&lt;see cref=&quot;A&quot;/&gt;&lt;/term&gt; &lt;description&gt;2&lt;/description&gt; &lt;/item&gt; /// &lt;item&gt; &lt;term&gt;&lt;see cref=&quot;B&quot;/&gt;&lt;/term&gt; &lt;description&gt;1&lt;/description&gt; &lt;/item&gt; /// &lt;item&gt; &lt;term&gt; --- &lt;/term&gt; &lt;description&gt;3&lt;/description&gt; &lt;/item&gt; /// &lt;/list&gt; &lt;/remarks&gt; public partial record struct YourStruct : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable&lt;YourStruct&gt; { /// &lt;inheritdoc /&gt; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public int GetByteCount() =&gt; 3; /// &lt;inheritdoc /&gt; public bool TryWriteLittleEndian(global::System.Span&lt;byte&gt; destination) =&gt; TryWriteLittleEndian(destination, out _); /// &lt;inheritdoc /&gt; public bool TryWriteLittleEndian(global::System.Span&lt;byte&gt; destination, out int bytesWritten) { bytesWritten = 0; if (destination.Length &lt; 3) return false; BinaryHelpers.WriteUInt16LittleEndian(destination[0..], this.A); BinaryHelpers.WriteUInt8(destination[2..], this.B); bytesWritten += 3; return true; } /// &lt;inheritdoc /&gt; public bool TryWriteBigEndian(global::System.Span&lt;byte&gt; destination) =&gt; TryWriteBigEndian(destination, out _); /// &lt;inheritdoc /&gt; public bool TryWriteBigEndian(global::System.Span&lt;byte&gt; destination, out int bytesWritten) { bytesWritten = 0; if (destination.Length &lt; 3) return false; BinaryHelpers.WriteUInt16BigEndian(destination[0..], this.A); BinaryHelpers.WriteUInt8(destination[2..], this.B); bytesWritten += 3; return true; } /// &lt;inheritdoc /&gt; public static bool TryReadLittleEndian(global::System.ReadOnlySpan&lt;byte&gt; source, out YourStruct value) =&gt; TryReadLittleEndian(source, out value, out _); /// &lt;inheritdoc /&gt; public static bool TryReadLittleEndian(global::System.ReadOnlySpan&lt;byte&gt; source, out YourStruct value, out int bytesRead) { bytesRead = 0; value = default; if (source.Length &lt; 3) return false; var ___readA = BinaryHelpers.ReadUInt16LittleEndian(source[0..]); var ___readB = BinaryHelpers.ReadUInt8(source[2..]); bytesRead += 3; value = new YourStruct(___readA, ___readB); return true; } /// &lt;inheritdoc /&gt; public static bool TryReadBigEndian(global::System.ReadOnlySpan&lt;byte&gt; source, out YourStruct value) =&gt; TryReadBigEndian(source, out value, out _); /// &lt;inheritdoc /&gt; public static bool TryReadBigEndian(global::System.ReadOnlySpan&lt;byte&gt; source, out YourStruct value, out int bytesRead) { bytesRead = 0; value = default; if (source.Length &lt; 3) return false; var ___readA = BinaryHelpers.ReadUInt16BigEndian(source[0..]); var ___readB = BinaryHelpers.ReadUInt8(source[2..]); bytesRead += 3; value = new YourStruct(___readA, ___readB); return true; } } Development​ After cloning the repository, you will find the following project structure: src/Darp.BinaryObjects contains public APIs and Attributessrc/Darp.BinaryObjects.Generator contains the actual source generatortest/Darp.BinaryObjects.Tests contains unit tests ensuring the generated files actually build and read/write as expectedtest/Darp.BInaryObjects.Generator.Tests contains snapshot tests to ensure the source generator generates valid files Code formatting​ This repository uses CSharpier (inspired by prettier) for code formatting. CSharpier should be installed automatically when building the solution as a local dotnet tool. To run it, execute dotnet csharpier . If you want to format you code on save, check out available Editor integration for your IDE. Testing​ Snapshot tests are done using Verify. If you want to optimize running these tests in your local IDE, you might adjust some settings. Please, check your local configuration in the VerifyDocs  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#about","content":" note Serialize bits of data  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#example-source-csproj-source-files","content":" CSharp ProjectProgram.csBitStruct.cs This is the CSharp Project that references Darp.BinaryObjects &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Darp.BinaryObjects&quot; Version=&quot;0.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BinaryObjectsGenerator.g.cs // &lt;auto-generated/&gt; #nullable enable namespace BitsDemo { /// &lt;remarks&gt; &lt;list type=&quot;table&quot;&gt; /// &lt;item&gt; &lt;term&gt;&lt;b&gt;Field&lt;/b&gt;&lt;/term&gt; &lt;description&gt;&lt;b&gt;Byte Length&lt;/b&gt;&lt;/description&gt; &lt;/item&gt; /// &lt;item&gt; &lt;term&gt;&lt;see cref=&quot;cmf&quot;/&gt;&lt;/term&gt; &lt;description&gt;1&lt;/description&gt; &lt;/item&gt; /// &lt;item&gt; &lt;term&gt;&lt;see cref=&quot;flg&quot;/&gt;&lt;/term&gt; &lt;description&gt;1&lt;/description&gt; &lt;/item&gt; /// &lt;item&gt; &lt;term&gt; --- &lt;/term&gt; &lt;description&gt;2&lt;/description&gt; &lt;/item&gt; /// &lt;/list&gt; &lt;/remarks&gt; partial record zlib_header : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable&lt;zlib_header&gt; { /// &lt;inheritdoc /&gt; [global::System.Diagnostics.Contracts.Pure] [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public int GetByteCount() =&gt; 2; /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public bool TryWriteLittleEndian(global::System.Span&lt;byte&gt; destination) =&gt; TryWriteLittleEndian(destination, out _); /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public bool TryWriteLittleEndian(global::System.Span&lt;byte&gt; destination, out int bytesWritten) { bytesWritten = 0; if (destination.Length &lt; 2) return false; global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..], this.cmf); global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..], this.flg); bytesWritten += 2; return true; } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public bool TryWriteBigEndian(global::System.Span&lt;byte&gt; destination) =&gt; TryWriteBigEndian(destination, out _); /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public bool TryWriteBigEndian(global::System.Span&lt;byte&gt; destination, out int bytesWritten) { bytesWritten = 0; if (destination.Length &lt; 2) return false; global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..], this.cmf); global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..], this.flg); bytesWritten += 2; return true; } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public static bool TryReadLittleEndian(global::System.ReadOnlySpan&lt;byte&gt; source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value) =&gt; TryReadLittleEndian(source, out value, out _); /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public static bool TryReadLittleEndian(global::System.ReadOnlySpan&lt;byte&gt; source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value, out int bytesRead) { bytesRead = 0; value = default; if (source.Length &lt; 2) return false; var ___readcmf = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]); var ___readflg = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]); bytesRead += 2; value = new zlib_header(___readcmf, ___readflg); return true; } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public static bool TryReadBigEndian(global::System.ReadOnlySpan&lt;byte&gt; source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value) =&gt; TryReadBigEndian(source, out value, out _); /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] public static bool TryReadBigEndian(global::System.ReadOnlySpan&lt;byte&gt; source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value, out int bytesRead) { bytesRead = 0; value = default; if (source.Length &lt; 2) return false; var ___readcmf = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]); var ___readflg = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]); bytesRead += 2; value = new zlib_header(___readcmf, ___readflg); return true; } } } namespace Darp.BinaryObjects.Generated { using Darp.BinaryObjects; using System; using System.Buffers.Binary; using System.CodeDom.Compiler; using System.Collections.Generic; using System.Runtime.CompilerServices; using System.Runtime.InteropServices; /// &lt;summary&gt;Helper methods used by generated BinaryObjects.&lt;/summary&gt; [GeneratedCodeAttribute(&quot;Darp.BinaryObjects.Generator&quot;, &quot;0.4.0.0&quot;)] file static class Utilities { /// &lt;summary&gt; Writes a &lt;c&gt;byte&lt;/c&gt; to the destination &lt;/summary&gt; [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void WriteUInt8(Span&lt;byte&gt; destination, byte value) { destination[0] = value; } /// &lt;summary&gt; Reads a &lt;c&gt;byte&lt;/c&gt; from the given source &lt;/summary&gt; [MethodImpl(MethodImplOptions.AggressiveInlining)] public static byte ReadUInt8(ReadOnlySpan&lt;byte&gt; source) { return source[0]; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#download-example-net--c","content":" tip Download Example project Darp.BinaryObjects   ","version":"Next","tagName":"h3"},{"title":"Share Darp.BinaryObjects​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#share-darpbinaryobjects","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Darp.BinaryObjects  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Bitwise\" has the following generators:​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#category-bitwise-has-the-following-generators","content":" 1 BitsKit  2 Darp.BinaryObjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Darp.BinaryObjects by Ross Light GmbH","url":"/RSCG_Examples/v2/docs/Darp.BinaryObjects#see-category","content":" Bitwise ","version":"Next","tagName":"h3"},{"title":"DeeDee by joh-pot","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DeeDee","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#info","content":" info Name: DeeDee Mediator pattern using source generation for .NET Author: joh-pot NuGet:https://www.nuget.org/packages/DeeDee/ You can find more details at https://github.com/joh-pot/DeeDee/ Source: https://github.com/joh-pot/DeeDee/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#original-readme","content":" note DeeDee Mediator using source generation for .NET Send in-process commands/queries to handlers either sync or async. The mechanism for sending is generated during compile time as overloads based on your code. Installation Nuget Package manager&gt;Install-Package DeeDee See wiki for full details  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#about","content":" note Mediatr generated data  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPingPong.csGenericLoggerHandler.cs This is the CSharp Project that references DeeDee &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;DeeDee&quot; Version=&quot;2.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Dispatcher.csIDispatcher.csIocExtensions.cs using System; using System.Threading; using System.Threading.Tasks; using System.Linq; using DeeDee.Models; using ServiceProvider = DeeDee.Models.ServiceProvider; namespace DeeDeeDemo.DeeDee.Generated.Models { public class Dispatcher : IDispatcher { private readonly ServiceProvider _serviceFactory; private readonly Lazy&lt;Next&lt;Pong&gt;&gt; _Ping_Pong_lazy; public Dispatcher(ServiceProvider service) { _serviceFactory = service; _Ping_Pong_lazy = new Lazy&lt;Next&lt;Pong&gt;&gt;(Build&lt;Ping, Pong&gt;); } public Pong Send(Ping request) { var context = new PipelineContext&lt;Pong&gt;(); Next&lt;Pong&gt; builtPipeline = _Ping_Pong_lazy.Value; return builtPipeline(request, ref context); } private NextAsync BuildAsync&lt;TRequest&gt;() where TRequest : IRequest { { var actions = _serviceFactory.GetServices&lt;IPipelineActionAsync&lt;TRequest&gt;&gt;(); var builtPipeline = actions.Aggregate((NextAsync)((req, ctx, tkn) =&gt; Task.CompletedTask), (next, pipeline) =&gt; (req, ctx, tkn) =&gt; pipeline.InvokeAsync((TRequest)req, ctx, next, tkn)); return builtPipeline; } } private Next Build&lt;TRequest&gt;() where TRequest : IRequest { { var actions = _serviceFactory.GetServices&lt;IPipelineAction&lt;TRequest&gt;&gt;(); var builtPipeline = actions.Aggregate((Next)((IRequest req, ref PipelineContext ctx) =&gt; { { } }), (next, pipeline) =&gt; (IRequest req, ref PipelineContext ctx) =&gt; pipeline.Invoke((TRequest)req, ref ctx, next)); return builtPipeline; } } private NextAsync&lt;TResponse&gt; BuildAsync&lt;TRequest, TResponse&gt;() where TRequest : IRequest&lt;TResponse&gt; { { var actions = _serviceFactory.GetServices&lt;IPipelineActionAsync&lt;TRequest, TResponse&gt;&gt;(); var builtPipeline = actions.Aggregate((NextAsync&lt;TResponse&gt;)((req, ctx, tkn) =&gt; Task.FromResult(ctx.Result)), (next, pipeline) =&gt; (req, ctx, tkn) =&gt; pipeline.InvokeAsync((TRequest)req, ctx, next, tkn)); return builtPipeline; } } private Next&lt;TResponse&gt; Build&lt;TRequest, TResponse&gt;() where TRequest : IRequest&lt;TResponse&gt; { { var actions = _serviceFactory.GetServices&lt;IPipelineAction&lt;TRequest, TResponse&gt;&gt;(); var builtPipeline = actions.Aggregate((Next&lt;TResponse&gt;)((IRequest&lt;TResponse&gt; req, ref PipelineContext&lt;TResponse&gt; ctx) =&gt; ctx.Result), (next, pipeline) =&gt; (IRequest&lt;TResponse&gt; req, ref PipelineContext&lt;TResponse&gt; ctx) =&gt; pipeline.Invoke((TRequest)req, ref ctx, next)); return builtPipeline; } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#download-example-net--c","content":" tip Download Example project DeeDee   ","version":"Next","tagName":"h3"},{"title":"Share DeeDee​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#share-deedee","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DeeDee  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mediator\" has the following generators:​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#category-mediator-has-the-following-generators","content":" 1 DeeDee  2 Immediate.Handlers  3 Mediator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DeeDee by joh-pot","url":"/RSCG_Examples/v2/docs/DeeDee#see-category","content":" Mediator ","version":"Next","tagName":"h3"},{"title":"DependencyModules.SourceGenerator by Ian Johnson","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#info","content":" info Name: DependencyModules.SourceGenerator Package Description Author: Ian Johnson NuGet:https://www.nuget.org/packages/DependencyModules.SourceGenerator/ https://www.nuget.org/packages/DependencyModules.Runtime/ You can find more details at https://github.com/ipjohnson/DependencyModules Source: https://github.com/ipjohnson/DependencyModules  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#original-readme","content":" note DependencyModules DependencyModules is a C# source generator package that uses attributes to create dependency injection registration modules. These modules can then be used to populate an IServiceCollection instance. Installation​ dotnet add package DependencyModules.Runtime dotnet add package DependencyModules.SourceGenerator Service Attributes​ [DependencyModule] - used to attribute class that will become dependency module (must be partial)[SingletonService] - registers service as AddSingleton[ScopedService] - registers service as AdddScoped[TransientService] - registers service as AddTransient // Registration example [DependencyModule] public partial class MyModule { } // registers SomeClass implementation for ISomeService [SingletonService] public class SomeClass : ISomeService { public string SomeProp =&gt; &quot;SomeString&quot;; } // registers OtherSerice implementation [TransientService] public class OtherService { public OtherService(ISomeService service) { SomeProp = service.SomeProp; } public string SomeProp { get; } } Container Instantiation​ AddModule - method adds modules to service collection var serviceCollection = new ServiceCollection(); serviceCollection.AddModule&lt;MyModule&gt;(); var provider = serviceCollection.BuildServiceProvider(); var service = provider.GetService&lt;OtherService&gt;(); Module Re-use​ DependencyModules creates an Attribute class that can be used to apply sub dependencies. // Modules can be re-used with the generated attributes [DependencyModule] [MyModule.Attribute] public partial class AnotherModule { } Parameters​ Sometimes you want to provide extra registration for your module. This can be achieved by adding a constructor to your module or optional properties. Note these parameters and properties will be correspondingly implemented in the module attribute. [DependencyModule] public partial class SomeModule : IServiceCollectionConfiguration { private bool _someFlag; public SomeModule(bool someFlag = false) { _someFlag = someFlag; } public string OptionalString { get; set; } = &quot;&quot;; public void ConfigureServices(IServiceCollection services) { if (_someFlag) { // custom registration } } } [DependencyModule] [SomeModule.Attribute(true, OptionalString = &quot;otherString&quot;)] public partial class SomeOtherModule { } Managing duplicate registration​ By default a module will only be loaded once, assuming attributes are used or the modules are specified in the same AddModules call. Seperate calls to AddModule will result in modules being loaded multiple times. If a module uses parameters it can be useful to load a module more than once. That can be accompilished by overriding the Equals and GetHashcode methods to allow for multiple loads. Services will be registered using an Add method by default. This can be overriden using the With property on individual service or at the DepedencyModule level. [SingletonService(With = RegistrationType.Try)] public class SomeService { } [DependencyModule(With = RegistrationType.Try)] public partial class SomeModule { } Realm​ By default, all dependencies are registered in all modules within the same assembly. The realm allows the developer to scope down the registration within a given module. // register only dependencies specifically marked for this realm [DependencyModule(OnlyRealm = true)] public partial class AnotherModule { } [SingletonService(ServiceType = typeof(ISomeInterface), Realm = typeof(AnotherModule))] public class SomeDep : ISomeInterface { } Keyed Registration​ Registration attributes have a Key property that allows for specifying the key at registration time. [SingletonService(Key = &quot;SomeKey&quot;)] public class KeyService : IKeyService { } // yields this registration line services.AddKeyedSingleton(typeof(IKeyService), &quot;SomeKey&quot;, typeof(KeyService)); Unit testing &amp; Mocking​ DependencyModules provides an xUnit extension to make testing much easier. It handles the population and construction of a service provider using specified modules. &gt; dotnet add package DependencyModules.xUnit &gt; dotnet add package DependencyModules.xUnit.NSubstitute // applies module &amp; nsubstitute support to all tests. // test attributes can be applied at the assembly, class, and test method level [assemlby: MyModule.Attribute] [assembly: NSubstituteSupport] public class OtherServiceTests { [ModuleTest] public void SomeTest(OtherService test, [Mock]ISomeService service) { service.SomeProp.Returns(&quot;some mock value&quot;); Assert.Equals(&quot;some mock value&quot;, test.SomeProp); } public void } Implementation​ Behind the scenes the library generates registration code that can be used with any IServiceCollection compatible DI container. Example generated code for SutModule.cs // SutModule.Dependencies.g.cs public partial class SutModule { private static int moduleField = DependencyRegistry&lt;SutModule&gt;.Add(ModuleDependencies); private static void ModuleDependencies(IServiceCollection services) { services.AddTransient(typeof(IDependencyOne), typeof(DependencyOne)); services.AddSingleton(typeof(IGenericInterface&lt;&gt;), typeof(GenericClass&lt;&gt;)); services.AddScoped(typeof(IScopedService), typeof(ScopedService)); services.AddSingleton(typeof(ISingletonService), typeof(SingletonService)); services.AddSingleton(typeof(IGenericInterface&lt;string&gt;), typeof(StringGeneric)); } } // SutModule.Modules.g.cs public partial class SutModule : IDependencyModule { static SutModule() { } // this method loads all dependencies into IServiceCollection. public void PopulateServiceCollection(IServiceCollection services) { DependencyRegistry&lt;SutModule&gt;.LoadModules(services, this); } void IDependencyModule.InternalApplyServices(IServiceCollection services) { DependencyRegistry&lt;SutModule&gt;.ApplyServices(services); } public override bool Equals(object? obj) { return obj is SutModule; } public override int GetHashCode() { return HashCode.Combine(base.GetHashCode()); } public class Attribute : System.Attribute, IDependencyModuleProvider { public IDependencyModule GetModule() { var newModule = new SutModule(); return newModule; } } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#about","content":" note Generating service dependencies from attributes. Also,by the author, a more advanced example you will find in the DemoWithTest.zip inside the zip file  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyModule.csIDatabase.csDatabase.csDatabaseCon.cs This is the CSharp Project that references DependencyModules.SourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;DependencyModules.Runtime&quot; Version=&quot;1.0.0-RC9074&quot; /&gt; &lt;PackageReference Include=&quot;DependencyModules.SourceGenerator&quot; Version=&quot;1.0.0-RC9074&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;9.0.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MyModule.858.Dependencies.g.csMyModule.858.Module.g.cs using DependencyModules.Runtime.Helpers; using InjectDemo; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.DependencyInjection.Extensions; public partial class MyModule { private static int moduleField = DependencyRegistry&lt;MyModule&gt;.Add(ModuleDependencies); private static void ModuleDependencies(IServiceCollection services) { services.AddSingleton(typeof(Database), typeof(Database)); services.AddSingleton(typeof(IDatabase), typeof(DatabaseCon)); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#download-example-net--c","content":" tip Download Example project DependencyModules.SourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share DependencyModules.SourceGenerator​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#share-dependencymodulessourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DependencyModules.SourceGenerator by Ian Johnson","url":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"depso by Yusuf Tarık Günaydın","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/depso","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#info","content":" info Name: depso Package Description Author: Yusuf Tarık Günaydın NuGet:https://www.nuget.org/packages/depso/ You can find more details at https://github.com/notanaverageman/Depso Source: https://github.com/notanaverageman/Depso  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#original-readme","content":" note Jab Compile Time Dependency Injection Jab provides a C# Source Generator based dependency injection container implementation. Fast startup (200x faster than Microsoft.Extensions.DependencyInjection). Details.Fast resolution (7x faster than Microsoft.Extensions.DependencyInjection). Details.No runtime dependencies.AOT and linker friendly, all code is generated during project compilation.Clean stack traces: Readable generated code: Registration validation. Container configuration issues become compiler errors: Incremental generation, .NET 5/6/7/8 SDK support, .NET Standard 2.0 support, [Unity support](https://github.com/notanaverageman/Depso/README.md#Unity-installation Example​ Add Jab package reference: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Jab&quot; Version=&quot;0.10.2&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; Define a service and implementation: internal interface IService { void M(); } internal class ServiceImplementation : IService { public void M() { } } Define a composition root and register services: [ServiceProvider] [Transient(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } Use the service provider: MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IService&gt;(); Features​ No runtime dependency, safe to use in librariesTransient, Singleton, Scoped service registrationNamed registrationsFactory registrationInstance registrationIEnumerable resolutionIDisposable and IAsyncDisposable supportIServiceProvider support The plan is to support the minimum feature set Microsoft.Extensions.DependencyInjection.Abstraction requires but NOT the IServiceCollection-based registration syntax as it is runtime based. Singleton services​ Singleton services are created once per container lifetime in a thread-safe manner and cached. To register a singleton service use the SingletonAttribute: [ServiceProvider] [Singleton(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } Singleton Instances​ If you want to use an existing object as a service define a property in the container declaration and use the Instance property of the SingletonAttribute to register the service: [ServiceProvider] [Singleton(typeof(IService), Instance = nameof(MyServiceInstance))] internal partial class MyServiceProvider { public IService MyServiceInstance { get;set; } } Then initialize the property during the container creation: MyServiceProvider c = new MyServiceProvider(); c.MyServiceInstance = new ServiceImplementation(); IService service = c.GetService&lt;IService&gt;(); Named services​ Use the Name property to assign a name to your service registrations and [FromNamedServices(&quot;...&quot;)] attribute to resolve a service using its name. [ServiceProvider] [Singleton(typeof(INotificationService), typeof(EmailNotificationService), Name=&quot;email&quot;)] [Singleton(typeof(INotificationService), typeof(SmsNotificationService), Name=&quot;sms&quot;)] [Singleton(typeof(Notifier))] internal partial class MyServiceProvider {} class Notifier { public Notifier( [FromNamedServices(&quot;email&quot;)] INotificationService email, [FromNamedServices(&quot;sms&quot;)] INotificationService sms) {} } NOTE: Jab also recognizes the [FromKeyedServices] attribute from Microsoft.Extensions.DependencyInjection. Factories​ Sometimes it's useful to provide a custom way to create a service instance without using the automatic construction selection. To do this define a method in the container declaration and use the Factory property of the SingletonAttribute or TransientAttribute to register the service: [ServiceProvider] [Transient(typeof(IService), Factory = nameof(MyServiceFactory))] internal partial class MyServiceProvider { public IService MyServiceFactory() =&gt; new ServiceImplementation(); } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IService&gt;(); When using with TransientAttribute the factory method would be invoked for every service resolution. When used with SingletonAttribute it would only be invoked the first time the service is requested. Similar to constructors, factories support parameter injection: [ServiceProvider] [Transient(typeof(IService), Factory = nameof(MyServiceFactory))] [Transient(typeof(SomeOtherService))] internal partial class MyServiceProvider { public IService MyServiceFactory(SomeOtherService other) =&gt; new ServiceImplementation(other); } Scoped Services​ Scoped services are created once per service provider scope. To create a scope use the CreateScope() method of the service provider. Service are resolved from the scope using the GetService&lt;IService&gt;() call. [ServiceProvider] [Scoped(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); using MyServiceProvider.Scope scope = c.CreateScope(); IService service = scope.GetService&lt;IService&gt;(); When the scope is disposed all IDisposable and IAsyncDisposable services that were resolved from it are disposed as well. Generic registration attributes​ You can use generic attributes to register services if your project targets net7.0 or net6.0 and has LangVersion set to preview. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFrameworks&gt;net7.0&lt;/TargetFrameworks&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt; Generic attributes allow declaration to be more compact by avoiding the typeof calls: [ServiceProvider] [Scoped&lt;IService, ServiceImplementation&gt;] [Import&lt;IMyModule&gt;] internal partial class MyServiceProvider { } Modules​ Often, a set of service registrations would represent a distinct set of functionality that can be included into arbitrary service provider. Modules are used to implement registration sharing. To define a module create an interface and mark it with ServiceProviderModuleAttribute. Service registrations can be listed in module the same way they are in the service provider. [ServiceProviderModule] [Singleton(typeof(IService), typeof(ServiceImplementation))] public interface IMyModule { } To use the module apply the Import attribute to the service provider type: [ServiceProvider] [Import(typeof(IMyModule))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IEnumerable&lt;IService&gt;&gt;(); Modules can import other modules as well. NOTE: module service and implementation types have to be accessible from the project where service provider is generated. Root services​ By default, IEnumerable&lt;...&gt; service accessors are only generated when requested by other service constructors. If you would like to have a root IEnumerable&lt;..&gt; accessor generated use the RootService parameter of the ServiceProvider attribute. The generator also scans all the GetService&lt;...&gt; usages and tries to all collected type arguments as the root service. [ServiceProvider(RootServices = new [] {typeof(IEnumerable&lt;IService&gt;)})] [Singleton(typeof(IService), typeof(ServiceImplementation))] [Singleton(typeof(IService), typeof(ServiceImplementation))] [Singleton(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IEnumerable&lt;IService&gt;&gt;(); Samples​ Console application​ Sample Jab usage in console application can be found in src/samples/ConsoleSample Performance​ The performance benchmark project is available in src/Jab.Performance/. Startup time​ The startup time benchmark measures time between application startup and the first service being resolved. | Method | Mean | Error | StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated | |------- |------------:|----------:|----------:|-------:|--------:|-------:|-------:|------:|----------:| | MEDI | 2,437.88 ns | 14.565 ns | 12.163 ns | 220.91 | 2.72 | 0.6332 | 0.0114 | - | 6632 B | | Jab | 11.03 ns | 0.158 ns | 0.123 ns | 1.00 | 0.00 | 0.0046 | - | - | 48 B | GetService​ The GetService benchmark measures the provider.GetService&lt;IService&gt;() call. | Method | Mean | Error | StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated | |------- |----------:|----------:|----------:|------:|--------:|-------:|------:|------:|----------:| | MEDI | 39.340 ns | 0.2419 ns | 0.2263 ns | 7.01 | 0.09 | 0.0023 | - | - | 24 B | | Jab | 5.619 ns | 0.0770 ns | 0.0643 ns | 1.00 | 0.00 | 0.0023 | - | - | 24 B | Unity installation​ Navigate to the Packages directory of your project.Adjust the project manifest file manifest.json in a text editor.Ensure https://registry.npmjs.org/ is part of scopedRegistries.Ensure com.pakrym is part of scopes.Add com.pakrym.jab to the dependencies, stating the latest version. A minimal example ends up looking like this: { &quot;scopedRegistries&quot;: [ { &quot;name&quot;: &quot;npmjs&quot;, &quot;url&quot;: &quot;https://registry.npmjs.org/&quot;, &quot;scopes&quot;: [ &quot;com.pakrym&quot; ] } ], &quot;dependencies&quot;: { &quot;com.pakrym.jab&quot;: &quot;0.10.2&quot;, ... } } Debugging locally​ Run dotnet build /t:CreateLaunchSettings in the Jab.Tests directory would update the Jab\\Properties\\launchSettings.json file to include csc invocation that allows F5 debugging of the generator targeting the Jab.Tests project.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#about","content":" note generating DI code  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.csDatabaseCon.cs This is the CSharp Project that references depso &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Depso&quot; Version=&quot;1.0.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Depso.Attributes.ServiceProvider.g.csDepso.Attributes.ServiceProviderModule.g.csDepso.MyServiceProvider.g.csDepso.MyServiceProvider.RegistrationMethods.g.csDepso.MyServiceProvider.Scoped.g.cs // &lt;auto-generated/&gt; #nullable enable namespace Depso { [global::System.AttributeUsage(global::System.AttributeTargets.Class)] internal sealed class ServiceProviderAttribute : global::System.Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#download-example-net--c","content":" tip Download Example project depso   ","version":"Next","tagName":"h3"},{"title":"Share depso​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#share-depso","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/depso  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"depso by Yusuf Tarık Günaydın","url":"/RSCG_Examples/v2/docs/depso#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#info","content":" info Name: DimonSmart.BuilderGenerator Generate builder classes via source generation. Simplifies object creation with Builder pattern. Author: Dmitry Dorogoy NuGet:https://www.nuget.org/packages/DimonSmart.BuilderGenerator/ You can find more details at https://github.com/DimonSmart/BuilderGenerator Source: https://github.com/DimonSmart/BuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#original-readme","content":" note BuilderGenerator BuilderGenerator is a Roslyn Source Generator that creates Builder classes at compile time. It�s especially helpful for classes with many properties, giving you a clear, explicit way to see what�s being initialized. You can even generate builders for third-party classes, and a simple hierarchy is supported, including links from child objects back to their parent. If you need something more specialized, take the generated code and adapt it to fit your own needs. Installation​ Install via NuGet: dotnet add package BuilderGenerator Or use your preferred IDE�s NuGet package manager interface. How It Works​ The BuilderGenerator uses two main approaches to specify which class to generate a builder for: Attribute directly on the class.Attribute on a �container� class where you specify TargetType in [GenerateBuilder(TargetType = typeof(YourClass))]. Below are some examples. Examples​ 1. Simple Scenario: Attribute on the Class​ In this example, we have a Person class and an Address class. We annotate them directly: csharp using BuilderGenerator.Runtime; namespace BuilderGenerator.Sample { public interface IPerson { } [GenerateBuilder] // Directly on the Person class public class Person : IPerson { public string? Name { get; set; } public int Age { get; set; } public Address? Address { get; set; } } [GenerateBuilder] // Directly on the Address class public class Address { public string? Street { get; set; } public string? City { get; set; } public IPerson? Person { get; set; } } } Thanks to these attributes, the Source Generator will create: PersonBuilder (with fluent methods Name(...), Age(...), Address(...))AddressBuilder (with fluent methods Street(...), City(...), Person(...)) Usage might look like: csharp var person = PersonBuilder.Create() .Name(&quot;John&quot;) .Age(30) // Here we invoke a nested Address builder .Address(addr =&gt; addr .Street(&quot;Main St.&quot;) .City(&quot;Metropolis&quot;) ) .Build(); After building, person becomes an instance of the Person class populated with those property values. 2. Container Approach: Attribute on Another Class​ Sometimes you might not want to mark the target class directly with [GenerateBuilder]. Instead, you can create a separate &quot;container&quot; class (or file) and specify which type it should generate a builder for: csharp using BuilderGenerator.Runtime; namespace BuilderGenerator.OtherSamples { [GenerateBuilder(TargetType = typeof(Person))] [GenerateBuilder(TargetType = typeof(Address))] public class PersonBuilderContainer { // Could be empty } // Meanwhile, Person and Address themselves have no direct attribute: public class Person { public string? Name { get; set; } public int Age { get; set; } public Address? Address { get; set; } } public class Address { public string? Street { get; set; } public string? City { get; set; } public IPerson? Person { get; set; } } } The generator will now produce PersonBuilderContainerBuilder.g.cs and AddressBuilderContainerBuilder.g.cs (or very similarly named files) that act as your fluent builder classes. Usage is the same pattern: csharp var person = PersonBuilderContainer.Create() .Name(&quot;Alice&quot;) .Age(25) .Address(addr =&gt; addr .Street(&quot;Baker St.&quot;) .City(&quot;London&quot;) ) .Build(); 3. Hierarchical Builder Example​ The above code already shows how you can nest calls, for example: csharp var person = PersonBuilder.Create() .Name(&quot;Bruce&quot;) .Age(42) .Address(a =&gt; a .Street(&quot;Gotham Rd.&quot;) .City(&quot;Gotham&quot;) ) .Build(); When Address(...) is called, the generator automatically creates a nested builder for Address. 4. Setting a Reference to the Parent​ In some scenarios, you may want an object to reference its �parent.� For instance, an Address might have a property Person Person { get; set; }. In your example, IPerson? Person { get; set; } is a reference back to the parent. The Source Generator includes a helper method called: csharp public TParent BuildAndSetParent&lt;TProperty&gt;( Expression&lt;Func&lt;TheChildClass, TProperty&gt;&gt; parentSelector ) where TProperty : class { // ... } This method allows you to set the parent reference in the child builder. Here�s a conceptual usage snippet (the code is somewhat simplified to illustrate the idea): csharp var personBuilder = PersonBuilder.Create(); var addressBuilder = AddressBuilder.Create(); // Suppose you want address.Person to be the person you are building // and want the final personBuilder to keep track of the newly built Address: addressBuilder .Street(&quot;Parent Av.&quot;) .City(&quot;Capital City&quot;) .BuildAndSetParent(a =&gt; a.Person); // &quot;a =&gt; a.Person&quot; indicates that the child Person property should refer back to the parent License​ 0BSD License: You�re free to use, copy, modify, distribute, and do pretty much anything else with BuilderGenerator. See the 0BSD text for details. Contributing​ If you encounter bugs or have feature requests, feel free to open an issue or submit a pull request on GitHub.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#about","content":" note Generating builder pattern code for classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references DimonSmart.BuilderGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;DimonSmart.BuilderGenerator&quot; Version=&quot;1.25310.2229&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenerateBuilderAttribute.g.csPersonBuilder.g.csPersonBuilderBuilder.g.csPersonBuilderContainerBuilder.g.cs using System; namespace DimonSmart.BuilderGenerator.Runtime { [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class GenerateBuilderAttribute : Attribute { public Type TargetType { get; set; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#download-example-net--c","content":" tip Download Example project DimonSmart.BuilderGenerator   ","version":"Next","tagName":"h3"},{"title":"Share DimonSmart.BuilderGenerator​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#share-dimonsmartbuildergenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Builder\" has the following generators:​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#category-builder-has-the-following-generators","content":" 1 Architect.DomainModeling  2 BuilderGenerator  3 DimonSmart.BuilderGenerator  4 Fluentify  5 Hsu.Sg.FluentMember  6 ShadowWriterBuilder  7 StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DimonSmart.BuilderGenerator by Dmitry Dorogoy","url":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator#see-category","content":" Builder ","version":"Next","tagName":"h3"},{"title":"DisposableHelpers by Clynt Neiko Rupinta","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DisposableHelpers","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#info","content":" info Name: DisposableHelpers Disposable helpers for IDisposable and IAsyncDisposable. Author: Clynt Neiko Rupinta NuGet:https://www.nuget.org/packages/DisposableHelpers/ You can find more details at https://github.com/Kiryuumaru/DisposableHelpers Source: https://github.com/Kiryuumaru/DisposableHelpers  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#original-readme","content":" note DisposableHelpers Disposable helpers for IDisposable and IAsyncDisposable with source generators. Also capable of both anonymous disposable and anonymous async disposable. NuGets Name\tInfoDisposableHelpers Installation​ // Install release version Install-Package DisposableHelpers // Install pre-release version Install-Package DisposableHelpers -pre Supported frameworks​ .NET Standard 2.0 and above - see https://github.com/dotnet/standard/blob/master/docs/versions.md for compatibility matrix Usage​ Disposable​ using DisposableHelpers; namespace YourNamespace { public class SampleDisposable : Disposable { private SampleUnmanagedResource resources; protected override void Dispose(bool disposing) { if (disposing) { resources.Release(); } base.Dispose(disposing); } } } Disposable Source Generator​ using DisposableHelpers.Attributes; namespace YourNamespace { [Disposable] public partial class SampleDisposable { private SampleUnmanagedResource resources; protected void Dispose(bool disposing) { if (disposing) { resources.Release(); } base.Dispose(disposing); } } } Anonymous Disposable​ using DisposableHelpers; namespace YourNamespace { public static class Program { private static SampleUnmanagedResource resources; public static void Main(string[] args) { Disposable disposable = new Disposable(disposing =&gt; { if (disposing) { resources.Release(); } }); disposable.Dispose(); } } } AsyncDisposable​ using DisposableHelpers; namespace YourNamespace { public class SampleAsyncDisposable : AsyncDisposable { private SampleAsyncUnmanagedResource resources; protected override async ValueTask Dispose(bool isDisposing) { if (isDisposing) { await resources.Release(); } return base.Dispose(isDisposing); } } } AsyncDisposable Source Generator​ using DisposableHelpers.Attributes; namespace YourNamespace { [AsyncDisposable] public partial class SampleAsyncDisposable { private SampleAsyncUnmanagedResource resources; protected async ValueTask Dispose(bool isDisposing) { if (isDisposing) { await resources.Release(); } return base.Dispose(isDisposing); } } } Anonymous AsyncDisposable​ using DisposableHelpers; namespace YourNamespace { public static class Program { private static SampleAsyncUnmanagedResource resources; public static async void Main(string[] args) { AsyncDisposable disposable = new AsyncDisposable(async disposing =&gt; { if (disposing) { await resources.Release(); } }); await disposable.DisposeAsync(); } } } Want To Support This Project?​ All I have ever asked is to be active by submitting bugs, features, and sending those pull requests down!.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#about","content":" note Generating boilerplate for thread safe Dispose  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDALDB.csConnectionDB.cs This is the CSharp Project that references DisposableHelpers &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;DisposableHelpers&quot; Version=&quot;1.1.16&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IDisposableGeneratorDemo.DALDB.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable namespace IDisposableGeneratorDemo { partial class DALDB : global::System.IDisposable { #nullable disable /// &lt;summary&gt; /// Finalizes an instance of the &lt;see cref = &quot;Disposable&quot;/&gt; class. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] ~DALDB() { Dispose(false); } /// &lt;summary&gt; /// Gets a value indicating whether this object is in the process of disposing. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public bool IsDisposing =&gt; global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalStarted, DisposalStarted) == DisposalStarted; /// &lt;summary&gt; /// Gets a value indicating whether this object has been disposed. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public bool IsDisposed =&gt; global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalComplete, DisposalComplete) == DisposalComplete; /// &lt;summary&gt; /// Gets a value indicating whether this object has been disposed or is in the process of being disposed. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public bool IsDisposedOrDisposing =&gt; global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalNotStarted, DisposalNotStarted) != DisposalNotStarted; /// &lt;summary&gt; /// Gets the object name, for use in any &lt;see cref = &quot;global::System.ObjectDisposedException&quot;/&gt; thrown by this object. /// &lt;/summary&gt; /// &lt;remarks&gt; /// Subclasses can override this property if they would like more control over the object name appearing in any &lt;see cref = &quot;global::System.ObjectDisposedException&quot;/&gt; /// thrown by this &lt;see cref = &quot;Disposable&quot;/&gt;. This can be particularly useful in debugging and diagnostic scenarios. /// &lt;/remarks&gt; /// &lt;value&gt; /// The object name, which defaults to the class name. /// &lt;/value&gt; #nullable enable [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected virtual string? ObjectName =&gt; GetType().FullName; #nullable disable [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] private const int DisposalNotStarted = 0; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] private const int DisposalStarted = 1; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] private const int DisposalComplete = 2; // see the constants defined above for valid values [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] private int disposeStage; /// &lt;summary&gt; /// Occurs when this object is about to be disposed. /// &lt;/summary&gt; #nullable enable [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public event global::System.EventHandler? Disposing; /// &lt;summary&gt; /// Disposes of this object, if it hasn't already been disposed. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public void Dispose() { if (global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalStarted, DisposalNotStarted) != DisposalNotStarted) { return; } OnDisposing(); Disposing = null; Dispose(true); global::System.GC.SuppressFinalize(this); global::System.Threading.Interlocked.Exchange(ref disposeStage, DisposalComplete); } /// &lt;summary&gt; /// Verifies that this object is not in the process of disposing, throwing an exception if it is. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected void VerifyNotDisposing() { if (IsDisposing) { throw new global::System.ObjectDisposedException(ObjectName); } } /// &lt;summary&gt; /// Verifies that this object has not been disposed, throwing an exception if it is. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected void VerifyNotDisposed() { if (IsDisposed) { throw new global::System.ObjectDisposedException(ObjectName); } } /// &lt;summary&gt; /// Verifies that this object is not being disposed or has been disposed, throwing an exception if either of these are true. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected void VerifyNotDisposedOrDisposing() { if (IsDisposedOrDisposing) { throw new global::System.ObjectDisposedException(ObjectName); } } /// &lt;summary&gt; /// Raises the &lt;see cref = &quot;Disposing&quot;/&gt; event. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;DisposableHelpers.SourceGenerators.DisposableGenerator&quot;, &quot;1.0.0.0&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] protected virtual void OnDisposing() { Disposing?.Invoke(this, new global::System.EventArgs()); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#download-example-net--c","content":" tip Download Example project DisposableHelpers   ","version":"Next","tagName":"h3"},{"title":"Share DisposableHelpers​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#share-disposablehelpers","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DisposableHelpers  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Disposer\" has the following generators:​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#category-disposer-has-the-following-generators","content":" 1 BenutomoAutomaticDisposeImplSourceGenerator  2 Coplt.Dropping  3 DisposableHelpers  4 Disposer  5 IDisposableGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DisposableHelpers by Clynt Neiko Rupinta","url":"/RSCG_Examples/v2/docs/DisposableHelpers#see-category","content":" Disposer ","version":"Next","tagName":"h3"},{"title":"Disposer by Hakan Fıstık","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Disposer","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#info","content":" info Name: Disposer A source generator for creating best-practice Disposing boilerplate using a [Disposable] attribute Author: Hakan Fıstık NuGet:https://www.nuget.org/packages/Disposer/ You can find more details at https://github.com/HakamFostok/Disposer Source: https://github.com/HakamFostok/Disposer  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#original-readme","content":" note Disposer A Source Generator package that generates extension methods for enums, to allow fast &quot;reflection&quot;. This source generator requires the .NET 6 SDK. You can target earlier frameworks like .NET Core 3.1 etc, but the SDK must be at least 6.0.100 Add the package to your application using dotnet add package Disposer This adds a &lt;PackageReference&gt; to your project. You can additionally mark the package as PrivateAsets=&quot;all&quot;. Setting PrivateAssets=&quot;all&quot; means any projects referencing this one won't get a reference to the Disposer package. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PackageReference Include=&quot;Disposer&quot; Version=&quot;1.0.0&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/Project&gt; Adding the package will automatically add a marker attribute, [Disposable], to your project. To use the generator, add the [EnumExtensions] attribute to an enum. For example: [Disposer.Disposable] public class MyClass { partial void DisposeManaged() { // free managed resources here } partial void DisposeUnmanaged() { // free Unmanaged resources here } } This will generate a class another partial class which implement IDisposable interface: partial class MyClass : global::System.IDisposable { partial void DisposeManaged(); partial void DisposeUnmanaged(); private bool disposed = false; ~MyClass() { Dispose(false); } private void Dispose(bool disposing) { if (disposed) return; if (disposing) { DisposeManaged(); } DisposeUnmanaged(); disposed = true; } public void Dispose() { Dispose(true); global::System.GC.SuppressFinalize(this); } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#about","content":" note Generates partials for dispose resources  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#example-source-csproj-source-files","content":" CSharp ProjectProgram.csConnectionDB.csDALDB.cs This is the CSharp Project that references Disposer &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Disposer&quot; Version=&quot;1.0.4&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DALDBDisposable.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the Disposer source generator // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ namespace IDisposableGeneratorDemo { partial class DALDB : global::System.IDisposable { partial void DisposeManaged(); partial void DisposeUnmanaged(); private bool disposed = false; ~DALDB() { Dispose(false); } private void Dispose(bool disposing) { if (disposed) return; if (disposing) { DisposeManaged(); } DisposeUnmanaged(); disposed = true; } public void Dispose() { Dispose(true); global::System.GC.SuppressFinalize(this); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#download-example-net--c","content":" tip Download Example project Disposer   ","version":"Next","tagName":"h3"},{"title":"Share Disposer​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#share-disposer","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Disposer  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Disposer\" has the following generators:​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#category-disposer-has-the-following-generators","content":" 1 BenutomoAutomaticDisposeImplSourceGenerator  2 Coplt.Dropping  3 DisposableHelpers  4 Disposer  5 IDisposableGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Disposer by Hakan Fıstık","url":"/RSCG_Examples/v2/docs/Disposer#see-category","content":" Disposer ","version":"Next","tagName":"h3"},{"title":"Dolly by Peter Andersson","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Dolly","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#info","content":" info Name: Dolly Clone .net objects using source generation Author: Peter Andersson NuGet:https://www.nuget.org/packages/Dolly/ You can find more details at https://github.com/AnderssonPeter/Dolly Source: https://github.com/AnderssonPeter/Dolly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#original-readme","content":" note Dolly Dolly Clone .net objects using source generation ·Report Bug·Request Feature· Table of Contents​ About the ProjectGetting StartedExampleBenchmarks About The Project​ Generate c# code to clone objects on the fly. Getting Started​ Add the Dolly nuget and add [Clonable] attribute to a class and ensure that the class is marked as partial.Add [CloneIgnore] to any property or field that you don't want to include in the clone.Call DeepClone() or ShallowClone() on the object. Example​ [Clonable] public partial class SimpleClass { public string First { get; set; } public int Second { get; set; } [CloneIgnore] public float DontClone { get; set; } } Should generate partial class SimpleClass : IClonable&lt;SimpleClass&gt; { object ICloneable.Clone() =&gt; this.DeepClone(); public SimpleClass DeepClone() =&gt; new SimpleClass() { First = First, Second = Second }; public SimpleClass ShallowClone() =&gt; new SimpleClass() { First = First, Second = Second }; } Benchmarks​ Method\tMean\tError\tStdDev\tRatio\tRatioSD\tGen0\tGen1\tAllocatedDolly\t124.5 ns\t1.59 ns\t1.49 ns\t1.00\t0.02\t0.0362\t-\t608 B DeepCloner\t457.7 ns\t7.01 ns\t6.56 ns\t3.68\t0.07\t0.0830\t-\t1392 B CloneExtensions\t566.2 ns\t9.61 ns\t8.52 ns\t4.55\t0.08\t0.0896\t-\t1504 B NClone\t4,308.0 ns\t62.01 ns\t58.01 ns\t34.61\t0.61\t0.5112\t0.0076\t8584 B FastCloner\t15,310.6 ns\t221.85 ns\t207.52 ns\t123.00\t2.16\t0.3967\t-\t6800 B AnyClone\t19,011.9 ns\t354.27 ns\t347.94 ns\t152.74\t3.25\t2.4414\t-\t41256 B  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#about","content":" note Clone objects with ease.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Dolly &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Dolly&quot; Version=&quot;0.0.7&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ClonableAttribute.g.csCloneIgnoreAttribute.g.csIClonable.g.csPerson.g.cs using System; namespace Dolly { [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class ClonableAttribute : Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#download-example-net--c","content":" tip Download Example project Dolly   ","version":"Next","tagName":"h3"},{"title":"Share Dolly​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#share-dolly","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dolly  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Clone\" has the following generators:​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#category-clone-has-the-following-generators","content":" 1 CopyTo  2 Dolly  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Dolly by Peter Andersson","url":"/RSCG_Examples/v2/docs/Dolly#see-category","content":" Clone ","version":"Next","tagName":"h3"},{"title":"DudNet by jwshyns","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DudNet","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#info","content":" info Name: DudNet Proxy-pattern source generator Author: jwshyns NuGet:https://www.nuget.org/packages/Jwshyns.DudNet/ You can find more details at https://github.com/jwshyns/DudNet Source: https://github.com/jwshyns/DudNet  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#original-readme","content":" note DudNet DudNet is a C# source generator for implementing a proxy pattern. Example​ Generating a proxy for a class is as simple as marking it with the ProxyServiceAttribute as follows: using DudNet.Attributes; public interface IExampleService { public void ExampleFunction(); public int ExampleFunctionWithArgumentAndReturn(int number); } [ProxyService] public class ExampleService : IExampleService { public void ExampleFunction(){ // omitted for brevity } public int ExampleFunctionWithArgumentAndReturn(int number){ // omitted for brevity } public void FunctionNotOnInterface(){ // ommitted for brevity } } Which would generate the following two classes: using System.Runtime.CompilerServices; using DudNet.Attributes; public partial class ExampleServiceProxy : IExampleService { private readonly IExampleService _service; public void ExampleFunction() { Interceptor(); ExampleFunctionInterceptor(); _service.ExampleFunction(); } public int ExampleFunctionWithArgumentAndReturn(int number) { Interceptor(); ExampleFunctionWithArgumentAndReturnInterceptor(number); _service.ExampleFunctionWithArgumentAndReturn(number); } partial void Interceptor([CallerMemberName]string callerName = null); partial void ExampleFunctionInterceptor(); partial void ExampleFunctionWithArgumentAndReturnInterceptor(int number); } and using DudNet.Attributes; public class ExampleServiceDud : IExampleService { public void ExampleFunction() { } public int ExampleFunctionWithArgumentAndReturn(int number) { } } These generated classes can be used by further implementing the partial proxy class as follows: public partial class ExampleServiceProxy : IExampleService { public ExampleServiceProxy(ExampleProxyService service) { // Some logic to determine whether you want to effectively &quot;disable&quot; the service if (Random.Shared.NextDouble() &gt; 0.5) { _service = service; return; } _service = new ExampleServiceDud(); } partial void Interceptor([CallerMemberName]string callerName = null) { Console.Writeline(&quot;'{caller}' was called&quot;, callerName); } partial void ExampleFunctionWithArgumentAndReturnInterceptor(int number) { if(number &gt; 5) { throw new Exception(&quot;Received number value '{number}' - too high!&quot;, number); } } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#about","content":" note Generate proxy classes for the principal classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references DudNet &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Jwshyns.DudNet&quot; Version=&quot;1.2.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonDud.g.csPersonProxy.g.cs using System.Runtime.CompilerServices; using DudNet.Attributes; using System.Runtime.CompilerServices; namespace DudNetDemo; /// &lt;inheritdoc cref=&quot;IPerson&quot;/&gt; public partial class PersonDud : IPerson { public string? FirstName { get { return (string?) default; } set { } } public string? LastName { get { return (string?) default; } set { } } public string FullName() { return (string) default; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#download-example-net--c","content":" tip Download Example project DudNet   ","version":"Next","tagName":"h3"},{"title":"Share DudNet​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#share-dudnet","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DudNet  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DudNet by jwshyns","url":"/RSCG_Examples/v2/docs/DudNet#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"DotnetYang by Westermo Network Technologies","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DotnetYang","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#info","content":" info Name: DotnetYang Package Description Author: Westermo Network Technologies NuGet:https://www.nuget.org/packages/DotnetYang/ You can find more details at https://github.com/westermo/DotnetYang Source: https://github.com/westermo/DotnetYang  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#original-readme","content":" note dotnetYang is a Roslyn source generator for using the .yang language to generate C# code, providing access to data models, ease-of-use asynchronous RPC, Action &amp; Notification calls directly from code and generated server interfaces. Features​ Drop-and-go: Add your .yang files to a C# project as additional files that references this generator, that is it, your .yang defined RPC's and more are now available directly in that C# projects codeServer-interface: Want to implement a server that responds to NETCONF calls? Look no further than the generated interface IYangServer and it's extension method async Task Recieve(this IYangServer server, Stream input, Stream output); which provides a framework for implementing your own server without having to worry about serializing and parsing NETCONF directly, but instead work with well defined C# Datatypes. Documentation​ Getting Started​ In order to start using dotnetYang on a new .csproj project, start by adding the nuget packages by, for example, using the dotnet CLI in your project directory:dotnet add package dotnetYang Afterwards, create or add a .yang file to said project:some-module.yang module some-module { yang-version 1.1; namespace &quot;urn:dotnet:yang:some:module&quot;; prefix sm; identity someIdentity; identity someOtherIdentity { base someIdentity; } rpc doSomething { input { leaf the-big-leaf { type uint32; default &quot;4&quot;; description &quot;The value that is the input of the doSomething rpc&quot;; } } output { leaf response { type identityref { base someIdentity; } default &quot;someOtherIdentity&quot;; description &quot;The identity that is the output of the doSomething rpc&quot;; } } } } And then add it as an additional file to your .csproj file &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;!--Other parts of the .csproj file --&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;some-module.yang&quot; /&gt; &lt;/ItemGroup&gt; &lt;!--Other parts of the .csproj file --&gt; &lt;/Project&gt; Now the generated C# code from some-module.yang will be available, with it's naming conventions adjusted to be C# compliant namespace MyProject; public class Program { public static async Task Main() { IChannel channel = //...Code for setting up whatever channel you want to send the rpc over int messageID = //...Code for getting message id; //Set up the rpc input, not the slight name changes Some.Module.YangNode.DoSomethingInput input = new Some.Module.YangNode.DoSomethingInput { TheBigLeaf = 123 }; //Call the rpc function, note the slight name changes and the asynchronous nature of the call Some.Module.YangNode.DoSomethingOutput output = await Some.Module.YangNode.DoSomething(channel, messageID, input); //Write the &quot;response&quot; leaf of the output to console. Console.WriteLine(output.Response); } } Server creation​ Say that you want to create a server that can response to calls defined in some-module.yang, then you would create a class that implementes the generated IYangServer interface, which might look something like this: using Some.Module; namespace MyProject; public class Server : IYangServer { public async Task&lt;YangNode.DoSomethingOutput&gt; OnDoSomething(YangNode.DoSomethingInput input) { //Do whatever it is the server is expected to do when told to &quot;doSomething&quot;... //Await something, do something else, the options are endless... //Create the output, not nessecarily like this.. YangNode.DoSomethingOutput output = new YangNode.DoSomethingOutput(); return output; } } Of course, if there are a lot of yang modules in a project, IYangServer runs the risk of becoming rather big. In such a case, it is recommended to split it's implementation into several partial server classes in order to maintain readability.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#about","content":" note Generating source code from YANG models  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#example-source-csproj-source-files","content":" CSharp ProjectProgram.csdemo.yang This is the CSharp Project that references DotnetYang &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;demo.yang&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;dotnetYang&quot; Version=&quot;0.3.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Configuration.cssome-module.cs using System; using System.Xml; using YangSupport; namespace yangDemo; ///&lt;summary&gt; ///Configuration root object for yangDemo based on provided .yang modules ///&lt;/summary&gt; public class Configuration { public Some.Module.YangNode? SomeModule { get; set; } public async Task WriteXMLAsync(XmlWriter writer) { await writer.WriteStartElementAsync(null,&quot;root&quot;,null); if(SomeModule is not null) await SomeModule.WriteXMLAsync(writer); await writer.WriteEndElementAsync(); } public static async Task&lt;Configuration&gt; ParseAsync(XmlReader reader) { Some.Module.YangNode? _SomeModule = default!; while(await reader.ReadAsync()) { switch(reader.NodeType) { case XmlNodeType.Element: switch(reader.Name) { case &quot;some-module&quot;: _SomeModule = await Some.Module.YangNode.ParseAsync(reader); continue; case &quot;rpc-error&quot;: throw await RpcException.ParseAsync(reader); default: throw new Exception($&quot;Unexpected element '{reader.Name}' under 'root'&quot;); } case XmlNodeType.EndElement when reader.Name == &quot;root&quot;: return new Configuration{ SomeModule = _SomeModule, }; case XmlNodeType.Whitespace: break; default: throw new Exception($&quot;Unexpected node type '{reader.NodeType}' : '{reader.Name}' under 'root'&quot;); } } throw new Exception(&quot;Reached end-of-readability without ever returning from Configuration.ParseAsync&quot;); } } public static class IYangServerExtensions { public static async Task Receive(this IYangServer server, global::System.IO.Stream input, global::System.IO.Stream output) { var initialPosition = output.Position; var initialLength = output.Length; string? id = null; using XmlReader reader = XmlReader.Create(input, SerializationHelper.GetStandardReaderSettings()); using XmlWriter writer = XmlWriter.Create(output, SerializationHelper.GetStandardWriterSettings()); try { await reader.ReadAsync(); switch(reader.Name) { case &quot;rpc&quot;: id = reader.ParseMessageId(); await writer.WriteStartElementAsync(null, &quot;rpc-reply&quot;, &quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;); await writer.WriteAttributeStringAsync(null, &quot;message-id&quot;, null, id); await reader.ReadAsync(); switch(reader.Name) { case &quot;action&quot;: await server.ReceiveAction(reader, writer); break; default: await server.ReceiveRPC(reader, writer); break; } await writer.WriteEndElementAsync(); await writer.FlushAsync(); break; case &quot;notification&quot;: var eventTime = await reader.ParseEventTime(); await reader.ReadAsync(); await server.ReceiveNotification(reader, eventTime); break; } } catch(RpcException ex) { await writer.FlushAsync(); output.Position = initialPosition; output.SetLength(initialLength); await ex.SerializeAsync(output,id); } catch(Exception ex) { await writer.FlushAsync(); output.Position = initialPosition; output.SetLength(initialLength); await output.SerializeRegularExceptionAsync(ex,id); } } public static async Task ReceiveRPC(this IYangServer server, XmlReader reader, XmlWriter writer) { switch(reader.Name) { case &quot;doSomething&quot; when reader.NamespaceURI is &quot;urn:dotnet:yang:andrei&quot;: { var input = await Some.Module.YangNode.DoSomethingInput.ParseAsync(reader); var task = server.OnDoSomething(input); var response = await task; await response.WriteXMLAsync(writer); } break; } } public static async Task ReceiveAction(this IYangServer server, XmlReader reader, XmlWriter writer) { await reader.ReadAsync(); switch(reader.Name) { } } public static async Task ReceiveNotification(this IYangServer server, XmlReader reader, DateTime eventTime) { switch(reader.Name) { } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#download-example-net--c","content":" tip Download Example project DotnetYang   ","version":"Next","tagName":"h3"},{"title":"Share DotnetYang​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#share-dotnetyang","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DotnetYang  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DotnetYang by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/DotnetYang#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"Dusharp by Vitali","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Dusharp","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#info","content":" info Name: Dusharp Dusharp is a C# source generator for creating discriminated unions. Author: Vitali NuGet:https://www.nuget.org/packages/Dusharp/ You can find more details at https://github.com/kolebynov/Dusharp Source: https://github.com/kolebynov/Dusharp  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#original-readme","content":" note Dusharp Dusharp is a C# source generator library for creating discriminated unions. This library allows you to define union types with ease, using attributes and partial methods. It is inspired by functional languages but built for C# developers. Features​ ✅ Create unions: Define discriminated unions using attributes.✅ Match method: Pattern match on union cases in a type-safe way.✅ Equality: Automatic equality comparison for unions.✅ Generics: Generics support for union types.✅ Pretty print: Using overloaded ToString().❌ JSON serialization/deserialization: Support for unions with System.Text.Json (coming soon).❌ Struct unions: With efficient memory layout for unions as structs (coming soon). Installation​ Dusharp is available as a NuGet package. You can install it using the NuGet package manager: dotnet add package Dusharp Usage​ Dusharp uses attributes to generate discriminated unions and case methods. Here's how to get started: 1. Define a Union​ To define a union, annotate a class with the [Dusharp.UnionAttribute] attribute. using Dusharp; [Union] public partial class Shape&lt;T&gt; where T : struct, INumber&lt;T&gt; { } 2. Define Union Cases​ Define union cases by creating public static partial methods and marking them with the [Dusharp.UnionCaseAttribute] attribute. The method body will be automatically generated. using Dusharp; [Union] public partial class Shape&lt;T&gt; where T : struct, INumber&lt;T&gt; { [UnionCase] public static partial Shape&lt;T&gt; Circle(T radius); [UnionCase] public static partial Shape&lt;T&gt; Rectangle(T width, T height); } 3. Match on Union​ You can easily perform pattern matching on a union using the Match method. The source generator will create the Match method based on the defined union cases. Shape&lt;double&gt; shape = Shape&lt;double&gt;.Circle(5.0); string result = shape.Match( radius =&gt; $&quot;Circle with radius {radius}&quot;, (width, height) =&gt; $&quot;Rectangle with width {width} and height {height}&quot;); Console.WriteLine(result); // Output: Circle with radius 5.0 4. Compare Unions​ Union cases can be compared for equality using the auto-generated equality methods. This allows for checking if two unions are the same. Shape&lt;double&gt; shape1 = Shape&lt;double&gt;.Circle(5.0); Shape&lt;double&gt; shape2 = Shape&lt;double&gt;.Circle(5.0); Console.WriteLine(shape1.Equals(shape2)); // True Console.WriteLine(shape1 == shape2); // True Upcoming Features​ JSON serialization/deserialization: Support for JSON (de)serialization via System.Text.Json.Struct unions: More efficient unions using structs with effective data layout. License​ This project is licensed under the MIT License - see the LICENSE file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#about","content":" note Generate tagged union  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references Dusharp &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Dusharp&quot; Version=&quot;0.4.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Dusharp.EmbeddedCode.ExceptionUtils.csDusharp.EmbeddedCode.UnionAttribute.csDusharp.EmbeddedCode.UnionCaseAttribute.csUnionTypesDemo.ResultSave.Dusharp.g.cs // &lt;auto-generated&gt; This file has been auto generated. &lt;/auto-generated&gt; #nullable enable using System; using System.Runtime.CompilerServices; namespace Dusharp { public static class ExceptionUtils { [MethodImpl(MethodImplOptions.AggressiveInlining)] public static void ThrowIfNull&lt;T&gt;(this T value, string paramName) where T : class { if (value == null) { ThrowArgumentNull(paramName); } } [MethodImpl(MethodImplOptions.NoInlining)] public static void ThrowUnionInInvalidState() =&gt; throw new InvalidOperationException(&quot;Union in invalid state.&quot;); [MethodImpl(MethodImplOptions.NoInlining)] private static void ThrowArgumentNull(string paramName) =&gt; throw new ArgumentNullException(paramName); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#download-example-net--c","content":" tip Download Example project Dusharp   ","version":"Next","tagName":"h3"},{"title":"Share Dusharp​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#share-dusharp","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dusharp  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Dusharp by Vitali","url":"/RSCG_Examples/v2/docs/Dusharp#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"DynamicsMapper by Yonatan Cohavi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DynamicsMapper","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#info","content":" info Name: DynamicsMapper A .NET source generator for generating dynamics crm Enity mappings. No runtime reflection. Author: Yonatan Cohavi NuGet:https://www.nuget.org/packages/YC.DynamicsMapper/ You can find more details at https://github.com/YonatanCohavi/DynamicsMapper/ Source: https://github.com/YonatanCohavi/DynamicsMapper/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#original-readme","content":" note Using the Source Generator This document provides a brief overview of how to use the source generator to generate mapper classes for your entity classes. Step 1: Define Your Entity Classes​ First, you need to define your entity classes and decorate them with the CrmEntity and CrmField attributes. These attributes specify the mapping between your entity classes and the corresponding CRM entities. For example, here is a sample Person class decorated with the CrmEntity and CrmField attributes: [CrmEntity(&quot;person&quot;)] public class Person { [CrmField(&quot;personid&quot;, Mapping = MappingType.PrimaryId)] public Guid PersonId { get; set; } [CrmField(&quot;firstname&quot;)] public string? FirstName { get; set; } [CrmField(&quot;lastname&quot;)] public string? LastName { get; set; } } Step 2: Run the Source Generator​ The source generator is executed automatically when you build your project. This will generate the mapper classes for each of your entity classes. The mapper classes implement the IEntityMapper&lt;TEntity&gt; interface and are responsible for mapping between your entity classes and the corresponding CRM entities. Step 3: Use the Mapper Classes​ Once the mapper classes have been generated, you can use them to map between your entity classes and the CRM entities. To do this, you need to create an instance of the appropriate mapper class and call its Map methods. For example, here is how you might use the PersonMapper class to map between a Person object and a CRM entity: var person = new Person { PersonId = Guid.NewGuid(), FirstName = &quot;John&quot;, LastName = &quot;Doe&quot; }; var mapper = new PersonMapper(); var entity = mapper.Map(person); You can also use the Map method to map from a CRM entity to a Person object. Here is an example: var entity = new Entity(&quot;person&quot;); entity.Id = Guid.NewGuid(); entity[&quot;firstname&quot;] = &quot;Jane&quot;; entity[&quot;lastname&quot;] = &quot;Doe&quot;; var mapper = new PersonMapper(); var person = mapper.Map(entity); Mapping Types​ Basic: This is the default mapping type and is used for simple data types such as strings, integers, and booleans.Lookup: This mapping type is used for lookup fields in the CRM entity. A lookup field is a field that references another entity record.Money: This mapping type is used for money fields in the CRM entity. A money field is a field that stores currency values.Formatted: This mapping type is used for formatted fields in the CRM entity. A formatted field is a field that has a specific format, such as a date or time field.Options: This mapping type is used for option set fields in the CRM entity. An option set field is a field that allows the user to select from a predefined set of options.MultipleOptions: This mapping type is used for multi-select option set fields in the CRM entity. A multi-select option set field is a field that allows the user to select multiple options from a predefined set of options.PrimaryId: This mapping type is used for the primary ID field of the CRM entity. The primary ID field is the unique identifier for the entity record. Define Linked Entities with the CrmLink Attribute​ In addition to the CrmEntity and CrmField attributes, you can also use the CrmLink attribute to map linked entities. This attribute allows you to establish relationships between different entities in your CRM. Here's how you can use it: [CrmEntity(&quot;order&quot;)] public class Order { [CrmField(&quot;orderid&quot;, Mapping = MappingType.PrimaryId)] public Guid OrderId { get; set; } [CrmField(&quot;totalamount&quot;)] public decimal? TotalAmount { get; set; } [CrmLink(&quot;person&quot;)] public Person Person { get; set; } } In the example above, the Order class has a Person property that represents the person associated with the order. The CrmLink attribute is used to specify that this property maps to a linked entity in the CRM. And that's it! You can now use the source generator to generate mapper classes for your entity classes and easily map between your entity classes and the corresponding CRM entities.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#about","content":" note Mapper for Dataverse client - generates also column names from properties  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references DynamicsMapper &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.PowerPlatform.Dataverse.Client&quot; Version=&quot;1.1.14&quot; /&gt; &lt;PackageReference Include=&quot;YC.DynamicsMapper&quot; Version=&quot;1.0.8&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EntityExtentions.g.csIEntityMapper.g.csPersonMapper.g.cs // &lt;auto-generated /&gt; #nullable enable using Microsoft.Xrm.Sdk; using System.Linq; namespace DynamicsMapper.Extension { public static class EntityExtension { public static Entity? GetAliasedEntity(this Entity entity, string alias) { var attributes = entity.Attributes.Where(e =&gt; e.Key.StartsWith(alias)).ToArray(); if (!attributes.Any()) return null; var aliasEntity = new Entity(); foreach (var attribute in attributes) { if (!(attribute.Value is AliasedValue aliasedValued)) continue; if (string.IsNullOrEmpty(aliasEntity.LogicalName)) aliasEntity.LogicalName = aliasedValued.EntityLogicalName; aliasEntity[aliasedValued.AttributeLogicalName] = aliasedValued.Value; } return aliasEntity; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#download-example-net--c","content":" tip Download Example project DynamicsMapper   ","version":"Next","tagName":"h3"},{"title":"Share DynamicsMapper​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#share-dynamicsmapper","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DynamicsMapper  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DynamicsMapper by Yonatan Cohavi","url":"/RSCG_Examples/v2/docs/DynamicsMapper#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"EmbedResourceCSharp by pCYSl5EDgo","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#info","content":" info Name: EmbedResourceCSharp SourceGenerator for resource file embedding with EmbedResourceCSharp. Author: pCYSl5EDgo NuGet:https://www.nuget.org/packages/EmbedResourceCSharp/ You can find more details at https://github.com/pCYSl5EDgo/EmbeddingResourceCSharp Source: https://github.com/pCYSl5EDgo/EmbeddingResourceCSharp  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#original-readme","content":" note EmbedResourceCSharp This is a C# Source Generator. This let you embed files in your application. You do not need to use Assembly.GetManifestResourceStream anymore. How to use Install​ dotnet add package EmbedResourceCSharp Add only 1 package to your C# project. Embedding file​ Provide that there are some files like below. projectFolder/ Example.csprojExampleProgram.csresourceFileA.txt namespace Example { // partial methods require partial class/struct! public partial class ExampleClass { /* The relative file path from C# project folder should be specified. The return value type must be System.ReadOnlySpan&lt;byte&gt;. No parameter must exist. The method must be static and partial. The accessibility of the method does not matter. */ [EmbedResourceCSharp.FileEmbed(&quot;resourceFileA.txt&quot;)] private static partial System.ReadOnlySpan&lt;byte&gt; GetFileContentA(); } } You can get file content byte sequence with static partial method System.ReadOnlySpan&lt;byte&gt; GetFileContentA. Embedding files under specific folder​ Provide that there are some files like below. projectFolder/ Example2.csprojExampleProgram.cs folderB/ resourceA.txtresourceB.txtfolderB_C/ resourceC.txt resourceD.csv namespace Example2 { // partial methods require partial class/struct! public partial class ExampleClass { /* The relative folder path from C# project folder should be specified. The folder path should end with slash or backslash. The return value type must be System.ReadOnlySpan&lt;byte&gt;. One parameter must exist and its type must be System.ReadOnlySpan&lt;char&gt;. The parameter name does not matter. The method must be static and partial. The accessibility of the method does not matter. */ [EmbedResourceCSharp.FolderEmbed(&quot;../folderB/&quot;, &quot;*.txt&quot;)] private static partial System.ReadOnlySpan&lt;byte&gt; GetResouceFileContent(System.ReadOnlySpan&lt;char&gt; path); public static void Main() { // Specify relative path from the folder. var aContent = GetResouceFileContent(&quot;resourceA.txt&quot;); var bContent = GetResouceFileContent(&quot;resourceB.txt&quot;); var cContent = GetResouceFileContent(&quot;folderB_C/resourceC.txt&quot;); // var dContent = GetResouceFileContent(&quot;resourceD.csv&quot;); // Above method call throws an FileNotFoundException! } } } You can include all files under the target folder recursively. You can filter file with search pattern.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#about","content":" note reading embedded resources fast  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyResource.cscreateDB.txt This is the CSharp Project that references EmbedResourceCSharp &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;createDB.txt&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;createDB.txt&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;EmbedResourceCSharp&quot; Version=&quot;1.1.3&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attribute.csMyResource____GetContentOfCreate.file.g.cs namespace EmbedResourceCSharp { internal enum PathSeparator { AsIs, Slash, BackSlash, } [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)] internal sealed class FileEmbedAttribute : global::System.Attribute { public string Path { get; } public FileEmbedAttribute(string path) { Path = path; } } [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)] internal sealed class FolderEmbedAttribute : global::System.Attribute { public string Path { get; private set; } public string Filter { get; private set; } public global::System.IO.SearchOption Option { get; private set; } public PathSeparator Separator { get; private set; } public FolderEmbedAttribute(string path, string filter = &quot;*&quot;, global::System.IO.SearchOption option = global::System.IO.SearchOption.AllDirectories, PathSeparator separator = PathSeparator.Slash) { Path = path; Filter = filter; Option = option; Separator = separator; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#download-example-net--c","content":" tip Download Example project EmbedResourceCSharp   ","version":"Next","tagName":"h3"},{"title":"Share EmbedResourceCSharp​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#share-embedresourcecsharp","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/EmbedResourceCSharp  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"EmbedResourceCSharp by pCYSl5EDgo","url":"/RSCG_Examples/v2/docs/EmbedResourceCSharp#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"Enhanced.GetTypes by duskembayev","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#info","content":" info Name: Enhanced.GetTypes Enhanced.GetTypes is a NuGet package for simplified types retrieval in .NET Core applications. It uses a source generator for explicit types retrieval without reflection. Author: duskembayev NuGet:https://www.nuget.org/packages/Enhanced.GetTypes/ You can find more details at https://github.com/duskembayev/Enhanced.GetTypes Source: https://github.com/duskembayev/Enhanced.GetTypes  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#original-readme","content":" note Enhanced.GetTypes Enhanced.GetTypes is a NuGet package for observing derived types in current assembly in .NET applications without reflection. Motivation​ The main goal of the package is to provide a way to get derived types in the current assembly without using reflection. This approach allows you to get the types at compile time and use them in different scenarios, such as registering them in the DI container, creating factories, etc. How to install​ dotnet add package Enhanced.GetTypes How to use​ Let's say you have an interface IService and you want to get all derived types of this interface in the current assembly. To do this, you need to create a partial class and mark it with the DerivedTypesAttribute attribute. using System; using System.Collections.Generic using Enhanced.GetTypes; namespace MyProject; public partial class ProjectTypes { [DerivedTypes(typeof(IService))] public partial IEnumerable&lt;Type&gt; GetServices(); } The body of the method will be generated by the source generator and will contain a list of all derived types of the IService interface in the current assembly. // &lt;auto-generated /&gt; namespace MyProject { partial class ProjectTypes { private partial System.Collections.Generic.IEnumerable&lt;System.Type&gt; GetServices() { yield return typeof(MyProject.People.PeopleService); yield return typeof(MyProject.Pets.PetsService); yield return typeof(MyProject.Cars.CarsService); yield break; } } } Now you can use the generated method to get all derived types of the IService interface for different purposes. For example, registering them in the DI container. // ... var serviceDescriptors = ProjectTypes.GetServices() .Select(type =&gt; ServiceDescriptor.Transient(typeof(IService), type); builder.Services.TryAddEnumerable(serviceDescriptors); Additionally, you can specify flags for the DerivedTypesAttribute attribute to filter the types you need. IncludeInternal - include internal types.IncludeAbstract - include abstract types.IncludeInterfaces - include interfaces. // ... [DerivedTypes(typeof(IService), IncludeInternal = true, IncludeAbstract = true, IncludeInterfaces = true)] public partial IEnumerable&lt;Type&gt; GetServices(); Important notes​ The method marked with the DerivedTypesAttribute attribute must return IEnumerable&lt;Type&gt;.Types from referenced assemblies are not included.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#about","content":" note Generating list of PUBLIC classes that implements an interface  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#example-source-csproj-source-files","content":" CSharp ProjectProgram.csProjectTypes.csIPerson.csStudent.csTeacher.cs This is the CSharp Project that references Enhanced.GetTypes &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Enhanced.GetTypes&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ProjectTypes.GetIPersonTypes.g.cs // &lt;auto-generated /&gt; namespace GetTypesForInterface { partial class ProjectTypes { public static partial System.Collections.Generic.IEnumerable&lt;System.Type&gt; GetIPersonTypes() { yield return typeof(GetTypesForInterface.Student); yield return typeof(GetTypesForInterface.Teacher); yield break; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#download-example-net--c","content":" tip Download Example project Enhanced.GetTypes   ","version":"Next","tagName":"h3"},{"title":"Share Enhanced.GetTypes​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#share-enhancedgettypes","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Enhanced.GetTypes  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Enhanced.GetTypes by duskembayev","url":"/RSCG_Examples/v2/docs/Enhanced.GetTypes#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/DomainPrimitives","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#info","content":" info Name: DomainPrimitives Domain Primitives source generator for C#. Author: Alta Software - Teimuraz Nikolaishvili NuGet:https://www.nuget.org/packages/AltaSoft.DomainPrimitives.Generator https://www.nuget.org/packages/AltaSoft.DomainPrimitives.Abstractions You can find more details at https://github.com/altasoft/DomainPrimitives Source: https://github.com/altasoft/DomainPrimitives  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#original-readme","content":" note DomainPrimitives for C# Table of Contents IntroductionKey FeaturesGenerator FeaturesSupported Underlying typesGetting StartedPrerequisitesInstallationCreating your Domain typeJson ConversionContributionsContactLicense Introduction​ Welcome to AltaSoft.DomainPrimitives - a C# toolkit purposefully designed to accelerate the development of domain-specific primitives within your applications. This streamlined solution empowers developers to efficiently encapsulate fundamental domain logic. Through this toolkit, you'll significantly reduce code complexity while improving the maintainability of your project. Key Features​ Simplified Primitive Creation - Utilize source generators to swiftly create domain-specific primitives with ease and precision.Versatile Underlying Type Support - Embrace a wide array of underlying types, catering to diverse application requirements.Enhanced Code Quality - Create clean, maintainable, and thoroughly testable code through encapsulation and robust design principles. With AltaSoft.DomainPrimitives, experience an accelerated development process while upholding code quality standards. This toolkit empowers developers to focus on the core business logic without compromising on precision or efficiency. Generator Features​ The AltaSoft.DomainPrimitives.Generator offers a diverse set of features: Implicit Operators: Streamlines type conversion to/from the underlying primitive type. ExampleSpecialized Constructor Generation: Automatically validates and constructs instances of this domain type. This constructor, tailored for the domain primitive, utilizes the underlying type as a parameter, ensuring the value's correctness within the domain.JsonConverters: Handles JSON serialization and deserialization for the underlying type. ExampleTypeConverters: Assists in type conversion to/from it's underlying type. Please refer to generated type converter belowSwagger Custom Type Mappings: Facilitates easy integration with Swagger by treating the primitive type as it's underlying type. Please refer to generated swagger helper belowInterface Implementations: All DomainPritmitives Implement IConvertible, IComparable, IComparable&lt;T&gt;, IEquatable&lt;T&gt;, IEqualityComparer&lt;T&gt;, IParsable interfaces.NumberType Operations: Automatically generates basic arithmetic and comparison operators, by implementing Static abstract interfaces. More details regarding numeric typesIParsable Implementation: Automatically generates parsing for non-string types. Supported Underlying types​ stringGuidbytesbyteshortushortintuintlongulongdecimaldoublefloatboolcharstringTimeSpanGuidDateTimeDateTimeOffsetDateOnlyTimeOnly Getting Started​ Prerequisites​ .NET 7 or higherNuGet Package Manager Installation​ To use AltaSoft.DomainPrimitives, install two NuGet packages: AltaSoft.DomainPrimitives.AbstractionsAltaSoft.DomainPrimitives.Generator In your project file add references as follows: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AltaSoft.DomainPrimitives.Abstractions&quot; Version=&quot;1.0.3&quot; /&gt; &lt;PackageReference Include=&quot;AltaSoft.DomainPrimitives.Generator&quot; Version=&quot;1.0.3&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;/ItemGroup&gt; Creating your Domain type​ For optimal performance, we recommend using readonly struct - especially for wrapping value types public readonly partial record struct PositiveInteger : IDomainValue&lt;int&gt; { public static void Validate(int value) { if (value &lt;= 0) throw new InvalidDomainValueException(&quot;Number must be positive&quot;); } public static int Default =&gt; 1; } This will automatically generate by default 4 classes PositiveInteger.Generated​ //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a AltaSoft.DomainPrimitives.Generator v1.0.0 // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable using System; using System.Numerics; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Text.Json.Serialization; using AltaSoft.DomainPrimitives.Converters; using System.ComponentModel; namespace AltaSoft.DomainPrimitives; [JsonConverter(typeof(PositiveIntegerJsonConverter))] [TypeConverter(typeof(PositiveIntegerTypeConverter))] [DebuggerDisplay(&quot;{_valueOrDefault}&quot;)] public readonly partial record struct PositiveInteger : IAdditionOperators&lt;PositiveInteger, PositiveInteger, PositiveInteger&gt;, ISubtractionOperators&lt;PositiveInteger, PositiveInteger, PositiveInteger&gt;, IMultiplyOperators&lt;PositiveInteger, PositiveInteger, PositiveInteger&gt;, IDivisionOperators&lt;PositiveInteger, PositiveInteger, PositiveInteger&gt;, IModulusOperators&lt;PositiveInteger, PositiveInteger, PositiveInteger&gt;, IComparisonOperators&lt;PositiveInteger, PositiveInteger, bool&gt;, IComparable, IComparable&lt;PositiveInteger&gt;, IParsable&lt;PositiveInteger&gt;, IConvertible { private int _valueOrDefault =&gt; _isInitialized ? _value : Default; [DebuggerBrowsable(DebuggerBrowsableState.Never)] private readonly int _value; [DebuggerBrowsable(DebuggerBrowsableState.Never)] private readonly bool _isInitialized; /// &lt;summary&gt; /// Initializes a new instance of the PositiveInteger class by validating the provided value using &lt;see cref=&quot;Validate&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The value to be validated..&lt;/param&gt; public PositiveInteger(int value) { Validate(value); _value = value; _isInitialized = true; } [Obsolete(&quot;Domain primitive cannot be created using empty Ctor&quot;, true)] public PositiveInteger() : this(Default) { } /// &lt;summary&gt; /// &lt;summary&gt;Implicit conversion from &lt;see cref = &quot;int&quot;/&gt; to &lt;see cref = &quot;PositiveInteger&quot;/&gt;&lt;/summary&gt; /// &lt;/summary&gt; public static implicit operator PositiveInteger(int value) =&gt; new(value); /// &lt;summary&gt; /// &lt;summary&gt;Implicit conversion from &lt;see cref = &quot;int&quot;/&gt; to &lt;see cref = &quot;PositiveInteger&quot;/&gt;&lt;/summary&gt; /// &lt;/summary&gt; [return: NotNullIfNotNull(nameof(value))] public static implicit operator PositiveInteger?(int? value) =&gt; value is null ? null : new(value.Value); /// &lt;summary&gt; /// &lt;summary&gt;Implicit conversion from &lt;see cref = &quot;PositiveInteger&quot;/&gt; to &lt;see cref = &quot;int&quot;/&gt;&lt;/summary&gt; /// &lt;/summary&gt; public static implicit operator int(PositiveInteger value) =&gt; (int)value._valueOrDefault; /// &lt;inheritdoc/&gt; public static PositiveInteger operator +(PositiveInteger left, PositiveInteger right) =&gt; new(left._valueOrDefault + right._valueOrDefault); /// &lt;inheritdoc/&gt; public static PositiveInteger operator -(PositiveInteger left, PositiveInteger right) =&gt; new(left._valueOrDefault - right._valueOrDefault); /// &lt;inheritdoc/&gt; public static PositiveInteger operator *(PositiveInteger left, PositiveInteger right) =&gt; new(left._valueOrDefault * right._valueOrDefault); /// &lt;inheritdoc/&gt; public static PositiveInteger operator /(PositiveInteger left, PositiveInteger right) =&gt; new(left._valueOrDefault / right._valueOrDefault); /// &lt;inheritdoc/&gt; public static PositiveInteger operator %(PositiveInteger left, PositiveInteger right) =&gt; new(left._valueOrDefault % right._valueOrDefault); /// &lt;inheritdoc/&gt; public int CompareTo(object? value) { if (value is null) return 1; if (value is PositiveInteger c) return CompareTo(c); throw new ArgumentException(&quot;Object is not a PositiveInteger&quot;, nameof(value)); } /// &lt;inheritdoc/&gt; public int CompareTo(PositiveInteger other) =&gt; _valueOrDefault.CompareTo(other._valueOrDefault); /// &lt;inheritdoc/&gt; public static bool operator &lt;(PositiveInteger left, PositiveInteger right) =&gt; left._valueOrDefault &lt; right._valueOrDefault; /// &lt;inheritdoc/&gt; public static bool operator &lt;=(PositiveInteger left, PositiveInteger right) =&gt; left._valueOrDefault &lt;= right._valueOrDefault; /// &lt;inheritdoc/&gt; public static bool operator &gt;(PositiveInteger left, PositiveInteger right) =&gt; left._valueOrDefault &gt; right._valueOrDefault; /// &lt;inheritdoc/&gt; public static bool operator &gt;=(PositiveInteger left, PositiveInteger right) =&gt; left._valueOrDefault &gt;= right._valueOrDefault; /// &lt;inheritdoc/&gt; public static PositiveInteger Parse(string s, IFormatProvider? provider) =&gt; int.Parse(s, provider); /// &lt;inheritdoc/&gt; public static bool TryParse(string? s, IFormatProvider? provider, out PositiveInteger result) { if (int.TryParse(s, provider, out var value)) { result = new PositiveInteger(value); return true; } result = default; return false; } /// &lt;inheritdoc/&gt; public override string ToString() =&gt; _valueOrDefault.ToString(); /// &lt;inheritdoc/&gt; TypeCode IConvertible.GetTypeCode() =&gt; ((IConvertible)_valueOrDefault).GetTypeCode(); /// &lt;inheritdoc/&gt; bool IConvertible.ToBoolean(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToBoolean(provider); /// &lt;inheritdoc/&gt; byte IConvertible.ToByte(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToByte(provider); /// &lt;inheritdoc/&gt; char IConvertible.ToChar(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToChar(provider); /// &lt;inheritdoc/&gt; DateTime IConvertible.ToDateTime(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToDateTime(provider); /// &lt;inheritdoc/&gt; decimal IConvertible.ToDecimal(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToDecimal(provider); /// &lt;inheritdoc/&gt; double IConvertible.ToDouble(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToDouble(provider); /// &lt;inheritdoc/&gt; short IConvertible.ToInt16(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToInt16(provider); /// &lt;inheritdoc/&gt; int IConvertible.ToInt32(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToInt32(provider); /// &lt;inheritdoc/&gt; long IConvertible.ToInt64(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToInt64(provider); /// &lt;inheritdoc/&gt; sbyte IConvertible.ToSByte(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToSByte(provider); /// &lt;inheritdoc/&gt; float IConvertible.ToSingle(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToSingle(provider); /// &lt;inheritdoc/&gt; string IConvertible.ToString(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToString(provider); /// &lt;inheritdoc/&gt; object IConvertible.ToType(Type conversionType, IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToType(conversionType, provider); /// &lt;inheritdoc/&gt; ushort IConvertible.ToUInt16(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToUInt16(provider); /// &lt;inheritdoc/&gt; uint IConvertible.ToUInt32(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToUInt32(provider); /// &lt;inheritdoc/&gt; ulong IConvertible.ToUInt64(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToUInt64(provider); } JsonConverter​ //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a AltaSoft.DomainPrimitives.Generator v1.0.0 // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable using AltaSoft.DomainPrimitives; using System; using System.Text.Json; using System.Text.Json.Serialization; using System.Globalization; using System.Text.Json.Serialization.Metadata; using AltaSoft.DomainPrimitives.Abstractions; namespace AltaSoft.DomainPrimitives.Converters; /// &lt;summary&gt; /// JsonConverter for &lt;see cref = &quot;PositiveInteger&quot;/&gt; /// &lt;/summary&gt; public sealed class PositiveIntegerJsonConverter : JsonConverter&lt;PositiveInteger&gt; { /// &lt;inheritdoc/&gt; public override PositiveInteger Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { try { return JsonInternalConverters.Int32Converter.Read(ref reader, typeToConvert, options); } catch (InvalidDomainValueException ex) { throw new JsonException(ex.Message); } } /// &lt;inheritdoc/&gt; public override void Write(Utf8JsonWriter writer, PositiveInteger value, JsonSerializerOptions options) { JsonInternalConverters.Int32Converter.Write(writer, (int)value, options); } /// &lt;inheritdoc/&gt; public override PositiveInteger ReadAsPropertyName(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { try { return JsonInternalConverters.Int32Converter.ReadAsPropertyName(ref reader, typeToConvert, options); } catch (InvalidDomainValueException ex) { throw new JsonException(ex.Message); } } /// &lt;inheritdoc/&gt; public override void WriteAsPropertyName(Utf8JsonWriter writer, PositiveInteger value, JsonSerializerOptions options) { JsonInternalConverters.Int32Converter.WriteAsPropertyName(writer, (int)value, options); } } Type Converter​ //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a AltaSoft.DomainPrimitives.Generator v1.0.0 // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable using AltaSoft.DomainPrimitives; using System; using System.ComponentModel; using System.Globalization; using AltaSoft.DomainPrimitives.Abstractions; namespace AltaSoft.DomainPrimitives.Converters; /// &lt;summary&gt; /// TypeConverter for &lt;see cref = &quot;PositiveInteger&quot;/&gt; /// &lt;/summary&gt; public sealed class PositiveIntegerTypeConverter : Int32Converter { /// &lt;inheritdoc/&gt; public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) { var result = base.ConvertFrom(context, culture, value); if (result is null) return null; try { return new PositiveInteger((int)result); } catch (InvalidDomainValueException ex) { throw new FormatException(&quot;Cannot parse PositiveInteger&quot;, ex); } } } Swagger Mappers​ A single file for all domainPrimitives containing all type mappings is generated. //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a AltaSoft.DomainPrimitives.Generator v1.0.0 // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable using AltaSoft.DomainPrimitives; using Microsoft.Extensions.DependencyInjection; using Swashbuckle.AspNetCore.SwaggerGen; using Microsoft.OpenApi.Models; namespace AltaSoft.DomainPrimitives.Converters.Extensions; /// &lt;summary&gt; /// Helper class providing methods to configure Swagger mappings for DomainPrimitive types of AltaSoft.DomainPrimitives /// &lt;/summary&gt; public static class SwaggerTypeHelper { /// &lt;summary&gt; /// Adds Swagger mappings for specific custom types to ensure proper OpenAPI documentation generation. /// &lt;/summary&gt; /// &lt;param name=&quot;options&quot;&gt;The SwaggerGenOptions instance to which mappings are added..&lt;/param&gt; /// &lt;remarks&gt; /// The method adds Swagger mappings for the following types: /// &lt;see cref=&quot;PositiveInteger&quot;/&gt; /// &lt;/remarks&gt; public static void AddSwaggerMappings(this SwaggerGenOptions options) { options.MapType&lt;PositiveInteger&gt;(() =&gt; new OpenApiSchema { Type = &quot;integer&quot;, Format = &quot;Int32&quot; }); options.MapType&lt;PositiveInteger?&gt;(() =&gt; new OpenApiSchema { Type = &quot;integer&quot;, Format = &quot;Int32&quot; }); } } Specialized ToString method​ By Default IDomainValue uses its underlying type's ToString method however this can be overriden by implementing a method specified below static virtual string ToString(T value) =&gt; value.ToString() ?? string.Empty; Managing Generated Operators for numeric types​ Mathematical operators for particular numeric types can be customized using the SupportedOperationsAttribute. If left unspecified, all operators are generated by default (as shown below). Once this attribute is applied, manual specification of the operators becomes mandatory. Note that for byte, sbyte, short, and ushort types, mathematical operators will not be generated by default. Default numeric types Generated Operators​ byte, sbyte =&gt; Noneshort, ushort =&gt; Noneint, uint =&gt; + - / * %long, ulong =&gt; + - / * %double =&gt; + - / * %decimal =&gt; + - / * % using SupportedOperationsAttribute​ [SupportedOperations(Addition = false,Division = false,Modulus = false,Multiplication = true,Subtraction = true)] public readonly partial record struct PositiveInteger : IDomainValue&lt;int&gt; { public static void Validate(int value) { if (value &lt;= 0) throw new InvalidDomainValueException(&quot;Number must be positive&quot;); } public static int Default =&gt; 1; } For further customization of the operators, consider implementing specific interfaces. This action will override the generated operators for the respective domain type:​ public readonly partial record struct PositiveInteger : IDomainValue&lt;int&gt;, IAdditionOperators&lt;PositiveInteger, PositiveInteger, PositiveInteger&gt; { public static void Validate(int value) { if (value &lt;= 0) throw new InvalidDomainValueException(&quot;Number must be positive&quot;); } public static int Default =&gt; 1; //custom + operator public static PositiveInteger operator +(PositiveInteger left, PositiveInteger right) { return (left._value + right._value + 1); } } Managing Serialization Format for date-related types​ Certain date-related types like DateTime, DateOnly, TimeOnly, DateTimeOffset, and TimeSpan can modify their serialization/deserialization format using the SerializationFormatAttribute. For instance, consider the GDay type, which represents an XML gDay value. It implements the IDomainValue&lt;DateOnly&gt; interface and utilizes the SerializationFormatAttribute to specify a serialization format. /// &lt;summary&gt; /// Represents an XML gDay value object, providing operations for parsing and handling gDay values. /// &lt;/summary&gt; [SerializationFormat(&quot;dd&quot;)] public readonly partial record struct GDay : IDomainValue&lt;DateOnly&gt; { /// &lt;inheritdoc/&gt; public static void Validate(DateOnly value) { } /// &lt;inheritdoc/&gt; public static DateOnly Default =&gt; default; /// &lt;inheritdoc/&gt; // Customized string representation of DateOnly public static string ToString(DateOnly value) =&gt; value.ToString(&quot;dd&quot;); } Disable Generation of Converters To disable the generation of Converters or Swagger Mappers in csproj file follow the below described steps.However,please note that if Swagger is enabled then you'll need to add reference to the Swashbuckle.AspNetCore.SwaggerGen &lt;PropertyGroup&gt; &lt;DomainPrimitiveGenerator_GenerateJsonConverters&gt;false&lt;/DomainPrimitiveGenerator_GenerateJsonConverters&gt; &lt;DomainPrimitiveGenerator_GenerateTypeConverters&gt;false&lt;/DomainPrimitiveGenerator_GenerateTypeConverters&gt; &lt;DomainPrimitiveGenerator_GenerateSwaggerConverters&gt;false&lt;/DomainPrimitiveGenerator_GenerateSwaggerConverters&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;DomainPrimitiveGenerator_GenerateJsonConverters&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;DomainPrimitiveGenerator_GenerateTypeConverters&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;DomainPrimitiveGenerator_GenerateSwaggerConverters&quot; /&gt; &lt;/ItemGroup&gt; Additional Features Handling Domain Value Exception To ensure correct error handling, it's recommended to throw InvalidDomainValueException or (descendants of InvalidDomainValueException) provided in AltaSoft.DomainPrimitives.Abstractions. This exception, when thrown from JsonConverter or TypeConverter, will be converted to BadRequest. Using any other exception in the Validate method will prompt a compiler warning. Chaining Primitive Types Chaining of primitive types is possible. For instance, considering the PositiveInteger and BetweenOneAnd100 DomainPrimitives: public readonly partial record struct PositiveInteger : IDomainValue&lt;int&gt; { public static void Validate(int value) { if (value &lt;= 0) throw new InvalidDomainValueException(&quot;Number must be positive&quot;); } public static int Default =&gt; 1; } public readonly partial record struct BetweenOneAnd100 : IDomainValue&lt;PositiveInteger&gt; { public static void Validate(PositiveInteger value) { if (value &lt; 100) throw new InvalidDomainValueException(&quot;Value must be less than 100&quot;); } public static PositiveInteger Default =&gt; 1; // using implicit operators this is possible. } Defined type BetweenOneAnd100 automatically inherits restrictions from PositiveInteger. Operators restricted in PositiveInteger are also inherited. Further restrictions on operators can be added using the SupportedOperationsAttribute: [SupportedOperations(Addition=false)] public readonly partial record struct BetweenOneAnd100 : IDomainValue&lt;PositiveInteger&gt; { public static void Validate(PositiveInteger value) { if (value &lt; 100) throw new InvalidDomainValueException(&quot;Value must be less than 100&quot;); } public static PositiveInteger Default =&gt; 1; // using implicit operators this is possible. } Default Value Guarantee with IDomainValue of T IDomainValue&lt;T&gt; incorporates a static abstract property Default to ensure the correct domain state if a value is uninitialized. For example: public class TestObject { public PositiveInteger CustomerId { get; set; } } public class Program { var test = new TestObject(); Console.Write(test); // If no Default was defined, CustomerId would default to 0, providing invalid value in the Domain. Providing a Default value ensures initialization according to validation rules by initializing in this example to 1 . } These additional features offer enhanced control over exceptions, chaining of primitive types, inheritance of restrictions and operators, and a mechanism to ensure correct default values within the domain. Restrictions Implementation of IDomainValue Interface DomainPrimitives are mandated to implement the IDomainValue&lt;T&gt; interface to ensure adherence to domain-specific constraints and behaviors. Constructor Limitation No constructors should be explicitly defined within DomainPrimitives. Doing so will result in a compiler error. Prohibition of Public Properties or Fields DomainPrimitive types should not contain any explicitly defined public properties or fields. The backing field will be automatically generated. If any property or field is explicitly named _value, _valueOrDefault, or _isInitialized, a compiler error will be triggered. Examples Implicit Usage of DomainType​ public readonly partial record struct PositiveAmount : IDomainValue&lt;decimal&gt; { public static void Validate(decimal value) { if (value &lt;= 0m) throw new InvalidDomainValueException(&quot;Must be a a positive number&quot;); } public static decimal Default =&gt; 1m; } public static class Example { public static void ImplicitConversion() { var amount = new PositiveAmount(100m); PositiveAmount amount2 = 100m; // implicitly converted to PositiveAmount //implicilty casted to decimal decimal amountInDecimal = amount + amount2; } } Json Conversion [SupportedOperations] // no mathematical operators should be generated public readonly partial record struct CustomerId : IDomainValue&lt;int&gt; { public static void Validate(int value) { if (value &lt;= 0) throw new InvalidDomainValueException(&quot;Value must be a positive number&quot;); } public static int Default =&gt; 1; } public sealed class Transaction { public CustomerId FromId { get; set; } public CustomerId? ToId { get; set; } public PositiveAmount Amount { get; set; } public PositiveAmount? Fees { get; set; } } public static void JsonSerializationAndDeserialization() { var amount = new Transaction() { Amount = 100.523m, Fees = null, FromId = 1, ToId = null }; var jsonValue = JsonSerializer.Serialize(amount); //this will produce the same result as changing customerId to int and PositiveAmount to decimal var newValue = JsonSerializer.Deserialize&lt;Transaction&gt;(jsonValue) } Serialized Json { &quot;FromId&quot;: 1, &quot;ToId&quot;: null, &quot;Amount&quot;: 100.523, &quot;Fees&quot;: null } Contributions Contributions to AltaSoft.DomainPrimitives are welcome! Whether you have suggestions or wish to contribute code, feel free to submit a pull request or open an issue. Contact For support, questions, or additional information, please visit GitHub Issues. License This project is licensed under MIT. See the LICENSE file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#about","content":" note One of the most complete and mature libraries for DomainPrimitives in .NET  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDOB.csTaskAfterDelay.cs This is the CSharp Project that references DomainPrimitives &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AltaSoft.DomainPrimitives.Abstractions&quot; Version=&quot;1.0.3&quot; /&gt; &lt;PackageReference Include=&quot;AltaSoft.DomainPrimitives.Generator&quot; Version=&quot;1.0.3&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;!--&lt;DomainPrimitiveGenerator_GenerateJsonConverters&gt;false&lt;/DomainPrimitiveGenerator_GenerateJsonConverters&gt;--&gt; &lt;!--&lt;DomainPrimitiveGenerator_GenerateTypeConverters&gt;false&lt;/DomainPrimitiveGenerator_GenerateTypeConverters&gt;--&gt; &lt;DomainPrimitiveGenerator_GenerateSwaggerConverters&gt;false&lt;/DomainPrimitiveGenerator_GenerateSwaggerConverters&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!--&lt;CompilerVisibleProperty Include=&quot;DomainPrimitiveGenerator_GenerateTypeConverters&quot; /&gt;--&gt; &lt;!--&lt;CompilerVisibleProperty Include=&quot;DomainPrimitiveGenerator_GenerateJsonConverters&quot; /&gt;--&gt; &lt;CompilerVisibleProperty Include=&quot;DomainPrimitiveGenerator_GenerateSwaggerConverters&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DayDate.g.csDayDateJsonConverter.g.csDayDateTypeConverter.g.csMonthDate.g.csMonthDateJsonConverter.g.csMonthDateTypeConverter.g.csYearDate.g.csYearDateJsonConverter.g.csYearDateTypeConverter.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a AltaSoft.DomainPrimitives.Generator v1.0.0 // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable using System; using System.Numerics; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Text.Json.Serialization; using DomainPrimitives.Converters; using System.ComponentModel; namespace DomainPrimitives; [JsonConverter(typeof(DayDateJsonConverter))] [TypeConverter(typeof(DayDateTypeConverter))] [DebuggerDisplay(&quot;{_valueOrDefault}&quot;)] public readonly partial record struct DayDate : IAdditionOperators&lt;DayDate, DayDate, DayDate&gt;, ISubtractionOperators&lt;DayDate, DayDate, DayDate&gt;, IMultiplyOperators&lt;DayDate, DayDate, DayDate&gt;, IDivisionOperators&lt;DayDate, DayDate, DayDate&gt;, IModulusOperators&lt;DayDate, DayDate, DayDate&gt;, IComparisonOperators&lt;DayDate, DayDate, bool&gt;, IComparable, IComparable&lt;DayDate&gt;, IParsable&lt;DayDate&gt;, IConvertible { private int _valueOrDefault =&gt; _isInitialized ? _value : Default; [DebuggerBrowsable(DebuggerBrowsableState.Never)] private readonly int _value; [DebuggerBrowsable(DebuggerBrowsableState.Never)] private readonly bool _isInitialized; /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref=&quot;DayDate&quot;/&gt; class by validating the specified &lt;see cref=&quot;int&quot;/&gt; value using &lt;see cref=&quot;Validate&quot;/&gt; static method. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The value to be validated..&lt;/param&gt; public DayDate(int value) { Validate(value); _value = value; _isInitialized = true; } [Obsolete(&quot;Domain primitive cannot be created using empty Ctor&quot;, true)] public DayDate() : this(Default) { } /// &lt;summary&gt; /// &lt;summary&gt;Implicit conversion from &lt;see cref = &quot;int&quot;/&gt; to &lt;see cref = &quot;DayDate&quot;/&gt;&lt;/summary&gt; /// &lt;/summary&gt; public static implicit operator DayDate(int value) =&gt; new(value); /// &lt;summary&gt; /// &lt;summary&gt;Implicit conversion from &lt;see cref = &quot;int?&quot;/&gt; to &lt;see cref = &quot;DayDate?&quot;/&gt;&lt;/summary&gt; /// &lt;/summary&gt; [return: NotNullIfNotNull(nameof(value))] public static implicit operator DayDate?(int? value) =&gt; value is null ? null : new(value.Value); /// &lt;summary&gt; /// &lt;summary&gt;Implicit conversion from &lt;see cref = &quot;DayDate&quot;/&gt; to &lt;see cref = &quot;int&quot;/&gt;&lt;/summary&gt; /// &lt;/summary&gt; public static implicit operator int(DayDate value) =&gt; (int)value._valueOrDefault; /// &lt;inheritdoc/&gt; public static DayDate operator +(DayDate left, DayDate right) =&gt; new(left._valueOrDefault + right._valueOrDefault); /// &lt;inheritdoc/&gt; public static DayDate operator -(DayDate left, DayDate right) =&gt; new(left._valueOrDefault - right._valueOrDefault); /// &lt;inheritdoc/&gt; public static DayDate operator *(DayDate left, DayDate right) =&gt; new(left._valueOrDefault * right._valueOrDefault); /// &lt;inheritdoc/&gt; public static DayDate operator /(DayDate left, DayDate right) =&gt; new(left._valueOrDefault / right._valueOrDefault); /// &lt;inheritdoc/&gt; public static DayDate operator %(DayDate left, DayDate right) =&gt; new(left._valueOrDefault % right._valueOrDefault); /// &lt;inheritdoc/&gt; public int CompareTo(object? value) { if (value is null) return 1; if (value is DayDate c) return CompareTo(c); throw new ArgumentException(&quot;Object is not a DayDate&quot;, nameof(value)); } /// &lt;inheritdoc/&gt; public int CompareTo(DayDate other) =&gt; _valueOrDefault.CompareTo(other._valueOrDefault); /// &lt;inheritdoc/&gt; public static bool operator &lt;(DayDate left, DayDate right) =&gt; left._valueOrDefault &lt; right._valueOrDefault; /// &lt;inheritdoc/&gt; public static bool operator &lt;=(DayDate left, DayDate right) =&gt; left._valueOrDefault &lt;= right._valueOrDefault; /// &lt;inheritdoc/&gt; public static bool operator &gt;(DayDate left, DayDate right) =&gt; left._valueOrDefault &gt; right._valueOrDefault; /// &lt;inheritdoc/&gt; public static bool operator &gt;=(DayDate left, DayDate right) =&gt; left._valueOrDefault &gt;= right._valueOrDefault; /// &lt;inheritdoc/&gt; public static DayDate Parse(string s, IFormatProvider? provider) =&gt; int.Parse(s, provider); /// &lt;inheritdoc/&gt; public static bool TryParse(string? s, IFormatProvider? provider, out DayDate result) { if (int.TryParse(s, provider, out var value)) { result = new DayDate(value); return true; } result = default; return false; } /// &lt;inheritdoc/&gt; public override string ToString() =&gt; _valueOrDefault.ToString(); /// &lt;inheritdoc/&gt; TypeCode IConvertible.GetTypeCode() =&gt; ((IConvertible)_valueOrDefault).GetTypeCode(); /// &lt;inheritdoc/&gt; bool IConvertible.ToBoolean(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToBoolean(provider); /// &lt;inheritdoc/&gt; byte IConvertible.ToByte(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToByte(provider); /// &lt;inheritdoc/&gt; char IConvertible.ToChar(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToChar(provider); /// &lt;inheritdoc/&gt; DateTime IConvertible.ToDateTime(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToDateTime(provider); /// &lt;inheritdoc/&gt; decimal IConvertible.ToDecimal(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToDecimal(provider); /// &lt;inheritdoc/&gt; double IConvertible.ToDouble(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToDouble(provider); /// &lt;inheritdoc/&gt; short IConvertible.ToInt16(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToInt16(provider); /// &lt;inheritdoc/&gt; int IConvertible.ToInt32(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToInt32(provider); /// &lt;inheritdoc/&gt; long IConvertible.ToInt64(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToInt64(provider); /// &lt;inheritdoc/&gt; sbyte IConvertible.ToSByte(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToSByte(provider); /// &lt;inheritdoc/&gt; float IConvertible.ToSingle(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToSingle(provider); /// &lt;inheritdoc/&gt; string IConvertible.ToString(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToString(provider); /// &lt;inheritdoc/&gt; object IConvertible.ToType(Type conversionType, IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToType(conversionType, provider); /// &lt;inheritdoc/&gt; ushort IConvertible.ToUInt16(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToUInt16(provider); /// &lt;inheritdoc/&gt; uint IConvertible.ToUInt32(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToUInt32(provider); /// &lt;inheritdoc/&gt; ulong IConvertible.ToUInt64(IFormatProvider? provider) =&gt; ((IConvertible)_valueOrDefault).ToUInt64(provider); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#download-example-net--c","content":" tip Download Example project DomainPrimitives   ","version":"Next","tagName":"h3"},{"title":"Share DomainPrimitives​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#share-domainprimitives","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/DomainPrimitives  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"PrimitiveObsession\" has the following generators:​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#category-primitiveobsession-has-the-following-generators","content":" 1 DomainPrimitives  2 Strongly  3 StronglyTypedUid  4 UnitGenerator  5 Vogen  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"DomainPrimitives by Alta Software - Teimuraz Nikolaishvili","url":"/RSCG_Examples/v2/docs/DomainPrimitives#see-category","content":" PrimitiveObsession ","version":"Next","tagName":"h3"},{"title":"dunet by Domn Werner","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/dunet","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#info","content":" info Name: dunet A simple source generator for discriminated unions in C#. Author: Domn Werner NuGet:https://www.nuget.org/packages/dunet/ You can find more details at https://github.com/domn1995/dunet Source: https://github.com/domn1995/dunet  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#original-readme","content":" note Dunet Dunet is a simple source generator for discriminated unions in C#. Install​ NuGet: dotnet add package dunet Usage​ // 1. Import the namespace. using Dunet; // 2. Add the `Union` attribute to a partial record. [Union] partial record Shape { // 3. Define the union variants as inner partial records. partial record Circle(double Radius); partial record Rectangle(double Length, double Width); partial record Triangle(double Base, double Height); } // 4. Use the union variants. var shape = new Shape.Rectangle(3, 4); var area = shape.Match( circle =&gt; 3.14 * circle.Radius * circle.Radius, rectangle =&gt; rectangle.Length * rectangle.Width, triangle =&gt; triangle.Base * triangle.Height / 2 ); Console.WriteLine(area); // &quot;12&quot; Generics​ Use generics for more advanced union types. For example, an option monad: // 1. Import the namespace. using Dunet; // Optional: use static import for more terse code. using static Option&lt;int&gt;; // 2. Add the `Union` attribute to a partial record. // 3. Add one or more type arguments to the union record. [Union] partial record Option&lt;T&gt; { partial record Some(T Value); partial record None(); } // 4. Use the union variants. Option&lt;int&gt; ParseInt(string? value) =&gt; int.TryParse(value, out var number) ? new Some(number) : new None(); string GetOutput(Option&lt;int&gt; number) =&gt; number.Match( some =&gt; some.Value.ToString(), none =&gt; &quot;Invalid input!&quot; ); var input = Console.ReadLine(); // User inputs &quot;not a number&quot;. var result = ParseInt(input); var output = GetOutput(result); Console.WriteLine(output); // &quot;Invalid input!&quot; input = Console.ReadLine(); // User inputs &quot;12345&quot;. result = ParseInt(input); output = GetOutput(result); Console.WriteLine(output); // &quot;12345&quot;. Implicit Conversions​ Dunet generates implicit conversions between union variants and the union type if your union meets all of the following conditions: The union has no required properties.All variants contain a single property.Each variant's property is unique within the union.No variant's property is an interface type. For example, consider a Result union type that represents success as a double and failure as an Exception: // 1. Import the namespace. using Dunet; // 2. Define a union type with a single unique variant property: [Union] partial record Result { partial record Success(double Value); partial record Failure(Exception Error); } // 3. Return union variants directly. Result Divide(double numerator, double denominator) { if (denominator is 0d) { // No need for `new Result.Failure(new InvalidOperationException(&quot;...&quot;));` return new InvalidOperationException(&quot;Cannot divide by zero!&quot;); } // No need for `new Result.Success(...);` return numerator / denominator; } var result = Divide(42, 0); var output = result.Match( success =&gt; success.Value.ToString(), failure =&gt; failure.Error.Message ); Console.WriteLine(output); // &quot;Cannot divide by zero!&quot; Async Match​ Dunet generates a MatchAsync() extension method for all Task&lt;T&gt; and ValueTask&lt;T&gt; where T is a union type. For example: // Choice.cs using Dunet; namespace Core; // 1. Define a union type within a namespace. [Union] partial record Choice { partial record Yes; partial record No(string Reason); } // Program.cs using Core; using static Core.Choice; // 2. Define async methods like you would for any other type. static async Task&lt;Choice&gt; AskAsync() { // Simulating network call. await Task.Delay(1000); // 3. Return unions from async methods like any other type. return new No(&quot;because I don't wanna!&quot;); } // 4. Asynchronously match any union `Task` or `ValueTask`. var response = await AskAsync() .MatchAsync( yes =&gt; &quot;Yes!!!&quot;, no =&gt; $&quot;No, {no.Reason}&quot; ); // Prints &quot;No, because I don't wanna!&quot; after 1 second. Console.WriteLine(response); Note:MatchAsync() can only be generated for namespaced unions. Specific Match​ Dunet generates specific match methods for each union variant. This is useful when unwrapping a union and you only care about transforming a single variant. For example: [Union] partial record Shape { partial record Point(int X, int Y); partial record Line(double Length); partial record Rectangle(double Length, double Width); partial record Sphere(double Radius); } public static bool IsZeroDimensional(this Shape shape) =&gt; shape.MatchPoint( point =&gt; true, () =&gt; false ); public static bool IsOneDimensional(this Shape shape) =&gt; shape.MatchLine( line =&gt; true, () =&gt; false ); public static bool IsTwoDimensional(this Shape shape) =&gt; shape.MatchRectangle( rectangle =&gt; true, () =&gt; false ); public static bool IsThreeDimensional(this Shape shape) =&gt; shape.MatchSphere( sphere =&gt; true, () =&gt; false ); Pretty Print​ To control how union variants are printed with their ToString() methods, override and seal the union declaration's ToString() method. For example: [Union] public partial record QueryResult&lt;T&gt; { public partial record Ok(T Value); public partial record NotFound; public partial record Unauthorized; public sealed override string ToString() =&gt; Match( ok =&gt; ok.Value.ToString(), notFound =&gt; &quot;Not found.&quot;, unauthorized =&gt; &quot;Unauthorized access.&quot; ); } Note: You must seal the ToString() override to prevent the compiler from synthesizing a custom ToString() method for each variant. More info: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record#built-in-formatting-for-display Shared Properties​ To create a property shared by all variants, add it to the union declaration. For example, the following code requires all union variants to initialize the StatusCode property. This makes StatusCode available to anyone with a reference to HttpResponse without having to match. [Union] public partial record HttpResponse { public partial record Success; public partial record Error(string Message); // 1. All variants shall have a status code. public required int StatusCode { get; init; } } using var client = new HttpClient(); var response = await CreateUserAsync(client, &quot;John&quot;, &quot;Smith&quot;); // 2. The `StatusCode` property is available at the union level. var statusCode = response.StatusCode; public static async Task&lt;HttpResponse&gt; CreateUserAsync( HttpClient client, string firstName, string lastName ) { using var response = await client.PostJsonAsync( &quot;/users&quot;, new { firstName, lastName } ); var content = await response.Content.ReadAsStringAsync(); if (!response.IsSuccessStatusCode) { return new HttpResponse.Error(content) { StatusCode = (int)response.StatusCode, }; } return new HttpResponse.Success() { StatusCode = (int)response.StatusCode, }; } Stateful Matching​ To reduce memory allocations, use the Match overload that accepts a generic state parameter as its first argument. This allows your match parameter lambdas to be static but still flow state through: using Dunet; using static Expression; var environment = new Dictionary&lt;string, int&gt;() { [&quot;a&quot;] = 1, [&quot;b&quot;] = 2, [&quot;c&quot;] = 3, }; var expression = new Add(new Variable(&quot;a&quot;), new Multiply(new Number(2), new Variable(&quot;b&quot;))); var result = Evaluate(environment, expression); Console.WriteLine(result); // &quot;5&quot; static int Evaluate(Dictionary&lt;string, int&gt; env, Expression exp) =&gt; exp.Match( // 1. Pass your state &quot;container&quot; as the first parameter. state: env, // 2. Use static lambdas for each variant's match method. static (_, number) =&gt; number.Value, // 3. Reference the state as the first argument of each lambda. static (state, add) =&gt; Evaluate(state, add.Left) + Evaluate(state, add.Right), static (state, mul) =&gt; Evaluate(state, mul.Left) * Evaluate(state, mul.Right), static (state, var) =&gt; state[var.Value] ); [Union] public partial record Expression { public partial record Number(int Value); public partial record Add(Expression Left, Expression Right); public partial record Multiply(Expression Left, Expression Right); public partial record Variable(string Value); } Nest Unions​ To declare a union nested within a class or record, the class or record must be partial. For example: // This type declaration must be partial. public partial class Parent1 { // So must this one. public partial class Parent2 { // Unions must always be partial. [Union] public partial record Nested { public partial record Variant1; public partial record Variant2; } } } // Access variants like any other nested type. var variant1 = new Parent1.Parent2.Nested.Variant1();   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#about","content":" note Add union types to C# - similar with F#/TS discriminated unions Check his examples- awesome  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#example-source-csproj-source-files","content":" CSharp ProjectProgram.csRecognize.cs This is the CSharp Project that references dunet &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Dunet&quot; Version=&quot;1.8.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  UnionAttribute.g.csduneDemo.WhatIsTheString.g.csduneDemo.WhatIsTheStringMatchExtensions.g.cs using System; namespace Dunet; /// &lt;summary&gt; /// Enables dunet union source generation for the decorated partial record. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class UnionAttribute : Attribute {}   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#download-example-net--c","content":" tip Download Example project dunet   ","version":"Next","tagName":"h3"},{"title":"Share dunet​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#share-dunet","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/dunet  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"dunet by Domn Werner","url":"/RSCG_Examples/v2/docs/dunet#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"EntityLengths.Generator by Taras Kovalenko","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#info","content":" info Name: EntityLengths.Generator A C# source generator that automatically generates string length constants from Entity Framework configurations and data annotations. Author: Taras Kovalenko NuGet:https://www.nuget.org/packages/EntityLengths.Generator/ You can find more details at https://github.com/TarasKovalenko/EntityLengths.Generator/ Source: https://github.com/TarasKovalenko/EntityLengths.Generator/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#original-readme","content":" note EntityLengths.Generator Goals​ This library is a C# source generator designed to automatically generate string length constants from Entity Framework configurations and data annotations. By analyzing your model configurations, it eliminates the need for manual constant maintenance and reduces the risk of hardcoded length values across your application. Terms of use​ By using this project or its source code, for any purpose and in any shape or form, you grant your implicit agreement to all of the following statements: You unequivocally condemn Russia and its military aggression against UkraineYou recognize that Russia is an occupant that unlawfully invaded a sovereign stateYou agree that Russia is a terrorist stateYou fully support Ukraine's territorial integrity, including its claims over temporarily occupied territoriesYou reject false narratives perpetuated by Russian state propaganda To learn more about the war and how you can help, click here. Glory to Ukraine! 🇺🇦 Benefits​ Automatic Constant Generation: Automatically create string length constants based on your existing model configurationsReduced Redundancy: Eliminate manual maintenance of string length constantsCompile-Time Safety: Generate constants at compile-time, ensuring type safety and preventing runtime errorsFlexible Configuration: Supports multiple ways of defining string lengths across different .NET and Entity Framework patterns Features​ Extracts string length configurations from: EF Core Fluent API configurations (HasMaxLength)Data Annotations [MaxLength][StringLength] Column type definitions [Column(TypeName = &quot;varchar(200)&quot;)][Column(TypeName = &quot;nvarchar(200)&quot;)][Column(TypeName = &quot;char(200)&quot;)] DbContext configurations (OnModelCreating) Installation​ Install the library via NuGet Package Manager: dotnet add package EntityLengths.Generator Usage​ The generator supports a few ways to define string lengths: // Using MaxLength attribute public class User { [MaxLength(50)] public string Name { get; set; } } // Using StringLength attribute public class User { [StringLength(50)] public string Surname { get; set; } } // Using Column attribute public class User { [Column(TypeName = &quot;varchar(200)&quot;)] public string Url { get; set; } } // Using Fluent API public class UserConfiguration : IEntityTypeConfiguration&lt;User&gt; { public void Configure(EntityTypeBuilder&lt;User&gt; builder) { builder.Property(p =&gt; p.Name) .HasMaxLength(50); } } // DbContext configuration public class User { public required string Surname { get; set; } } public class UserDbContext : DbContext { public DbSet&lt;User&gt; Users { get; set; } = null!; protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity&lt;User&gt;().Property(b =&gt; b.Surname).HasMaxLength(150).IsRequired(); } } Generated output: public static partial class EntityLengths { public static partial class User { public const int NameLength = 50; public const int SurnameLength = 50; public const int UrlLength = 200; public const int SurnameLength = 200; } } Configuration​ There are ways to configure EntityLengths.Generator. Configuration values are needed during compile-time since this is a source generator: Assembly level attribute for configuration: EntityLengthsGeneratorAttribute [assembly: EntityLengthsGenerator( GenerateDocumentation = true, GeneratedClassName = &quot;Constants&quot;, LengthSuffix = &quot;Length&quot;, IncludeNamespaces = [&quot;EntityLengths.Generator.Sample.Entities&quot;], ExcludeNamespaces = [&quot;EntityLengths.Generator.Sample.Entities.Exclude&quot;], ScanNestedNamespaces = true, ScanEntitySuffix = &quot;User&quot;, Namespace = &quot;EntityLengths.Generator.Sample&quot; )] GenerateDocumentation - Generates XML documentation for the generated class. Default is false.GeneratedClassName - The name of the generated class. Default is EntityLengths.LengthSuffix - The suffix for the generated length constants. Default is Length.IncludeNamespaces - The namespaces to include in the generation process. Default is null.ExcludeNamespaces - The namespaces to exclude from the generation process. Default is null.ScanNestedNamespaces - Scans nested namespaces for entities. Default is true.ScanEntitySuffix - The suffix for the entity classes to scan. Default is null.Namespace - The namespace for the generated class. Default is null. Generated output: // &lt;auto-generated/&gt; namespace EntityLengths.Generator.Sample; /// &lt;summary&gt; /// Contains generated string length constants for entity properties /// &lt;/summary&gt; public static partial class Constants { /// &lt;summary&gt; /// Length constants for ColumnTypeDefinitionUser /// &lt;/summary&gt; public static partial class ColumnTypeDefinitionUser { /// &lt;summary&gt; /// Maximum length for Name /// &lt;/summary&gt; public const int NameLength = 200; /// &lt;summary&gt; /// Maximum length for Name1 /// &lt;/summary&gt; public const int Name1Length = 300; /// &lt;summary&gt; /// Maximum length for Name2 /// &lt;/summary&gt; public const int Name2Length = 400; } /// &lt;summary&gt; /// Length constants for DataAnnotationUser /// &lt;/summary&gt; public static partial class DataAnnotationUser { /// &lt;summary&gt; /// Maximum length for Name /// &lt;/summary&gt; public const int NameLength = 50; /// &lt;summary&gt; /// Maximum length for Surname /// &lt;/summary&gt; public const int SurnameLength = 150; } /// &lt;summary&gt; /// Length constants for DbContextUser /// &lt;/summary&gt; public static partial class DbContextUser { /// &lt;summary&gt; /// Maximum length for Name /// &lt;/summary&gt; public const int NameLength = 50; } /// &lt;summary&gt; /// Length constants for FluentUser /// &lt;/summary&gt; public static partial class FluentUser { /// &lt;summary&gt; /// Maximum length for Name /// &lt;/summary&gt; public const int NameLength = 50; } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#about","content":" note Generating constants for max length for properties in entities  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csglobals.csDotNetStatsContext.cs This is the CSharp Project that references EntityLengths.Generator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.InMemory&quot; Version=&quot;9.0.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;9.0.1&quot;&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore&quot; Version=&quot;9.0.1&quot; /&gt; &lt;PackageReference Include=&quot;EntityLengths.Generator&quot; Version=&quot;1.0.3&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Constants.g.cs // &lt;auto-generated/&gt; namespace Stats.Database; public static partial class Constants { public static partial class Project { public const int DescriptionLength = 500; public const int NameLength = 50; public const int SourceCodeUrlLength = 50; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#download-example-net--c","content":" tip Download Example project EntityLengths.Generator   ","version":"Next","tagName":"h3"},{"title":"Share EntityLengths.Generator​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#share-entitylengthsgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/EntityLengths.Generator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Database\" has the following generators:​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#category-database-has-the-following-generators","content":" 1 Breezy  2 Dapper.AOT  3 EntityLengths.Generator  4 Gedaq  5 TableStorage  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"EntityLengths.Generator by Taras Kovalenko","url":"/RSCG_Examples/v2/docs/EntityLengths.Generator#see-category","content":" Database ","version":"Next","tagName":"h3"},{"title":"Equatable.Generator by Eden Prairie","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Equatable.Generator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#info","content":" info Name: Equatable.Generator Source generator for Equals and GetHashCode Author: Eden Prairie NuGet:https://www.nuget.org/packages/Equatable.Generator/ You can find more details at https://github.com/loresoft/Equatable.Generator Source: https://github.com/loresoft/Equatable.Generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#original-readme","content":" note Equatable.Generator Source generator for Equals and GetHashCode with attribute based control of equality implementation Features​ Override Equals and GetHashCodeImplement IEquatable&lt;T&gt;Support class, record and struct typesSupport EqualityComparer per property via attributeAttribute based control of equality implementation.Attribute comparers supported: String, Sequence, Dictionary, HashSet, Reference, and CustomNo runtime dependencies. Library is compile time dependence only. Usage​ Add package​ Add the nuget package to your projects. dotnet add package Equatable.Generator Prevent including Equatable.Generator as a dependency &lt;PackageReference Include=&quot;Equatable.Generator&quot; PrivateAssets=&quot;all&quot; /&gt; Requirements​ This library requires: Target framework .NET Standard 2.0 or greaterProject C# LangVersion 8.0 or higher Equatable Attributes​ Place [Equatable] attribute on a class, record or struct. The source generator will create a partial with overrides for Equals and GetHashCode for all public properties. [Equatable] Marks the class to generate overrides for Equals and GetHashCode The default comparer used in the implementation of Equals and GetHashCode is EqualityComparer&lt;T&gt;.Default. Customize the comparer used with the following attributes. [IgnoreEquality] Ignore property in Equals and GetHashCode implementations[StringEquality] Use specified StringComparer when comparing strings[SequenceEquality] Use Enumerable.SequenceEqual to determine whether enumerables are equal[DictionaryEquality] Use to determine if dictionaries are equal[HashSetEquality] Use ISet&lt;T&gt;.SetEquals to determine whether enumerables are equal[ReferenceEquality] Use Object.ReferenceEquals to determines whether instances are the same instance[EqualityComparer] Use the specified EqualityComparer Example Usage​ Example of using the attributes to customize the source generation of Equals and GetHashCode [Equatable] public partial class UserImport { [StringEquality(StringComparison.OrdinalIgnoreCase)] public string EmailAddress { get; set; } = null!; public string? DisplayName { get; set; } public string? FirstName { get; set; } public string? LastName { get; set; } public DateTimeOffset? LockoutEnd { get; set; } public DateTimeOffset? LastLogin { get; set; } [IgnoreEquality] public string FullName =&gt; $&quot;{FirstName} {LastName}&quot;; [HashSetEquality] public HashSet&lt;string&gt;? Roles { get; set; } [DictionaryEquality] public Dictionary&lt;string, int&gt;? Permissions { get; set; } [SequenceEquality] public List&lt;DateTimeOffset&gt;? History { get; set; } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#about","content":" note Generating Equals from properties  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Equatable.Generator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Equatable.Generator&quot; Version=&quot;2.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GeneratorEqualsDemo.Person.Equatable.g.cs // &lt;auto-generated /&gt; #nullable enable namespace GeneratorEqualsDemo { partial class Person : global::System.IEquatable&lt;global::GeneratorEqualsDemo.Person?&gt; { /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Equatable.SourceGenerator&quot;, &quot;2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6&quot;)] public bool Equals(global::GeneratorEqualsDemo.Person? other) { return !(other is null) &amp;&amp; global::System.StringComparer.OrdinalIgnoreCase.Equals(FirstName, other.FirstName) &amp;&amp; global::System.StringComparer.OrdinalIgnoreCase.Equals(LastName, other.LastName); } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Equatable.SourceGenerator&quot;, &quot;2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6&quot;)] public override bool Equals(object? obj) { return Equals(obj as global::GeneratorEqualsDemo.Person); } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Equatable.SourceGenerator&quot;, &quot;2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6&quot;)] public static bool operator ==(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) { return global::System.Collections.Generic.EqualityComparer&lt;global::GeneratorEqualsDemo.Person?&gt;.Default.Equals(left, right); } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Equatable.SourceGenerator&quot;, &quot;2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6&quot;)] public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) { return !(left == right); } /// &lt;inheritdoc /&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Equatable.SourceGenerator&quot;, &quot;2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6&quot;)] public override int GetHashCode(){ int hashCode = 1938039292; hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(FirstName!); hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(LastName!); return hashCode; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#download-example-net--c","content":" tip Download Example project Equatable.Generator   ","version":"Next","tagName":"h3"},{"title":"Share Equatable.Generator​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#share-equatablegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Equatable.Generator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Equals\" has the following generators:​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#category-equals-has-the-following-generators","content":" 1 Equatable.Generator  2 GeneratorEquals  3 Valuify  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Equatable.Generator by Eden Prairie","url":"/RSCG_Examples/v2/docs/Equatable.Generator#see-category","content":" Equals ","version":"Next","tagName":"h3"},{"title":"Farskeptic.AutoCompose by farskeptic/jmagel","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#info","content":" info Name: Farskeptic.AutoCompose A .NET source generator that enables composition without having to implement pass-thru code. No runtime reflection. Author: farskeptic/jmagel NuGet:https://www.nuget.org/packages/Farskeptic.AutoCompose/ You can find more details at https://github.com/farskeptic/AutoCompose Source: https://github.com/farskeptic/AutoCompose  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#original-readme","content":" note AutoCompose AutoCompose is a .NET source generator that allows the implementation of an interface via composition without having to implement pass-thru code. There is no runtime reflection. All unimplemented properties and methods on the interface are automatically generated as pass-thru logic.Any implemented properties or methods will NOT be generated by AutoCompose.As you add or remove implementations, AutoCompose re-generates to compensate. This allows object composition to be used as easily as inheritance. Getting Started Given an interface named ISample: Create a class implementing ISample via composition using AutoCompose by: Implementing a partial classAdding the instance of the interface as a member variable (e.g. _sample)Injecting the variable in the constructorDecorating the class with the AutoCompose attribute [AutoCompose(typeof(ISample), &quot;_sample&quot;)] public partial class Sample: ISample { protected ISample _sample; // all non-implemented properties and methods are automatically generated as pass-thru logic public Sample(ISample sample) { _sample = sample; } : } AutoCompose runs at compile time, and generates the source required to fully implement the interface. Composition as easily as Inheritance When trying to decide between inheritance or composition, the amount of pass-thru code that must be coded and maintained often plays a role in the decision. Example: When we need to override the implementation of a single method for an interface that contains 10 methods, the code burden of implementing and maintaing the 9 pass-thru methods often causes developers to choose inheritance over composition, regardless of other considerations. With AutoCompose, this issue goes away. The developer is free to choose inheritance or composition for purely architectural reasons, without having to worry about implementation or maintenance difficulties. When should I use AutoCompose? Any time you want to use composition, and have at least one property or method that would be implemented as pass-thru code, AutoCompose can take that burden away from you. Known Limitations AutoCompose currently works for interfaces only. It DOES NOT work (yet) for abstract classes.AutoCompose may not work if your code has multiple definitions of an interface with the same name. AutoCompose (currently) just picks the first matching symbol, and so does not discriminate the target-interface based purely on namespaces.If your code contains extremely deep namespaces and would generate source code files with very long names, then there can be filename-length conflicts with the windows file system.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#about","content":" note Generating decorators for classes that implements interfaces.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#example-source-csproj-source-files","content":" CSharp ProjectProgram.csCoffee.csICoffee.csCoffeeWithLogging.cs This is the CSharp Project that references Farskeptic.AutoCompose &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Farskeptic.AutoCompose&quot; Version=&quot;1.0.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Decorator.CoffeeWithLogging.g.cs // &lt;auto-generated&gt; // WARNING: THIS CODE IS AUTO-GENERATED AT COMPILE-TIME. ANY CHANGES WILL BE OVERWRITTEN ON NEXT COMPILE. // &lt;/auto-generated&gt; namespace Decorator { internal partial class CoffeeWithLogging { public virtual Task&lt;bool&gt; Prepare() { return _cof.Prepare(); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#download-example-net--c","content":" tip Download Example project Farskeptic.AutoCompose   ","version":"Next","tagName":"h3"},{"title":"Share Farskeptic.AutoCompose​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#share-farskepticautocompose","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Farskeptic.AutoCompose  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Farskeptic.AutoCompose by farskeptic/jmagel","url":"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"FactoryGenerator by Westermo Network Technologies","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/FactoryGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#info","content":" info Name: FactoryGenerator Package Description Author: Westermo Network Technologies NuGet:https://www.nuget.org/packages/FactoryGenerator/ You can find more details at https://github.com/westermo/FactoryGenerator Source: https://github.com/westermo/FactoryGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#original-readme","content":" note Jab Compile Time Dependency Injection Jab provides a C# Source Generator based dependency injection container implementation. Fast startup (200x faster than Microsoft.Extensions.DependencyInjection). Details.Fast resolution (7x faster than Microsoft.Extensions.DependencyInjection). Details.No runtime dependencies.AOT and linker friendly, all code is generated during project compilation.Clean stack traces: Readable generated code: Registration validation. Container configuration issues become compiler errors: Incremental generation, .NET 5/6/7/8 SDK support, .NET Standard 2.0 support, [Unity support](https://github.com/westermo/FactoryGenerator/README.md#Unity-installation Example​ Add Jab package reference: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Jab&quot; Version=&quot;0.10.2&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; Define a service and implementation: internal interface IService { void M(); } internal class ServiceImplementation : IService { public void M() { } } Define a composition root and register services: [ServiceProvider] [Transient(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } Use the service provider: MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IService&gt;(); Features​ No runtime dependency, safe to use in librariesTransient, Singleton, Scoped service registrationNamed registrationsFactory registrationInstance registrationIEnumerable resolutionIDisposable and IAsyncDisposable supportIServiceProvider support The plan is to support the minimum feature set Microsoft.Extensions.DependencyInjection.Abstraction requires but NOT the IServiceCollection-based registration syntax as it is runtime based. Singleton services​ Singleton services are created once per container lifetime in a thread-safe manner and cached. To register a singleton service use the SingletonAttribute: [ServiceProvider] [Singleton(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } Singleton Instances​ If you want to use an existing object as a service define a property in the container declaration and use the Instance property of the SingletonAttribute to register the service: [ServiceProvider] [Singleton(typeof(IService), Instance = nameof(MyServiceInstance))] internal partial class MyServiceProvider { public IService MyServiceInstance { get;set; } } Then initialize the property during the container creation: MyServiceProvider c = new MyServiceProvider(); c.MyServiceInstance = new ServiceImplementation(); IService service = c.GetService&lt;IService&gt;(); Named services​ Use the Name property to assign a name to your service registrations and [FromNamedServices(&quot;...&quot;)] attribute to resolve a service using its name. [ServiceProvider] [Singleton(typeof(INotificationService), typeof(EmailNotificationService), Name=&quot;email&quot;)] [Singleton(typeof(INotificationService), typeof(SmsNotificationService), Name=&quot;sms&quot;)] [Singleton(typeof(Notifier))] internal partial class MyServiceProvider {} class Notifier { public Notifier( [FromNamedServices(&quot;email&quot;)] INotificationService email, [FromNamedServices(&quot;sms&quot;)] INotificationService sms) {} } NOTE: Jab also recognizes the [FromKeyedServices] attribute from Microsoft.Extensions.DependencyInjection. Factories​ Sometimes it's useful to provide a custom way to create a service instance without using the automatic construction selection. To do this define a method in the container declaration and use the Factory property of the SingletonAttribute or TransientAttribute to register the service: [ServiceProvider] [Transient(typeof(IService), Factory = nameof(MyServiceFactory))] internal partial class MyServiceProvider { public IService MyServiceFactory() =&gt; new ServiceImplementation(); } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IService&gt;(); When using with TransientAttribute the factory method would be invoked for every service resolution. When used with SingletonAttribute it would only be invoked the first time the service is requested. Similar to constructors, factories support parameter injection: [ServiceProvider] [Transient(typeof(IService), Factory = nameof(MyServiceFactory))] [Transient(typeof(SomeOtherService))] internal partial class MyServiceProvider { public IService MyServiceFactory(SomeOtherService other) =&gt; new ServiceImplementation(other); } Scoped Services​ Scoped services are created once per service provider scope. To create a scope use the CreateScope() method of the service provider. Service are resolved from the scope using the GetService&lt;IService&gt;() call. [ServiceProvider] [Scoped(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); using MyServiceProvider.Scope scope = c.CreateScope(); IService service = scope.GetService&lt;IService&gt;(); When the scope is disposed all IDisposable and IAsyncDisposable services that were resolved from it are disposed as well. Generic registration attributes​ You can use generic attributes to register services if your project targets net7.0 or net6.0 and has LangVersion set to preview. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFrameworks&gt;net7.0&lt;/TargetFrameworks&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt; Generic attributes allow declaration to be more compact by avoiding the typeof calls: [ServiceProvider] [Scoped&lt;IService, ServiceImplementation&gt;] [Import&lt;IMyModule&gt;] internal partial class MyServiceProvider { } Modules​ Often, a set of service registrations would represent a distinct set of functionality that can be included into arbitrary service provider. Modules are used to implement registration sharing. To define a module create an interface and mark it with ServiceProviderModuleAttribute. Service registrations can be listed in module the same way they are in the service provider. [ServiceProviderModule] [Singleton(typeof(IService), typeof(ServiceImplementation))] public interface IMyModule { } To use the module apply the Import attribute to the service provider type: [ServiceProvider] [Import(typeof(IMyModule))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IEnumerable&lt;IService&gt;&gt;(); Modules can import other modules as well. NOTE: module service and implementation types have to be accessible from the project where service provider is generated. Root services​ By default, IEnumerable&lt;...&gt; service accessors are only generated when requested by other service constructors. If you would like to have a root IEnumerable&lt;..&gt; accessor generated use the RootService parameter of the ServiceProvider attribute. The generator also scans all the GetService&lt;...&gt; usages and tries to all collected type arguments as the root service. [ServiceProvider(RootServices = new [] {typeof(IEnumerable&lt;IService&gt;)})] [Singleton(typeof(IService), typeof(ServiceImplementation))] [Singleton(typeof(IService), typeof(ServiceImplementation))] [Singleton(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IEnumerable&lt;IService&gt;&gt;(); Samples​ Console application​ Sample Jab usage in console application can be found in src/samples/ConsoleSample Performance​ The performance benchmark project is available in src/Jab.Performance/. Startup time​ The startup time benchmark measures time between application startup and the first service being resolved. | Method | Mean | Error | StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated | |------- |------------:|----------:|----------:|-------:|--------:|-------:|-------:|------:|----------:| | MEDI | 2,437.88 ns | 14.565 ns | 12.163 ns | 220.91 | 2.72 | 0.6332 | 0.0114 | - | 6632 B | | Jab | 11.03 ns | 0.158 ns | 0.123 ns | 1.00 | 0.00 | 0.0046 | - | - | 48 B | GetService​ The GetService benchmark measures the provider.GetService&lt;IService&gt;() call. | Method | Mean | Error | StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated | |------- |----------:|----------:|----------:|------:|--------:|-------:|------:|------:|----------:| | MEDI | 39.340 ns | 0.2419 ns | 0.2263 ns | 7.01 | 0.09 | 0.0023 | - | - | 24 B | | Jab | 5.619 ns | 0.0770 ns | 0.0643 ns | 1.00 | 0.00 | 0.0023 | - | - | 24 B | Unity installation​ Navigate to the Packages directory of your project.Adjust the project manifest file manifest.json in a text editor.Ensure https://registry.npmjs.org/ is part of scopedRegistries.Ensure com.pakrym is part of scopes.Add com.pakrym.jab to the dependencies, stating the latest version. A minimal example ends up looking like this: { &quot;scopedRegistries&quot;: [ { &quot;name&quot;: &quot;npmjs&quot;, &quot;url&quot;: &quot;https://registry.npmjs.org/&quot;, &quot;scopes&quot;: [ &quot;com.pakrym&quot; ] } ], &quot;dependencies&quot;: { &quot;com.pakrym.jab&quot;: &quot;0.10.2&quot;, ... } } Debugging locally​ Run dotnet build /t:CreateLaunchSettings in the Jab.Tests directory would update the Jab\\Properties\\launchSettings.json file to include csc invocation that allows F5 debugging of the generator targeting the Jab.Tests project.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#about","content":" note generating DI code  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.csDatabaseCon.cs This is the CSharp Project that references FactoryGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FactoryGenerator&quot; Version=&quot;1.0.11&quot; /&gt; &lt;PackageReference Include=&quot;FactoryGenerator.Attributes&quot; Version=&quot;1.0.11&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DependencyInjectionContainer.Constructor.g.csDependencyInjectionContainer.Declarations.g.csDependencyInjectionContainer.EnumerableDeclarations.g.csDependencyInjectionContainer.Lookup.g.csLifetimeScope.Constructor.g.csLifetimeScope.Declarations.g.csLifetimeScope.EnumerableDeclarations.g.csLifetimeScope.Lookup.g.cs using System; using System.Collections.Generic; using FactoryGenerator; using System.CodeDom.Compiler; namespace InjectDemo.Generated; #nullable enable public partial class DependencyInjectionContainer { public DependencyInjectionContainer() { m_lookup = new(2) { { typeof(InjectDemo.IDatabase),InjectDemo_IDatabase }, { typeof(InjectDemo.DatabaseCon),InjectDemo_DatabaseCon }, }; } public ILifetimeScope BeginLifetimeScope() { var scope = new LifetimeScope(this); resolvedInstances.Add(new WeakReference&lt;IDisposable&gt;(scope)); return scope; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#download-example-net--c","content":" tip Download Example project FactoryGenerator   ","version":"Next","tagName":"h3"},{"title":"Share FactoryGenerator​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#share-factorygenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/FactoryGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"FactoryGenerator by Westermo Network Technologies","url":"/RSCG_Examples/v2/docs/FactoryGenerator#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"EnumUtilities by Fabricio Godoy","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/EnumUtilities","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#info","content":" info Name: EnumUtilities Provides generic enum functions such as bitwise operations, fast HasFlag, and others. Author: Fabricio Godoy NuGet:https://www.nuget.org/packages/Raiqub.Generators.EnumUtilities/ You can find more details at https://github.com/skarllot/EnumUtilities Source: https://github.com/skarllot/EnumUtilities  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#original-readme","content":" note Enum Utilities A source generator for C# that uses Roslyn to create extensions and parsers for enumerations 🏃 Quickstart | 📗 Guide | 📦 NuGet A source generator for C# that uses Roslyn to create extensions and parsers for enumerations, allowing to get a value associated to enum member or parse back from attribute value to enum member. All code generated at compile time thus avoid using reflection or boilerplate code. Compatibility​ Raiqub.Generators.EnumUtilities runs with Roslyn compiler so does not introduce a new dependency to your project besides a library containing the EnumGenerator attribute. It requires at least the .NET 6 SDK to run, but you can target earlier frameworks. Quickstart​ Add the package to your application using dotnet add package Raiqub.Generators.EnumUtilities Adding the package will automatically add a marker attribute, [EnumGenerator], to your project. To use the generator, add the [EnumGenerator] attribute to an enum. For example: [EnumGenerator] public enum Categories { Electronics, Food, Automotive, Arts, BeautyCare, Fashion } This will generate 3 classes with the following methods: CategoriesExtensions ToStringFast(this Categories)IsDefined(this Categories)InterlockedAdd(this ref Categories, int)InterlockedDecrement(this ref Categories)InterlockedIncrement(this ref Categories)InterlockedCompareExchange(this ref Categories, Categories, Categories)InterlockedExchange(this ref Categories, Categories) CategoriesFactory TryParse(string?, StringComparison, out Categories)TryParseIgnoreCase(string?, out Categories)TryParse(string?, out Categories)TryParse(string?, StringComparison)TryParseIgnoreCase(string?)TryParse(string?)GetValues()GetNames() CategoriesValidation IsDefined(Categories)IsDefined(string?, StringComparison)IsDefinedIgnoreCase(string?)IsDefined(string?) Bit flags enums are supported too: [Flags] [EnumGenerator] public enum Colours { Red = 1, Blue = 2, Green = 4, } Then 3 classes will be generated with the following methods: ColoursExtensions ToStringFast(this Colours)IsDefined(this Colours)InterlockedAnd(this ref Colours, Colours)InterlockedOr(this ref Colours, Colours)InterlockedCompareExchange(this ref Colours, Colours, Colours)InterlockedExchange(this ref Colours, Colours) ColoursFactory TryParse(string?, StringComparison, out Colours)TryParse(string?, out Colours)TryParseIgnoreCase(string?, out Colours)TryParse(string?)TryParseIgnoreCase(string?)TryParse(string?, StringComparison)GetValues()GetNames() ColoursValidation IsDefined(Colours)IsDefined(string?, StringComparison)IsDefinedIgnoreCase(string?)IsDefined(string?) All generated code are properly nullable annotated and removed from code coverage. Guide​ The following attributes are supported: EnumMemberAttribute​ Example: [EnumGenerator] public enum PaymentMethod { [EnumMember(Value = &quot;Credit card&quot;)] Credit, [EnumMember(Value = &quot;Debit card&quot;)] Debit, Cash, Cheque } This will generate the following methods: PaymentMethodExtensions ToEnumMemberValue(this PaymentMethod) PaymentMethodFactory TryParseFromEnumMemberValue(string?, StringComparison, out PaymentMethod)TryParseFromEnumMemberValue(string?, out PaymentMethod)TryParseFromEnumMemberValue(string?, StringComparison)TryParseFromEnumMemberValue(string?) DescriptionAttribute​ Example: [EnumGenerator] public enum PaymentMethod { Credit, Debit, [Description(&quot;The payment by using physical cash&quot;)] Cash, Cheque } This will generate the following methods: PaymentMethodExtensions GetDescription(this PaymentMethod) PaymentMethodFactory TryCreateFromDescription(string?, StringComparison, out PaymentMethod)TryCreateFromDescription(string?, out PaymentMethod)TryCreateFromDescription(string?, StringComparison)TryCreateFromDescription(string?) DisplayAttribute​ Example: [EnumGenerator] public enum WeekDays { [Display( Name = nameof(Strings.MondayFull), ShortName = nameof(Strings.MondayShort), Description = nameof(Strings.MondayDescription), ResourceType = typeof(Strings))] Monday, [Display(ShortName = &quot;Tue&quot;)] Tuesday, [Display] Wednesday, [Display(Name = &quot;Thursday&quot;)] Thursday, [Display(Name = &quot;Friday&quot;, ShortName = &quot;Fri&quot;)] Friday, [Display(ShortName = &quot;Sat&quot;, Description = &quot;Almost the last day of the week&quot;)] Saturday, [Display(Description = &quot;The last day of the week&quot;)] Sunday } Note that if ResourceType is provided the generated code will correctly get the value from resource. This will generate the following methods: WeekDaysExtensions GetDisplayShortName(this WeekDays)GetDisplayName(this WeekDays)GetDescription(this WeekDays) WeekDaysFactory TryCreateFromDisplayShortName(string?, StringComparison, out WeekDays)TryCreateFromDisplayShortName(string?, out WeekDays)TryCreateFromDisplayShortName(string?, StringComparison)TryCreateFromDisplayShortName(string?)TryCreateFromDisplayName(string?, StringComparison, out WeekDays)TryCreateFromDisplayName(string?, out WeekDays)TryCreateFromDisplayName(string?, StringComparison)TryCreateFromDisplayName(string?)TryCreateFromDescription(string?, StringComparison, out WeekDays)TryCreateFromDescription(string?, out WeekDays)TryCreateFromDescription(string?, StringComparison)TryCreateFromDescription(string?) JSON Serialization​ Besides the member name, supports the EnumMemberAttribute and JsonPropertyNameAttribute attributes. Example: [JsonConverterGenerator] [JsonConverter(typeof(SeasonJsonConverter))] public enum Season { [EnumMember(Value = &quot;\\ud83c\\udf31&quot;)] Spring = 1, [EnumMember(Value = &quot;\\u2600\\ufe0f&quot;)] Summer, [EnumMember(Value = &quot;\\ud83c\\udf42&quot;)] Autumn, [EnumMember(Value = &quot;\\u26c4&quot;)] Winter } This will generate the following JSON converter: SeasonJsonConverter. Contributing​ If something is not working for you or if you think that the source file should change, feel free to create an issue or Pull Request. I will be happy to discuss and potentially integrate your ideas! License​ See the LICENSE file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#about","content":" note Enum to string- and multiple other extensions for an enum  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#example-source-csproj-source-files","content":" CSharp ProjectProgram.csColors.cs This is the CSharp Project that references EnumUtilities &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Raiqub.Generators.EnumUtilities&quot; Version=&quot;1.6.14&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EnumClassDemo.ColorsExtensions.g.csEnumClassDemo.ColorsFactory.g.csEnumClassDemo.ColorsValidation.g.cs // &lt;auto-generated /&gt; #nullable enable using System; using System.Runtime.CompilerServices; using System.Threading; #pragma warning disable CS1591 // publicly visible type or member must be documented namespace EnumClassDemo { [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Raiqub.Generators.EnumUtilities&quot;, &quot;1.6.0.0&quot;)] public static partial class ColorsExtensions { /// &lt;summary&gt;Converts the value of this instance to its equivalent string representation.&lt;/summary&gt; /// &lt;returns&gt;The string representation of the value of this instance.&lt;/returns&gt; public static string ToStringFast(this Colors value) { return value switch { Colors.None =&gt; nameof(Colors.None), Colors.Red =&gt; nameof(Colors.Red), Colors.Green =&gt; nameof(Colors.Green), Colors.Blue =&gt; nameof(Colors.Blue), _ =&gt; value.ToString() }; } /// &lt;summary&gt;Returns a boolean telling whether the value of this instance exists in the enumeration.&lt;/summary&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value of this instance exists in the enumeration; &lt;c&gt;false&lt;/c&gt; otherwise.&lt;/returns&gt; public static bool IsDefined(this Colors value) { return ColorsValidation.IsDefined(value); } #if NET5_0_OR_GREATER /// &lt;summary&gt;Bitwise &quot;ands&quot; two enumerations and replaces the first value with the result, as an atomic operation.&lt;/summary&gt; /// &lt;param name=&quot;location&quot;&gt;A variable containing the first value to be combined.&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;The value to be combined with the value at &lt;paramref name=&quot;location&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;The original value in &lt;paramref name=&quot;location&quot; /&gt;.&lt;/returns&gt; public static Colors InterlockedAnd(this ref Colors location, Colors value) { ref int locationRaw = ref Unsafe.As&lt;Colors, int&gt;(ref location); int resultRaw = Interlocked.And(ref locationRaw, Unsafe.As&lt;Colors, int&gt;(ref value)); return Unsafe.As&lt;int, Colors&gt;(ref resultRaw); } /// &lt;summary&gt;Bitwise &quot;ors&quot; two enumerations and replaces the first value with the result, as an atomic operation.&lt;/summary&gt; /// &lt;param name=&quot;location&quot;&gt;A variable containing the first value to be combined.&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;The value to be combined with the value at &lt;paramref name=&quot;location&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;The original value in &lt;paramref name=&quot;location&quot; /&gt;.&lt;/returns&gt; public static Colors InterlockedOr(this ref Colors location, Colors value) { ref int locationRaw = ref Unsafe.As&lt;Colors, int&gt;(ref location); int resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As&lt;Colors, int&gt;(ref value)); return Unsafe.As&lt;int, Colors&gt;(ref resultRaw); } #endif /// &lt;summary&gt;Compares two enumerations for equality and, if they are equal, replaces the first value.&lt;/summary&gt; /// &lt;param name=&quot;location&quot;&gt;The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;The value that replaces the destination value if the comparison results in equality.&lt;/param&gt; /// &lt;param name=&quot;comparand&quot;&gt;The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.&lt;/param&gt; /// &lt;returns&gt;The original value in &lt;paramref name=&quot;location&quot; /&gt;.&lt;/returns&gt; public static Colors InterlockedCompareExchange(this ref Colors location, Colors value, Colors comparand) { ref int locationRaw = ref Unsafe.As&lt;Colors, int&gt;(ref location); int resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As&lt;Colors, int&gt;(ref value), Unsafe.As&lt;Colors, int&gt;(ref comparand)); return Unsafe.As&lt;int, Colors&gt;(ref resultRaw); } /// &lt;summary&gt;Sets an enumeration value to a specified value and returns the original value, as an atomic operation.&lt;/summary&gt; /// &lt;param name=&quot;location&quot;&gt;The variable to set to the specified value.&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.&lt;/param&gt; /// &lt;returns&gt;The original value of &lt;paramref name=&quot;location&quot; /&gt;.&lt;/returns&gt; public static Colors InterlockedExchange(this ref Colors location, Colors value) { ref int locationRaw = ref Unsafe.As&lt;Colors, int&gt;(ref location); int resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As&lt;Colors, int&gt;(ref value)); return Unsafe.As&lt;int, Colors&gt;(ref resultRaw); } public static string ToEnumMemberValue(this Colors value) { return value switch { Colors.None =&gt; &quot;This should be never seen&quot;, Colors.Red =&gt; nameof(Colors.Red), Colors.Green =&gt; nameof(Colors.Green), Colors.Blue =&gt; nameof(Colors.Blue), _ =&gt; value.ToString() }; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#download-example-net--c","content":" tip Download Example project EnumUtilities   ","version":"Next","tagName":"h3"},{"title":"Share EnumUtilities​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#share-enumutilities","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/EnumUtilities  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"EnumUtilities by Fabricio Godoy","url":"/RSCG_Examples/v2/docs/EnumUtilities#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"Figgle by Drew Noakes","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Figgle","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#info","content":" info Name: Figgle A source generator that produces ASCII banners at compile-time. This package is a great choice if the strings you want to render are static (i.e. string literals). If you want to render dynamic strings, use the Figgle package directly instead. You can use both at the same time. Author: Drew Noakes NuGet:https://www.nuget.org/packages/Figgle.Generator/ You can find more details at https://github.com/drewnoakes/figgle Source: https://github.com/drewnoakes/figgle  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#original-readme","content":" note _____ _ _ | __|_|___ ___| |___ | __| | . | . | | -_| |__| |_|_ |_ |_|___| |___|___| ASCII banner generation for .NET​ Console.WriteLine( FiggleFonts.Standard.Render(&quot;Hello, World!&quot;)); Produces... _ _ _ _ __ __ _ _ _ | | | | ___| | | ___ \\ \\ / /__ _ __| | __| | | | |_| |/ _ \\ | |/ _ \\ \\ \\ /\\ / / _ \\| '__| |/ _` | | | _ | __/ | | (_) | \\ V V / (_) | | | | (_| |_| |_| |_|\\___|_|_|\\___( ) \\_/\\_/ \\___/|_| |_|\\__,_(_) |/ Use Figgle's source generator to embed just the fonts you want into your assembly, or—if the text to render is known ahead of time—render that text during compilation, so you don't need to ship Figgle binaries with your app. Installation​ Figgle ships as NuGet packages that target .NET Standard 2.0, so runs almost everywhere. Project\tBadges\tDescriptionFiggle The core library. Supports parsing font files and rendering text. Figgle.Fonts A collection of 250+ FIGlet fonts, for use with Figgle. Figgle.Generator A source generator to embedding fonts and render static text at compile-time. Sample apps​ If you just want to see some code (it's not that complex) check out one of the following sample projects: Sample\tDescriptionBasics\tThe easiest option, if you don't care about application size or memory use. Static text generation\tFor statically-known text, have a source generator embed the rendered text directly into your assembly. Uses the Figgle.Generator package, and uses a single attribute to render the text at compile time. If all Figgle text is rendered this way, you don't have to ship any Figgle assembly with your app. Embed font from package\tFor dynamic text, using a font from the Figgle.Fonts package via an attribute. The font is embedded directly into your assembly. With this approach, you only need the lightweight Figgle package at runtime. Embed font from .flf file\tFor dynamic text, using a .flf font file via an attribute and &lt;AdditionalFiles&gt; project item in the .csproj. The font is embedded directly into your assembly. With this approach, you only need the lightweight Figgle package at runtime. More output examples​ Using FiggleFonts.Graffiti: ___ ___ .__ .__ __ __ .__ .___._. / | \\ ____ | | | | ____ / \\ / \\___________| | __| _/| | / ~ \\_/ __ \\| | | | / _ \\ \\ \\/\\/ / _ \\_ __ \\ | / __ | | | \\ Y /\\ ___/| |_| |_( &lt;_&gt; ) \\ ( &lt;_&gt; ) | \\/ |__/ /_/ | \\| \\___|_ / \\___ &gt;____/____/\\____/ /\\ \\__/\\ / \\____/|__| |____/\\____ | __ \\/ \\/ )/ \\/ \\/ \\/ Using FiggleFonts.ThreePoint: |_| _ || _ \\ / _ _| _|| | |(/_||(_), \\/\\/ (_)| |(_|. Using FiggleFonts.Ogre: _ _ __ __ _ _ _ /\\ /\\___| | | ___ / / /\\ \\ \\___ _ __| | __| | / \\ / /_/ / _ \\ | |/ _ \\ \\ \\/ \\/ / _ \\| '__| |/ _` |/ / / __ / __/ | | (_) | \\ /\\ / (_) | | | | (_| /\\_/ \\/ /_/ \\___|_|_|\\___( ) \\/ \\/ \\___/|_| |_|\\__,_\\/ |/ Using FiggleFonts.Rectangles: __ _____ _ _ _ _ _ _ _| | | | |___| | |___ | | | |___ ___| |_| | | | | -_| | | . |_ | | | | . | _| | . |__| |__|__|___|_|_|___| | |_____|___|_| |_|___|__| |_| Using FiggleFonts.Slant: __ __ ____ _ __ __ ____ / / / /__ / / /___ | | / /___ _____/ /___/ / / / /_/ / _ \\/ / / __ \\ | | /| / / __ \\/ ___/ / __ / / / __ / __/ / / /_/ / | |/ |/ / /_/ / / / / /_/ /_/ /_/ /_/\\___/_/_/\\____( ) |__/|__/\\____/_/ /_/\\__,_(_) |/   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#about","content":" note Generating ASCII art text for console applications  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyTexts.cs This is the CSharp Project that references Figgle &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Figgle.Generator&quot; Version=&quot;0.6.4&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EmbedFiggleFontAttribute.csGenerateFiggleTextAttribute.csMyTexts.g.cs // Copyright Drew Noakes. Licensed under the Apache-2.0 license. See the LICENSE file for more details. // &lt;auto-generated&gt; // This code was generated by Figgle.Generator. // // https://github.com/drewnoakes/figgle // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; using System; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; namespace Figgle { /// &lt;summary&gt; /// Instructs a source generator to embed a Figgle font in the assembly, making it available /// via a static property on class this attribute is applied to. /// &lt;/summary&gt; /// &lt;remarks&gt; /// &lt;para&gt; /// This attribute is processed by a source generator in the &lt;c&gt;Figgle.Generator&lt;/c&gt; package. /// &lt;/para&gt; /// &lt;para&gt; /// This source generator will embed the specified Figgle font into your assembly, which is a /// more performant alternative to using the &lt;c&gt;Figgle.Fonts&lt;/c&gt; package, which embeds all of /// the Figgle fonts. /// &lt;/para&gt; /// &lt;para&gt; /// If the text you want Figgle to render is not statically known at compile time, you should /// use this generator and ship the &lt;c&gt;Figgle&lt;/c&gt; package. /// &lt;/para&gt; /// &lt;para&gt; /// If the text you want Figgle to render is statically known at compile time, you should use /// &lt;see cref=&quot;GenerateFiggleTextAttribute&quot; /&gt; instead. /// &lt;/para&gt; /// &lt;/remarks&gt; [Conditional(&quot;INCLUDE_FIGGLE_GENERATOR_ATTRIBUTES&quot;)] [ExcludeFromCodeCoverage] [DebuggerNonUserCode] [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] internal sealed class EmbedFiggleFontAttribute : Attribute { /// &lt;summary&gt; /// The name of the property to add, whose getter will return the embedded &lt;see cref=&quot;FiggleFont&quot; /&gt;. /// &lt;/summary&gt; public string MemberName { get; } /// &lt;summary&gt; /// The name of the font to use when rendering the text. /// &lt;/summary&gt; public string FontName { get; } /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref=&quot;EmbedFiggleFontAttribute&quot;/&gt; class. /// &lt;/summary&gt; /// &lt;param name=&quot;memberName&quot;&gt;The name of the property to add, whose getter returns the embedded &lt;paramref name=&quot;FiggleFont&quot; /&gt;.&lt;/param&gt; /// &lt;param name=&quot;fontName&quot;&gt;The name of the font to use when rendering the text.&lt;/param&gt; public EmbedFiggleFontAttribute(string memberName, string fontName) { MemberName = memberName; FontName = fontName; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#download-example-net--c","content":" tip Download Example project Figgle   ","version":"Next","tagName":"h3"},{"title":"Share Figgle​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#share-figgle","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Figgle  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Console\" has the following generators:​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#category-console-has-the-following-generators","content":" 1 Figgle  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Figgle by Drew Noakes","url":"/RSCG_Examples/v2/docs/Figgle#see-category","content":" Console ","version":"Next","tagName":"h3"},{"title":"Flaggen by Ricardo Boss","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Flaggen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#info","content":" info Name: Flaggen Package Description Author: Ricardo Boss NuGet:https://www.nuget.org/packages/Flaggen/ You can find more details at https://github.com/ricardoboss/Flaggen Source: https://github.com/ricardoboss/Flaggen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#original-readme","content":" note Flaggen A C# source generator that generates extension methods for flags enums. Usage​ Install the package: dotnet add package Flaggen Suppose we have this enum: using System; [Flags] public enum LovelyColors { RoseGold = 1 &lt;&lt; 0, SeaGreen = 1 &lt;&lt; 1, SunshineYellow = 1 &lt;&lt; 2, BrightRed = 1 &lt;&lt; 3, } The source generator will notice the [Flags] attribute and generate extension methods for this enum: // initalize with some value var myColors = LovelyColors.RoseGold | LovelyColors.SeaGreen; // manipulate the flags myColors.Add(LovelyColors.BrightRed); myColors.Remove(LovelyColors.RoseGold); myColors.Toggle(LovelyColors.SeaGreen); // check for flags if (myColors.Has(LovelyColors.SunshineYellow)) Console.WriteLine(&quot;So shiny!&quot;); All the extension methods using bitwise operators (so no reflection!), which makes them pretty fast (I will not prove this, but you get my trust-me-bro™️ guarantee). License​ MIT  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#about","content":" note Explicit operations about flags with enums, and bitwise operations  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csColors.cs This is the CSharp Project that references Flaggen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Flaggen&quot; Version=&quot;1.1.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Colors_FlaggenExtensions.g.cs using System; namespace EnumDemo { public static class ColorsFlaggenExtensions { public static void Add(ref this Colors value, Colors flag) { value |= flag; } public static void Remove(ref this Colors value, Colors flag) { value &amp;= ~flag; } public static void Toggle(ref this Colors value, Colors flag) { value ^= flag; } public static bool Has(ref this Colors value, Colors flag) { return (value &amp; flag) == flag; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#download-example-net--c","content":" tip Download Example project Flaggen   ","version":"Next","tagName":"h3"},{"title":"Share Flaggen​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#share-flaggen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Flaggen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Flaggen by Ricardo Boss","url":"/RSCG_Examples/v2/docs/Flaggen#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"EnumClass by ashen.Blade","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/EnumClass","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#info","content":" info Name: EnumClass Inspired by kotlin's enum class, this package provides incremental generator that can create classes from enum declaration. All you have to do is to add [EnumClass] attribute to your enum. Features: Override default ToStringAdd specific behaviour (methods) to each memberPolymorphic Switch implementation Author: ashen.Blade NuGet:https://www.nuget.org/packages/EnumClass.Generator/ You can find more details at https://github.com/ashenBlade/EnumClass Source: https://github.com/ashenBlade/EnumClass  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#original-readme","content":" note enum class Generator Summary​ Type-safe source-generated alternative to C# enum inspired by Kotlin enum class What is it?​ This library contains source generator that creates class for specified enum. These classes contain similar functionality as original enum, but behave as ordinal class Getting started​ Installation​ Add reference to Nuget package .NET CLI dotnet add package EnumClass --version 1.2.0 Package Manager Install-Package EnumClass -Version 1.2.0 PackageReference &lt;PackageReference Include=&quot;EnumClass&quot; Version=&quot;1.2.0&quot; /&gt; Specify Analyzer property in .csproj &lt;PackageReference Include=&quot;EnumClass&quot; Version=&quot;1.2.0&quot; OutputItemType=&quot;Analyzer&quot;/&gt; Usage​ Example usage​ Add [EnumClass] attribute to enum That is all! Corresponding class will be generated in namespace as your enum, but prefixed with EnumClass Example using EnumClass.Attributes; namespace Domain { [EnumClass] public enum PetKind { Cat, Dog } namespace EnumClass { public partial abstract class PetKind { public partial class CatEnumValue { public void SayMeow() { System.Console.WriteLine(&quot;Meow!&quot;); } } } } } ToString()​ All ToString() are generated at compile time. By default, they equal to name of corresponding member. Console.WriteLine(EnumClass.PetKind.Cat.ToString() == &quot;Cat&quot;); // Output: true If you want to override default value - use [EnumMemberInfo(StringValue = &quot;&quot;)] attribute namespace Domain; [EnumClass] public enum PetKind { [EnumMemberInfo(StringValue = &quot;Kitten&quot;)] Cat, Dog } // ------------- Console.WriteLine(EnumClass.PetKind.Cat.ToString()); // Output: Kitten Cast to enum​ All classes have overriden cast operator to original enum value Console.WriteLine(((PetKind)EnumClass.PetKind.Cat) == PetKind.Cat); // Output: true Cast to int​ All classes have overriden cast to int Console.WriteLine(((int)EnumClass.PetKind.Cat) == ((int)PetKind.Cat)); // Output: true Equals()​ Generated classes implement IEquatable&lt;&gt; both for enum class and original enum. Thus, has methods Equals(EnumClass) and Equals(OrignalEnum) Console.WriteLine(EnumClass.PetKind.Cat.Equals(EnumClass.PetKind.Cat)); // Calls Equals(EnumClass.PetKind) Console.WriteLine(EnumClass.PetKind.Cat.Equals(EnumClass.PetKind.Dog)); // Calls Equals(EnumClass.PetKind) Console.WriteLine(EnumClass.PetKind.Cat.Equals(PetKind.Cat)); // Calls Equals(PetKind) Console.WriteLine(EnumClass.PetKind.Cat.Equals(PetKind.Dog)); // Calls Equals(PetKind) // Output: true // false // true // false P.S. and of course Equals(object?) Switch function​ Instead of writing switch every time, a fimily of switch function is generated. They accepts both Action and Func with enum class at first argument and optional additional arguments. E.g. Func&lt;int&gt; var cat = EnumClass.PetKind.Cat; var value = cat.Switch(1, (cat, i) =&gt; i + 1, (dog, i) =&gt; i * 100); Console.WriteLine(value); // Output: 2 Action var dog = EnumClass.PetKind.Dog; dog.Switch( cat =&gt; cat.SayMeow(), dog =&gt; Console.WriteLine(&quot;Oh, it is puppy!&quot;)); // Output: Oh, it is puppy! TryParse​ There is static function bool EnumClass.TryParse(string value, out EnumClass enumClass) for parsing values from raw enums. This function accepts strings with and without enum name: PetKind.Cat and Cat will be parsed into Cat value. if (EnumClass.PetKind.TryParse(&quot;Cat&quot;, out var cat) { Console.WriteLine($&quot;This is cat!! {cat}&quot;); } else { Console.WriteLine(&quot;This is not cat&quot;); } More​ For more examples checkout samples folder Features​ Incremental generator​ It uses incremental generator instead of source generator. This implies better performance in comparison Custom target namespace​ By default generated class contained in the same namespace as original enum + &quot;.EnumClass&quot; suffix. You can manually set target namespace in Namespace property of [EnumClass] attribute. using EnumClass.Attributes; namespace Test; [EnumClass(Namespace = &quot;Domain&quot;)] public enum SampleEnum { First, Second } //------------------ using Domain; Console.WriteLine(SampleEnum.First); Generate enum class for enum from another assembly​ If you do not have access to enum source code directly, you can generate enum class for enum in external assembly. For this use [ExternalEnumClass] attribute. // External assembly namespace Logic; public enum Word { Single, Double, Triple } // Our assembly using EnumClass.Attributes; using Logic; [assembly: ExternalEnumClass(typeof(Word), Namespace = &quot;Another&quot;)] namespace Another; public partial class Word { public abstract int WordsCount { get; } public partial class SingleEnumValue { public override int WordsCount =&gt; 1; } public partial class DoubleEnumValue { public override int WordsCount =&gt; 2; } public partial class TripleEnumValue { public override int WordsCount =&gt; 3; } } Known limitations​ Same name of member and enum​ In the current implementation, static enum class field names have the same names as members of the original enum. E.g. [EnumClass] public enum TokenType { TokenType } will generate approximately the following code public class TokenType { public static TokenTypeEnumValue TokenType = new(); } Half-baked​ The project at an early stage of life. I'm sure there are lots of hidden bugs, so be cautious using it in production. In production may be better for now to use SmartEnum Contributing​ If you have an idea on how to improve the project or have found a bug, create an issue on GitHub Give a star​ If you want to see the continuation of the project, give it a star!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#about","content":" note enum 2 class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#example-source-csproj-source-files","content":" CSharp ProjectProgram.csColors.csRedEnumValue.cs This is the CSharp Project that references EnumClass &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;EnumClass.Generator&quot; Version=&quot;1.3.0&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Colors.g.cs #nullable enable using System; using System.Collections.Generic; using System.Runtime.CompilerServices; namespace EnumClassDemo.EnumClass { public abstract partial class Colors: IEquatable&lt;Colors&gt;, IEquatable&lt;global::EnumClassDemo.Colors&gt;, IComparable&lt;Colors&gt;, IComparable&lt;global::EnumClassDemo.Colors&gt;, IComparable { protected readonly global::EnumClassDemo.Colors _realEnumValue; protected Colors(global::EnumClassDemo.Colors enumValue) { this._realEnumValue = enumValue; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public static explicit operator global::EnumClassDemo.Colors(Colors value) { return value._realEnumValue; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public static implicit operator int(Colors value) { return (int) value._realEnumValue; } public bool Equals(Colors? other) { return !ReferenceEquals(other, null) &amp;&amp; other._realEnumValue == this._realEnumValue; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(global::EnumClassDemo.Colors other) { return other == this._realEnumValue; } public override bool Equals(object? other) { if (ReferenceEquals(other, null)) return false; if (ReferenceEquals(other, this)) return true; if (other is Colors) { return this.Equals((Colors) other); } if (other is global::EnumClassDemo.Colors) { return this.Equals((global::EnumClassDemo.Colors) other); } return false; } public static bool operator ==(Colors left, global::EnumClassDemo.Colors right) { return left.Equals(right); } public static bool operator !=(Colors left, global::EnumClassDemo.Colors right) { return !left.Equals(right); } public static bool operator ==(global::EnumClassDemo.Colors left, Colors right) { return right.Equals(left); } public static bool operator !=(global::EnumClassDemo.Colors left, Colors right) { return !right.Equals(left); } public static bool operator ==(Colors left, Colors right) { return !ReferenceEquals(left, null) &amp;&amp; left.Equals(right); } public static bool operator !=(Colors left, Colors right) { return ReferenceEquals(left, null) || !left.Equals(right); } [MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() { return this._realEnumValue.GetHashCode(); } public static bool TryParse(string value, out Colors? colors) { switch (value) { case &quot;None&quot;: colors = None; return true; case &quot;Red&quot;: colors = Red; return true; case &quot;Green&quot;: colors = Green; return true; case &quot;Blue&quot;: colors = Blue; return true; case &quot;Colors.None&quot;: colors = None; return true; case &quot;Colors.Red&quot;: colors = Red; return true; case &quot;Colors.Green&quot;: colors = Green; return true; case &quot;Colors.Blue&quot;: colors = Blue; return true; } colors = null; return false; } public static bool TryParse(int value, out Colors? colors) { switch (value) { case 0: colors = None; return true; case 1: colors = Red; return true; case 2: colors = Green; return true; case 3: colors = Blue; return true; } colors = null; return false; } public int CompareTo(object? other) { if (ReferenceEquals(this, other)) return 0; if (ReferenceEquals(null, other)) return 1; if (other is Colors) { Colors temp = (Colors) other; int left = ((int)this._realEnumValue); int right = ((int)temp._realEnumValue); return left &lt; right ? -1 : left == right ? 0 : 1; } if (other is global::EnumClassDemo.Colors) { int left = ((int)this._realEnumValue); int right = ((int)other); return left &lt; right ? -1 : left == right ? 0 : 1; } throw new ArgumentException($&quot;Object to compare must be either {typeof(Colors)} or {typeof(global::EnumClassDemo.Colors)}. Given type: {other.GetType()}&quot;, &quot;other&quot;); } public int CompareTo(Colors? other) { if (ReferenceEquals(this, other)) return 0; if (ReferenceEquals(null, other)) return 1; int left = ((int)this._realEnumValue); int right = ((int)other._realEnumValue); return left &lt; right ? -1 : left == right ? 0 : 1; } public int CompareTo(global::EnumClassDemo.Colors other) { int left = ((int)this._realEnumValue); int right = ((int)other); return left &lt; right ? -1 : left == right ? 0 : 1; } public abstract void Switch(Action&lt;NoneEnumValue&gt; noneSwitch, Action&lt;RedEnumValue&gt; redSwitch, Action&lt;GreenEnumValue&gt; greenSwitch, Action&lt;BlueEnumValue&gt; blueSwitch); public abstract TResult Switch&lt;TResult&gt;(Func&lt;NoneEnumValue, TResult&gt; noneSwitch, Func&lt;RedEnumValue, TResult&gt; redSwitch, Func&lt;GreenEnumValue, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, TResult&gt; blueSwitch); public abstract void Switch&lt;T0&gt;(T0 arg0, Action&lt;NoneEnumValue, T0&gt; noneSwitch, Action&lt;RedEnumValue, T0&gt; redSwitch, Action&lt;GreenEnumValue, T0&gt; greenSwitch, Action&lt;BlueEnumValue, T0&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0&gt;(T0 arg0, Func&lt;NoneEnumValue, T0, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, TResult&gt; blueSwitch); public abstract void Switch&lt;T0, T1&gt;(T0 arg0, T1 arg1, Action&lt;NoneEnumValue, T0, T1&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0, T1&gt;(T0 arg0, T1 arg1, Func&lt;NoneEnumValue, T0, T1, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, TResult&gt; blueSwitch); public abstract void Switch&lt;T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Action&lt;NoneEnumValue, T0, T1, T2&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Func&lt;NoneEnumValue, T0, T1, T2, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, TResult&gt; blueSwitch); public abstract void Switch&lt;T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action&lt;NoneEnumValue, T0, T1, T2, T3&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func&lt;NoneEnumValue, T0, T1, T2, T3, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, TResult&gt; blueSwitch); public abstract void Switch&lt;T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, TResult&gt; blueSwitch); public abstract void Switch&lt;T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; blueSwitch); public abstract void Switch&lt;T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; blueSwitch); public abstract TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; blueSwitch); public static readonly NoneEnumValue None = new NoneEnumValue(); public partial class NoneEnumValue: Colors { public NoneEnumValue(): base(global::EnumClassDemo.Colors.None) { } public override string ToString() { return &quot;None&quot;; } public override void Switch(Action&lt;NoneEnumValue&gt; noneSwitch, Action&lt;RedEnumValue&gt; redSwitch, Action&lt;GreenEnumValue&gt; greenSwitch, Action&lt;BlueEnumValue&gt; blueSwitch) { noneSwitch(this); } public override TResult Switch&lt;TResult&gt;(Func&lt;NoneEnumValue, TResult&gt; noneSwitch, Func&lt;RedEnumValue, TResult&gt; redSwitch, Func&lt;GreenEnumValue, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, TResult&gt; blueSwitch) { return noneSwitch(this); } public override void Switch&lt;T0&gt;(T0 arg0, Action&lt;NoneEnumValue, T0&gt; noneSwitch, Action&lt;RedEnumValue, T0&gt; redSwitch, Action&lt;GreenEnumValue, T0&gt; greenSwitch, Action&lt;BlueEnumValue, T0&gt; blueSwitch) { noneSwitch(this, arg0); } public override TResult Switch&lt;TResult, T0&gt;(T0 arg0, Func&lt;NoneEnumValue, T0, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, TResult&gt; blueSwitch) { return noneSwitch(this, arg0); } public override void Switch&lt;T0, T1&gt;(T0 arg0, T1 arg1, Action&lt;NoneEnumValue, T0, T1&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1&gt; blueSwitch) { noneSwitch(this, arg0, arg1); } public override TResult Switch&lt;TResult, T0, T1&gt;(T0 arg0, T1 arg1, Func&lt;NoneEnumValue, T0, T1, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, TResult&gt; blueSwitch) { return noneSwitch(this, arg0, arg1); } public override void Switch&lt;T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Action&lt;NoneEnumValue, T0, T1, T2&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2&gt; blueSwitch) { noneSwitch(this, arg0, arg1, arg2); } public override TResult Switch&lt;TResult, T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Func&lt;NoneEnumValue, T0, T1, T2, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, TResult&gt; blueSwitch) { return noneSwitch(this, arg0, arg1, arg2); } public override void Switch&lt;T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action&lt;NoneEnumValue, T0, T1, T2, T3&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3&gt; blueSwitch) { noneSwitch(this, arg0, arg1, arg2, arg3); } public override TResult Switch&lt;TResult, T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func&lt;NoneEnumValue, T0, T1, T2, T3, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, TResult&gt; blueSwitch) { return noneSwitch(this, arg0, arg1, arg2, arg3); } public override void Switch&lt;T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4&gt; blueSwitch) { noneSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, TResult&gt; blueSwitch) { return noneSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override void Switch&lt;T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5&gt; blueSwitch) { noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; blueSwitch) { return noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override void Switch&lt;T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; blueSwitch) { noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; blueSwitch) { return noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } [MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() { return 0; } } public static readonly RedEnumValue Red = new RedEnumValue(); public partial class RedEnumValue: Colors { public RedEnumValue(): base(global::EnumClassDemo.Colors.Red) { } public override string ToString() { return &quot;Red&quot;; } public override void Switch(Action&lt;NoneEnumValue&gt; noneSwitch, Action&lt;RedEnumValue&gt; redSwitch, Action&lt;GreenEnumValue&gt; greenSwitch, Action&lt;BlueEnumValue&gt; blueSwitch) { redSwitch(this); } public override TResult Switch&lt;TResult&gt;(Func&lt;NoneEnumValue, TResult&gt; noneSwitch, Func&lt;RedEnumValue, TResult&gt; redSwitch, Func&lt;GreenEnumValue, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, TResult&gt; blueSwitch) { return redSwitch(this); } public override void Switch&lt;T0&gt;(T0 arg0, Action&lt;NoneEnumValue, T0&gt; noneSwitch, Action&lt;RedEnumValue, T0&gt; redSwitch, Action&lt;GreenEnumValue, T0&gt; greenSwitch, Action&lt;BlueEnumValue, T0&gt; blueSwitch) { redSwitch(this, arg0); } public override TResult Switch&lt;TResult, T0&gt;(T0 arg0, Func&lt;NoneEnumValue, T0, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, TResult&gt; blueSwitch) { return redSwitch(this, arg0); } public override void Switch&lt;T0, T1&gt;(T0 arg0, T1 arg1, Action&lt;NoneEnumValue, T0, T1&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1&gt; blueSwitch) { redSwitch(this, arg0, arg1); } public override TResult Switch&lt;TResult, T0, T1&gt;(T0 arg0, T1 arg1, Func&lt;NoneEnumValue, T0, T1, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, TResult&gt; blueSwitch) { return redSwitch(this, arg0, arg1); } public override void Switch&lt;T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Action&lt;NoneEnumValue, T0, T1, T2&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2&gt; blueSwitch) { redSwitch(this, arg0, arg1, arg2); } public override TResult Switch&lt;TResult, T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Func&lt;NoneEnumValue, T0, T1, T2, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, TResult&gt; blueSwitch) { return redSwitch(this, arg0, arg1, arg2); } public override void Switch&lt;T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action&lt;NoneEnumValue, T0, T1, T2, T3&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3&gt; blueSwitch) { redSwitch(this, arg0, arg1, arg2, arg3); } public override TResult Switch&lt;TResult, T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func&lt;NoneEnumValue, T0, T1, T2, T3, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, TResult&gt; blueSwitch) { return redSwitch(this, arg0, arg1, arg2, arg3); } public override void Switch&lt;T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4&gt; blueSwitch) { redSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, TResult&gt; blueSwitch) { return redSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override void Switch&lt;T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5&gt; blueSwitch) { redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; blueSwitch) { return redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override void Switch&lt;T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; blueSwitch) { redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; blueSwitch) { return redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } [MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() { return 1; } } public static readonly GreenEnumValue Green = new GreenEnumValue(); public partial class GreenEnumValue: Colors { public GreenEnumValue(): base(global::EnumClassDemo.Colors.Green) { } public override string ToString() { return &quot;Green&quot;; } public override void Switch(Action&lt;NoneEnumValue&gt; noneSwitch, Action&lt;RedEnumValue&gt; redSwitch, Action&lt;GreenEnumValue&gt; greenSwitch, Action&lt;BlueEnumValue&gt; blueSwitch) { greenSwitch(this); } public override TResult Switch&lt;TResult&gt;(Func&lt;NoneEnumValue, TResult&gt; noneSwitch, Func&lt;RedEnumValue, TResult&gt; redSwitch, Func&lt;GreenEnumValue, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, TResult&gt; blueSwitch) { return greenSwitch(this); } public override void Switch&lt;T0&gt;(T0 arg0, Action&lt;NoneEnumValue, T0&gt; noneSwitch, Action&lt;RedEnumValue, T0&gt; redSwitch, Action&lt;GreenEnumValue, T0&gt; greenSwitch, Action&lt;BlueEnumValue, T0&gt; blueSwitch) { greenSwitch(this, arg0); } public override TResult Switch&lt;TResult, T0&gt;(T0 arg0, Func&lt;NoneEnumValue, T0, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, TResult&gt; blueSwitch) { return greenSwitch(this, arg0); } public override void Switch&lt;T0, T1&gt;(T0 arg0, T1 arg1, Action&lt;NoneEnumValue, T0, T1&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1&gt; blueSwitch) { greenSwitch(this, arg0, arg1); } public override TResult Switch&lt;TResult, T0, T1&gt;(T0 arg0, T1 arg1, Func&lt;NoneEnumValue, T0, T1, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, TResult&gt; blueSwitch) { return greenSwitch(this, arg0, arg1); } public override void Switch&lt;T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Action&lt;NoneEnumValue, T0, T1, T2&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2&gt; blueSwitch) { greenSwitch(this, arg0, arg1, arg2); } public override TResult Switch&lt;TResult, T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Func&lt;NoneEnumValue, T0, T1, T2, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, TResult&gt; blueSwitch) { return greenSwitch(this, arg0, arg1, arg2); } public override void Switch&lt;T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action&lt;NoneEnumValue, T0, T1, T2, T3&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3&gt; blueSwitch) { greenSwitch(this, arg0, arg1, arg2, arg3); } public override TResult Switch&lt;TResult, T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func&lt;NoneEnumValue, T0, T1, T2, T3, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, TResult&gt; blueSwitch) { return greenSwitch(this, arg0, arg1, arg2, arg3); } public override void Switch&lt;T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4&gt; blueSwitch) { greenSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, TResult&gt; blueSwitch) { return greenSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override void Switch&lt;T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5&gt; blueSwitch) { greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; blueSwitch) { return greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override void Switch&lt;T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; blueSwitch) { greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; blueSwitch) { return greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } [MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() { return 2; } } public static readonly BlueEnumValue Blue = new BlueEnumValue(); public partial class BlueEnumValue: Colors { public BlueEnumValue(): base(global::EnumClassDemo.Colors.Blue) { } public override string ToString() { return &quot;Blue&quot;; } public override void Switch(Action&lt;NoneEnumValue&gt; noneSwitch, Action&lt;RedEnumValue&gt; redSwitch, Action&lt;GreenEnumValue&gt; greenSwitch, Action&lt;BlueEnumValue&gt; blueSwitch) { blueSwitch(this); } public override TResult Switch&lt;TResult&gt;(Func&lt;NoneEnumValue, TResult&gt; noneSwitch, Func&lt;RedEnumValue, TResult&gt; redSwitch, Func&lt;GreenEnumValue, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, TResult&gt; blueSwitch) { return blueSwitch(this); } public override void Switch&lt;T0&gt;(T0 arg0, Action&lt;NoneEnumValue, T0&gt; noneSwitch, Action&lt;RedEnumValue, T0&gt; redSwitch, Action&lt;GreenEnumValue, T0&gt; greenSwitch, Action&lt;BlueEnumValue, T0&gt; blueSwitch) { blueSwitch(this, arg0); } public override TResult Switch&lt;TResult, T0&gt;(T0 arg0, Func&lt;NoneEnumValue, T0, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, TResult&gt; blueSwitch) { return blueSwitch(this, arg0); } public override void Switch&lt;T0, T1&gt;(T0 arg0, T1 arg1, Action&lt;NoneEnumValue, T0, T1&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1&gt; blueSwitch) { blueSwitch(this, arg0, arg1); } public override TResult Switch&lt;TResult, T0, T1&gt;(T0 arg0, T1 arg1, Func&lt;NoneEnumValue, T0, T1, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, TResult&gt; blueSwitch) { return blueSwitch(this, arg0, arg1); } public override void Switch&lt;T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Action&lt;NoneEnumValue, T0, T1, T2&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2&gt; blueSwitch) { blueSwitch(this, arg0, arg1, arg2); } public override TResult Switch&lt;TResult, T0, T1, T2&gt;(T0 arg0, T1 arg1, T2 arg2, Func&lt;NoneEnumValue, T0, T1, T2, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, TResult&gt; blueSwitch) { return blueSwitch(this, arg0, arg1, arg2); } public override void Switch&lt;T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action&lt;NoneEnumValue, T0, T1, T2, T3&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3&gt; blueSwitch) { blueSwitch(this, arg0, arg1, arg2, arg3); } public override TResult Switch&lt;TResult, T0, T1, T2, T3&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func&lt;NoneEnumValue, T0, T1, T2, T3, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, TResult&gt; blueSwitch) { return blueSwitch(this, arg0, arg1, arg2, arg3); } public override void Switch&lt;T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4&gt; blueSwitch) { blueSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, TResult&gt; blueSwitch) { return blueSwitch(this, arg0, arg1, arg2, arg3, arg4); } public override void Switch&lt;T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5&gt; blueSwitch) { blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult&gt; blueSwitch) { return blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5); } public override void Switch&lt;T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; noneSwitch, Action&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; redSwitch, Action&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; greenSwitch, Action&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6&gt; blueSwitch) { blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } public override TResult Switch&lt;TResult, T0, T1, T2, T3, T4, T5, T6&gt;(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func&lt;NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; noneSwitch, Func&lt;RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; redSwitch, Func&lt;GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; greenSwitch, Func&lt;BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult&gt; blueSwitch) { return blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6); } [MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() { return 3; } } private static readonly Colors[] _members = new Colors[4] { None, Red, Green, Blue, }; public static System.Collections.Generic.IReadOnlyCollection&lt;Colors&gt; GetAllMembers() { return _members; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#download-example-net--c","content":" tip Download Example project EnumClass   ","version":"Next","tagName":"h3"},{"title":"Share EnumClass​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#share-enumclass","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/EnumClass  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"EnumClass by ashen.Blade","url":"/RSCG_Examples/v2/docs/EnumClass#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"Funcky.DiscriminatedUnion by Polyadic","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#info","content":" info Name: Funcky.DiscriminatedUnion A source generator that generates Match methods for all your discriminated unions needs. ✨ Author: Polyadic NuGet:https://www.nuget.org/packages/Funcky.DiscriminatedUnion/ You can find more details at https://github.com/polyadic/funcky-discriminated-union Source: https://github.com/polyadic/funcky-discriminated-union  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#original-readme","content":" note Funcky Discriminated Unions A source generator that generates Match methods for all your discriminated unions needs. ✨ Installation​ Add &lt;ProjectReference Include=&quot;Funcky.DiscriminatedUnion&quot; Version=&quot;...&quot; PrivateAssets=&quot;all&quot; /&gt; to your project file. Usage​ Apply the [DiscriminatedUnion] to an abstract class (or record) with nested types representing the variants. Example​ using Funcky; var result = Result&lt;int&gt;.Ok(42); var resultOrFallback = result.Match(ok: ok =&gt; ok.Value, error: _ =&gt; 0); [DiscriminatedUnion] public abstract partial record Result&lt;T&gt; where T : notnull { public sealed partial record Ok(T Value) : Result&lt;T&gt;; public sealed partial record Error(Exception Exception) : Result&lt;T&gt;; } Minimum Required Versions​ Visual Studio 2022Roslyn 4.0.0.NET 6 Settings​ The attribute allows configuration of some aspects of source generation. NonExhaustive​ The auto-generated Match and Switch methods are public by default. When NonExhaustive is set to true, these methods are generated with internal visibility instead. MatchResultTypeName​ The auto-generated Match method uses a generic type for the result. This type is named TResult by default. This can cause conflict with generic types on the discriminated union itself. Use MatchResultTypeName to set a custom name for this type. using Funcky; [DiscriminatedUnion(MatchResultTypeName = &quot;TMatchResult&quot;)] public abstract partial record Result&lt;TResult&gt; { ... } // Generated code partial record Result&lt;TResult&gt; { public abstract TMatchResult Match&lt;TMatchResult&gt;(...); ... } Flatten​ The auto-generated Match and Switch methods only accept one level of inheritance by default. Set Flatten to true to include arbitrarily deep inherited types in these methods. using Funcky; SyntaxNode node = ...; var nodeAsString = node.Match( keyword: keyword =&gt; keyword.Value, integer: integer =&gt; integer.Value.ToString(), double: @double =&gt; @double.Value.ToString()); [DiscriminatedUnion(Flatten = true)] public abstract partial record SyntaxNode { public sealed partial record Keyword(string Value) : SyntaxNode; public abstract partial record Literal : SyntaxNode; public abstract partial record Number : Literal; public sealed partial record Integer(int Value) : Number; public sealed partial record Double(double Value) : Number; } [JsonPolymorphic]​ System.Text.Json adds support for serializing derived classes starting with .NET 7. This generator supports this feature by generating the required [JsonDerivedType] attributes for you. All missing [JsonDerivedType] attributes are generated if at least one [JsonDerivedType] or [JsonPolymorphic]attribute is specified. using Funcky; using System.Text.Serialization; [DiscriminatedUnion] [JsonPolymorphic] public abstract partial record Shape { public sealed partial record Rectangle(double Width, double Length) : Shape; public sealed partial record Circle(double Radius) : Shape; public sealed partial record EquilateralTriangle(double SideLength) : Shape; } Generated code using System.Text.Serialization; [JsonDerivedType(typeof(Rectangle), typeDiscriminator: nameof(Rectangle))] [JsonDerivedType(typeof(Circle), typeDiscriminator: nameof(Circle))] [JsonDerivedType(typeof(EquilateralTriangle), typeDiscriminator: nameof(EquilateralTriangle))] partial record Shape { // ... }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#about","content":" note Generating discriminated unions for C# 9.0 and above.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references Funcky.DiscriminatedUnion &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Funcky.DiscriminatedUnion&quot; Version=&quot;1.1.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DiscriminatedUnionAttribute.g.csDiscriminatedUnionGenerator.g.cs // &lt;auto-generated/&gt; #nullable enable namespace Funcky { [global::System.Diagnostics.Conditional(&quot;Funcky_DiscriminatedUnion&quot;)] [global::System.AttributeUsage(global::System.AttributeTargets.Class)] internal sealed class DiscriminatedUnionAttribute : global::System.Attribute { /// &lt;summary&gt;Allow only consumers in the same assembly to use the exhaustive &lt;c&gt;Match&lt;/c&gt; and &lt;c&gt;Switch&lt;/c&gt; methods.&lt;/summary&gt; public bool NonExhaustive { get; set; } /// &lt;summary&gt;Generates exhaustive &lt;c&gt;Match&lt;/c&gt; and &lt;c&gt;Switch&lt;/c&gt; methods for the entire type hierarchy.&lt;/summary&gt; public bool Flatten { get; set; } /// &lt;summary&gt;Customized the generic type name used for the result in the generated &lt;c&gt;Match&lt;/c&gt; methods. Defaults to &lt;c&gt;TResult&lt;/c&gt;.&lt;/summary&gt; public string? MatchResultTypeName { get; set; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#download-example-net--c","content":" tip Download Example project Funcky.DiscriminatedUnion   ","version":"Next","tagName":"h3"},{"title":"Share Funcky.DiscriminatedUnion​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#share-funckydiscriminatedunion","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Funcky.DiscriminatedUnion by Polyadic","url":"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"Fluentify by Paul Martins","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Fluentify","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#info","content":" info Name: Fluentify Package Description Author: Paul Martins NuGet:https://www.nuget.org/packages/Fluentify/ You can find more details at https://github.com/MooVC/fluentify Source: https://github.com/MooVC/fluentify  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#original-readme","content":" note Fluentify Fluentify is a .NET Roslyn Source Generator designed to automate the creation of Fluent APIs. This tool enables engineers to rapidly develop rich, expressive, and maintainable APIs with ease. Utilizing Fluentify allows for cleaner code, easier maintenance, and more expressive interactions within your C# .NET applications. If you are unfamiliar with Fluent Builder pattern, please review Building Complex Objects in a Simple Way with C# by Gui Ferreira. Using its example, with Fluentify, we can transform how we configure movies from this: var movie = new Movie { Actors = [ new Actor { Birthday = 1940, FirstName = &quot;Patrick&quot;, Surname = &quot;Stewart&quot;, }, ], Genre = Genre.SciFi, ReleasedOn = new DateOnly(1996, 12, 13), Title = &quot;Star Trek: First Contact&quot;, }; to this: var movie = new Movie() .OfGenre(Genre.SciFi) .WithTitle(&quot;Star Trek: First Contact&quot;) .ReleasedOn(new DateOnly(1996, 12, 13)) .WithActors(actor =&gt; actor .WithFirstName(&quot;Patrick&quot;) .WithSurname(&quot;Stewart&quot;) .BornIn(1940)); This document will use the Movie example to describe how the features of Fluentify can be used to make the illustrated use of the Fluent Builder pattern possible. Installation​ To install Fluentify, use the following command in your package manager console: install-package Fluentify Usage​ Fluentify automatically creates extension methods for each property on types that have the Fluentify attribute, supporting both class and record types. Record Type Usage​ [Fluentify] public record Actor(int Birthday, string FirstName, string Surname); [Fluentify] public record Movie(Actor[] Actors, Genre Genre, DateOnly ReleasedOn, string Title); Marking the record type as partial will generate a default constructor, allowing for the record to be instantiated without first initializing the properties. [Fluentify] public partial record Actor(int Birthday, string FirstName, string Surname); // Allows for instantiation without property initialization var actor = new Actor(); ... Class Type Usage​ [Fluentify] public class Actor { public int Birthday { get; init; } public string FirstName { get; init; } public string Surname { get; init; } } [Fluentify] public class Movie { public Actor[] Actors { get; init; } public Genre Genre { get; init; } public DateOnly ReleasedOn { get; init; } public string Title { get; init; } } A class type is supported as long as the type has an accessible default constructor (implicit or explicit). Immutability​ The generated extension methods preserve immutability, providing a new instance with the specified value applied to the associated property. var original = new Actor { Birthday = 1942 }; var @new = original.WithBirthday(1975); Console.WriteLine(original.Birthday); // Displays 1942 Console.WriteLine(@new.Birthday); // Displays 1975 Auto Instantiation​ The value associated with a given property can be automatically instantiated, as long as that type associated with the property adheres to the new() constraint. A second extension method is generated for the property, accepting a Func&lt;T, T&gt; delegate as its parameter, which allows for the newly instantiated value to be configured before being applied. _ = movie.WithActors(actor =&gt; actor .WithBirthday(1940) .WithFirstName(&quot;Patrick&quot;) .WithSurname(&quot;Stewart&quot;)); Collection Parameterization​ Values can be appended to a list as long as the property type is T[], IEnumerable&lt;T&gt;, IReadOnlyCollection&lt;T&gt;, IReadOnlyList&lt;T&gt;. Property types that derive from ICollection&lt;T&gt; and adhere to the new() constraint are also supported. Unlike with scalar properties, the generated extension method accepts a params T[], allowing for one or more values to be specified in a single invocation. var original = new Movie { Actors = [picard] }; var @new = original.WithActors(worf); Console.WriteLine(original.Actors.Length); // Displays 1 Console.WriteLine(@new.Actors.Length); // Displays 2 Custom Descriptors​ The name of the generated extension method(s) can be customized via the Descriptor attribute. Record Type Usage​ [Fluentify] public partial record Actor( [Descriptor(&quot;BornIn&quot;)] int Birthday, string FirstName, string Surname); [Fluentify] public partial record Movie( Actor[] Actors, [Descriptor(&quot;OfGenre&quot;)] Genre Genre, [Descriptor(&quot;ReleasedOn&quot;)] DateOnly ReleasedOn, string Title); Class Type Usage​ [Fluentify] public class Actor { [Descriptor(&quot;BornIn&quot;)] public int Birthday { get; init; } public string FirstName { get; init; } public string Surname { get; init; } } [Fluentify] public class Movie { public Actor[] Actors { get; init; } [Descriptor(&quot;OfGenre&quot;)] public Genre Genre { get; init; } [Descriptor(&quot;ReleasedOn&quot;)] public DateOnly ReleasedOn { get; init; } public string Title { get; init; } } This allows for greater alignment with domain semantics: var movie = new Movie() .OfGenre(Genre.SciFi) .WithTitle(&quot;Star Trek: First Contact&quot;) .ReleasedOn(new DateOnly(1996, 12, 13)) .WithActors(actor =&gt; actor .WithFirstName(&quot;Patrick&quot;) .WithSurname(&quot;Stewart&quot;) .BornIn(1940)); When no custom descriptor is specified, the extension method(s) will use the following pattern for all property types, except bool: With{PropertyName} For bool, the extension method will utilize the same name as the property. Property Exclusion​ Specific properties can be excluded from generating Fluentify extension method(s) using the Ignore attribute: Record Type Usage​ [Fluentify] public record Actor([Ignore] int Birthday, string FirstName, string Surname); Class Type Usage​ [Fluentify] public class Actor { [Ignore] public int Birthday { get; init; } public string FirstName { get; init; } public string Surname { get; init; } } This will result in an error if you try to use the ignored property in the chain: _ = actor .WithBirthday(1975) // IntelliSense Error: 'Actor' does not contain a definition for 'WithBirthday' .WithFirstName(&quot;Avery&quot;) .WithSurname(&quot;Brooks&quot;); Analyzers​ Fluentify includes several analyzers to assist engineers with its usage. These are: Rule ID\tCategory\tSeverity\tNotesFLTFY01\tDesign\tWarning\tClass must have an accessible parameterless constructor to use Fluentify FLTFY02\tUsage\tInfo\tDescriptor is disregarded from consideration by Fluentify FLTFY03\tUsage\tInfo\tType does not utilize Fluentify FLTFY04\tNaming\tWarning\tDescriptor must adhere to the naming conventions for Methods FLTFY05\tUsage\tInfo\tType does not utilize Fluentify FLTFY06\tUsage\tInfo\tProperty is already disregarded from consideration by Fluentify Building a Service​ Combining Fluentify with additional, custom methods, can assist with the construction of complex types. For example: public class MyService { public MyService(string connectionString, TimeSpan timeout) { ArgumentException.ThrowIfNullOrWhiteSpace(connectionString); ArgumentOutOfRangeException.ThrowIfLessThan(timeout.TotalSeconds, 1); ConnectionString = connectionString; Timeout = timeout; } public string ConnectionString { get; } public TimeSpan Timeout { get; } } [Fluentify] public partial record MyServiceBuilder( [Descriptor(&quot;ConnectsTo&quot;)] string ConnectionString, [Descriptor(&quot;Waits&quot;)] int Timeout) { public static MyServiceBuilder Default =&gt; new(); public MyService Build() { return new MyService(ConnectionString, TimeSpan.FromSeconds(Timeout)); } } In this example, a new instance of MyService can be created as follows: MyService service = MyServiceBuilder .Default .ConnectsTo(&quot;Some Connection String&quot;) .Waits(30) .Build(); Contributing​ Contributions are welcome! Please feel free to submit pull requests or open issues to suggest improvements or add new features. License​ This project is licensed under the MIT License - see the LICENSE.md file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#about","content":" note Generate fluent builder  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Fluentify &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Fluentify&quot; Version=&quot;1.1.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Builder.PersonExtensions.WithFirstName.g.csBuilder.PersonExtensions.WithLastName.g.csBuilder.PersonExtensions.WithMiddleName.g.csDescriptorAttribute.g.csFluentifyAttribute.g.csIgnoreAttribute.g.csFluentify.Internal.Extensions.g.cs #if NET5_0_OR_GREATER || NETSTANDARD2_1_OR_GREATER #nullable enable #endif #pragma warning disable CS8625 namespace Builder { using System; using System.Collections.Generic; using System.Linq; using Fluentify.Internal; public static partial class PersonExtensions { public static global::Builder.Person WithFirstName( this global::Builder.Person subject, string value) { subject.ThrowIfNull(&quot;subject&quot;); return new global::Builder.Person { FirstName = value, MiddleName = subject.MiddleName, LastName = subject.LastName, }; } } } #pragma warning restore CS8625 #if NET5_0_OR_GREATER || NETSTANDARD2_1_OR_GREATER #nullable restore #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#download-example-net--c","content":" tip Download Example project Fluentify   ","version":"Next","tagName":"h3"},{"title":"Share Fluentify​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#share-fluentify","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Fluentify  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Builder\" has the following generators:​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#category-builder-has-the-following-generators","content":" 1 Architect.DomainModeling  2 BuilderGenerator  3 DimonSmart.BuilderGenerator  4 Fluentify  5 Hsu.Sg.FluentMember  6 ShadowWriterBuilder  7 StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Fluentify by Paul Martins","url":"/RSCG_Examples/v2/docs/Fluentify#see-category","content":" Builder ","version":"Next","tagName":"h3"},{"title":"FunicularSwitch by bluehands","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/FunicularSwitch","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#info","content":" info Name: FunicularSwitch Source generator package to have result types like in F# with your custom error type Author: bluehands NuGet:https://www.nuget.org/packages/FunicularSwitch.Generators/ https://www.nuget.org/packages/FunicularSwitch You can find more details at https://github.com/bluehands/Funicular-Switch Source: https://github.com/bluehands/Funicular-Switch  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#original-readme","content":" note FunicularSwitch FunicularSwitch is a lightweight C# port of F# result and option types. FunicularSwitch helps you to: Focus on the 'happy path', but collect all error information.Be more explicit in what our methods return.Avoid deep nesting.Avoid null checks and eventual properties (properties only relevant for a certain state of an object), use Result or Option instead.Comfortably write async code pipelines.Wrap third party library exceptions / return values into results at the code level were we really understand what is happening. Getting Started Packages​ NuGet: FunicularSwitchNuGet: FunicularSwitch.Generators FunicularSwitch is a library containing the Result and Option type. Usage and the general idea is described in the following sections. The 'Error' type is always string, which allows natural concatenation and is sufficient in many cases. FunicularSwitch.Generators is a C# source generator package (projects consuming it, will have no runtime dependency to any FunicularSwitch dll). With this source generator you can have a result type with the very same behaviour as FunicularSwitch.Result but a custom error type (instead of string) by just annotating a class with the ResultType attribute. That means you are free to represent failures in a way suitable for your needs. A second thing coming with this package are generated F#-like Match methods. They allow for compiler safe switches handling all concrete subtypes of a base class (very useful for union type implementations). As a third thing the same Match methods are also generated for enum types annotated with the ExtendedEnum attribute. FunicularSwitch Usage This document is created using dotnet try. If you have dotnet try global tool installed, just clone the repo, type dotnet try on top level and play around with all code samples in your browser while reading. This following section mainly focuses on Result. Result is a union type representing either Ok or the Error case just like F#s Result type. For FunicularSwitch the error type is String for sake of simplicity (Using types with multiple generic arguments is quite verbose in C#). Result should be used in all places, were something can go wrong. Doing so it replaces exceptions and null/default return values. Creating a Result is easy: //Ok result: var fortyTwo = Result.Ok(42); //or using implicit cast operator Result&lt;string&gt; ok = &quot;Ok&quot;; //Error result: var error = Result.Error&lt;int&gt;(&quot;Could not find the answer&quot;); Now lets follow the happy path, do something, if everything was ok. Map: static Result&lt;int&gt; Ask() =&gt; 42; Result&lt;int&gt; answerTransformed = Ask() .Map(answer =&gt; answer * 2); Console.WriteLine(answerTransformed); Ok 84 or do something that might fail, if everything was ok. Bind: static Result&lt;int&gt; Ask() =&gt; 42; Result&lt;int&gt; answerTransformed = Ask() .Bind(answer =&gt; answer == 0 ? Result.Error&lt;int&gt;(&quot;Division by zero&quot;) : 42 / answer); Console.WriteLine(answerTransformed); Ok 1 The lambdas passed to Map and Bind are only invoked if everything went well so far, otherwise you are on the error track were error information is passed on 'invisibly': b static Result&lt;int&gt; Transform(Result&lt;int&gt; result) =&gt; result .Bind(answer =&gt; answer == 0 ? Result.Error&lt;int&gt;(&quot;Division by zero&quot;) : 42 / answer) .Map(transformed =&gt; transformed * 2); Result&lt;int&gt; firstLevelError = Transform(Result.Error&lt;int&gt;(&quot;I don't know&quot;)); Console.WriteLine($&quot;First level: {firstLevelError}&quot;); Result&lt;int&gt; secondLevelError = Transform(Result.Ok(0)); Console.WriteLine($&quot;Second level: {secondLevelError}&quot;); First level: Error I don't know Second level: Error Division by zero Finally you might want to leave the Result world, so you have to take care of the error case as well (that's a good thing!). Match: static Result&lt;int&gt; Ask() =&gt; 42; string whatIsIt = Ask().Match( answer =&gt; $&quot;The answer is: {answer}&quot;, error =&gt; $&quot;Ups: {error}&quot; ); Console.WriteLine(whatIsIt); The answer is: 42 Those are basically the four (actually three) main operations on Result - Create, Bind, Map and Match. There are a lot of overloads and other helpers in FunicularSwitch to avoid repetition of Result specific patterns like: 'Combine results to Ok if everything is Ok otherwise collect errors' - Aggregate, Map and Bind overloads on collections'Ok if at least one item passes certain validations, otherwise collect info why no one matched' - FirstOk'Ok if item from a dictionary was found, otherwise (nice) error' - TryGetValue extension on Dictionary'Ok if type T is as convertible to T1, error otherwise' - 'As' extension returning Result'Ok if item is valid regarding custom validations, error otherwise' - Validate'Async support' - Map Bind and Aggregate overloads with async lambdas and extensions defined on Task&lt;...&gt;... If you miss functionality it can be added easily by writing your own extension methods. If it is useful for us all don't hesitate to make pull request. Finally a little example demonstrating some of the functionality mentioned above (validation, aggregation, async pipeline). Lets cook: public static async Task FruitSalad() { var stock = ImmutableList.Create( new Fruit(&quot;Orange&quot;, 155), new Fruit(&quot;Orange&quot;, 12), new Fruit(&quot;Apple&quot;, 132), new Fruit(&quot;Stink fruit&quot;, 1)); var ingredients = ImmutableList.Create(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;, &quot;Stink fruit&quot;); const int cookSkillLevel = 3; static IEnumerable&lt;string&gt; CheckFruit(Fruit fruit) { if (fruit.AgeInDays &gt; 20) yield return $&quot;{fruit.Name} is not fresh&quot;; if (fruit.Name == &quot;Stink fruit&quot;) yield return &quot;Stink fruit, I do not serve that&quot;; } var salad = await ingredients .Select(ingredient =&gt; stock .Where(fruit =&gt; fruit.Name == ingredient) .FirstOk(CheckFruit, onEmpty: () =&gt; $&quot;No {ingredient} in stock&quot;) ) .Bind(fruits =&gt; CutIntoPieces(fruits, cookSkillLevel)) .Map(Serve); Console.WriteLine(salad.Match(ok =&gt; &quot;Salad served successfully!&quot;, error =&gt; $&quot;No salad today:{Environment.NewLine}{error}&quot;)); } static Result&lt;Salad&gt; CutIntoPieces(IEnumerable&lt;Fruit&gt; fruits, int skillLevel = 5) { try { return CutFruits(fruits, skillLevel); } catch (Exception e) { return Result.Error&lt;Salad&gt;($&quot;Ouch: {e.Message}&quot;); } } static Salad CutFruits(IEnumerable&lt;Fruit&gt; fruits, int skillLevel) =&gt; skillLevel &gt; 5 ? new Salad(fruits) : throw new Exception(&quot;Cut my fingers&quot;); static Task&lt;Salad&gt; Serve(Salad salad) =&gt; Task.FromResult(new Salad(salad.Fruits, true)); class Salad { public IReadOnlyCollection&lt;Fruit&gt; Fruits { get; } public bool Served { get; } public Salad(IEnumerable&lt;Fruit&gt; fruits, bool served = false) { Fruits = fruits.ToList(); Served = served; } } class Fruit { public string Name { get; } public int AgeInDays { get; } public Fruit(string name, int ageInDays) { Name = name; AgeInDays = ageInDays; } } No salad today: Apple is not fresh No Banana in stock No Pear in stock Stink fruit, I do not serve that As you can see, all errors are collected as far as possible. Feel free to play around with the cooks skill level, fruits in stock and the ingredients list to finally get your fruit salad. FunicularSwitch.Generators Usage DISCLAIMER: Right now source generator support in Visual Studio is quite a new feature. Often, especially after adding or updating the generator package intellisense will show errors, even though the code actually compiles. In this cases Visual Studio needs a restart right now (Visual Studio 2022 17.0.5). ResultType attribute​ After adding the FunicularSwitch.Generators package you can mark a class as result type using the ResultType attribute. The class has to be abstract and partial with a single generic argument. Ok and Error cases, Map, Bind, Match and some other methods will be generated so you can use your Result just like the one from the FunicularSwitch package. We recommend using a UnionType as error type but you are free to use any type you want to represent failures. [FunicularSwitch.Generators.ResultType(ErrorType = typeof(MyCustomError))] public abstract partial class Result&lt;T&gt; {} Exceptions​ To turn all exceptions that might happen during your map, bind, validate, etc. calls into error results, write a static conversion method and mark it with the ExceptionToError attribute: public static class MyCustomErrorExtension { [FunicularSwitch.Generators.ExceptionToError] public static MyCustomError ToGenericError(Exception ex) =&gt; ... } Having the ExceptionToError method, a call like Ok(42).Map(i =&gt; 42 / 0) will return an error result with an error produced by your custom method instead of throwing a DivisionByZero exception. Considerations:​ Using the ExceptionToError attribute is actually a decision that points into a direction that is different from the way Result is implemented in F#, were Result and the correspondind Error type are meant to model expected domain errors (see fsharpforfunandprofit blog post). You will still have to handle exceptions on the highest parts of your system and there is no 'fail fast' because early exceptions always travel through your hole Result chain. Combine results​ If your errors can be combined, write an attributed extension method or a member method on your error type that combines two errors into one public static class MyCustomErrorExtension { [FunicularSwitch.Generators.MergeError] public static MyCustomError Merge(this MyCustomError error, MyCustomError other) =&gt; ... } and a bunch of methods like Aggregate, Validate, AllOk, FirstOk and more will appear that make use of the fact that errors can be merged. UnionType attribute​ There is another useful generator coming with the package. Adding the UnionType attribute to a base record / class or interface makes Match extension methods appear for this type. They are also inspired by F# where a match expression has to cover all cases and the compiler helps you with that. Assuming you implemented an error type as a base type and one derived type for every kind of error: [FunicularSwitch.Generators.UnionType] public abstract class Error{...} public sealed class NotFound : Error {...} public sealed class Failure : Error {...} public sealed class InvalidInput : Error {...} the generator detecting the [UnionType] adds Match methods so you can write: static string PrintError(Error error) =&gt; error.Match( notFound =&gt; $&quot;Not found: {notFound.Message}&quot;, failure =&gt; $&quot;Ups, something went wrong: {failure.Message} - {failure.Exception}&quot;, invalidInput =&gt; $&quot;Name was invalid: {invalidInput.Message}&quot; ); If you decide to add a case to your Error union all consuming switches break and you never miss a case at runtime! Match methods are also provided for async case handlers and as extensions on Task&lt;Error&gt;. There are also Switch extension methods generated which are the 'void' versions of Match, although this is not recommended from a functional point of view :). static void PrintIfNotFound(Error error) =&gt; error.Switch( notFound =&gt; Console.WriteLine($&quot;Not found: {notFound.Message}&quot;), failure =&gt; { /*ignore*/ }, invalidInput =&gt; { /*ignore*/ } ); To avoid bad surprises a well defined order of parameters of Match methods is crucial. By default parameters are generated in alphabetical order. This behaviour can be adapted using the CaseOrder argument on UnionType attribute (FunicularSwitch.Generators namespace omitted): //default [UnionType(CaseOrder = CaseOrder.Alphabetical)] public abstract class Error{...} //useful for union types the define their cases as nested subclasses in a well defined order [UnionType(CaseOrder = CaseOrder.AsDeclared)] public abstract class Error{...} //order defined explicitly. Case sort index with [UnionCase] attribute on derived types is expected (generator warning if missing or ambigous) [UnionType(CaseOrder = CaseOrder.Explicit)] public abstract class Error{...} [UnionCase(index: 0)] public sealed class NotFound : Error {...} [UnionCase(index: 20)] public sealed class Failure : Error {...} [UnionCase(index: 10)] public sealed class InvalidInput : Error {...} Static factory methods​ If your base type is a partial record or class, static factory methods for your derived cases are added: [UnionType] public abstract partial record Error; public record NotFound(int Id, string? Message = &quot;Not found&quot;) : Error; public record InvalidInput(string Message) : Error; class ExampleConsumer { public static void UseGeneratedFactoryMethods() { var notFound = Error.NotFound(42); //default value is pulled up to factory methods. var invalid = Error.InvalidInput(&quot;I don't like it&quot;); } } Those factory methods are not generated if they would conflict with an existing field, property or method on the base type. So you can always decide to implement them by yourself. Generation of factory methods on a partial base type can be suppressed by setting StaticFactoryMethods argument to false: [UnionType(StaticFactoryMethods=false)]. Currently default values in constructor parameters from namespaces other than System need full qualification. If you like union types but don't like excessive typing in C# try the Switchyard Visual Studio extension, which generates the boilerplate code for you. It plays nicely with the FunicularSwitch.Generators package. ExtendedEnum attribute​ The ExtendedEnum attribute works like UnionType but for enums: [FunicularSwitch.Generators.ExtendedEnum] public enum PlatformIdentifier { LinuxDevice, DeveloperMachine, WindowsDevice } the generator detecting the [ExtendedEnum] adds Match methods so you can write: var isGraphicalLinux = PlatformIdentifier.LinuxDevice .Match( developerMachine: () =&gt; false, linuxDevice: () =&gt; true, windowsDevice: () =&gt; true ); The default case order for ExtendedEnum is AsDeclared. To avoid problems with changing case orders, one should always use named parameters in Match and Switch calls! To generate Match extensions for all types in an assembly use the ExtendEnums attribute. Flags enums an enums with duplicate values are omitted: //generate internal Match extension methods for all enums in System (Containing assembly of System.DateTime). [assembly: ExtendEnums(typeof(System.DateTime), Accessibility = ExtensionAccessibility.Internal)] //shortcut to generate Match extension methods for all enums in current assembly [assembly: ExtendEnums] To generate Match extensions for a specific type in an assembly write: [assembly: ExtendEnum(typeof(DateTimeKind), CaseOrder = EnumCaseOrder.Alphabetic)] Additional documentation​ Tutorial markdown Tutorial source Contributing We're looking forward to pull requests. Versioning We use SemVer for versioning. Authors bluehands.de License MIT License Acknowledgments F# for fun and profit: Railway Oriented Programming F# for fun and profit: Map and Bind and Apply, Oh my!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#about","content":" note Generating discriminated unions for C# 9.0 and above.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references FunicularSwitch &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FunicularSwitch&quot; Version=&quot;5.0.1&quot; /&gt; &lt;PackageReference Include=&quot;FunicularSwitch.Generators&quot; Version=&quot;3.2.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attributes.g.csAttributes.g.csUnion.ResultSave.g.csAttributes.g.cs using System; // ReSharper disable once CheckNamespace namespace FunicularSwitch.Generators { [AttributeUsage(AttributeTargets.Enum)] sealed class ExtendedEnumAttribute : Attribute { public EnumCaseOrder CaseOrder { get; set; } = EnumCaseOrder.AsDeclared; public ExtensionAccessibility Accessibility { get; set; } = ExtensionAccessibility.Public; } enum EnumCaseOrder { Alphabetic, AsDeclared } /// &lt;summary&gt; /// Generate match methods for all enums defined in assembly that contains AssemblySpecifier. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] class ExtendEnumsAttribute : Attribute { public Type AssemblySpecifier { get; } public EnumCaseOrder CaseOrder { get; set; } = EnumCaseOrder.AsDeclared; public ExtensionAccessibility Accessibility { get; set; } = ExtensionAccessibility.Public; public ExtendEnumsAttribute() =&gt; AssemblySpecifier = typeof(ExtendEnumsAttribute); public ExtendEnumsAttribute(Type assemblySpecifier) { AssemblySpecifier = assemblySpecifier; } } /// &lt;summary&gt; /// Generate match methods for Type. Must be enum. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] class ExtendEnumAttribute : Attribute { public Type Type { get; } public EnumCaseOrder CaseOrder { get; set; } = EnumCaseOrder.AsDeclared; public ExtensionAccessibility Accessibility { get; set; } = ExtensionAccessibility.Public; public ExtendEnumAttribute(Type type) { Type = type; } } enum ExtensionAccessibility { Internal, Public } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#download-example-net--c-","content":" tip Download Example project FunicularSwitch   ","version":"Next","tagName":"h3"},{"title":"Share FunicularSwitch​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#share-funicularswitch","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/FunicularSwitch  ","version":"Next","tagName":"h3"},{"title":"In the same category (FunctionalProgramming) - 15 other generators​","type":1,"pageTitle":"FunicularSwitch by bluehands","url":"/RSCG_Examples/v2/docs/FunicularSwitch#in-the-same-category-functionalprogramming---15-other-generators","content":" cachesourcegenerator​  dunet​  Dusharp​  Funcky.DiscriminatedUnion​  N.SourceGenerators.UnionTypes​  OneOf​  PartiallyApplied​  polytype​  rscg_demeter​  rscg_queryables​  RSCG_Utils_Memo​  Sera.Union​  TypeUtilities​  UnionGen​  UnionsGenerator​ ","version":"Next","tagName":"h3"},{"title":"FusionReactor by OhFlowi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/FusionReactor","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#info","content":" info Name: FusionReactor A C# incremental source generator to create extensions for an enum type. The extensions should be very fast and without reflections. Author: OhFlowi NuGet:https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions You can find more details at https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions Source: https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#original-readme","content":" note FusionReactor.SourceGenerators.EnumExtensions A C# source generator to create extensions for an enum type. Optimized for speed and low resource consumptionSupport for non-standard enum declarations public enum EPublicFoo : byte .NET 8+ support by using FrozenDictionary &amp; FrozenSet.NET 5+ support by using IReadOnlyDictionary &amp; IReadOnlySet.NET Framework 4.5+ support by using IReadOnlyDictionary &amp; HashSet Package - FusionReactor.SourceGenerators.EnumExtensions Add the package to your application using dotnet add package FusionReactor.SourceGenerators.EnumExtensions Adding the package will automatically add a marker attribute, [GenerateEnumExtensions], to your project. To use the generator, add the [GenerateEnumExtensions] attribute to an enum. For example: [GenerateEnumExtensions] public enum EPublicFoo { [Display( ShortName = &quot;Fo&quot;, Name = &quot;Foo - 0&quot;, Description = &quot;Zero&quot;, Prompt = &quot;ooF&quot;, GroupName = &quot;Foos&quot;, Order = 0)] Foo = 0, [Display( ShortName = &quot;Ba&quot;, Name = &quot;Bar - 1&quot;, Description = &quot;One&quot;, Prompt = &quot;raB&quot;, GroupName = &quot;Bars&quot;, Order = 1)] Bar = 1, Batz = 2, } This will generate a class called EPublicFooExtensions (EPublicFoo + Extensions), which contains a number of helper methods. The new class is splitted in two files (EPublicFoo + Extensions.Base.g.cs &amp; EPublicFoo + Extensions.DisplayAttribute.g.cs) EPublicFooExtensions.Base.g.cs: /// &lt;summary&gt; /// Extension methods for the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; [GeneratedCode(&quot;FusionReactor.SourceGenerators.EnumExtensions&quot;, null)] public static partial class EPublicFooExtensions { #if NET8_0_OR_GREATER private static readonly FrozenDictionary&lt;EPublicFoo, Int32&gt; content = new Dictionary&lt;EPublicFoo, Int32&gt; { { EPublicFoo.Foo, 0 }, { EPublicFoo.Bar, 1 }, { EPublicFoo.Batz, 2 }, } .ToFrozenDictionary(); #else private static readonly Dictionary&lt;EPublicFoo, Int32&gt; contentDictionary = new Dictionary&lt;EPublicFoo, Int32&gt; { { EPublicFoo.Foo, 0 }, { EPublicFoo.Bar, 1 }, { EPublicFoo.Batz, 2 }, }; private static readonly IReadOnlyDictionary&lt;EPublicFoo, Int32&gt; content = new ReadOnlyDictionary&lt;EPublicFoo, Int32&gt;(contentDictionary); #endif #if NET8_0_OR_GREATER private static readonly FrozenSet&lt;string&gt; names = new [] { &quot;Foo&quot;, &quot;Bar&quot;, &quot;Batz&quot;, } .ToFrozenSet(); #elif NET5_0_OR_GREATER private static readonly IReadOnlySet&lt;string&gt; names = new HashSet&lt;string&gt;() { &quot;Foo&quot;, &quot;Bar&quot;, &quot;Batz&quot;, }; #else private static readonly HashSet&lt;string&gt; names = new HashSet&lt;string&gt;() { &quot;Foo&quot;, &quot;Bar&quot;, &quot;Batz&quot;, }; #endif #if NET8_0_OR_GREATER private static readonly FrozenSet&lt;EPublicFoo&gt; values = new [] { EPublicFoo.Foo, EPublicFoo.Bar, EPublicFoo.Batz, } .ToFrozenSet(); #elif NET5_0_OR_GREATER private static readonly IReadOnlySet&lt;EPublicFoo&gt; values = new HashSet&lt;EPublicFoo&gt;() { EPublicFoo.Foo, EPublicFoo.Bar, EPublicFoo.Batz, }; #else private static readonly HashSet&lt;EPublicFoo&gt; values = new HashSet&lt;EPublicFoo&gt;() { EPublicFoo.Foo, EPublicFoo.Bar, EPublicFoo.Batz, }; #endif /// &lt;summary&gt; /// Gets the content dictionary containing mappings of &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum values to values. /// &lt;/summary&gt; /// &lt;returns&gt;The read-only content dictionary.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenDictionary&lt;EPublicFoo, Int32&gt; GetContent() #else public static IReadOnlyDictionary&lt;EPublicFoo, Int32&gt; GetContent() #endif { return content; } /// &lt;summary&gt; /// Gets the content dictionary containing mappings of &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum values to values. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value for which to get the content dictionary.&lt;/param&gt; /// &lt;returns&gt;The read-only content dictionary.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenDictionary&lt;EPublicFoo, Int32&gt; GetContent(this EPublicFoo enumValue) #else public static IReadOnlyDictionary&lt;EPublicFoo, Int32&gt; GetContent(this EPublicFoo enumValue) #endif { return content; } /// &lt;summary&gt; /// Retrieves the name of the constant in the &lt;see cref = &quot;EPublicFoo&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value to convert.&lt;/param&gt; /// &lt;returns&gt; /// A string containing the name of the &lt;see cref = &quot;EPublicFoo&quot;/&gt;; /// or &lt;see langword=&quot;null&quot;/&gt; if no such constant is found. /// &lt;/returns&gt; public static string? GetName(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; nameof(EPublicFoo.Foo), EPublicFoo.Bar =&gt; nameof(EPublicFoo.Bar), EPublicFoo.Batz =&gt; nameof(EPublicFoo.Batz), _ =&gt; null }; } /// &lt;summary&gt; /// Retrieves all available names of the &lt;see cref = &quot;EPublicFoo&quot;/&gt;. /// &lt;/summary&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;EPublicFoo&quot;/&gt; names.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;string&gt; GetNames() #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;string&gt; GetNames() #else public static HashSet&lt;string&gt; GetNames() #endif { return names; } /// &lt;summary&gt; /// Retrieves all available names of the &lt;see cref = &quot;EPublicFoo&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value.&lt;/param&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;EPublicFoo&quot;/&gt; names.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;string&gt; GetNames(this EPublicFoo enumValue) #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;string&gt; GetNames(this EPublicFoo enumValue) #else public static HashSet&lt;string&gt; GetNames(this EPublicFoo enumValue) #endif { return names; } /// &lt;summary&gt; /// Retrieves all available values of the &lt;see cref = &quot;EPublicFoo&quot;/&gt;. /// &lt;/summary&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;EPublicFoo&quot;/&gt; values.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;EPublicFoo&gt; GetValues() #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;EPublicFoo&gt; GetValues() #else public static HashSet&lt;EPublicFoo&gt; GetValues() #endif { return values; } /// &lt;summary&gt; /// Retrieves all available values of the &lt;see cref = &quot;EPublicFoo&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value.&lt;/param&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;EPublicFoo&quot;/&gt; values.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;EPublicFoo&gt; GetValues(this EPublicFoo enumValue) #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;EPublicFoo&gt; GetValues(this EPublicFoo enumValue) #else public static HashSet&lt;EPublicFoo&gt; GetValues(this EPublicFoo enumValue) #endif { return values; } /// &lt;summary&gt; /// Parses the specified string representation of the enumeration value to its corresponding /// &lt;see cref = &quot;EPublicFoo&quot;/&gt; value. /// &lt;/summary&gt; /// &lt;param name = &quot;value&quot;&gt;A string containing the name or value to convert.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt; /// A boolean indicating whether to ignore case during the parsing. Default is &lt;c&gt;false&lt;/c&gt;. /// &lt;/param&gt; /// &lt;returns&gt; /// The &lt;see cref = &quot;EPublicFoo&quot;/&gt; value equivalent to the specified string representation. /// &lt;/returns&gt; public static EPublicFoo Parse(string value, bool ignoreCase = false) { if (ignoreCase) { return value.ToLowerInvariant() switch { &quot;foo&quot; =&gt; EPublicFoo.Foo, &quot;bar&quot; =&gt; EPublicFoo.Bar, &quot;batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; throw new ArgumentException(), }; } else { return value switch { &quot;Foo&quot; =&gt; EPublicFoo.Foo, &quot;Bar&quot; =&gt; EPublicFoo.Bar, &quot;Batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; throw new ArgumentException(), }; } } /// &lt;summary&gt; /// Parses the specified string representation of the enumeration value to its corresponding /// &lt;see cref = &quot;EPublicFoo&quot;/&gt; value. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The current &lt;see cref = &quot;EPublicFoo&quot;/&gt; value.&lt;/param&gt; /// &lt;param name = &quot;value&quot;&gt;A string containing the name or value to convert.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt; /// A boolean indicating whether to ignore case during the parsing. Default is &lt;c&gt;false&lt;/c&gt;. /// &lt;/param&gt; /// &lt;returns&gt; /// The &lt;see cref = &quot;EPublicFoo&quot;/&gt; value equivalent to the specified string representation. /// &lt;/returns&gt; public static EPublicFoo Parse(this EPublicFoo enumValue, string value, bool ignoreCase = false) { if (ignoreCase) { return value.ToLowerInvariant() switch { &quot;foo&quot; =&gt; EPublicFoo.Foo, &quot;bar&quot; =&gt; EPublicFoo.Bar, &quot;batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; throw new ArgumentException(), }; } else { return value switch { &quot;Foo&quot; =&gt; EPublicFoo.Foo, &quot;Bar&quot; =&gt; EPublicFoo.Bar, &quot;Batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; throw new ArgumentException(), }; } } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;EPublicFoo&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;EPublicFoo&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(string value, out EPublicFoo? result) { return TryParse(value, false, out result); } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;EPublicFoo&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt;A boolean indicating whether case should be ignored when parsing.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;EPublicFoo&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(string value, bool ignoreCase, out EPublicFoo? result) { if (ignoreCase) { result = value.ToLowerInvariant() switch { &quot;foo&quot; =&gt; EPublicFoo.Foo, &quot;bar&quot; =&gt; EPublicFoo.Bar, &quot;batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; null, }; } else { result = value switch { &quot;Foo&quot; =&gt; EPublicFoo.Foo, &quot;Bar&quot; =&gt; EPublicFoo.Bar, &quot;Batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; null, }; } return result != null; } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;EPublicFoo&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value to parse.&lt;/param&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;EPublicFoo&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(this EPublicFoo enumValue, string value, out EPublicFoo? result) { return TryParse(value, false, out result); } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;EPublicFoo&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value to parse.&lt;/param&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt;A boolean indicating whether case should be ignored when parsing.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;EPublicFoo&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(this EPublicFoo enumValue, string value, bool ignoreCase, out EPublicFoo? result) { if (ignoreCase) { result = value.ToLowerInvariant() switch { &quot;foo&quot; =&gt; EPublicFoo.Foo, &quot;bar&quot; =&gt; EPublicFoo.Bar, &quot;batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; null, }; } else { result = value switch { &quot;Foo&quot; =&gt; EPublicFoo.Foo, &quot;Bar&quot; =&gt; EPublicFoo.Bar, &quot;Batz&quot; =&gt; EPublicFoo.Batz, _ =&gt; null, }; } return result != null; } } EPublicFooExtensions.DisplayAttribute.g.cs: public static partial class EPublicFooExtensions { #if !NET8_0_OR_GREATER private static readonly Dictionary&lt;EPublicFoo, DisplayResult?&gt; displayResultsDictionary = new Dictionary&lt;EPublicFoo, DisplayResult?&gt; { { EPublicFoo.Foo, new DisplayResult { ShortName = &quot;Fo&quot;, Name = &quot;Foo - 0&quot;, Description = &quot;Zero&quot;, Prompt = &quot;ooF&quot;, GroupName = &quot;Foos&quot;, Order = 0, } }, { EPublicFoo.Bar, new DisplayResult { ShortName = &quot;Ba&quot;, Name = &quot;Bar - 1&quot;, Description = &quot;One&quot;, Prompt = &quot;raB&quot;, GroupName = &quot;Bars&quot;, Order = 1, } }, { EPublicFoo.Batz, null }, }; #endif /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;returns&gt;The display attribute result or the enum value.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenDictionary&lt;EPublicFoo, DisplayResult?&gt; DisplayResults =&gt; new Dictionary&lt;EPublicFoo, DisplayResult?&gt; { { EPublicFoo.Foo, new DisplayResult { ShortName = &quot;Fo&quot;, Name = &quot;Foo - 0&quot;, Description = &quot;Zero&quot;, Prompt = &quot;ooF&quot;, GroupName = &quot;Foos&quot;, Order = 0, }}, { EPublicFoo.Bar, new DisplayResult { ShortName = &quot;Ba&quot;, Name = &quot;Bar - 1&quot;, Description = &quot;One&quot;, Prompt = &quot;raB&quot;, GroupName = &quot;Bars&quot;, Order = 1, }}, { EPublicFoo.Batz, null }, } .ToFrozenDictionary(); #else public static IReadOnlyDictionary&lt;EPublicFoo, DisplayResult?&gt; DisplayResults =&gt; new ReadOnlyDictionary&lt;EPublicFoo, DisplayResult?&gt;(displayResultsDictionary); #endif /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value.&lt;/param&gt; /// &lt;returns&gt;The display name or the enum value.&lt;/returns&gt; public static string? DisplayShortName(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; &quot;Fo&quot;, EPublicFoo.Bar =&gt; &quot;Ba&quot;, EPublicFoo.Batz =&gt; null, _ =&gt; null }; } /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute.Name&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value.&lt;/param&gt; /// &lt;returns&gt;The name or the enum value.&lt;/returns&gt; public static string? DisplayName(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; &quot;Foo - 0&quot;, EPublicFoo.Bar =&gt; &quot;Bar - 1&quot;, EPublicFoo.Batz =&gt; null, _ =&gt; null }; } /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute.Description&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value.&lt;/param&gt; /// &lt;returns&gt;The display name or the enum value.&lt;/returns&gt; public static string? DisplayDescription(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; &quot;Zero&quot;, EPublicFoo.Bar =&gt; &quot;One&quot;, EPublicFoo.Batz =&gt; null, _ =&gt; null }; } /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value.&lt;/param&gt; /// &lt;returns&gt;The display name or the enum value.&lt;/returns&gt; public static string? DisplayPrompt(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; &quot;ooF&quot;, EPublicFoo.Bar =&gt; &quot;raB&quot;, EPublicFoo.Batz =&gt; null, _ =&gt; null }; } /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value.&lt;/param&gt; /// &lt;returns&gt;The display name or the enum value.&lt;/returns&gt; public static string? DisplayGroupName(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; &quot;Foos&quot;, EPublicFoo.Bar =&gt; &quot;Bars&quot;, EPublicFoo.Batz =&gt; null, _ =&gt; null }; } /// &lt;summary&gt; /// Returns the &lt;see cref = &quot;System.ComponentModel.DataAnnotations.DisplayAttribute.Order&quot;/&gt; of the &lt;see cref = &quot;EPublicFoo&quot;/&gt; enum. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value.&lt;/param&gt; /// &lt;returns&gt;The display name or the enum value.&lt;/returns&gt; public static int? DisplayOrder(this EPublicFoo enumValue) { return enumValue switch { EPublicFoo.Foo =&gt; 0, EPublicFoo.Bar =&gt; 1, EPublicFoo.Batz =&gt; null, _ =&gt; null }; } } The generated extension files are available in your IDE under the Source Generators files. Contributing​ Create an issue if you find a BUG or have a Suggestion or Question. If you want to develop this project : Fork it!Create your feature branch: git checkout -b my-new-featureCommit your changes: git commit -am 'Add some feature'Push to the branch: git push origin my-new-featureSubmit a pull request License​ FusionReactor.SourceGenerators.EnumExtensions is Copyright © 2024 OhFlowi under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#about","content":" note Enums to string and other extensions  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#example-source-csproj-source-files","content":" CSharp ProjectProgram.csColors.cs This is the CSharp Project that references FusionReactor &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FusionReactor.SourceGenerators.EnumExtensions&quot; Version=&quot;1.1.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ColorsExtensions.Base.g.csColorsExtensions.DisplayAttribute.g.csDisplayResult.g.csGenerateEnumExtensionsAttribute.g.cs // &lt;auto-generated /&gt; #nullable enable using System; using System.CodeDom.Compiler; using System.Collections; #if NET8_0_OR_GREATER using System.Collections.Frozen; #endif using System.Collections.Generic; using System.Collections.ObjectModel; namespace EnumClassDemo; /// &lt;summary&gt; /// Extension methods for the &lt;see cref = &quot;Colors&quot;/&gt; enum. /// &lt;/summary&gt; [GeneratedCode(&quot;FusionReactor.SourceGenerators.EnumExtensions&quot;, null)] public static partial class ColorsExtensions { #if NET8_0_OR_GREATER private static readonly FrozenDictionary&lt;Colors, Int32&gt; content = new Dictionary&lt;Colors, Int32&gt; { { Colors.None, 0 }, { Colors.Red, 1 }, { Colors.Green, 2 }, { Colors.Blue, 4 }, } .ToFrozenDictionary(); #else private static readonly Dictionary&lt;Colors, Int32&gt; contentDictionary = new Dictionary&lt;Colors, Int32&gt; { { Colors.None, 0 }, { Colors.Red, 1 }, { Colors.Green, 2 }, { Colors.Blue, 4 }, }; private static readonly IReadOnlyDictionary&lt;Colors, Int32&gt; content = new ReadOnlyDictionary&lt;Colors, Int32&gt;(contentDictionary); #endif #if NET8_0_OR_GREATER private static readonly FrozenSet&lt;string&gt; names = new [] { &quot;None&quot;, &quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, } .ToFrozenSet(); #elif NET5_0_OR_GREATER private static readonly IReadOnlySet&lt;string&gt; names = new HashSet&lt;string&gt;() { &quot;None&quot;, &quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, }; #else private static readonly HashSet&lt;string&gt; names = new HashSet&lt;string&gt;() { &quot;None&quot;, &quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, }; #endif #if NET8_0_OR_GREATER private static readonly FrozenSet&lt;Colors&gt; values = new [] { Colors.None, Colors.Red, Colors.Green, Colors.Blue, } .ToFrozenSet(); #elif NET5_0_OR_GREATER private static readonly IReadOnlySet&lt;Colors&gt; values = new HashSet&lt;Colors&gt;() { Colors.None, Colors.Red, Colors.Green, Colors.Blue, }; #else private static readonly HashSet&lt;Colors&gt; values = new HashSet&lt;Colors&gt;() { Colors.None, Colors.Red, Colors.Green, Colors.Blue, }; #endif /// &lt;summary&gt; /// Gets the content dictionary containing mappings of &lt;see cref = &quot;Colors&quot;/&gt; enum values to values. /// &lt;/summary&gt; /// &lt;returns&gt;The read-only content dictionary.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenDictionary&lt;Colors, Int32&gt; GetContent() #else public static IReadOnlyDictionary&lt;Colors, Int32&gt; GetContent() #endif { return content; } /// &lt;summary&gt; /// Gets the content dictionary containing mappings of &lt;see cref = &quot;Colors&quot;/&gt; enum values to values. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value for which to get the content dictionary.&lt;/param&gt; /// &lt;returns&gt;The read-only content dictionary.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenDictionary&lt;Colors, Int32&gt; GetContent(this Colors enumValue) #else public static IReadOnlyDictionary&lt;Colors, Int32&gt; GetContent(this Colors enumValue) #endif { return content; } /// &lt;summary&gt; /// Retrieves the name of the constant in the &lt;see cref = &quot;Colors&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enum value to convert.&lt;/param&gt; /// &lt;returns&gt; /// A string containing the name of the &lt;see cref = &quot;Colors&quot;/&gt;; /// or &lt;see langword=&quot;null&quot;/&gt; if no such constant is found. /// &lt;/returns&gt; public static string? GetName(this Colors enumValue) { return enumValue switch { Colors.None =&gt; nameof(Colors.None), Colors.Red =&gt; nameof(Colors.Red), Colors.Green =&gt; nameof(Colors.Green), Colors.Blue =&gt; nameof(Colors.Blue), _ =&gt; null }; } /// &lt;summary&gt; /// Retrieves all available names of the &lt;see cref = &quot;Colors&quot;/&gt;. /// &lt;/summary&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;Colors&quot;/&gt; names.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;string&gt; GetNames() #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;string&gt; GetNames() #else public static HashSet&lt;string&gt; GetNames() #endif { return names; } /// &lt;summary&gt; /// Retrieves all available names of the &lt;see cref = &quot;Colors&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value.&lt;/param&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;Colors&quot;/&gt; names.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;string&gt; GetNames(this Colors enumValue) #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;string&gt; GetNames(this Colors enumValue) #else public static HashSet&lt;string&gt; GetNames(this Colors enumValue) #endif { return names; } /// &lt;summary&gt; /// Retrieves all available values of the &lt;see cref = &quot;Colors&quot;/&gt;. /// &lt;/summary&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;Colors&quot;/&gt; values.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;Colors&gt; GetValues() #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;Colors&gt; GetValues() #else public static HashSet&lt;Colors&gt; GetValues() #endif { return values; } /// &lt;summary&gt; /// Retrieves all available values of the &lt;see cref = &quot;Colors&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value.&lt;/param&gt; /// &lt;returns&gt;An enumerable collection of &lt;see cref = &quot;Colors&quot;/&gt; values.&lt;/returns&gt; #if NET8_0_OR_GREATER public static FrozenSet&lt;Colors&gt; GetValues(this Colors enumValue) #elif NET5_0_OR_GREATER public static IReadOnlySet&lt;Colors&gt; GetValues(this Colors enumValue) #else public static HashSet&lt;Colors&gt; GetValues(this Colors enumValue) #endif { return values; } /// &lt;summary&gt; /// Parses the specified string representation of the enumeration value to its corresponding /// &lt;see cref = &quot;Colors&quot;/&gt; value. /// &lt;/summary&gt; /// &lt;param name = &quot;value&quot;&gt;A string containing the name or value to convert.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt; /// A boolean indicating whether to ignore case during the parsing. Default is &lt;c&gt;false&lt;/c&gt;. /// &lt;/param&gt; /// &lt;returns&gt; /// The &lt;see cref = &quot;Colors&quot;/&gt; value equivalent to the specified string representation. /// &lt;/returns&gt; public static Colors Parse(string value, bool ignoreCase = false) { if (ignoreCase) { return value.ToLowerInvariant() switch { &quot;none&quot; =&gt; Colors.None, &quot;red&quot; =&gt; Colors.Red, &quot;green&quot; =&gt; Colors.Green, &quot;blue&quot; =&gt; Colors.Blue, _ =&gt; throw new ArgumentException(), }; } else { return value switch { &quot;None&quot; =&gt; Colors.None, &quot;Red&quot; =&gt; Colors.Red, &quot;Green&quot; =&gt; Colors.Green, &quot;Blue&quot; =&gt; Colors.Blue, _ =&gt; throw new ArgumentException(), }; } } /// &lt;summary&gt; /// Parses the specified string representation of the enumeration value to its corresponding /// &lt;see cref = &quot;Colors&quot;/&gt; value. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The current &lt;see cref = &quot;Colors&quot;/&gt; value.&lt;/param&gt; /// &lt;param name = &quot;value&quot;&gt;A string containing the name or value to convert.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt; /// A boolean indicating whether to ignore case during the parsing. Default is &lt;c&gt;false&lt;/c&gt;. /// &lt;/param&gt; /// &lt;returns&gt; /// The &lt;see cref = &quot;Colors&quot;/&gt; value equivalent to the specified string representation. /// &lt;/returns&gt; public static Colors Parse(this Colors enumValue, string value, bool ignoreCase = false) { if (ignoreCase) { return value.ToLowerInvariant() switch { &quot;none&quot; =&gt; Colors.None, &quot;red&quot; =&gt; Colors.Red, &quot;green&quot; =&gt; Colors.Green, &quot;blue&quot; =&gt; Colors.Blue, _ =&gt; throw new ArgumentException(), }; } else { return value switch { &quot;None&quot; =&gt; Colors.None, &quot;Red&quot; =&gt; Colors.Red, &quot;Green&quot; =&gt; Colors.Green, &quot;Blue&quot; =&gt; Colors.Blue, _ =&gt; throw new ArgumentException(), }; } } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;Colors&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;Colors&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(string value, out Colors? result) { return TryParse(value, false, out result); } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;Colors&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt;A boolean indicating whether case should be ignored when parsing.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;Colors&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(string value, bool ignoreCase, out Colors? result) { if (ignoreCase) { result = value.ToLowerInvariant() switch { &quot;none&quot; =&gt; Colors.None, &quot;red&quot; =&gt; Colors.Red, &quot;green&quot; =&gt; Colors.Green, &quot;blue&quot; =&gt; Colors.Blue, _ =&gt; null, }; } else { result = value switch { &quot;None&quot; =&gt; Colors.None, &quot;Red&quot; =&gt; Colors.Red, &quot;Green&quot; =&gt; Colors.Green, &quot;Blue&quot; =&gt; Colors.Blue, _ =&gt; null, }; } return result != null; } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;Colors&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value to parse.&lt;/param&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;Colors&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(this Colors enumValue, string value, out Colors? result) { return TryParse(value, false, out result); } /// &lt;summary&gt; /// Tries to parse the specified string representation of an enumeration value to its corresponding /// &lt;see cref = &quot;Colors&quot;/&gt; enumeration value. /// &lt;/summary&gt; /// &lt;param name = &quot;enumValue&quot;&gt;The enumeration value to parse.&lt;/param&gt; /// &lt;param name = &quot;value&quot;&gt;The string representation of the enumeration value.&lt;/param&gt; /// &lt;param name = &quot;ignoreCase&quot;&gt;A boolean indicating whether case should be ignored when parsing.&lt;/param&gt; /// &lt;param name = &quot;result&quot;&gt; /// When this method returns, contains the &lt;see cref = &quot;Colors&quot;/&gt; value equivalent /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the parsing was successful; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse(this Colors enumValue, string value, bool ignoreCase, out Colors? result) { if (ignoreCase) { result = value.ToLowerInvariant() switch { &quot;none&quot; =&gt; Colors.None, &quot;red&quot; =&gt; Colors.Red, &quot;green&quot; =&gt; Colors.Green, &quot;blue&quot; =&gt; Colors.Blue, _ =&gt; null, }; } else { result = value switch { &quot;None&quot; =&gt; Colors.None, &quot;Red&quot; =&gt; Colors.Red, &quot;Green&quot; =&gt; Colors.Green, &quot;Blue&quot; =&gt; Colors.Blue, _ =&gt; null, }; } return result != null; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#download-example-net--c","content":" tip Download Example project FusionReactor   ","version":"Next","tagName":"h3"},{"title":"Share FusionReactor​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#share-fusionreactor","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/FusionReactor  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"FusionReactor by OhFlowi","url":"/RSCG_Examples/v2/docs/FusionReactor#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"GeneratorEquals by Diego Frato","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/GeneratorEquals","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#info","content":" info Name: GeneratorEquals A source code generator for automatically implementing IEquatable using only attributes. Author: Diego Frato NuGet:https://www.nuget.org/packages/Generator.Equals/ You can find more details at https://github.com/diegofrata/Generator.Equals Source: https://github.com/diegofrata/Generator.Equals  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#original-readme","content":" note Generator.Equals A source code generator for automatically implementing IEquatable&lt;T&gt; using only attributes. Requirements​ In order to use this library, you must: Use a target framework that supports .NET Standard &gt;= 2.0Set your project's C# LangVersion property to 9.0 or higher. Installation​ Simply add the package Generator.Equals to your project. Keep reading to learn how to add the attributes to your types. Migrating from version 2​ Migrating to version 3 is very straightforward. Ensure projects are targeting C# 9.0 or latter using the MSBuild property LangVersion.Be aware that IEquatable&lt;T&gt; for classes is now implemented explicitly in order to support deep equality. As a result, the method Equals(T) method is no longer marked as public. Most code should still work, requiring only to be recompiled as the ABI has changed. If you have an existing project using Generator.Equals and don't need any of the new features, you can still use version 2.x. The differences are minimal between both major versions. Usage​ The below sample shows how to use Generator.Equals to override the default equality implementation for a C# record, enhancing it with the ability to determine the equality between the array contents of the record. using Generator.Equals; [Equatable] partial record MyRecord( [property: OrderedEquality] string[] Fruits ); class Program { static void Main(string[] args) { var record1 = new MyRecord(new[] {&quot;banana&quot;, &quot;apple&quot;}); var record2 = new MyRecord(new[] {&quot;banana&quot;, &quot;apple&quot;}); Console.WriteLine(record1 == record2); } } Need more than records? Generator.Equals supports properties (and fields) also across classes, structs and record structs. using Generator.Equals; [Equatable] partial class MyClass { [DefaultEquality] private int _secretNumber = 42; [OrderedEquality] public string[] Fruits { get; set; } } [Equatable] partial struct MyStruct { [OrderedEquality] public string[] Fruits { get; set; } } [Equatable] partial record struct MyRecordStruct( [property: OrderedEquality] string[] Fruits ); Supported Comparers​ Below is a list of all supported comparers. Would you like something else added? Let me know by raising an issue or sending a PR! Default​ This is the comparer that's used when a property has no attributes indicating otherwise. The generated code will useEqualityComparer&lt;T&gt;.Default for both equals and hashing operation. Fields are not used in comparison unless explicitly annotated. To enable the default comparison for a field, annotate it with the DefaultEquality attribute. IgnoreEquality​ [IgnoreEquality] public string Name { get; set; } As the name implies, the property is ignored during Equals and GetHashCode calls! OrderedEquality​ [OrderedEquality] public string[] Fruits { get; set; } // Fruits have to be in the same order for the array to be considered equal. This equality comparer will compare properties as a sequence instead of a reference. This works just like Enumerable.SequenceEqual, which assumes both lists are of the same size and same sort. Bear in mind that the property has to implement IEnumerable and the that the items themselves implement equality (you can use Generator.Equals in the items too!). UnorderedEquality​ [UnorderedEquality] public string[] Fruits { get; set; } // Does not care about the order of the fruits! [UnorderedEquality] public IDictionary&lt;string, object&gt; Properties { get; set; } // Works with dictionaries too! This equality comparer will compare properties as an unordered sequence instead of a reference. This works just like Enumerable.SequenceEqual, but it does not care about the order as long as the all values (including the repetitions) are present. As with OrderedEquality, bear in mind that the property (or key and values if using a dictionary) has to implement IEnumerable and the that the items themselves implement equality (you can use Generator.Equals in the items too!). SetEquality​ [SetEquality] public HashSet&lt;string&gt; Fruits { get; set; } // Fruits can be in any order and it can be repeated This equality comparer will do a set comparison, using SetEquals whenever the underlying collection implements ISet&lt;T&gt;, otherwise falling back to manually comparing both collections, which can be expensive for large collections. Hashing always returns 0 for this type of equality, ReferenceEquality​ [ReferenceEquality] public string Name { get; set; } // Will only return true if strings are the same reference (eg. when used with string.Intern) This will ignore whatever equality is implemented for a particular object and compare references instead. CustomEquality​ class LengthEqualityComparer : IEqualityComparer&lt;string&gt; { public static readonly LengthEqualityComparer Default = new(); public bool Equals(string? x, string? y) =&gt; x?.Length == y?.Length; public int GetHashCode(string obj) =&gt; obj.Length.GetHashCode(); } class NameEqualityComparer { public static readonly IEqualityComparer&lt;string&gt; Default = new SomeCustomComparer(); } [CustomEquality(typeof(LengthEqualityComparer))] public string Name1 { get; set; } // Will use LengthEqualityComparer to compare the values of Name1. [CustomEquality(typeof(NameEqualityComparer))] public string Name2 { get; set; } // Will use NameEqualityComparer.Default to compare values of Name2. [CustomEquality(typeof(StringComparer), nameof(StringComparer.OrdinalIgnoreCase))] public string Name2 { get; set; } // Will use StringComparer.OrdinalIgnoreCase to compare values of Name2. This attribute allows you to specify a custom comparer for a particular property. For it to work, the type passed as an argument to CustomEqualityAttribute should fulfill AT LEAST one of the following: Have a static field/property named Default returning a valid IEqualityComparer instance for the target type;Have a static field/property with the same name passed to the CustomComparerAttribute returning a valid IEqualityComparer instance for the target type;Implement IEqualityComparer and expose a parameterless constructor. Advanced Options​ Explicit Mode​ The generator allows you to explicitly specify which properties are used to generate the IEquatable. To do this, set the Explicit property of EquatableAttribute to true and specify the required properties using DefaultEqualityAttribute or other attributes. using Generator.Equals; [Equatable(Explicit = true)] partial class MyClass { // Only this property will be used for equality! [DefaultEquality] public string Name { get; set; } = &quot;Konstantin&quot;; public string Description { get; set; } = &quot;&quot;; } Ignore Inherited Members​ You can also choose to ignore members from parent classes/record by setting IgnoreInheritedMembers to true. using Generator.Equals; class Person { public string Name { get; set; } } [Equatable(IgnoreInheritedMembers = true)] partial class Doctor : Person { // Only members in the Doctor class will be used for comparison. public string Id { get; set; } public string Specialization { get; set; } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#about","content":" note Generating Equals from properties  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references GeneratorEquals &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Generator.Equals&quot; Version=&quot;3.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GeneratorEqualsDemo.Person.Generator.Equals.g.cs #nullable enable #pragma warning disable CS0612,CS0618 #pragma warning disable CS0436 namespace GeneratorEqualsDemo { partial class Person : global::System.IEquatable&lt;Person&gt; { /// &lt;summary&gt; /// Indicates whether the object on the left is equal to the object on the right. /// &lt;/summary&gt; /// &lt;param name=&quot;left&quot;&gt;The left object&lt;/param&gt; /// &lt;param name=&quot;right&quot;&gt;The right object&lt;/param&gt; /// &lt;returns&gt;true if the objects are equal; otherwise, false.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Generator.Equals&quot;, &quot;1.0.0.0&quot;)] public static bool operator ==( global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) =&gt; global::Generator.Equals.DefaultEqualityComparer&lt;global::GeneratorEqualsDemo.Person?&gt;.Default .Equals(left, right); /// &lt;summary&gt; /// Indicates whether the object on the left is not equal to the object on the right. /// &lt;/summary&gt; /// &lt;param name=&quot;left&quot;&gt;The left object&lt;/param&gt; /// &lt;param name=&quot;right&quot;&gt;The right object&lt;/param&gt; /// &lt;returns&gt;true if the objects are not equal; otherwise, false.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Generator.Equals&quot;, &quot;1.0.0.0&quot;)] public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) =&gt; !(left == right); /// &lt;inheritdoc/&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Generator.Equals&quot;, &quot;1.0.0.0&quot;)] public override bool Equals(object? obj) =&gt; Equals(obj as global::GeneratorEqualsDemo.Person); /// &lt;inheritdoc/&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Generator.Equals&quot;, &quot;1.0.0.0&quot;)] bool global::System.IEquatable&lt;global::GeneratorEqualsDemo.Person&gt;.Equals(global::GeneratorEqualsDemo.Person? obj) =&gt; Equals((object?) obj); /// &lt;inheritdoc/&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Generator.Equals&quot;, &quot;1.0.0.0&quot;)] protected bool Equals(global::GeneratorEqualsDemo.Person? other) { if (ReferenceEquals(null, other)) return false; if (ReferenceEquals(this, other)) return true; return other.GetType() == this.GetType() &amp;&amp; global::Generator.Equals.DefaultEqualityComparer&lt;global::System.String?&gt;.Default.Equals(this.FirstName!, other.FirstName!) &amp;&amp; global::Generator.Equals.DefaultEqualityComparer&lt;global::System.String?&gt;.Default.Equals(this.LastName!, other.LastName!) ; } /// &lt;inheritdoc/&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Generator.Equals&quot;, &quot;1.0.0.0&quot;)] public override int GetHashCode() { var hashCode = new global::System.HashCode(); hashCode.Add(this.GetType()); hashCode.Add( this.FirstName!, global::Generator.Equals.DefaultEqualityComparer&lt;global::System.String?&gt;.Default); hashCode.Add( this.LastName!, global::Generator.Equals.DefaultEqualityComparer&lt;global::System.String?&gt;.Default); return hashCode.ToHashCode(); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#download-example-net--c","content":" tip Download Example project GeneratorEquals   ","version":"Next","tagName":"h3"},{"title":"Share GeneratorEquals​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#share-generatorequals","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/GeneratorEquals  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Equals\" has the following generators:​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#category-equals-has-the-following-generators","content":" 1 Equatable.Generator  2 GeneratorEquals  3 Valuify  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"GeneratorEquals by Diego Frato","url":"/RSCG_Examples/v2/docs/GeneratorEquals#see-category","content":" Equals ","version":"Next","tagName":"h3"},{"title":"Genbox.FastEnum by Ian Qvist","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#info","content":" info Name: Genbox.FastEnum Easy to use source generator for enums. Author: Ian Qvist NuGet:https://www.nuget.org/packages/Genbox.FastEnum/ You can find more details at https://github.com/Genbox/FastEnum Source: https://github.com/Genbox/FastEnum  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#original-readme","content":" note FastEnum Description​ A source generator to generate common methods for your enum types at compile-time. Print values, parse, or get the underlying value of enums without using reflection. Features​ Intuitive API with discoverability through IntelliSense. All enums can be accessed via the Enums class.High-performance Zero allocations whenever possible.GetMemberNames(), GetMemberValues() etc. are cached by default. Use DisableCache to disable it.MemberCount and IsFlagsEnum is const to allow the compiler to fold constants. Supports name and description from DisplayAttribute.Support for flag enums via the FlagsAttribute.Support for skipping enum values completely with [EnumOmitValue] on enum members.Support for private/internal enumsSupport for enums nested inside classesSupport for user-set underlying values such as long, uint, byte, etc.Support for duplicate enum names from different namespacesSupport for enums that reside in the global namespaceHas several options to control namespace, class name and more for generated code. See Options section below for details. Examples​ Lets create a very simple enum, and add the [FastEnum] attribute to it. [FastEnum] public enum Color { Red, Green, Blue } Extensions​ Extensions tell you something about an instance of an enum you have. For example, MyEnum.Value1.GetString() is the same as MyEnum.Value1.ToString() from dotnet, except that it does not need to do any work at runtime. The following extensions are auto-generated: Color c = Color.Red; Console.WriteLine(&quot;String value: &quot; + e.GetString()); Console.WriteLine(&quot;Underlying value: &quot; + e.GetUnderlyingValue()); Output: String value: Red Underlying value: 0 Enums class​ Enums is a class that contains metadata about the auto-generated enum. Console.WriteLine(&quot;Number of members: &quot; + Enums.Color.MemberCount); Console.WriteLine(&quot;Parse: &quot; + Enums.Color.Parse(&quot;Red&quot;)); Console.WriteLine(&quot;Is Green part of the enum: &quot; + Enums.Color.IsDefined(Color.Green)); PrintArray(&quot;Member names:&quot;, Enums.Color.GetMemberNames()); PrintArray(&quot;Underlying values:&quot;, Enums.Color.GetUnderlyingValues()); PrintArray simply iterates an array and list the values on separate lines. Output: Number of members: 3 Parse: Red Is Green part of the enum: True Member names: - Red - Green - Blue Underlying values: - 0 - 1 - 2 Values via attributes​ DisplayAttribute​ If you add DisplayAttribute to an enum, the source generator will generate extra methods. For example, you can add [DisplayAttribute] to an enum value like this: [FastEnum] internal enum MyEnum { [Display(Name = &quot;Value1Name&quot;, Description = &quot;Value1Description&quot;)] Value1 = 1, Value2 = 2 } It will generate GetDisplayName() and GetDescription() extensions to your enum. MyEnum e = MyEnum.Value1; Console.WriteLine(&quot;Display name: &quot; + e.GetDisplayName()); Console.WriteLine(&quot;Description: &quot; + e.GetDescription()); Output: Display name: Value1Name Description: Value1Description FlagsAttribute​ If you have an enum with the FlagsAttribute, FastEnum will add a method called IsFlagSet(). [Flags] [FastEnum] internal enum MyFlagsEnum { None = 0, Value1 = 1, Value2 = 2 Value3 = 4 } MyFlagsEnum e = MyFlagsEnum.Value1 | MyFlagsEnum.Value3; Console.WriteLine(&quot;Is Value2 set: &quot; + e.IsFlagSet(MyFlagsEnum.Value2)); Output: Is Value2 set: False Options​ [FastEnum] have several options to control the behavior of the generated code. ExtensionClassName​ The generated extension class is partial by default. So if you want to combine extension from your own class and the autogenerated one, you can use this option to set the name to the same as your extensions class. Defaults to &lt;EnumName&gt;Extensions. ExtensionClassNamespace​ Use this to control which namespace the extensions class belongs to. Defaults to the namespace of the enum. EnumsClassName​ Use this to set the name of the Enums class to something else. EnumsClassNamespace​ Used this to specify the namespace for the Enums class. Defaults to the namespace of the enum. EnumNameOverride​ Sometimes you might have two enums named the same, but in different namespaces. You can use this option to override the name of the enum in the generated code. For example, if your enum is named MyEnum the Enums class can be accessed like this: Enums.MyEnum.GetMemberNames() If you set EnumNameOverride to OtherEnum it will look like this instead: Enums.OtherEnum.GetMemberNames() DisableEnumsWrapper​ Enable this to avoid generating the static Enums class that wraps all the enums. When enabled, Enums.MyEnum becomes MyEnum. This is handy if you want to set all enums inside the same namespace across projects. Note that you must use EnumNameOverride or set EnumsClassNamespace to something to avoid the name collision between your enum and the generated class. DisableCache​ By default arrays from GetMemberNames(), GetMemberValues() etc. is cached to avoid an allocation each time you call them. If your application only needs the arrays once, then caching them in memory take up unnecessary space. Use this option to disable the cache. Transformations​ You can transform the string output of enums with [EnumTransform] at compile time. There are a few ways to do this. [EnumTransform(Preset = EnumTransform.UpperCase)] //Will uppercase all enum values [EnumTransform(Regex = &quot;/^Enum//&quot;)] //A regex to replace values starting with &quot;Enum&quot; with nothing. [EnumTransform(CasePattern = &quot;U_U_U&quot;)] //Uppercase the first, third and fifth characters Note: You can only specify one [EnumTransform] at the time. Regex must have the format /regex-here/replacement-here/. CasePattern is a way to either uppercase, lowercase or omit charaters. The language uses the following modifier chars: U: Uppercase the charL: Lowercase the charO: Omit the char_: Do nothing. Keep the char as-is. Let's say you want to omit the first character in all values, uppercase the third character and lowercase the rest. [FastEnum] [EnumTransform(CasePattern = &quot;OOULLLLL&quot;)] public enum MyEnum { Myvalue1, Myvalue2, Myvalue3 } The pattern is matched as much as possible. A pattern of U will simply uppercase the first character, and a pattern of UUUUUUUUUUUU will uppercase the first 12 characters, even if the enum value is only 6 characters long. Omitting values​ It is possible to omit enum value both fully and partially. This is useful if you, let's say, want to use the enum values directly in a dropdown on a website, but don't want to include a value in the list. [FastEnum] public enum Color { [EnumOmitValue] //Completely omitted Unknown, [EnumOmitValue(Exclude = EnumOmitExclude.GetMemberNames] //Partially omitted Red, Green } If you call GetMemberNames() or any other method on the Enums.Color class, the Unknown value will be omitted. foreach (string name in Enums.Color.GetMemberNames()) { Console.WriteLine(name); } Output: Red Green Since we excluded GetMemberNames() for the Red color, it showed up in the list above, but it won't show up when calling GetMemberValues(). foreach (Color value in Enums.Color.GetMemberValues()) { Console.WriteLine(value.ToString()); } Output: Green Notes​ Parse/TryParse methods​ FastEnum has some additional features compared to dotnet's Enum.Parse&lt;T&gt;() and Enum.TryParse&lt;T&gt;(): Supports StringComparison (defaults to ordinal comparison)Supports parsing ValueOverride when using [EnumTransformValue]. Also supports DisplayName and Description when using DisplayAttributeYou can enable/disable Name, Value, DisplayName or Description parsing via an enum: Enums.MyEnum.TryParse(&quot;val&quot;, out MyEnum v, MyEnumFormat.Name | MyEnumFormat.DisplayName) IsDefined method​ The IsDefined method is different than the one provided by dotnet. It supports flags out of the box. Enums.MyEnum.IsDefined((MyEnum)42)and Enums.MyEnum.IsDefined(MyEnum.Value1 | MyEnum.Value3) both work. Benchmarks​ Here are benchmarks for calling different methods in dotnet vs. using CodeGen vs. using Enums.net. Enums.net is a high-performance library for working with enum values. The table below shows that Enums.net is between 2-80x faster than dotnet, but FastEnum is 2-14x faster than Enums.net. Method\tMean\tError\tStdDev\tMedianEnumHasFlag\t0.0056 ns\t0.0083 ns\t0.0074 ns\t0.0030 ns CodeGenHasFlag\t0.0101 ns\t0.0062 ns\t0.0058 ns\t0.0083 ns EnumsNetHasFlag\t0.6253 ns\t0.0238 ns\t0.0211 ns\t0.6192 ns EnumIsDefined\t42.6278 ns\t0.4633 ns\t0.4334 ns\t42.5181 ns CodeGenIsDefined\t0.0045 ns\t0.0066 ns\t0.0058 ns\t0.0013 ns EnumsNetIsDefined\t0.4842 ns\t0.0101 ns\t0.0085 ns\t0.4845 ns EnumLength\t20.5705 ns\t0.3509 ns\t0.5566 ns\t20.5117 ns CodeGenLength\t0.0001 ns\t0.0004 ns\t0.0003 ns\t0.0000 ns EnumsNetLength\t5.3362 ns\t0.1085 ns\t0.0906 ns\t5.3495 ns EnumGetNames\t17.5890 ns\t0.2905 ns\t0.2717 ns\t17.6505 ns CodeGenGetNames\t1.5764 ns\t0.0476 ns\t0.0446 ns\t1.5843 ns EnumsNetGetNames\t1.6052 ns\t0.0323 ns\t0.0286 ns\t1.5994 ns EnumToString\t15.3389 ns\t0.1815 ns\t0.1698 ns\t15.3113 ns CodeGenToString\t0.8379 ns\t0.0380 ns\t0.0337 ns\t0.8267 ns EnumsNetToString\t21.3269 ns\t0.0836 ns\t0.0653 ns\t21.3056 ns ReflectionGetDisplayName\t1,008.3327 ns\t6.6111 ns\t5.8606 ns\t1,007.1464 ns CodeGenGetDisplayName\t3.2780 ns\t0.1182 ns\t0.1495 ns\t3.2501 ns EnumsNetGetDisplayName\t9.3953 ns\t0.1237 ns\t0.0966 ns\t9.4036 ns EnumTryParse\t31.4662 ns\t0.4013 ns\t0.3557 ns\t31.3008 ns CodeGenTryParse\t6.4197 ns\t0.0495 ns\t0.0463 ns\t6.4246 ns EnumsNetTryParse\t41.8299 ns\t0.4277 ns\t0.4001 ns\t41.7159 ns ReflectionTryParseDisplayName\t1,763.8422 ns\t17.7619 ns\t15.7455 ns\t1,764.9430 ns CodeGenTryParseDisplayName\t3.9371 ns\t0.0177 ns\t0.0138 ns\t3.9381 ns EnumsNetTryParseDisplayName\t40.4373 ns\t0.7966 ns\t0.7061 ns\t40.6816 ns EnumGetValues\t0.0000 ns\t0.0000 ns\t0.0000 ns\t0.0000 ns CodeGenGetValues\t2.2281 ns\t0.0281 ns\t0.0263 ns\t2.2237 ns EnumsNetGetValues\t4.6160 ns\t0.0868 ns\t0.0769 ns\t4.6156 ns EnumGetValues\t254.3910 ns\t2.2232 ns\t1.8565 ns\t253.8503 ns CodeGenGetValues\t1.6647 ns\t0.0508 ns\t0.0475 ns\t1.6750 ns EnumsNetGetValues\t2.4889 ns\t0.0416 ns\t0.0389 ns\t2.4874 ns  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#about","content":" note Generating values for enums  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#example-source-csproj-source-files","content":" CSharp ProjectProgram.csCarTypes.cs This is the CSharp Project that references Genbox.FastEnum &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Genbox.FastEnum&quot; Version=&quot;1.0.0&quot;&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EnumDemo.CarTypes_EnumFormat.g.csEnumDemo.CarTypes_Enums.g.csEnumDemo.CarTypes_Extensions.g.cs // &lt;auto-generated /&gt; // Generated by Genbox.FastEnum 1.0.0.0 // Generated on: 2025-08-29 11:58:11 UTC #nullable enable using System; namespace EnumDemo; [Flags] public enum CarTypesFormat : byte { None = 0, Name = 1, Value = 2, Default = Name | Value }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#download-example-net--c","content":" tip Download Example project Genbox.FastEnum   ","version":"Next","tagName":"h3"},{"title":"Share Genbox.FastEnum​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#share-genboxfastenum","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Genbox.FastEnum  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Genbox.FastEnum by Ian Qvist","url":"/RSCG_Examples/v2/docs/Genbox.FastEnum#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"Gobie by Mike Conrad","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Gobie","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#info","content":" info Name: Gobie Package Description Author: Mike Conrad NuGet:https://www.nuget.org/packages/Gobie/ You can find more details at https://github.com/GobieGenerator/Gobie/ Source: https://github.com/GobieGenerator/Gobie/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#original-readme","content":" note Gobie Overview​ Source generation in C# is a very powerful tool, but its complexity reduces how and where it is used. This is my attempt to make source generation for low/medium complexity scenarios easily accessible. Gobie allows developers define and use custom source generation without writing any generator code themselves or learning the Roslyn APIs. This happens in two steps. Devs define what they want to generate in C#. Typically this would be text templates, along with definitions for what parameters are needed to populate the template. From step 1, Gobie creates marker attributes which can be used to tag classes, fields, ... that need code generation. Using the marker attributes, devs mark their code with the generated attributes, and provide custom arguments where needed. This step work just like consuming any other source generator. Code is generated based on the templates provided. While this is in early development I'm going to keep a dev log on my blog. Feedback &amp; Contribution​ I am very much looking for feedback at this point. I can see several possible use cases for this approach to generation and am very interested in hearing whether others are interested in this concept or not. There are quite a few remaining technical challenges and substantial development work ahead, so it would be great to learn if this is something the community would find useful. Contributors are welcome, but given the early state of this project please open an issue so we can discuss anything you are interested in working on.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#about","content":" note templating for classes , fields ...  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csClassGenAddId.cs This is the CSharp Project that references Gobie &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Gobie&quot; Version=&quot;0.5.0-alpha&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person_ClassGenAddIdAttribute.g.csPerson_ClassGenAddIdAttribute_ID.g.cs_Gobie.ClassGenAddIdAttribute.g.cs namespace GobieDemo { public partial class Person { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#download-example-net--c","content":" tip Download Example project Gobie   ","version":"Next","tagName":"h3"},{"title":"Share Gobie​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#share-gobie","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Gobie  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Gobie by Mike Conrad","url":"/RSCG_Examples/v2/docs/Gobie#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"GenPack by dimohy","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/GenPack","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#info","content":" info Name: GenPack Packet generation and serialization/deserialization library using the .NET Source Generator Author: dimohy NuGet:https://www.nuget.org/packages/GenPack/ You can find more details at https://github.com/dimohy/GenPack Source: https://github.com/dimohy/GenPack  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#original-readme","content":" note GenPack GenPack is a library that uses the .NET source generator to automatically generate packets as classes once you define a schema for the packets. It's easy to use and the results are useful. GenPack also works well with Native AOT. You can take advantage of the benefits of Native AOT. Simple to use​ [GenPackable] public partial record PeoplePacket { public readonly static PacketSchema Schema = PacketSchemaBuilder.Create() .@short(&quot;Age&quot;, &quot;Age description&quot;) .@string(&quot;Name&quot;, &quot;Name description&quot;) .Build(); } The following code is automatically generated by the schema information. public partial record PeoplePacket : GenPack.IGenPackable { /// &lt;summary&gt; /// Age description /// &lt;/summary&gt; public short Age { get; set; } /// &lt;summary&gt; /// Name description /// &lt;/summary&gt; public string Name { get; set; } = string.Empty; public byte[] ToPacket() { using var ms = new System.IO.MemoryStream(); ToPacket(ms); return ms.ToArray(); } public void ToPacket(System.IO.Stream stream) { System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream); writer.Write(Age); writer.Write(Name); } public static PeoplePacket FromPacket(byte[] data) { using var ms = new System.IO.MemoryStream(data); return FromPacket(ms); } public static PeoplePacket FromPacket(System.IO.Stream stream) { PeoplePacket result = new PeoplePacket(); System.IO.BinaryReader reader = new System.IO.BinaryReader(stream); int size = 0; byte[] buffer = null; result.Age = reader.ReadInt16(); result.Name = reader.ReadString(); return result; } } It's simple to use. You can binary serialize with ToPacket() and deserialize with FromPacket(). var p = new PeoplePacket() { Age = 10, Name = &quot;John&quot; }; var data = p.ToPacket(); var newP = PeoplePacket.FromPacket(data); Console.WriteLine(newP); PeoplePacket { Age = 10, Name = John } How to create a packet schema​ Decorate the attribute of class or record with GenPackable. At this point, the target must be given partial. GenPack's packet schema is represented by creating a PacketSchema using the PacketSchemaBuilder. [GenPackable] public partial record PeoplePacket { public readonly static PacketSchema Schema = PacketSchemaBuilder.Create() .@short(&quot;Age&quot;, &quot;Age description&quot;) .@string(&quot;Name&quot;, &quot;Name description&quot;) .Build(); } The format beginning with @ means the schema property to be created. For example, @short(&quot;Age&quot;, &quot;Age description&quot;) gives the Age property the type short and the description Age description. This translates to the following, /// &lt;summary&gt; /// Age description /// &lt;/summary&gt; public short Age { get; set; } You can then use the auto-generated properties. var p = new PeoplePacket() p.Age = 32; Schema Properties​ Property\tDescription\tBits\tArguments@byte\tbyte\t8\tproperty name, description @sbyte\tsigned byte\t8\tproperty name, description @short\tshort int\t16\tproperty name, description @ushort\tunsigned short int\t16\tproperty name, description @int\tint\t32\tproperty name, description @uint\tunsigned int\t32\tproperty name, description @long\tlong int\t64\tproperty name, description @ulong\tunsigned long int\t64\tproperty name, description @float\tsingle float\t32\tproperty name, description @double\tdouble float\t64\tproperty name, description @string\tstring\tN\tproperty name, description @object&lt;type&gt;\tgenpackable object\tN\tproperty name, description @list&lt;type&gt;\tvariable list\tN\tproperty name, description @dict&lt;type&gt;\tvariable dictionary\tN\tproperty name, description @array&lt;type&gt;\tfixed array\tN\tproperty name, size, description Tasks​ Support for Endian, string Encoding. Support for checksums. Support 8-bit, 16-bit, 32-bit, 64-bit, or variable 7-bit sizes for @list and @dict. Add @ver property to allow revision control of packets. Automatically select and deserialize target structures based on packet command(identification code). Generate JSON and gRPC schema with PacketSchema. Process device packets with uncomplicated packet structures. Process structures with complex packets, such as PLCs. Process packets that require speed, such as MemoryPack. Icon creator: Freepik - Flaticon  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#about","content":" note Generating Binary Serialization and properties for class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references GenPack &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;GenPack&quot; Version=&quot; 0.9.0-preview1&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonSchema.g.cs #pragma warning disable CS0219 namespace SerializerDemo { public partial record Person : GenPack.IGenPackable { /// &lt;summary&gt; /// Age description /// &lt;/summary&gt; public short Id { get; set; } /// &lt;summary&gt; /// Name description /// &lt;/summary&gt; public string Name { get; set; } = string.Empty; public byte[] ToPacket() { using var ms = new System.IO.MemoryStream(); ToPacket(ms); return ms.ToArray(); } public void ToPacket(System.IO.Stream stream) { System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream); writer.Write(Id); writer.Write(Name); } public static SerializerDemo.Person FromPacket(byte[] data) { using var ms = new System.IO.MemoryStream(data); return FromPacket(ms); } public static SerializerDemo.Person FromPacket(System.IO.Stream stream) { SerializerDemo.Person result = new SerializerDemo.Person(); System.IO.BinaryReader reader = new System.IO.BinaryReader(stream); int size = 0; byte[] buffer = null; result.Id = reader.ReadInt16(); result.Name = reader.ReadString(); return result; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#download-example-net--c","content":" tip Download Example project GenPack   ","version":"Next","tagName":"h3"},{"title":"Share GenPack​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#share-genpack","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/GenPack  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Serializer\" has the following generators:​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#category-serializer-has-the-following-generators","content":" 1 GenPack  2 jsonConverterSourceGenerator  3 JsonPolymorphicGenerator  4 ProtobufSourceGenerator  5 StackXML  6 System.Text.Json  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"GenPack by dimohy","url":"/RSCG_Examples/v2/docs/GenPack#see-category","content":" Serializer ","version":"Next","tagName":"h3"},{"title":"Good Practices","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/GoodPractices","content":"","keywords":"","version":"Next"},{"title":"Content​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#content","content":" I am trying here to add good practices , as I see from the community and from my experience. The examples are from the https://github.com/ignatandrei/RSCG_WaitAndOptions project  ","version":"Next","tagName":"h2"},{"title":"If you are using a Roslyn Source Code Generator​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#if-you-are-using-a-roslyn-source-code-generator","content":" ","version":"Next","tagName":"h2"},{"title":"See files generated​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#see-files-generated","content":" To see the files generated , add the following to the csproj file  &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt;   Then go to the obj/GX folder and inspect the files generated  Example - click to expand If you have downloaded https://github.com/ignatandrei/RSCG_WaitAndOptions , see src\\Console_Wait\\Console_Wait.csproj file also, after compiling, you can see the files generated in the obj/GX folder from the src\\Console_Wait folder  ","version":"Next","tagName":"h3"},{"title":"See if implements IIncrementalGenerator​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#see-if-implements-iincrementalgenerator","content":" In simple terms, works better and faster with VS if RSCG implements IIncrementalGenerator instead of ISourceGenerator  The old way to create a RSCG was with ISourceGenerator interface. The new way is with IIncrementalGenerator interface.  The difference is that the IIncrementalGenerator interface has a method called &quot;Initialize&quot; that is called only once per modification of the code - it is not called if the code is not modified.  Also the source generators have been deprecated in favor of the new incremental generators.  See https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md  ","version":"Next","tagName":"h3"},{"title":"If you are creating a Roslyn Source Code Generator project​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#if-you-are-creating-a-roslyn-source-code-generator-project","content":" ","version":"Next","tagName":"h2"},{"title":"It is a nuget package​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#it-is-a-nuget-package","content":" Follow best practices for NuGet packages. See https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices  ","version":"Next","tagName":"h3"},{"title":"Read the documentation​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#read-the-documentation","content":" The documentation is at https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.cookbook.md  ","version":"Next","tagName":"h3"},{"title":"For easy debugging, add IsRoslynComponent​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#for-easy-debugging-add-isroslyncomponent","content":" You can debug easy the component if you add the following code to the Roslyn csproj file  &lt;PropertyGroup&gt; &lt;IsRoslynComponent&gt;true&lt;/IsRoslynComponent&gt; &lt;/PropertyGroup&gt;   Then add a simple console ( or any other project) and reference the Roslyn project. ( Pay attention to ReferenceOutputAssembly property ,could be false or true)  &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\RSCG_Wait\\RSCG_Wait.csproj&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt;   Then in the Roslyn project you can add a breakpoint and debug the code .  Example - click to expand If you have downloaded https://github.com/ignatandrei/RSCG_WaitAndOptions , see src\\RSCG_Wait\\RSCG_Wait.csproj file  ","version":"Next","tagName":"h3"},{"title":"For continuous debugging​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#for-continuous-debugging","content":" If you want continuous debugging, a la dotnet watch run , you should delete the bin and obj files of the target project and run dotnet build again  Details Example - click to expandThis is the powershell that I use for this with the name rscg_build.ps1 . I run it in the src\\Console_Wait folder from https://github.com/ignatandrei/RSCG_WaitAndOptions , i.e in the target project folder. while($true) { cls Write-Host &quot;delete obj and bin&quot; gci obj -recurse | foreach{ri $_.FullName -recurse -force } gci bin -recurse | foreach{ri $_.FullName -recurse -force } dotnet clean dotnet restore dotnet build /p:EmitCompilerGeneratedFiles=true --disable-build-servers --force dotnet run Read-Host -Prompt &quot;Press Enter to continue&quot; }   ","version":"Next","tagName":"h3"},{"title":"Aim for ReferenceOutputAssembly=\"false\"​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#aim-for-referenceoutputassemblyfalse","content":" Generally speaking , the work of a Roslyn generator is to generate code. So, you do not need to reference the assembly generated when publishing the build.  So, you should aim for ReferenceOutputAssembly=&quot;false&quot; in the csproj file that reference the Roslyn generator.  Example - click to expand  ","version":"Next","tagName":"h3"},{"title":"Do not use all classes​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#do-not-use-all-classes","content":" Add an attribute to be used on the classes that you want to add functionality to.  For example, in the project  public void Initialize(IncrementalGeneratorInitializationContext context) { var classToImplement = context.SyntaxProvider .ForAttributeWithMetadataName(&quot;RSCG_IFormattableCommon.AddIFormattableAttribute&quot;, CouldBeClass, GetClassInfo) .Collect(); ; //more code   I do prefer putting this attribute in a separate nuget package and reference it from the main program.  ","version":"Next","tagName":"h3"},{"title":"General attributes / code​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#general-attributes--code","content":" Problem - make internal or have another assembly referenced ( or the opposite)https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/  ","version":"Next","tagName":"h3"},{"title":"Add reference to another package when need just for compilation​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#add-reference-to-another-package-when-need-just-for-compilation","content":" See the documentation at https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.cookbook.md#use-functionality-from-nuget-packages  ","version":"Next","tagName":"h3"},{"title":"For files generated​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#for-files-generated","content":" ","version":"Next","tagName":"h2"},{"title":"Add .g.cs extension​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#add-gcs-extension","content":" Add a .g.cs generated suffix so some tools consider the file to be generated  Example - click to expand The following code is from the project https://github.com/ignatandrei/RSCG_WaitAndOptions private void GenerateData(SourceProductionContext context /*other arguments*/) { context.AddSource(&quot;WaitGeneratorStart.g&quot;, $$&quot;&quot;&quot; //generated code here &quot;&quot;&quot;); }   ","version":"Next","tagName":"h3"},{"title":"Add auto-generated comment​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#add-auto-generated-comment","content":" As a header of the file generated, add the following comment  //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // Runtime Version: ... // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------   Details Example - click to expandIn the project https://github.com/ignatandrei/RSCG_WaitAndOptions , this the header static string Header() { var version = ThisAssembly.Info.Version; var name = ThisAssembly.Info.Title; var header = $$&quot;&quot;&quot; //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool {{name}}. // Runtime Version: {{version}} // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ &quot;&quot;&quot;; return header; }   ","version":"Next","tagName":"h3"},{"title":"Add a version to the files generated​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#add-a-version-to-the-files-generated","content":" [global::System.CodeDom.Compiler.GeneratedCode(&quot;GeneratorName&quot;, &quot;1.0.0.0&quot;)]   You could use the version from the generator in order to know what version of the generator was used to generate the code.  Example - click to expand You could use AssemblyInfo , as I have done myself into the project https://github.com/ignatandrei/RSCG_WaitAndOptions In the csproj file , add the following &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ThisAssembly.AssemblyInfo&quot; Version=&quot;1.4.3&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; And use when generating the code var version=ThisAssembly.Info.Version; var name = ThisAssembly.Info.Title; var data = $$&quot;&quot;&quot; namespace RSCG_Wait; [global::System.CodeDom.Compiler.GeneratedCode(&quot;{{name}}&quot;, &quot;{{version}}&quot;)] public partial class OptionsFromBuild{ } &quot;&quot;&quot;;   ","version":"Next","tagName":"h3"},{"title":"Make the full path of the file generated shorter​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#make-the-full-path-of-the-file-generated-shorter","content":" Because of the 260 characters limit for the path, you should the path of the files generated shorter. See more athttps://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell  Example - click to expand The files generated for the project src\\Console_Wait\\Console_Wait.csproj are in the folder obj\\GX\\RSCG_Wait\\RSCG_Wait.WaitGenerator i.e obj\\GX\\Name of the Nuget\\Name of the class name that implements IIncrementalGenerator  ","version":"Next","tagName":"h3"},{"title":"mark the code as non - code coverage​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#mark-the-code-as-non---code-coverage","content":" Add the following attribute to the generated code  [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]   Example - click to expand In the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj var data = $$&quot;&quot;&quot; {{Header()}} namespace RSCG_Wait; [global::System.CodeDom.Compiler.GeneratedCode(&quot;{{name}}&quot;, &quot;{{version}}&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] partial class OptionsFromBuild { &quot;&quot;&quot;;   ","version":"Next","tagName":"h3"},{"title":"Add comments for method / classes / properties generated​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#add-comments-for-method--classes----properties-generated","content":" Add comments to the generated code in order to help the user understand the code generated  Or if not , add  //pragma warning disable CS1591   to the generated code  Example - click to expand In the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj context.AddSource(&quot;WaitGeneratorStart.g&quot;, $$&quot;&quot;&quot; {{Header()}} namespace RSCG_Wait; //pragma warning disable CS1591 [global::System.CodeDom.Compiler.GeneratedCode(&quot;{{name}}&quot;, &quot;{{version}}&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] partial class MyGeneratedCode   ","version":"Next","tagName":"h3"},{"title":"If you're fond of nullable reference types​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#if-youre-fond-of-nullable-reference-types","content":" Add  #nullable enable   at the start of the file and  #nullable restore   at the end of the file  Details Example - click to expandIn the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj context.AddSource(&quot;WaitGeneratorStart.g&quot;, $$&quot;&quot;&quot; {{Header()}} #nullable enable namespace RSCG_Wait; //pragma warning disable CS1591 [global::System.CodeDom.Compiler.GeneratedCode(&quot;{{name}}&quot;, &quot;{{version}}&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] partial class MyGeneratedCode { public static string DateStart =&gt; &quot;{{DateTime.Now.ToString()}}&quot;; public static int SecondsToWait={{secondsToWait}}; } #nullable restore &quot;&quot;&quot;);   ","version":"Next","tagName":"h3"},{"title":"For deploy​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#for-deploy","content":" ","version":"Next","tagName":"h2"},{"title":"NuGet package​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#nuget-package","content":" The best way to deploy the Roslyn generator is to use a NuGet package.  So you should follow documentation at https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices  Read also https://www.meziantou.net/ensuring-best-practices-for-nuget-packages.htm  Details Example - click to expandIn the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj &lt;PropertyGroup&gt; &lt;EnforceExtendedAnalyzerRules&gt;true&lt;/EnforceExtendedAnalyzerRules&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Include=&quot;../../readme.md&quot; Pack=&quot;true&quot; PackagePath=&quot;\\&quot; /&gt; &lt;None Include=&quot;../../docs/imgs/nuget.png&quot; Pack=&quot;true&quot; PackagePath=&quot;\\&quot; /&gt; &lt;None Include=&quot;$(OutputPath)\\$(AssemblyName).dll&quot; Pack=&quot;true&quot; PackagePath=&quot;analyzers/dotnet/cs&quot; Visible=&quot;false&quot; /&gt; &lt;None Include=&quot;../../readme.txt&quot; pack=&quot;true&quot; PackagePath=&quot;.&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;Version&gt;2024.2.23.1940&lt;/Version&gt; &lt;Authors&gt;Andrei Ignat&lt;/Authors&gt; &lt;Description&gt;This package wait for a time and put all global options into a cs file&lt;/Description&gt; &lt;Title&gt;RSCG Wait and Options&lt;/Title&gt; &lt;PackageId&gt;RSCG_WaitAndOptions&lt;/PackageId&gt; &lt;PackageTags&gt;C#;.NET;Roslyn;RSCG;Roslyn Source Code Generator;&lt;/PackageTags&gt; &lt;PackageReadmeFile&gt;readme.md&lt;/PackageReadmeFile&gt; &lt;PackageIcon&gt;nuget.png&lt;/PackageIcon&gt; &lt;RepositoryUrl&gt;https://github.com/ignatandrei/RSCG_WaitAndOptions&lt;/RepositoryUrl&gt; &lt;PackageProjectUrl&gt;https://github.com/ignatandrei/RSCG_WaitAndOptions&lt;/PackageProjectUrl&gt; &lt;RepositoryType&gt;GIT&lt;/RepositoryType&gt; &lt;Copyright&gt;MIT&lt;/Copyright&gt; &lt;PackageLicenseExpression&gt;MIT&lt;/PackageLicenseExpression&gt; &lt;IncludeSymbols&gt;true&lt;/IncludeSymbols&gt; &lt;PublishRepositoryUrl&gt;true&lt;/PublishRepositoryUrl&gt; &lt;EmbedUntrackedSources&gt;true&lt;/EmbedUntrackedSources&gt; &lt;Deterministic&gt;true&lt;/Deterministic&gt; &lt;DebugType&gt;embedded&lt;/DebugType&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup Condition=&quot;'$(GITHUB_ACTIONS)' == 'true'&quot;&gt; &lt;ContinuousIntegrationBuild&gt;true&lt;/ContinuousIntegrationBuild&gt; &lt;/PropertyGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"Ensure in nuget​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#ensure-in-nuget","content":" The generator should be packed in analyzer folder in nuget package    Details Example - click to expandIn the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj &lt;ItemGroup&gt; &lt;None Include=&quot;$(OutputPath)\\$(AssemblyName).dll&quot; Pack=&quot;true&quot; PackagePath=&quot;analyzers/dotnet/cs&quot; Visible=&quot;false&quot; /&gt; &lt;/ItemGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"Performance​","type":1,"pageTitle":"Good Practices","url":"/RSCG_Examples/v2/docs/GoodPractices#performance","content":" For performance, see the following links:  https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/  https://www.thinktecture.com/net/roslyn-source-generators-high-level-api-forattributewithmetadataname/  https://papafe.dev/posts/source-generators-tips/ ","version":"Next","tagName":"h2"},{"title":"GoLive.Generator.BlazorInterop by surgicalcoder","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#info","content":" info Name: GoLive.Generator.BlazorInterop Generates strongly typed methods that interop into Javascript. Author: surgicalcoder NuGet:https://www.nuget.org/packages/GoLive.Generator.BlazorInterop/ You can find more details at https://github.com/surgicalcoder/BlazorInteropGenerator Source: https://github.com/surgicalcoder/BlazorInteropGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#original-readme","content":" note BlazorInteropGenerator Generates Blazor -&gt; Javascript strongly typed interop methods, by parsing the Javascript it self and generating extension methods for IJSRuntime. Usage​ Firstly, add the project from Nuget - GoLive.Generator.BlazorInterop, then add an AdditionalFile in your .csproj named &quot;BlazorInterop.json&quot;, like so: &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;BlazorInterop.json&quot; /&gt; &lt;/ItemGroup&gt; Once that's done, add the settings file and change as required: { &quot;Files&quot;: [ { &quot;Output&quot;: &quot;JSInterop.cs&quot;, &quot;Source&quot;: &quot;wwwroot\\\\blazorinterop.js&quot;, &quot;Namespace&quot;: &quot;GoLive.Generator.BlazorInterop.Playground.Client&quot;, &quot;ObjectToInterop&quot;: &quot;window.blazorInterop&quot;, &quot;Init&quot;: [&quot;window={}&quot;] } ], &quot;InvokeVoidString&quot;: &quot;await JSRuntime.InvokeVoidAsync(\\&quot;{0}\\&quot;, {1});&quot;, &quot;InvokeString&quot;: &quot;return await JSRuntime.InvokeAsync of T (\\&quot;{0}\\&quot;,{1});&quot; } Description of Each Option​ Files: An array of file objects specifying details of the files involved in the interop process. Output: The name of the output C# file to be generated.Source: The path to the source JavaScript file used for the interop.Namespace: The namespace used in the generated C# file.ObjectToInterop: The JavaScript object used for the interop.Init: An array of initialization scripts executed before the interop. In this example above, we are interop'ing to window.blazorInterop, and window doesn't exist, so we have to create it. InvokeVoidString: A template string for invoking a JavaScript function that does not return a value using JSRuntime.InvokeVoidAsync. Placeholders 0 and 1 are replaced with the function name and arguments, respectively.InvokeString: A template string for invoking a JavaScript function that returns a value using JSRuntime.InvokeAsync of T . Placeholders 0 and 1 are replaced with the function name and arguments, respectively.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#about","content":" note Generating interop from C# to javascript for Blazor  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#example-source-csproj-source-files","content":" CSharp ProjectBlazorInterop.jsonblazorinterop.jsHome.razorindex.html This is the CSharp Project that references GoLive.Generator.BlazorInterop &lt;Project Sdk=&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;GoLive.Generator.BlazorInterop&quot; Version=&quot;2.0.7&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly&quot; Version=&quot;9.0.0-rc.2.24474.3&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot; Version=&quot;9.0.0-rc.2.24474.3&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;BlazorInterop.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Generated.JSInterop.cs using System.Threading.Tasks; using Microsoft.JSInterop; namespace GoLive.Generator.BlazorInterop.Playground.Client { public static class JSInterop { public static string _window_blazorInterop_showModal =&gt; &quot;window.blazorInterop.showModal&quot;; public static async Task showModalVoidAsync(this IJSRuntime JSRuntime, object @dialogId) { await JSRuntime.InvokeVoidAsync(&quot;window.blazorInterop.showModal&quot;, @dialogId); } public static async Task&lt;T&gt; showModalAsync&lt;T&gt;(this IJSRuntime JSRuntime, object @dialogId) { return await JSRuntime.InvokeAsync&lt;T&gt;(&quot;window.blazorInterop.showModal&quot;, @dialogId); } public static string _window_blazorInterop_setPageTitle =&gt; &quot;window.blazorInterop.setPageTitle&quot;; public static async Task setPageTitleVoidAsync(this IJSRuntime JSRuntime, object @title) { await JSRuntime.InvokeVoidAsync(&quot;window.blazorInterop.setPageTitle&quot;, @title); } public static async Task&lt;T&gt; setPageTitleAsync&lt;T&gt;(this IJSRuntime JSRuntime, object @title) { return await JSRuntime.InvokeAsync&lt;T&gt;(&quot;window.blazorInterop.setPageTitle&quot;, @title); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#download-example-net--c","content":" tip Download Example project GoLive.Generator.BlazorInterop   ","version":"Next","tagName":"h3"},{"title":"Share GoLive.Generator.BlazorInterop​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#share-golivegeneratorblazorinterop","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Blazor\" has the following generators:​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#category-blazor-has-the-following-generators","content":" 1 BadIdeas.Icons.FontAwesome  2 Blazor.TSRuntime  3 Blazorators  4 GoLive.Generator.BlazorInterop  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"GoLive.Generator.BlazorInterop by surgicalcoder","url":"/RSCG_Examples/v2/docs/GoLive.Generator.BlazorInterop#see-category","content":" Blazor ","version":"Next","tagName":"h3"},{"title":"HangfireRecurringJob by Ieuan Walker","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#info","content":" info Name: HangfireRecurringJob This is a package that automatically generates the hangfire recurring jobs AddOrUpdate code, using source generators. Author: Ieuan Walker NuGet:https://www.nuget.org/packages/IeuanWalker.Hangfire.RecurringJob/ You can find more details at https://github.com/IeuanWalker/Hangfire.RecurringJob Source: https://github.com/IeuanWalker/Hangfire.RecurringJob  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#original-readme","content":" note Hangfire.RecurringJob Automatically generates the recurring job registration code using source generators How to use it?​ Install the NuGet package into your project. Install-Package IeuanWalker.Hangfire.RecurringJob Add the RecurringJob attribute to a class, and create an Execute() method. [RecurringJob] public class RecurringJob1 { public Task Execute() { throw new NotImplementedException(); } } [RecurringJob(&quot;* * * *&quot;)] public class RecurringJob2 { public void Execute() { throw new NotImplementedException(); } } [RecurringJob(&quot;* * * *&quot;, &quot;Priority&quot;)] public class RecurringJob3 { public void Execute() { throw new NotImplementedException(); } } [RecurringJob] [RecurringJob(&quot;*/5 * * * *&quot;, &quot;GMT&quot;, &quot;Priority&quot;, &quot;DataRetention&quot;)] public class RecurringJob4 { public void Execute() { throw new NotImplementedException(); } } Register the recurring jobs Once a RecurringJob attribute has been added to a class in your project an extension method for IApplicationBuilder will automatically be created. The extension method name convention is AddRecurringJobsFrom + your assembly name. app.AddRecurringJobsFromExampleProject(); Example​ Here is an example of what it looks like in use - Left is the example code, and right is the generated code  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#about","content":" note Generating recurring jobs for Hangfire from class attribute  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#example-source-csproj-source-files","content":" CSharp ProjectMyNewJob.csProgram.cs This is the CSharp Project that references HangfireRecurringJob &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Hangfire.AspNetCore&quot; Version=&quot;1.8.9&quot; /&gt; &lt;PackageReference Include=&quot;Hangfire.Core&quot; Version=&quot;1.8.9&quot; /&gt; &lt;PackageReference Include=&quot;Hangfire.InMemory&quot; Version=&quot;0.7.0&quot; /&gt; &lt;!--&lt;PackageReference Include=&quot;Hangfire.MemoryStorage&quot; Version=&quot;1.8.0&quot; /&gt;--&gt; &lt;PackageReference Include=&quot;Hangfire.SqlServer&quot; Version=&quot;1.8.9&quot; /&gt; &lt;PackageReference Include=&quot;IeuanWalker.Hangfire.RecurringJob&quot; Version=&quot;1.0.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.1&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RecurringJobRegistrationExtensions.g.cs namespace HangFireRec; // &lt;auto-generated/&gt; using Hangfire; using Microsoft.AspNetCore.Builder; public static class RecurringJobRegistrationExtensions { public static IApplicationBuilder AddRecurringJobsFromHangFireRec(this IApplicationBuilder app) { RecurringJob.AddOrUpdate&lt;HangFireRec.MyNewJob&gt;(&quot;MyNewJob&quot;, &quot;default&quot;, x =&gt; x.Execute(), &quot;*/1 * * * *&quot;, new RecurringJobOptions { TimeZone = TimeZoneInfo.FindSystemTimeZoneById(&quot;UTC&quot;) }); return app; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#download-example-net--c","content":" tip Download Example project HangfireRecurringJob   ","version":"Next","tagName":"h3"},{"title":"Share HangfireRecurringJob​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#share-hangfirerecurringjob","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/HangfireRecurringJob  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Hangfire\" has the following generators:​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#category-hangfire-has-the-following-generators","content":" 1 HangfireRecurringJob  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"HangfireRecurringJob by Ieuan Walker","url":"/RSCG_Examples/v2/docs/HangfireRecurringJob#see-category","content":" Hangfire ","version":"Next","tagName":"h3"},{"title":"Gedaq by Vyacheslav Brevnov","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Gedaq","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#info","content":" info Name: Gedaq ORM Gedaq is roslyn generator of methods for obtaining data from databases. Author: Vyacheslav Brevnov NuGet:https://www.nuget.org/packages/Gedaq/ You can find more details at https://github.com/SoftStoneDevelop/Gedaq Source: https://github.com/SoftStoneDevelop/Gedaq  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#original-readme","content":" note Gedaq Generator for obtaining and mapping data from the database. Generates methods (synchronous and/or asynchronous): Creating a Command for a query Method of setting parameters in a Command Command execution, with data mapping Creating a QueryBatch Command Setting parameters in a QueryBatch Command Get data from a batch Command Receiving data from a batch of queries, with data mapping Getting data based on a query, with data mapping There are versions for all of these methods (if possible): QueryNonQueryЕecuteScalar (return type is determined automatically at the generation stage) It also generates methods specific to each provider, such as BinaryImport and BinaryExport in PostgreSQL. Supported databases(see examples and documentation in the relevant DB package): NpgsqlDbConnectionSqlClientMySqlConnectorOracle.ManagedDataAccess.Core Usage: For example, we have a Person class: public class Person { public int Id { get; set; } public string FirstName { get; set; } public string MiddleName { get; set; } public string LastName { get; set; } public Identification Identification { get; set; } } public class Identification { public int Id { get; set; } public string TypeName { get; set; } } We just mark anywhere in the code with a special attribute (class, structure, method) that tells the analyzer to generate the code. Let's mark the Person class itself with an attribute: [Query( @&quot; SELECT p.id, p.firstname, ~StartInner::Identification:id~ i.id, i.typename, ~EndInner::Identification~ p.middlename, p.lastname FROM person p LEFT JOIN identification i ON i.id = p.identification_id WHERE p.id &gt; $1 &quot;, &quot;GetAllPerson&quot;, typeof(Person), MethodType.Sync | MethodType.Async ), Parametr(parametrType: typeof(int), position: 1) ] public class Person //... Now in the code we can call the ready method: var persons = connection .GetAllPerson(49999) .ToList(); var personsAsync = await connection .GetAllPersonAsync(49999) .ToListAsync(); Comparison with Dapper and DapperAOT of getting 50000 Person in a loop(Size is number of loop iterations) from the database: .NET 7 Benchmark:​ Method\tSize\tMean\tRatio\tAllocated\tAlloc RatioGedaq.Npgsql\t10\t445.5 ms\t1.00\t132.09 MB\t1.00 Dapper\t10\t749.2 ms\t1.68\t150.41 MB\t1.14 DapperAOT\t10\t777.5 ms\t1.75\t150.4 MB\t1.14 Gedaq.Npgsql\t20\t901.9 ms\t1.00\t264.17 MB\t1.00 Dapper\t20\t1,510.0 ms\t1.68\t300.81 MB\t1.14 DapperAOT\t20\t1,505.3 ms\t1.67\t300.81 MB\t1.14 Gedaq.Npgsql\t30\t1,366.2 ms\t1.00\t396.28 MB\t1.00 Dapper\t30\t2,276.7 ms\t1.67\t451.22 MB\t1.14 DapperAOT\t30\t2,279.6 ms\t1.67\t451.22 MB\t1.14 But with Gedaq, we can prepare the command in advance. var personsCmd = connection.CreateGetAllPersonCommand(prepare: true); personsCmd.SetGetAllPersonParametrs(49999); var persons = personsCmd.ExecuteGetAllPersonCommand().ToList(); //or var personsCmd = await connection.CreateGetAllPersonCommandAsync(prepare: true); personsCmd.SetGetAllPersonParametrs(49999); var persons = await personsCmd.ExecuteGetAllPersonCommandAsync().ToListAsync();   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#about","content":" note Generating code from attribute query  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#example-source-csproj-source-files","content":" CSharp ProjectPerson.csAddress.csExampleRun.csPersonRepository.csExampleRun.csPersonRepository.csExampleRun.csPersonRepository.cs This is the CSharp Project that references Gedaq &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Gedaq&quot; Version=&quot;1.5.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;True&quot; /&gt; &lt;PackageReference Include=&quot;Gedaq.Npgsql&quot; Version=&quot;1.2.6&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonRepository2BatchPersonsNpgsql.g.csPersonRepository3AddPersonsICommandPersonRepository.g.csPersonRepository3AddPersonsNpgsql.g.csPersonRepository3GetPersonsIQueryPersonRepository.g.csPersonRepository3GetPersonsNpgsql.g.csPersonRepositoryGetPersonNpgsql.g.cs using Npgsql; using System; using System.Data; using System.Collections; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Runtime.CompilerServices; namespace GedaqDemoConsole.Example2 { public partial class PersonRepository2 { public IEnumerable&lt;IEnumerable&lt;GedaqDemoConsole.Model.Person&gt;&gt; BatchPersons( Npgsql.NpgsqlConnection connection, System.Int32 person_idBatch1, System.Int32 person_idBatch2, int? timeout = null ) { bool needClose = connection.State == ConnectionState.Closed; if(needClose) { connection.Open(); } NpgsqlBatch batch = null; NpgsqlDataReader reader = null; try { batch = CreateBatchPersonsBatch(connection , false) ; SetBatchPersonsParametrs( batch, person_idBatch1, person_idBatch2, timeout ); reader = batch.ExecuteReader(); yield return BatchItem0(reader); reader.NextResult(); yield return BatchItem1(reader); reader.NextResult(); reader.Dispose(); reader = null; } finally { if (reader != null) { if (!reader.IsClosed) { try { batch.Cancel(); } catch { /* ignore */ } } reader.Dispose(); } if (needClose) { connection.Close(); } if(batch != null) { batch.BatchCommands.Clear(); batch.Dispose(); } } } public async IAsyncEnumerable&lt;IAsyncEnumerable&lt;GedaqDemoConsole.Model.Person&gt;&gt; BatchPersonsAsync( Npgsql.NpgsqlConnection connection, System.Int32 person_idBatch1, System.Int32 person_idBatch2, int? timeout = null, [EnumeratorCancellation] CancellationToken cancellationToken = default ) { bool needClose = connection.State == ConnectionState.Closed; if(needClose) { await connection.OpenAsync(cancellationToken).ConfigureAwait(false); } NpgsqlBatch batch = null; NpgsqlDataReader reader = null; try { batch = await CreateBatchPersonsBatchAsync(connection , false, cancellationToken) ; SetBatchPersonsParametrs( batch, person_idBatch1, person_idBatch2, timeout ); reader = await batch.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false); yield return BatchItem0Async(reader, cancellationToken); await reader.NextResultAsync(cancellationToken).ConfigureAwait(false); yield return BatchItem1Async(reader, cancellationToken); await reader.NextResultAsync(cancellationToken).ConfigureAwait(false); await reader.DisposeAsync().ConfigureAwait(false); reader = null; } finally { if (reader != null) { if (!reader.IsClosed) { try { batch.Cancel(); } catch { /* ignore */ } } await reader.DisposeAsync().ConfigureAwait(false); } if (needClose) { await connection.CloseAsync().ConfigureAwait(false); } if(batch != null) { batch.BatchCommands.Clear(); await batch.DisposeAsync().ConfigureAwait(false); } } } [MethodImpl(MethodImplOptions.AggressiveInlining)] private static async IAsyncEnumerable&lt;GedaqDemoConsole.Model.Person&gt; BatchItem0Async( NpgsqlDataReader reader, [EnumeratorCancellation] CancellationToken cancellationToken = default ) { while(await reader.ReadAsync(cancellationToken).ConfigureAwait(false)) { var item = new GedaqDemoConsole.Model.Person(); if(!reader.IsDBNull(0)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.Id = reader.GetFieldValue&lt;System.Int32&gt;(0); } if(!reader.IsDBNull(1)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.FirstName = reader.GetFieldValue&lt;System.String&gt;(1); } if(!reader.IsDBNull(2)) { var item1 = new GedaqDemoConsole.Model.Address(); if(!reader.IsDBNull(2)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Id = reader.GetFieldValue&lt;System.Int32&gt;(2); } if(!reader.IsDBNull(3)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Street = reader.GetFieldValue&lt;System.String&gt;(3); } if(!reader.IsDBNull(4)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.City = reader.GetFieldValue&lt;System.String&gt;(4); } item.Address = item1; } yield return item; } } [MethodImpl(MethodImplOptions.AggressiveInlining)] private static async IAsyncEnumerable&lt;GedaqDemoConsole.Model.Person&gt; BatchItem1Async( NpgsqlDataReader reader, [EnumeratorCancellation] CancellationToken cancellationToken = default ) { while(await reader.ReadAsync(cancellationToken).ConfigureAwait(false)) { var item = new GedaqDemoConsole.Model.Person(); if(!reader.IsDBNull(0)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.Id = reader.GetFieldValue&lt;System.Int32&gt;(0); } if(!reader.IsDBNull(1)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.FirstName = reader.GetFieldValue&lt;System.String&gt;(1); } if(!reader.IsDBNull(2)) { var item1 = new GedaqDemoConsole.Model.Address(); if(!reader.IsDBNull(2)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Id = reader.GetFieldValue&lt;System.Int32&gt;(2); } if(!reader.IsDBNull(3)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Street = reader.GetFieldValue&lt;System.String&gt;(3); } if(!reader.IsDBNull(4)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.City = reader.GetFieldValue&lt;System.String&gt;(4); } item.Address = item1; } yield return item; } } [MethodImpl(MethodImplOptions.AggressiveInlining)] private static IEnumerable&lt;GedaqDemoConsole.Model.Person&gt; BatchItem0(NpgsqlDataReader reader) { while(reader.Read()) { var item = new GedaqDemoConsole.Model.Person(); if(!reader.IsDBNull(0)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.Id = reader.GetFieldValue&lt;System.Int32&gt;(0); } if(!reader.IsDBNull(1)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.FirstName = reader.GetFieldValue&lt;System.String&gt;(1); } if(!reader.IsDBNull(2)) { var item1 = new GedaqDemoConsole.Model.Address(); if(!reader.IsDBNull(2)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Id = reader.GetFieldValue&lt;System.Int32&gt;(2); } if(!reader.IsDBNull(3)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Street = reader.GetFieldValue&lt;System.String&gt;(3); } if(!reader.IsDBNull(4)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.City = reader.GetFieldValue&lt;System.String&gt;(4); } item.Address = item1; } yield return item; } } [MethodImpl(MethodImplOptions.AggressiveInlining)] private static IEnumerable&lt;GedaqDemoConsole.Model.Person&gt; BatchItem1(NpgsqlDataReader reader) { while(reader.Read()) { var item = new GedaqDemoConsole.Model.Person(); if(!reader.IsDBNull(0)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.Id = reader.GetFieldValue&lt;System.Int32&gt;(0); } if(!reader.IsDBNull(1)) { if(item == null) { item = new GedaqDemoConsole.Model.Person(); } item.FirstName = reader.GetFieldValue&lt;System.String&gt;(1); } if(!reader.IsDBNull(2)) { var item1 = new GedaqDemoConsole.Model.Address(); if(!reader.IsDBNull(2)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Id = reader.GetFieldValue&lt;System.Int32&gt;(2); } if(!reader.IsDBNull(3)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.Street = reader.GetFieldValue&lt;System.String&gt;(3); } if(!reader.IsDBNull(4)) { if(item1 == null) { item1 = new GedaqDemoConsole.Model.Address(); } item1.City = reader.GetFieldValue&lt;System.String&gt;(4); } item.Address = item1; } yield return item; } } public NpgsqlBatch CreateBatchPersonsBatch( Npgsql.NpgsqlConnection connection, bool prepare = false ) { var batch = connection.CreateBatch(); var command = batch.CreateBatchCommand(); command.CommandText = @&quot; SELECT p.id, p.firstname, a.id, a.street, a.city FROM person p LEFT JOIN address a ON a.id = p.address_id WHERE p.id = $1 &quot;; { { var parametr = new NpgsqlParameter&lt;System.Int32&gt;(); command.Parameters.Add(parametr); } } batch.BatchCommands.Add(command); command = batch.CreateBatchCommand(); command.CommandText = @&quot; SELECT p.id, p.firstname, a.id, a.street, a.city FROM person p LEFT JOIN address a ON a.id = p.address_id WHERE p.id = $1 &quot;; { { var parametr = new NpgsqlParameter&lt;System.Int32&gt;(); command.Parameters.Add(parametr); } } batch.BatchCommands.Add(command); if(prepare) { try { batch.Prepare(); } catch { batch.Dispose(); throw; } } return batch; } public async ValueTask&lt;NpgsqlBatch&gt; CreateBatchPersonsBatchAsync( Npgsql.NpgsqlConnection connection, bool prepare = false, CancellationToken cancellationToken = default ) { var batch = connection.CreateBatch(); var command = batch.CreateBatchCommand(); command.CommandText = @&quot; SELECT p.id, p.firstname, a.id, a.street, a.city FROM person p LEFT JOIN address a ON a.id = p.address_id WHERE p.id = $1 &quot;; { { var parametr = new NpgsqlParameter&lt;System.Int32&gt;(); command.Parameters.Add(parametr); } } batch.BatchCommands.Add(command); command = batch.CreateBatchCommand(); command.CommandText = @&quot; SELECT p.id, p.firstname, a.id, a.street, a.city FROM person p LEFT JOIN address a ON a.id = p.address_id WHERE p.id = $1 &quot;; { { var parametr = new NpgsqlParameter&lt;System.Int32&gt;(); command.Parameters.Add(parametr); } } batch.BatchCommands.Add(command); if(prepare) { try { await batch.PrepareAsync(cancellationToken).ConfigureAwait(false); } catch { await batch.DisposeAsync().ConfigureAwait(false); throw; } } return batch; } public void SetBatchPersonsParametrs( NpgsqlBatch batch, System.Int32 person_idBatch1, System.Int32 person_idBatch2, int? timeout = null ) { if(timeout.HasValue) { batch.Timeout = timeout.Value; } var batchCommand = batch.BatchCommands[0]; ((NpgsqlParameter&lt;System.Int32&gt;)batchCommand.Parameters[0]).TypedValue = person_idBatch1; batchCommand = batch.BatchCommands[1]; ((NpgsqlParameter&lt;System.Int32&gt;)batchCommand.Parameters[0]).TypedValue = person_idBatch2; } public IEnumerable&lt;IEnumerable&lt;GedaqDemoConsole.Model.Person&gt;&gt; ExecuteBatchPersonsBatch( NpgsqlBatch batch ) { NpgsqlDataReader reader = null; try { reader = batch.ExecuteReader(); yield return BatchItem0(reader); reader.NextResult(); yield return BatchItem1(reader); reader.NextResult(); reader.Dispose(); reader = null; } finally { if (reader != null) { if (!reader.IsClosed) { try { batch.Cancel(); } catch { /* ignore */ } } reader.Dispose(); } } } public async IAsyncEnumerable&lt;IAsyncEnumerable&lt;GedaqDemoConsole.Model.Person&gt;&gt; ExecuteBatchPersonsBatchAsync( NpgsqlBatch batch, [EnumeratorCancellation] CancellationToken cancellationToken = default ) { NpgsqlDataReader reader = null; try { reader = await batch.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false); yield return BatchItem0Async(reader, cancellationToken); await reader.NextResultAsync(cancellationToken).ConfigureAwait(false); yield return BatchItem1Async(reader, cancellationToken); await reader.NextResultAsync(cancellationToken).ConfigureAwait(false); await reader.DisposeAsync().ConfigureAwait(false); reader = null; } finally { if (reader != null) { if (!reader.IsClosed) { try { batch.Cancel(); } catch { /* ignore */ } } await reader.DisposeAsync().ConfigureAwait(false); } } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#download-example-net--c","content":" tip Download Example project Gedaq   ","version":"Next","tagName":"h3"},{"title":"Share Gedaq​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#share-gedaq","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Gedaq  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Database\" has the following generators:​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#category-database-has-the-following-generators","content":" 1 Breezy  2 Dapper.AOT  3 EntityLengths.Generator  4 Gedaq  5 TableStorage  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Gedaq by Vyacheslav Brevnov","url":"/RSCG_Examples/v2/docs/Gedaq#see-category","content":" Database ","version":"Next","tagName":"h3"},{"title":"Hsu.Sg.FluentMember by Net Hsu","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#info","content":" info Name: Hsu.Sg.FluentMember a fluent member source generator. Author: Net Hsu NuGet:https://www.nuget.org/packages/Hsu.Sg.FluentMember/ You can find more details at https://github.com/hsu-net/source-generators Source: https://github.com/hsu-net/source-generators  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#original-readme","content":" note Hsu.Sg .NET source generators Package Version​ Name\tSource\tStable\tPreviewHsu.Sg.Sync\tNuget Hsu.Sg.Sync\tMyGet Hsu.Sg.Proxy\tNuget Hsu.Sg.Proxy\tMyGet Hsu.Sg.FluentMember\tNuget Hsu.Sg.FluentMember\tMyGet Package Features​ Hsu.Sg.Sync​ Generate a synchronous method from an asynchronous method. Usages see README Hsu.Sg.Proxy​ Generate a proxy object from a struct or class or interface. Usages see README Hsu.Sg.FluentMember​ Generate a fluent method from a struct or class. Usages see README References​ Source Generators CookbookIncremental Generators License​ MIT  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#about","content":" note Adding builder pattern to classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Hsu.Sg.FluentMember &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Hsu.Sg.FluentMember&quot; Version=&quot;2024.101.8-rc175707&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Hsu.Sg.FluentMember.gen.cs // &lt;auto-generated/&gt; using System; namespace Hsu.Sg.FluentMember { /// &lt;summary&gt; /// The flag to generate member set method. /// &lt;/summary&gt; [AttributeUsage( AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = false, Inherited = false)] internal sealed class FluentMemberAttribute : Attribute { /// &lt;summary&gt; /// The public member are generated. /// &lt;/summary&gt; public bool Public { get; set; } = true; /// &lt;summary&gt; /// The internal member are generated. /// &lt;/summary&gt; public bool Internal { get; set; } /// &lt;summary&gt; /// The private member are generated. /// &lt;/summary&gt; public bool Private { get; set; } /// &lt;summary&gt; /// Only [FluentMemberGen] member are generated. /// &lt;/summary&gt; public bool Only { get; set; } /// &lt;summary&gt; /// The prefix of member name. /// &lt;/summary&gt; /// &lt;remarks&gt;default is `With`&lt;/remarks&gt; public string Prefix { get; set; } = string.Empty; } [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Event, AllowMultiple = false, Inherited = false)] internal sealed class FluentMemberGenAttribute : Attribute { /// &lt;summary&gt; /// Ignore member. /// &lt;/summary&gt; public bool Ignore { get; set; } /// &lt;summary&gt; /// The specific name of member. /// &lt;/summary&gt; public string Identifier { get; set; } = string.Empty; /// &lt;summary&gt; /// The prefix of member name. /// &lt;/summary&gt; /// &lt;remarks&gt;default is `With`&lt;/remarks&gt; public string Prefix { get; set; } = string.Empty; /// &lt;summary&gt; /// The modifier of member /// &lt;/summary&gt; /// &lt;remarks&gt;default is &lt;see cref=&quot;Accessibility.Inherit&quot;/&gt;&lt;/remarks&gt; public Accessibility Modifier { get; set; } = Accessibility.Inherit; } /// &lt;summary&gt; /// The accessibility for fluent member set method. /// &lt;/summary&gt; //[System.DefaultValue(Inherit)] internal enum Accessibility { /// &lt;summary&gt; /// Inherit from the member. /// &lt;/summary&gt; Inherit, /// &lt;summary&gt; /// Is public access. /// &lt;/summary&gt; Public, /// &lt;summary&gt; /// Is internal access. /// &lt;/summary&gt; Internal, /// &lt;summary&gt; /// Is protected access. /// &lt;/summary&gt; Protected, /// &lt;summary&gt; /// Is private access. /// &lt;/summary&gt; Private } /// &lt;summary&gt; /// The event assignment /// &lt;/summary&gt; //[System.DefaultValue(Add)] public enum EventAssignable { /// &lt;summary&gt; /// To add the event /// &lt;/summary&gt; Add, /// &lt;summary&gt; /// To remove the event /// &lt;/summary&gt; Remove, /// &lt;summary&gt; /// To set the event /// &lt;/summary&gt; Assign } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#download-example-net--c","content":" tip Download Example project Hsu.Sg.FluentMember   ","version":"Next","tagName":"h3"},{"title":"Share Hsu.Sg.FluentMember​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#share-hsusgfluentmember","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Builder\" has the following generators:​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#category-builder-has-the-following-generators","content":" 1 Architect.DomainModeling  2 BuilderGenerator  3 DimonSmart.BuilderGenerator  4 Fluentify  5 Hsu.Sg.FluentMember  6 ShadowWriterBuilder  7 StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Hsu.Sg.FluentMember by Net Hsu","url":"/RSCG_Examples/v2/docs/Hsu.Sg.FluentMember#see-category","content":" Builder ","version":"Next","tagName":"h3"},{"title":"IDisposableGenerator by Els_kom Official Organization","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/IDisposableGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#info","content":" info Name: IDisposableGenerator Source Generator Generating the Dispose functions in Disposables. Author: Els_kom Official Organization NuGet:https://www.nuget.org/packages/IDisposableGenerator/ You can find more details at https://github.com/Elskom/IDisposableGenerator Source: https://github.com/Elskom/IDisposableGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#original-readme","content":" note IDisposableGenerator Source Generator Generating the Dispose functions in Disposables. Code Ownership​ All code used is copyright of Elskom org, with the exception of Roslyn which is copyright of the .NET Foundation and it's contributors. The dependencies of the unit tests are copyright of their respective owners. Status​ This project is currently actively maintained whenever an issue happens (or whenever major roslyn changes happens that break it). Purpose​ This project is for easily generating the dispose functions of disposable types using attributes to control the generator on how it writes the generated code. This results in code that is more maintainable and cleaner than if you had to implement the IDisposable interface yourself. Disposable types require marking the type as partial to properly compile the generated code. Documentation​ It is currently in the works. Badges​ Package\tVersionIDisposableGenerator\t  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#about","content":" note Generating disposable  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDALDB.csConnectionDB.cs This is the CSharp Project that references IDisposableGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;IDisposableGenerator&quot; Version=&quot;1.1.1&quot; OutputItemType=&quot;Analyzer&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Disposables.g.csGeneratedAttributes.g.cs // &lt;autogenerated/&gt; namespace IDisposableGeneratorDemo; internal partial class DALDB : IDisposable { private bool isDisposed; internal bool IsOwned { get; set; } /// &lt;summary&gt; /// Cleans up the resources used by &lt;see cref=&quot;DALDB&quot;/&gt;. /// &lt;/summary&gt; public void Dispose() =&gt; this.Dispose(true); private void Dispose(bool disposing) { if (!this.isDisposed &amp;&amp; disposing) { if (this.IsOwned) { this.cn?.Dispose(); this.cn = null; this.cn1?.Dispose(); this.cn1 = null; } this.isDisposed = true; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#download-example-net--c","content":" tip Download Example project IDisposableGenerator   ","version":"Next","tagName":"h3"},{"title":"Share IDisposableGenerator​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#share-idisposablegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/IDisposableGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Disposer\" has the following generators:​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#category-disposer-has-the-following-generators","content":" 1 BenutomoAutomaticDisposeImplSourceGenerator  2 Coplt.Dropping  3 DisposableHelpers  4 Disposer  5 IDisposableGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"IDisposableGenerator by Els_kom Official Organization","url":"/RSCG_Examples/v2/docs/IDisposableGenerator#see-category","content":" Disposer ","version":"Next","tagName":"h3"},{"title":"HsuSgSync by Net Hsu","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/HsuSgSync","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#info","content":" info Name: HsuSgSync an async method to sync source generator. Author: Net Hsu NuGet:https://www.nuget.org/packages/Hsu.Sg.Sync/ You can find more details at https://github.com/hsu-net/source-generators Source: https://github.com/hsu-net/source-generators  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#original-readme","content":" note Hsu.Sg .NET source generators Package Version​ Name\tSource\tStable\tPreviewHsu.Sg.Sync\tNuget Hsu.Sg.Sync\tMyGet Hsu.Sg.Proxy\tNuget Hsu.Sg.Proxy\tMyGet Hsu.Sg.FluentMember\tNuget Hsu.Sg.FluentMember\tMyGet Package Features​ Hsu.Sg.Sync​ Generate a synchronous method from an asynchronous method. Usages see README Hsu.Sg.Proxy​ Generate a proxy object from a struct or class or interface. Usages see README Hsu.Sg.FluentMember​ Generate a fluent method from a struct or class. Usages see README References​ Source Generators CookbookIncremental Generators License​ MIT  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#about","content":" note Generate code for async to sync methods  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references HsuSgSync &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Hsu.Sg.Sync&quot; Version=&quot;2023.412.21&quot; OutputItemType=&quot;Analyzer&quot; &gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Hsu.Sg.Sync.SyncAttribute.g.csHsu.Sg.Sync.SyncHelper.g.csHsu.Sg.Sync.SyncHelper.ValueTask.g.csHsuSgSync.Person.sync.g.cs // &lt;auto-generated/&gt; using System; namespace Hsu.Sg.Sync { /// &lt;summary&gt; /// The flag to generate async method to sync method. /// &lt;/summary&gt; [AttributeUsage( System.AttributeTargets.Interface | System.AttributeTargets.Struct | System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)] internal sealed class SyncAttribute : Attribute { /// &lt;summary&gt; /// Only &lt;c&gt;interface&lt;/c&gt; or &lt;c&gt;abstract&lt;/c&gt; async methods are generated. /// &lt;/summary&gt; public bool Definable { get; set; } /// &lt;summary&gt; /// The public async methods are generated. /// &lt;/summary&gt; public bool Public { get; set; } = true; /// &lt;summary&gt; /// The internal async methods are generated. /// &lt;/summary&gt; public bool Internal { get; set; } = true; /// &lt;summary&gt; /// The private async methods are generated. /// &lt;/summary&gt; public bool Private { get; set; } = true; /// &lt;summary&gt; /// Only [SyncGen] async methods are generated. /// &lt;/summary&gt; public bool Only { get; set; } = false; /// &lt;summary&gt; /// The suffix of sync method name when not end with Async. /// &lt;/summary&gt; /// &lt;remarks&gt;default is `Sync`&lt;/remarks&gt; public string Suffix { get; set; } = string.Empty; /// &lt;summary&gt; /// Whether generate attributes. /// &lt;/summary&gt; public bool Attribute { get; set; } = false; /// &lt;summary&gt; /// To generate with attributes /// &lt;/summary&gt; public string[] AttributeIncludes { get; set; } = null; /// &lt;summary&gt; /// To generate without attributes /// &lt;/summary&gt; public string[] AttributeExcludes { get; set; } = null; public SyncAttribute() { Public = true; Internal = true; Private = true; Only = false; Suffix = string.Empty; } } [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] internal sealed class SyncGenAttribute : Attribute { /// &lt;summary&gt; /// Ignore to generate sync methods. /// &lt;/summary&gt; public bool Ignore { get; set; } = false; /// &lt;summary&gt; /// The specific name of sync method. /// &lt;/summary&gt; public string Identifier { get; set; } = string.Empty; /// &lt;summary&gt; /// The suffix of sync method name when not end with Async. /// &lt;/summary&gt; /// &lt;remarks&gt;default is `Sync`&lt;/remarks&gt; public string Suffix { get; set; } = string.Empty; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#download-example-net--c","content":" tip Download Example project HsuSgSync   ","version":"Next","tagName":"h3"},{"title":"Share HsuSgSync​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#share-hsusgsync","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/HsuSgSync  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Async\" has the following generators:​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#category-async-has-the-following-generators","content":" 1 AsyncIt  2 HsuSgSync  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"HsuSgSync by Net Hsu","url":"/RSCG_Examples/v2/docs/HsuSgSync#see-category","content":" Async ","version":"Next","tagName":"h3"},{"title":"FastGenericNew by Boring3 Nyrest","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/FastGenericNew","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#info","content":" info Name: FastGenericNew Configurable Source Generator of FastGenericNew Minimum required: .NET Standard 2.0 &amp; C# 8.0 The ultimate fast alternative to Activator.CreateInstance Up to 50x faster than Activator.CreateInstance Generic Parameters Support Non-Public Constructor Support No Generic Constraints TryGetValue-like TryFastNew API Link Mode PublishTrimmed Support C# 8 Nullable Support C# 10 Parameterless struct constructors Support (Both invokes or not) Author: Boring3 Nyrest NuGet:https://www.nuget.org/packages/FastGenericNew.SourceGenerator/ You can find more details at https://github.com/Nyrest/FastGenericNew Source: https://github.com/Nyrest/FastGenericNew  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#original-readme","content":" note ✨ Features​ ✔️ The best CreateInstance ever Up to 50x faster than Activator.CreateInstanceGeneric Parameters SupportZero boxing/unboxingTryGetValue-like TryFastNew APILink Mode PublishTrimmed SupportNon-Public Constructor SupportNo Generic ConstraintsCompatible with .NET Standard 2.0Multiple backend implementations.Heavily tested on Win/Mac/Linux 🪛 Modern Compiler Integration Source Generator v2 (Incremental Generator)Highly Configurable (Props)Multi-threaded Generation 🔥 Lastest C#/.NET Features Support C# 8 Nullable SupportC# 10 Parameterless struct constructors Support (Both invokes or not)WebAssembly Support 🔧 Installation​ You should only use one of them Pre-Compiled Version​ dotnet add package FastGenericNew --version 3.1.0-preview1 &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FastGenericNew&quot; Version=&quot;3.1.0-preview1&quot; /&gt; &lt;/ItemGroup&gt; SourceGenerator Version​ dotnet add package FastGenericNew.SourceGenerator --version 3.1.0-preview1 &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FastGenericNew.SourceGenerator&quot; Version=&quot;3.1.0-preview1&quot; /&gt; &lt;/ItemGroup&gt; SourceGeneratorV2 requires​ .NET Standard 2.0 or above C# 8.0 or above Roslyn 4.0.1 or above Modern IDE (Optional) [VS2022, Rider, VSCode] 📖 Examples​ using FastGenericNew; // Simply replace 'Activator' to 'FastNew' var obj = FastNew.CreateInstance&lt;T&gt;(); // With parameter(s) var obj2 = FastNew.CreateInstance&lt;T, string&gt;(&quot;text&quot;); var obj3 = FastNew.CreateInstance&lt;T, string, int&gt;(&quot;text&quot;, 0); // Try pattern // NOTE: Try pattern will only check the constructor could be called (exist &amp; callable) // It will not catch or handle any exceptions thrown in the constructor. if (FastNew.TryCreateInstance&lt;T, string&gt;(&quot;arg0&quot;, out T result)); { // ... } Notes​ With .NET Framework, Activator.CreateInstance&lt;T&gt;() invokes the parameterless constructor of ValueType if the constraint is where T : new() but appears to ignore the parameterless constructor if the constraint is where T : struct. But FastNew.CreateInstance&lt;T&gt;() will always invoke the parameterless constructor if it's available. If you don't want to invoke the parameterless constructor of ValueType. Consider to use FastNew.NewOrDefault&lt;T&gt;() which will never invoke the parameterless constructor of ValueType 🚀 Benchmark​ Environment​ BenchmarkDotNet=v0.13.1, OS=Windows 10.0.22000 AMD Ryzen 9 3900X, 1 CPU, 24 logical and 12 physical cores .NET SDK=6.0.200-preview.22055.15 [Host] : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT .NET 5.0 : .NET 5.0.14 (5.0.1422.5710), X64 RyuJIT .NET 6.0 : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT .NET Framework 4.8 : .NET Framework 4.8 (4.8.4470.0), X64 RyuJIT Reference Types​ Value Types​ 📜 License​ FastGenericNew is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#about","content":" note Creating instances fast. As generator show source code. Otherwise could be a dll  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references FastGenericNew &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FastGenericNew.SourceGenerator&quot; Version=&quot;3.1.0-preview1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  FastNew.CreateInstance.g.csFastNew.TryCreateInstance.g.csFastNew{T}.g.csThrowHelper.g.csTypeNew.CreateInstance.g.cs_DynMetClosure.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by FastGenericNew.SourceGenerator // Please do not modify this file directly // &lt;auto-generated/&gt; //------------------------------------------------------------------------------ #nullable enable using System; using System.Collections.Generic; using System.Runtime.CompilerServices; using System.Diagnostics.CodeAnalysis; using System.Reflection; using System.Reflection.Emit; using System.ComponentModel; namespace @FastGenericNew { public static partial class FastNew{ /// &lt;summary&gt; /// &lt;para&gt;Create an instance of &lt;typeparamref name=&quot;T&quot; /&gt;&lt;/para&gt; /// &lt;para&gt;Returns &lt;c&gt;&lt;see langword=&quot;new&quot; /&gt; &lt;typeparamref name=&quot;T&quot; /&gt;()&lt;/c&gt; if &lt;typeparamref name=&quot;T&quot;/&gt; is a &lt;see cref=&quot;ValueType&quot;/&gt;(struct)&lt;/para&gt; /// &lt;para&gt;This &lt;b&gt;CAN&lt;/b&gt; call the Parameterless Constructor of the &lt;see cref=&quot;ValueType&quot;/&gt;(struct)&lt;/para&gt; /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;The type to create.&lt;/typeparam&gt; /// &lt;returns&gt;A new instance of &lt;typeparamref name=&quot;T&quot; /&gt;&lt;/returns&gt; /// &lt;remarks&gt; /// Equivalent to &lt;c&gt;&lt;see langword=&quot;new&quot; /&gt; &lt;typeparamref name=&quot;T&quot; /&gt;()&lt;/c&gt; for both Reference Types and Value Types /// &lt;/remarks&gt; [MethodImpl(MethodImplOptions.AggressiveInlining)] public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T&gt;() { #if NETFRAMEWORK return global::@FastGenericNew.FastNew&lt;T&gt;.CompiledDelegate(); #else return typeof(T).IsValueType ? System.Activator.CreateInstance&lt;T&gt;() // This will be optimized by JIT : global::@FastGenericNew.FastNew&lt;T&gt;.CompiledDelegate(); #endif } /// &lt;summary&gt; /// Create an instance of &lt;typeparamref name=&quot;T&quot; /&gt; &lt;br/&gt; /// Returns &lt;c&gt;&lt;see langword=&quot;default&quot; /&gt;(&lt;typeparamref name=&quot;T&quot; /&gt;)&lt;/c&gt; if &lt;typeparamref name=&quot;T&quot;/&gt; is a &lt;see cref=&quot;ValueType&quot;/&gt;(struct) &lt;br/&gt; /// This &lt;b&gt;WILL NOT&lt;/b&gt; call the Parameterless Constructor of the &lt;see cref=&quot;ValueType&quot;/&gt;(struct) /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;The type to create.&lt;/typeparam&gt; /// &lt;returns&gt;A new instance of &lt;typeparamref name=&quot;T&quot; /&gt;&lt;/returns&gt; /// &lt;remarks&gt; /// For reference types, equivalent to &lt;c&gt;&lt;see langword=&quot;new&quot; /&gt; &lt;typeparamref name=&quot;T&quot; /&gt;()&lt;/c&gt; &lt;br/&gt; /// For value types, equivalent to &lt;c&gt;&lt;see langword=&quot;default&quot; /&gt;(&lt;typeparamref name=&quot;T&quot; /&gt;)&lt;/c&gt; /// &lt;/remarks&gt; [MethodImpl(MethodImplOptions.AggressiveInlining)] public static T NewOrDefault&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T&gt;() { #if NETFRAMEWORK return global::@FastGenericNew.FastNew&lt;T&gt;._isValueTypeT #else return typeof(T).IsValueType #endif ? default(T)! // This will never be null since T is a ValueType : FastNew&lt;T&gt;.CompiledDelegate(); } public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0&gt;(TArg0 p0) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0&gt;.CompiledDelegate(p0); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1&gt;(TArg0 p0, TArg1 p1) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1&gt;.CompiledDelegate(p0, p1); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2&gt;(TArg0 p0, TArg1 p1, TArg2 p2) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2&gt;.CompiledDelegate(p0, p1, p2); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3&gt;.CompiledDelegate(p0, p1, p2, p3); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4&gt;.CompiledDelegate(p0, p1, p2, p3, p4); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9, TArg10 p10) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9, TArg10 p10, TArg11 p11) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9, TArg10 p10, TArg11 p11, TArg12 p12) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9, TArg10 p10, TArg11 p11, TArg12 p12, TArg13 p13) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9, TArg10 p10, TArg11 p11, TArg12 p12, TArg13 p13, TArg14 p14) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14); public static T CreateInstance&lt; #if NET5_0_OR_GREATER [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] #endif T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15&gt;(TArg0 p0, TArg1 p1, TArg2 p2, TArg3 p3, TArg4 p4, TArg5 p5, TArg6 p6, TArg7 p7, TArg8 p8, TArg9 p9, TArg10 p10, TArg11 p11, TArg12 p12, TArg13 p13, TArg14 p14, TArg15 p15) =&gt; global::@FastGenericNew.FastNew&lt;T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15&gt;.CompiledDelegate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#download-example-net--c","content":" tip Download Example project FastGenericNew   ","version":"Next","tagName":"h3"},{"title":"Share FastGenericNew​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#share-fastgenericnew","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/FastGenericNew  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"FastGenericNew by Boring3 Nyrest","url":"/RSCG_Examples/v2/docs/FastGenericNew#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"immediate.apis by Stuart Turner","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/immediate.apis","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#info","content":" info Name: immediate.apis An implementation of the mediator pattern in .NET using source-generation. Author: Stuart Turner NuGet:https://www.nuget.org/packages/immediate.apis/ You can find more details at https://github.com/immediateplatform/immediate.apis Source: https://github.com/immediateplatform/immediate.apis  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#original-readme","content":" note Immediate.Apis ​ Immediate.Apis is a source generator for minimal APIs, forImmediate.Handlers handlers. Simply add a [MapGet] to the[Handler] class and an endpoint will automatically be added. Examples​ Immediate.Apis.FunctionalTests Installing Immediate.Apis​ You can install Immediate.Apis with NuGet: Install-Package Immediate.Apis Or via the .NET Core command line interface: dotnet add package Immediate.Apis Either commands, from Package Manager Console or .NET Core CLI, will download and install Immediate.Handlers. Using Immediate.Apis​ Creating an Endpoint​ Create a Handler and an endpoint by adding the following code: [Handler] [MapGet(&quot;/users&quot;)] public static partial class GetUsersQuery { public record Query; private static ValueTask&lt;IEnumerable&lt;User&gt;&gt; HandleAsync( Query _, UsersService usersService, CancellationToken token) { return usersService.GetUsers(); } } Registering the endpoints​ In your Program.cs, add a call to app.MapXxxEndpoints(), where Xxx is the shortened form of the project name. For a project named Web, it will be app.MapWebEndpoints()For a project named Application.Web, it will be app.MapApplicationWebEndpoints() Customizing the endpoints​ AsParameters​ By default on POST and PUT requests Immediate.Apis will assume that your request class should be treated as a [FromBody]. Sometimes, however, this is not desired. For example imagine a PUT request that sits at a route /api/todos/{id} and updates a TODO with a given ID. We would want to get the id from the route and the properties to update from the body. To do so, we need to create the following request command class: public sealed record Command { public sealed record CommandBody { // props here; } [FromRoute] public required int Id { get; init; } [FromBody] public required CommandBody Body { get; init; } } ...and modify the HandleAsync method to let Immediate.Apis know we want to treat the outer Command class as [AsParameters], like so: private static async ValueTask&lt;Results&lt;NoContent, NotFound&gt;&gt; HandleAsync( [AsParameters] Command command, ExampleDbContext dbContext, CancellationToken ct ) { // ... } Authorization​ The [AllowAnonymous] and [Authorized(&quot;Policy&quot;)] attributes are supported and will be applied to the endpoint. [Handler] [MapGet(&quot;/users&quot;)] [AllowAnonymous] public static partial class GetUsersQuery { public record Query; private static ValueTask&lt;IEnumerable&lt;User&gt;&gt; HandleAsync( Query _, UsersService usersService, CancellationToken token) { return usersService.GetUsers(); } } Additional Customization of Endpoint Registration​ Additional customization of the endpoint registration can be done by adding a CustomizeEndpoint method. [Handler] [MapGet(&quot;/users&quot;)] [Authorize(Policies.UserManagement)] public static partial class GetUsersQuery { internal static void CustomizeGetFeaturesEndpoint(IEndpointConventionBuilder endpoint) =&gt; endpoint .Produces&lt;IEnumerable&lt;User&gt;&gt;(StatusCodes.Status200OK) .ProducesValidationProblem() .ProducesProblem(StatusCodes.Status500InternalServerError) .WithTags(nameof(User)); public record Query; private static ValueTask&lt;IEnumerable&lt;User&gt;&gt; HandleAsync( Query _, UsersService usersService, CancellationToken token) { return usersService.GetUsers(); } } Transforming the handler result into a different type​ In some cases, you may wish to transform the result of the handler into a different type; for example, you may wish to return a Results&lt;&gt; type which will work with asp.net core to return various status codes. You can transform the result of your handler into a different type by adding a TransformResult method, like so: [Handler] [MapGet(&quot;/users&quot;)] [Authorize(Policies.UserManagement)] public static partial class GetUsersQuery { internal static Results&lt;Ok&lt;IEnumerable&lt;User&gt;&gt;, NotFound&gt; TransformResult(IEnumerable&lt;User&gt; result) { return TypedResults.Ok(result); } public record Query; private static ValueTask&lt;IEnumerable&lt;User&gt;&gt; HandleAsync( Query _, UsersService usersService, CancellationToken token ) { return usersService.GetUsers(); } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#about","content":" note Defining APIs in classes instead of in minimal API or controllers  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPersonAPI.csPerson.cs This is the CSharp Project that references immediate.apis &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Immediate.Apis&quot; Version=&quot;1.3.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.4&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RouteBuilder.APIDemo_PersonAPI.g.csRoutesBuilder.g.csIH.APIDemo.PersonAPI.g.csIH.ServiceCollectionExtensions.g.cs using System.Threading; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.Routing; #pragma warning disable CS1591 namespace Microsoft.AspNetCore.Builder { public static partial class APIDemoRoutesBuilder { private static void MapAPIDemo_PersonAPIEndpoint(IEndpointRouteBuilder app) { var endpoint = app .MapGet( &quot;/users&quot;, async ( [AsParameters] global::APIDemo.PersonAPI.Query parameters, [FromServices] global::APIDemo.PersonAPI.Handler handler, CancellationToken token ) =&gt; { var ret = await handler.HandleAsync(parameters, token); return ret; } ); } } } namespace APIDemo { /// &lt;remarks&gt;&lt;see cref=&quot;global::APIDemo.PersonAPI.Query&quot; /&gt; registered using &lt;c&gt;[AsParameters]&lt;/c&gt;&lt;/remarks&gt; partial class PersonAPI; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#download-example-net--c","content":" tip Download Example project immediate.apis   ","version":"Next","tagName":"h3"},{"title":"Share immediate.apis​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#share-immediateapis","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/immediate.apis  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"immediate.apis by Stuart Turner","url":"/RSCG_Examples/v2/docs/immediate.apis#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"Immediate.Handlers by Stuart Turner","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Immediate.Handlers","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#info","content":" info Name: Immediate.Handlers TBD Author: Stuart Turner NuGet:https://www.nuget.org/packages/Immediate.Handlers/ You can find more details at https://github.com/immediateplatform/Immediate.Handlers Source: https://github.com/immediateplatform/Immediate.Handlers  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#original-readme","content":" note Immediate.Handlers ​ Immediate.Handlers is an implementation of the mediator pattern in .NET using source-generation. All pipeline behaviors are determined and the call-tree built at compile-time; meaning that all dependencies are enforced via compile-time safety checks. Behaviors and dependencies are obtained via DI at runtime based on compile-time determined dependencies. Examples​ Minimal Api: Normal Installing Immediate.Handlers​ You can install Immediate.Handlers with NuGet: Install-Package Immediate.Handlers Or via the .NET Core command line interface: dotnet add package Immediate.Handlers Either commands, from Package Manager Console or .NET Core CLI, will download and install Immediate.Handlers. Using Immediate.Handlers​ Creating Handlers​ Create a Handler by adding the following code: [Handler] public static partial class GetUsersQuery { public record Query; private static ValueTask&lt;IEnumerable&lt;User&gt;&gt; HandleAsync( Query _, UsersService usersService, CancellationToken token ) { return usersService.GetUsers(); } } This will automatically create a new class, GetUsersQuery.Handler, which encapsulates the following: attaching any behaviors defined for all queries in the assemblyusing a class to receive any DI services, such as UsersService Any consumer can now do the following: public class Consumer(GetUsersQuery.Handler handler) { public async Task Consumer(CancellationToken token) { var response = await handler.HandleAsync(new(), token); // do something with response } } For Command handlers, use a ValueTask, and Immediate.Handlers will insert a return type of ValueTuple to your handler automatically. [Handler] public static partial class CreateUserCommand { public record Command(string Email); private static async ValueTask HandleAsync( Command command, UsersService usersService, CancellationToken token ) { await usersService.CreateUser(command.Email); } } In case your project layout does not allow direct for references between consumer and handler, the handler will also be registered as an IHandler&lt;TRequest, Response&gt;. public class Consumer(IHandler&lt;Query, IEnumerable&lt;User&gt;&gt; handler) { public async Task Consumer(CancellationToken token) { var response = await handler.HandleAsync(new(), token); // do something with response } } Creating Behaviors​ Create a behavior by implementing the Immediate.Handlers.Shared.Behaviors&lt;,&gt; class, as so: public sealed class LoggingBehavior&lt;TRequest, TResponse&gt;(ILogger&lt;LoggingBehavior&lt;TRequest, TResponse&gt;&gt; logger) : Behavior&lt;TRequest, TResponse&gt; { public override async ValueTask&lt;TResponse&gt; HandleAsync(TRequest request, CancellationToken cancellationToken) { logger.LogInformation(&quot;LoggingBehavior.Enter&quot;); var response = await Next(request, cancellationToken); logger.LogInformation(&quot;LoggingBehavior.Exit&quot;); return response; } } This can be registered assembly-wide using: [assembly: Behaviors( typeof(LoggingBehavior&lt;,&gt;) )] or on an individual handler using: [Handler] [Behavior( typeof(LoggingBehavior&lt;,&gt;) )] public static class GetUsersQuery { // .. } Once added to the pipeline, the behavior will be called as part of the pipeline to handle a request. Note: adding a [Behavior] attribute to a handler will disregard all assembly-wide behaviors for that handler, so any global behaviors necessary must be independently added to the handler override behaviors list. Behavior Constraints​ A constraint can be added to a behavior by using: public sealed class LoggingBehavior&lt;TRequest, TResponse&gt; : Behavior&lt;TRequest, TResponse&gt; where TRequest : IRequestConstraint where TResponse : IResponseConstraint When a pipeline is generated, all potential behaviors are evaluated against the request and response types, and if either type does not match a given constraint, the behavior is not added to the generated pipeline. Registering with IServiceCollection​ Immediate.Handlers supports Microsoft.Extensions.DependencyInjection.Abstractions directly. Registering Handlers​ services.AddHandlers(); This registers all classes in the assembly marked with [Handler]. Registering Behaviors​ services.AddBehaviors(); This registers all behaviors referenced in any [Behaviors] attribute. Using with Swashbuckle​ For Swagger to work the JSON schema generated is required to have unique schemaId's. To achieve this, Swashbuckle uses class names as simple schemaId's. When using Immediate Handlers classes with a controller action inside, you might end up with Swashbuckle stating an error similar to this: Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Failed to generate schema for type - MyApp.Api.DeleteUser+Command. See inner exception System.InvalidOperationException: Can't use schemaId &quot;$Command&quot; for type &quot;$MyApp.Api.DeleteUser+Command&quot;. The same schemaId is already used for type &quot;$MyApp.Api.CreateUserCommand+Command&quot; This error indicates Swashbuckle is trying to use two classes named Command from two (or more) different Handlers in different namespaces. To fix this, you have to define the following options in your SwaggerGen configuration: builder.Services.AddSwaggerGen( options =&gt; { options.CustomSchemaIds(x =&gt; x.FullName?.Replace(&quot;+&quot;, &quot;.&quot;, StringComparison.Ordinal)); }); Performance Comparisons​ All performance benchmarks reported use the following environment: // * Summary * BenchmarkDotNet v0.13.12, Windows 11 (10.0.22621.3007/22H2/2022Update/SunValley2) 12th Gen Intel Core i7-12700H, 1 CPU, 20 logical and 14 physical cores .NET SDK 8.0.101 [Host] : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2 DefaultJob : .NET 8.0.1 (8.0.123.58001), X64 RyuJIT AVX2 Benchmarks.Simple​ This benchmark tests the various mediator implementations with a single request/response handler. Method\tMean\tError\tRatio\tRank\tAllocatedSendRequest_Baseline\t0.7701 ns\t0.0180 ns\t1.00\t1\t- SendRequest_IHandler\t15.6780 ns\t0.0476 ns\t20.36\t2\t- SendRequest_ImmediateHandler\t16.6023 ns\t0.0561 ns\t21.56\t3\t- SendRequest_Mediator\t27.2993 ns\t0.4269 ns\t35.49\t4\t- SendRequest_IMediator\t31.3420 ns\t0.1006 ns\t40.64\t5\t- SendRequest_MediatR\t68.3384 ns\t0.3453 ns\t88.73\t6\t240 B Benchmarks.Large​ This benchmark tests the various mediator implementations in the face of 999 request/response handlers. Method\tMean\tError\tRatio\tRank\tAllocatedSendRequest_Baseline\t0.5656 ns\t0.0252 ns\t1.00\t1\t- SendRequest_ImmediateHandler\t15.4346 ns\t0.0516 ns\t27.34\t2\t- SendRequest_IHandler\t16.0959 ns\t0.0552 ns\t28.50\t3\t- SendRequest_Mediator\t27.4104 ns\t0.0449 ns\t48.54\t4\t- SendRequest_MediatR\t80.0953 ns\t0.4749 ns\t141.83\t5\t240 B SendRequest_IMediator\t435.3890 ns\t1.6399 ns\t771.01\t6\t- Benchmarks.Behaviors​ This benchmark tests a more realistic scenario of using 1 behavior and 1 service. Method\tMean\tError\tRatio\tRank\tAllocatedSendRequest_Baseline\t56.71 ns\t0.174 ns\t1.00\t1\t40 B SendRequest_IHandler\t78.90 ns\t0.304 ns\t1.39\t2\t40 B SendRequest_ImmediateHandler\t80.02 ns\t0.288 ns\t1.41\t3\t40 B SendRequest_Mediator\t101.23 ns\t0.263 ns\t1.78\t4\t40 B SendRequest_IMediator\t104.92 ns\t0.297 ns\t1.85\t5\t40 B SendRequest_MediatR\t201.27 ns\t1.023 ns\t3.55\t6\t560 B  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#about","content":" note Generating mediator like handlers  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPingPong.csGenericLoggerHandler.csglobals.cs This is the CSharp Project that references Immediate.Handlers &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Immediate.Handlers&quot; Version=&quot;1.6.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Logging.Abstractions&quot; Version=&quot;8.0.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IH..PingHandler.g.csIH.ServiceCollectionExtensions.g.cs using Microsoft.Extensions.DependencyInjection; #pragma warning disable CS1591 partial class PingHandler { public sealed partial class Handler : global::Immediate.Handlers.Shared.IHandler&lt;global::Ping, global::Pong&gt; { private readonly global::PingHandler.HandleBehavior _handleBehavior; private readonly global::LoggingBehavior&lt;global::Ping, global::Pong&gt; _loggingBehavior; public Handler( global::PingHandler.HandleBehavior handleBehavior, global::LoggingBehavior&lt;global::Ping, global::Pong&gt; loggingBehavior ) { var handlerType = typeof(PingHandler); _handleBehavior = handleBehavior; _loggingBehavior = loggingBehavior; _loggingBehavior.HandlerType = handlerType; _loggingBehavior.SetInnerHandler(_handleBehavior); } public async global::System.Threading.Tasks.ValueTask&lt;global::Pong&gt; HandleAsync( global::Ping request, global::System.Threading.CancellationToken cancellationToken = default ) { return await _loggingBehavior .HandleAsync(request, cancellationToken) .ConfigureAwait(false); } } [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)] public sealed class HandleBehavior : global::Immediate.Handlers.Shared.Behavior&lt;global::Ping, global::Pong&gt; { public HandleBehavior( ) { } public override async global::System.Threading.Tasks.ValueTask&lt;global::Pong&gt; HandleAsync( global::Ping request, global::System.Threading.CancellationToken cancellationToken ) { return await global::PingHandler .HandleAsync( request , cancellationToken ) .ConfigureAwait(false); } } [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)] public static IServiceCollection AddHandlers( IServiceCollection services, ServiceLifetime lifetime = ServiceLifetime.Scoped ) { services.Add(new(typeof(global::PingHandler.Handler), typeof(global::PingHandler.Handler), lifetime)); services.Add(new(typeof(global::Immediate.Handlers.Shared.IHandler&lt;global::Ping, global::Pong&gt;), typeof(global::PingHandler.Handler), lifetime)); services.Add(new(typeof(global::PingHandler.HandleBehavior), typeof(global::PingHandler.HandleBehavior), lifetime)); return services; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#download-example-net--c","content":" tip Download Example project Immediate.Handlers   ","version":"Next","tagName":"h3"},{"title":"Share Immediate.Handlers​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#share-immediatehandlers","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Immediate.Handlers  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mediator\" has the following generators:​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#category-mediator-has-the-following-generators","content":" 1 DeeDee  2 Immediate.Handlers  3 Mediator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Immediate.Handlers by Stuart Turner","url":"/RSCG_Examples/v2/docs/Immediate.Handlers#see-category","content":" Mediator ","version":"Next","tagName":"h3"},{"title":"Injectio by LoreSoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Injectio","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#info","content":" info Name: Injectio Source generator that automatically registers discovered services in dependency injection Author: LoreSoft NuGet:https://www.nuget.org/packages/Injectio/ You can find more details at https://github.com/loresoft/Injectio Source: https://github.com/loresoft/Injectio  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#original-readme","content":" note Injectio Source generator that helps register attribute marked services in the dependency injection ServiceCollection Features​ Transient, Singleton, Scoped service registrationFactory registrationModule method registrationDuplicate Strategy - Skip,Replace,AppendRegistration Strategy - Self, Implemented Interfaces, Self With Interfaces Usage​ Add package​ Add the nuget package project to your projects. dotnet add package Injectio Prevent dependances from including Injectio &lt;PackageReference Include=&quot;Injectio&quot; PrivateAssets=&quot;all&quot; /&gt; Registration Attributes​ Place registration attribute on class. The class will be discovered and registered. [RegisterSingleton] Marks the class as a singleton service[RegisterScoped] Marks the class as a scoped service[RegisterTransient] Marks the class as a transient service[RegisterServices] Marks the method to be called to register services Attribute Properties​ Property\tDescriptionImplementationType\tThe type that implements the service. If not set, the class the attribute is on will be used. ServiceType\tThe type of the service. If not set, the Registration property used to determine what is registered. Factory\tName of a factory method to create new instances of the service implementation. Duplicate\tHow the generator handles duplicate registrations. See Duplicate Strategy Registration\tHow the generator determines what to register. See Registration Strategy Duplicate Strategy​ Value\tDescriptionSkip\tSkips registrations for services that already exists Replace\tReplaces existing service registrations Append\tAppends a new registration for existing services Registration Strategy​ Value\tDescriptionSelf\tRegisters each matching concrete type as itself ImplementedInterfaces\tRegisters each matching concrete type as all of its implemented interfaces SelfWithInterfaces\tRegisters each matching concrete type as all of its implemented interfaces and itself Singleton services​ [RegisterSingleton] public class SingletonService : IService { } Explicit service type [RegisterSingleton(ServiceType = typeof(IService))] public class SingletonService : IService { } Support resolving multiple services with IEnumerable&lt;T&gt; [RegisterSingleton(Duplicate = DuplicateStrategy.Append)] public class SingletonService : IService { } Scoped Services​ [RegisterScoped] public class ScopedService : IService { } Transient Services​ [RegisterTransient] public class TransientService : IService { } Factories​ [RegisterTransient(Factory = nameof(ServiceFactory))] public class FactoryService : IFactoryService { private readonly IService _service; public FactoryService(IService service) { _service = service; } public static IFactoryService ServiceFactory(IServiceProvider serviceProvider) { return new FactoryService(serviceProvider.GetService&lt;IService&gt;()); } } Generic Attributes​ You can use generic attributes to register services if your project targets net7.0. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFrameworks&gt;net7.0&lt;/TargetFrameworks&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt; Generic attributes allow declaration to be more compact by avoiding the typeof calls [RegisterSingleton&lt;IService&gt;] public class ServiceImplementation : IService { } Open Generic​ [RegisterSingleton(ImplementationType = typeof(OpenGeneric&lt;&gt;), ServiceType = typeof(IOpenGeneric&lt;&gt;))] public class OpenGeneric&lt;T&gt; : IOpenGeneric&lt;T&gt; { } Register Method​ When the service registration is complex, use the RegisterServices attribute on a method that has a parameter of IServiceCollection or ServiceCollection public class RegistrationModule { [RegisterServices] public static void Register(IServiceCollection services) { services.TryAddTransient&lt;IModuleService, ModuleService&gt;(); } } Add to container​ The source generator creates an extension method with all the discovered services registered. Call the generated extension method to add the services to the container. The extension method will be called Add[AssemblyName]. The assembly name will have the dots removed. var services = new ServiceCollection(); services.AddInjectioTestsConsole(); Override the extension method name by using the InjectioName MSBuild property. &lt;PropertyGroup&gt; &lt;InjectioName&gt;Library&lt;/InjectioName&gt; &lt;/PropertyGroup&gt; var services = new ServiceCollection(); services.AddLibrary(); Registration Tags​ Control what is registered when calling the generated extension method using Tags Tag the service public interface IServiceTag { } [RegisterSingleton(Tags = &quot;Client,FrontEnd&quot;)] public class ServiceTag : IServiceTag { } Specify tags when adding to service collection. Note, if no tags specified, all services are registered var services = new ServiceCollection(); services.AddInjectioTestsLibrary(&quot;Client&quot;);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#about","content":" note Attributes to DI helper  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.csIDatabase.csDatabaseCon.cs This is the CSharp Project that references Injectio &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Injectio&quot; Version=&quot;2.6.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Injectio.g.cs // &lt;auto-generated /&gt; #nullable enable namespace Microsoft.Extensions.DependencyInjection { /// &lt;summary&gt; /// Extension methods for discovered service registrations /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;Injectio.Generators&quot;, &quot;2.6.1.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] public static class DiscoveredServicesExtensions { /// &lt;summary&gt; /// Adds discovered services from InjectioDemo to the specified service collection /// &lt;/summary&gt; /// &lt;param name=&quot;serviceCollection&quot;&gt;The service collection.&lt;/param&gt; /// &lt;param name=&quot;tags&quot;&gt;The service registration tags to include.&lt;/param&gt; /// &lt;returns&gt;The service collection&lt;/returns&gt; public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddInjectioDemo(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, params string[]? tags) { var tagSet = new global::System.Collections.Generic.HashSet&lt;string&gt;(tags ?? global::System.Linq.Enumerable.Empty&lt;string&gt;()); global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd( serviceCollection, global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe( typeof(global::InjectioDemo.IDatabase), typeof(global::InjectioDemo.Database), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped ) ); global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd( serviceCollection, global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe( typeof(global::InjectioDemo.Database), typeof(global::InjectioDemo.Database), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped ) ); global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd( serviceCollection, global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe( typeof(global::InjectioDemo.DatabaseCon), typeof(global::InjectioDemo.DatabaseCon), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton ) ); return serviceCollection; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#download-example-net--c","content":" tip Download Example project Injectio   ","version":"Next","tagName":"h3"},{"title":"Share Injectio​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#share-injectio","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Injectio  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Injectio by LoreSoft","url":"/RSCG_Examples/v2/docs/Injectio#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is a Roslyn Source Code Generator?​","type":1,"pageTitle":"Introduction","url":"/RSCG_Examples/v2/docs/intro#what-is-a-roslyn-source-code-generator","content":" A Roslyn Source Code Generator (RSCG) is a program that generates code in the compile time, based on the previous source code and/or another data. This new source code is added to the compilation and compile with the previous source code.  ","version":"Next","tagName":"h2"},{"title":"How can I make a Roslyn Source Code Generator?​","type":1,"pageTitle":"Introduction","url":"/RSCG_Examples/v2/docs/intro#how-can-i-make-a-roslyn-source-code-generator","content":" For creating the RSCG you will simply create a .NET Standard 2.0 project, add those 2 references   &lt;PackageReference Include=&quot;Microsoft.CodeAnalysis.Analyzers&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.CodeAnalysis.CSharp&quot; /&gt;   For tutorials , it is easiear to start implementing ,even if deprecated   public interface ISourceGenerator { void Initialize(GeneratorInitializationContext context); void Execute(GeneratorExecutionContext context); }   After you understand , you can start with v2 IIncrementalGenerator :https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md  Start from examples at https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators  Also, you can read the source code for the RSCG presented in this book.    ","version":"Next","tagName":"h2"},{"title":"Show me some code for RSCG​","type":1,"pageTitle":"Introduction","url":"/RSCG_Examples/v2/docs/intro#show-me-some-code-for-rscg","content":" Start read  https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.md  and  https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.cookbook.md .  After that, you can play with the examples from https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators or from https://sourcegen.dev/ (see AutoNotify in the dropdown)  Second iteration , incremental generators: https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md  ","version":"Next","tagName":"h2"},{"title":"How the RSCG can help me to write faster / better the code ?​","type":1,"pageTitle":"Introduction","url":"/RSCG_Examples/v2/docs/intro#how-the-rscg-can-help-me-to-write-faster--better-the-code--","content":" Glad that you asked. You can see in action a RSCG for automatically generating code for automating testing (see DynamicMocking ) , parsing enum (see Enum ) , generating controllers actions from a interface ( SkinnyControllers ), currying functions and many more. In this book you will find more than 10 examples of some RSCG that can help you. Also, you can find the source code of the examples at https://github.com/ignatandrei/RSCG_Examples.  Is Microsoft using Roslyn Source Code Generators ?  Yes , Microsoft is developing more Generators - for getting rid of reflection - and other tasks.  https://github.com/search?q=repo%3Adotnet%2Fruntime%20IIncrementalGenerator&amp;type=code  https://github.com/search?q=org%3Adotnet+IIncrementalGenerator+language%3AC%23&amp;type=code&amp;l=C%23&amp;p=2  ","version":"Next","tagName":"h2"},{"title":"More Links​","type":1,"pageTitle":"Introduction","url":"/RSCG_Examples/v2/docs/intro#more-links","content":" First iteration of RSCG:  https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/  https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview  Second iteration , incremental generators: https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md  Andrew Lock's blog post on source generators: https://andrewlock.net/series/creating-a-source-generator/  Also please readhttps://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/  Jason Bock on constructing AutoDeconstruct : https://codemag.com/Article/2305061/Writing-Code-to-Generate-Code-in-C#  How to debug a RSCG: https://github.com/JoanComasFdz/dotnet-how-to-debug-source-generator-vs2022  CheatSheet for RSCG: https://notanaverageman.github.io/2020/12/07/cs-source-generators-cheatsheet.html  Pawel Gerr on RSCG: https://www.thinktecture.com/en/net/roslyn-source-generators-introduction/  Unity: https://docs.unity3d.com/Packages/com.unity.roslyn@0.2/manual/index.html  Other sites with RSCG:  https://github.com/amis92/csharp-source-generators  https://github.com/ironcev/awesome-roslyn#source-generators  https://github.com/topics/csharp-sourcegenerator  Videos:  Let's Code an incremental source generator with Roslyn - Stefan Pölz - NDC London 2023  https://www.youtube.com/watch?v=iOp3mN933Og  For Microsoft:  https://github.com/search?q=repo%3Adotnet%2Fruntime%20IIncrementalGenerator&amp;type=code  Nuget:  https://www.nuget.org/packages?q=Tags%3A%22SourceGenerator%22&amp;prerel=true&amp;sortby=created-desc  https://www.nuget.org/packages?q=Tags%3A%22source-generation%22&amp;prerel=false&amp;sortby=created-desc ","version":"Next","tagName":"h2"},{"title":"Immutype by Nikolay Pianikov","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Immutype","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#info","content":" info Name: Immutype Immutable for .NET. Author: Nikolay Pianikov NuGet:https://www.nuget.org/packages/Immutype/ You can find more details at https://github.com/DevTeam/Immutype Source: https://github.com/DevTeam/Immutype  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#original-readme","content":" note Immutype Immutype is .NET code generator creating extension methods for records, structures, and classes marked by the attribute [Immutype.Target] to efficiently operate with instances of these types like with immutable ones. For instance, for the type Foo for the constructor parameter values of type IEnumerable&lt;int&gt; following extension methods are generated: Foo WithValues(this Foo it, params int[] values) - to replace values by the new ones using a method with variable number of argumentsFoo WithValues(this Foo it, IEnumerable&lt;int&gt; values) - to replace values by the new onesFoo AddValues(this Foo it, params int[] values) - to add values using a method with variable number of argumentsFoo AddValues(this Foo it, IEnumerable&lt;int&gt; values) - to add valuesFoo RemoveValues(this Foo it, params int[] values) - to remove values using a method with variable number of argumentsFoo RemoveValues(this Foo it, IEnumerable&lt;int&gt; values) - to remove valuesFoo ClearValues(this Foo it) - to clear all values For the type Foo for the constructor parameter value of other types, like int, with default value 99 following extension methods are generated: Foo WithValue(this Foo it, int value) - to replace a value by the new oneFoo WithDefaultValue(this Foo it) - to replace a value by the default value 99 The extensions methods above are generating automatically for each public or internal type, like Foo marked by the attribute [Immutype.Target] in the static class named as FooExtensions. This generated class FooExtensions is static, has the same accessibility level and the same namespace like a target class Foo. Each generated static extension method has two attributes: [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)] - to improve performance[Pure] - to indicate that this method is pure, that is, it does not make any visible state changes Immutype supports nullable reference and value types and the following list of enumerable types: ArraysIEnumerable&lt;T&gt;List&lt;T&gt;IList&lt;T&gt;IReadOnlyCollection&lt;T&gt;IReadOnlyList&lt;T&gt;ICollection&lt;T&gt;HashSet&lt;T&gt;ISet&lt;T&gt;Queue&lt;T&gt;Stack&lt;T&gt;IReadOnlyCollection&lt;T&gt;IReadOnlyList&lt;T&gt;IReadOnlySet&lt;T&gt;ImmutableList&lt;T&gt;IImmutableList&lt;T&gt;ImmutableArray&lt;T&gt;ImmutableQueue&lt;T&gt;IImmutableQueue&lt;T&gt;ImmutableStack&lt;T&gt;IImmutableStack&lt;T&gt; Immutype supports IIncrementalGenerator as well as ISourceGenerator so it works quite effective. NuGet package​ Package Manager Install-Package Immutype .NET CLI dotnet add package Immutype Development environment requirements​ .NET SDK 5.0.102+C# v.6 or newer Supported frameworks​ .NET and .NET Core 1.0+.NET Standard 1.0+.NET Framework 3.5+UWP/XBOX.NET IoTXamarin.NET Multi-platform App UI (MAUI) Usage Scenarios​ Basics Sample scenarioArrayApplying defaultsClearingImmutable collectionRemovingGeneric typesNullable collectionSetRecord with constructorExplicit constructor choice Sample scenario​ [Immutype.Target] internal record Person( string Name, bool HasPassport = true, int Age = 0, ImmutableArray&lt;Person&gt; Friends = default); public class SampleScenario { public void Run() { var john = new Person(&quot;John&quot;, false, 15) .AddFriends( new Person(&quot;David&quot;).WithAge(16), new Person(&quot;James&quot;).WithAge(17) .WithFriends(new Person(&quot;Tyler&quot;).WithAge(16))); john.Friends.Length.ShouldBe(2); john = john.WithAge(16).WithDefaultHasPassport(); john.Age.ShouldBe(16); john.HasPassport.ShouldBeTrue(); john = john.AddFriends( new Person(&quot;Daniel&quot;).WithAge(17), new Person(&quot;Sophia&quot;).WithAge(18)); john.Friends.Length.ShouldBe(4); john = john.RemoveFriends(new Person(&quot;David&quot;).WithAge(16)); john.Friends.Length.ShouldBe(3); } } Array​ [Immutype.Target] internal readonly record struct Person(string Name, int Age = 0, params Person[] Friends); public class Array { public void Run() { var john = new Person(&quot;John&quot;) .WithAge(15) .AddFriends(new Person(&quot;David&quot;).WithAge(16)) .AddFriends( new Person(&quot;James&quot;), new Person(&quot;Daniel&quot;).WithAge(17)); john.Friends.Length.ShouldBe(3); } } Applying defaults​ [Immutype.Target] internal readonly record struct Person(string Name = &quot;John&quot;, int Age = 17); public class ApplyingDefaults { public void Run() { var john = new Person(&quot;David&quot;, 15) .WithDefaultAge() .WithDefaultName(); john.Name.ShouldBe(&quot;John&quot;); john.Age.ShouldBe(17); } } Clearing​ [Immutype.Target] internal readonly record struct Person( string Name, int Age = 0, params Person[] Friends); public class Clearing { public void Run() { var john = new Person(&quot;John&quot;,15, new Person(&quot;David&quot;).WithAge(16)) .AddFriends(new Person(&quot;James&quot;)); john = john.ClearFriends(); john.Friends.Length.ShouldBe(0); } } Immutable collection​ [Immutype.Target] internal readonly struct Person { public readonly string Name; public readonly int Age; public readonly IImmutableList&lt;Person&gt; Friends; public Person( string name, int age = 0, IImmutableList&lt;Person&gt;? friends = default) { Name = name; Age = age; Friends = friends ?? ImmutableList&lt;Person&gt;.Empty; } }; public class ImmutableCollection { public void Run() { var john = new Person(&quot;John&quot;,15) .WithFriends( new Person(&quot;David&quot;).WithAge(16), new Person(&quot;James&quot;).WithAge(17)) .AddFriends( new Person(&quot;David&quot;).WithAge(22)); john.Friends.Count.ShouldBe(3); } } Removing​ [Immutype.Target] internal readonly record struct Person( string Name, int Age = 0, params Person[] Friends); public class Removing { public void Run() { var john = new Person(&quot;John&quot;,15, new Person(&quot;David&quot;).WithAge(16)) .AddFriends(new Person(&quot;James&quot;)); john = john.RemoveFriends(new Person(&quot;James&quot;)); john.Friends.Length.ShouldBe(1); } } Generic types​ It is possible to use generic types including any generic constraints. [Immutype.Target] internal record Person&lt;TAge&gt;(string Name, TAge Age = default, IEnumerable&lt;Person&lt;TAge&gt;&gt;? Friends = default) where TAge : struct; public class GenericTypes { public void Run() { var john = new Person&lt;int&gt;(&quot;John&quot;) .WithAge(15) .WithFriends(new Person&lt;int&gt;(&quot;David&quot;).WithAge(16)) .AddFriends( new Person&lt;int&gt;(&quot;James&quot;), new Person&lt;int&gt;(&quot;Daniel&quot;).WithAge(17)); john.Friends?.Count().ShouldBe(3); } } Nullable collection​ [Immutype.Target] internal record Person( string Name, int? Age = default, ICollection&lt;Person&gt;? Friends = default); public class NullableCollection { public void Run() { var john = new Person(&quot;John&quot;,15) .AddFriends( new Person(&quot;David&quot;).WithAge(16), new Person(&quot;James&quot;).WithAge(17) .WithFriends(new Person(&quot;Tyler&quot;).WithAge(16))); john.Friends?.Count.ShouldBe(2); } } Set​ [Immutype.Target] internal record Person( string Name, int Age = 0, ISet&lt;Person&gt;? Friends = default); public class Set { public void Run() { var john = new Person(&quot;John&quot;,15) .AddFriends( new Person(&quot;David&quot;).WithAge(16), new Person(&quot;David&quot;).WithAge(16), new Person(&quot;James&quot;).WithAge(17) .WithFriends(new Person(&quot;Tyler&quot;).WithAge(16))); john.Friends?.Count.ShouldBe(2); } } Record with constructor​ [Immutype.Target] internal record Person { public Person( string name, int? age = default, ICollection&lt;Person&gt;? friends = default) { Name = name; Age = age; Friends = friends; } public string Name { get; } public int? Age { get; } public ICollection&lt;Person&gt;? Friends { get; } public void Deconstruct( out string name, out int? age, out ICollection&lt;Person&gt;? friends) { name = Name; age = Age; friends = Friends; } } public class RecordWithConstructor { public void Run() { var john = new Person(&quot;John&quot;,15) .WithFriends( new Person(&quot;David&quot;).WithAge(16), new Person(&quot;James&quot;).WithAge(17) .WithFriends(new Person(&quot;Tyler&quot;).WithAge(16))); john.Friends?.Count.ShouldBe(2); } } Explicit constructor choice​ [Immutype.Target] internal readonly struct Person { public readonly string Name; public readonly int Age; public readonly IImmutableList&lt;Person&gt; Friends; // You can explicitly select a constructor by marking it with the [Immutype.Target] attribute [Immutype.Target] public Person( string name, int age = 0, IImmutableList&lt;Person&gt;? friends = default) { Name = name; Age = age; Friends = friends ?? ImmutableList&lt;Person&gt;.Empty; } public Person( string name, int age, IImmutableList&lt;Person&gt;? friends, int someArg = 99) { Name = name; Age = age; Friends = friends ?? ImmutableList&lt;Person&gt;.Empty; } }; public class ExplicitConstructorChoice { public void Run() { var john = new Person(&quot;John&quot;,15) .WithFriends( new Person(&quot;David&quot;).WithAge(16), new Person(&quot;James&quot;).WithAge(17)) .AddFriends( new Person(&quot;David&quot;).WithAge(22)); john.Friends.Count.ShouldBe(3); } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#about","content":" note Immutable from constructors  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Immutype &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Immutype&quot; Version=&quot;1.0.14&quot; OutputItemType=&quot;Analyzer&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Immutype.Components.Contracts.csImmutypeDemo.Person.cs // ReSharper disable CheckNamespace // ReSharper disable ClassNeverInstantiated.Global namespace Immutype { using System; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor, Inherited = false)] public class TargetAttribute: Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#download-example-net--c","content":" tip Download Example project Immutype   ","version":"Next","tagName":"h3"},{"title":"Share Immutype​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#share-immutype","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Immutype  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Immutype by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Immutype#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#info","content":" info Name: JKToolKit.TemplatePropertyGenerator Generates strongly typed stringformatters based on stringformats. Author: Jonas Kamsker NuGet:https://www.nuget.org/packages/JKToolKit.TemplatePropertyGenerator/ You can find more details at https://github.com/JKamsker/JKToolKit.TemplatePropertyGenerator Source: https://github.com/JKamsker/JKToolKit.TemplatePropertyGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#original-readme","content":" note Overview​ TemplatePropertyGenerator is a C# source generator that creates strongly-typed template properties from annotated classes. This allows for easy and safe string formatting by generating classes with methods to format predefined templates. Features​ Define template properties with format strings using attributes.Auto-generate classes with methods to format the strings.Supports FormattableString for more complex formatting needs. How to Use​ Install the NuGet package: Ensure you have the NuGet package installed in your project. If not, you can install it via the NuGet Package Manager or the .NET CLI. dotnet add package JKToolKit.TemplatePropertyGenerator Define your templates: Use the TemplateProperty attribute to define your template properties in a partial class. The attribute takes the name of the property and the format string as parameters. [TemplateProperty(&quot;Hello&quot;, &quot;Hello {value}, {value}!&quot;)] [TemplateProperty(&quot;FooBar&quot;, &quot;Foo {value}, Bar {value}&quot;)] public static partial class Consts { } Use the generated code: Once the generator runs, it will produce a class with properties and methods to format your strings. You can use these in your code as shown below: private static void Main(string[] args) { Console.WriteLine(Consts.Hello.Template); // Output: Hello {value}, {value}! Console.WriteLine(Consts.Hello.Format(&quot;World&quot;)); // Output: Hello World, World! Console.WriteLine(Consts.FooBar.Format(&quot;Foo1&quot;, &quot;Bar1&quot;)); // Output: Foo Foo1, Bar Bar1 } Contributing​ Contributions are welcome! Please feel free to submit a pull request or open an issue to discuss any changes or improvements. License​ This project is licensed under the MIT License . Acknowledgements​ Source Generators in .NETMicrosoft Roslyn  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#about","content":" note String templating for a class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references JKToolKit.TemplatePropertyGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;JKToolKit.TemplatePropertyGenerator&quot; Version=&quot;0.0.4&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TemplatePropertyAttribute.g.csSimpleTemplate.Person_Generated.cs global using JKToolKit.TemplatePropertyGenerator.Attributes; using System; namespace JKToolKit.TemplatePropertyGenerator.Attributes; [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = true)] internal class TemplatePropertyAttribute : Attribute { public string Name { get; } public string Format { get; } public TemplatePropertyAttribute(string name, string format) { Name = name; Format = format; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#download-example-net--c","content":" tip Download Example project JKToolKit.TemplatePropertyGenerator   ","version":"Next","tagName":"h3"},{"title":"Share JKToolKit.TemplatePropertyGenerator​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#share-jktoolkittemplatepropertygenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"JKToolKit.TemplatePropertyGenerator by Jonas Kamsker","url":"/RSCG_Examples/v2/docs/JKToolKit.TemplatePropertyGenerator#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"InterceptorTemplate by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/InterceptorTemplate","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#info","content":" info Name: InterceptorTemplate Package Description Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_InterceptorTemplate/ You can find more details at https://github.com/ignatandrei/RSCG_InterceptorTemplate Source: https://github.com/ignatandrei/RSCG_InterceptorTemplate  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#original-readme","content":" note RSCG_InterceptorTemplate Interceptor template - supported from &gt;= .NET 8.0 . Uses also experimental interceptor feature from C#12.0 It can rewrite any method call to any other method call. It can also rewrite any method call to any other method call with the same signature. It can also rewrite any method call to any other method call with the same signature and the same return type. It does not ( yet ) support generic methods. For example, if you have a method call like this: Console.WriteLine(&quot;and now with argument &quot; + newPerson.TestFullNameWithArguments(&quot;&lt;&quot;,&quot;!+&quot;,&quot;&gt;&quot;,2)); it can intercept it with the arguments . For example, if you use this template public static {{(ser.item.HasTaskReturnType?&quot;async&quot;:&quot;&quot;)}} {{ser.item.TypeReturn}} {{ser.item.MethodSignature}}({{ser.item.ThisArgument}} {{ser.item.ArgumentsForCallMethod}} ) { var cc=Console.BackgroundColor ; try{ Console.BackgroundColor = ConsoleColor.DarkRed; Console.WriteLine(&quot;start specific TestFullNameWithArguments template--&gt;{{ser.item.MethodSignature}}&quot;); Console.WriteLine(&quot;number of arguments = {{ser.item.Arguments.size}}&quot;); {{ for argum in ser.item.Arguments }} Console.WriteLine(&quot;argument {{for.index+1}} type {{argum.Type}} and value = &quot;+ {{argum.Name}}); {{ end }} {{ser.item.ReturnString}} {{(ser.item.HasTaskReturnType ? &quot;await&quot; : &quot;&quot;)}} {{ser.item.CallMethod}}; } finally{ Console.WriteLine(&quot;end specific template--&gt;{{ser.item.MethodSignature}}&quot;); Console.BackgroundColor = cc; } } The final result will be: public static string Intercept_newPerson_TestFullNameWithArguments(this RSCG_DemoObjects.Person newPerson ,string start,string separator,string end,int repeat ) { var cc=Console.BackgroundColor ; try{ Console.BackgroundColor = ConsoleColor.DarkRed; Console.WriteLine(&quot;start specific TestFullNameWithArguments template--&gt;Intercept_newPerson_TestFullNameWithArguments&quot;); Console.WriteLine(&quot;number of arguments = 4&quot;); Console.WriteLine(&quot;argument 1 type string and value = &quot;+ start); Console.WriteLine(&quot;argument 2 type string and value = &quot;+ separator); Console.WriteLine(&quot;argument 3 type string and value = &quot;+ end); Console.WriteLine(&quot;argument 4 type int and value = &quot;+ repeat); return newPerson.TestFullNameWithArguments(start,separator,end,repeat); } finally{ Console.WriteLine(&quot;end specific template--&gt;Intercept_newPerson_TestFullNameWithArguments&quot;); Console.BackgroundColor = cc; } } You can use any template . Some examples at src/RSCG_InterceptorTemplateConsole/Interceptors How to use it​ Add to your project (&gt;= .NET 8 ) the nuget package RSCG_InterceptorTemplate &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_InterceptorTemplate&quot; Version=&quot;8.2023.2811.524&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);RSCG_InterceptorTemplate&lt;/InterceptorsPreviewNamespaces&gt; &lt;/PropertyGroup&gt; Make a folder Interceptors in the project and add also at least the generic interceptor ( see templates at src/RSCG_InterceptorTemplateConsole/Interceptors/ , start with GenericInterceptorForAllMethods.txt ) ```xml &lt;ItemGroup&gt; &lt;!-- &lt;AdditionalFiles Include=&quot;Interceptors\\TestFullNameWithArguments.txt&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; --&gt; &lt;AdditionalFiles Include=&quot;Interceptors\\GenericInterceptorForAllMethods.txt&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; The interceptor will not run template at build time in Visual Studiom, but it will run at build time in dotnet build. For this, you need to have something like that ( powershell file) -I named mine compile.ps1 cls #not necessary for CI builds, but only for debugging purposes Write-Host &quot;delete obj and bin&quot; gci obj -recurse | foreach{ri $_.FullName -recurse -force } gci bin -recurse | foreach{ri $_.FullName -recurse -force } #for windows batch file #setx InterceptMethods &quot;FullName&quot; #echo Environment variable InterceptMethods has been set to %InterceptMethods% #put here the names of the methods you want to intercept , separated by ; $env:InterceptMethods = &quot;FullName;Test;PersonsLoaded;TestFullNameWithArguments;ShowRandomPersonNumber;Connect;SavePerson;InsertPerson&quot; Write-Host &quot;Environment variable $env:InterceptMethods has been set to &quot; $env:InterceptMethods dotnet clean dotnet restore dotnet build /p:EmitCompilerGeneratedFiles=true --disable-build-servers --force #debug only # dotnet run --project RSCG_InterceptorTemplateConsole/RSCG_InterceptorTemplateConsole.csproj Enjoy!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#about","content":" note Andrei Ignat  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#example-source-csproj-source-files","content":" CSharp ProjectProgram.csFullName.txtTestFullNameWithArguments.txtGenericInterceptorForAllMethods.txtIPersonLoader.cs This is the CSharp Project that references InterceptorTemplate &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Interceptors\\TestFullNameWithArguments.txt&quot;&gt; &lt;CopyToOutputDirectory&gt;Never&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;AdditionalFiles Include=&quot;Interceptors\\GenericInterceptorForAllMethods.txt&quot;&gt; &lt;CopyToOutputDirectory&gt;Never&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;AdditionalFiles Include=&quot;Interceptors\\FullName.txt&quot;&gt; &lt;CopyToOutputDirectory&gt;Never&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_InterceptorTemplate&quot; Version=&quot;8.2023.2811.446&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\RSCG_DemoObjects\\RSCG_DemoObjects.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);RSCG_InterceptorTemplate&lt;/InterceptorsPreviewNamespaces&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;TreatWarningsAsErrors&gt;True&lt;/TreatWarningsAsErrors&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#download-example-net--c","content":" tip Download Example project InterceptorTemplate   ","version":"Next","tagName":"h3"},{"title":"Share InterceptorTemplate​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#share-interceptortemplate","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/InterceptorTemplate  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"InterceptorTemplate by Andrei Ignat","url":"/RSCG_Examples/v2/docs/InterceptorTemplate#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"InlineComposition by Black White Yoshi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/InlineComposition","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#info","content":" info Name: InlineComposition A source generator that merges the content of other classes into one class. Author: Black White Yoshi NuGet:https://www.nuget.org/packages/InlineComposition/ You can find more details at https://github.com/BlackWhiteYoshi/InlineComposition Source: https://github.com/BlackWhiteYoshi/InlineComposition  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#original-readme","content":" note InlineComposition A source generator that merges the content of other classes into one class. A simple workaround for struct inheritance or multiple inheritance. Inlined get members of type field, property, event and method (including constructor and finalizer).Attributes and summaries of the inlined members get also inlined.Inheritance and implements declaration are also inlined.Mixing classes and structs works fine (inline struct in class and vice versa). Type Hierarchy / Polymorphism​ Inheritance gives not only all the content of a base class, you get also a type hierarchy and polymorphism. If you need a type hierarchy or polymorphism, you can use interfaces to get the same functionality. using InlineCompositionAttributes; public interface IBaseA { ... } public interface IBaseB { ... } [InlineBase] public class BaseA : IBaseA { ... } [InlineBase] public class BaseB : IBaseB { ... } [Inline&lt;BaseA, BaseB&gt;] public partial class Derived { ... } [...] Derived derived = new(); Console.WriteLine(derived is BaseA); // False Console.WriteLine(derived is BaseB); // False Console.WriteLine(derived is IBaseA); // True Console.WriteLine(derived is IBaseB); // True // polymorphism IBaseA ExampleA(derived); // polymorphism IBaseB ExampleB(derived); static void ExampleA(IBaseA baseA) { ... } static void ExampleB(IBaseB baseB) { ... } [...] // &lt;auto-generated/&gt; public partial class Derived : IBaseA, IBaseB { ... } Conflicts​ Members with the same identifier get merged to a single Member. Make sure merged members have the same signature. Method-bodies are merged together that every method is executed one after another. Merging of nested types is not supported. If a conflict of nested types happens, the first one is taken and the others are ignored. using InlineCompositionAttributes; [InlineBase] public class BaseA { public int MyProperty { get; set; } public void MyMethod() { int a = 5; Console.WriteLine(a); } } [InlineBase] public class BaseB { public int MyProperty { get; set; } public void MyMethod() { int a = 5; Console.WriteLine(a + a); } } [Inline&lt;BaseA, BaseB&gt;] public partial class Derived { ... } [...] // &lt;auto-generated/&gt; public partial class Derived { public int MyProperty { get; set; } public void MyMethod() { { int a = 5; Console.WriteLine(a); } { int a = 5; Console.WriteLine(a + a); } } } Generic classes​ Inlining of generic classes is supported. However, inserting the concrete type in place of the type parameter is done by simple text replacement. There might be situations where things get replaced/not replaced where it should/should not. So when inlining generic classes, better double check the result. using InlineCompositionAttributes; [InlineBase] public class Base&lt;T&gt; { public T MyProperty { get; set; } } [Inline&lt;Base&lt;int&gt;&gt;] public partial class Derived { ... } [...] // &lt;auto-generated/&gt; public partial class Derived { public int MyProperty { get; set; } } Attributes​ InlineAttribute​ Generates a class with the same name and fills it with the content of the classes/structs in the type arguments. If you inline a class/struct that has no InlineBaseAttribute, it will be ignored. using InlineCompositionAttributes; [Inline&lt;Example&gt;] // &quot;Example&quot; must have a InlineBaseAttribute, otherwise it has no effect. public partial class MyClass { ... } [...] // &lt;auto-generated/&gt; public partial class MyClass { ... } This class comes with up to 12 type parameters. If you need more, you can easily create your own suitable one. namespace InlineCompositionAttributes; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] internal sealed class InlineAttribute&lt;T1, ..., TN&gt; : Attribute { } InlineBaseAttribute​ In order Inline works as expected, the classes/structs to inline must be decorated with InlineBase. using InlineCompositionAttributes; [InlineBase] // Itself it does nothing, but this class can now be used as type argument in InlineAttribute. public class MyClass { ... } MapBaseType​ If this flag is set to true, all occurrences of the type of the inlineBase class/struct get replaced with the type of the inlining class/struct. using InlineCompositionAttributes; [InlineBase(MapBaseType = true)] public class Example { public Example Self =&gt; this; } [Inline&lt;Example&gt;] public partial class Derived { ... } [...] // &lt;auto-generated/&gt; public partial class Derived { public Derived Self =&gt; this; } IgnoreInheritenceAndImplements​ If this flag is set to true, the base classes and interfaces of the inlined class are ignored. If you want inline classes that inherit from different base classes, you can use this to avoid to inherit multiple classes. using InlineCompositionAttributes; public abstract class BaseA { ... } public abstract class BaseB { ... } [InlineBase(IgnoreInheritenceAndImplements = true)] public class InlineA : BaseA { ... } [InlineBase] public class InlineB : BaseB { ... } [Inline&lt;InlineA, InlineB&gt;] public partial class Derived { ... } [...] // &lt;auto-generated/&gt; public partial class Derived : BaseB { ... } InlineAttributes​ If this flag is set to true, attributes applied to this class/struct are inlined as well. The attribute [InlineBase] itself is ignored. using InlineCompositionAttributes; [SomeAttribute] [InlineBase(InlineAttributes = true)] public class Example { ... } [Inline&lt;Example&gt;] public partial class Derived { ... } [...] // &lt;auto-generated/&gt; [SomeAttribute] public partial class Derived { ... } InlineMethodAttribute​ Overriding a normal method and adding your own code is native not possible. The InlineMethodAttribute gives support for adding code to the inlined method. The content of the decorated method is added to the inlined method specified in the MethodName parameter and takes the same parameters. using InlineCompositionAttributes; [InlineBase] public class Base : IDisposable { public void Dispose() { Console.WriteLine(&quot;base&quot;); } } [Inline&lt;Base&gt;] public partial class Derived { [InlineMethod(MethodName = &quot;Dispose&quot;)] public void DisposePartial() { Console.WriteLine(&quot;derived&quot;); } } [...] // &lt;auto-generated/&gt; public partial class Derived : IDisposable { [InlineMethod(MethodName = &quot;Dispose&quot;)] public void Dispose() { { Console.WriteLine(&quot;base&quot;); } { Console.WriteLine(&quot;derived&quot;); } } } MethodName​ The MethodName is a required parameter that specify the name of the method to add content to. Make sure the parameters are the same to target the right (overloaded) method. using InlineCompositionAttributes; [InlineBase] public class Base { public void PrintSum(int a, int b) { Console.WriteLine(a + b); } } [Inline&lt;Base&gt;] public partial class Derived { [InlineMethod(MethodName = &quot;PrintSum(int, int)&quot;)] public void PrintSumPartial(int a, int b) { Console.WriteLine(b + a); } } [...] // &lt;auto-generated/&gt; public partial class Derived { [InlineMethod(MethodName = &quot;PrintSum(int, int)&quot;)] public void PrintSum() { { Console.WriteLine(a + b); } { Console.WriteLine(b + a); } } } Modifiers​ When inlining your method-body in a method, the summary, attributes and modifiers are overwritten with your method. If you want different modifiers inlined than your method, you can use the Modifiers parameter. A common scenario is that your method should not be available (private), but the inlined method should still be public. using InlineCompositionAttributes; [InlineBase] public class Base : IDisposable { public void Dispose() { Console.WriteLine(&quot;base&quot;); } } [Inline&lt;Base&gt;] public partial class Derived { [InlineMethod(MethodName = &quot;Dispose&quot;, Modifiers = &quot;public&quot;)] private void DisposePartial() { Console.WriteLine(&quot;derived&quot;); } } [...] // &lt;auto-generated/&gt; public partial class Derived : IDisposable { [InlineMethod(MethodName = &quot;Dispose&quot;, Modifiers = &quot;public&quot;)] public void Dispose() { { Console.WriteLine(&quot;base&quot;); } { Console.WriteLine(&quot;derived&quot;); } } } First​ When the added code must run before the inlined code, you can set the First parameter to true. using InlineCompositionAttributes; [InlineBase] public class Base : IDisposable { public void Dispose() { Console.WriteLine(&quot;base&quot;); } } [Inline&lt;Base&gt;] public partial class Derived { [InlineMethod(MethodName = &quot;Dispose&quot;, First = true)] public void DisposePartial() { Console.WriteLine(&quot;derived&quot;); } } [...] // &lt;auto-generated/&gt; public partial class Derived : IDisposable { [InlineMethod(MethodName = &quot;Dispose&quot;)] public void Dispose() { { Console.WriteLine(&quot;derived&quot;); } { Console.WriteLine(&quot;base&quot;); } } } InlineConstructorAttribute​ The InlineConstructorAttribute lets you add code to the inlined constructor. The content of the decorated method is added to the inlined constructor. using InlineCompositionAttributes; [InlineBase] public class Base { public Base() { Console.WriteLine(&quot;base&quot;); } } [Inline&lt;Base&gt;] public partial class Derived { [InlineConstructor] public void ConstructorPartial() { Console.WriteLine(&quot;derived&quot;); } } [...] // &lt;auto-generated/&gt; public partial class Derived { [InlineConstructor] public Derived() { { Console.WriteLine(&quot;base&quot;); } { Console.WriteLine(&quot;derived&quot;); } } } Modifiers​ The same functionality as InlineMethodAttribute.Modifiers First​ The same functionality as InlineMethodAttribute.First InlineFinalizerAttribute​ The InlineFinalizerAttribute lets you add code to the inlined finalizer. The content of the decorated method is added to the inlined finalizer. [InlineBase] public class Base { ~Base() { Console.WriteLine(&quot;base&quot;); } } [Inline&lt;Base&gt;] public partial class Derived { [InlineFinalizer] public void FinalizerPartial() { Console.WriteLine(&quot;derived&quot;); } } [...] // &lt;auto-generated/&gt; public partial class Derived { [InlineFinalizer] ~Derived() { { Console.WriteLine(&quot;base&quot;); } { Console.WriteLine(&quot;derived&quot;); } } } First​ The same functionality as InlineMethodAttribute.First NoInlineAttribute​ Members decorated with this attribute are ignored. using InlineCompositionAttributes; [InlineBase] public class MyBase { [NoInline] private int myField; public int MyProperty { get; set; } } [Inline&lt;MyBase&gt;] public partial class Derived { ... } [...] // &lt;auto-generated/&gt; public partial class Derived { public int MyProperty { get; set; } } Disable Attribute Generation​ You can disable the generation of the attributes by defining a constant for your compilation: &lt;PropertyGroup&gt; &lt;DefineConstants&gt;INLINECOMPOSITION_EXCLUDE_ATTRIBUTES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; This functionality is specific for the use case when you have a project referencing another project, both projects using this generator and you have InternalsVisibleTo enabled. In that case you have the attributes defined twice in your referencing project and you get a warning about that. By defining this constant in your referencing project, you prevent one generation, so the attributes are only defined once in the referenced project.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#about","content":" note Mixin classes and interfaces together  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csEmployee.csIId.cs This is the CSharp Project that references InlineComposition &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;InlineComposition&quot; Version=&quot;1.4.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  InlineAttribute.g.csInlineBaseAttribute.g.csInlineConstructorAttribute.g.csInlineFinalizerAttribute.g.csInlineMethodAttribute.g.csMixinConsoleDemo.Employee.g.csNoInlineAttribute.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations #if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES using System; namespace InlineCompositionAttributes; /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6, T7&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T8&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T8&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T9&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T8&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T9&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T10&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T8&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T9&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T10&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T11&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; : Attribute { } /// &lt;summary&gt; /// Generates a partial class/struct which includes all members listed in the typeParams. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T8&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T9&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T10&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T11&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T12&quot;&gt;class/struct which members gets inlined.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;InlineComposition&quot;, &quot;1.4.0&quot;)] internal sealed class InlineAttribute&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; : Attribute { } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#download-example-net--c","content":" tip Download Example project InlineComposition   ","version":"Next","tagName":"h3"},{"title":"Share InlineComposition​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#share-inlinecomposition","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/InlineComposition  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"InlineComposition by Black White Yoshi","url":"/RSCG_Examples/v2/docs/InlineComposition#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"JsonPolymorphicGenerator by surgicalcoder","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#info","content":" info Name: JsonPolymorphicGenerator Source Code Generator for System.Text.Json JsonDerivedType attributes on polymorphic classes Author: surgicalcoder NuGet:https://www.nuget.org/packages/GoLive.Generator.JsonPolymorphicGenerator/ You can find more details at https://github.com/surgicalcoder/JsonPolymorphicGenerator Source: https://github.com/surgicalcoder/JsonPolymorphicGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#original-readme","content":" note JsonPolymorphicGenerator c# / .net Source Code Generator for System.Text.Json JsonDerivedType attributes on polymorphic classes Usage​ For this, your base classes need the partial and abstract key words, and be decorated with JsonPolymorphic, and there need to be derived types in that same assembly for this to work. An example of this is: [JsonPolymorphic] public abstract partial class BaseClass { public string Property1 { get; set; } } This will then generate a partial class, that is decorated with the JsonDerivedType attribute, and use the class name as the discriminator. [JsonDerivedType(typeof(GoLive.JsonPolymorphicGenerator.Playground.InheritedClass1), &quot;InheritedClass1&quot;)] [JsonDerivedType(typeof(GoLive.JsonPolymorphicGenerator.Playground.InheritedClass2), &quot;InheritedClass2&quot;)] public partial class BaseClass { } You can now transform the text of the attributes that gets spat out! You have a number of options, that gets added to an .editorconfig, such as: root = true [*.cs] jsonpolymorphicgenerator.text_preappend = JSON_ jsonpolymorphicgenerator.text_transform = return classname.GetHashCode().ToString() jsonpolymorphicgenerator.text_postappend = _A For the jsonpolymorphicgenerator.text_transform option, you have to provide valid c# code, that returns a string - there are 2 input variables - classname and namespacename  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#about","content":" note Generating JsonDerivedType to be added to the base class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references JsonPolymorphicGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;GoLive.Generator.JsonPolymorphicGenerator&quot; Version=&quot;1.0.4&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.g.cs using System.Text.Json.Serialization; namespace JsonPolymorphicGeneratorDemo { [JsonDerivedType(typeof(JsonPolymorphicGeneratorDemo.Teacher), &quot;Teacher&quot;)] [JsonDerivedType(typeof(JsonPolymorphicGeneratorDemo.Student), &quot;Student&quot;)] public partial class Person { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#download-example-net--c","content":" tip Download Example project JsonPolymorphicGenerator   ","version":"Next","tagName":"h3"},{"title":"Share JsonPolymorphicGenerator​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#share-jsonpolymorphicgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/JsonPolymorphicGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Serializer\" has the following generators:​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#category-serializer-has-the-following-generators","content":" 1 GenPack  2 jsonConverterSourceGenerator  3 JsonPolymorphicGenerator  4 ProtobufSourceGenerator  5 StackXML  6 System.Text.Json  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"JsonPolymorphicGenerator by surgicalcoder","url":"/RSCG_Examples/v2/docs/JsonPolymorphicGenerator#see-category","content":" Serializer ","version":"Next","tagName":"h3"},{"title":"jos.enumeration by Josef Ottosson","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/jos.enumeration","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#info","content":" info Name: jos.enumeration Package Description Author: Josef Ottosson NuGet:https://www.nuget.org/packages/jos.enumeration/ You can find more details at https://github.com/joseftw/jos.enumeration Source: https://github.com/joseftw/jos.enumeration  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#original-readme","content":" note JOS.Enumeration Enumeration implementation with source generation support. Installation​ JOS.Enumeration​ Contains the IEnumeration interface and a System.Text.Json JsonConverter. The JOS.Enumeration.SourceGenerator package contains the actual source generator. Don't forget to install that one as well. 😃 dotnet add package JOS.Enumeration dotnet add package JOS.Enumeration.SourceGenerator JOS.Enumeration.Database.Dapper​ Contains a custom TypeHandler to use with Dapper. dotnet add package JOS.Enumeration.Database.Dapper JOS.Enumeration.Database.EntityFrameworkCore​ Contains ConfigureEnumeration extension method to allow usage with EntityFramework Core. dotnet add package JOS.Enumeration.Database.EntityFrameworkCore Usage​ Create a new partial record or classImplement the IEnumeration&lt;T&gt; interfaceAdd your Enumeration items public partial record Hamburger : IEnumeration&lt;Hamburger&gt; { public static readonly Hamburger Cheeseburger = new (1, &quot;Cheeseburger&quot;); public static readonly Hamburger BigMac = new(2, &quot;Big Mac&quot;); public static readonly Hamburger BigTasty = new(3, &quot;Big Tasty&quot;); } The source generator will implement the following interface: // Default implementation -&gt; int as Value public interface IEnumeration&lt;T&gt; : IEnumeration&lt;int, T&gt; where T : IEnumeration&lt;T&gt; { } public interface IEnumeration&lt;TValue, TType&gt; where TValue : IConvertible { TValue Value { get; } string Description { get; } static abstract IReadOnlySet&lt;TType&gt; GetAll(); static abstract IEnumerable&lt;TType&gt; GetEnumerable(); static abstract TType FromValue(TValue value); static abstract TType FromDescription(string description); static abstract TType FromDescription(ReadOnlySpan&lt;char&gt; description); static abstract Type ValueType { get; } } The following code will be generated: [System.Diagnostics.DebuggerDisplay(&quot;{Description}&quot;)] [System.CodeDom.Compiler.GeneratedCode(&quot;JOS.Enumeration.SourceGenerator&quot;, &quot;4.1.11-beta+afeaa87a52&quot;)] [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public partial record Hamburger : IComparable&lt;JOS.Enumerations.Hamburger&gt; { private static readonly IReadOnlySet&lt;JOS.Enumerations.Hamburger&gt; AllItems; static Hamburger() { AllItems = new HashSet&lt;JOS.Enumerations.Hamburger&gt;(3) { Cheeseburger, BigMac, BigTasty, }.ToFrozenSet(); } private Hamburger(int value, string description) { Value = value; Description = description ?? throw new ArgumentNullException(nameof(description)); } public int Value { get; } public string Description { get; } public static IReadOnlySet&lt;JOS.Enumerations.Hamburger&gt; GetAll() { return AllItems; } public static IEnumerable&lt;JOS.Enumerations.Hamburger&gt; GetEnumerable() { yield return Cheeseburger; yield return BigMac; yield return BigTasty; } public static JOS.Enumerations.Hamburger FromValue(int value) { return value switch { 1 =&gt; Cheeseburger, 2 =&gt; BigMac, 3 =&gt; BigTasty, _ =&gt; throw new InvalidOperationException($&quot;'{value}' is not a valid value in 'JOS.Enumerations.Hamburger'&quot;)}; } public static JOS.Enumerations.Hamburger FromDescription(string description) { return description switch { &quot;Cheeseburger&quot; =&gt; Cheeseburger, &quot;Big Mac&quot; =&gt; BigMac, &quot;Big Tasty&quot; =&gt; BigTasty, _ =&gt; throw new InvalidOperationException($&quot;'{description}' is not a valid description in 'JOS.Enumerations.Hamburger'&quot;)}; } public static JOS.Enumerations.Hamburger FromDescription(ReadOnlySpan&lt;char&gt; description) { return description switch { &quot;Cheeseburger&quot; =&gt; Cheeseburger, &quot;Big Mac&quot; =&gt; BigMac, &quot;Big Tasty&quot; =&gt; BigTasty, _ =&gt; throw new InvalidOperationException($&quot;'{description}' is not a valid description in 'JOS.Enumerations.Hamburger'&quot;)}; } public static Type ValueType =&gt; typeof(int); public int CompareTo(JOS.Enumerations.Hamburger? other) =&gt; Value.CompareTo(other!.Value); public static implicit operator int (JOS.Enumerations.Hamburger item) =&gt; item.Value; public static implicit operator JOS.Enumerations.Hamburger(int value) =&gt; FromValue(value); } Features​ Generic valueGenerated IComparable&lt;T&gt; method.Generated implicit operators (convert to/from int).Generated optimized GetAll, FromValue and FromDescription methods.System.Text.Json supportDatabase support (Dapper and EF Core). Generic value​ It's possible to use a generic value instead of the default int value by implementing the IEnumeration&lt;TValue, TEnumeration&gt; interface. public partial record Car : IEnumeration&lt;string, Car&gt; { public static readonly Car FerrariSpider = new(&quot;ferrari-spider&quot;, &quot;Ferrari Spider&quot;); public static readonly Car TeslaModelY = new(&quot;tesla-model-y&quot;, &quot;Tesla Model Y&quot;); } TValue has a IConvertible constraint. The following types has been tested and are guaranteed to work: int (default)booldecimallongstringuintulong JSON​ The package comes with a JsonConverterFactory. Example: var jsonSerializerOptions = new JsonSerializerOptions { Converters = { new EnumerationJsonConverterFactory() } }; It supports the following scenarios: Serializing to TValueDeserializing from TValue If you want any other behaviour, just create your own converter and register it. Database​ public class MyEntity { public MyEntity(Guid id, Hamburger hamburger) { Id = id; Hamburger = hamburger; } public Guid Id { get; } public Hamburger Hamburger { get; } } Dapper​ Register the TypeHandler: SqlMapper.AddTypeHandler(new EnumerationTypeHandler&lt;Hamburger&gt;())Query like this: var results = (await actConnection.QueryAsync&lt;MyEntity&gt;( &quot;SELECT id, hamburger from my_entities WHERE id = @id&quot;, new {id = myEntity.Id})).ToList(); EF Core​ Configure your DB Context public DbSet&lt;MyEntity&gt; MyEntities { get; set; } = null!; protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.ApplyConfigurationsFromAssembly(typeof(JosEnumerationDbContext).Assembly); } public class MyEntityEntityTypeConfiguration : IEntityTypeConfiguration&lt;MyEntity&gt; { public void Configure(EntityTypeBuilder&lt;MyEntity&gt; builder) { builder.HasKey(x =&gt; x.Id); builder.Property(x =&gt; x.Hamburger).ConfigureEnumeration().IsRequired(); } } Query: var result = await myDbContext.MyEntities.FirstAsync(x =&gt; x.Id == myEntity.Id); Primitive Collections​ Support for primitive collections in net8.0 can be configured like this: EF Core​ public void Configure(EntityTypeBuilder&lt;MyEntity&gt; builder) { builder.ConfigureEnumeration&lt;MyEntity, string, Car&gt;(x =&gt; x.Cars); } Dapper​ SqlMapper.AddTypeHandler(new EnumerationArrayTypeHandler&lt;string, Car&gt;());   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#about","content":" note Generating enum from static consts  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#example-source-csproj-source-files","content":" CSharp ProjectProgram.csCarTypes.cs This is the CSharp Project that references jos.enumeration &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;JOS.Enumeration&quot; Version=&quot;4.0.2&quot; /&gt; &lt;PackageReference Include=&quot;JOS.Enumeration.SourceGenerator&quot; Version=&quot;4.0.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  CarTypes.Implementation.generated.csEnumerations.generated.cs // &lt;auto-generated&gt; // This code was auto generated by JOS.Enumeration.SourceGenerator // &lt;/auto-generated&gt; #nullable enable using System; using System.Collections; using System.Collections.Generic; #if NET8_0_OR_GREATER using System.Collections.Frozen; #endif using JOS.Enumeration; namespace EnumDemo; [System.Diagnostics.DebuggerDisplay(&quot;{Description}&quot;)] [System.CodeDom.Compiler.GeneratedCode(&quot;JOS.Enumeration.SourceGenerator&quot;, null)] partial record CarTypes : IComparable&lt;EnumDemo.CarTypes&gt; { private static readonly IReadOnlySet&lt;EnumDemo.CarTypes&gt; AllItems; static CarTypes() { AllItems = new HashSet&lt;EnumDemo.CarTypes&gt;(4) { Dacia, Tesla, BMW, Mercedes, }.ToFrozenSet(); } private CarTypes(int value, string description) { Value = value; Description = description ?? throw new ArgumentNullException(nameof(description)); } public int Value { get; } public string Description { get; } public static IReadOnlySet&lt;EnumDemo.CarTypes&gt; GetAll() { return AllItems; } public static IEnumerable&lt;EnumDemo.CarTypes&gt; GetEnumerable() { yield return Dacia; yield return Tesla; yield return BMW; yield return Mercedes; } public static EnumDemo.CarTypes FromValue(int value) { return value switch { 1 =&gt; Dacia, 2 =&gt; Tesla, 3 =&gt; BMW, 4 =&gt; Mercedes, _ =&gt; throw new InvalidOperationException($&quot;'{value}' is not a valid value in 'EnumDemo.CarTypes'&quot;)}; } public static EnumDemo.CarTypes FromDescription(string description) { return description switch { &quot;Dacia&quot; =&gt; Dacia, &quot;Tesla&quot; =&gt; Tesla, &quot;BMW&quot; =&gt; BMW, &quot;Mercedes&quot; =&gt; Mercedes, _ =&gt; throw new InvalidOperationException($&quot;'{description}' is not a valid description in 'EnumDemo.CarTypes'&quot;)}; } public static EnumDemo.CarTypes FromDescription(ReadOnlySpan&lt;char&gt; description) { return description switch { &quot;Dacia&quot; =&gt; Dacia, &quot;Tesla&quot; =&gt; Tesla, &quot;BMW&quot; =&gt; BMW, &quot;Mercedes&quot; =&gt; Mercedes, _ =&gt; throw new InvalidOperationException($&quot;'{description}' is not a valid description in 'EnumDemo.CarTypes'&quot;)}; } public static Type ValueType =&gt; typeof(int); public int CompareTo(EnumDemo.CarTypes? other) =&gt; Value.CompareTo(other!.Value); public static implicit operator int (EnumDemo.CarTypes item) =&gt; item.Value; public static implicit operator EnumDemo.CarTypes(int value) =&gt; FromValue(value); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#download-example-net--c","content":" tip Download Example project jos.enumeration   ","version":"Next","tagName":"h3"},{"title":"Share jos.enumeration​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#share-josenumeration","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/jos.enumeration  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"jos.enumeration by Josef Ottosson","url":"/RSCG_Examples/v2/docs/jos.enumeration#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"jab by Pavel Krymets","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/jab","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#info","content":" info Name: jab Package Description Author: Pavel Krymets NuGet:https://www.nuget.org/packages/jab/ You can find more details at https://github.com/pakrym/jab Source: https://github.com/pakrym/jab  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#original-readme","content":" note Jab Compile Time Dependency Injection Jab provides a C# Source Generator based dependency injection container implementation. Fast startup (200x faster than Microsoft.Extensions.DependencyInjection). Details.Fast resolution (7x faster than Microsoft.Extensions.DependencyInjection). Details.No runtime dependencies.AOT and linker friendly, all code is generated during project compilation.Clean stack traces: Readable generated code: Registration validation. Container configuration issues become compiler errors: Incremental generation, .NET 5/6/7/8 SDK support, .NET Standard 2.0 support, [Unity support](https://github.com/pakrym/jab/README.md#Unity-installation Example​ Add Jab package reference: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Jab&quot; Version=&quot;0.10.2&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; Define a service and implementation: internal interface IService { void M(); } internal class ServiceImplementation : IService { public void M() { } } Define a composition root and register services: [ServiceProvider] [Transient(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } Use the service provider: MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IService&gt;(); Features​ No runtime dependency, safe to use in librariesTransient, Singleton, Scoped service registrationNamed registrationsFactory registrationInstance registrationIEnumerable resolutionIDisposable and IAsyncDisposable supportIServiceProvider support The plan is to support the minimum feature set Microsoft.Extensions.DependencyInjection.Abstraction requires but NOT the IServiceCollection-based registration syntax as it is runtime based. Singleton services​ Singleton services are created once per container lifetime in a thread-safe manner and cached. To register a singleton service use the SingletonAttribute: [ServiceProvider] [Singleton(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } Singleton Instances​ If you want to use an existing object as a service define a property in the container declaration and use the Instance property of the SingletonAttribute to register the service: [ServiceProvider] [Singleton(typeof(IService), Instance = nameof(MyServiceInstance))] internal partial class MyServiceProvider { public IService MyServiceInstance { get;set; } } Then initialize the property during the container creation: MyServiceProvider c = new MyServiceProvider(); c.MyServiceInstance = new ServiceImplementation(); IService service = c.GetService&lt;IService&gt;(); Named services​ Use the Name property to assign a name to your service registrations and [FromNamedServices(&quot;...&quot;)] attribute to resolve a service using its name. [ServiceProvider] [Singleton(typeof(INotificationService), typeof(EmailNotificationService), Name=&quot;email&quot;)] [Singleton(typeof(INotificationService), typeof(SmsNotificationService), Name=&quot;sms&quot;)] [Singleton(typeof(Notifier))] internal partial class MyServiceProvider {} class Notifier { public Notifier( [FromNamedServices(&quot;email&quot;)] INotificationService email, [FromNamedServices(&quot;sms&quot;)] INotificationService sms) {} } NOTE: Jab also recognizes the [FromKeyedServices] attribute from Microsoft.Extensions.DependencyInjection. Factories​ Sometimes it's useful to provide a custom way to create a service instance without using the automatic construction selection. To do this define a method in the container declaration and use the Factory property of the SingletonAttribute or TransientAttribute to register the service: [ServiceProvider] [Transient(typeof(IService), Factory = nameof(MyServiceFactory))] internal partial class MyServiceProvider { public IService MyServiceFactory() =&gt; new ServiceImplementation(); } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IService&gt;(); When using with TransientAttribute the factory method would be invoked for every service resolution. When used with SingletonAttribute it would only be invoked the first time the service is requested. Similar to constructors, factories support parameter injection: [ServiceProvider] [Transient(typeof(IService), Factory = nameof(MyServiceFactory))] [Transient(typeof(SomeOtherService))] internal partial class MyServiceProvider { public IService MyServiceFactory(SomeOtherService other) =&gt; new ServiceImplementation(other); } Scoped Services​ Scoped services are created once per service provider scope. To create a scope use the CreateScope() method of the service provider. Service are resolved from the scope using the GetService&lt;IService&gt;() call. [ServiceProvider] [Scoped(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); using MyServiceProvider.Scope scope = c.CreateScope(); IService service = scope.GetService&lt;IService&gt;(); When the scope is disposed all IDisposable and IAsyncDisposable services that were resolved from it are disposed as well. Generic registration attributes​ You can use generic attributes to register services if your project targets net7.0 or net6.0 and has LangVersion set to preview. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFrameworks&gt;net7.0&lt;/TargetFrameworks&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt; Generic attributes allow declaration to be more compact by avoiding the typeof calls: [ServiceProvider] [Scoped&lt;IService, ServiceImplementation&gt;] [Import&lt;IMyModule&gt;] internal partial class MyServiceProvider { } Modules​ Often, a set of service registrations would represent a distinct set of functionality that can be included into arbitrary service provider. Modules are used to implement registration sharing. To define a module create an interface and mark it with ServiceProviderModuleAttribute. Service registrations can be listed in module the same way they are in the service provider. [ServiceProviderModule] [Singleton(typeof(IService), typeof(ServiceImplementation))] public interface IMyModule { } To use the module apply the Import attribute to the service provider type: [ServiceProvider] [Import(typeof(IMyModule))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IEnumerable&lt;IService&gt;&gt;(); Modules can import other modules as well. NOTE: module service and implementation types have to be accessible from the project where service provider is generated. Root services​ By default, IEnumerable&lt;...&gt; service accessors are only generated when requested by other service constructors. If you would like to have a root IEnumerable&lt;..&gt; accessor generated use the RootService parameter of the ServiceProvider attribute. The generator also scans all the GetService&lt;...&gt; usages and tries to all collected type arguments as the root service. [ServiceProvider(RootServices = new [] {typeof(IEnumerable&lt;IService&gt;)})] [Singleton(typeof(IService), typeof(ServiceImplementation))] [Singleton(typeof(IService), typeof(ServiceImplementation))] [Singleton(typeof(IService), typeof(ServiceImplementation))] internal partial class MyServiceProvider { } MyServiceProvider c = new MyServiceProvider(); IService service = c.GetService&lt;IEnumerable&lt;IService&gt;&gt;(); Samples​ Console application​ Sample Jab usage in console application can be found in src/samples/ConsoleSample Performance​ The performance benchmark project is available in src/Jab.Performance/. Startup time​ The startup time benchmark measures time between application startup and the first service being resolved. | Method | Mean | Error | StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated | |------- |------------:|----------:|----------:|-------:|--------:|-------:|-------:|------:|----------:| | MEDI | 2,437.88 ns | 14.565 ns | 12.163 ns | 220.91 | 2.72 | 0.6332 | 0.0114 | - | 6632 B | | Jab | 11.03 ns | 0.158 ns | 0.123 ns | 1.00 | 0.00 | 0.0046 | - | - | 48 B | GetService​ The GetService benchmark measures the provider.GetService&lt;IService&gt;() call. | Method | Mean | Error | StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated | |------- |----------:|----------:|----------:|------:|--------:|-------:|------:|------:|----------:| | MEDI | 39.340 ns | 0.2419 ns | 0.2263 ns | 7.01 | 0.09 | 0.0023 | - | - | 24 B | | Jab | 5.619 ns | 0.0770 ns | 0.0643 ns | 1.00 | 0.00 | 0.0023 | - | - | 24 B | Unity installation​ Navigate to the Packages directory of your project.Adjust the project manifest file manifest.json in a text editor.Ensure https://registry.npmjs.org/ is part of scopedRegistries.Ensure com.pakrym is part of scopes.Add com.pakrym.jab to the dependencies, stating the latest version. A minimal example ends up looking like this: { &quot;scopedRegistries&quot;: [ { &quot;name&quot;: &quot;npmjs&quot;, &quot;url&quot;: &quot;https://registry.npmjs.org/&quot;, &quot;scopes&quot;: [ &quot;com.pakrym&quot; ] } ], &quot;dependencies&quot;: { &quot;com.pakrym.jab&quot;: &quot;0.10.2&quot;, ... } } Debugging locally​ Run dotnet build /t:CreateLaunchSettings in the Jab.Tests directory would update the Jab\\Properties\\launchSettings.json file to include csc invocation that allows F5 debugging of the generator targeting the Jab.Tests project.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#about","content":" note generating DI code  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.csDatabaseCon.cs This is the CSharp Project that references jab &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Jab&quot; Version=&quot;0.10.2&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attributes.csMyServiceProvider.Generated.cs // &lt;auto-generated/&gt; #if !JAB_ATTRIBUTES_REFERENCED || JAB_ATTRIBUTES_PACKAGE using System; using System.Threading.Tasks; #nullable enable namespace Jab { [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ServiceProviderAttribute: Attribute { public Type[]? RootServices { get; set; } } [AttributeUsage(AttributeTargets.Interface, AllowMultiple = false, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ServiceProviderModuleAttribute: Attribute { } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ImportAttribute: Attribute { public Type ModuleType { get; } public ImportAttribute(Type moduleType) { ModuleType = moduleType; } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class SingletonAttribute: Attribute { public Type ServiceType { get; } public string? Name { get; set; } public Type? ImplementationType { get; } public string? Instance { get; set; } public string? Factory { get; set; } public SingletonAttribute(Type serviceType) { ServiceType = serviceType; } public SingletonAttribute(Type serviceType, Type implementationType) { ServiceType = serviceType; ImplementationType = implementationType; } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class TransientAttribute : Attribute { public Type ServiceType { get; } public string? Name { get; set; } public Type? ImplementationType { get; } public string? Factory { get; set; } public TransientAttribute(Type serviceType) { ServiceType = serviceType; } public TransientAttribute(Type serviceType, Type implementationType) { ServiceType = serviceType; ImplementationType = implementationType; } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ScopedAttribute : Attribute { public Type ServiceType { get; } public string? Name { get; set; } public Type? ImplementationType { get; } public string? Factory { get; set; } public ScopedAttribute(Type serviceType) { ServiceType = serviceType; } public ScopedAttribute(Type serviceType, Type implementationType) { ServiceType = serviceType; ImplementationType = implementationType; } } [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class FromNamedServicesAttribute : Attribute { public string? Name { get; set; } public FromNamedServicesAttribute(string name) { Name = name; } } #if GENERIC_ATTRIBUTES [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ImportAttribute&lt;TModule&gt; : ImportAttribute { public ImportAttribute() : base(typeof(TModule)) { } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class TransientAttribute&lt;TService&gt; : TransientAttribute { public TransientAttribute() : base(typeof(TService)) { } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class TransientAttribute&lt;TService, TImpl&gt; : TransientAttribute where TImpl: TService { public TransientAttribute() : base(typeof(TService), typeof(TImpl)) { } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ScopedAttribute&lt;TService&gt; : ScopedAttribute { public ScopedAttribute() : base(typeof(TService)) { } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class ScopedAttribute&lt;TService, TImpl&gt; : ScopedAttribute where TImpl: TService { public ScopedAttribute() : base(typeof(TService), typeof(TImpl)) { } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class SingletonAttribute&lt;TService&gt; : SingletonAttribute { public SingletonAttribute() : base(typeof(TService)) { } } [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif class SingletonAttribute&lt;TService, TImpl&gt; : SingletonAttribute where TImpl: TService { public SingletonAttribute() : base(typeof(TService), typeof(TImpl)) { } } #endif #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif interface IServiceProvider&lt;T&gt; { T GetService(); } #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif interface INamedServiceProvider&lt;T&gt; { T GetService(string name); } #if JAB_ATTRIBUTES_PACKAGE public #else [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Jab&quot;, null)] internal #endif static class JabHelpers { public static InvalidOperationException CreateServiceNotFoundException&lt;T&gt;(string? name = null) =&gt; CreateServiceNotFoundException(typeof(T), name); public static InvalidOperationException CreateServiceNotFoundException(Type type, string? name = null) =&gt; new InvalidOperationException( name != null ? $&quot;Service with type {type} and name {name} not registered&quot; : $&quot;Service with type {type} not registered&quot;); } } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#download-example-net--c","content":" tip Download Example project jab   ","version":"Next","tagName":"h3"},{"title":"Share jab​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#share-jab","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/jab  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"jab by Pavel Krymets","url":"/RSCG_Examples/v2/docs/jab#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"Larcanum.GitInfo by","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#info","content":" info Name: Larcanum.GitInfo Package Description Author: NuGet:https://www.nuget.org/packages/Larcanum.GitInfo/ You can find more details at https://github.com/lord-executor/Larcanum.GitInfo Source: https://github.com/lord-executor/Larcanum.GitInfo  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#original-readme","content":" note Overview Larcanum.GitInfo is a package that you can add to your project to get access to some basic git information directly in your source code through a generated GitInfo class and some build integration to configure MSBuild to use the version information extracted from git. The goal of the package is to simplify versioning of library packages and binaries based on git conventions. Being able to statically access basic git version information is also very useful in the context of applications and web services since this allows that information to be exposed to the end user. This also works during development which turns out to be rather useful when working with various different versions of web service projects at the same time. This package is designed to be as simple as possible while still getting the job done and to that end, it makes some relatively strong assumptions. The code is C#, using language version 10 or above VB support could be added in the future if somebody needs that The .NET Framework version being used is reasonable new (.NET 6+ should do it)The git binary is present in the PATH This can be configured manually, but by default it assumes that git is in the PATH and there is no attempt at discovering other locations The target project is using Semantic VersioningThe target project is using git tags as the primary source of version information Usage of the package is very simple too as you can see in the GitInfo.Out sample project in the &quot;src&quot; directory. All that is needed is a package reference and that's it. You have access to the GitInfo class. If you need more features than what Larcanum.GitInfo provides, then you have three options You can create an issue here and if it falls within the scope of the project, then it will likely be added More customization options in the form of configurable variants are good candidates for this You can fork this project and customize from there As stated above, the simplicity of the implementation was a primary design goal which makes it easy for most developers to understand and thus easy to customize You can use devlooped/GitInfo instead which has very similar functionality but has way more features Also note that said project comes with SponsorLink which is not everybody's cup of tea How to Use It Assuming that you already have a project with a git repository, all you have to do is add the package with dotnet add package Larcanum.GitInfo This will add the source generator and build files as a development dependency, which means that it is isolated to the project it is added to and does not &quot;leak&quot; to other projects. This is what the package reference in the project file looks like. &lt;PackageReference Include=&quot;Larcanum.GitInfo&quot; Version=&quot;1.0.0&quot;&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;/PackageReference&gt; By default, the GitInfo class is added to the project's root namespace which in this example is &quot;DemoProj&quot;. We can output the current version to the console with Console.WriteLine($&quot;Version: {DemoProj.GitInfo.Tag}&quot;); What it Looks Like The generated code looks something like the example below which is actually taken from this repository. The information includes: The dirty state of the work tree which is considered dirty if there are any uncommitted changes.The branch and commit information of the current HEAD.The tag description which is assumed to contain a semantic version string.A version string that is compatible with the .NET Version class and is derived from the tag description. NOTE: If you are looking at the generated source file in your IDE, it may not be 100% up to date since IDEs like VisualStudio and Rider try to do some &quot;shortcuts&quot; to optimize the build process which means that the GitInfoFingerprintFiletarget is not always triggered. This should NOT matter, however since any proper dotnet build or packing or publishing will include that target and thus the GitInfo class that is actually part of the final assembly will be up to date. [assembly: System.Reflection.AssemblyVersion(&quot;0.5.0&quot;)] [assembly: System.Reflection.AssemblyFileVersion(&quot;0.5.0&quot;)] [assembly: System.Reflection.AssemblyInformationalVersion(&quot;v0.5.0&quot;)] namespace Larcanum.GitInfo.UnitTests; public partial class GitInfo { public const bool IsDirty = true; public const string Branch = @&quot;main&quot;; public const string CommitShortHash = @&quot;a777e94&quot;; public const string CommitHash = @&quot;a777e94677cbe32c3d2d1c1582ecdbf75ac159f8&quot;; public const string CommitDate = @&quot;2024-12-23T11:54:14+01:00&quot;; public const string Tag = @&quot;v0.5.0&quot;; public const string DotNetVersion = @&quot;0.5.0&quot;; } If the current HEAD is tagged, then the tag is the description and if it contains a semantic version, this will be extracted as the .NET version e.g. v0.5.0 / 0.5.0 If the current HEAD is not tagged, but there is a previous tag in the commit history, then the tag description will include the tag as well as the number of commits since that tag and the short commit hash e.g. v0.5.0-1-g7af059a / 0.5.0 If there is no tag between the current HEAD and the root, then the tag description will just consist of the short commit hash and the .NET version will default to 1.0.0 e.g. e83e39d / 1.0.0 How it Works The primary challenge that needed to be solved was to allow user code to actually explicitly reference generated code as in GitInfo.CommitHash.Should().HaveLength(40);. Using MSBuild alone something like that is not really possible with a reasonable amount of effort. Generating code that can be directly referenced by user code is fortunately exactly what .NET Source Generators are meant for. This is why the primary functionality of this package is taking the form of an incremental source generator. Every incremental source generator needs a trigger. Something that it can attach itself to and generate code for that thing or category of things in an efficient manner. For the GitInfo class, there is no obvious anchor point in the code since the input for the generator is coming from outside the compilation unit and the code that is generated is (project-)global. One such trigger can be an additional filethat can be used to trigger source generators, but we also don't want users to have to set up a dedicated marker file in order to use the GitInfo generator. This is where the mandatory MSBuild integration comes in. MSBuild allows us to define such AdditionalFiles items without the need for the consumer to do anything, and we can hide those items too. The additional file that we define is called &quot;GitInfo.fingerprint.txt&quot; and is stored somewhere in the &quot;obj&quot; directory. Having an actual file, while not strictly necessary for the source generator to work, provides some key benefits like proper build caching through the modification date of the file. To get that modification date, we run a variant of thegit describe command in the BeforeBuild stage and if the output of that command, which we refer to as the fingerprint, changes then we update the contents of our fingerprint file which in turn triggers the source generator to re-generate the source code. This approach is certainly not perfect since it only detects changes to the git &quot;state&quot; when the actual Build target is executed, but this is probably the best we can do with reasonable effort. The source generator can be configured with a set of MSBuild properties like GitInfoNamespace which have to be made explicitly visible to the compiler infrastructure by declaring them as items of the form &lt;CompilerVisibleProperty Include=&quot;GitInfoNamespace&quot; /&gt;. These configuration values are then used by the generator to customize the output to some degree. Assembly Version Attributes​ Having access to the git version information from within the program itself is very useful, but if the generated assembly shows a completely different version than what GitInfo provides that would be rather confusing. What we usually want is to keep the assembly version attributes in line with the version information provided by git. To that end, we hook into the existing MSBuild mechanism provided by &quot;Microsoft.NET.GenerateAssemblyInfo.targets&quot; which generates assembly info from metadata and has various properties to allow for customization. If the MSBuild property GitInfoGenerateAssemblyVersion is set to true, which is the default, this disables the automatic generation of AssemblyVersion, AssemblyFileVersion and AssemblyInformationalVersion and replaces them by adding these three attributes directly into the generated file that contains the GitInfo class with version values derived from the git tag description. The informational version is simply set to the full git tag description as it allows any string value. For the assembly and file version, the semantic version is translated to a .NET &quot;Major.Minor.Build.Revision&quot; version by using the SemVer MAJOR, MINOR, PATCH as Major, Minor and Build respectivelyif the SemVer LABEL is a standard label as generated by git describe, the number of commits since the last tag is extracted and used as the Revision In the example of the Larcanum.GitInfo.UnitTests assembly, the overall assembly info (as seen with ILSpy) ends up looking like this: [assembly: CompilationRelaxations(8)] [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)] [assembly: Debuggable(/*Could not decode attribute arguments.*/)] [assembly: TargetFramework(&quot;.NETCoreApp,Version=v9.0&quot;, FrameworkDisplayName = &quot;.NET 9.0&quot;)] [assembly: AssemblyCompany(&quot;Larcanum.GitInfo.UnitTests&quot;)] [assembly: AssemblyConfiguration(&quot;Debug&quot;)] [assembly: AssemblyProduct(&quot;Larcanum.GitInfo.UnitTests&quot;)] [assembly: AssemblyTitle(&quot;Larcanum.GitInfo.UnitTests&quot;)] [assembly: AssemblyMetadata(&quot;Microsoft.Testing.Platform.Application&quot;, &quot;True&quot;)] // Only the 3 attributes below this line are touched by GitInfo [assembly: AssemblyFileVersion(&quot;0.7.0.1&quot;)] [assembly: AssemblyInformationalVersion(&quot;v0.7.0-1-gef72f47&quot;)] [assembly: AssemblyVersion(&quot;0.7.0.1&quot;)] Build Property $(Version)​ Finally, there is the MSBuild $(Version) property that is used in several parts of the build process, including the parts of the build that creates a NuGet package with dotnet pack. When and how exactly that property is used is not documented very well and neither are the assumptions about its format, but from practical experience the only limitation seems to be that it cannot have a prefix like &quot;v&quot;. If the GitInfoUpdateVersionProp is set to true, which is the default, then the GitInfoVersion target which runs before the BeforeBuild target tries to update the version property according to the following rules: If the Version has already been set to a value other than &quot;1.0.0&quot; by a previous step of the build process, like if the version is specified as a command line argument, then it is left as it is.If a call to git describe returns something that matches the expected SemVer expression, then Version will be set to that string, excluding a &quot;v&quot; prefix if present. Configuration All the configuration happens through MSBuild properties that can be added to the project file &lt;GitInfoGlobalNamespace&gt;true&lt;/GitInfoGlobalNamespace&gt;Defaults to false. When set to false, the generated GitInfo class will be added to the namespace defined in GitInfoNamespace, but when set to true it will be added to the global namespace instead.&lt;GitInfoNamespace&gt;My.Custom.Ns&lt;/GitInfoNamespace&gt;Defaults to $(RootNamespace). Defines the namespace declaration for the generated class. If set to the empty string, this has the same effect as setting GitInfoGlobalNamespace to true.&lt;GitInfoGitBin&gt;/usr/bin/git&lt;/GitInfoGitBin&gt;Defaults to git. This is the path to the git binary that will be used to gather the GitInfo details.&lt;GitInfoUpdateVersionProp&gt;false&lt;/GitInfoUpdateVersionProp&gt;Defaults to true. This value determines if the GitInfo targets are going to try to set the $(Version) property based on the git tag description. When set to false, the Version property will be left as is.&lt;GitInfoGenerateAssemblyVersion&gt;false&lt;/GitInfoGenerateAssemblyVersion&gt;Defaults to true. When enabled, this will include the 3 versioning attributes AssemblyVersion, AssemblyFileVersion and AssemblyInformationalVersion in the generated &quot;GitInfo.g.cs&quot; file and disable the default &quot;GenerateAssembly...Attribute&quot; flags.&lt;GitInfoDebug&gt;true&lt;/GitInfoDebug&gt;Defaults to false. Enables the generation of a dedicated GitInfo.Debug property when set to true which contains all the context that the generator class had when generating the GitInfo class. Useful for debugging and should of course not be enabled for release builds. Use Cases Automated NuGet Package Release with GitHub Action​ Let us assume that we have a .NET library project called &quot;DemoLib&quot; that we want to publish on NuGet. We want to automate the publication process with GitHub actions and we want to trigger the process by simply pushing a tag with the version of the new release. In this example The project uses .NET 9The project file for the library is &quot;src/DemoLib/DemoLib.csproj&quot;The versioning scheme for the tags uses the &quot;v&quot;-prefix, but that is not mandatory and easy to change. The workflow definition is stored in the file &quot;.github/workflows/publish.yml&quot; and would look like this. name: NuGet Package Release on: push: tags: # Trigger this workflow on _tag push_ where the tag name matches the 'v*.*.*' pattern # See https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#running-your-workflow-only-when-a-push-of-specific-tags-occurs - 'v*.*.*' jobs: build: runs-on: ubuntu-latest steps: # Checkout the repository - name: Checkout code uses: actions/checkout@v3 # Setup .NET Core SDK - name: Setup .NET Core uses: actions/setup-dotnet@v3 with: dotnet-version: 9.0.x # Pack the project with the version that Larcanum.GitInfo extracts from git (this will match the tag) - name: Pack the project run: dotnet pack --configuration Release --output ./artifacts src/DemoLib/DemoLib.csproj # Push the package to NuGet - name: Push to NuGet env: NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json The NuGet authorization is handled with a NuGet access token that is configured as the NUGET_API_KEY secret under https://github.com/[user]/[repository]/settings/secrets/actions.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#about","content":" note Generates GitInfo data from the current environment.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references Larcanum.GitInfo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Larcanum.GitInfo&quot; Version=&quot;1.1.0&quot;&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GitInfo.g.cs // &lt;auto-generated /&gt; // Generator Context // ProjectDir: D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Larcanum.GitInfo\\src\\DemoGit\\ // GitInfoNamespace: DemoGit // GitInfoGlobalNamespace: False // GitInfoGitBin: git // GitInfoVersionRegex: v?(?&lt;VERSION&gt;(?&lt;MAJOR&gt;\\d+)\\.(?&lt;MINOR&gt;\\d+)(?:\\.(?&lt;PATCH&gt;\\d+))?(?:[-+](?&lt;LABEL&gt;[\\dA-Za-z\\-\\.]+))?)$ // GitInfoGenerateAssemblyVersion: True // GitInfoDebug: False // GitPath: C:\\Program Files\\Git\\cmd\\git.exe // GitVersion: git version 2.50.1.windows.1 // GitRoot: D:/eu/GitHub/RSCG_Examples // GitFingerprint: vComparison-2-gce07c539f // Timestamp: 2025-07-24T07:40:39.4205152+03:00 [assembly: System.Reflection.AssemblyVersion(&quot;1.0.0.0&quot;)] [assembly: System.Reflection.AssemblyFileVersion(&quot;1.0.0.0&quot;)] [assembly: System.Reflection.AssemblyInformationalVersion(&quot;vComparison-2-gce07c539f&quot;)] namespace DemoGit; /// &lt;summary&gt;Provides access to the git information for the current assembly.&lt;/summary&gt; internal partial class GitInfo { public const bool IsDirty = false; public const string Branch = @&quot;main&quot;; public const string CommitShortHash = @&quot;ce07c539f&quot;; public const string CommitHash = @&quot;ce07c539f94b51011f87ded758344c97ff870aba&quot;; public const string CommitDate = @&quot;2025-07-21T21:49:48+03:00&quot;; public const string Tag = @&quot;vComparison-2-gce07c539f&quot;; public const string DotNetVersion = @&quot;1.0.0.0&quot;; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#download-example-net--c","content":" tip Download Example project Larcanum.GitInfo   ","version":"Next","tagName":"h3"},{"title":"Share Larcanum.GitInfo​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#share-larcanumgitinfo","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Larcanum.GitInfo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Larcanum.GitInfo by","url":"/RSCG_Examples/v2/docs/Larcanum.GitInfo#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"Ling.Audit by Jing Ling","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Ling.Audit","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#info","content":" info Name: Ling.Audit A source generator for audit properties. Author: Jing Ling NuGet:https://www.nuget.org/packages/Ling.Audit/ You can find more details at https://github.com/ling921/dotnet-lib/ Source: https://github.com/ling921/dotnet-lib/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#original-readme","content":" note Introduction​ This is a dotnet library repository that contains the following public libraries Project\tPackage\tDescriptionLing.Cache A cache library that can easily use memory cache or redis cache. Ling.Audit A source generator to generate audit properties. Ling.EntityFrameworkCore An extension library of Microsoft.EntityFrameworkCore. Ling.EntityFrameworkCore.Audit An extension library that can automatically record entity changes of Microsoft.EntityFrameworkCore. Ling.Blazor A library for Blazor. Ling.Blazor.Authentication A library that provides JWT authentication for Blazor applications. License​ This project is licensed under the Apache-2.0  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#about","content":" note Generating audit data from class implementation of interfaces  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Ling.Audit &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Ling.Audit&quot; Version=&quot;1.1.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.g.cs // &lt;auto-generated/&gt; #nullable enable annotations #nullable disable warnings namespace LingDemo { partial class Person { /// &lt;summary&gt; /// Gets or sets the creation time of this entity. /// &lt;/summary&gt; public virtual global::System.DateTimeOffset CreationTime { get; set; } /// &lt;summary&gt; /// Gets or sets the creator Id of this entity. /// &lt;/summary&gt; public virtual global::System.Nullable&lt;global::System.Guid&gt; CreatorId { get; set; } /// &lt;summary&gt; /// Gets or sets the last modification time of this entity. /// &lt;/summary&gt; public virtual global::System.Nullable&lt;global::System.DateTimeOffset&gt; LastModificationTime { get; set; } /// &lt;summary&gt; /// Gets or sets the last modifier Id of this entity. /// &lt;/summary&gt; public virtual global::System.Nullable&lt;global::System.Guid&gt; LastModifierId { get; set; } /// &lt;summary&gt; /// Gets or sets whether this entity is soft deleted. /// &lt;/summary&gt; public virtual global::System.Boolean IsDeleted { get; set; } /// &lt;summary&gt; /// Gets or sets the deletion time of this entity. /// &lt;/summary&gt; public virtual global::System.Nullable&lt;global::System.DateTimeOffset&gt; DeletionTime { get; set; } /// &lt;summary&gt; /// Get or set the deleter Id of this entity. /// &lt;/summary&gt; public virtual global::System.Nullable&lt;global::System.Guid&gt; DeleterId { get; set; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#download-example-net--c","content":" tip Download Example project Ling.Audit   ","version":"Next","tagName":"h3"},{"title":"Share Ling.Audit​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#share-lingaudit","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Ling.Audit  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Ling.Audit by Jing Ling","url":"/RSCG_Examples/v2/docs/Ling.Audit#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"LingoGen by Ruben Broere","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/LingoGen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#info","content":" info Name: LingoGen A Roslyn source generator for statically typed string localization Author: Ruben Broere NuGet:https://www.nuget.org/packages/RubenBroere.LingoGen/ You can find more details at https://github.com/RubenBroere/lingo-gen Source: https://github.com/RubenBroere/lingo-gen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#original-readme","content":" note LingoGen LingoGen is a Roslyn source generator that generates strongly typed localized strings from a json file. Why strongly typed localized strings?​ Compile time safety: You can't misspell a key or use a key that doesn't exist.Refactoring: If you rename a key, the compiler will tell you all the places you need to update.Discoverability: You get intellisense for all your localized strings.Performance: The classes are build on compile time so no lookup in dictionaries.Easy to use: Just add a json file and the required translations and you're good to go.Feedback: LingoGen has a lot of warning and error feedback to help you create good translations. How to use​ Add the RubenBroere.LingoGen package to your project.Create a lingo.json file with the translations.Add the lingo.json file to your .csproj as an AdditionalFiles item.Use the generated classes in your code. using LingoGen; public class MyClass { public void MyMethod() { // From the lingo.json phrase &quot;Sorry for the inconvenience.&quot; Console.WriteLine(Lingo.SorryForTheInconvenience); // Returns &quot;Sorry voor het ongemak.&quot; if the current UI culture is Dutch. } } Lingo JSON​ The Lingo.json file is a json file that contains the metadata, phrases and nouns. As of now nouns are not supported but will be in the future. Metadata​ Metadata stores global configuration and is required for LingoGen to work. { &quot;metadata&quot;: { &quot;version&quot;: &quot;0.0.0&quot;, &quot;languages&quot;: [&quot;nl&quot;, &quot;fr&quot;] } } version (optional): The version of the lingo file. May be used for future features.languages (required): An array of languages that are supported by the lingo file. English is always supported. LingoGen uses CultureInfo.CurrentUICulture.TwoLetterISOLanguageName to determine the current language. If the current language is not supported, an error string will be returned. Phrases​ Phrases are the main feature as of now. They are the localized strings that are generated. { &quot;phrases&quot;: { &quot;Sorry for the inconvenience.&quot;: { &quot;nl&quot;: &quot;Sorry voor het ongemak.&quot;, &quot;fr&quot;: &quot;Désolé pour le dérangement.&quot; }, &quot;Select a(n) {Noun}&quot;: { &quot;nl&quot;: &quot;Selecteer een {Noun}&quot;, &quot;fr&quot;: &quot;Sélectionnez un(e) {Noun}&quot; } } } phrases (required): A dictionary of english phrases with the required translations for the languages specified in the metadata. A phrase can contain arguments which are enclosed in curly braces. This phrase will generate a method with the arguments as parameters. Nouns​ Nouns are currently not supported but will be in the future. { &quot;nouns&quot;: { &quot;World&quot;: { &quot;en&quot;: [&quot;world&quot;, &quot;worlds&quot;], &quot;nl&quot;: [&quot;wereld&quot;, &quot;werelden&quot;], &quot;fr&quot;: [&quot;monde&quot;, &quot;mondes&quot;] }, &quot;Person&quot;: { &quot;en&quot;: [&quot;person&quot;, &quot;people&quot;], &quot;nl&quot;: [&quot;persoon&quot;, &quot;mensen&quot;], &quot;fr&quot;: [&quot;personne&quot;, &quot;personnes&quot;] } } } nouns (required): A dictionary of nouns with the required translations for the languages specified in the metadata. Lingo generated classes​ The lingo generated classes are generated in the namespace LingoGen and are named after the keywords inside the lingo.json. Phrases​ { &quot;phrases&quot;: { &quot;Sorry for the inconvenience.&quot;: { &quot;nl&quot;: &quot;Sorry voor het ongemak.&quot;, &quot;fr&quot;: &quot;Désolé pour le dérangement.&quot; }, &quot;Select a(n) {Noun}&quot;: { &quot;nl&quot;: &quot;Selecteer een {Noun}&quot;, &quot;fr&quot;: &quot;Sélectionnez un(e) {Noun}&quot; } } } These example phrases will generate the following property and method: // In 'Lingo.SorryForTheInconvenience.g.cs' /// &lt;summary&gt; /// Sorry for the inconvenience. /// &lt;/summary&gt; public static string SorryForTheInconvenience =&gt; CultureInfo.CurrentUICulture.TwoLetterISOLanguageName switch { &quot;nl&quot; =&gt; &quot;Sorry voor het ongemak.&quot;, &quot;fr&quot; =&gt; &quot;Désolé pour le dérangement.&quot;, &quot;en&quot; =&gt; &quot;Sorry for the inconvenience.&quot;, _ =&gt; $&quot;[ No 'SorryForTheInconvenience' lingo for '{CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}' ]&quot; }; // In 'Lingo.SelectAn_.g.cs' /// &lt;summary&gt; /// Select a(n) {Noun} /// &lt;/summary&gt; public static string SelectAn_(string Noun) =&gt; CultureInfo.CurrentUICulture.TwoLetterISOLanguageName switch { &quot;nl&quot; =&gt; $&quot;Selecteer een {Noun}&quot;, &quot;fr&quot; =&gt; $&quot;Sélectionnez un(e) {Noun}&quot;, &quot;en&quot; =&gt; $&quot;Select a(n) {Noun}&quot;, _ =&gt; $&quot;[ No 'SelectAn_' lingo for '{CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}' ]&quot; }; All phrases are generated in a separate file with the name of the phrase. This will make the incremental source generator faster than one big class. Roadmap​ Nouns Custom noun metadata  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#about","content":" note Translating from multiple languages  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references LingoGen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;lingo.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;lingo.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RubenBroere.LingoGen&quot; Version=&quot;0.2.1&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Lingo.g.csLingo.Hello_.g.cs // &lt;auto-generated/&gt; namespace LingoGen; /// &lt;summary&gt; /// Static class containing all lingo entries. /// &lt;/summary&gt; public static partial class Lingo { }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#download-example-net--c","content":" tip Download Example project LingoGen   ","version":"Next","tagName":"h3"},{"title":"Share LingoGen​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#share-lingogen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/LingoGen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"LingoGen by Ruben Broere","url":"/RSCG_Examples/v2/docs/LingoGen#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"LightweightObjectMapper by Stratos","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#info","content":" info Name: LightweightObjectMapper A out of the box object mapper library based on SourceGenerator. 基于 SourceGenerator 的开箱即用对象映射库。 Author: Stratos NuGet:https://www.nuget.org/packages/LightweightObjectMapper/ You can find more details at https://github.com/stratosblue/LightweightObjectMapper Source: https://github.com/stratosblue/LightweightObjectMapper  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#original-readme","content":" note LightweightObjectMapper 1. Intro​ A out of the box object mapper library based on SourceGenerator. 基于 SourceGenerator 的开箱即用对象映射库。 2. Features​ 开箱即用、无需预配置（Out of the box, no pre-configuration required）无运行库引用（No runtime library reference）映射代码可观察（Observable mapping code）无反射（No Reflection）无Emit或其它动态生成（No emit or other dynamic generations）基于拓展方法实现，不侵入目标类型（Implementation based on extension methods, non intrusive target type） Note!!!​ 基于 SourceGenerator 实现，约等价于手写代码，无法实现手写代码不能实现的功能，如：访问私有字段、访问私有构造函数等。当前不会自动处理嵌套类型映射，需要手动映射嵌套类型后才能正常工作。 3. 使用方法​ 3.1 引用包​ &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;LightweightObjectMapper&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; 3.2 快速使用​ 无配置文件的使用方式，引用命名空间 LightweightObjectMapper ，直接使用拓展方法 MapTo 进行映射； using LightweightObjectMapper; class Class1 { } class Class2 { } struct Struct1 { } class1Instance.MapTo&lt;Class2&gt;(); class1Instance.MapTo(class2Instance); class1Instance.MapTo(ref struct1Instance); var list1 = new List&lt;Class1&gt;(); list1.MapTo&lt;IEnumerable&lt;Class2&gt;&gt;(); 3.3 配置映射 MappingProfile​ 创建 MappingProfile 类： [MappingProfile] internal partial class SampleMappingProfile { } 使用特性 [MappingProfile] 标记类型；将类型声明为 partial； 为 SampleMappingProfile 实现对应的配置接口： IMappingPrepare&lt;TIn, TOut&gt;：映射前准备。用于使用 TIn 映射到 TOut 时初始化 TOut；IPostMapping&lt;TIn, TOut&gt;：映射后执行的动作。用于使用 TIn 映射到 TOut 完成后，执行的后续附加代码；ITypeMapping&lt;TIn, TOut&gt;：接管完整的类型映射。（仅非目标实例映射时有效）；ITypeMemberIgnoreMapping&lt;T&gt;：类型成员忽略映射声明。声明映射到目标类型 T 时，应忽略的 T 的成员； 拓展集合映射： 默认支持T[]、List&lt;T&gt;、IEnumerable&lt;T&gt;等基础集合映射；自定义集合映射： 在 MappingProfile 类内部声明任意名称静态方法；使用特性 [CollectionMapping] 标记该方法；该方法必须包含一个泛型参数；该方法必须有一个参数，且参数类型为 IEnumerable&lt;泛型参数&gt;；该方法的返回值类型必须派生自 IEnumerable&lt;泛型参数&gt;； 示例： using System.Collections.Concurrent; using System.Collections.Generic; using LightweightObjectMapper; namespace MappingProfileSample; class MyClass1 { public int MyProperty1 { get; set; } public int MyProperty2 { get; set; } public int MyProperty3 { get; set; } } class MyClass2 { public int MyProperty1 { get; set; } public int MyProperty2 { get; set; } public int MyProperty3 { get; set; } } [MappingProfile] internal partial class SampleMappingProfile : IMappingPrepare MyClass1, MyClass2 , IPostMapping MyClass1, MyClass2 , ITypeMapping MyClass2, MyClass1 , ITypeMemberIgnoreMapping MyClass2 { public object? IgnoreMapping(MyClass2 target) { // 映射到 MyClass2 时忽略其 MyProperty2 return new { target.MyProperty2, }; } public MyClass2 MappingPrepare(MyClass1 source) { // MyClass1 映射到 MyClass2 时，MyClass2 实例的创建方式 return new MyClass2() { MyProperty1 = 1 }; } public MyClass2 PostMapping(MyClass1 source, MyClass2 target) { // MyClass1 映射到 MyClass2 时，映射完成后执行的代码 target.MyProperty1 = source.MyProperty1 * 2; return target; } public MyClass1 TypeMapping(MyClass2 source) { //接管 MyClass2 到 MyClass1 的映射 return new MyClass1() { MyProperty1 = source.MyProperty1 / 2 }; } [CollectionMapping] public static ConcurrentBag&lt;T&gt;? ToList&lt;T&gt;(IEnumerable&lt;T&gt;? items) { //拓展对 ConcurrentBag 的映射支持 return items is null ? null : new ConcurrentBag&lt;T&gt;(items); } } 3.4 引入其它程序集内的 MappingProfile​ 跨程序集共享 MappingProfile。 将要进行共享的 MappingProfile 声明为 public；在需要引用此 MappingProfile 的程序集内定义新的 MappingProfile，并对其添加特性 [MappingProfileInclude] 进行引用；示例： // 引用 InternalMappingProfile 和 InternalMappingProfile1 [MappingProfileInclude(typeof(InternalMappingProfile), typeof(InternalMappingProfile1))] [MappingProfile] internal partial class MappingProfileIncludeMapProfile1 { } 4. 其它配置​ 配置项目的 Property 来进行一些特殊配置，示例： &lt;PropertyGroup&gt; &lt;!--不添加预生成代码--&gt; &lt;NoLightweightObjectMapperPreCodes&gt;true&lt;/NoLightweightObjectMapperPreCodes&gt; &lt;!--设置生成的拓展方法可访问性--&gt; &lt;LOMappingMethodAccessibility&gt;public&lt;/LOMappingMethodAccessibility&gt; &lt;/PropertyGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#about","content":" note Generating function to map DTOs  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDTO.csExtensions.cs This is the CSharp Project that references LightweightObjectMapper &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;LightweightObjectMapper&quot; Version=&quot;1.0.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;!--&lt;PropertyGroup&gt; &lt;NoLightweightObjectMapperPreCodes&gt;true&lt;/NoLightweightObjectMapperPreCodes&gt; &lt;LOMappingMethodAccessibility&gt;public&lt;/LOMappingMethodAccessibility&gt; &lt;/PropertyGroup&gt;--&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Extensions.Generated.csLightweightObjectMapper.PreCodes.LightweightObjectMapperPreCodes.csLightweightObjectMapper.PreCodes.PredefinedSpecialTypeMapping.csLOMMapExtensions_mapperDemo_Person.g.csPredefinedSpecialTypeMapping.Generated.cs // &lt;Auto-Generated/&gt; #pragma warning disable IDE0005 #pragma warning disable CS0105 using LightweightObjectMapper; using System; using System; using System.Linq; using System.Runtime.CompilerServices; namespace mapperDemo { sealed partial class Extensions { public static partial class Generated { /// &lt;summary&gt; /// PostMappingDeclaration for &lt;see cref = &quot;global::Person&quot;/&gt; to &lt;see cref = &quot;global::mapperDemo.PersonDTO&quot;/&gt; /// &lt;/summary&gt; [MethodImpl(MethodImplOptions.AggressiveInlining)] [MappingMetadata(MappingMetadataType.PostMappingDeclaration, typeof(global::Person), typeof(global::mapperDemo.PersonDTO))] public static global::mapperDemo.PersonDTO PostMapping_D275C37F33F4AFBD(global::Person source, global::mapperDemo.PersonDTO target) { target.ID = source.ID; return target; } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#download-example-net--c","content":" tip Download Example project LightweightObjectMapper   ","version":"Next","tagName":"h3"},{"title":"Share LightweightObjectMapper​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#share-lightweightobjectmapper","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/LightweightObjectMapper  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"LightweightObjectMapper by Stratos","url":"/RSCG_Examples/v2/docs/LightweightObjectMapper#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"LinqGen.Generator by Maxwell Keonwoo Kang","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/LinqGen.Generator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#info","content":" info Name: LinqGen.Generator Package Description Author: Maxwell Keonwoo Kang NuGet:https://www.nuget.org/packages/LinqGen.Generator/ https://www.nuget.org/packages/LinqGen/ You can find more details at https://github.com/cathei/LinqGen Source: https://github.com/cathei/LinqGen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#original-readme","content":" note LinqGen ⚡ Linq meets Source Generator​ LinqGen is project to optimize Linq queries using source generation of user code. It aims to make allocation-free, specialized Linq queries per your type. Install​ Install from NuGet, both LinqGen as library and LinqGen.Generator as incremental source generator. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;LinqGen&quot; Version=&quot;0.3.1&quot; /&gt; &lt;PackageReference Include=&quot;LinqGen.Generator&quot; Version=&quot;0.3.1&quot; /&gt; &lt;/ItemGroup&gt; For Unity, you can install as git package from Unity Package Manager. https://github.com/cathei/LinqGen.git?path=LinqGen.Unity/Packages/com.cathei.linqgen Or install via OpenUPM. openupm add com.cathei.linqgen Any questions?​ Feel free to make an issue, or ask me directly from Discord! Usage​ Just add Gen() in front of your Linq query. It will generate code to ensure zero-allocation, may have slightly better performance. using Cathei.LinqGen; int[] array = new int[] { 1, 2, 3, 4, 5 }; int result = array.Gen() .Where(x =&gt; x % 2 == 0) .Select(x =&gt; x * 2) .Sum(); For additional performance boost, use struct functions with IStructFunction interface. int result = array.Gen() .Where(new Predicate()) .Select(new Selector()) .Sum(); This is benchmark result for above code. You can see full benchmark results [here](https://github.com/cathei/LinqGen/docs/BenchmarksResults. Method\tCount\tMean\tError\tStdDev\tRatio\tAllocated\tAlloc RatioForLoop\t100000\t449.8 us\t4.56 us\t4.27 us\t0.50\t-\t0.000 ForEachLoop\t100000\t444.3 us\t1.48 us\t1.39 us\t0.49\t-\t0.000 Linq\t100000\t899.8 us\t5.65 us\t5.01 us\t1.00\t105 B\t1.000 LinqGenDelegate\t100000\t576.2 us\t4.43 us\t4.14 us\t0.64\t1 B\t0.010 LinqGenStruct\t100000\t449.8 us\t4.06 us\t3.60 us\t0.50\t-\t0.000 Why not just use struct Linq implementations?​ Because of this issue, struct linq implementations with many generics must do runtime lookup. Which makes them not much faster than original Linq. Also, they have to have bunch of type information and tricks for type inference. Which makes your code hard to read and understand. The error messages or stack trace will be very messy as well. Using source generation also makes your code friendly for AOT platforms, such as Unity, which has maximum generic depth. Being source generator makes LinqGen core library much small than other struct linq implementations, though it may grow as user uses Linq operations. How does LinqGen work?​ LinqGen has two part of assembly, LinqGen and LinqGen.Generator. The LinqGen assembly contains a stub method and types, which helps you autocomplete and helps generator infer types. After you write a Linq query with stub methods, then LinqGen.Generator runs and replace the stub methods with generated methods. How is it possible, while modifying user code is not allowed with source generators? It's because everything LinqGen.Generator generates designed to be precede over stub methods on overload resolution. Does LinqGen works with Unity Burst compiler?​ Yes! LinqGen is aiming to support Unity Burst compiler. Below code is sample of using LinqGen in Burst-compiled job system. [BurstCompile(CompileSynchronously = true)] public struct LinqGenSampleJob : IJob { [ReadOnly] public NativeArray&lt;int&gt; Input; [WriteOnly] public NativeArray&lt;int&gt; Output; public void Execute() { int index = 0; foreach (var item in Input.Gen() .Select(new Selector()) .Order(new Comparer())) { Output[index++] = item; } } } public struct Selector : IStructFunction&lt;int, int&gt; { public int Invoke(int arg) =&gt; arg * 10; } public struct Comparer : IComparer&lt;int&gt; { public int Compare(int x, int y) =&gt; x - y; } Supported methods (working-in-progress)​ List of Linq Operations Generations​ EmptyRangeRepeat Operations​ SelectWhereCast, OfTypeSkip, Take, TakeLastSkipWhile, TakeWhileDistinctOrder, OrderBy, OrderByDescendingThenBy, ThenByDescendingGroupByConcatPrepend, Append Evaluations​ GetEnumeratorToArray, ToListAny, AllFirst, FirstOrDefaultLast, LastOrDefaultCountAggregateSum Supports duck typing with + operator overload Min, MaxMinBy, MaxBy Etc​ Gen Converts IEnumerable to LinqGen enumerable AsEnumerable Converts LinqGen enumerable to IEnumerable RemoveAll Limitations​ Element or key types that used with LinqGen must have at least internal accessibility.Struct enumerable should implement IStructEnumerable&lt;,&gt; interface.LinqGen queries should be treated as anonymous type, it cannot be used as return value or instance member. If you have these needs, use AsEnumerable() to convert.LinqGen may not work well when [InternalsVisibleTo] is used while both assemblies are using LinqGen. It can be solved when this language feature is implemented. Further readings​ Jon Skeet's Edulinq, reimplementing Linq-to-objects.Article about alloc-free Linq implementation and limitations.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#about","content":" note No-alloc for Linq operations  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references LinqGen.Generator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;LinqGen&quot; Version=&quot;0.3.1&quot; /&gt; &lt;PackageReference Include=&quot;LinqGen.Generator&quot; Version=&quot;0.3.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  LinqGen.Gen_3082270848.g.csLinqGen.Select_2792511626.g.csLinqGen.Where_1460257278.g.cs // DO NOT EDIT // Generated by LinqGen.Generator #nullable disable using System; using System.Collections; using System.Collections.Generic; using System.ComponentModel; using System.Runtime.CompilerServices; using Cathei.LinqGen; using Cathei.LinqGen.Hidden; namespace Cathei.LinqGen.Hidden { // Non-exported Enumerable should consider anonymous type, thus it will be internal internal struct Gen_wRtaM3 : IInternalStub&lt;int&gt; { [MethodImpl(MethodImplOptions.AggressiveInlining)] internal Gen_wRtaM3(int[] source_wRtaM3) : this() { this.source_wRtaM3 = source_wRtaM3; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public int Count() =&gt; this.source_wRtaM3.Length; [MethodImpl(MethodImplOptions.AggressiveInlining)] public Select_6q5z23 Select(Func&lt;int, int&gt; selector_6q5z23) =&gt; new Select_6q5z23(this, selector_6q5z23); [EditorBrowsable(EditorBrowsableState.Never)] internal int[] source_wRtaM3; } } namespace Cathei.LinqGen { // Extension class needs to be internal to prevent ambiguous resolution internal static partial class LinqGenExtensions_Gen_wRtaM3 { [MethodImpl(MethodImplOptions.AggressiveInlining)] public static Gen_wRtaM3 Gen(this int[] source_wRtaM3) =&gt; new Gen_wRtaM3(source_wRtaM3); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#download-example-net--c","content":" tip Download Example project LinqGen.Generator   ","version":"Next","tagName":"h3"},{"title":"Share LinqGen.Generator​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#share-linqgengenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/LinqGen.Generator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"LinqGen.Generator by Maxwell Keonwoo Kang","url":"/RSCG_Examples/v2/docs/LinqGen.Generator#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"Time based List of RSCG","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/List-of-RSCG","content":"","keywords":"","version":"Next"},{"title":"215 RSCG with examples in descending chronological order​","type":1,"pageTitle":"Time based List of RSCG","url":"/RSCG_Examples/v2/docs/List-of-RSCG#215-rscg-with-examples-in-descending-chronological-order","content":" This is the list of 215 ( 14 from Microsoft) RSCG with examples  See by category See as json See as Excel    ","version":"Next","tagName":"h2"},{"title":"Complete list​","type":1,"pageTitle":"Time based List of RSCG","url":"/RSCG_Examples/v2/docs/List-of-RSCG#complete-list","content":" No\tName\tDate\tCategory215\tBadIdeas.Icons.FontAwesome by Phil Scott 2025-08-03 =&gt; 03 August 2025\tBlazor 214\tGenbox.FastEnum by Ian Qvist 2025-08-03 =&gt; 03 August 2025\tEnum 213\tBlazor.TSRuntime by Black White Yoshi 2025-08-02 =&gt; 02 August 2025\tBlazor 212\tStackXML by Zing 2025-08-01 =&gt; 01 August 2025\tSerializer 211\tShadowWriterNullobjects by Stefan Stolz 2025-07-29 =&gt; 29 July 2025\tInterface 210\tAssemblyVersionInfo by Black White Yoshi 2025-07-28 =&gt; 28 July 2025\tEnhancementProject 209\tShadowWriterProjectInfo by Stefan Stolz 2025-07-27 =&gt; 27 July 2025\tEnhancementProject 208\tAsyncIt by Oleg Shilo 2025-07-26 =&gt; 26 July 2025\tAsync 207\tAutoInterface by Black White Yoshi 2025-07-25 =&gt; 25 July 2025\tInterface 206\tShadowWriterBuilder by Stefan Stolz 2025-07-24 =&gt; 24 July 2025\tBuilder 205\tFlaggen by Ricardo Boss 2025-07-23 =&gt; 23 July 2025\tEnum 204\tInlineComposition by Black White Yoshi 2025-07-22 =&gt; 22 July 2025\tTemplating 203\tTortuga.Shipwright by Tortuga Research 2025-07-21 =&gt; 21 July 2025\tTemplating 202\tjos.enumeration by Josef Ottosson 2025-07-20 =&gt; 20 July 2025\tEnum 201\tStrings.ResourceGenerator by Birgir Kristmannsson 2025-07-06 =&gt; 06 July 2025\tFilesToCode 200\tFiggle by Drew Noakes 2025-07-05 =&gt; 05 July 2025\tConsole 199\tSuperFluid by James Hughes 2025-07-04 =&gt; 04 July 2025\tStateMachine 198\tDimonSmart.BuilderGenerator by Dmitry Dorogoy 2025-07-03 =&gt; 03 July 2025\tBuilder 197\tBunnyTailServiceRegistration by Machi Pon 2025-07-02 =&gt; 02 July 2025\tDependencyInjection 196\tArgumentParsing by 2025-07-01 =&gt; 01 July 2025\tCommandLine 195\tComparison by Fons Sonnemans 2025-05-25 =&gt; 25 May 2025\tEnhancementClass 194\tzlinq by Cysharp - subsidiary of Cygames 2025-07-02 =&gt; 02 July 2025\tLinq 193\tNativeObjects by Kevin Gosse 2025-03-28 =&gt; 28 March 2025\tWinAPI 192\timmediate.apis by Stuart Turner 2025-03-27 =&gt; 27 March 2025\tAPI 191\trscg_demeter by Andrei Ignat 2025-03-26 =&gt; 26 March 2025\tFunctionalProgramming 190\tPMart.Enumeration by Martinho 2025-03-25 =&gt; 25 March 2025\tEnum 189\tMemberAccessor by Yamaokuno 2025-03-24 =&gt; 24 March 2025\tEnhancementClass 188\tStepwiseBuilderGenerator by Georgiy Petrov 2025-03-23 =&gt; 23 March 2025\tBuilder 187\tEntityLengths.Generator by Taras Kovalenko 2025-02-19 =&gt; 19 February 2025\tDatabase 186\tRSCG_CompositeProvider by Ignat Andrei 2025-02-18 =&gt; 18 February 2025\tInterface 185\tDependencyModules.SourceGenerator by Ian Johnson 2025-02-16 =&gt; 16 February 2025\tDependencyInjection 184\tMockMe by connorivy 2025-02-10 =&gt; 10 February 2025\tTests 183\tNTypewriter by NeVeSpl 2025-01-19 =&gt; 19 January 2025\tTemplating 182\trscg_Interface_to_null_object by Andrei Ignat 2025-01-18 =&gt; 18 January 2025\tInterface 181\tLarcanum.GitInfo by 2025-01-17 =&gt; 17 January 2025\tEnhancementProject 180\tPure.DI by Nikolay Pianikov 2024-12-08 =&gt; 08 December 2024\tDependencyInjection 179\tConstructorGenerator by Swarley97 2024-12-07 =&gt; 07 December 2024\tConstructor 178\tValuify by Paul Martins 2024-12-06 =&gt; 06 December 2024\tEquals 177\tEquatable.Generator by Eden Prairie 2024-12-05 =&gt; 05 December 2024\tEquals 176\tDarp.BinaryObjects by Ross Light GmbH 2024-12-04 =&gt; 04 December 2024\tBitwise 175\tDolly by Peter Andersson 2024-12-03 =&gt; 03 December 2024\tClone 174\tDapper.AOT by Marc Gravell 2024-12-02 =&gt; 02 December 2024\tDatabase 173\tMicrosoft.Windows.CsWin32 by Microsoft 2024-12-01 =&gt; 01 December 2024\tWinAPI 172\tGoLive.Generator.BlazorInterop by surgicalcoder 2024-11-09 =&gt; 09 November 2024\tBlazor 171\tHsu.Sg.FluentMember by Net Hsu 2024-11-08 =&gt; 08 November 2024\tBuilder 170\tQueryStringGenerator by Tomi Parviainen 2024-11-07 =&gt; 07 November 2024\tEnhancementClass 169\tGenPack by dimohy 2024-11-06 =&gt; 06 November 2024\tSerializer 168\tCredfeto.Version.Information.Generator by Mark Ridgwell 2024-11-05 =&gt; 05 November 2024\tEnhancementProject 167\tpolytype by Eirik Tsarpalis 2024-11-04 =&gt; 04 November 2024\tFunctionalProgramming 166\tDatacute.EmbeddedResourcePropertyGenerator by Stephen Denne 2024-11-03 =&gt; 03 November 2024\tFilesToCode 165\trscg_queryables by Andrei Ignat 2024-11-02 =&gt; 02 November 2024\tFunctionalProgramming 164\tRazorSlices by Damiam Edwards 2024-10-27 =&gt; 27 October 2024\tTemplating 163\tTypedSignalR.Client by nenoNaninu 2024-10-26 =&gt; 26 October 2024\tSignalR 162\tMinimalHelpers.Routing.Analyzers by Maroc Minerva 2024-10-21 =&gt; 21 October 2024\tAPI 161\tImmediate.Handlers by Stuart Turner 2024-09-20 =&gt; 20 September 2024\tMediator 160\tDusharp by Vitali 2024-09-19 =&gt; 19 September 2024\tFunctionalProgramming 159\tLightweightObjectMapper by Stratos 2024-09-18 =&gt; 18 September 2024\tMapper 158\tEnhanced.GetTypes by duskembayev 2024-09-17 =&gt; 17 September 2024\tEnhancementClass 157\tSera.Union by Sera 2024-08-26 =&gt; 26 August 2024\tFunctionalProgramming 156\tRSCG_NameGenerator by Andrei Ignat 2024-08-25 =&gt; 25 August 2024\tEnhancementProject 155\tCoplt.Dropping by 2A5F 2024-08-13 =&gt; 13 August 2024\tDisposer 154\tFluentify by Paul Martins 2024-08-02 =&gt; 02 August 2024\tBuilder 153\tRSCG_ExportDiagram by AndreiIgnat 2024-08-01 =&gt; 01 August 2024\tEnhancementProject 152\tServiceScan.SourceGenerator by Oleksandr Liakhevych 2024-07-22 =&gt; 22 July 2024\tDependencyInjection 151\tThisAssembly.Strings by Daniel Cazzulino 2024-07-21 =&gt; 21 July 2024\tFilesToCode 150\tThisAssembly.Metadata by Daniel Cazzulino 2024-07-20 =&gt; 20 July 2024\tEnhancementProject 149\tPekspro.BuildInformationGenerator by pekspro 2024-07-19 =&gt; 19 July 2024\tEnhancementProject 148\tThisAssembly.Constants by Daniel Cazzulino 2024-07-18 =&gt; 18 July 2024\tEnhancementProject 147\tJKToolKit.TemplatePropertyGenerator by Jonas Kamsker 2024-07-17 =&gt; 17 July 2024\tTemplating 146\tRSCG_IFormattable by Andrei Ignat 2024-06-29 =&gt; 29 June 2024\tTemplating 145\tDotnetYang by Westermo Network Technologies 2024-06-29 =&gt; 29 June 2024\tFilesToCode 144\tdepso by Yusuf Tarık Günaydın 2024-06-28 =&gt; 28 June 2024\tDependencyInjection 143\tFactoryGenerator by Westermo Network Technologies 2024-06-27 =&gt; 27 June 2024\tDependencyInjection 142\tTableStorage by Steven Thuriot 2024-06-01 =&gt; 01 June 2024\tDatabase 141\tActorSrcGen by Andrew Matthews 2024-05-01 =&gt; 01 May 2024\tActor 140\tMinerals.AutoMixins by Szymon Halucha 2024-04-20 =&gt; 20 April 2024\tTemplating 139\tThisClass by Trym Lund Flogard 2024-04-19 =&gt; 19 April 2024\tEnhancementClass 138\tRossLean.StringificationGenerator by Alex Kalfakakos 2024-04-18 =&gt; 18 April 2024\tCodeToString 137\tMinerals.AutoInterfaces by Szymon Hałucha 2024-04-17 =&gt; 17 April 2024\tInterface 136\tMinimalApis.Discovery by Shawn Wildermuth 2024-04-16 =&gt; 16 April 2024\tAPI 135\tBitsKit by barncastle 2024-04-15 =&gt; 15 April 2024\tBitwise 134\tStronglyTypedUid by Victor Sánchez 2024-04-07 =&gt; 07 April 2024\tPrimitiveObsession 133\tFusionReactor by OhFlowi 2024-04-06 =&gt; 06 April 2024\tEnum 132\tUnionGen by M. Haslinger 2024-04-05 =&gt; 05 April 2024\tFunctionalProgramming 131\tEnumUtilities by Fabricio Godoy 2024-04-05 =&gt; 05 April 2024\tEnum 130\tMSTest by Microsoft 2024-04-04 =&gt; 04 April 2024\tTests 129\tCommonCodeGenerator by yamaokunousausa 2024-04-03 =&gt; 03 April 2024\tEnhancementClass 128\tFarskeptic.AutoCompose by farskeptic/jmagel 2024-03-16 =&gt; 16 March 2024\tInterface 127\tTypeUtilities by Yevhenii Serdiuk 2024-03-05 =&gt; 05 March 2024\tFunctionalProgramming 126\tLinqGen.Generator by Maxwell Keonwoo Kang 2024-03-04 =&gt; 04 March 2024\tEnhancementProject 125\tAutoInvoke.Generator by Patrick Kranz 2024-03-03 =&gt; 03 March 2024\tEnhancementProject 124\tArchitect.DomainModeling by Timo van Zijll Langhout 2024-03-02 =&gt; 02 March 2024\tBuilder 123\tCodeAnalysis by Feast 2024-03-01 =&gt; 01 March 2024\tCodeToString 122\tRSCG_JSON2Class by Andrei Ignat 2024-02-29 =&gt; 29 February 2024\tFilesToCode 121\tAutoSpectre by Jeppe Roi Kristensen 2024-02-24 =&gt; 24 February 2024\tEnhancementProject 120\tLingoGen by Ruben Broere 2024-02-23 =&gt; 23 February 2024\tFilesToCode 119\tAutoGen by Feast Antelcat 2024-02-22 =&gt; 22 February 2024\tMapper 118\tRSCG_Wait by Andrei Ignat 2024-02-21 =&gt; 21 February 2024\tEnhancementProject 117\tPlantUmlClassDiagramGenerator by Hirotada Kobayashi 2024-02-20 =&gt; 20 February 2024\tEnhancementProject 116\tCopyTo by Paul Braetz 2024-02-19 =&gt; 19 February 2024\tClone 115\tUnionsGenerator by Paul Braetz 2024-02-18 =&gt; 18 February 2024\tFunctionalProgramming 114\tcorecraft by 2024-02-17 =&gt; 17 February 2024\tFilesToCode 113\tsourcedepend by Colin Wilmans 2024-02-16 =&gt; 16 February 2024\tConstructor 112\tOptionToStringGenerator by Jim W 2024-02-15 =&gt; 15 February 2024\tEnhancementClass 111\tcachesourcegenerator by Jeppe Roi Kristensen 2024-02-14 =&gt; 14 February 2024\tFunctionalProgramming 110\tjab by Pavel Krymets 2024-02-13 =&gt; 13 February 2024\tDependencyInjection 109\tFunicularSwitch by bluehands 2024-02-12 =&gt; 12 February 2024\tFunctionalProgramming 108\tCommandLine by DotMake 2024-02-11 =&gt; 11 February 2024\tEnhancementProject 107\tNetAutomaticInterface by codecentric AG 2024-01-29 =&gt; 29 January 2024\tInterface 106\tWhatIAmDoing by Ignat Andrei 2024-01-28 =&gt; 28 January 2024\tAOP 105\tWeave by John Gietzen 2024-01-27 =&gt; 27 January 2024\tFilesToCode 104\tNotNotAppSettings by jasonswearingen 2024-01-26 =&gt; 26 January 2024\tFilesToCode 103\tHangfireRecurringJob by Ieuan Walker 2024-01-25 =&gt; 25 January 2024\tHangfire 102\tBlazorators by David Pine 2024-01-22 =&gt; 22 January 2024\tBlazor 101\tChorn.EmbeddedResourceAccessGenerator by Christoph Hornung 2024-01-21 =&gt; 21 January 2024\tFilesToCode 100\tBuildInfo by Steven Giesel 2024-01-20 =&gt; 20 January 2024\tEnhancementProject 99\tMakeInterface.Generator by Frederik 2024-01-19 =&gt; 19 January 2024\tInterface 98\tFuncky.DiscriminatedUnion by Polyadic 2024-01-18 =&gt; 18 January 2024\tFunctionalProgramming 97\tDomainPrimitives by Alta Software - Teimuraz Nikolaishvili 2024-01-11 =&gt; 11 January 2024\tPrimitiveObsession 96\tHsuSgSync by Net Hsu 2024-01-10 =&gt; 10 January 2024\tAsync 95\tCopyCat by Serhii Buta 2024-01-09 =&gt; 09 January 2024\tInterface 94\tAspectGenerator by Igor Tkachev 2024-01-07 =&gt; 07 January 2024\tEnhancementClass 93\tmocklis by Esbjörn Redmo 2024-01-03 =&gt; 03 January 2024\tTests 92\tRSCG_UtilityTypes by Andrei Ignat 2023-12-22 =&gt; 22 December 2023\tEnhancementClass 91\tLing.Audit by Jing Ling 2023-12-12 =&gt; 12 December 2023\tEnhancementClass 90\tTelemetryLogging by Microsoft 2023-11-30 =&gt; 30 November 2023\tEnhancementClass 89\tInterceptorTemplate by Andrei Ignat 2023-11-29 =&gt; 29 November 2023\tTemplating 88\tCom by Microsoft 2023-11-20 =&gt; 20 November 2023\tWinAPI 87\tRDG by Microsoft 2023-11-19 =&gt; 19 November 2023\tAPI 86\tMicrosoft.Extensions.Configuration.Binder by Microsoft 2023-11-18 =&gt; 18 November 2023\tAPI 85\tMicrosoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft 2023-11-17 =&gt; 17 November 2023\tEnhancementClass 84\tBiwen.AutoClassGen by vipwan 2023-11-16 =&gt; 16 November 2023\tInterface 83\tPrimaryParameter by FaustVX 2023-11-15 =&gt; 15 November 2023\tConstructor 82\tjsonConverterSourceGenerator by Aviationexam 2023-10-30 =&gt; 30 October 2023\tSerializer 81\tN.SourceGenerators.UnionTypes by Alexey Sosnin 2023-10-29 =&gt; 29 October 2023\tFunctionalProgramming 80\tAutoConstructor by Kévin Gallienne 2023-10-28 =&gt; 28 October 2023\tConstructor 79\tDudNet by jwshyns 2023-10-27 =&gt; 27 October 2023\tEnhancementClass 78\tMinimalApiBuilder by 2023-10-26 =&gt; 26 October 2023\tAPI 77\tDynamicsMapper by Yonatan Cohavi 2023-10-16 =&gt; 16 October 2023\tMapper 76\tUnitGenerator by Cysharp, Inc 2023-10-15 =&gt; 15 October 2023\tPrimitiveObsession 75\tStaticReflection by Cricle 2023-10-13 =&gt; 13 October 2023\tEnhancementClass 74\tCredFetoEnum by Mark Ridgwell 2023-10-12 =&gt; 12 October 2023\tEnum 73\tIDisposableGenerator by Els_kom Official Organization 2023-10-11 =&gt; 11 October 2023\tDisposer 72\tMeziantou.Polyfill by Gérald Barré 2023-10-10 =&gt; 10 October 2023\tEnhancementClass 71\tDisposableHelpers by Clynt Neiko Rupinta 2023-10-09 =&gt; 09 October 2023\tDisposer 70\tMagicMap by Bramer Daniel 2023-10-08 =&gt; 08 October 2023\tMapper 69\tRSCG_Templating by Andrei Ignat 2023-10-07 =&gt; 07 October 2023\tTemplating 68\tJsonPolymorphicGenerator by surgicalcoder 2023-10-06 =&gt; 06 October 2023\tSerializer 67\tMapTo by Mohammedreza Taikandi 2023-10-05 =&gt; 05 October 2023\tMapper 66\tBuilderGenerator by Mell Grubb 2023-10-04 =&gt; 04 October 2023\tBuilder 65\tDisposer by Hakan Fıstık 2023-10-03 =&gt; 03 October 2023\tDisposer 64\tResXGenerator by Aigamo 2023-10-02 =&gt; 02 October 2023\tFilesToCode 63\tStringLiteral by Nobuyuki Iwanaga 2023-10-01 =&gt; 01 October 2023\tOptimizer 62\tRSCG_Decorator by Andrei Ignat 2023-09-30 =&gt; 30 September 2023\tEnhancementClass 61\tProtobufSourceGenerator by Laszlo Deak 2023-09-24 =&gt; 24 September 2023\tSerializer 60\tSafeRouting by David Wake 2023-09-23 =&gt; 23 September 2023\tAPI 59\tSourceGenerator.Helper.CopyCode by Patrick Kranz 2023-09-17 =&gt; 17 September 2023\tCodeToString 58\tThisAssembly_Resources by Daniel Cazzulino 2023-09-16 =&gt; 16 September 2023\tFilesToCode 57\tRSCG_Utils_Memo by Ignat Andrei 2023-08-27 =&gt; 27 August 2023\tFunctionalProgramming 56\tRoozie.AutoInterface by Alex Russak 2023-08-26 =&gt; 26 August 2023\tInterface 55\tM31.FluentAPI by Kevin Schaal 2023-08-25 =&gt; 25 August 2023\tEnhancementClass 54\tAutoDTO by Ohorodnikov 2023-08-24 =&gt; 24 August 2023\tMapper 53\tRSCG_WebAPIExports by Andrei Ignat 2023-08-23 =&gt; 23 August 2023\tAPI 52\tGobie by Mike Conrad 2023-08-22 =&gt; 22 August 2023\tTemplating 51\tOneOf by Harry McIntyre 2023-08-21 =&gt; 21 August 2023\tFunctionalProgramming 50\tRidge by Michal Motyčka 2023-08-20 =&gt; 20 August 2023\tTests 49\tStrongly by Lucas Teles 2023-08-19 =&gt; 19 August 2023\tPrimitiveObsession 48\tPropertyChangedSourceGenerator by Antony Male 2023-08-18 =&gt; 18 August 2023\tMVVM 47\tInjectio by LoreSoft 2023-08-17 =&gt; 17 August 2023\tDependencyInjection 46\tNextGenMapper by Anton Ryabchikov 2023-08-16 =&gt; 16 August 2023\tMapper 45\tBenutomoAutomaticDisposeImplSourceGenerator by benutomo 2023-08-15 =&gt; 15 August 2023\tDisposer 44\tSyncMethodGenerator by Zomp Inc. 2023-08-14 =&gt; 14 August 2023\tEnhancementClass 43\tspreadcheetah by Sveinung 2023-08-13 =&gt; 13 August 2023\tTemplating 42\tImmutype by Nikolay Pianikov 2023-08-12 =&gt; 12 August 2023\tEnhancementClass 41\tGeneratorEquals by Diego Frato 2023-08-11 =&gt; 11 August 2023\tEquals 40\tFastGenericNew by Boring3 Nyrest 2023-08-10 =&gt; 10 August 2023\tEnhancementClass 39\tBreezy by Ludovicdln 2023-08-09 =&gt; 09 August 2023\tDatabase 38\tEnumClass by ashen.Blade 2023-08-08 =&gt; 08 August 2023\tEnum 37\tAutoRegisterInject by Patrick Klaeren 2023-08-07 =&gt; 07 August 2023\tDependencyInjection 36\tProxyGen by Dénes Solti 2023-08-06 =&gt; 06 August 2023\tInterface 35\tDeeDee by joh-pot 2023-08-05 =&gt; 05 August 2023\tMediator 34\tMemoryPack by Cysharp, Inc 2023-08-04 =&gt; 04 August 2023\tEnhancementClass 33\tMatryoshki by Georgy Krasin 2023-08-03 =&gt; 03 August 2023\tInterface 32\tMediator by Martin Othamar 2023-08-02 =&gt; 02 August 2023\tMediator 31\tMorrisMoxy by Peter Morris 2023-08-01 =&gt; 01 August 2023\tTemplating 30\tRefit by ReactiveUI 2023-07-31 =&gt; 31 July 2023\tAPI 29\tGedaq by Vyacheslav Brevnov 2023-07-29 =&gt; 29 July 2023\tDatabase 28\tLombok.NET by Colin Alpert 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 27\tEmbedResourceCSharp by pCYSl5EDgo 2023-04-16 =&gt; 16 April 2023\tFilesToCode 26\tPodimo.ConstEmbed by Podimo 2023-04-16 =&gt; 16 April 2023\tFilesToCode 25\tmapperly by Riok 2023-04-16 =&gt; 16 April 2023\tMapper 24\tRocks by Json Bock 2023-04-16 =&gt; 16 April 2023\tTests 23\tMicrosoft.NET.Sdk.Razor.SourceGenerators by Microsoft 2023-04-16 =&gt; 16 April 2023\tTemplating 22\tRSCG_FunctionsWithDI by Andrei Ignat 2023-04-16 =&gt; 16 April 2023\tEnhancementProject 21\tMicrosoft.Interop.JavaScript.JSImportGenerator by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 20\tNetEscapades.EnumGenerators by Andrew Lock 2023-04-16 =&gt; 16 April 2023\tEnum 19\tApparatusAOT by Stanislav Silin 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 18\tPartiallyApplied by Jason Bock 2023-04-16 =&gt; 16 April 2023\tFunctionalProgramming 17\tRazorBlade by Lucas Trzesniewski 2023-04-16 =&gt; 16 April 2023\tTemplating 16\tVogen by Steve Dunn 2023-04-16 =&gt; 16 April 2023\tPrimitiveObsession 15\tdunet by Domn Werner 2023-04-16 =&gt; 16 April 2023\tFunctionalProgramming 14\tAutoCtor by Cameron MacFarland 2023-04-16 =&gt; 16 April 2023\tConstructor 13\tQuickConstructor by Flavien Charlon 2023-04-16 =&gt; 16 April 2023\tConstructor 12\tSystem.Runtime.InteropServices by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 11\tAutoDeconstruct by Jason Bock 2023-04-16 =&gt; 16 April 2023\tConstructor 10\tRSCG_AMS by Ignat Andrei 2023-04-16 =&gt; 16 April 2023\tEnhancementProject 9\tCommunityToolkit.Mvvm by Microsoft 2023-04-16 =&gt; 16 April 2023\tMVVM 8\tRSCG_Static by Andrei Ignat 2023-04-16 =&gt; 16 April 2023\tInterface 7\tMicrosoft.Extensions.Logging by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 6\tSkinnyControllersCommon by Ignat Andrei 2023-04-16 =&gt; 16 April 2023\tAPI 5\tSystem.Text.RegularExpressions by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 4\tRSCG_Utils by Ignat Andrei 2023-04-16 =&gt; 16 April 2023\tFilesToCode 3\tSystem.Text.Json by Microsoft 2023-04-16 =&gt; 16 April 2023\tSerializer 2\tRSCG_TimeBombComment by Andrei Ignat 2023-04-16 =&gt; 16 April 2023\tEnhancementProject 1\tThisAssembly by Daniel Cazzulino 2023-04-16 =&gt; 16 April 2023\tEnhancementProject  ","version":"Next","tagName":"h2"},{"title":"14 Created by Microsoft​","type":1,"pageTitle":"Time based List of RSCG","url":"/RSCG_Examples/v2/docs/List-of-RSCG#14-created-by-microsoft","content":" If you are interested in Microsoft RSCG, please see  No\tName\tDate\tCategory3\tSystem.Text.Json by Microsoft 2023-04-16 =&gt; 16 April 2023\tSerializer 5\tSystem.Text.RegularExpressions by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 7\tMicrosoft.Extensions.Logging by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 9\tCommunityToolkit.Mvvm by Microsoft 2023-04-16 =&gt; 16 April 2023\tMVVM 12\tSystem.Runtime.InteropServices by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 21\tMicrosoft.Interop.JavaScript.JSImportGenerator by Microsoft 2023-04-16 =&gt; 16 April 2023\tEnhancementClass 23\tMicrosoft.NET.Sdk.Razor.SourceGenerators by Microsoft 2023-04-16 =&gt; 16 April 2023\tTemplating 85\tMicrosoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft 2023-11-17 =&gt; 17 November 2023\tEnhancementClass 86\tMicrosoft.Extensions.Configuration.Binder by Microsoft 2023-11-18 =&gt; 18 November 2023\tAPI 87\tRDG by Microsoft 2023-11-19 =&gt; 19 November 2023\tAPI 88\tCom by Microsoft 2023-11-20 =&gt; 20 November 2023\tWinAPI 90\tTelemetryLogging by Microsoft 2023-11-30 =&gt; 30 November 2023\tEnhancementClass 130\tMSTest by Microsoft 2024-04-04 =&gt; 04 April 2024\tTests 173\tMicrosoft.Windows.CsWin32 by Microsoft 2024-12-01 =&gt; 01 December 2024\tWinAPI  If you want to study ,there are more at https://github.com/search?q=repo%3Adotnet%2Fruntime%20IIncrementalGenerator&amp;type=code  You can see also the v1 ","version":"Next","tagName":"h2"},{"title":"Lombok.NET by Colin Alpert","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Lombok.NET","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#info","content":" info Name: Lombok.NET This library is to .NET what Lombok is to Java. It generates constructors and other fun stuff using Source Generators for those classes you specify special attributes for. Author: Colin Alpert NuGet:https://www.nuget.org/packages/Lombok.NET/ You can find more details at https://github.com/CollinAlpert/Lombok.NET Source: https://github.com/CollinAlpert/Lombok.NET  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#original-readme","content":" note Lombok.NET This library is to .NET what Lombok is to Java. It generates constructors and other fun stuff using Source Generators for those classes you specify special attributes for. Check out the examples for more info. Installation​ At least Visual Studio 17.3 (or any JetBrains Rider version) is required for projects using this library. The generators generate code compliant with C# 10. You can install Lombok.NET either via NuGet Install-Package Lombok.NET Or via the .NET Core command-line interface: dotnet add package Lombok.NET Building and Debugging​ When building from source in the &quot;Debug&quot; configuration, the build will be suspended until a debugger is attached to the build process. During this time it is possible to set break points inside the generators or analyzers, before attaching to the build process in order for it to continue. This behavior does not exist for the &quot;Release&quot; configuration, so if you just want to run tests or see if a build succeeds, this is best done in the &quot;Release&quot; configuration. Features​ Constructors&quot;With&quot; methodsSingletonsLazyINotifyPropertyChanged/INotifyPropertyChangingAsync overloadsToStringDecorator pattern Usage​ Demo​ This demonstrates the generating of the With pattern. Simply apply an attribute and the library will do the rest. Remember you are not bound to using fields, but can also use properties and supply the appropriate MemberType value to the attribute's constructor. Constructors​ Supported types: Classes, Structs (AllArgsConstructor only)​ [AllArgsConstructor] public partial class Person { private string _name; private int _age; } By supplying the AllArgsConstructor attribute and making the type partial, you allow the Source Generator to create a constructor for it containing all of the classes private fields. If you wish to modify this behavior and would instead like to have a constructor generated off of public properties, you can specify this in the attribute's constructor, e.g.: [AllArgsConstructor(MemberType = MemberType.Property, AccessTypes = AccessType.Public)] public partial class Person { public string Name { get; set; } public int Age { get; set; } } The default is Field for the MemberType and Private for the AccessType. It is crucial to make the type partial, otherwise the Source Generator will not be able to generate a constructor and will throw an exception. If you only wish to have a constructor generated containing the required fields or properties, Lombok.NET offers the RequiredArgsConstructor attribute. Fields are required if they are readonly, properties are required if they don't have a set accessor. There is also a NoArgsConstructor attribute which generates an empty constructor. With Methods​ Supported types: Classes​ For modifying objects after they were created, a common pattern using With... methods is used. Lombok.NET will generate these methods for you based on members in your class. Here's an example: [AllArgsConstructor] [With] public partial class Person { private string _name; private int _age; } class Program { public static void Main() { var person = new Person(&quot;Steve&quot;, 22); person = person.WithName(&quot;Collin&quot;); Console.WriteLine(person.Name); // Prints &quot;Collin&quot; } } With methods will only be generated for properties with a setter and fields without the readonly modifier. Singletons​ Supported types: Classes​ Apply the Singleton attribute to a partial class and Lombok.NET will generate all the boilerplate code required for making your class a thread-safe, lazy singleton. It will create a property called Instance in order to access the singleton's instance. Note that the type needs to have a parameterless constructor. Example: [Singleton] public partial class PersonRepository { } public class MyClass { public MyClass() { var personRepository = PersonRepository.Instance; } } Lazy​ Supported types: Classes, Structs​ Apply the Lazy attribute to a partial class or struct and Lombok.NET will generate a Lazy&lt;T&gt; property which can be used to create an instance of the object lazily. Note that the type needs to have a parameterless constructor.Example: [Lazy] public partial class HeavyInitialization { private HeavyInitialization() { Thread.Sleep(1000); } } public class Program { public Program() { var lazy = HeavyInitialization.Lazy; if(Random.Shared.Next() == 2) { var value = lazy.Value; // do something with value } } } ToString​ Supported types: Classes, Structs, Enums​ To generate a descriptive ToString method to your type, make it partial and add the [ToString] attribute to it. By default, it will include private fields in the ToString method, but this is customizable in the attribute's constructor. [ToString] public partial class Person { private string _name; private int _age; } When applying this attribute to an enum, Lombok.NET will create an extension class with a ToText method. This is due to the fact that enums can't be partial, thus an extension method is needed and the extension method will not be found if it is called ToString. If you have sensitive data in your objects which should not be contained in the ToString method, you can apply the [Masked] attribute to the property or field containing sensitive data. This will cause the value to be replaced by four asterisks (****) in the ToString method. Properties​ Supported types: Classes, Structs​ Generating properties from fields while using them as backing fields is possible using the [Property] attribute. Example: public partial class MyViewModel { [Property] private int _result; } This will create the following property: public int Result { get =&gt; _result; set =&gt; _result = value; } Property change pattern​ Supported types: Classes​ All of the boilerplate code surrounding ÌNotifyPropertyChanged/ÌNotifyPropertyChanging can be generated using a conjunction of the [NotifyPropertyChanged]/[NotifyPropertyChanging] and the [Property] attributes. The [NotifyPropertyChanged] attribute will implement the INotifyPropertyChanged interface and the PropertyChanged event. It will also create a method called SetFieldAndRaisePropertyChanged which sets a backing field and raises the event. The event as well as the method can be used in your ViewModels to implement desired behavior. If you would like to take it a step further, you can also use the [Property] attribute on backing fields while passing the PropertyChangeType parameter to generate properties off of backing fields which will include the raising of the specific event in their setters. Here's an example: [NotifyPropertyChanged] public partial class CustomViewModel { private int _result; public int Result { get =&gt; _result; set =&gt; SetFieldAndRaisePropertyChanged(out _result, value); } // -- OR -- [Property(PropertyChangeType = PropertyChangeType.PropertyChanged)] private int _result; } public class Program { public static void Main() { var vm = new CustomViewModel(); vm.PropertyChanged += (sender, args) =&gt; Console.WriteLine(&quot;A property was changed&quot;); vm.Result = 42; } } If you are using the ReactiveUI library (e.g. when using Avalonia), you can also specify the PropertyChangeType.ReactivePropertyChange to leverage ReactiveUI's property change handling. To be able to generate the properties with the property change-raising behavior, the class must have the [NotifyPropertyChanged] or [NotifyPropertyChanging] (depending on desired behavior) attribute placed above it. Async overloads​ Supported types: Abstract Classes, Interfaces, Methods​ If you want to have async overloads for every method in your interface, you can add the [AsyncOverloads] attribute to it. This also works for abstract classes: [AsyncOverloads] public partial interface IRepository&lt;T&gt; { T GetById(int id); void Save(T entity); } This will add the following methods to your interface: Task&lt;T&gt; GetByIdAsync(int id); Task SaveAsync(T entity); For abstract classes, it will do the same for every abstract method. The inheriting class will be forced to implement the async versions as well. This may also be achieved by using the [Async] attribute. Async methods​ If you would like to create a simple async version of your method, you can add the [Async] attribute to it: public partial class MyViewModel { [Async] public int Square(int i) { return i * i; } } This will add the following method: public Task&lt;int&gt; SquareAsync(int i) =&gt; Task.FromResult(Square(i)); This works for classes and structs, however it must be partial. Decorator Pattern​ Supported types: Abstract Classes, Interfaces​ Lombok.NET also provides an option to generate the boilerplate code when it comes to the decorator pattern. Simply apply the Decorator attribute to an abstract class or an interface and let the Source Generator do the rest. [Decorator] public interface IVehicle { void Drive(); int GetNumberOfWheels(); } This will add the following class to your namespace: public class VehicleDecorator { private readonly IVehicle _vehicle; public VehicleDecorator(IVehicle vehicle) { _vehicle = vehicle; } public virtual void Drive() { _vehicle.Drive(); } public virtual int GetNumberOfWheels() { return _vehicle.GetNumberOfWheels(); } } Please let me know if there is any other functionality you would like to see in this library. I am happy to add more features.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#about","content":" note Generating toString from props/fields. Other demos on site  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Lombok.NET &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Lombok.NET&quot; Version=&quot;2.1.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Lombok_NETDemo_Person.g.cs // &lt;auto-generated/&gt; namespace Lombok.NETDemo; #nullable enable public partial class Person { public override string ToString() { return $&quot;Person: FirstName={FirstName}; LastName={LastName}; FullName={FullName}&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#download-example-net--c","content":" tip Download Example project Lombok.NET   ","version":"Next","tagName":"h3"},{"title":"Share Lombok.NET​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#share-lomboknet","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Lombok.NET  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Lombok.NET by Colin Alpert","url":"/RSCG_Examples/v2/docs/Lombok.NET#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"M31.FluentAPI by Kevin Schaal","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/M31.FluentAPI","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#info","content":" info Name: M31.FluentAPI Generate fluent APIs in C#. Author: Kevin Schaal NuGet:https://www.nuget.org/packages/M31.FluentAPI/ You can find more details at https://www.m31coding.com/blog/fluent-api.html Source: https://github.com/m31coding/M31.FluentAPI  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#original-readme","content":" note Fluent APIs in C# Everybody wants to use fluent APIs but writing them is tedious. With this library providing fluent APIs for your classes becomes a breeze. Simply annotate them with attributes and the source code for the fluent API will be generated. The fluent API library leverages incremental source code generation at development time and your IDE will offer you the corresponding code completion immediately. The generated code follows the builder design pattern and allows you to construct objects step by step. This approach avoids big constructors and results in very readable code. Accompanying blog post: www.m31coding.com&gt;blog&gt;fluent-api Installing via NuGet Install the latest version of the package M31.FluentAPI via your IDE or use the package manager console: PM&gt; Install-Package M31.FluentApi A package reference will be added to your csproj file. Moreover, since this library provides code via source code generation, consumers of your project don't need the reference to M31.FluentAPI. Therefore, it is recommended to use the PrivateAssets metadata tag: &lt;PackageReference Include=&quot;M31.FluentApi&quot; Version=&quot;1.0.0&quot; PrivateAssets=&quot;all&quot;/&gt; If you would like to examine the generated code, you may emit it by adding the following lines to your csproj file: &lt;PropertyGroup&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;/PropertyGroup&gt; The code can then be found in the obj/Generated folder. Usage If you use this library for the first time I recommend that you read the storybook: Program.cs. Here is an example that uses all of the available attributes: [FluentApi] public class Student { [FluentMember(0, &quot;Named&quot;, 0)] public string FirstName { get; private set; } [FluentMember(0, &quot;Named&quot;, 1)] public string LastName { get; private set; } [FluentMember(1, &quot;OfAge&quot;)] public int Age { get; private set; } [FluentMethod(1)] private void BornOn(DateOnly dateOfBirth) { DateOnly today = DateOnly.FromDateTime(DateTime.Today); int age = today.Year - dateOfBirth.Year; if (dateOfBirth &gt; today.AddYears(-age)) age--; Age = age; } [FluentMember(2, &quot;InSemester&quot;)] [FluentDefault(&quot;WhoStartsUniversity&quot;)] public int Semester { get; private set; } = 0; [FluentMember(3, &quot;LivingIn&quot;)] [FluentDefault(&quot;LivingInBoston&quot;)] [FluentNullable(&quot;InUnknownCity&quot;)] public string? City { get; private set; } = &quot;Boston&quot;; [FluentPredicate(4, &quot;WhoIsHappy&quot;, &quot;WhoIsSad&quot;)] [FluentNullable(&quot;WithUnknownMood&quot;)] public bool? IsHappy { get; private set; } [FluentCollection(5, &quot;Friend&quot;, &quot;WhoseFriendsAre&quot;, &quot;WhoseFriendIs&quot;, &quot;WhoHasNoFriends&quot;)] public IReadOnlyCollection&lt;string&gt; Friends { get; private set; } } You may have a look at the generated code for this example: CreateStudent.g.cs Attributes​ The attributes FluentApi and FluentMember are the basic attributes; they are all you need in order to get started. The attributes FluentPredicate and FluentCollection can be used instead of a FluentMember attribute if the decorated member is a boolean or a collection, respectively. FluentDefault and FluentNullable are orthogonal attributes and used in combination with the attributes above. Finally, the FluentMethod attribute is used for custom implementations. FluentApi​ Definition: FluentApiAttribute(string builderClassName = &quot;Create{Name}&quot;) Use this attribute for your class / struct / record. The optional parameter allows you to specify the name of the builder class that will be generated. Within the argument the template \\{Name\\} can be used, which will be replaced by the name of your decorated type. FluentMember​ Definition: FluentMemberAttribute(int builderStep, string method = &quot;With{Name}&quot;, int parameterPosition = 0) Use this attribute for fields and properties of your class. They can be private but properties must have a set accessor. The builderStep parameter specifies the step in which the member can be set. With the method parameter you can specify the name of the builder method. If two FluentMember attributes with the same builder step are used, either a compound method or a fork will be created. If the specified method names are equal, a compound method will be created, which is a builder method that sets multiple properties at once. See the WithName method in the example above. For compounds the position of the parameters can be controlled by the last parameter of this attribute. If the specified method names differ, a fork will be created. That means that there are multiple methods at this step but you can call only one. See the OfAge and BornOn methods in the example above. FluentPredicate​ Definition: FluentPredicateAttribute(int builderStep, string method = &quot;{Name}&quot;, string negatedMethod = &quot;Not{Name}&quot;) Can be used instead of a FluentMember attribute if the decorated member is of type bool. This attribute generates two methods, one for setting the value of the member to true and one for setting it to false. FluentCollection​ Definition: FluentCollectionAttribute( int builderStep, string singularName, string withItems = &quot;With{Name}&quot;, string withItem = &quot;With{SingularName}&quot;, string withZeroItems = &quot;WithZero{Name}&quot;) Can be used instead of a FluentMember attribute if the decorated member is a collection. This attribute generates methods for setting multiple items, one item and zero items. The supported collection types can be seen in the source file CollectionInference.cs. FluentDefault​ Definition: FluentDefaultAttribute(string method = &quot;WithDefault{Name}&quot;) Can be used for fields and properties in addition to other attributes. When the generated builder method is called the member will keep its initial value. FluentNullable​ Definition: FluentNullableAttribute(string method = &quot;Without{Name}&quot;) Can be used for fields and properties in addition to other attributes. Generates a builder method that sets the member to null. FluentMethod​ Definition: FluentMethodAttribute(int builderStep, string method = &quot;{Name}&quot;) Use this attribute on methods in order to provide a custom implementation for setting values or triggering additional behavior. The decorated method must return void. When not to use this library This library generates a builder class for initializing objects step by step. There are use cases for simpler builder classes that don't offer a step by step initialization. E.g. consider the following API for combining hash codes: HashCode hashCode = new HashCode() .Add(42).Add(3.14).AddSequence(new[] { 1, 2, 3 }).Add(&quot;Hello world&quot;); The Add and AddSequence methods can be called any number of times and in any order. This behavior can not be modeled with the fluent API library. In order to create such a builder class I suggest to write the code by hand, since the implementation is straight forward and does not require a lot of additional code. Problems with the IDE As of 2023 code generation with Roslyn is still a relatively new feature but is already supported quite well in Visual Studio and Rider. Since code generation is potentially triggered with every single key stroke, there are sometimes situations where the code completion index of the IDE does not keep up with all the changes. In particular, if your IDE visually indicates that there are errors in your code but it compiles and runs just fine, try the following things: Rebuild the project or the whole solutionUnload and reload the projectClose and reopen the IDERemove the .vs folder (Visual Studio) or the .idea folder (Rider) Contributing Would you like to improve this project? You are kindly invited to contribute. If you would like to implement a new feature, please create a GitHub issue and you will receive timely feedback. Happy coding!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#about","content":" note Builder for your class. But the order counts - generates a new interface each time  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references M31.FluentAPI &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;M31.FluentApi&quot; Version=&quot;1.0.0&quot; PrivateAssets=&quot;all&quot;/&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  M31FluentAPIDemo.Person.fluentapi.g.cs // &lt;auto-generated/&gt; // This code was generated by the library M31.FluentAPI. // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. #nullable enable using M31.FluentApi.Attributes; namespace M31FluentAPIDemo; internal class CreatePerson : CreatePerson.IHasDOB { private readonly Person person; private CreatePerson() { person = new Person(); } public static IHasDOB Named(string firstName, string? lastName) { CreatePerson createPerson = new CreatePerson(); createPerson.person.FirstName = firstName; createPerson.person.LastName = lastName; return createPerson; } public Person HasDOB(System.DateTime? dOB) { person.DOB = dOB; return person; } internal interface IHasDOB { Person HasDOB(System.DateTime? dOB); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#download-example-net--c","content":" tip Download Example project M31.FluentAPI   ","version":"Next","tagName":"h3"},{"title":"Share M31.FluentAPI​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#share-m31fluentapi","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/M31.FluentAPI  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"M31.FluentAPI by Kevin Schaal","url":"/RSCG_Examples/v2/docs/M31.FluentAPI#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"jsonConverterSourceGenerator by Aviationexam","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#info","content":" info Name: jsonConverterSourceGenerator Package Description Author: Aviationexam NuGet:https://www.nuget.org/packages/Aviationexam.GeneratedJsonConverters.SourceGenerator/ You can find more details at https://github.com/aviationexam/json-converter-source-generator Source: https://github.com/aviationexam/json-converter-source-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#original-readme","content":" note Aviationexam.GeneratedJsonConverters.SourceGenerator Motivation for this library are polymorphic contracts with discriminator property not present as first property. i.e. this JSON { &quot;baseProperty&quot;: 1, &quot;$type&quot;: 2, &quot;anotherLeafProperty&quot;: 2 } is deserialized correctly into AnotherLeafContract using this library. And string based enum serialization. Install​ &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Aviationexam.GeneratedJsonConverters.SourceGenerator&quot; Version=&quot;0.1.0&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; How to use library​ &lt;PropertyGroup&gt; &lt;!-- DefaultJsonSerializerContext configuration is required to generate UseEnumConverters method --&gt; &lt;AVI_EJC_DefaultJsonSerializerContext_ClassAccessibility&gt;public&lt;/AVI_EJC_DefaultJsonSerializerContext_ClassAccessibility&gt; &lt;AVI_EJC_DefaultJsonSerializerContext_Namespace&gt;NamespaceOf.My.Json.Serializer.Context&lt;/AVI_EJC_DefaultJsonSerializerContext_Namespace&gt; &lt;AVI_EJC_DefaultJsonSerializerContext_ClassName&gt;MyJsonSerializerContext&lt;/AVI_EJC_DefaultJsonSerializerContext_ClassName&gt; &lt;!-- Allowed options BackingType, FirstEnumName. Default value FirstEnumName --&gt; &lt;AVI_EJC_DefaultEnumSerializationStrategy&gt;BackingType&lt;/AVI_EJC_DefaultEnumSerializationStrategy&gt; &lt;!-- Allowed options UseBackingType, UseEnumName, or UseBackingType|UseEnumName (DeserializationStrategy is Flags enum). Default value UseEnumName --&gt; &lt;AVI_EJC_DefaultEnumDeserializationStrategy&gt;UseBackingType|UseEnumName&lt;/AVI_EJC_DefaultEnumDeserializationStrategy&gt; &lt;/PropertyGroup&gt; // file=contracts.cs using Aviationexam.GeneratedJsonConverters.Attributes; [JsonPolymorphic] // notice, that attributes are from `Aviationexam.GeneratedJsonConverters.Attributes` namespace, not `System.Text.Json.Serialization` [JsonDerivedType(typeof(LeafContract), typeDiscriminator: nameof(LeafContract))] [JsonDerivedType(typeof(AnotherLeafContract), typeDiscriminator: 2)] [JsonDerivedType&lt;GenericLeafContract&gt;(typeDiscriminator: nameof(GenericLeafContract))] public abstract class BaseContract { public int BaseProperty { get; set; } } public sealed class LeafContract : BaseContract { public int LeafProperty { get; set; } } public sealed class AnotherLeafContract : BaseContract { public int AnotherLeafProperty { get; set; } } public sealed class GenericLeafContract : BaseContract { public int Property { get; set; } } [EnumJsonConverter] // this use project defined configuration public enum EMyEnum { [EnumMember(Value = &quot;C&quot;)] A, [EnumMember(Value = &quot;D&quot;)] B, } [EnumJsonConverter( SerializationStrategy = EnumSerializationStrategy.FirstEnumName, DeserializationStrategy = EnumDeserializationStrategy.UseEnumName )] public enum EMyEnumWithExplicitConfiguration { [EnumMember(Value = &quot;C&quot;)] A, [EnumMember(Value = &quot;D&quot;)] B, } [DisableEnumJsonConverter] public enum EMyIgnoredEnum { C, D, } // file=MyJsonSerializerContext.cs using System.Text.Json.Serialization; [JsonSerializable(typeof(BaseContract))] // this line is neccesary, generator searches for JsonSerializableAttribute with argument type decorated by JsonPolymorphicAttribute [JsonSerializable(typeof(LeafContract))] // notice, it's necessary to specify leaf types [JsonSerializable(typeof(AnotherLeafContract))] [JsonSerializable(typeof(GenericLeafContract))] [JsonSerializable(typeof(EMyEnum))] // only necessary for not referenced enums from other contracts [JsonSerializable(typeof(EMyEnumWithExplicitConfiguration))] public partial class MyJsonSerializerContext : JsonSerializerContext { static MyJsonSerializerContext() { // register generated converters to options UsePolymorphicConverters(s_defaultOptions.Converters); UseEnumConverters(s_defaultOptions.Converters); } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#about","content":" note Json Polymorphic generator  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csProjectJsonSerializerContext.cs This is the CSharp Project that references jsonConverterSourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Aviationexam.GeneratedJsonConverters.SourceGenerator&quot; Version=&quot;0.1.11&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attributes.DisableEnumJsonConverterAttribute.g.csEnumDeserializationStrategy.g.csEnumJsonConverterAttribute.g.csEnumJsonConvertor.g.csEnumSerializationStrategy.g.csDiscriminatorStruct.g.csIDiscriminatorStruct.g.csJsonDerivedTypeAttribute.g.csJsonPolymorphicAttribute.g.csPersonJsonPolymorphicConverter.g.csPolymorphicJsonConvertor.g.csProjectJsonSerializerContext.g.csProjectJsonSerializerContext.g.csProjectJsonSerializerContext.GetJsonTypeInfo.g.csProjectJsonSerializerContext.Person.g.csProjectJsonSerializerContext.PersonArray.g.csProjectJsonSerializerContext.PropertyNames.g.csProjectJsonSerializerContext.String.g.csProjectJsonSerializerContext.Student.g.csProjectJsonSerializerContext.Teacher.g.cs // ReSharper disable once CheckNamespace namespace Aviationexam.GeneratedJsonConverters.Attributes; /// &lt;summary&gt; /// When placed on an enum, indicates that generator should not report missing &lt;see cref=&quot;EnumJsonConverterAttribute&quot; /&gt; /// &lt;/summary&gt; [System.AttributeUsage(System.AttributeTargets.Enum, AllowMultiple = false, Inherited = false)] internal sealed class DisableEnumJsonConverterAttribute : System.Text.Json.Serialization.JsonAttribute { }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#download-example-net--c","content":" tip Download Example project jsonConverterSourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share jsonConverterSourceGenerator​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#share-jsonconvertersourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/jsonConverterSourceGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Serializer\" has the following generators:​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#category-serializer-has-the-following-generators","content":" 1 GenPack  2 jsonConverterSourceGenerator  3 JsonPolymorphicGenerator  4 ProtobufSourceGenerator  5 StackXML  6 System.Text.Json  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"jsonConverterSourceGenerator by Aviationexam","url":"/RSCG_Examples/v2/docs/jsonConverterSourceGenerator#see-category","content":" Serializer ","version":"Next","tagName":"h3"},{"title":"MagicMap by Bramer Daniel","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MagicMap","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#info","content":" info Name: MagicMap Helper utility for generating type mapper classes and more Author: Bramer Daniel NuGet:https://www.nuget.org/packages/MagicMap/ You can find more details at https://github.com/bramerdaniel/MagicMap Source: https://github.com/bramerdaniel/MagicMap  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#original-readme","content":" note MagicMap SourceGenerator based package for generating boilerplate code like object mappers This is still under construction Mapping code from one class to another public class Person { public string Name { get; set; } public int Age { get; set; } } public class PersonModel { public string Name { get; set; } public int Age { get; set; } } The required code to write [TypeMapper(typeof(Person), typeof(PersonModel))] internal partial class PersonMapper { } Usage var source = new Person { Name = &quot;Peter&quot;, Age = 34 }; var model = source.ToPersonModel();   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#about","content":" note Auto mapping  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDTO.cs This is the CSharp Project that references MagicMap &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;MagicMap&quot; Version=&quot;1.0.0-alpha.10&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonMapper.generated.csPersonMapperExtensions.generated.csPropertyMapperAttribute.generated.csPropertyMappingAttribute.generated.csTypeFactory.generated.csTypeMapperAttribute.generated.cs //------------------------------------------------ // &lt;auto-generated&gt; // Generated by the MagicMap source generator // &lt;/auto-generated&gt; //------------------------------------------------ namespace mapperlyDemo { [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute] partial class PersonMapper { /// &lt;summary&gt; /// The default singleton instance of the generated type mapper. /// To customize the creation of the default mapper, just implement this property in the defining partial part. /// &lt;/summary&gt; public static PersonMapper Default { get; } = new PersonMapper(); /// &lt;summary&gt;Maps all properties of the &lt;see cref = &quot;source&quot;/&gt; to the properties of the &lt;see cref = &quot;target&quot;/&gt;&lt;/summary&gt; public void Map(global::Person source, global::mapperlyDemo.PersonDTO target) { target.ID = source.ID; target.FirstName = source.FirstName; target.LastName = source.LastName; MapOverride(source, target); } internal global::mapperlyDemo.PersonDTO MapFrom(global::Person source) { var target = Default is MagicMap.ITypeFactory&lt;global::mapperlyDemo.PersonDTO, global::Person&gt; factory ? factory.Create(source) : new global::mapperlyDemo.PersonDTO(); Default.Map(source, target); return target; } /// &lt;summary&gt;Maps all properties of the &lt;see cref = &quot;source&quot;/&gt; to the properties of the &lt;see cref = &quot;target&quot;/&gt;&lt;/summary&gt; public void Map(global::mapperlyDemo.PersonDTO source, global::Person target) { target.ID = source.ID; target.FirstName = source.FirstName; target.LastName = source.LastName; MapOverride(source, target); } internal global::Person MapFrom(global::mapperlyDemo.PersonDTO source) { var target = Default is MagicMap.ITypeFactory&lt;global::Person, global::mapperlyDemo.PersonDTO&gt; factory ? factory.Create(source) : new global::Person(); Default.Map(source, target); return target; } /// &lt;summary&gt;Implement this method, to map the properties the mapper could not handle for any reason.&lt;/summary&gt; partial void MapOverride(global::Person source, global::mapperlyDemo.PersonDTO target); /// &lt;summary&gt;Implement this method, to map the properties the mapper could not handle for any reason.&lt;/summary&gt; partial void MapOverride(global::mapperlyDemo.PersonDTO source, global::Person target); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#download-example-net--c","content":" tip Download Example project MagicMap   ","version":"Next","tagName":"h3"},{"title":"Share MagicMap​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#share-magicmap","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MagicMap  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MagicMap by Bramer Daniel","url":"/RSCG_Examples/v2/docs/MagicMap#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"mapperly by Riok","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/mapperly","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#info","content":" info Name: mapperly A .NET source generator for generating object mappings. Trimming save. Inspired by MapStruct. Author: Riok NuGet:https://www.nuget.org/packages/Riok.Mapperly/ You can find more details at https://mapperly.riok.app/docs/getting-started/installation/ Source: https://github.com/riok/mapperly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#original-readme","content":" note Mapperly Mapperly is a .NET source generator for generating object mappings. Inspired by MapStruct. Because Mapperly creates the mapping code at build time, there is minimal overhead at runtime. Even better, the generated code is perfectly readable, allowing you to verify the generated mapping code easily. Documentation​ The documentation is available here. Quickstart​ Installation​ Add the NuGet Package to your project: dotnet add package Riok.Mapperly Create your first mapper​ Create a mapper declaration as a partial class and apply the Riok.Mapperly.Abstractions.MapperAttribute attribute. Mapperly generates mapping method implementations for the defined mapping methods in the mapper. // Mapper declaration [Mapper] public partial class CarMapper { public partial CarDto CarToCarDto(Car car); } // Mapper usage var mapper = new CarMapper(); var car = new Car { NumberOfSeats = 10, ... }; var dto = mapper.CarToCarDto(car); dto.NumberOfSeats.Should().Be(10); Read the docs for any further information. How To Contribute​ We would love for you to contribute to Mapperly and help make it even better than it is today! Find information on how to contribute in the docs. License​ Mapperly is Apache 2.0 licensed.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#about","content":" note Mapping classes to/from DTO  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDTO.csPersonMapper.cs This is the CSharp Project that references mapperly &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Riok.Mapperly&quot; Version=&quot;2.8.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonMapper.g.cs #nullable enable namespace mapperlyDemo { public partial class PersonMapper { public partial global::mapperlyDemo.PersonDTO Person2PersonDTO(global::Person p) { var target = new global::mapperlyDemo.PersonDTO(); target.ID = p.ID; target.FirstName = p.FirstName; target.LastName = p.LastName; return target; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#download-example-net--c","content":" tip Download Example project mapperly   ","version":"Next","tagName":"h3"},{"title":"Share mapperly​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#share-mapperly","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/mapperly  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"mapperly by Riok","url":"/RSCG_Examples/v2/docs/mapperly#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"MakeInterface.Generator by Frederik","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#info","content":" info Name: MakeInterface.Generator Generates interfaces for classes Author: Frederik NuGet:https://www.nuget.org/packages/MakeInterface.Generator/ You can find more details at https://github.com/Frederik91/MakeInterface Source: https://github.com/Frederik91/MakeInterface  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#original-readme","content":" note MakeInterface Creates an interface of a class using source generator Usage​ Add the attribute to the class you want to generate the interface for [GenerateInterface] public class MyClass { public string MyProperty { get; set; } public void MyMethod() { } } The generated interface will then be generated as IMyClass.g.cs public interface IMyClass { string MyProperty { get; set; } void MyMethod(); } You can then implement the interface in your class public class MyClass : IMyClass { public string MyProperty { get; set; } public void MyMethod() { } } Installation​ Install the NuGet package MakeInterface You can either create the attribute yourself or use the one provided in the package MakeInterface.Contracts License​ MIT  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#about","content":" note Generating interface from class definition  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references MakeInterface.Generator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;MakeInterface.Contracts&quot; Version=&quot;0.4.0&quot; /&gt; &lt;PackageReference Include=&quot;MakeInterface.Generator&quot; Version=&quot;0.4.0&quot; OutputItemType=&quot;Analyzer&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IPerson.g.cs using MakeInterface.Contracts.Attributes; // &lt;auto-generated/&gt; #pragma warning disable #nullable enable namespace Class2Interface; public partial interface IPerson { int ID { get; set; } string FirstName { get; set; } string LastName { get; set; } string Name { get; } string FullName(); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#download-example-net--c","content":" tip Download Example project MakeInterface.Generator   ","version":"Next","tagName":"h3"},{"title":"Share MakeInterface.Generator​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#share-makeinterfacegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MakeInterface.Generator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MakeInterface.Generator by Frederik","url":"/RSCG_Examples/v2/docs/MakeInterface.Generator#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"MapTo by Mohammedreza Taikandi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MapTo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#info","content":" info Name: MapTo An object to object mapping generator using Roslyn source generator. Author: Mohammedreza Taikandi NuGet:https://www.nuget.org/packages/MapTo/ You can find more details at https://github.com/mrtaikandi/MapTo Source: https://github.com/mrtaikandi/MapTo  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#original-readme","content":" note MapTo A convention based object to object mapper using Roslyn source generator. MapTo is a library that programmatically generates the necessary code to map one object to another during compile-time. It eliminates the need to use reflection to map objects and makes it much faster in runtime. It provides compile-time safety checks and ease of use by leveraging extension methods. Installation​ dotnet add package MapTo --prerelease Usage​ Unlike other libraries that require a separate class to define the mappings, MapTo uses attributes to define and instruct it on generating the mappings. To start, declare the target class and annotate it with the MapFrom attribute to specify the source class. using MapTo; namespace App.ViewModels; [MapFrom(typeof(App.Data.Models.User))] public class UserViewModel { public string FirstName { get; init; } public string LastName { get; init; } [IgnoreProperty] public string FullName { get; set; } } To get an instance of UserViewModel from the User class, you can use the generated extension method: var user = new User(id: 10) { FirstName = &quot;John&quot;, LastName = &quot;Doe&quot; }; var vm = user.MapToUserViewModel(); // A generated extension method for User class. Sometimes, the target class (UserViewModel in this case) might have read-only properties that need to be set during the mapping. To do that, you can define the properties without setters and declare the target class as partial. Changing the class to partial will allow the MapTo generator to create the necessary constructor to initialize the read-only properties. [MapFrom(typeof(App.Data.Models.User))] public partial class UserViewModel { public int Id { get; } public string FirstName { get; init; } public string LastName { get; init; } [IgnoreProperty] public string FullName { get; set; } } Available Attributes​ MapFrom​ As mentioned above, this attribute is used to specify the source class. It also can be used to specify custom methods to run on before or after the mapping process. [MapFrom(typeof(App.Data.Models.User), BeforeMap = nameof(RunBeforeMap), AfterMap = nameof(RunAfterMap))] public partial class UserViewModel { public int Id { get; } ... // The BeforeMap method can also return a `User` type. If so, // the returned value will be used as the source object. // Or it can return `null` to skip the mapping process and return `null` to // the extension method's caller. private static void RunBeforeMap(User? source) { /* ... */ } private static void RunAfterMap(UserViewModel target) { /* ... */ } } IgnoreProperty​ By default, MapTo will include all properties with the same name (case-sensitive), whether read-only or not, in the mapping unless annotating them with the IgnoreProperty attribute. [IgnoreProperty] public string FullName { get; set; } MapProperty​ This attribute gives you more control over how the annotated property should get mapped. For instance, if the annotated property should use a property in the source class with a different name. [MapProperty(From = &quot;Id&quot;)] public int Key { get; set; } PropertyTypeConverter​ A compilation error gets raised by default if the source and destination properties types are not implicitly convertible, but to convert the incompatible source type to the desired destination type, PropertyTypeConverterAttribute can be used. This attribute will accept a static method in the target class or another class to convert the source type to the destination type. The method must have the following signature: public static TDestination Convert(TSource source) // or public static TDestination Convert(TSource source, object[]? parameters) [MapFrom(typeof(User))] public partial class UserViewModel { public DateTimeOffset RegisteredAt { get; set; } [IgnoreProperty] public ProfileViewModel Profile { get; set; } [MapProperty(From = nameof(User.Id))] [PropertyTypeConverter(nameof(IntToHexConverter))] public string Key { get; } private static string IntToHexConverter(int source) =&gt; $&quot;{source:X}&quot;; // The converter method. }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#about","content":" note AutoGenerate Mapping  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDTO.cs This is the CSharp Project that references MapTo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;MapTo&quot; Version=&quot;0.9.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  mapperlyDemo.PersonDTO.g.cs // &lt;auto-generated /&gt; #nullable enable namespace mapperlyDemo; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;MapTo&quot;, &quot;0.9.1.51471&quot;)] public static class PersonMapToExtensions { [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(&quot;person&quot;)] public static global::mapperlyDemo.PersonDTO? MapToPersonDTO(this Person? person) { if (ReferenceEquals(person, null)) { return null; } return new PersonDTO { ID = person.ID, FirstName = person.FirstName, LastName = person.LastName }; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#download-example-net--c","content":" tip Download Example project MapTo   ","version":"Next","tagName":"h3"},{"title":"Share MapTo​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#share-mapto","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MapTo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MapTo by Mohammedreza Taikandi","url":"/RSCG_Examples/v2/docs/MapTo#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"Matryoshki by Georgy Krasin","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Matryoshki","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#info","content":" info Name: Matryoshki Metaprogramming framework based on C# source generators Author: Georgy Krasin NuGet:https://www.nuget.org/packages/Matryoshki/ You can find more details at https://github.com/krasin-ga/matryoshki/ Source: https://github.com/krasin-ga/matryoshki/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#original-readme","content":" note Matryoshki &quot;Matryoshki&quot; (Матрёшки, Matryoshkas) is a metaprogramming framework based on C# source generators. Key Features​ Define type-agnostic templates and create decorators based on them:Decorate&lt;IFoo&gt;.With&lt;LoggingAdornment&gt;().Name&lt;FooWithLogging&gt;() Extract interfaces and automatically generate adapters from classes: From&lt;Bar&gt;.ExtractInterface&lt;IBar&gt;(). Getting Started​ Installation​ The first step is to add package to the target project: dotnet add package Matryoshki Once the package is installed, you can proceed with creating adornments. Adornments​ Adornments act as blueprints for creating type-agnostic decorators. They consist of a method template and can contain arbitrary members. Rather than being instantiated as objects, the code of adornment classes is directly injected into the decorator classes. To create an adornment you need to create a class that implements IAdornment. As a simple example, you can create an adornment that outputs the name of the decorated member to the console: public class HelloAdornment : IAdornment { public TResult MethodTemplate&lt;TResult&gt;(Call&lt;TResult&gt; call) { Console.WriteLine($&quot;Hello, {call.MemberName}!&quot;); return call.Forward(); } } When creating a decorated method, call.Forward() will be replaced with a call to the implementation. And TResult will have the type of the actual return value. For void methods, a special type Nothing will be used. A more complex example An adornment for logging can serve as a slightly closer example to real-world usage: public class LoggingAdornment : IAdornment { private readonly ILogger&lt;ExceptionLoggingAdornment&gt; _logger; public LoggingAdornment(ILogger&lt;ExceptionLoggingAdornment&gt; logger) { _logger = logger; } public TResult MethodTemplate&lt;TResult&gt;(Call&lt;TResult&gt; call) { try { if(_logger.IsEnabled(LogLevel.Debug)) _logger.LogDebug(&quot;Executing {Type}.{Member}&quot;, GetType().Name, call.MemberName); var result = call.Forward(); if (_logger.IsEnabled(LogLevel.Debug)) _logger.LogDebug(&quot;Successfully executed {Type}.{Member}: {Result}&quot;, GetType().Name, call.MemberName, result); return result; } catch (Exception exception) { _logger.LogError( exception, &quot;Error executing {Type}.{Member}({Arguments})&quot;, GetType().Name, call.MemberName, string.Join(&quot;,&quot;, call.GetArgumentsOfType&lt;object&gt;())); throw; } } } Asynchronous method templates​ Asynchronous templates can be defined by implementing the AsyncMethodTemplate method, which will be used to decorate methods that return Task or ValueTask. Note that asynchronous templates are optional, and async methods will still be decorated because an AsyncMethodTemplate will be automatically created from the MethodTemplate by awaiting the Forward* method invocations. More tips for writing adornments can be found here: tips Decoration​ Once we have an adornment, we can create our first matryoshkas. Suppose we have two interfaces that we would like to apply our HelloAdornment to. interface IFoo { object Foo(object foo) =&gt; foo; } record Foo : IFoo; interface IBar { Task BarAsync() =&gt; Task.Delay(0); } record Bar : IFoo; To create matryoshkas, you just need to write their specification in any appropriate location: Matryoshka&lt;IFoo&gt; .With&lt;HelloAdornment&gt;() .Name&lt;FooMatryoshka&gt;(); Decorate&lt;IBar&gt; // you can use Decorate&lt;&gt; alias if you prefer .With&lt;HelloAdornment&gt;() .Name&lt;BarMatryoshka&gt;(); Done! Now we can test the generated classes: var fooMatryoshka = new FooMatryoshka(new Foo()); var barMatryoshka = new BarMatryoshka(new Bar()); fooMatryoshka.Foo(); // &quot;Hello, Foo!&quot; will be written to console barMatryoshka.Bar(); // &quot;Hello, Bar!&quot; will be written to console In a production environment, you will likely prefer to use DI containers that support decoration (Grace, Autofac, etc.) or libraries like Scrutor. Here's an example of using matryoshkas together with Scrutor: using Scrutor; using Matryoshki.Abstractions; public static class MatryoshkaScrutorExtensions { public static IServiceCollection DecorateWithMatryoshka( this IServiceCollection services, Expression&lt;Func&lt;MatryoshkaType&gt;&gt; expression) { var matryoshkaType = expression.Compile()(); services.Decorate(matryoshkaType.Target, matryoshkaType.Type); return services; } public static IServiceCollection DecorateWithNestedMatryoshkas( this IServiceCollection services, Expression&lt;Func&lt;MatryoshkaTypes&gt;&gt; expression) { var matryoshkaTypes = expression.Compile()(); foreach (var type in matryoshkaTypes) services.Decorate(matryoshkaTypes.Target, type); return services; } } internal static class Example { internal static IServiceCollection DecorateBar( this IServiceCollection services) { return services.DecorateWithMatryoshka( () =&gt; Matryoshka&lt;IBar&gt;.With&lt;HelloAdornment&gt;()); } } Chains of decorations with INesting&lt;T1, ..., TN&gt;​ Reusable decoration chains can be described by creating a type that implements INesting&lt;T1, ..., TN&gt;: public record ObservabilityNesting : INesting&lt;MetricsAdornment, LoggingAdornment, TracingAdornment&gt;; You can generate the classes using it as follows: static IServiceCollection DecorateFoo(IServiceCollection services) { //assuming that you are using MatryoshkaScrutorExtensions return services.DecorateWithNestedMatryoshkas( () =&gt; Matryoshka&lt;IBar&gt;.WithNesting&lt;ObservabilityNesting&gt;()); } It is not possible to assign names to the classes when using INesting. The generated types will be located in the MatryoshkiGenerated.{NestingName} namespace and have names in the format TargetTypeNameWithAdornmentName. Limitations​ Do not use a variable named value, as this can conflict with a property setter.The call parameter should not be passed to other methods.default cannot be used without specifying a type argument.To apply decorations, the members must be abstract or virtual. To surpass this limitation you can generate an interface with expression From&lt;TClass&gt;.ExtractInterface&lt;TInterface&gt;() and then decrorate TInterface.The decoration expression must be computable at compile time and written with a single statementPattern matching will not always work License​ This project is licensed under the MIT license. Quick links​ Tips  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#about","content":" note Adding decorators to an implementation of interface  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#example-source-csproj-source-files","content":" CSharp ProjectProgram.csAddLog.csIPerson.csPerson.cs This is the CSharp Project that references Matryoshki &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Matryoshki&quot; Version=&quot;1.1.4&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MatryoshkiDemo_AddLog.Compiled.g.cs.PersonMatryoshka.g.cs [assembly: Matryoshki.Abstractions.CompiledAdornmentAttribute(&quot;MatryoshkiDemo.AddLog&quot;, &quot;AddLog&quot;, &quot;DQpuYW1lc3BhY2UgTWF0cnlvc2hraURlbW87DQoNCmludGVybmFsIGNsYXNzIEFkZExvZyA6IElBZG9ybm1lbnQNCnsNCiAgICBwdWJsaWMgVFJlc3VsdCBNZXRob2RUZW1wbGF0ZTxUUmVzdWx0PihDYWxsPFRSZXN1bHQ+IGNhbGwpDQogICAgeyAgICAgICAgDQogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQic3RhcnQgQ2FsbGluZyB7Y2FsbC5NZW1iZXJOYW1lfSAgISIpOw0KICAgICAgICB2YXIgZGF0YSAgICA9Y2FsbC5Gb3J3YXJkKCk7DQogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiZW5kIGNhbGxpbmcge2NhbGwuTWVtYmVyTmFtZX0gISIpOw0KICAgICAgICByZXR1cm4gZGF0YTsNCg0KICAgIH0NCn0=&quot;)]   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#download-example-net--c-","content":" tip Download Example project Matryoshki   ","version":"Next","tagName":"h3"},{"title":"Share Matryoshki​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#share-matryoshki","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Matryoshki  ","version":"Next","tagName":"h3"},{"title":"In the same category (Interface) - 11 other generators​","type":1,"pageTitle":"Matryoshki by Georgy Krasin","url":"/RSCG_Examples/v2/docs/Matryoshki#in-the-same-category-interface---11-other-generators","content":" Biwen.AutoClassGen​  CopyCat​  Farskeptic.AutoCompose​  MakeInterface.Generator​  Minerals.AutoInterfaces​  NetAutomaticInterface​  ProxyGen​  Roozie.AutoInterface​  RSCG_CompositeProvider​  rscg_Interface_to_null_object​  RSCG_Static​ ","version":"Next","tagName":"h3"},{"title":"MemberAccessor by Yamaokuno","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MemberAccessor","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#info","content":" info Name: MemberAccessor Member accessor code generator. Author: Yamaokuno NuGet:https://www.nuget.org/packages/BunnyTail.MemberAccessor/ You can find more details at https://github.com/usausa/member-accessor-generator Source: https://github.com/usausa/member-accessor-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#original-readme","content":" note BunnyTail.MemberAccessor Reference​ Add reference to BunnyTail.MemberAccessor to csproj. &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;BunnyTail.MemberAccessor&quot; Version=&quot;1.2.0&quot; /&gt; &lt;/ItemGroup&gt; MemberAccessor​ Source​ using BunnyTail.MemberAccessor; [GenerateAccessor] public partial class Data { public int Id { get; set; } public string Name { get; set; } = default!; } using BunnyTail.MemberAccessor; var accessorFactory = AccessorRegistry.FindFactory&lt;Data&gt;(); var getter = accessorFactory.CreateGetter&lt;int&gt;(nameof(Data.Id)); var setter = accessorFactory.CreateSetter&lt;int&gt;(nameof(Data.Id)); var data = new Data(); setter(data, 123); var id = getter(data); Benchmark​ BenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.2894) AMD Ryzen 9 5900X, 1 CPU, 24 logical and 12 physical cores .NET SDK 9.0.102 [Host] : .NET 9.0.1 (9.0.124.61010), X64 RyuJIT AVX2 DefaultJob : .NET 9.0.1 (9.0.124.61010), X64 RyuJIT AVX2 Method\tMean\tError\tStdDev\tMin\tMax\tP90\tCode Size\tAllocatedDirectGetter\t0.2180 ns\t0.0033 ns\t0.0027 ns\t0.2144 ns\t0.2231 ns\t0.2222 ns\t10 B\t- ExpressionGetter\t1.0868 ns\t0.0143 ns\t0.0134 ns\t1.0737 ns\t1.1127 ns\t1.1095 ns\t54 B\t- GeneratorGetter\t0.2244 ns\t0.0020 ns\t0.0019 ns\t0.2219 ns\t0.2283 ns\t0.2269 ns\t72 B\t- DirectSetter\t0.2155 ns\t0.0009 ns\t0.0008 ns\t0.2138 ns\t0.2167 ns\t0.2165 ns\t28 B\t- ExpressionSetter\t1.0956 ns\t0.0219 ns\t0.0225 ns\t1.0716 ns\t1.1393 ns\t1.1260 ns\t57 B\t- GeneratorSetter\t0.4306 ns\t0.0014 ns\t0.0012 ns\t0.4284 ns\t0.4328 ns\t0.4323 ns\t80 B\t-  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#about","content":" note Generate getter and setter for class members.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references MemberAccessor &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;BunnyTail.MemberAccessor&quot; Version=&quot;1.2.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AccessorInitializer.g.csDemoMember_Person_Accessor.g.cs // &lt;auto-generated /&gt; #nullable enable internal static class AccessorFactoryInitializer { [global::System.Runtime.CompilerServices.ModuleInitializer] public static void Initialize() { global::BunnyTail.MemberAccessor.AccessorRegistry.RegisterFactory(typeof(global::DemoMember.Person), typeof(global::DemoMember.Person_AccessorFactory)); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#download-example-net--c","content":" tip Download Example project MemberAccessor   ","version":"Next","tagName":"h3"},{"title":"Share MemberAccessor​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#share-memberaccessor","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MemberAccessor  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MemberAccessor by Yamaokuno","url":"/RSCG_Examples/v2/docs/MemberAccessor#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"Microsoft.Extensions.Configuration.Binder by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#info","content":" info Name: Microsoft.Extensions.Configuration.Binder Functionality to bind an object to data in configuration providers. Author: Microsoft NuGet:https://www.nuget.org/packages/Microsoft.Extensions.Configuration.Binder/ You can find more details at https://github.com/dotnet/runtime Source: https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-8#configuration-binding-source-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#original-readme","content":" note  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#about","content":" note Generating Binding for configuration files  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyAppOptions.cs This is the CSharp Project that references Microsoft.Extensions.Configuration.Binder &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!--&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;8.0.0&quot; /&gt;--&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EnableConfigurationBindingGenerator&gt;true&lt;/EnableConfigurationBindingGenerator&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BindingExtensions.g.cs // &lt;auto-generated/&gt; #nullable enable annotations #nullable disable warnings // Suppress warnings about [Obsolete] member usage in generated code. #pragma warning disable CS0612, CS0618 namespace System.Runtime.CompilerServices { using System; using System.CodeDom.Compiler; [GeneratedCode(&quot;Microsoft.Extensions.Configuration.Binder.SourceGeneration&quot;, &quot;8.0.12.31117&quot;)] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] file sealed class InterceptsLocationAttribute : Attribute { public InterceptsLocationAttribute(string filePath, int line, int column) { } } } namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration { using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Options; using System; using System.CodeDom.Compiler; using System.Collections.Generic; using System.Globalization; using System.Runtime.CompilerServices; [GeneratedCode(&quot;Microsoft.Extensions.Configuration.Binder.SourceGeneration&quot;, &quot;8.0.12.31117&quot;)] file static class BindingExtensions { #region OptionsBuilder&lt;TOptions&gt; extensions. /// &lt;summary&gt;Registers the dependency injection container to bind &lt;typeparamref name=&quot;TOptions&quot;/&gt; against the &lt;see cref=&quot;IConfiguration&quot;/&gt; obtained from the DI service provider.&lt;/summary&gt; [InterceptsLocation(@&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\ConfigBinder\\src\\ConfigBinderDemo\\Program.cs&quot;, 20, 14)] public static OptionsBuilder&lt;TOptions&gt; BindConfiguration&lt;TOptions&gt;(this OptionsBuilder&lt;TOptions&gt; optionsBuilder, string configSectionPath, Action&lt;BinderOptions&gt;? configureBinder = null) where TOptions : class { if (optionsBuilder is null) { throw new ArgumentNullException(nameof(optionsBuilder)); } if (configSectionPath is null) { throw new ArgumentNullException(nameof(configSectionPath)); } optionsBuilder.Configure&lt;IConfiguration&gt;((instance, config) =&gt; { if (config is null) { throw new ArgumentNullException(nameof(config)); } IConfiguration section = string.Equals(string.Empty, configSectionPath, StringComparison.OrdinalIgnoreCase) ? config : config.GetSection(configSectionPath); BindCoreMain(section, instance, typeof(TOptions), configureBinder); }); optionsBuilder.Services.AddSingleton&lt;IOptionsChangeTokenSource&lt;TOptions&gt;, ConfigurationChangeTokenSource&lt;TOptions&gt;&gt;(); return optionsBuilder; } #endregion OptionsBuilder&lt;TOptions&gt; extensions. #region Core binding extensions. private readonly static Lazy&lt;HashSet&lt;string&gt;&gt; s_configKeys_MyAppOptions = new(() =&gt; new HashSet&lt;string&gt;(StringComparer.OrdinalIgnoreCase) { &quot;AppDisplayName&quot; }); public static void BindCoreMain(IConfiguration configuration, object instance, Type type, Action&lt;BinderOptions&gt;? configureOptions) { if (instance is null) { return; } if (!HasValueOrChildren(configuration)) { return; } BinderOptions? binderOptions = GetBinderOptions(configureOptions); if (type == typeof(global::ConfigBinderDemo.MyAppOptions)) { var temp = (global::ConfigBinderDemo.MyAppOptions)instance; BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions); return; } throw new NotSupportedException($&quot;Unable to bind to type '{type}': generator did not detect the type as input.&quot;); } public static void BindCore(IConfiguration configuration, ref global::ConfigBinderDemo.MyAppOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions) { ValidateConfigurationKeys(typeof(global::ConfigBinderDemo.MyAppOptions), s_configKeys_MyAppOptions, configuration, binderOptions); if (configuration[&quot;AppDisplayName&quot;] is string value1) { instance.AppDisplayName = value1; } } /// &lt;summary&gt;If required by the binder options, validates that there are no unknown keys in the input configuration object.&lt;/summary&gt; public static void ValidateConfigurationKeys(Type type, Lazy&lt;HashSet&lt;string&gt;&gt; keys, IConfiguration configuration, BinderOptions? binderOptions) { if (binderOptions?.ErrorOnUnknownConfiguration is true) { List&lt;string&gt;? temp = null; foreach (IConfigurationSection section in configuration.GetChildren()) { if (!keys.Value.Contains(section.Key)) { (temp ??= new List&lt;string&gt;()).Add($&quot;'{section.Key}'&quot;); } } if (temp is not null) { throw new InvalidOperationException($&quot;'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(&quot;, &quot;, temp)}&quot;); } } } public static bool HasValueOrChildren(IConfiguration configuration) { if ((configuration as IConfigurationSection)?.Value is not null) { return true; } return AsConfigWithChildren(configuration) is not null; } public static IConfiguration? AsConfigWithChildren(IConfiguration configuration) { foreach (IConfigurationSection _ in configuration.GetChildren()) { return configuration; } return null; } public static BinderOptions? GetBinderOptions(Action&lt;BinderOptions&gt;? configureOptions) { if (configureOptions is null) { return null; } BinderOptions binderOptions = new(); configureOptions(binderOptions); if (binderOptions.BindNonPublicProperties) { throw new NotSupportedException($&quot;The configuration binding source generator does not support 'BinderOptions.BindNonPublicProperties'.&quot;); } return binderOptions; } #endregion Core binding extensions. } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#download-example-net--c","content":" tip Download Example project Microsoft.Extensions.Configuration.Binder   ","version":"Next","tagName":"h3"},{"title":"Share Microsoft.Extensions.Configuration.Binder​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#share-microsoftextensionsconfigurationbinder","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Microsoft.Extensions.Configuration.Binder by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Configuration.Binder#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"Microsoft.Extensions.Logging by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#info","content":" info Name: Microsoft.Extensions.Logging Logging infrastructure. Author: Microsoft NuGet:https://www.nuget.org/packages/Microsoft.Extensions.Logging/ You can find more details at https://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator-generators/ Source: https://github.com/dotnet/runtime  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#original-readme","content":" note .NET Runtime What is .NET?How can I contribute?Reporting security issues and security bugsFiling issuesUseful Links.NET FoundationLicense This repo contains the code to build the .NET runtime, libraries and shared host (dotnet) installers for all supported platforms, as well as the sources to .NET runtime and libraries. What is .NET?​ Official Starting Page: &lt;https://dotnet.microsoft.com\\&gt; How to use .NET (with VS, VS Code, command-line CLI) Install official releasesInstall daily buildsDocumentation (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) Deploying apps Supported OS versions RoadmapReleases How can I contribute?​ We welcome contributions! Many people all over the world have helped make this project better. Contributing explains what kinds of contributions we welcomeWorkflow Instructions explains how to build and testGet Up and Running on .NET Core explains how to get nightly builds of the runtime and its libraries to test them in your own projects. Reporting security issues and security bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;secure@microsoft.com&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's Security doc. Also see info about related Microsoft .NET Core and ASP.NET Core Bug Bounty Program. Filing issues​ This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the dotnet binary (sometimes known as the muxer) and installation of the .NET runtime and libraries. For other issues, please file them to their appropriate sibling repos. We have links to many of them on our new issue page. Useful Links​ .NET Core source index / .NET Framework source indexAPI Reference docs.NET API Catalog (incl. APIs from daily builds and API usage info)API docs writing guidelines - useful when writing /// comments.NET Discord Server - a place to discuss the development of .NET and its ecosystem .NET Foundation​ .NET Runtime is a .NET Foundation project. There are many .NET related projects on GitHub. .NET home repo - links to 100s of .NET projects, from Microsoft and the community.ASP.NET Core home - the best place to start learning about ASP.NET Core. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. General .NET OSS discussions: .NET Foundation Discussions License​ .NET (including the runtime repo) is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#about","content":" note Logging defined and compiled  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#example-source-csproj-source-files","content":" CSharp ProjectProgram.csLogDemo.cs This is the CSharp Project that references Microsoft.Extensions.Logging &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Logging.Console&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  LoggerMessage.g.cs // &lt;auto-generated/&gt; #nullable enable partial class LoggingSample { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Logging.Generators&quot;, &quot;7.0.7.1805&quot;)] private static readonly global::System.Action&lt;global::Microsoft.Extensions.Logging.ILogger, global::System.Double, global::System.Exception?&gt; __UsingFormatSpecifierCallback = global::Microsoft.Extensions.Logging.LoggerMessage.Define&lt;global::System.Double&gt;(global::Microsoft.Extensions.Logging.LogLevel.Critical, new global::Microsoft.Extensions.Logging.EventId(20, nameof(UsingFormatSpecifier)), &quot;Value is {value:E}&quot;, new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Logging.Generators&quot;, &quot;7.0.7.1805&quot;)] public static partial void UsingFormatSpecifier(global::Microsoft.Extensions.Logging.ILogger logger, global::System.Double value) { if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Critical)) { __UsingFormatSpecifierCallback(logger, value, null); } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Logging.Generators&quot;, &quot;7.0.7.1805&quot;)] private static readonly global::System.Action&lt;global::Microsoft.Extensions.Logging.ILogger, global::System.Exception?&gt; __LogWithCustomEventNameCallback = global::Microsoft.Extensions.Logging.LoggerMessage.Define(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(9, &quot;CustomEventName&quot;), &quot;Fixed message&quot;, new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Logging.Generators&quot;, &quot;7.0.7.1805&quot;)] public partial void LogWithCustomEventName() { if (_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Trace)) { __LogWithCustomEventNameCallback(_logger, null); } } /// &lt;summary&gt; This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Logging.Generators&quot;, &quot;7.0.7.1805&quot;)] [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)] private readonly struct __LogWithDynamicLogLevelStruct : global::System.Collections.Generic.IReadOnlyList&lt;global::System.Collections.Generic.KeyValuePair&lt;string, object?&gt;&gt; { private readonly global::System.String _city; private readonly global::System.String _province; public __LogWithDynamicLogLevelStruct(global::System.String city, global::System.String province) { this._city = city; this._province = province; } public override string ToString() { var city = this._city; var province = this._province; return $&quot;Welcome to {city} {province}!&quot;; } public static readonly global::System.Func&lt;__LogWithDynamicLogLevelStruct, global::System.Exception?, string&gt; Format = (state, ex) =&gt; state.ToString(); public int Count =&gt; 3; public global::System.Collections.Generic.KeyValuePair&lt;string, object?&gt; this[int index] { get =&gt; index switch { 0 =&gt; new global::System.Collections.Generic.KeyValuePair&lt;string, object?&gt;(&quot;city&quot;, this._city), 1 =&gt; new global::System.Collections.Generic.KeyValuePair&lt;string, object?&gt;(&quot;province&quot;, this._province), 2 =&gt; new global::System.Collections.Generic.KeyValuePair&lt;string, object?&gt;(&quot;{OriginalFormat}&quot;, &quot;Welcome to {city} {province}!&quot;), _ =&gt; throw new global::System.IndexOutOfRangeException(nameof(index)), // return the same exception LoggerMessage.Define returns in this case }; } public global::System.Collections.Generic.IEnumerator&lt;global::System.Collections.Generic.KeyValuePair&lt;string, object?&gt;&gt; GetEnumerator() { for (int i = 0; i &lt; 3; i++) { yield return this[i]; } } global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() =&gt; GetEnumerator(); } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Logging.Generators&quot;, &quot;7.0.7.1805&quot;)] public partial void LogWithDynamicLogLevel(global::System.String city, global::Microsoft.Extensions.Logging.LogLevel level, global::System.String province) { if (_logger.IsEnabled(level)) { _logger.Log( level, new global::Microsoft.Extensions.Logging.EventId(10, nameof(LogWithDynamicLogLevel)), new __LogWithDynamicLogLevelStruct(city, province), null, __LogWithDynamicLogLevelStruct.Format); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#download-example-net--c-","content":" tip Download Example project Microsoft.Extensions.Logging   ","version":"Next","tagName":"h3"},{"title":"Share Microsoft.Extensions.Logging​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#share-microsoftextensionslogging","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementClass) - 27 other generators​","type":1,"pageTitle":"Microsoft.Extensions.Logging by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Logging#in-the-same-category-enhancementclass---27-other-generators","content":" ApparatusAOT​  AspectGenerator​  CommonCodeGenerator​  Comparison​  DudNet​  Enhanced.GetTypes​  FastGenericNew​  HsuSgSync​  Immutype​  Ling.Audit​  Lombok.NET​  M31.FluentAPI​  MemberAccessor​  MemoryPack​  Meziantou.Polyfill​  Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator​  Microsoft.Interop.JavaScript.JSImportGenerator​  OptionToStringGenerator​  QueryStringGenerator​  RSCG_Decorator​  RSCG_UtilityTypes​  StaticReflection​  SyncMethodGenerator​  System.Runtime.InteropServices​  System.Text.RegularExpressions​  TelemetryLogging​  ThisClass​ ","version":"Next","tagName":"h3"},{"title":"MemoryPack by Cysharp, Inc","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MemoryPack","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#info","content":" info Name: MemoryPack Package Description Author: Cysharp, Inc NuGet:https://www.nuget.org/packages/MemoryPack/ You can find more details at https://github.com/Cysharp/MemoryPack Source: https://github.com/Cysharp/MemoryPack  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#original-readme","content":" note MemoryPack Zero encoding extreme performance binary serializer for C# and Unity. Compared with System.Text.Json, protobuf-net, MessagePack for C#, Orleans.Serialization. Measured by .NET 7 / Ryzen 9 5950X machine. These serializers have IBufferWriter&lt;byte&gt; method, serialized using ArrayBufferWriter&lt;byte&gt; and reused to avoid measure buffer copy. For standard objects, MemoryPack is x10 faster and x2 ~ x5 faster than other binary serializers. For struct array, MemoryPack is even more powerful, with speeds up to x50 ~ x200 greater than other serializers. MemoryPack is my 4th serializer, previously I've created well known serializers, ZeroFormatter, Utf8Json, MessagePack for C#. The reason for MemoryPack's speed is due to its C#-specific, C#-optimized binary format and a well tuned implementation based on my past experience. It is also a completely new design utilizing .NET 7 and C# 11 and the Incremental Source Generator (.NET Standard 2.1 (.NET 5, 6) and there is also Unity support). Other serializers perform many encoding operations such as VarInt encoding, tag, string, etc. MemoryPack format uses a zero-encoding design that copies as much C# memory as possible. Zero-encoding is similar to FlatBuffers, but it doesn't need a special type, MemoryPack's serialization target is POCO. Other than performance, MemoryPack has these features. Support modern I/O APIs (IBufferWriter&lt;byte&gt;, ReadOnlySpan&lt;byte&gt;, ReadOnlySequence&lt;byte&gt;)Native AOT friendly Source Generator based code generation, no Dynamic CodeGen (IL.Emit)Reflectionless non-generics APIsDeserialize into existing instancePolymorphism (Union) serializationLimited version-tolerant (fast/default) and full version-tolerant supportCircular reference serializationPipeWriter/Reader based streaming serializationTypeScript code generation and ASP.NET Core FormatterUnity (2021.3) IL2CPP Support via .NET Source Generator Installation​ This library is distributed via NuGet. For best performance, recommend to use .NET 7. Minimum requirement is .NET Standard 2.1. PM&gt; Install-Package MemoryPack And also a code editor requires Roslyn 4.3.1 support, for example Visual Studio 2022 version 17.3, .NET SDK 6.0.401. For details, see the Roslyn Version Support document. For Unity, the requirements and installation process are completely different. See the Unity section for details. Quick Start​ Define a struct or class to be serialized and annotate it with the [MemoryPackable] attribute and the partial keyword. using MemoryPack; [MemoryPackable] public partial class Person { public int Age { get; set; } public string Name { get; set; } } Serialization code is generated by the C# source generator feature which implements the IMemoryPackable&lt;T&gt; interface. In Visual Studio you can check a generated code by using a shortcut Ctrl+K, R on the class name and select *.MemoryPackFormatter.g.cs. Call MemoryPackSerializer.Serialize&lt;T&gt;/Deserialize&lt;T&gt; to serialize/deserialize an object instance. var v = new Person { Age = 40, Name = &quot;John&quot; }; var bin = MemoryPackSerializer.Serialize(v); var val = MemoryPackSerializer.Deserialize&lt;Person&gt;(bin); Serialize method supports a return type of byte[] as well as it can serialize to IBufferWriter&lt;byte&gt; or Stream. Deserialize method supports ReadOnlySpan&lt;byte&gt;, ReadOnlySequence&lt;byte&gt; and Stream. And there are alse non-generics versions. Built-in supported types​ These types can be serialized by default: .NET primitives (byte, int, bool, char, double, etc.)Unmanaged types (Any enum, Any user-defined struct which doesn't contain reference types)string, decimal, Half, Int128, UInt128, Guid, Rune, BigIntegerTimeSpan, DateTime, DateTimeOffset, TimeOnly, DateOnly, TimeZoneInfoComplex, Plane, Quaternion Matrix3x2, Matrix4x4, Vector2, Vector3, Vector4Uri, Version, StringBuilder, Type, BitArray, CultureInfoT[], T[,], T[,,], T[,,,], Memory&lt;&gt;, ReadOnlyMemory&lt;&gt;, ArraySegment&lt;&gt;, ReadOnlySequence&lt;&gt;Nullable&lt;&gt;, Lazy&lt;&gt;, KeyValuePair&lt;,&gt;, Tuple&lt;,...&gt;, ValueTuple&lt;,...&gt;List&lt;&gt;, LinkedList&lt;&gt;, Queue&lt;&gt;, Stack&lt;&gt;, HashSet&lt;&gt;, SortedSet&lt;&gt;, PriorityQueue&lt;,&gt;Dictionary&lt;,&gt;, SortedList&lt;,&gt;, SortedDictionary&lt;,&gt;, ReadOnlyDictionary&lt;,&gt;Collection&lt;&gt;, ReadOnlyCollection&lt;&gt;, ObservableCollection&lt;&gt;, ReadOnlyObservableCollection&lt;&gt;IEnumerable&lt;&gt;, ICollection&lt;&gt;, IList&lt;&gt;, IReadOnlyCollection&lt;&gt;, IReadOnlyList&lt;&gt;, ISet&lt;&gt;IDictionary&lt;,&gt;, IReadOnlyDictionary&lt;,&gt;, ILookup&lt;,&gt;, IGrouping&lt;,&gt;,ConcurrentBag&lt;&gt;, ConcurrentQueue&lt;&gt;, ConcurrentStack&lt;&gt;, ConcurrentDictionary&lt;,&gt;, BlockingCollection&lt;&gt;Immutable collections (ImmutableList&lt;&gt;, etc.) and interfaces (IImmutableList&lt;&gt;, etc.) Define [MemoryPackable] class / struct / record / record struct​ [MemoryPackable] can annotate to any class, struct, record, record struct and interface. If a type is struct or record struct which contains no reference types (C# Unmanaged types) any additional annotation (ignore, include, constructor, callbacks) is not used, that serialize/deserialize directly from the memory. Otherwise, by default, [MemoryPackable] serializes public instance properties or fields. You can use [MemoryPackIgnore] to remove serialization target, [MemoryPackInclude] promotes a private member to serialization target. [MemoryPackable] public partial class Sample { // these types are serialized by default public int PublicField; public readonly int PublicReadOnlyField; public int PublicProperty { get; set; } public int PrivateSetPublicProperty { get; private set; } public int ReadOnlyPublicProperty { get; } public int InitProperty { get; init; } public required int RequiredInitProperty { get; init; } // these types are not serialized by default int privateProperty { get; set; } int privateField; readonly int privateReadOnlyField; // use [MemoryPackIgnore] to remove target of a public member [MemoryPackIgnore] public int PublicProperty2 =&gt; PublicProperty + PublicField; // use [MemoryPackInclude] to promote a private member to serialization target [MemoryPackInclude] int privateField2; [MemoryPackInclude] int privateProperty2 { get; set; } } MemoryPack's code generator adds information about what members are serialized to the &lt;remarks /&gt; section. This can be viewed by hovering over the type with Intellisense. All members must be memorypack-serializable, if not the code generator will emit an error. MemoryPack has 35 diagnostics rules (MEMPACK001 to MEMPACK035) to be defined comfortably. If target type is defined MemoryPack serialization externally and registered, use [MemoryPackAllowSerialize] to silent diagnostics. [MemoryPackable] public partial class Sample2 { [MemoryPackAllowSerialize] public NotSerializableType? NotSerializableProperty { get; set; } } Member order is important, MemoryPack does not serialize the member-name or other information, instead serializing fields in the order they are declared. If a type is inherited, serialization is performed in the order of parent → child. The order of members can not change for the deserialization. For the schema evolution, see the Version tolerant section. The default order is sequential, but you can choose the explicit layout with [MemoryPackable(SerializeLayout.Explicit)] and [MemoryPackOrder()]. // serialize Prop0 -&gt; Prop1 [MemoryPackable(SerializeLayout.Explicit)] public partial class SampleExplicitOrder { [MemoryPackOrder(1)] public int Prop1 { get; set; } [MemoryPackOrder(0)] public int Prop0 { get; set; } } Constructor selection​ MemoryPack supports both parameterized and parameterless constructors. The selection of the constructor follows these rules. (Applies to classes and structs). If there is [MemoryPackConstructor], use it.If there is no explicit constructor (including private), use a parameterless one.If there is one parameterless/parameterized constructor (including private), use it.If there are multiple constructors, then the [MemoryPackConstructor] attribute must be applied to the desired constructor (the generator will not automatically choose one), otherwise the generator will emit an error.If using a parameterized constructor, all parameter names must match corresponding member names (case-insensitive). [MemoryPackable] public partial class Person { public readonly int Age; public readonly string Name; // You can use a parameterized constructor - parameter names must match corresponding members name (case-insensitive) public Person(int age, string name) { this.Age = age; this.Name = name; } } // also supports record primary constructor [MemoryPackable] public partial record Person2(int Age, string Name); public partial class Person3 { public int Age { get; set; } public string Name { get; set; } public Person3() { } // If there are multiple constructors, then [MemoryPackConstructor] should be used [MemoryPackConstructor] public Person3(int age, string name) { this.Age = age; this.Name = name; } } Serialization callbacks​ When serializing/deserializing, MemoryPack can invoke a before/after event using the [MemoryPackOnSerializing], [MemoryPackOnSerialized], [MemoryPackOnDeserializing], [MemoryPackOnDeserialized] attributes. It can annotate both static and instance (non-static) methods, and public and private methods. [MemoryPackable] public partial class MethodCallSample { // method call order is static -&gt; instance [MemoryPackOnSerializing] public static void OnSerializing1() { Console.WriteLine(nameof(OnSerializing1)); } // also allows private method [MemoryPackOnSerializing] void OnSerializing2() { Console.WriteLine(nameof(OnSerializing2)); } // serializing -&gt; /* serialize */ -&gt; serialized [MemoryPackOnSerialized] static void OnSerialized1() { Console.WriteLine(nameof(OnSerialized1)); } [MemoryPackOnSerialized] public void OnSerialized2() { Console.WriteLine(nameof(OnSerialized2)); } [MemoryPackOnDeserializing] public static void OnDeserializing1() { Console.WriteLine(nameof(OnDeserializing1)); } // Note: instance method with MemoryPackOnDeserializing, that not called if instance is not passed by `ref` [MemoryPackOnDeserializing] public void OnDeserializing2() { Console.WriteLine(nameof(OnDeserializing2)); } [MemoryPackOnDeserialized] public static void OnDeserialized1() { Console.WriteLine(nameof(OnDeserialized1)); } [MemoryPackOnDeserialized] public void OnDeserialized2() { Console.WriteLine(nameof(OnDeserialized2)); } } Callbacks allows parameterless method and ref reader/writer, ref T value method. For example, ref callbacks can write/read custom header before serialization process. [MemoryPackable] public partial class EmitIdData { public int MyProperty { get; set; } [MemoryPackOnSerializing] static void WriteId&lt;TBufferWriter&gt;(ref MemoryPackWriter&lt;TBufferWriter&gt; writer, ref EmitIdData? value) where TBufferWriter : IBufferWriter&lt;byte&gt; // .NET Standard 2.1, use where TBufferWriter : class, IBufferWriter&lt;byte&gt; { writer.WriteUnmanaged(Guid.NewGuid()); // emit GUID in header. } [MemoryPackOnDeserializing] static void ReadId(ref MemoryPackReader reader, ref EmitIdData? value) { // read custom header before deserialize var guid = reader.ReadUnmanaged&lt;Guid&gt;(); Console.WriteLine(guid); } } If set a value to ref value, you can change the value used for serialization/deserialization. For example, instantiate from ServiceProvider. // before using this formatter, set ServiceProvider // var options = MemoryPackSerializerOptions.Default with { ServiceProvider = provider }; // MemoryPackSerializer.Deserialize(value, options); [MemoryPackable] public partial class InstantiateFromServiceProvider { static IServiceProvider serviceProvider = default!; public int MyProperty { get; private set; } [MemoryPackOnDeserializing] static void OnDeserializing(ref MemoryPackReader reader, ref InstantiateFromServiceProvider value) { if (value != null) return; value = reader.Options.ServiceProvider!.GetRequiredService&lt;InstantiateFromServiceProvider&gt;(); } } Define custom collection​ By default, annotated [MemoryPackObject] type try to serialize its members. However, if a type is a collection (ICollection&lt;&gt;, ISet&lt;&gt;, IDictionary&lt;,&gt;), use GenerateType.Collection to serialize it correctly. [MemoryPackable(GenerateType.Collection)] public partial class MyList&lt;T&gt; : List&lt;T&gt; { } [MemoryPackable(GenerateType.Collection)] public partial class MyStringDictionary&lt;TValue&gt; : Dictionary&lt;string, TValue&gt; { } Polymorphism (Union)​ MemoryPack supports serializing interface and abstract class objects for polymorphism serialization. In MemoryPack this feature is called Union. Only interfaces and abstracts classes are allowed to be annotated with [MemoryPackUnion] attributes. Unique union tags are required. // Annotate [MemoryPackable] and inheritance types with [MemoryPackUnion] // Union also supports abstract class [MemoryPackable] [MemoryPackUnion(0, typeof(FooClass))] [MemoryPackUnion(1, typeof(BarClass))] public partial interface IUnionSample { } [MemoryPackable] public partial class FooClass : IUnionSample { public int XYZ { get; set; } } [MemoryPackable] public partial class BarClass : IUnionSample { public string? OPQ { get; set; } } // --- IUnionSample data = new FooClass() { XYZ = 999 }; // Serialize as interface type. var bin = MemoryPackSerializer.Serialize(data); // Deserialize as interface type. var reData = MemoryPackSerializer.Deserialize&lt;IUnionSample&gt;(bin); switch (reData) { case FooClass x: Console.WriteLine(x.XYZ); break; case BarClass x: Console.WriteLine(x.OPQ); break; default: break; } tag allows 0 ~ 65535, it is especially efficient for less than 250. If an interface and derived types are in different assemblies, you can use MemoryPackUnionFormatterAttribute instead. Formatters are generated the way that they are automatically registered via ModuleInitializer in C# 9.0 and above. Note that ModuleInitializer is not supported in Unity, so the formatter must be manually registered. To register your union formatter invoke {name of your union formatter}Initializer.RegisterFormatter() manually in Startup. For example UnionSampleFormatterInitializer.RegisterFormatter(). // AssemblyA [MemoryPackable(GenerateType.NoGenerate)] public partial interface IUnionSample { } // AssemblyB define definition outside of target type [MemoryPackUnionFormatter(typeof(IUnionSample))] [MemoryPackUnion(0, typeof(FooClass))] [MemoryPackUnion(1, typeof(BarClass))] public partial class UnionSampleFormatter { } Union can be assembled in code via DynamicUnionFormatter&lt;T&gt;. var formatter = new DynamicUnionFormatter&lt;IFooBarBaz&gt;(new[] { (0, typeof(Foo)), (1, typeof(Bar)), (2, typeof(Baz)) }); MemoryPackFormatterProvider.Register(formatter); Serialize API​ Serialize has three overloads. // Non generic API also available, these version is first argument is Type and value is object? byte[] Serialize&lt;T&gt;(in T? value, MemoryPackSerializerOptions? options = default) void Serialize&lt;T, TBufferWriter&gt;(in TBufferWriter bufferWriter, in T? value, MemoryPackSerializerOptions? options = default) async ValueTask SerializeAsync&lt;T&gt;(Stream stream, T? value, MemoryPackSerializerOptions? options = default, CancellationToken cancellationToken = default) For performance, the recommended API uses BufferWriter. This serializes directly into the buffer. It can be applied to PipeWriter in System.IO.Pipelines, BodyWriter in ASP .NET Core, etc. If a byte[] is required (e.g. RedisValue in StackExchange.Redis), the return byte[] API is simple and almost as fast. Note that SerializeAsync for Stream is asynchronous only for Flush; it serializes everything once into MemoryPack's internal pool buffer and then writes using WriteAsync. Therefore, the BufferWriter overload, which separates and controls buffer and flush, is better. If you want to do a complete streaming write, see the Streaming Serialization section. MemoryPackSerializerOptions​ MemoryPackSerializerOptions configures whether strings are serialized as UTF16 or UTF8. This can be configured by passing MemoryPackSerializerOptions.Utf8 for UTF8 encoding, MemoryPackSerializerOptions.Utf16 for UTF16 encoding or MemoryPackSerializerOptions.Default which defaults to UTF8. Passing null or using the default parameter results in UTF8 encoding. Since C#'s internal string representation is UTF16, UTF16 performs better. However, the payload tends to be larger; in UTF8, an ASCII string is one byte, while in UTF16 it is two bytes. Because the difference in size of this payload is so large, UTF8 is set by default. If the data is non-ASCII (e.g. Japanese, which can be more than 3 bytes, and UTF8 is larger), or if you have to compress it separately, UTF16 may give better results. While UTF8 or UTF16 can be selected during serialization, it is not necessary to specify it during deserialization. It will be automatically detected and deserialized normally. Additionaly you can get/set IServiceProvider? ServiceProvider { get; init; } from options. It is useful to get DI object(such as ILogger&lt;T&gt;) from serialization process(MemoryPackReader/MemoryPackWriter has .Options property). Deserialize API​ Deserialize has ReadOnlySpan&lt;byte&gt; and ReadOnlySequence&lt;byte&gt;, Stream overload and ref support. T? Deserialize&lt;T&gt;(ReadOnlySpan&lt;byte&gt; buffer) int Deserialize&lt;T&gt;(ReadOnlySpan&lt;byte&gt; buffer, ref T? value) T? Deserialize&lt;T&gt;(in ReadOnlySequence&lt;byte&gt; buffer) int Deserialize&lt;T&gt;(in ReadOnlySequence&lt;byte&gt; buffer, ref T? value) async ValueTask&lt;T?&gt; DeserializeAsync&lt;T&gt;(Stream stream) ref overload overwrites an existing instance, for details see the Overwrite section. DeserializeAsync(Stream) is not a complete streaming read operation, first it reads into MemoryPack's internal pool up to the end-of-stream, then it deserializes. If you want to do a complete streaming read operation, see the Streaming Serialization section. Overwrite​ To reduce allocations, MemoryPack supports deserializing to an existing instance, overwriting it. This can be used with the Deserialize(ref T? value) overload. var person = new Person(); var bin = MemoryPackSerializer.Serialize(person); // overwrite data to existing instance. MemoryPackSerializer.Deserialize(bin, ref person); MemoryPack will attempt to overwrite as much as possible, but if the following conditions do not match, it will create a new instance (as in normal deserialization). ref value (includes members in object graph) is null, set new instanceonly allows parameterless constructor, if parameterized constructor is used, create new instanceif value is T[], reuse only if the length is the same, otherwise create new instanceif value is collection that has .Clear() method(List&lt;&gt;, Stack&lt;&gt;, Queue&lt;&gt;, LinkedList&lt;&gt;, HashSet&lt;&gt;, PriorityQueue&lt;,&gt;, ObservableCollection, Collection, ConcurrentQueue&lt;&gt;, ConcurrentStack&lt;&gt;, ConcurrentBag&lt;&gt;, Dictionary&lt;,&gt;, SortedDictionary&lt;,&gt;, SortedList&lt;,&gt;, ConcurrentDictionary&lt;,&gt;) call Clear() and reuse it, otherwise create new instance Version tolerant​ In default(GenerateType.Object), MemoryPack supports limited schema evolution. unmanaged struct can't be changed anymoremembers can be added, but can not be deletedcan change member namecan't change member ordercan't change member type [MemoryPackable] public partial class VersionCheck { public int Prop1 { get; set; } public long Prop2 { get; set; } } // Add is OK. [MemoryPackable] public partial class VersionCheck { public int Prop1 { get; set; } public long Prop2 { get; set; } public int? AddedProp { get; set; } } // Remove is NG. [MemoryPackable] public partial class VersionCheck { // public int Prop1 { get; set; } public long Prop2 { get; set; } } // Change order is NG. [MemoryPackable] public partial class VersionCheck { public long Prop2 { get; set; } public int Prop1 { get; set; } } In use-case, store old data (to file, to redis, etc...) and read to new schema is always ok. In the RPC scenario, schema exists both on the client and the server side, the client must be updated before the server. An updated client has no problem connecting to the old server but an old client can not connect to a new server. The next Serialization info section shows how to check for schema changes, e.g., by CI, to prevent accidents. When using GenerateType.VersionTolerant, it supports full version-tolerant. unmanaged struct can't change any moreall members must add [MemoryPackOrder] explicitly(except annotate SerializeLayout.Sequential)members can add, can delete but not reuse order (can use missing order)can change member namecan't change member ordercan't change member type // Ok to serialize/deserialize both // VersionTolerantObject1 -&gt; VersionTolerantObject2 and // VersionTolerantObject2 -&gt; VersionTolerantObject1 [MemoryPackable(GenerateType.VersionTolerant)] public partial class VersionTolerantObject1 { [MemoryPackOrder(0)] public int MyProperty0 { get; set; } = default; [MemoryPackOrder(1)] public long MyProperty1 { get; set; } = default; [MemoryPackOrder(2)] public short MyProperty2 { get; set; } = default; } [MemoryPackable(GenerateType.VersionTolerant)] public partial class VersionTolerantObject2 { [MemoryPackOrder(0)] public int MyProperty0 { get; set; } = default; // deleted //[MemoryPackOrder(1)] //public long MyProperty1 { get; set; } = default; [MemoryPackOrder(2)] public short MyProperty2 { get; set; } = default; // added [MemoryPackOrder(3)] public short MyProperty3 { get; set; } = default; } // If set SerializeLayout.Sequential explicitly, allows automatically order. // But it can not remove any member for versoin-tolerant. [MemoryPackable(GenerateType.VersionTolerant, SerializeLayout.Sequential)] public partial class VersionTolerantObject3 { public int MyProperty0 { get; set; } = default; public long MyProperty1 { get; set; } = default; public short MyProperty2 { get; set; } = default; } GenerateType.VersionTolerant is slower than GenerateType.Object in serializing. Also, the payload size will be slightly larger. Serialization info​ You can check IntelliSense in type what members are serialized. There is an option to write that information to a file at compile time. Set MemoryPackGenerator_SerializationInfoOutputDirectory as follows. &lt;!-- output memorypack serialization info to directory --&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;MemoryPackGenerator_SerializationInfoOutputDirectory&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;MemoryPackGenerator_SerializationInfoOutputDirectory&gt;$(MSBuildProjectDirectory)\\MemoryPackLogs&lt;/MemoryPackGenerator_SerializationInfoOutputDirectory&gt; &lt;/PropertyGroup&gt; The following info is written to the file. If the type is unmanaged, showed unmanaged before type name. unmanaged FooStruct --- int x int y By checking the differences in this file, dangerous schema changes can be prevented. For example, you may want to use CI to detect the following rules modify unmanaged typemember order changemember deletion Circular Reference​ MemoryPack also supports circular reference. This allows the tree objects to be serialized as is. // to enable circular-reference, use GenerateType.CircularReference [MemoryPackable(GenerateType.CircularReference)] public partial class Node { [MemoryPackOrder(0)] public Node? Parent { get; set; } [MemoryPackOrder(1)] public Node[]? Children { get; set; } } For example, System.Text.Json preserve-references code will become like here. // https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/preserve-references?pivots=dotnet-7-0 Employee tyler = new() { Name = &quot;Tyler Stein&quot; }; Employee adrian = new() { Name = &quot;Adrian King&quot; }; tyler.DirectReports = new List&lt;Employee&gt; { adrian }; adrian.Manager = tyler; var bin = MemoryPackSerializer.Serialize(tyler); Employee? tylerDeserialized = MemoryPackSerializer.Deserialize&lt;Employee&gt;(bin); Console.WriteLine(tylerDeserialized?.DirectReports?[0].Manager == tylerDeserialized); // true [MemoryPackable(GenerateType.CircularReference)] public partial class Employee { [MemoryPackOrder(0)] public string? Name { get; set; } [MemoryPackOrder(1)] public Employee? Manager { get; set; } [MemoryPackOrder(2)] public List&lt;Employee&gt;? DirectReports { get; set; } } GenerateType.CircularReference has the same characteristics as version-tolerant. However, as an additional constraint, only parameterless constructors are allowed. Also, object reference tracking is only done for objects marked with GenerateType.CircularReference. If you want to track any other object, wrap it. CustomFormatter​ If implements MemoryPackCustomFormatterAttribute&lt;T&gt; or MemoryPackCustomFormatterAttribute&lt;TFormatter, T&gt;(more performant, but complex), you can configure to use custom formatter to MemoryPackObject's member. [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false, Inherited = false)] public abstract class MemoryPackCustomFormatterAttribute&lt;T&gt; : Attribute { public abstract IMemoryPackFormatter&lt;T&gt; GetFormatter(); } MemorySharp provides the following formatting attributes: Utf8StringFormatterAttribute, Utf16StringFormatterAttribute, InternStringFormatterAttribute, OrdinalIgnoreCaseStringDictionaryFormatterAttribute&lt;TValue&gt;, BitPackFormatterAttribute, BrotliFormatter, BrotliStringFormatter, BrotliFormatter&lt;T&gt;, MemoryPoolFormatter&lt;T&gt;, ReadOnlyMemoryPoolFormatter&lt;T&gt;. [MemoryPackable] public partial class Sample { // serialize this member as UTF16 String, it is performant than UTF8 but in ASCII, size is larger(but non ASCII, sometimes smaller). [Utf16StringFormatter] public string? Text { get; set; } // In deserialize, Dictionary is initialized with StringComparer.OrdinalIgnoreCase. [OrdinalIgnoreCaseStringDictionaryFormatter&lt;int&gt;] public Dictionary&lt;string, int&gt;? Ids { get; set; } // In deserialize time, all string is interned(see: String.Intern). If similar values come repeatedly, it saves memory. [InternStringFormatter] public string? Flag { get; set; } } In order to configure a set/dictionary's equality comparer, all built-in formatters have a comparer constructor overload. You can easily create custom equality-comparer formatters. public sealed class OrdinalIgnoreCaseStringDictionaryFormatter&lt;TValue&gt; : MemoryPackCustomFormatterAttribute&lt;Dictionary&lt;string, TValue?&gt;&gt; { static readonly DictionaryFormatter&lt;string, TValue?&gt; formatter = new DictionaryFormatter&lt;string, TValue?&gt;(StringComparer.OrdinalIgnoreCase); public override IMemoryPackFormatter&lt;Dictionary&lt;string, TValue?&gt;&gt; GetFormatter() { return formatter; } } BitPackFormatter compresses bool[] types only. bool[] is normally serialized as 1 byte per boolean value, however ``BitPackFormatterserializesbool[]like aBitArraystoring each bool as 1 bit. UsingBitPackFormatter`, 8 bools become 1 byte where they would normally be 8 bytes, resulting in a 8x smaller size. [MemoryPackable] public partial class Sample { public int Id { get; set; } [BitPackFormatter] public bool[]? Data { get; set; } } BrotliFormatter is for byte[], for example you can compress large payload by Brotli. [MemoryPackable] public partial class Sample { public int Id { get; set; } [BrotliFormatter] public byte[]? Payload { get; set; } } BrotliStringFormatter is for string, serialize compressed string (UTF16) by Brotli. [MemoryPackable] public partial class Sample { public int Id { get; set; } [BrotliStringFormatter] public string? LargeText { get; set; } } BrotliFormatter&lt;T&gt; is for any type, serialized data compressed by Brotli. If a type is byte[] or string, you should use BrotliFormatter or BrotliStringFormatter for performance. [MemoryPackable] public partial class Sample { public int Id { get; set; } [BrotliFormatter&lt;ChildType&gt;] public ChildType? Child { get; set; } } Deserialize array pooling​ In order to deserialize a large array (any T), MemoryPack offers multiple efficient pooling methods. The most effective way is to use the #Overwrite function. In particular List&lt;T&gt; is always reused. [MemoryPackable] public partial class ListBytesSample { public int Id { get; set; } public List&lt;byte&gt; Payload { get; set; } } // ---- // List&lt;byte&gt; is reused, no allocation in deserialize. MemoryPackSerializer.Deserialize&lt;ListBytesSample&gt;(bin, ref reuseObject); // for efficient operation, you can get Span&lt;T&gt; by CollectionsMarshal var span = CollectionsMarshal.AsSpan(value.Payload); A convenient way is to deserialize to an ArrayPool at deserialization time. MemoryPack provides MemoryPoolFormatter&lt;T&gt; and ReadOnlyMemoryPoolFormatter&lt;T&gt;. [MemoryPackable] public partial class PoolModelSample : IDisposable { public int Id { get; } [MemoryPoolFormatter&lt;byte&gt;] public Memory&lt;byte&gt; Payload { get; private set; } public PoolModelSample(int id, Memory&lt;byte&gt; payload) { Id = id; Payload = payload; } // You must write the return code yourself, here is snippet. bool usePool; [MemoryPackOnDeserialized] void OnDeserialized() { usePool = true; } public void Dispose() { if (!usePool) return; Return(Payload); Payload = default; } static void Return&lt;T&gt;(Memory&lt;T&gt; memory) =&gt; Return((ReadOnlyMemory&lt;T&gt;)memory); static void Return&lt;T&gt;(ReadOnlyMemory&lt;T&gt; memory) { if (MemoryMarshal.TryGetArray(memory, out var segment) &amp;&amp; segment.Array is { Length: &gt; 0 }) { ArrayPool&lt;T&gt;.Shared.Return(segment.Array, clearArray: RuntimeHelpers.IsReferenceOrContainsReferences&lt;T&gt;()); } } } // --- using(var value = MemoryPackSerializer.Deserialize&lt;PoolModelSample&gt;(bin)) { // do anything... } // return to ArrayPool Performance​ See the my blog post How to make the fastest .NET Serializer with .NET 7 / C# 11, case of MemoryPack Payload size and compression​ Payload size depends on the target value; unlike JSON, there are no keys and it is a binary format, so the payload size is likely to be smaller than JSON. For those with varint encoding, such as MessagePack and Protobuf, MemoryPack tends to be larger if ints are used a lot (in MemoryPack, ints are always 4 bytes due to fixed size encoding, while MessagePack is 1~5 bytes). float and double are 4 bytes and 8 bytes in MemoryPack, but 5 bytes and 9 bytes in MessagePack. So MemoryPack is smaller, for example, for Vector3 (float, float, float) arrays. String is UTF8 by default, which is similar to other serializers, but if the UTF16 option is chosen, it will be of a different nature. In any case, if the payload size is large, compression should be considered. LZ4, ZStandard and Brotli are recommended. Compression​ MemoryPack provides an efficient helper for Brotli compression via BrotliEncoder and BrotliDecoder. MemoryPack's BrotliCompressor and BrotliDecompressor provide compression/decompression optimized for MemoryPack's internal behavior. using MemoryPack.Compression; // Compression(require using) using var compressor = new BrotliCompressor(); MemoryPackSerializer.Serialize(compressor, value); // Get compressed byte[] var compressedBytes = compressor.ToArray(); // Or write to other IBufferWriter&lt;byte&gt;(for example PipeWriter) compressor.CopyTo(response.BodyWriter); using MemoryPack.Compression; // Decompression(require using) using var decompressor = new BrotliDecompressor(); // Get decompressed ReadOnlySequence&lt;byte&gt; from ReadOnlySpan&lt;byte&gt; or ReadOnlySequence&lt;byte&gt; var decompressedBuffer = decompressor.Decompress(buffer); var value = MemoryPackSerializer.Deserialize&lt;T&gt;(decompressedBuffer); Both BrotliCompressor and BrotliDecompressor are struct, it does not allocate memory on heap. Both store compressed or decompressed data in an internal memory pool for Serialize/Deserialize. Therefore, it is necessary to release the memory pooling, don't forget to use using. Compression level is very important. The default is set to quality-1 (CompressionLevel.Fastest), which is different from the .NET default (CompressionLevel.Optimal, quality-4). Fastest (quality-1) will be close to the speed of LZ4, but 4 is much slower. This was determined to be critical in the serializer use scenario. Be careful when using the standard BrotliStream (quality-4 is the default). In any case, compression/decompression speeds and sizes will result in very different results for different data. Please prepare the data to be handled by your application and test it yourself. Note that there is a several-fold speed penalty between MemoryPack's uncompressed and Brotli's added compression. Brotli is also suppored in a custom formatter. BrotliFormatter can compress a specific member. [MemoryPackable] public partial class Sample { public int Id { get; set; } [BrotliFormatter] public byte[]? Payload { get; set; } } Serialize external types​ If you want to serialize external types, you can make a custom formatter and register it to provider, see Formatter/Provider API for details. However, creating a custom formatter is difficult. Therefore, we recommend making a wrapper type. For example, if you want to serialize an external type called AnimationCurve. // Keyframe: (float time, float inTangent, float outTangent, int tangentMode, int weightedMode, float inWeight, float outWeight) [MemoryPackable] public readonly partial struct SerializableAnimationCurve { [MemoryPackIgnore] public readonly AnimationCurve AnimationCurve; [MemoryPackInclude] WrapMode preWrapMode =&gt; AnimationCurve.preWrapMode; [MemoryPackInclude] WrapMode postWrapMode =&gt; AnimationCurve.postWrapMode; [MemoryPackInclude] Keyframe[] keys =&gt; AnimationCurve.keys; [MemoryPackConstructor] SerializableAnimationCurve(WrapMode preWrapMode, WrapMode postWrapMode, Keyframe[] keys) { var curve = new AnimationCurve(keys); curve.preWrapMode = preWrapMode; curve.postWrapMode = postWrapMode; this.AnimationCurve = curve; } public SerializableAnimationCurve(AnimationCurve animationCurve) { this.AnimationCurve = animationCurve; } } The type to wrap is public, but excluded from serialization (MemoryPackIgnore). The properties you want to serialize are private, but included (MemoryPackInclude). Two patterns of constructors should also be prepared. The constructor used by the serializer should be private. As it is, it must be wrapped every time, which is inconvenient. And also strcut wrapper can not represents null. So let's create a custom formatter. public class AnimationCurveFormatter : MemoryPackFormatter&lt;AnimationCurve&gt; { // Unity does not support scoped and TBufferWriter so change signature to `Serialize(ref MemoryPackWriter writer, ref AnimationCurve value)` public override void Serialize&lt;TBufferWriter&gt;(ref MemoryPackWriter&lt;TBufferWriter&gt; writer, scoped ref AnimationCurve? value) { if (value == null) { writer.WriteNullObjectHeader(); return; } writer.WritePackable(new SerializableAnimationCurve(value)); } public override void Deserialize(ref MemoryPackReader reader, scoped ref AnimationCurve? value) { if (reader.PeekIsNull()) { reader.Advance(1); // skip null block value = null; return; } var wrapped = reader.ReadPackable&lt;SerializableAnimationCurve&gt;(); value = wrapped.AnimationCurve; } } Finally, register the formatter in startup. MemoryPackFormatterProvider.Register&lt;AnimationCurve&gt;(new AnimationCurveFormatter()); Note: Unity's AnimationCurve can serializable by default so does not needs this custom formatter for AnimationCurve Packages​ MemoryPack has these packages. MemoryPackMemoryPack.CoreMemoryPack.GeneratorMemoryPack.StreamingMemoryPack.AspNetCoreMvcFormatterMemoryPack.UnityShims MemoryPack is the main library, it provides full support for high performance serialization and deserialization of binary objects. It depends on MemoryPack.Core for the core base libraries and MemoryPack.Generator for code generation. MemoryPack.Streaming adds additional extensions for Streaming Serialization. MemoryPack.AspNetCoreMvcFormatter adds input/output formatters for ASP.NET Core. MemoryPack.UnityShims adds Unity shim types and formatters for share type between .NET and Unity. TypeScript and ASP.NET Core Formatter​ MemoryPack supports TypeScript code generation. It generates class and serialization code from C#, In other words, you can share types with the Browser without using OpenAPI, proto, etc. Code generation is integrated with Source Generator, the following options(MemoryPackGenerator_TypeScriptOutputDirectory) set the output directory for TypeScript code. Runtime code is output at the same time, so no additional dependencies are required. &lt;!-- output memorypack TypeScript code to directory --&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;MemoryPackGenerator_TypeScriptOutputDirectory&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;MemoryPackGenerator_TypeScriptOutputDirectory&gt;$(MSBuildProjectDirectory)\\wwwroot\\js\\memorypack&lt;/MemoryPackGenerator_TypeScriptOutputDirectory&gt; &lt;/PropertyGroup&gt; A C# MemoryPackable type must be annotated with [GenerateTypeScript]. [MemoryPackable] [GenerateTypeScript] public partial class Person { public required Guid Id { get; init; } public required int Age { get; init; } public required string FirstName { get; init; } public required string LastName { get; init; } public required DateTime DateOfBirth { get; init; } public required Gender Gender { get; init; } public required string[] Emails { get; init; } } public enum Gender { Male, Female, Other } Runtime code and TypeScript type will be generated in the target directory. The generated code is as follows, with simple fields and static methods for serialize/serializeArray and deserialize/deserializeArray. import { MemoryPackWriter } from &quot;./MemoryPackWriter.js&quot;; import { MemoryPackReader } from &quot;./MemoryPackReader.js&quot;; import { Gender } from &quot;./Gender.js&quot;; export class Person { id: string; age: number; firstName: string | null; lastName: string | null; dateOfBirth: Date; gender: Gender; emails: (string | null)[] | null; constructor() { // snip... } static serialize(value: Person | null): Uint8Array { // snip... } static serializeCore(writer: MemoryPackWriter, value: Person | null): void { // snip... } static serializeArray(value: (Person | null)[] | null): Uint8Array { // snip... } static serializeArrayCore(writer: MemoryPackWriter, value: (Person | null)[] | null): void { // snip... } static deserialize(buffer: ArrayBuffer): Person | null { // snip... } static deserializeCore(reader: MemoryPackReader): Person | null { // snip... } static deserializeArray(buffer: ArrayBuffer): (Person | null)[] | null { // snip... } static deserializeArrayCore(reader: MemoryPackReader): (Person | null)[] | null { // snip... } } You can use this type like following. let person = new Person(); person.id = crypto.randomUUID(); person.age = 30; person.firstName = &quot;foo&quot;; person.lastName = &quot;bar&quot;; person.dateOfBirth = new Date(1999, 12, 31, 0, 0, 0); person.gender = Gender.Other; person.emails = [&quot;foo@bar.com&quot;, &quot;zoo@bar.net&quot;]; // serialize to Uint8Array let bin = Person.serialize(person); let blob = new Blob([bin.buffer], { type: &quot;application/x-memorypack&quot; }) let response = await fetch(&quot;http://localhost:5260/api&quot;, { method: &quot;POST&quot;, body: blob, headers: { &quot;Content-Type&quot;: &quot;application/x-memorypack&quot; } }); let buffer = await response.arrayBuffer(); // deserialize from ArrayBuffer let person2 = Person.deserialize(buffer); The MemoryPack.AspNetCoreMvcFormatter package adds MemoryPack input and output formatters for ASP.NET Core MVC. You can add MemoryPackInputFormatter, MemoryPackOutputFormatter to ASP.NET Core MVC with the following code. var builder = WebApplication.CreateBuilder(args); builder.Services.AddRazorPages(); builder.Services.AddControllers(options =&gt; { options.InputFormatters.Insert(0, new MemoryPackInputFormatter()); // If checkContentType: true then can output multiple format(JSON/MemoryPack, etc...). default is false. options.OutputFormatters.Insert(0, new MemoryPackOutputFormatter(checkContentType: false)); }); If you call from HttpClient, you can set application/x-memorypack to content-header. var content = new ByteArrayContent(bin) content.Headers.ContentType = new MediaTypeHeaderValue(&quot;application/x-memorypack&quot;); TypeScript Type Mapping​ There are a few restrictions on the types that can be generated. Among the primitives, char and decimal are not supported. Also, OpenGenerics type cannot be used. C#\tTypeScript\tDescriptionbool\tboolean byte\tnumber sbyte\tnumber int\tnumber uint\tnumber short\tnumber ushort\tnumber long\tbigint ulong\tbigint float\tnumber double\tnumber string\tstring | null Guid\tstring\tIn TypeScript, represents as string but serialize/deserialize as 16byte binary DateTime\tDate\tDateTimeKind will be ignored enum\tconst enum\tlong and ulong underlying type is not supported T?\tT | null T[]\tT[] | null byte[]\tUint8Array | null : ICollection&lt;T&gt;\tT[] | null\tSupports all ICollection&lt;T&gt; implemented type like List&lt;T&gt; : ISet&lt;T&gt;\tSet&lt;T&gt; | null\tSupports all ISet&lt;T&gt; implemented type like HashSet&lt;T&gt; : IDictionary&lt;K,V&gt;\tMap&lt;K, V&gt; | null\tSupports all IDictionary&lt;K,V&gt; implemented type like Dictionary&lt;K,V&gt;. [MemoryPackable]\tclass\tSupports class only [MemoryPackUnion]\tabstract class [GenerateTypeScript] can only be applied to classes and is currently not supported by struct. Configure import file extension and member name casing​ In default, MemoryPack generates file extension as .js like import { MemoryPackWriter } from &quot;./MemoryPackWriter.js&quot;;. If you want to change other extension or empty, use MemoryPackGenerator_TypeScriptImportExtension to configure it. Also the member name is automatically converted to camelCase. If you want to use original name, use MemoryPackGenerator_TypeScriptConvertPropertyName to false. &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;MemoryPackGenerator_TypeScriptOutputDirectory&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;MemoryPackGenerator_TypeScriptImportExtension&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;MemoryPackGenerator_TypeScriptConvertPropertyName&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;MemoryPackGenerator_TypeScriptEnableNullableTypes&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;MemoryPackGenerator_TypeScriptOutputDirectory&gt;$(MSBuildProjectDirectory)\\wwwroot\\js\\memorypack&lt;/MemoryPackGenerator_TypeScriptOutputDirectory&gt; &lt;!-- allows empty --&gt; &lt;MemoryPackGenerator_TypeScriptImportExtension&gt;&lt;/MemoryPackGenerator_TypeScriptImportExtension&gt; &lt;!-- default is true --&gt; &lt;MemoryPackGenerator_TypeScriptConvertPropertyName&gt;false&lt;/MemoryPackGenerator_TypeScriptConvertPropertyName&gt; &lt;!-- default is false --&gt; &lt;MemoryPackGenerator_TypeScriptEnableNullableTypes&gt;true&lt;/MemoryPackGenerator_TypeScriptEnableNullableTypes&gt; &lt;/PropertyGroup&gt; MemoryPackGenerator_TypeScriptEnableNullableTypes allows C# nullable annotations to be reflected in TypeScript code. The default is false, making everything nullable. Streaming Serialization​ MemoryPack.Streaming provides MemoryPackStreamingSerializer, which adds additional support for serializing and deserializing collections with streams. public static class MemoryPackStreamingSerializer { public static async ValueTask SerializeAsync&lt;T&gt;(PipeWriter pipeWriter, int count, IEnumerable&lt;T&gt; source, int flushRate = 4096, CancellationToken cancellationToken = default) public static async ValueTask SerializeAsync&lt;T&gt;(Stream stream, int count, IEnumerable&lt;T&gt; source, int flushRate = 4096, CancellationToken cancellationToken = default) public static async IAsyncEnumerable&lt;T?&gt; DeserializeAsync&lt;T&gt;(PipeReader pipeReader, int bufferAtLeast = 4096, int readMinimumSize = 8192, [EnumeratorCancellation] CancellationToken cancellationToken = default) public static IAsyncEnumerable&lt;T?&gt; DeserializeAsync&lt;T&gt;(Stream stream, int bufferAtLeast = 4096, int readMinimumSize = 8192, CancellationToken cancellationToken = default) } Formatter/Provider API​ If you want to implement formatter manually, inherit MemoryPackFormatter&lt;T&gt; and override the Serialize and Deserialize methods. public class SkeltonFormatter : MemoryPackFormatter&lt;Skelton&gt; { public override void Serialize&lt;TBufferWriter&gt;(ref MemoryPackWriter&lt;TBufferWriter&gt; writer, scoped ref Skelton? value) { if (value == null) { writer.WriteNullObjectHeader(); return; } // use writer method. } public override void Deserialize(ref MemoryPackReader reader, scoped ref Skelton? value) { if (!reader.TryReadObjectHeader(out var count)) { value = null; return; } // use reader method. } } The created formatter is registered with MemoryPackFormatterProvider. MemoryPackFormatterProvider.Register(new SkeltonFormatter()); Note: unmanged struct(doesn't contain reference types) can not use custom formatter, it always serializes native memory layout. MemoryPackWriter/ReaderOptionalState​ Initializing MemoryPackWriter/MemoryPackReader requires OptionalState. It is wrapper of MemoryPackSerializerOptions, it can create form MemoryPackWriterOptionalStatePool. // when disposed, OptionalState will return to pool. using(var state = MemoryPackWriterOptionalStatePool.Rent(MemoryPackSerializerOptions.Default)) { var writer = new MemoryPackWriter&lt;T&gt;(ref t, state); } // for Reader using (var state = MemoryPackReaderOptionalStatePool.Rent(MemoryPackSerializerOptions.Default)) { var reader = new MemoryPackReader(buffer, state); } Target framework dependency​ MemoryPack provides netstandard2.1 and net7.0 but both are not compatible. For example, MemoryPackable types under netstandard2.1 project and use it from net7.0 project, throws runtime exception like this Unhandled exception. System.TypeLoadException: Virtual static method '' is not implemented on type '' from assembly '*'. Since net7.0 uses static abstract members (Virtual static method), that does not support netstandard2.1, this behavior is a specification. .NET 7 project shouldn't use the netstandard 2.1 dll. In other words, if the Application is a .NET 7 Project, all the dependencies that use MemoryPack must support .NET 7. So if a library developer has a dependency on MemoryPack, you need to configure dual target framework. &lt;TargetFrameworks&gt;netstandard2.1;net7.0&lt;/TargetFrameworks&gt; RPC​ Cysharp/MagicOnion is a code-first grpc-dotnet framework using MessagePack instead of protobuf. MagicOnion now supports MemoryPack as a serialization layer via MagicOnion.Serialization.MemoryPack package(preview). See details: MagicOnion#MemoryPack support Unity​ Install via UPM git URL package or asset package (MemoryPack...*.unitypackage) available in MemoryPack/releases page. https://github.com/Cysharp/MemoryPack.git?path=src/MemoryPack.Unity/Assets/Plugins/MemoryPack If you want to set a target version, MemoryPack uses the *.*.* release tag, so you can specify a version like #1.8.0. For example https://github.com/Cysharp/MemoryPack.git?path=src/MemoryPack.Unity/Assets/Plugins/MemoryPack#1.8.0. Minimum supported Unity version is 2021.3. The dependency managed DLL System.Runtime.CompilerServices.Unsafe/6.0.0 is included with unitypackage. For git references, you will need to add them in another way as they are not included to avoid unnecessary dependencies; either extract the dll from unitypackage or download it from the NuGet page. As with the .NET version, the code is generated by a code generator (MemoryPack.Generator.Roslyn3.dll). Reflection-free implementation also provides the best performance in IL2CPP. For more information on Unity and Source Generator, please refer to the Unity documentation. Source Generator is also used officially by Unity by com.unity.properties and com.unity.entities. In other words, it is the standard for code generation in the next generation of Unity. Unity version does not support CustomFormatter and ImmutableCollections. You can serialize all unmanaged types (such as Vector3, Rect, etc...) and some classes(AnimationCurve, Gradient, RectOffset). If you want to serialize other Unity-specific types, see Serialize external types section. In Unity performance, MemoryPack is x3~x10 faster than JsonUtility. Unity version's MemoryPack does not compatible with .NET MemoryPack in NuGet so can't do creating netstandard 2.1 dll in .NET and use in Unity. If you want to share type between .NET and Unity, share source-code, for example place source code in Unity directory and .NET project reference by code link. &lt;ItemGroup&gt; &lt;Compile Include=&quot;..\\ChatApp.Unity\\Assets\\Scripts\\ServerShared\\**\\*.cs&quot; /&gt; &lt;/ItemGroup&gt; If shared code has Unity's type(Vector2, etc...), MemoryPack provides MemoryPack.UnityShims package in NuGet. The MemoryPack.UnityShims package provides shims for Unity's standard structs (Vector2, Vector3, Vector4, Quaternion, Color, Bounds, Rect, Keyframe, WrapMode, Matrix4x4, GradientColorKey, GradientAlphaKey, GradientMode, Color32, LayerMask, Vector2Int, Vector3Int, RangeInt, RectInt, BoundsInt) and some classes(AnimationCurve, Gradient, RectOffset). Native AOT​ Unfortunately, .NET 7 Native AOT causes crash (Generic virtual method pointer lookup failure) when use MemoryPack due to a runtime bug. It is going to be fixed in .NET 8. Using ``Microsoft.DotNet.ILCompiler` preview version, will fix it in .NET 7. Please see issue's comment how setup it. Binary wire format specification​ The type of T defined in Serialize&lt;T&gt; and Deserialize&lt;T&gt; is called C# schema. MemoryPack format is not self-described format. Deserialize requires the corresponding C# schema. These types exist as internal representations of binaries, but types cannot be determined without a C# schema. Endian must be Little Endian. However, reference C# implementation does not care about endianness so can not use on big-endian machine. However, modern computers are usually little-endian. There are eight types of format. Unmanaged structObjectVersion Tolerant ObjectCircular Reference ObjectTupleCollectionStringUnion Unmanaged struct​ Unmanaged struct is C# struct that doesn't contain reference types, similar constraint of C# Unmanaged types. Serializing struct layout as it is, includes padding. Object​ (byte memberCount, [values...]) Object has 1byte unsigned byte as member count in header. Member count allows 0 to 249, 255 represents object is null. Values store memorypack value for the number of member count. Version Tolerant Object​ (byte memberCount, [varint byte-length-of-values...], [values...]) Version Tolerant Object is similar as Object but has byte length of values in header. varint follows these spec, first sbyte is value or typeCode and next X byte is value. 0 to 127 = unsigned byte value, -1 to -120 = signed byte value, -121 = byte, -122 = sbyte, -123 = ushort, -124 = short, -125 = uint, -126 = int, -127 = ulong, -128 = long. Circular Reference Object​ (byte memberCount, [varint byte-length-of-values...], varint referenceId, [values...]) (250, varint referenceId) Circular Reference Object is similar as Version Tolerant Object but if memberCount is 250, next varint(unsigned-int32) is referenceId. If not, after byte-length-of-values, varint referenceId is written. Tuple​ (values...) Tuple is fixed-size, non-nullable value collection. In .NET, KeyValuePair&lt;TKey, TValue&gt; and ValueTuple&lt;T,...&gt; are serialized as Tuple. Collection​ (int length, [values...]) Collection has 4 byte signed integer as data count in header, -1 represents null. Values store memorypack value for the number of length. String​ (int utf16-length, utf16-value) (int ~utf8-byte-count, int utf16-length, utf8-bytes) String has two-forms, UTF16 and UTF8. If first 4byte signed integer is -1, represents null. 0, represents empty. UTF16 is same as collection(serialize as ReadOnlySpan\\&lt;char\\&gt;, utf16-value's byte count is utf16-length * 2). If first signed integer &lt;= -2, value is encoded by UTF8. utf8-byte-count is encoded in complement, ~utf8-byte-count to retrieve count of bytes. Next signed integer is utf16-length, it allows -1 that represents unknown length. utf8-bytes store bytes for the number of utf8-byte-count. Union​ (byte tag, value) (250, ushort tag, value) First unsigned byte is tag that for discriminated value type or flag, 0 to 249 represents tag, 250 represents next unsigned short is tag, 255 represents union is null. License​ This library is licensed under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#about","content":" note Efficient serializer  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references MemoryPack &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;MemoryPack&quot; Version=&quot;1.9.16&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MemoryPackDemo.Person.MemoryPackFormatter.g.cs // &lt;auto-generated/&gt; #nullable enable #pragma warning disable CS0108 // hides inherited member #pragma warning disable CS0162 // Unreachable code #pragma warning disable CS0164 // This label has not been referenced #pragma warning disable CS0219 // Variable assigned but never used #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type. #pragma warning disable CS8601 // Possible null reference assignment #pragma warning disable CS8602 #pragma warning disable CS8604 // Possible null reference argument for parameter #pragma warning disable CS8619 #pragma warning disable CS8620 #pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method #pragma warning disable CS8765 // Nullability of type of parameter #pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member #pragma warning disable CA1050 // Declare types in namespaces. using System; using MemoryPack; namespace MemoryPackDemo; /// &lt;remarks&gt; /// MemoryPack GenerateType: Object&lt;br/&gt; /// &lt;code&gt; /// &lt;b&gt;int&lt;/b&gt; Age&lt;br/&gt; /// &lt;b&gt;string&lt;/b&gt; Name&lt;br/&gt; /// &lt;/code&gt; /// &lt;/remarks&gt; partial class Person : IMemoryPackable&lt;Person&gt; { static Person() { global::MemoryPack.MemoryPackFormatterProvider.Register&lt;Person&gt;(); } [global::MemoryPack.Internal.Preserve] static void IMemoryPackFormatterRegister.RegisterFormatter() { if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered&lt;Person&gt;()) { global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.MemoryPackableFormatter&lt;Person&gt;()); } if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered&lt;Person[]&gt;()) { global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter&lt;Person&gt;()); } } [global::MemoryPack.Internal.Preserve] static void IMemoryPackable&lt;Person&gt;.Serialize&lt;TBufferWriter&gt;(ref MemoryPackWriter&lt;TBufferWriter&gt; writer, scoped ref Person? value) { if (value == null) { writer.WriteNullObjectHeader(); goto END; } writer.WriteUnmanagedWithObjectHeader(2, value.@Age); writer.WriteString(value.@Name); END: return; } [global::MemoryPack.Internal.Preserve] static void IMemoryPackable&lt;Person&gt;.Deserialize(ref MemoryPackReader reader, scoped ref Person? value) { if (!reader.TryReadObjectHeader(out var count)) { value = default!; goto END; } int __Age; string __Name; if (count == 2) { if (value == null) { reader.ReadUnmanaged(out __Age); __Name = reader.ReadString(); goto NEW; } else { __Age = value.@Age; __Name = value.@Name; reader.ReadUnmanaged(out __Age); __Name = reader.ReadString(); goto SET; } } else if (count &gt; 2) { MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(Person), 2, count); goto READ_END; } else { if (value == null) { __Age = default!; __Name = default!; } else { __Age = value.@Age; __Name = value.@Name; } if (count == 0) goto SKIP_READ; reader.ReadUnmanaged(out __Age); if (count == 1) goto SKIP_READ; __Name = reader.ReadString(); if (count == 2) goto SKIP_READ; SKIP_READ: if (value == null) { goto NEW; } else { goto SET; } } SET: value.@Age = __Age; value.@Name = __Name; goto READ_END; NEW: value = new Person() { @Age = __Age, @Name = __Name }; READ_END: END: return; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#download-example-net--c-","content":" tip Download Example project MemoryPack   ","version":"Next","tagName":"h3"},{"title":"Share MemoryPack​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#share-memorypack","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MemoryPack  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementClass) - 27 other generators​","type":1,"pageTitle":"MemoryPack by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/MemoryPack#in-the-same-category-enhancementclass---27-other-generators","content":" ApparatusAOT​  AspectGenerator​  CommonCodeGenerator​  Comparison​  DudNet​  Enhanced.GetTypes​  FastGenericNew​  HsuSgSync​  Immutype​  Ling.Audit​  Lombok.NET​  M31.FluentAPI​  MemberAccessor​  Meziantou.Polyfill​  Microsoft.Extensions.Logging​  Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator​  Microsoft.Interop.JavaScript.JSImportGenerator​  OptionToStringGenerator​  QueryStringGenerator​  RSCG_Decorator​  RSCG_UtilityTypes​  StaticReflection​  SyncMethodGenerator​  System.Runtime.InteropServices​  System.Text.RegularExpressions​  TelemetryLogging​  ThisClass​ ","version":"Next","tagName":"h3"},{"title":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#info","content":" info Name: Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator Microsoft.Extensions.Options Author: Microsoft NuGet:https://www.nuget.org/packages/Microsoft.Extensions.Options You can find more details at https://learn.microsoft.com/en-us/dotnet/core/extensions/options-validation-generator Source: https://github.com/dotnet/runtime  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#original-readme","content":" note .NET Runtime What is .NET?How can I contribute?Reporting security issues and security bugsFiling issuesUseful Links.NET FoundationLicense This repo contains the code to build the .NET runtime, libraries and shared host (dotnet) installers for all supported platforms, as well as the sources to .NET runtime and libraries. What is .NET?​ Official Starting Page: &lt;https://dotnet.microsoft.com\\&gt; How to use .NET (with VS, VS Code, command-line CLI) Install official releasesDocumentation (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) Deploying apps Supported OS versions RoadmapReleases How can I contribute?​ We welcome contributions! Many people all over the world have helped make this project better. Reporting security issues and security bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;secure@microsoft.com&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's Security doc. Also see info about related Microsoft .NET Core and ASP.NET Core Bug Bounty Program. Filing issues​ This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the dotnet binary (sometimes known as the muxer) and the installation of the .NET runtime and libraries. For other issues, please file them to their appropriate sibling repos. We have links to many of them on our new issue page. Useful Links​ .NET Core source index / .NET Framework source indexAPI Reference docs.NET API Catalog (incl. APIs from daily builds and API usage info)API docs writing guidelines - useful when writing /// comments.NET Discord Server - a place to discuss the development of .NET and its ecosystem .NET Foundation​ .NET Runtime is a .NET Foundation project. There are many .NET related projects on GitHub. .NET home repo - links to 100s of .NET projects, from Microsoft and the community.ASP.NET Core home - the best place to start learning about ASP.NET Core. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. General .NET OSS discussions: .NET Foundation Discussions License​ .NET (including the runtime repo) is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#about","content":" note Generating the validation for data annotations on options classes.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#example-source-csproj-source-files","content":" CSharp ProjectMyAppValidator.csMyAppOptions.cs This is the CSharp Project that references Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Options&quot; Version=&quot;8.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Validators.g.cs // &lt;auto-generated/&gt; #nullable enable #pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103 namespace DemoValidatorObj { partial class ValidatorForMyApp { /// &lt;summary&gt; /// Validates a specific named options instance (or all when &lt;paramref name=&quot;name&quot;/&gt; is &lt;see langword=&quot;null&quot; /&gt;). /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The name of the options instance being validated.&lt;/param&gt; /// &lt;param name=&quot;options&quot;&gt;The options instance.&lt;/param&gt; /// &lt;returns&gt;Validation result.&lt;/returns&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Options.SourceGeneration&quot;, &quot;8.0.9.3103&quot;)] [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage(&quot;Trimming&quot;, &quot;IL2026:RequiresUnreferencedCode&quot;, Justification = &quot;The created ValidationContext object is used in a way that never call reflection&quot;)] public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::DemoValidatorObj.MyAppOptions options) { global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null; var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options); var validationResults = new global::System.Collections.Generic.List&lt;global::System.ComponentModel.DataAnnotations.ValidationResult&gt;(); var validationAttributes = new global::System.Collections.Generic.List&lt;global::System.ComponentModel.DataAnnotations.ValidationAttribute&gt;(2); context.MemberName = &quot;AppDisplayName&quot;; context.DisplayName = string.IsNullOrEmpty(name) ? &quot;MyAppOptions.AppDisplayName&quot; : $&quot;{name}.AppDisplayName&quot;; validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1); validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A2); if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.AppDisplayName, context, validationResults, validationAttributes)) { (builder ??= new()).AddResults(validationResults); } return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build(); } } } namespace __OptionValidationStaticInstances { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Options.SourceGeneration&quot;, &quot;8.0.9.3103&quot;)] file static class __Attributes { internal static readonly global::System.ComponentModel.DataAnnotations.RequiredAttribute A1 = new global::System.ComponentModel.DataAnnotations.RequiredAttribute(); internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__MinLengthAttribute A2 = new __OptionValidationGeneratedAttributes.__SourceGen__MinLengthAttribute( (int)3); } } namespace __OptionValidationStaticInstances { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Options.SourceGeneration&quot;, &quot;8.0.9.3103&quot;)] file static class __Validators { } } namespace __OptionValidationGeneratedAttributes { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Extensions.Options.SourceGeneration&quot;, &quot;8.0.9.3103&quot;)] [global::System.AttributeUsage(global::System.AttributeTargets.Property | global::System.AttributeTargets.Field | global::System.AttributeTargets.Parameter, AllowMultiple = false)] file class __SourceGen__MinLengthAttribute : global::System.ComponentModel.DataAnnotations.ValidationAttribute { private static string DefaultErrorMessageString =&gt; &quot;The field {0} must be a string or array type with a minimum length of '{1}'.&quot;; public __SourceGen__MinLengthAttribute(int length) : base(() =&gt; DefaultErrorMessageString) { Length = length; } public int Length { get; } public override bool IsValid(object? value) { if (Length &lt; -1) { throw new global::System.InvalidOperationException(&quot;MinLengthAttribute must have a Length value that is zero or greater.&quot;); } if (value == null) { return true; } int length; if (value is string stringValue) { length = stringValue.Length; } else if (value is System.Collections.ICollection collectionValue) { length = collectionValue.Count; } else { throw new global::System.InvalidCastException($&quot;The field of type {value.GetType()} must be a string, array, or ICollection type.&quot;); } return length &gt;= Length; } public override string FormatErrorMessage(string name) =&gt; string.Format(global::System.Globalization.CultureInfo.CurrentCulture, ErrorMessageString, name, Length); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#download-example-net--c-","content":" tip Download Example project Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator   ","version":"Next","tagName":"h3"},{"title":"Share Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#share-microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementClass) - 27 other generators​","type":1,"pageTitle":"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator#in-the-same-category-enhancementclass---27-other-generators","content":" ApparatusAOT​  AspectGenerator​  CommonCodeGenerator​  Comparison​  DudNet​  Enhanced.GetTypes​  FastGenericNew​  HsuSgSync​  Immutype​  Ling.Audit​  Lombok.NET​  M31.FluentAPI​  MemberAccessor​  MemoryPack​  Meziantou.Polyfill​  Microsoft.Extensions.Logging​  Microsoft.Interop.JavaScript.JSImportGenerator​  OptionToStringGenerator​  QueryStringGenerator​  RSCG_Decorator​  RSCG_UtilityTypes​  StaticReflection​  SyncMethodGenerator​  System.Runtime.InteropServices​  System.Text.RegularExpressions​  TelemetryLogging​  ThisClass​ ","version":"Next","tagName":"h3"},{"title":"Mediator by Martin Othamar","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Mediator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#info","content":" info Name: Mediator A high performance .NET Mediator pattern implemenation using source generation. Author: Martin Othamar NuGet:https://www.nuget.org/packages/Mediator.SourceGenerator https://www.nuget.org/packages/Mediator.Abstractions You can find more details at https://github.com/martinothamar/Mediator Source: https://github.com/martinothamar/Mediator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#original-readme","content":" note Mediator Note Version 3.0 is currently being developed. See status and provide feedback here (#98) This is a high performance .NET implementation of the Mediator pattern using the source generators feature introduced in .NET 5. The API and usage is mostly based on the great MediatR library, with some deviations to allow for better performance. Packages are .NET Standard 2.1 compatible. The mediator pattern is great for implementing cross cutting concern (logging, metrics, etc) and avoiding &quot;fat&quot; constructors due to lots of injected services. Goals for this library High performance Runtime performance can be the same for both runtime reflection and source generator based approaches, but it's easier to optimize in the latter case AOT friendly MS are investing time in various AOT scenarios, and for example iOS requirees AOT compilation Build time errors instead of runtime errors The generator includes diagnostics, i.e. if a handler is not defined for a request, a warning is emitted In particular, source generators in this library is used to Generate code for DI registrationGenerate code for IMediator implementation Request/Command/Query Send methods are monomorphized (1 method per T), the generic ISender.Send methods rely on theseYou can use both IMediator and Mediator, the latter allows for better performance Generate diagnostics related messages and message handlers See this great video by @Elfocrash / Nick Chapsas, covering both similarities and differences between Mediator and MediatR Table of Contents​ Mediator Table of Contents2. Benchmarks3. Usage and abstractions 3.1. Message types3.2. Handler types3.3. Pipeline types 3.3.1. Message validation example3.3.2. Error logging example 3.4. Configuration 4. Getting started 4.1. Add package4.2. Add Mediator to DI container4.3. Create IRequest&lt;&gt; type4.4. Use pipeline behaviors4.5. Constrain IPipelineBehavior&lt;,&gt; message with open generics4.6. Use notifications4.7. Polymorphic dispatch with notification handlers4.8. Notification handlers also support open generics4.9. Use streaming messages 5. Diagnostics6. Differences from MediatR 2. Benchmarks​ This benchmark exposes the perf overhead of the libraries. Mediator (this library) and MediatR methods show the overhead of the respective mediator implementations. I've also included the MessagePipe library as it also has great performance. &lt;SendRequest | Stream&gt;_Baseline: simple method call into the handler class&lt;SendRequest | Stream&gt;_Mediator: the concrete Mediator class generated by this library&lt;SendRequest | Stream&gt;_MessagePipe: the MessagePipe library&lt;SendRequest | Stream&gt;_IMediator: call through the IMediator interface in this library&lt;SendRequest | Stream&gt;_MediatR: the MediatR library See benchmarks code for more details on the measurement. Warning A current limitation of this library is that performance degrades significantly for projects with a large number of messages (&gt;500) There is ongoing work on resolving this for version 3.0 (#48). 3. Usage and abstractions​ There are two NuGet packages needed to use this library Mediator.SourceGenerator To generate the IMediator implementation and dependency injection setup. Mediator.Abstractions Message types (IRequest&lt;,&gt;, INotification), handler types (IRequestHandler&lt;,&gt;, INotificationHandler&lt;&gt;), pipeline types (IPipelineBehavior) You install the source generator package into your edge/outermost project (i.e. ASP.NET Core application, Background worker project), and then use the Mediator.Abstractions package wherever you define message types and handlers. Standard message handlers are automatically picked up and added to the DI container in the generated AddMediator method.Pipeline behaviors need to be added manually (including pre/post/exception behaviors). For example implementations, see the samples folder. See the ASP.NET Core clean architecture sample for a more real world setup. 3.1. Message types​ IMessage - marker interfaceIStreamMessage - marker interfaceIBaseRequest - marker interface for requestsIRequest - a request message, no return value (ValueTask&lt;Unit&gt;)IRequest&lt;out TResponse&gt; - a request message with a response (ValueTask&lt;TResponse&gt;)IStreamRequest&lt;out TResponse&gt; - a request message with a streaming response (IAsyncEnumerable&lt;TResponse&gt;)IBaseCommand - marker interface for commandsICommand - a command message, no return value (ValueTask&lt;Unit&gt;)ICommand&lt;out TResponse&gt; - a command message with a response (ValueTask&lt;TResponse&gt;)IStreamCommand&lt;out TResponse&gt; - a command message with a streaming response (IAsyncEnumerable&lt;TResponse&gt;)IBaseQuery - marker interface for queriesIQuery&lt;out TResponse&gt; - a query message with a response (ValueTask&lt;TResponse&gt;)IStreamQuery&lt;out TResponse&gt; - a query message with a streaming response (IAsyncEnumerable&lt;TResponse&gt;)INotification - a notification message, no return value (ValueTask) As you can see, you can achieve the exact same thing with requests, commands and queries. But I find the distinction in naming useful if you for example use the CQRS pattern or for some reason have a preference on naming in your application. 3.2. Handler types​ IRequestHandler&lt;in TRequest&gt;IRequestHandler&lt;in TRequest, TResponse&gt;IStreamRequestHandler&lt;in TRequest, out TResponse&gt;ICommandHandler&lt;in TCommand&gt;ICommandHandler&lt;in TCommand, TResponse&gt;IStreamCommandHandler&lt;in TCommand, out TResponse&gt;IQueryHandler&lt;in TQuery, TResponse&gt;IStreamQueryHandler&lt;in TQuery, out TResponse&gt;INotificationHandler&lt;in TNotification&gt; These types are used in correlation with the message types above. 3.3. Pipeline types​ IPipelineBehavior&lt;TMessage, TResponse&gt;IStreamPipelineBehavior&lt;TMessage, TResponse&gt;MessagePreProcessor&lt;TMessage, TResponse&gt;MessagePostProcessor&lt;TMessage, TResponse&gt;MessageExceptionHandler&lt;TMessage, TResponse, TException&gt; 3.3.1. Message validation example​ // As a normal pipeline behavior public sealed class MessageValidatorBehaviour&lt;TMessage, TResponse&gt; : IPipelineBehavior&lt;TMessage, TResponse&gt; where TMessage : IValidate { public ValueTask&lt;TResponse&gt; Handle( TMessage message, CancellationToken cancellationToken, MessageHandlerDelegate&lt;TMessage, TResponse&gt; next ) { if (!message.IsValid(out var validationError)) throw new ValidationException(validationError); return next(message, cancellationToken); } } // Or as a pre-processor public sealed class MessageValidatorBehaviour&lt;TMessage, TResponse&gt; : MessagePreProcessor&lt;TMessage, TResponse&gt; where TMessage : IValidate { protected override ValueTask Handle(TMessage message, CancellationToken cancellationToken) { if (!message.IsValid(out var validationError)) throw new ValidationException(validationError); return default; } } // Register as IPipelineBehavior&lt;,&gt; in either case services.AddSingleton(typeof(IPipelineBehavior&lt;,&gt;), typeof(MessageValidatorBehaviour&lt;,&gt;)) 3.3.2. Error logging example​ // As a normal pipeline behavior public sealed class ErrorLoggingBehaviour&lt;TMessage, TResponse&gt; : IPipelineBehavior&lt;TMessage, TResponse&gt; where TMessage : IMessage { private readonly ILogger&lt;ErrorLoggingBehaviour&lt;TMessage, TResponse&gt;&gt; _logger; public ErrorLoggingBehaviour(ILogger&lt;ErrorLoggingBehaviour&lt;TMessage, TResponse&gt;&gt; logger) { _logger = logger; } public async ValueTask&lt;TResponse&gt; Handle( TMessage message, CancellationToken cancellationToken, MessageHandlerDelegate&lt;TMessage, TResponse&gt; next ) { try { return await next(message, cancellationToken); } catch (Exception ex) { _logger.LogError(ex, &quot;Error handling message of type {messageType}&quot;, message.GetType().Name); throw; } } } // Or as an exception handler public sealed class ErrorLoggingBehaviour&lt;TMessage, TResponse&gt; : MessageExceptionHandler&lt;TMessage, TResponse&gt; where TMessage : notnull, IMessage { private readonly ILogger&lt;ErrorLoggingBehaviour&lt;TMessage, TResponse&gt;&gt; _logger; public ErrorLoggingBehaviour(ILogger&lt;ErrorLoggingBehaviour&lt;TMessage, TResponse&gt;&gt; logger) { _logger = logger; } protected override ValueTask&lt;ExceptionHandlingResult&lt;TResponse&gt;&gt; Handle( TMessage message, Exception exception, CancellationToken cancellationToken ) { _logger.LogError(exception, &quot;Error handling message of type {messageType}&quot;, message.GetType().Name); // Let the exception bubble up by using the base class helper NotHandled: return NotHandled; // Or if the exception is properly handled, you can just return your own response, // using the base class helper Handle(). // This requires you to know something about TResponse, // so TResponse needs to be constrained to something, // typically with a static abstract member acting as a consructor on an interface or abstract class. return Handled(null!); } } // Register as IPipelineBehavior&lt;,&gt; in either case services.AddSingleton(typeof(IPipelineBehavior&lt;,&gt;), typeof(ErrorLoggingBehaviour&lt;,&gt;)) 3.4. Configuration​ There are two ways to configure Mediator. Configuration values are needed during compile-time since this is a source generator: Assembly level attribute for configuration: MediatorOptionsAttributeOptions configuration delegate in AddMediator function. services.AddMediator(options =&gt; { options.Namespace = &quot;SimpleConsole.Mediator&quot;; options.DefaultServiceLifetime = ServiceLifetime.Transient; }); // or [assembly: MediatorOptions(Namespace = &quot;SimpleConsole.Mediator&quot;, DefaultServiceLifetime = ServiceLifetime.Transient)] Namespace - where the IMediator implementation is generatedDefaultServiceLifetime - the DI service lifetime Singleton - (default value) everything registered as singletons, minimal allocationsTransient - handlers registered as transient, IMediator/Mediator/ISender/IPublisher still singletonScoped - mediator and handlers registered as scoped 4. Getting started​ In this section we will get started with Mediator and go through a sample illustrating the various ways the Mediator pattern can be used in an application. See the full runnable sample code in the SimpleEndToEnd sample. 4.1. Add package​ dotnet add package Mediator.SourceGenerator --version 2.0.* dotnet add package Mediator.Abstractions --version 2.0.* or &lt;PackageReference Include=&quot;Mediator.SourceGenerator&quot; Version=&quot;2.0.*&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Mediator.Abstractions&quot; Version=&quot;2.0.*&quot; /&gt; 4.2. Add Mediator to DI container​ In ConfigureServices or equivalent, call AddMediator (unless MediatorOptions is configured, default namespace is Mediator). This registers your handler below. using Mediator; using Microsoft.Extensions.DependencyInjection; using System; var services = new ServiceCollection(); // Most likely IServiceCollection comes from IHostBuilder/Generic host abstraction in Microsoft.Extensions.Hosting services.AddMediator(); var serviceProvider = services.BuildServiceProvider(); 4.3. Create IRequest&lt;&gt; type​ var mediator = serviceProvider.GetRequiredService&lt;IMediator&gt;(); var ping = new Ping(Guid.NewGuid()); var pong = await mediator.Send(ping); Debug.Assert(ping.Id == pong.Id); // ... public sealed record Ping(Guid Id) : IRequest&lt;Pong&gt;; public sealed record Pong(Guid Id); public sealed class PingHandler : IRequestHandler&lt;Ping, Pong&gt; { public ValueTask&lt;Pong&gt; Handle(Ping request, CancellationToken cancellationToken) { return new ValueTask&lt;Pong&gt;(new Pong(request.Id)); } } As soon as you code up message types, the source generator will add DI registrations automatically (inside AddMediator). P.S - You can inspect the code yourself - open Mediator.g.cs in VS from Project -&gt; Dependencies -&gt; Analyzers -&gt; Mediator.SourceGenerator -&gt; Mediator.SourceGenerator.MediatorGenerator, or just F12 through the code. 4.4. Use pipeline behaviors​ The pipeline behavior below validates all incoming Ping messages. Pipeline behaviors currently must be added manually. services.AddMediator(); services.AddSingleton&lt;IPipelineBehavior&lt;Ping, Pong&gt;, PingValidator&gt;(); public sealed class PingValidator : IPipelineBehavior&lt;Ping, Pong&gt; { public ValueTask&lt;Pong&gt; Handle(Ping request, MessageHandlerDelegate&lt;Ping, Pong&gt; next, CancellationToken cancellationToken) { if (request is null || request.Id == default) throw new ArgumentException(&quot;Invalid input&quot;); return next(request, cancellationToken); } } 4.5. Constrain IPipelineBehavior&lt;,&gt; message with open generics​ Add open generic handler to process all or a subset of messages passing through Mediator. This handler will log any error that is thrown from message handlers (IRequest, ICommand, IQuery). It also publishes a notification allowing notification handlers to react to errors. Message pre- and post-processors along with the exception handlers can also constrain the generic type parameters in the same way. services.AddMediator(); services.AddSingleton(typeof(IPipelineBehavior&lt;,&gt;), typeof(ErrorLoggerHandler&lt;,&gt;)); public sealed record ErrorMessage(Exception Exception) : INotification; public sealed record SuccessfulMessage() : INotification; public sealed class ErrorLoggerHandler&lt;TMessage, TResponse&gt; : IPipelineBehavior&lt;TMessage, TResponse&gt; where TMessage : IMessage // Constrained to IMessage, or constrain to IBaseCommand or any custom interface you've implemented { private readonly ILogger&lt;ErrorLoggerHandler&lt;TMessage, TResponse&gt;&gt; _logger; private readonly IMediator _mediator; public ErrorLoggerHandler(ILogger&lt;ErrorLoggerHandler&lt;TMessage, TResponse&gt;&gt; logger, IMediator mediator) { _logger = logger; _mediator = mediator; } public async ValueTask&lt;TResponse&gt; Handle(TMessage message, MessageHandlerDelegate&lt;TMessage, TResponse&gt; next, CancellationToken cancellationToken) { try { var response = await next(message, cancellationToken); return response; } catch (Exception ex) { _logger.LogError(ex, &quot;Error handling message&quot;); await _mediator.Publish(new ErrorMessage(ex)); throw; } } } 4.6. Use notifications​ We can define a notification handler to catch errors from the above pipeline behavior. // Notification handlers are automatically added to DI container public sealed class ErrorNotificationHandler : INotificationHandler&lt;ErrorMessage&gt; { public ValueTask Handle(ErrorMessage error, CancellationToken cancellationToken) { // Could log to application insights or something... return default; } } 4.7. Polymorphic dispatch with notification handlers​ We can also define a notification handler that receives all notifications. public sealed class StatsNotificationHandler : INotificationHandler&lt;INotification&gt; // or any other interface deriving from INotification { private long _messageCount; private long _messageErrorCount; public (long MessageCount, long MessageErrorCount) Stats =&gt; (_messageCount, _messageErrorCount); public ValueTask Handle(INotification notification, CancellationToken cancellationToken) { Interlocked.Increment(ref _messageCount); if (notification is ErrorMessage) Interlocked.Increment(ref _messageErrorCount); return default; } } 4.8. Notification handlers also support open generics​ public sealed class GenericNotificationHandler&lt;TNotification&gt; : INotificationHandler&lt;TNotification&gt; where TNotification : INotification // Generic notification handlers will be registered as open constrained types automatically { public ValueTask Handle(TNotification notification, CancellationToken cancellationToken) { return default; } } 4.9. Use streaming messages​ Since version 1.* of this library there is support for streaming using IAsyncEnumerable. var mediator = serviceProvider.GetRequiredService&lt;IMediator&gt;(); var ping = new StreamPing(Guid.NewGuid()); await foreach (var pong in mediator.CreateStream(ping)) { Debug.Assert(ping.Id == pong.Id); Console.WriteLine(&quot;Received pong!&quot;); // Should log 5 times } // ... public sealed record StreamPing(Guid Id) : IStreamRequest&lt;Pong&gt;; public sealed record Pong(Guid Id); public sealed class PingHandler : IStreamRequestHandler&lt;StreamPing, Pong&gt; { public async IAsyncEnumerable&lt;Pong&gt; Handle(StreamPing request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i &lt; 5; i++) { await Task.Delay(1000, cancellationToken); yield return new Pong(request.Id); } } } 5. Diagnostics​ Since this is a source generator, diagnostics are also included. Examples below Missing request handler Missing request handler Multiple request handlers found Multiple request handlers found 6. Differences from MediatR​ This is a work in progress list on the differences between this library and MediatR. RequestHandlerDelegate&lt;TResponse&gt;() -&gt; MessageHandlerDelegate&lt;TMessage, TResponse&gt;(TMessage message, CancellationToken cancellationToken) This is to avoid excessive closure allocations. I thin it's worthwhile when the cost is simply passing along the message and the cancellationtoken. No ServiceFactory This library relies on the Microsoft.Extensions.DependencyInjection, so it only works with DI containers that integrate with those abstractions. Singleton service lifetime by default MediatR in combination with MediatR.Extensions.Microsoft.DependencyInjection does transient service registration by default, which leads to a lot of allocations. Even if it is configured for singleton lifetime, IMediator and ServiceFactory services are registered as transient (not configurable). Methods return ValueTask&lt;T&gt; instead of Task&lt;T&gt;, to allow for fewer allocations (for example if the handler completes synchronously, or using async method builder pooling/PoolingAsyncValueTaskMethodBuilder&lt;T&gt;)This library doesn't support generic requests/notifications  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#about","content":" note Gnerating mediator data without reflection  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csGenericLoggerHandler.csPingPong.cs This is the CSharp Project that references Mediator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Mediator.Abstractions&quot; Version=&quot;2.1.5&quot; /&gt; &lt;PackageReference Include=&quot;Mediator.SourceGenerator&quot; Version=&quot;2.1.5&quot; OutputItemType=&quot;Analyzer&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Mediator.g.csMediatorOptions.g.csMediatorOptionsAttribute.g.cs // &lt;auto-generated&gt; // Generated by the Mediator source generator. // &lt;/auto-generated&gt; #pragma warning disable CS8019 // Unused usings #pragma warning disable CS8321 // Unused local function #pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.DependencyInjection.Extensions; using System.Linq; using SD = global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor; namespace Microsoft.Extensions.DependencyInjection { /// &lt;summary&gt; /// DI extensions for Mediator. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] public static class MediatorDependencyInjectionExtensions { /// &lt;summary&gt; /// Adds the Mediator implementation and handlers of your application. /// &lt;/summary&gt; public static IServiceCollection AddMediator(this IServiceCollection services) { return AddMediator(services, null); } internal sealed class Dummy { } /// &lt;summary&gt; /// Adds the Mediator implementation and handlers of your application, with specified options. /// &lt;/summary&gt; public static IServiceCollection AddMediator(this IServiceCollection services, global::System.Action&lt;global::Mediator.MediatorOptions&gt; options) { var opts = new global::Mediator.MediatorOptions(); if (options != null) options(opts); var configuredViaAttribute = false; if (opts.ServiceLifetime != global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton &amp;&amp; !configuredViaAttribute) { var errMsg = &quot;Invalid configuration detected for Mediator. &quot;; errMsg += &quot;Generated code for 'Singleton' lifetime, but got '&quot; + opts.ServiceLifetime + &quot;' lifetime from options. &quot;; errMsg += &quot;This means that the source generator hasn't seen the 'AddMediator' method call during compilation. &quot;; errMsg += &quot;Make sure that the 'AddMediator' method is called from the project that references the Mediator.SourceGenerator package.&quot;; throw new global::System.Exception(errMsg); } services.Add(new SD(typeof(global::Mediator.Mediator), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton)); services.TryAdd(new SD(typeof(global::Mediator.IMediator), sp =&gt; sp.GetRequiredService&lt;global::Mediator.Mediator&gt;(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton)); services.TryAdd(new SD(typeof(global::Mediator.ISender), sp =&gt; sp.GetRequiredService&lt;global::Mediator.Mediator&gt;(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton)); services.TryAdd(new SD(typeof(global::Mediator.IPublisher), sp =&gt; sp.GetRequiredService&lt;global::Mediator.Mediator&gt;(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton)); services.TryAdd(new SD(typeof(global::PingHandler), typeof(global::PingHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton)); services.Add(new SD( typeof(global::Mediator.RequestClassHandlerWrapper&lt;global::Ping, global::Pong&gt;), sp =&gt; { return new global::Mediator.RequestClassHandlerWrapper&lt;global::Ping, global::Pong&gt;( sp.GetRequiredService&lt;global::PingHandler&gt;(), sp.GetServices&lt;global::Mediator.IPipelineBehavior&lt;global::Ping, global::Pong&gt;&gt;() ); }, global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton )); services.AddSingleton&lt;Dummy&gt;(); return services; } } } namespace Mediator { [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class RequestClassHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : class, global::Mediator.IRequest&lt;TResponse&gt; { private readonly global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public RequestClassHandlerWrapper( global::Mediator.IRequestHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class RequestStructHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : struct, global::Mediator.IRequest&lt;TResponse&gt; { private readonly global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public RequestStructHandlerWrapper( global::Mediator.IRequestHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class StreamRequestClassHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : class, global::Mediator.IStreamRequest&lt;TResponse&gt; { private readonly global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public StreamRequestClassHandlerWrapper( global::Mediator.IStreamRequestHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IStreamPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class StreamRequestStructHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : struct, global::Mediator.IStreamRequest&lt;TResponse&gt; { private readonly global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public StreamRequestStructHandlerWrapper( global::Mediator.IStreamRequestHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IStreamPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class CommandClassHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : class, global::Mediator.ICommand&lt;TResponse&gt; { private readonly global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public CommandClassHandlerWrapper( global::Mediator.ICommandHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class CommandStructHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : struct, global::Mediator.ICommand&lt;TResponse&gt; { private readonly global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public CommandStructHandlerWrapper( global::Mediator.ICommandHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class StreamCommandClassHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : class, global::Mediator.IStreamCommand&lt;TResponse&gt; { private readonly global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public StreamCommandClassHandlerWrapper( global::Mediator.IStreamCommandHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IStreamPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class StreamCommandStructHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : struct, global::Mediator.IStreamCommand&lt;TResponse&gt; { private readonly global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public StreamCommandStructHandlerWrapper( global::Mediator.IStreamCommandHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IStreamPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class QueryClassHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : class, global::Mediator.IQuery&lt;TResponse&gt; { private readonly global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public QueryClassHandlerWrapper( global::Mediator.IQueryHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class QueryStructHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : struct, global::Mediator.IQuery&lt;TResponse&gt; { private readonly global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public QueryStructHandlerWrapper( global::Mediator.IQueryHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.MessageHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class StreamQueryClassHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : class, global::Mediator.IStreamQuery&lt;TResponse&gt; { private readonly global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public StreamQueryClassHandlerWrapper( global::Mediator.IStreamQueryHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IStreamPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] internal sealed class StreamQueryStructHandlerWrapper&lt;TRequest, TResponse&gt; where TRequest : struct, global::Mediator.IStreamQuery&lt;TResponse&gt; { private readonly global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt; _rootHandler; public StreamQueryStructHandlerWrapper( global::Mediator.IStreamQueryHandler&lt;TRequest, TResponse&gt; concreteHandler, global::System.Collections.Generic.IEnumerable&lt;global::Mediator.IStreamPipelineBehavior&lt;TRequest, TResponse&gt;&gt; pipelineBehaviours ) { var handler = (global::Mediator.StreamHandlerDelegate&lt;TRequest, TResponse&gt;)concreteHandler.Handle; foreach (var pipeline in pipelineBehaviours.Reverse()) { var handlerCopy = handler; var pipelineCopy = pipeline; handler = (TRequest message, System.Threading.CancellationToken cancellationToken) =&gt; pipelineCopy.Handle(message, cancellationToken, handlerCopy); } _rootHandler = handler; } public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =&gt; _rootHandler(request, cancellationToken); } /// &lt;summary&gt; /// Generated code for Mediator implementation. /// This type is also registered as a DI service. /// Can be used directly for high performance scenarios. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCode(&quot;Mediator.SourceGenerator&quot;, &quot;2.1.0.0&quot;)] [global::System.Diagnostics.DebuggerNonUserCodeAttribute] [global::System.Diagnostics.DebuggerStepThroughAttribute] public sealed partial class Mediator : global::Mediator.IMediator, global::Mediator.ISender, global::Mediator.IPublisher { private readonly global::System.IServiceProvider _sp; private FastLazyValue&lt;DICache&gt; _diCacheLazy; /// &lt;summary&gt; /// The lifetime of Mediator-related service registrations in DI container. /// &lt;/summary&gt; public static global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime { get; } = global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton; private readonly global::System.Func&lt;global::System.Collections.Generic.IEnumerable&lt;object&gt;, int&gt; _getServicesLength; /// &lt;summary&gt; /// Constructor for DI, should not be used by consumer. /// &lt;/summary&gt; public Mediator(global::System.IServiceProvider sp) { _sp = sp; _diCacheLazy = new FastLazyValue&lt;DICache&gt;(() =&gt; new DICache(_sp)); global::System.Func&lt;global::System.Collections.Generic.IEnumerable&lt;object&gt;, int&gt; fastGetLength = s =&gt; ((object[])s).Length; global::System.Func&lt;global::System.Collections.Generic.IEnumerable&lt;object&gt;, int&gt; slowGetLength = s =&gt; s.Count(); var dummy = sp.GetServices&lt;global::Microsoft.Extensions.DependencyInjection.MediatorDependencyInjectionExtensions.Dummy&gt;(); _getServicesLength = dummy.GetType() == typeof(global::Microsoft.Extensions.DependencyInjection.MediatorDependencyInjectionExtensions.Dummy[]) ? fastGetLength : slowGetLength; } private struct FastLazyValue&lt;T&gt; where T : struct { private const long UNINIT = 0; private const long INITING = 1; private const long INITD = 2; private global::System.Func&lt;T&gt; _generator; private long _state; private T _value; public T Value { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { if (_state != INITD) return ValueSlow; return _value; } } private T ValueSlow { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)] get { var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT); switch (prevState) { case INITD: // Someone has already completed init return _value; case INITING: // Wait for someone else to complete var spinWait = default(global::System.Threading.SpinWait); while (global::System.Threading.Interlocked.Read(ref _state) &lt; INITD) spinWait.SpinOnce(); return _value; case UNINIT: _value = _generator(); global::System.Threading.Interlocked.Exchange(ref _state, INITD); return _value; } return _value; } } public FastLazyValue(global::System.Func&lt;T&gt; generator) { _generator = generator; _state = UNINIT; _value = default; } } private readonly struct DICache { private readonly global::System.IServiceProvider _sp; public readonly global::Mediator.RequestClassHandlerWrapper&lt;global::Ping, global::Pong&gt; Wrapper_For_Ping; public DICache(global::System.IServiceProvider sp) { _sp = sp; Wrapper_For_Ping = sp.GetRequiredService&lt;global::Mediator.RequestClassHandlerWrapper&lt;global::Ping, global::Pong&gt;&gt;(); } } /// &lt;summary&gt; /// Send a message of type global::Ping. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// &lt;/summary&gt; /// &lt;param name=&quot;message&quot;&gt;Incoming message&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public global::System.Threading.Tasks.ValueTask&lt;global::Pong&gt; Send( global::Ping message, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowIfNull(message, nameof(message)); return _diCacheLazy.Value.Wrapper_For_Ping.Handle(message, cancellationToken); } /// &lt;summary&gt; /// Send request. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;request&quot;&gt;Incoming request&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Send&lt;TResponse&gt;( global::Mediator.IRequest&lt;TResponse&gt; request, global::System.Threading.CancellationToken cancellationToken = default ) { switch (request) { case global::Ping r: { if(typeof(TResponse) == typeof(global::Pong)) { var task = Send(r, cancellationToken); return global::System.Runtime.CompilerServices.Unsafe.As&lt;global::System.Threading.Tasks.ValueTask&lt;global::Pong&gt;, global::System.Threading.Tasks.ValueTask&lt;TResponse&gt;&gt;(ref task); } else { return SendAsync(request, cancellationToken); } } default: { ThrowArgumentNullOrInvalidMessage(request, nameof(request)); return default; } } } /// &lt;summary&gt; /// Send request. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;request&quot;&gt;Incoming request&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; private async global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; SendAsync&lt;TResponse&gt;( global::Mediator.IRequest&lt;TResponse&gt; request, global::System.Threading.CancellationToken cancellationToken = default ) { switch (request) { case global::Ping r: { var response = await Send(r, cancellationToken); return global::System.Runtime.CompilerServices.Unsafe.As&lt;global::Pong, TResponse&gt;(ref response); } default: { ThrowArgumentNullOrInvalidMessage(request, nameof(request)); return default; } } } /// &lt;summary&gt; /// Create stream for request. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;request&quot;&gt;Incoming message&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Async enumerable&lt;/returns&gt; public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; CreateStream&lt;TResponse&gt;( global::Mediator.IStreamRequest&lt;TResponse&gt; request, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(request); return default; } /// &lt;summary&gt; /// Send command. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;command&quot;&gt;Incoming command&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Send&lt;TResponse&gt;( global::Mediator.ICommand&lt;TResponse&gt; command, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(command); return default; } /// &lt;summary&gt; /// Send command. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;command&quot;&gt;Incoming command&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; private async global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; SendAsync&lt;TResponse&gt;( global::Mediator.ICommand&lt;TResponse&gt; command, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(command); return default; } /// &lt;summary&gt; /// Create stream for command. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;command&quot;&gt;Incoming message&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Async enumerable&lt;/returns&gt; public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; CreateStream&lt;TResponse&gt;( global::Mediator.IStreamCommand&lt;TResponse&gt; command, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(command); return default; } /// &lt;summary&gt; /// Send query. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;query&quot;&gt;Incoming query&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; Send&lt;TResponse&gt;( global::Mediator.IQuery&lt;TResponse&gt; query, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(query); return default; } /// &lt;summary&gt; /// Send query. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;query&quot;&gt;Incoming query&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; private async global::System.Threading.Tasks.ValueTask&lt;TResponse&gt; SendAsync&lt;TResponse&gt;( global::Mediator.IQuery&lt;TResponse&gt; query, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(query); return default; } /// &lt;summary&gt; /// Create stream for query. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;query&quot;&gt;Incoming message&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Async enumerable&lt;/returns&gt; public global::System.Collections.Generic.IAsyncEnumerable&lt;TResponse&gt; CreateStream&lt;TResponse&gt;( global::Mediator.IStreamQuery&lt;TResponse&gt; query, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(query); return default; } /// &lt;summary&gt; /// Send message. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;message&quot;&gt;Incoming message&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public async global::System.Threading.Tasks.ValueTask&lt;object&gt; Send( object message, global::System.Threading.CancellationToken cancellationToken = default ) { switch (message) { case global::Ping m: return await Send(m, cancellationToken); default: { ThrowArgumentNullOrInvalidMessage(message as global::Mediator.IMessage, nameof(message)); return default; } } } /// &lt;summary&gt; /// Create stream. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// Throws &lt;see cref=&quot;global::Mediator.MissingMessageHandlerException&quot;/&gt; if no handler is registered. /// &lt;/summary&gt; /// &lt;param name=&quot;message&quot;&gt;Incoming message&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Async enumerable&lt;/returns&gt; public global::System.Collections.Generic.IAsyncEnumerable&lt;object&gt; CreateStream( object message, global::System.Threading.CancellationToken cancellationToken = default ) { ThrowInvalidMessage(message as global::Mediator.IStreamMessage); return default; } /// &lt;summary&gt; /// Publish notification. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// &lt;/summary&gt; /// &lt;param name=&quot;notification&quot;&gt;Incoming notification&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public global::System.Threading.Tasks.ValueTask Publish( object notification, global::System.Threading.CancellationToken cancellationToken = default ) { return default; } /// &lt;summary&gt; /// Publish notification. /// Throws &lt;see cref=&quot;global::System.ArgumentNullException&quot;/&gt; if message is null. /// &lt;/summary&gt; /// &lt;param name=&quot;notification&quot;&gt;Incoming notification&lt;/param&gt; /// &lt;param name=&quot;cancellationToken&quot;&gt;Cancellation token&lt;/param&gt; /// &lt;returns&gt;Awaitable task&lt;/returns&gt; public global::System.Threading.Tasks.ValueTask Publish&lt;TNotification&gt;( TNotification notification, global::System.Threading.CancellationToken cancellationToken = default ) where TNotification : global::Mediator.INotification { return default; } [global::System.Diagnostics.CodeAnalysis.DoesNotReturn] private static void ThrowInvalidMessage(object msg) =&gt; throw new global::Mediator.MissingMessageHandlerException(msg); [global::System.Diagnostics.CodeAnalysis.DoesNotReturn] private static void ThrowArgumentNull(string paramName) =&gt; throw new global::System.ArgumentNullException(paramName); private static void ThrowIfNull&lt;T&gt;(T argument, string paramName) { if (argument is null) { ThrowArgumentNull(paramName); } } [global::System.Diagnostics.CodeAnalysis.DoesNotReturn] private static void ThrowArgumentNullOrInvalidMessage(object msg, string paramName) { if (msg is null) { ThrowArgumentNull(paramName); } else { ThrowInvalidMessage(msg); } } [global::System.Diagnostics.CodeAnalysis.DoesNotReturn] private static void ThrowAggregateException(global::System.Collections.Generic.List&lt;global::System.Exception&gt; exceptions) =&gt; throw new global::System.AggregateException(exceptions); private static void MaybeThrowAggregateException(global::System.Collections.Generic.List&lt;global::System.Exception&gt; exceptions) { if (exceptions != null) { ThrowAggregateException(exceptions); } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#download-example-net--c","content":" tip Download Example project Mediator   ","version":"Next","tagName":"h3"},{"title":"Share Mediator​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#share-mediator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Mediator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mediator\" has the following generators:​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#category-mediator-has-the-following-generators","content":" 1 DeeDee  2 Immediate.Handlers  3 Mediator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Mediator by Martin Othamar","url":"/RSCG_Examples/v2/docs/Mediator#see-category","content":" Mediator ","version":"Next","tagName":"h3"},{"title":"Microsoft.Windows.CsWin32 by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#info","content":" info Name: Microsoft.Windows.CsWin32 Microsoft Windows SDK Win32 API Source Generator Author: Microsoft NuGet:https://www.nuget.org/packages/Microsoft.Windows.CsWin32/ You can find more details at https://github.com/microsoft/CsWin32 Source: https://github.com/microsoft/CsWin32  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#original-readme","content":" note C#/Win32 P/Invoke Source Generator A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project. Features​ Rapidly add P/Invoke methods and supporting types to your C# project.No bulky assemblies to ship alongside your application.SafeHandle-types automatically generated.Generates xml documentation based on and links back to docs.microsoft.com Prerequisites​ The .NET 6 SDK or Visual Studio 2019 Update 11 (16.11). WPF projects have additional requirements. In addition, some generated code may require use of the C# 9+ language version (&lt;LangVersion&gt;9&lt;/LangVersion&gt;) in your project file. See issue #4 for more on this. Newer is generally better. Use the latest C# language version for the best results, regardless of your TargetFramework. Usage​ Install the Microsoft.Windows.CsWin32 package: dotnet add package Microsoft.Windows.CsWin32 --prerelease You should also install the System.Memory and System.Runtime.CompilerServices.Unsafe packages when targeting .NET Framework 4.5+ or .NET Standard 2.0, as these add APIs that significantly improve much of the code generated by CsWin32: dotnet add package System.Memory dotnet add package System.Runtime.CompilerServices.Unsafe Projects targeting .NET Core 2.1+ or .NET 5+ do not need to add these package references, although it is harmless to do so. Note that while the System.Memory package depends on the System.Runtime.CompilerServices.Unsafe package, referencing the latter directly is still important to get the latest version of the APIs it provides. Your project must allow unsafe code to support the generated code that will likely use pointers. This does not automatically make all your code unsafe. Use of the unsafe keyword is required anywhere you use pointers. The source generator NuGet package sets the default value of the AllowUnsafeBlocks property for your project to true, but if you explicitly set it to false in your project file, generated code may produce compiler errors. Create a NativeMethods.txt file in your project directory that lists the APIs to generate code for. Each line may consist of one of the following: Exported method name (e.g. CreateFile). This may include the A or W suffix, where applicable. This may be qualified with a namespace but is only recommended in cases of ambiguity, which CsWin32 will prompt where appropriate.A macro name (e.g. HRESULT_FROM_WIN32). These are generated into the same class with extern methods. Macros must be hand-authored into CsWin32, so let us know if you want to see a macro added.A namespace to generate all APIs from (e.g. Windows.Win32.Storage.FileSystem would search the metadata for all APIs within that namespace and generate them).Module name followed by .* to generate all methods exported from that module (e.g. Kernel32.*).The name of a struct, enum, constant or interface to generate. This may be qualified with a namespace but is only recommended in cases of ambiguity, which CsWin32 will prompt where appropriate.A prefix shared by many constants, followed by *, to generate all constants that share that prefix (e.g. ALG_SID_MD*).A comment (i.e. any line starting with //) or white space line, which will be ignored. When generating any type or member, all supporting types will also be generated. Generated code is added directly in the compiler. An IDE may make this generated code available to view through code navigation commands (e.g. Go to Definition) or a tree view of source files that include generated source files. Assuming default settings and a NativeMethods.txt file with content that includes CreateFile, the P/Invoke methods can be found on the Windows.Win32.PInvoke class, like this: using Windows.Win32; PInvoke.CreateFile(/*args*/); Constants are defined on the same class as the p/invoke methods (by default, the Windows.Win32.PInvoke class). Other supporting types are defined within or under the Windows.Win32 namespace. Discovery of the namespace for a given type can be done with the Go To All feature (Ctrl+T) in Visual Studio with the type name as the search query. A project may include many NativeMethods.txt files (each one necessarily in its own directory). CsWin32 will read them all to generate APIs, provided these files are included as AdditionalFiles in the project. A NativeMethods.txt file directly in the project directory is added automatically to AdditionalFiles. Files in other directories must be added to the project file manually. Whether API requests are all in a single NativeMethods.txt file or split across many makes no difference to the generated result. We recommend using just one NativeMethods.txt file and keeping it sorted for easy bookkeeping. Multiple files perhaps makes the most sense in a Shared Project scenario where several API requests will be common across many projects, so sharing a NativeMethods.txt file with those same projects that contain all the necessary APIs for the set of shared source files make maintenance easier. Some APIs require targeting a specific architecture and are not available when your C# project compiles as &quot;Any CPU&quot;. Learn more about how this manifests and what your options are. Customizing generated code​ Several aspects of the generated code can be customized, including: The name of the class(es) that declare p/invoke methodsWhether to emit interop types as public or internalWhether to emit ANSI functions as well where Wide character functions also existSet PreserveSig for COM interfaces or individual membersForce generation of blittable structs, COM structs instead of interfaces (for super high performance with 0 GC pressure), etc. To configure these settings, create a NativeMethods.json file in your project directory. Specifying the $schema property that points to the schema adds completions, descriptions and validation in many JSON editors, and in fact is where all the documentation for the available settings is found. { &quot;$schema&quot;: &quot;https://aka.ms/CsWin32.schema.json&quot;, &quot;emitSingleFile&quot;: false } Most generated types include the partial modifier so you can add your own members to that type within your code. When you need to replace a generated type, simply copy and paste it from generated code into your own source files and remove the partial modifier. Be sure to keep the name and namespace exactly the same. CsWin32 will notice that your project already declares the type and skip generating it, but generate everything else. Note that if that type is the only thing that references some other generated type, CsWin32 will stop generating that type too. To keep CsWin32 generating the referred types you need, add them explicitly to NativeMethods.txt. Support for trimming, AOT, and/or disabling the runtime marshaler​ Newer .NET runtime versions may fail for CsWin32 generated code when the application project builds with one or both of these properties set: &lt;PublishAot&gt;true&lt;/PublishAot&gt; &lt;DisableRuntimeMarshalling&gt;true&lt;/DisableRuntimeMarshalling&gt; &lt;PublishTrimmed&gt;true&lt;/PublishTrimmed&gt; CsWin32 supports these environments by avoiding code that relies on the runtime marshaler when the allowMarshaling setting is disabled in the NativeMethods.json file. For example: { &quot;$schema&quot;: &quot;https://aka.ms/CsWin32.schema.json&quot;, &quot;allowMarshaling&quot;: false } Newer metadata​ To update the metadata used as the source for code generation, you may install a newer Microsoft.Windows.SDK.Win32Metadata package: dotnet add package Microsoft.Windows.SDK.Win32Metadata --prerelease CsWin32 also consumes the WDK from a similarly named package: Microsoft.Windows.WDK.Win32Metadata. Consuming daily builds​ Can't wait for the next release to try out a bug fix? Follow these steps to consume directly from our daily build. Just add this package feed to your nuget.config file: &lt;add key=&quot;winsdk&quot; value=&quot;https://pkgs.dev.azure.com/azure-public/winsdk/_packaging/CI/nuget/v3/index.json&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#about","content":" note Generating WinAPI code in C#  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#example-source-csproj-source-files","content":" CSharp ProjectProgram.csNativeMethods.txt This is the CSharp Project that references Microsoft.Windows.CsWin32 &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Windows.CsWin32&quot; Version=&quot;0.3.106&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Windows.Win32.CsWin32Stamp.g.csWindows.Win32.PInvoke.KERNEL32.dll.g.cs // ------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; // ------------------------------------------------------------------------------ #pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981 [assembly: global::System.Reflection.AssemblyMetadata(&quot;Microsoft.Windows.CsWin32&quot;,&quot;0.3.106+a37a0b4b70&quot;)]   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#download-example-net--c","content":" tip Download Example project Microsoft.Windows.CsWin32   ","version":"Next","tagName":"h3"},{"title":"Share Microsoft.Windows.CsWin32​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#share-microsoftwindowscswin32","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"WinAPI\" has the following generators:​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#category-winapi-has-the-following-generators","content":" 1 Com  2 Microsoft.Windows.CsWin32  3 NativeObjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Microsoft.Windows.CsWin32 by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32#see-category","content":" WinAPI ","version":"Next","tagName":"h3"},{"title":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#nuget--site-data","content":" ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#info","content":" info Name: Microsoft.Interop.JavaScript.JSImportGenerator Author: Microsoft NuGet: ** You can find more details at Source:  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#original-readme","content":" note  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#about","content":" note Generating partial JSimport / JSExport in C# form  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csindex.razor.csIndex.razorindex.razor.js This is the CSharp Project that references Microsoft.Interop.JavaScript.JSImportGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk.BlazorWebAssembly&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;ServiceWorkerAssetsManifest&gt;service-worker-assets.js&lt;/ServiceWorkerAssetsManifest&gt; &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly&quot; Version=&quot;7.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot; Version=&quot;7.0.0&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ServiceWorker Include=&quot;wwwroot\\service-worker.js&quot; PublishedContent=&quot;wwwroot\\service-worker.published.js&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  App_razor.g.csMainLayout_razor.g.csPages_Index_razor.g.cs_Imports_razor.g.csJSExports.g.csJSImports.g.cs #pragma checksum &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; &quot;{8829d00f-11b8-4213-878b-770e8597ac16}&quot; &quot;ca69fbc161c0130d6d7831728befc975abb17b04491a271bc49266261055543b&quot; // &lt;auto-generated/&gt; #pragma warning disable 1591 namespace TestBlazor { #line default using global::System; using global::System.Collections.Generic; using global::System.Linq; using global::System.Threading.Tasks; using global::Microsoft.AspNetCore.Components; #nullable restore #line (1,2)-(1,23) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using System.Net.Http #nullable disable ; #nullable restore #line (2,2)-(2,28) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using System.Net.Http.Json #nullable disable ; #nullable restore #line (3,2)-(3,47) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.Routing #nullable disable ; #nullable restore #line (4,2)-(4,43) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.Web #nullable disable ; #nullable restore #line (5,2)-(5,56) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using Microsoft.AspNetCore.Components.WebAssembly.Http #nullable disable ; #nullable restore #line (6,2)-(6,27) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using Microsoft.JSInterop #nullable disable ; #nullable restore #line (7,2)-(7,18) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using TestBlazor #nullable disable ; #nullable restore #line (8,2)-(8,34) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using System.Runtime.Versioning; #nullable disable #nullable restore #line (9,2)-(9,50) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\_Imports.razor&quot; using System.Runtime.InteropServices.JavaScript; #nullable disable #line default #line hidden #nullable restore public partial class App : global::Microsoft.AspNetCore.Components.ComponentBase #nullable disable { #pragma warning disable 1998 protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder) { __builder.OpenComponent&lt;global::Microsoft.AspNetCore.Components.Routing.Router&gt;(0); __builder.AddAttribute(1, nameof(global::Microsoft.AspNetCore.Components.Routing.Router. #nullable restore #line (1,9)-(1,20) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; AppAssembly #line default #line hidden #nullable disable ), (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::System.Reflection.Assembly&gt;( #nullable restore #line (1,23)-(1,43) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; typeof(App).Assembly #line default #line hidden #nullable disable ))); __builder.AddAttribute(2, &quot;Found&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment&lt;global::Microsoft.AspNetCore.Components.RouteData&gt;)((routeData) =&gt; (__builder2) =&gt; { __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.RouteView&gt;(3); __builder2.AddAttribute(4, nameof(global::Microsoft.AspNetCore.Components.RouteView. #nullable restore #line (3,20)-(3,29) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; RouteData #line default #line hidden #nullable disable ), (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::Microsoft.AspNetCore.Components.RouteData&gt;( #nullable restore #line (3,32)-(3,41) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; routeData #line default #line hidden #nullable disable ))); __builder2.AddAttribute(5, nameof(global::Microsoft.AspNetCore.Components.RouteView. #nullable restore #line (3,43)-(3,56) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; DefaultLayout #line default #line hidden #nullable disable ), (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::System.Type&gt;( #nullable restore #line (3,59)-(3,77) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; typeof(MainLayout) #line default #line hidden #nullable disable ))); __builder2.CloseComponent(); __builder2.AddMarkupContent(6, &quot;\\r\\n &quot;); __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate&gt;(7); __builder2.AddAttribute(8, nameof(global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate. #nullable restore #line (4,26)-(4,35) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; RouteData #line default #line hidden #nullable disable ), (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::Microsoft.AspNetCore.Components.RouteData&gt;( #nullable restore #line (4,38)-(4,47) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; routeData #line default #line hidden #nullable disable ))); __builder2.AddAttribute(9, nameof(global::Microsoft.AspNetCore.Components.Routing.FocusOnNavigate. #nullable restore #line (4,49)-(4,57) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; Selector #line default #line hidden #nullable disable ), (object)(&quot;h1&quot;)); __builder2.CloseComponent(); } )); __builder.AddAttribute(10, &quot;NotFound&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder2) =&gt; { __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.Web.PageTitle&gt;(11); __builder2.AddAttribute(12, &quot;ChildContent&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder3) =&gt; { __builder3.AddContent(13, &quot;Not found&quot;); } )); __builder2.CloseComponent(); __builder2.AddMarkupContent(14, &quot;\\r\\n &quot;); __builder2.OpenComponent&lt;global::Microsoft.AspNetCore.Components.LayoutView&gt;(15); __builder2.AddAttribute(16, nameof(global::Microsoft.AspNetCore.Components.LayoutView. #nullable restore #line (8,21)-(8,27) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; Layout #line default #line hidden #nullable disable ), (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck&lt;global::System.Type&gt;( #nullable restore #line (8,30)-(8,48) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.Interop.JavaScript.JSImportGenerator\\src\\TestBlazor\\App.razor&quot; typeof(MainLayout) #line default #line hidden #nullable disable ))); __builder2.AddAttribute(17, &quot;ChildContent&quot;, (global::Microsoft.AspNetCore.Components.RenderFragment)((__builder3) =&gt; { __builder3.AddMarkupContent(18, &quot;&lt;p role=\\&quot;alert\\&quot;&gt;Sorry, there\\'s nothing at this address.&lt;/p&gt;&quot;); } )); __builder2.CloseComponent(); } )); __builder.CloseComponent(); } #pragma warning restore 1998 } } #pragma warning restore 1591   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#download-example-net--c","content":" tip Download Example project Microsoft.Interop.JavaScript.JSImportGenerator   ","version":"Next","tagName":"h3"},{"title":"Share Microsoft.Interop.JavaScript.JSImportGenerator​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#share-microsoftinteropjavascriptjsimportgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Microsoft.Interop.JavaScript.JSImportGenerator by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.Interop.JavaScript.JSImportGenerator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"Minerals.AutoInterfaces by Szymon Hałucha","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#info","content":" info Name: Minerals.AutoInterfaces Package for automatic interface generation using incremental generator Author: Szymon Hałucha NuGet:https://www.nuget.org/packages/Minerals.AutoInterfaces/ You can find more details at https://github.com/SzymonHalucha/Minerals.AutoInterfaces Source: https://github.com/SzymonHalucha/Minerals.AutoInterfaces  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#original-readme","content":" note Minerals.AutoInterfaces This NuGet package provides a functionality to automatically generate interfaces for C# classes with a single attribute. This simplifies the creation of interfaces for classes with clearly defined public members, without having to manually write interface code. Features​ Automatic interface generation: Saves time and reduces the risk of errors when creating interfaces for classes.Support for generic methods and constraints: Allows for generating interfaces for complex classes with generic methods.Support for custom getters and setters: Generates interfaces for properties with custom getter and setter implementations.Customizable interface name: Allows you to name the interface according to naming conventions or user preferences.Compatible with .NET Standard 2.0 and C# 7.3+: Works on a wide range of platforms and development environments. Installation​ Add the Minerals.AutoInterfaces nuget package to your C# project using the following methods: 1. Project file definition​ &lt;PackageReference Include=&quot;Minerals.AutoInterfaces&quot; Version=&quot;0.1.*&quot; /&gt; 2. dotnet command​ dotnet add package Minerals.AutoInterfaces Usage​ To use the package, add the [GenerateInterface] attribute to the selected class. namespace Examples { [Minerals.AutoInterfaces.GenerateInterface] public class ExampleClass { public int Property1 { get; set; } = 1; public int Property2 { get; private set; } = 2; public int Property3 { get { return _field1; } set { _field1 = value; } } private int _field1 = 0; public int Method1(int arg0, int arg1) { return arg0 + arg1; } public void Method2&lt;T&gt;(T arg0) where T : class, new() { return $&quot;{arg0}&quot;; } protected void Method3() { } } } The code above will generate the IExampleClass.g.cs file with the IExampleClass interface. namespace Examples { [global::System.Runtime.CompilerServices.CompilerGenerated] public interface IExampleClass { int Property1 { get; set; } int Property2 { get; } int Property3 { get; set; } int Method1(int arg0, int arg1); string Method2&lt;T&gt;(T arg0) where T : class, new(); } } Package supports custom interface names​ namespace Examples { [Minerals.AutoInterfaces.GenerateInterface(&quot;ExampleInterface&quot;)] public class ExampleClass { public int Property1 { get; protected set; } = 1; } } The code above will generate the ExampleInterface.g.cs file with the ExampleInterface interface. namespace Examples { [global::System.Runtime.CompilerServices.CompilerGenerated] public interface ExampleInterface { int Property1 { get; } } } Versioning​ We use SemVer for versioning. For the versions available, see the branches on this repository. Authors​ Szymon Hałucha - Maintainer See also the list of contributors who participated in this project. License​ This project is licensed under the MIT License - see the LICENSE file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#about","content":" note Generating interface from class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Minerals.AutoInterfaces &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Minerals.AutoInterfaces&quot; Version=&quot;0.1.5&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenerateInterfaceAttribute.g.csIPerson.g.cs // &lt;auto-generated&gt; // This code was generated by a tool. // Name: Minerals.AutoInterfaces // Version: 0.1.5+54d6efe308ef06f041fc9b5d9285caeecef3e7c4 // &lt;/auto-generated&gt; #pragma warning disable CS9113 namespace Minerals.AutoInterfaces { [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] [global::System.AttributeUsage(global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct, AllowMultiple = false, Inherited = false)] public sealed class GenerateInterfaceAttribute : global::System.Attribute { public GenerateInterfaceAttribute(string customName = &quot;&quot;) { } } } #pragma warning restore CS9113   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#download-example-net--c","content":" tip Download Example project Minerals.AutoInterfaces   ","version":"Next","tagName":"h3"},{"title":"Share Minerals.AutoInterfaces​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#share-mineralsautointerfaces","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Minerals.AutoInterfaces  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Minerals.AutoInterfaces by Szymon Hałucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoInterfaces#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"Minerals.AutoMixins by Szymon Halucha","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#info","content":" info Name: Minerals.AutoMixins Package for automatic mixin design pattern generation using incremental generator Author: Szymon Halucha NuGet:https://www.nuget.org/packages/Minerals.AutoMixins/ You can find more details at https://github.com/SzymonHalucha/Minerals.AutoMixins Source: https://github.com/SzymonHalucha/Minerals.AutoMixins  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#original-readme","content":" note Minerals.AutoMixins Package on nuget.org This NuGet package provides a capability to automatically generate a mix-in design pattern for C# classes by using only one attribute. This allows you to easily extend the functionality of existing classes. Funkcje​ Easy mix-in definition: Mix-in object are defined by using the [GenerateMixin] attribute.Easy addition of mix-ins to a class: To add a mix-in object to a class, use the [AddMixin(typeof(ExampleMixinClass))] attribute.Optimized code generation: The package uses an incremental source generator, so it doesn't significantly slow down the compilation process.Compatibility with .NET Standard 2.0 and C# 7.3+: Works on a wide range of platforms and development environments. Installation​ Add the Minerals.AutoMixins nuget package to your C# project using the following methods: 1. Project file definition​ &lt;PackageReference Include=&quot;Minerals.AutoMixins&quot; Version=&quot;0.2.1&quot; /&gt; 2. dotnet command​ dotnet add package Minerals.AutoMixins Why choose this package instead of the Default Interface Implementation?​ Because the C# language option called &quot;Default Interface Implementation&quot;, has limited runtime platform support. The Minerals.AutoMixins package is compatible with netstandard2.0 and C# language version 7.3+. Usage​ To define a mix-in object, add the [GenerateMixin] attribute to the selected class. Defining mix-in objects​ namespace Examples { [Minerals.AutoMixins.GenerateMixin] public class ExampleMixin1 { public float Property1 { get; set; } = 0.5f; private int _field1 = 0; private void Method1() { Console.WriteLine(&quot;Test1&quot;); } } [Minerals.AutoMixins.GenerateMixin] public class ExampleMixin2 { public string PropertyText1 { get; set; } = &quot;Test2&quot;; } } Using mix-in objects​ To use the selected mix-in object, add the [AddMixin(typeof(ExampleMixin1))] attribute to the selected class. The class implementing the AddMixin attribute must have the partial modifier to work properly. namespace Examples { [Minerals.AutoMixins.AddMixin(typeof(ExampleMixin1))] public partial class ExampleClass { public int MyProperty { get; set; } = 3; } } The code above will generate an ExampleClass.g.cs file with a partial class ExampleClass. namespace Examples { [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public partial class ExampleClass { // MixinType: ExampleMixin1 public float Property1 { get; set; } = 0.5f; private int _field1 = 0; private void Method1() { Console.WriteLine(&quot;Test1&quot;); } } } Multiple mix-ins​ This package allows you to add multiple mix-in objects to a single class through attribute arguments [AddMixin(typeof(ExampleMixin1), typeof(ExampleMixin2))]. namespace Examples { [Minerals.AutoMixins.AddMixin(typeof(ExampleMixin1), typeof(ExampleMixin2))] public partial class ExampleClass { public int MyProperty { get; set; } = 3; public void MyMethod() { } } } The code above will generate an ExampleClass.g.cs file with a partial class ExampleClass. namespace Examples { [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] public partial class ExampleClass { // MixinType: ExampleMixin1 public float Property1 { get; set; } = 0.5f; private int _field1 = 0; private void Method1() { Console.WriteLine(&quot;Test1&quot;); } // MixinType: ExampleMixin2 public string PropertyText1 { get; set; } = &quot;Test2&quot;; public string MethodText1() { return PropertyText1; } } } Versioning​ We use SemVer for versioning. For the versions available, see the branches on this repository. Authors​ Szymon Hałucha - Maintainer See also the list of contributors who participated in this project. License​ This project is licensed under the MIT License - see the LICENSE file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#about","content":" note Generate Mixin from another classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csLogData.cs This is the CSharp Project that references Minerals.AutoMixins &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Minerals.AutoMixins&quot; Version=&quot;0.2.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.g.csAddMixinAttribute.g.csGenerateMixinAttribute.g.cs // &lt;auto-generated&gt; // This code was generated by a tool. // Name: Minerals.AutoMixins // Version: 0.2.1+6c5634e46b130effbe00bd9d3f94459f1dbb2e85 // &lt;/auto-generated&gt; namespace DemoMixin { [global::System.Diagnostics.DebuggerNonUserCode] [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] internal partial class Person { // MixinType: LogData public void Log(string data) =&gt; Console.WriteLine(data); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#download-example-net--c","content":" tip Download Example project Minerals.AutoMixins   ","version":"Next","tagName":"h3"},{"title":"Share Minerals.AutoMixins​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#share-mineralsautomixins","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Minerals.AutoMixins  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Minerals.AutoMixins by Szymon Halucha","url":"/RSCG_Examples/v2/docs/Minerals.AutoMixins#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"MinimalApiBuilder by","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#info","content":" info Name: MinimalApiBuilder Reflectionless, source-generated, thin abstraction layer over the ASP.NET Core Minimal APIs interface Author: NuGet:https://www.nuget.org/packages/MinimalApiBuilder/ You can find more details at https://github.com/JensDll/MinimalApiBuilder Source: https://github.com/JensDll/MinimalApiBuilder  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#original-readme","content":" note MinimalApiBuilder Reflectionless, source-generated, thin abstraction layer over the ASP.NET Core Minimal APIsinterface. How to Use​ Based on the Vertical Slice Architecture with Feature folder. There is one class for every API endpoint. A basic example looks like the following: using Microsoft.AspNetCore.Mvc; using MinimalApiBuilder; public partial class BasicEndpoint : MinimalApiBuilderEndpoint { private static string Handle([FromServices] BasicEndpoint endpoint) { return &quot;Hello, World!&quot;; } } The endpoint class must be partial, inherit from MinimalApiBuilderEndpoint, and have a Handle or HandleAsync method with the containing type passed from dependency injection. The endpoint is mapped through the typical IEndpointRouteBuilder Map&lt;Verb&gt; extension methods: app.MapGet&lt;BasicEndpoint&gt;(&quot;/hello&quot;); The above is functionally equivalent to: app.MapGet(&quot;/hello&quot;, static () =&gt; &quot;Hello, World!&quot;); This library depends on FluentValidation &gt;= 11. An endpoint can have a validated request object: public struct BasicRequest { public required string Name { get; init; } } public partial class BasicRequestEndpoint : MinimalApiBuilderEndpoint { private static string Handle([FromServices] BasicRequestEndpoint endpoint, [AsParameters] BasicRequest request) { return $&quot;Hello, {request.Name}!&quot;; } } public class BasicRequestValidator : AbstractValidator&lt;BasicRequest&gt; { public BasicRequestValidator() { RuleFor(static request =&gt; request.Name).MinimumLength(2); } } app.MapGet&lt;BasicRequestEndpoint&gt;(&quot;/hello/{name}&quot;); The incremental generator will generate code to validate the request object before the handler is called and return a 400 Bad Request response if the validation fails. In Program.cs the below builder.Services.AddMinimalApiBuilderEndpoints(); needs to be added to register the necessary types with dependency injection.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#about","content":" note Generate Minimal API from classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#example-source-csproj-source-files","content":" CSharp ProjectProgram.csBasicEndpoint.cs This is the CSharp Project that references MinimalApiBuilder &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;7.0.12&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;PackageReference Include=&quot;MinimalApiBuilder&quot; Version=&quot;1.3.3&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DependencyInjection.g.csEndpoint.g.cs // &lt;auto-generated&gt; // This is a MinimalApiBuilder source generated file. // &lt;/auto-generated&gt; #nullable enable namespace MinimalApiBuilder { public static class DependencyInjection { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;MinimalApiBuilder.Generator&quot;, &quot;1.3.3.0&quot;)] public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddMinimalApiBuilderEndpoints(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services) { global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped&lt;global::BasicEndpoint&gt;(services); return services; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#download-example-net--c","content":" tip Download Example project MinimalApiBuilder   ","version":"Next","tagName":"h3"},{"title":"Share MinimalApiBuilder​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#share-minimalapibuilder","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MinimalApiBuilder  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MinimalApiBuilder by","url":"/RSCG_Examples/v2/docs/MinimalApiBuilder#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"MinimalApis.Discovery by Shawn Wildermuth","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#info","content":" info Name: MinimalApis.Discovery A utility library to allow for structuring Minimal APIs and registering them via source generator. Author: Shawn Wildermuth NuGet:https://www.nuget.org/packages/MinimalApis.Discovery/ You can find more details at https://github.com/shawnwildermuth/MinimalApis Source: https://github.com/shawnwildermuth/MinimalApis  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#original-readme","content":" note Minimal API Tools This is the home of a set of tools that I've created for Minimal APIs. These include: MinimalApis.Discovery - A tool for organizing your Minimal APIsMinimalApis.FluentValidation - Endpoint filter for more easily tying Validators to specific Minimal API Endpoints.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#about","content":" note Controller like API registering  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#example-source-csproj-source-files","content":" CSharp ProjectPersonAPI.csPerson.csProgram.cs This is the CSharp Project that references MinimalApis.Discovery &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.4&quot; /&gt; &lt;PackageReference Include=&quot;MinimalApis.Discovery&quot; Version=&quot;1.0.7&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MinimalApiDiscovery.g.cs // &lt;auto-generated/&gt; using System; using Microsoft.AspNetCore.Builder; namespace MinimalApis.Discovery { public static class MinimalApisDiscoveryGeneratedExtensions { public static WebApplication MapApis(this WebApplication app) { // Call Register on all classes that implement IApi new global::APIDemo.PersonAPI().Register(app); return app; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#download-example-net--c","content":" tip Download Example project MinimalApis.Discovery   ","version":"Next","tagName":"h3"},{"title":"Share MinimalApis.Discovery​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#share-minimalapisdiscovery","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MinimalApis.Discovery  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MinimalApis.Discovery by Shawn Wildermuth","url":"/RSCG_Examples/v2/docs/MinimalApis.Discovery#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"mocklis by Esbjörn Redmo","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/mocklis","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#info","content":" info Name: mocklis Mocklis is a library and source code generator for .net, targeted at generating test doubles from interfaces. This package contains tools for writing tests using the generated code. Author: Esbjörn Redmo NuGet:https://www.nuget.org/packages/mocklis/ You can find more details at https://mocklis.readthedocs.io/en/latest/getting-started/index.html Source: https://github.com/mocklis/mocklis/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#original-readme","content":" note Mocklis is a library and source code generator for .net, targeted at generating test doubles from interfaces. Useful Links:​ Home page: https://mocklis.net Github project page: https://github.com/mocklis Documentation: https://mocklis.readthedocs.io NuGet page: https://www.nuget.org/profiles/mocklis  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#about","content":" note Generating mocks from classes for unit tests  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#example-source-csproj-source-files","content":" CSharp ProjectTestMock.csTestClock.csUsings.cs This is the CSharp Project that references mocklis &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;IsTestProject&gt;true&lt;/IsTestProject&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.9.0-preview-23577-04&quot; /&gt; &lt;PackageReference Include=&quot;Mocklis&quot; Version=&quot;1.4.0-alpha.2&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestAdapter&quot; Version=&quot;3.2.0-preview.23623.1&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestFramework&quot; Version=&quot;3.2.0-preview.23623.1&quot; /&gt; &lt;PackageReference Include=&quot;coverlet.collector&quot; Version=&quot;6.0.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\MockLisClock\\MockLisClock.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TestClock.TestMock.g.cs // &lt;auto-generated /&gt; #nullable enable namespace TestClock { partial class TestMock { public global::Mocklis.Core.FuncMethodMock&lt;global::System.DateTime&gt; GetNow { get; } global::System.DateTime global::MockTest.IMyClock.GetNow() =&gt; GetNow.Call(); public global::Mocklis.Core.FuncMethodMock&lt;global::System.DateTime&gt; GetUtcNow { get; } global::System.DateTime global::MockTest.IMyClock.GetUtcNow() =&gt; GetUtcNow.Call(); public TestMock() : base() { this.GetNow = new global::Mocklis.Core.FuncMethodMock&lt;global::System.DateTime&gt;(this, &quot;TestMock&quot;, &quot;IMyClock&quot;, &quot;GetNow&quot;, &quot;GetNow&quot;, global::Mocklis.Core.Strictness.Lenient); this.GetUtcNow = new global::Mocklis.Core.FuncMethodMock&lt;global::System.DateTime&gt;(this, &quot;TestMock&quot;, &quot;IMyClock&quot;, &quot;GetUtcNow&quot;, &quot;GetUtcNow&quot;, global::Mocklis.Core.Strictness.Lenient); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#download-example-net--c","content":" tip Download Example project mocklis   ","version":"Next","tagName":"h3"},{"title":"Share mocklis​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#share-mocklis","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/mocklis  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Tests\" has the following generators:​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#category-tests-has-the-following-generators","content":" 1 mocklis  2 MockMe  3 MSTest  4 Ridge  5 Rocks  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"mocklis by Esbjörn Redmo","url":"/RSCG_Examples/v2/docs/mocklis#see-category","content":" Tests ","version":"Next","tagName":"h3"},{"title":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#nuget--site-data","content":" ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#info","content":" info Name: Microsoft.NET.Sdk.Razor.SourceGenerators Author: Microsoft NuGet: ** You can find more details at Source:  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#original-readme","content":" note  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#about","content":" note Generating razor/cshtml pages to cs pages  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#example-source-csproj-source-files","content":" CSharp ProjectProgram.csError.cshtmlIndex.cshtmlPrivacy.cshtml_Layout.cshtml_ValidationScriptsPartial.cshtml_ViewImports.cshtml_ViewStart.cshtml This is the CSharp Project that references Microsoft.NET.Sdk.Razor.SourceGenerators &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Pages_Error_cshtml.g.csPages_Index_cshtml.g.csPages_Privacy_cshtml.g.csPages_Shared__Layout_cshtml.g.csPages_Shared__ValidationScriptsPartial_cshtml.g.csPages__ViewImports_cshtml.g.csPages__ViewStart_cshtml.g.cs #pragma checksum &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.NET.Sdk.Razor.SourceGenerators\\src\\RazorAppDemo\\Pages\\Error.cshtml&quot; &quot;{8829d00f-11b8-4213-878b-770e8597ac16}&quot; &quot;bc66171ba9f1ca97b94262a5d79faf33d0f7eb4fe7f8c83d2f58010b95893606&quot; // &lt;auto-generated/&gt; #pragma warning disable 1591 [assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(RazorAppDemo.Pages.Pages_Error), @&quot;mvc.1.0.razor-page&quot;, @&quot;/Pages/Error.cshtml&quot;)] namespace RazorAppDemo.Pages { #line default using global::System; using global::System.Collections.Generic; using global::System.Linq; using global::System.Threading.Tasks; using global::Microsoft.AspNetCore.Mvc; using global::Microsoft.AspNetCore.Mvc.Rendering; using global::Microsoft.AspNetCore.Mvc.ViewFeatures; #nullable restore #line (1,2)-(1,20) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.NET.Sdk.Razor.SourceGenerators\\src\\RazorAppDemo\\Pages\\_ViewImports.cshtml&quot; using RazorAppDemo #nullable disable ; #line default #line hidden [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute(&quot;Identifier&quot;, &quot;/Pages/Error.cshtml&quot;)] [global::System.Runtime.CompilerServices.CreateNewOnMetadataUpdateAttribute] #nullable restore internal sealed class Pages_Error : global::Microsoft.AspNetCore.Mvc.RazorPages.Page #nullable disable { #pragma warning disable 1998 public async override global::System.Threading.Tasks.Task ExecuteAsync() { #nullable restore #line (3,3)-(5,1) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.NET.Sdk.Razor.SourceGenerators\\src\\RazorAppDemo\\Pages\\Error.cshtml&quot; ViewData[&quot;Title&quot;] = &quot;Error&quot;; #line default #line hidden #nullable disable WriteLiteral(&quot;\\r\\n&lt;h1 class=\\&quot;text-danger\\&quot;&gt;Error.&lt;/h1&gt;\\r\\n&lt;h2 class=\\&quot;text-danger\\&quot;&gt;An error occurred while processing your request.&lt;/h2&gt;\\r\\n\\r\\n&quot;); #nullable restore #line (10,2)-(12,1) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.NET.Sdk.Razor.SourceGenerators\\src\\RazorAppDemo\\Pages\\Error.cshtml&quot; if (Model.ShowRequestId) { #line default #line hidden #nullable disable WriteLiteral(&quot; &lt;p&gt;\\r\\n &lt;strong&gt;Request ID:&lt;/strong&gt; &lt;code&gt;&quot;); Write( #nullable restore #line (13,45)-(13,60) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.NET.Sdk.Razor.SourceGenerators\\src\\RazorAppDemo\\Pages\\Error.cshtml&quot; Model.RequestId #line default #line hidden #nullable disable ); WriteLiteral(&quot;&lt;/code&gt;\\r\\n &lt;/p&gt;\\r\\n&quot;); #nullable restore #line (15,1)-(16,1) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Microsoft.NET.Sdk.Razor.SourceGenerators\\src\\RazorAppDemo\\Pages\\Error.cshtml&quot; } #line default #line hidden #nullable disable WriteLiteral(@&quot; &lt;h3&gt;Development Mode&lt;/h3&gt; &lt;p&gt; Swapping to the &lt;strong&gt;Development&lt;/strong&gt; environment displays detailed information about the error that occurred. &lt;/p&gt; &lt;p&gt; &lt;strong&gt;The Development environment shouldn't be enabled for deployed applications.&lt;/strong&gt; It can result in displaying sensitive information from exceptions to end users. For local debugging, enable the &lt;strong&gt;Development&lt;/strong&gt; environment by setting the &lt;strong&gt;ASPNETCORE_ENVIRONMENT&lt;/strong&gt; environment variable to &lt;strong&gt;Development&lt;/strong&gt; and restarting the app. &lt;/p&gt; &quot;); } #pragma warning restore 1998 #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;ErrorModel&gt; Html { get; private set; } = default!; #nullable disable public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary&lt;ErrorModel&gt; ViewData =&gt; (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary&lt;ErrorModel&gt;)PageContext?.ViewData; public ErrorModel Model =&gt; ViewData.Model; } } #pragma warning restore 1591   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#download-example-net--c","content":" tip Download Example project Microsoft.NET.Sdk.Razor.SourceGenerators   ","version":"Next","tagName":"h3"},{"title":"Share Microsoft.NET.Sdk.Razor.SourceGenerators​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#share-microsoftnetsdkrazorsourcegenerators","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Microsoft.NET.Sdk.Razor.SourceGenerators by Microsoft","url":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#info","content":" info Name: MinimalHelpers.Routing.Analyzers A library that provides a Source Generator for automatic endpoints registration in Minimal API projects Author: Maroc Minerva NuGet:https://www.nuget.org/packages/MinimalHelpers.Routing.Analyzers/ You can find more details at https://github.com/marcominerva/MinimalHelpers Source: https://github.com/marcominerva/MinimalHelpers  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#original-readme","content":" note Minimal APIs Helpers A collection of helpers libraries for Minimal API projects. MinimalHelpers.Routing​ A library that provides Routing helpers for Minimal API projects for automatic endpoints registration using Reflection. Installation​ The library is available on NuGet. Just search for MinimalHelpers.Routing in the Package Manager GUI or run the following command in the .NET CLI: dotnet add package MinimalHelpers.Routing Usage​ Create a class to hold your route handlers registration and make it implementing the IEndpointRouteHandlerBuilder interface: .NET 6.0 public class PeopleEndpoints : MinimalHelpers.Routing.IEndpointRouteHandlerBuilder { public void MapEndpoints(IEndpointRouteBuilder endpoints) { endpoints.MapGet(&quot;/api/people&quot;, GetList); endpoints.MapGet(&quot;/api/people/{id:guid}&quot;, Get); endpoints.MapPost(&quot;/api/people&quot;, Insert); endpoints.MapPut(&quot;/api/people/{id:guid}&quot;, Update); endpoints.MapDelete(&quot;/api/people/{id:guid}&quot;, Delete); } // ... } .NET 7.0 or higher public class PeopleEndpoints : MinimalHelpers.Routing.IEndpointRouteHandlerBuilder { public static void MapEndpoints(IEndpointRouteBuilder endpoints) { endpoints.MapGet(&quot;/api/people&quot;, GetList); endpoints.MapGet(&quot;/api/people/{id:guid}&quot;, Get); endpoints.MapPost(&quot;/api/people&quot;, Insert); endpoints.MapPut(&quot;/api/people/{id:guid}&quot;, Update); endpoints.MapDelete(&quot;/api/people/{id:guid}&quot;, Delete); } // ... } NoteStarting from .NET 7.0, the IEndpointRouteHandlerBuilder interface exposes the MapEndpoints method as static abstract, so it can be called without creating an instance of the handler. Call the MapEndpoints() extension method on the WebApplication object inside Program.cs before the Run() method invocation: // using MinimalHelpers.Routing; app.MapEndpoints(); app.Run(); By default, MapEndpoints() will scan the calling Assembly to search for classes that implement the IEndpointRouteHandlerBuilder interface. If your route handlers are defined in another Assembly, you have two alternatives: Use the MapEndpoints() overload that takes the Assembly to scan as argumentUse the MapEndpointsFromAssemblyContaining of T() extension method and specify a type that is contained in the Assembly you want to scan You can also explicitly decide what types (among the ones that implement the IRouteEndpointHandlerBuilder interface) you want to actually map, passing a predicate to the MapEndpoints method: app.MapEndpoints(type =&gt; { if (type.Name.StartsWith(&quot;Products&quot;)) { return false; } return true; }); NoteThese methods rely on Reflection to scan the Assembly and find the classes that implement the IEndpointRouteHandlerBuilder interface. This can have a performance impact, especially in large projects. If you have performance issues, consider using the explicit registration method. Moreover, this solution is incompatibile with Native AOT. If you're working with .NET 7.0 or higher, the reccommended approach is to use the MinimalHelpers.Routing.Analyzers package, that provides a Source Generator for endpoints registration, as described later. MinimalHelpers.Routing.Analyzers (.NET 7.0 or higher)​ A library that provides a Source Generator for automatic endpoints registration in Minimal API projects. Installation​ The library is available on NuGet. Just search for MinimalHelpers.Routing in the Package Manager GUI or run the following command in the .NET CLI: dotnet add package MinimalHelpers.Routing.Analyzers Usage​ Create a class to hold your route handlers registration and make it implementing the IEndpointRouteHandlerBuilder interface: public class PeopleEndpoints : IEndpointRouteHandlerBuilder { public static void MapEndpoints(IEndpointRouteBuilder endpoints) { endpoints.MapGet(&quot;/api/people&quot;, GetList); endpoints.MapGet(&quot;/api/people/{id:guid}&quot;, Get); endpoints.MapPost(&quot;/api/people&quot;, Insert); endpoints.MapPut(&quot;/api/people/{id:guid}&quot;, Update); endpoints.MapDelete(&quot;/api/people/{id:guid}&quot;, Delete); } // ... } NoteYou only need to use the MinimalHelpers.Routing.Analyzers package. With this Source Generator, the IEndpointRouteHandlerBuilder interface is auto-generated. Call the MapEndpoints() extension method on the WebApplication object inside Program.cs before the Run() method invocation: app.MapEndpoints(); app.Run(); NoteThe MapEndpoints method is generated by the Source Generator. MinimalHelpers.OpenApi​ A library that provides OpenApi helpers for Minimal API projects. Installation​ The library is available on NuGet. Just search for MinimalHelpers.OpenApi in the Package Manager GUI or run the following command in the .NET CLI: dotnet add package MinimalHelpers.OpenApi Usage​ Extension methods for OpenApi This library provides some extensions methods that simplify the OpenAPI configuration in Minimal API projects. For example, it is possible to customize the description of a response using its status code: endpoints.MapPost(&quot;login&quot;, LoginAsync) .AllowAnonymous() .WithValidation&lt;LoginRequest&gt;() .Produces&lt;LoginResponse&gt;(StatusCodes.Status200OK) .Produces&lt;LoginResponse&gt;(StatusCodes.Status206PartialContent) .Produces(StatusCodes.Status403Forbidden) .ProducesValidationProblem() .WithOpenApi(operation =&gt; { operation.Summary = &quot;Performs the login of a user&quot;; operation.Response(StatusCodes.Status200OK).Description = &quot;Login successful&quot;; operation.Response(StatusCodes.Status206PartialContent).Description = &quot;The user is logged in, but the password has expired and must be changed&quot;; operation.Response(StatusCodes.Status400BadRequest).Description = &quot;Incorrect username and/or password&quot;; operation.Response(StatusCodes.Status403Forbidden).Description = &quot;The user was blocked due to too many failed logins&quot;; return operation; }); Extension methods for RouteHandlerBuilder Often we have endpoints with multiple 4xx return values, each of which produces a ProblemDetails response: endpoints.MapGet(&quot;/api/people/{id:guid}&quot;, Get) .ProducesProblem(StatusCodes.Status400BadRequest) .ProducesProblem(StatusCodes.Status401Unauthorized) .ProducesProblem(StatusCodes.Status403Forbidden) .ProducesProblem(StatusCodes.Status404NotFound); To avoid multiple calls to ProducesProblem, we can use the ProducesDefaultProblem extension method provided by the library: endpoints.MapGet(&quot;/api/people/{id:guid}&quot;, Get) .ProducesDefaultProblem(StatusCodes.Status400BadRequest, StatusCodes.Status401Unauthorized, StatusCodes.Status403Forbidden, StatusCodes.Status404NotFound); MinimalHelpers.Validation​ A library that provides an Endpoint filter for Minimal API projects to perform validation with Data Annotations, using the MiniValidation library. Installation​ The library is available on NuGet. Just search for MinimalHelpers.Validation in the Package Manager GUI or run the following command in the .NET CLI: dotnet add package MinimalHelpers.Validation Usage​ Decorates a class with attributes to define the validation rules: using System.ComponentModel.DataAnnotations; public class Person { [Required] [MaxLength(20)] public string? FirstName { get; set; } [Required] [MaxLength(20)] public string? LastName { get; set; } [MaxLength(50)] public string? City { get; set; } } Add the WithValidation of T() extension method to enable the validation filter: using MinimalHelpers.Validation; app.MapPost(&quot;/api/people&quot;, (Person person) =&gt; { // ... }) .WithValidation&lt;Person&gt;(); If the validation fails, the response will be a 400 Bad Request with a ValidationProblemDetails object containing the validation errors, for example: { &quot;type&quot;: &quot;https://tools.ietf.org/html/rfc9110#section-15.5.1&quot;, &quot;title&quot;: &quot;One or more validation errors occurred&quot;, &quot;status&quot;: 400, &quot;instance&quot;: &quot;/api/people&quot;, &quot;traceId&quot;: &quot;00-009c0162ba678cae2ee391815dbbb59d-0a3a5b0c16d053e6-00&quot;, &quot;errors&quot;: { &quot;FirstName&quot;: [ &quot;The field FirstName must be a string or array type with a maximum length of '20'.&quot; ], &quot;LastName&quot;: [ &quot;The LastName field is required.&quot; ] } } If you want to customize validation, you can use the ConfigureValidation extension method: using MinimalHelpers.Validation; builder.Services.ConfigureValidation(options =&gt; { // If you want to get errors as a list instead of a dictionary. options.ErrorResponseFormat = ErrorResponseFormat.List; // The default is &quot;One or more validation errors occurred&quot; options.ValidationErrorTitleMessageFactory = (context, errors) =&gt; $&quot;There was {errors.Values.Sum(v =&gt; v.Length)} error(s)&quot;; }); You can use the ValidationErrorTitleMessageFactory, for example, if you want to localized the title property of the response using a RESX file. MinimalHelpers.FluentValidation​ A library that provides an Endpoint filter for Minimal API projects to perform validation using FluentValidation. Installation​ The library is available on NuGet. Just search for MinimalHelpers.FluentValidation in the Package Manager GUI or run the following command in the .NET CLI: dotnet add package MinimalHelpers.FluentValidation Usage​ Create a class that extends AbstractValidator of T and define the validation rules: using FluentValidation; public record class Product(string Name, string Description, double UnitPrice); public class ProductValidator : AbstractValidator&lt;Product&gt; { public ProductValidator() { RuleFor(p =&gt; p.Name).NotEmpty().MaximumLength(50).EmailAddress(); RuleFor(p =&gt; p.Description).MaximumLength(500); RuleFor(p =&gt; p.UnitPrice).GreaterThan(0); } } Register validators in the Service Collection: using FluentValidation; // Assuming the validators are in the same assembly as the Program class builder.Services.AddValidatorsFromAssemblyContaining&lt;Program&gt;(); Add the WithValidation of T() extension method to enable the validation filter: using MinimalHelpers.FluentValidation; app.MapPost(&quot;/api/products&quot;, (Product product) =&gt; { // ... }) .WithValidation&lt;Product&gt;(); If the validation fails, the response will be a 400 Bad Request with a ValidationProblemDetails object containing the validation errors, for example: { &quot;type&quot;: &quot;https://tools.ietf.org/html/rfc9110#section-15.5.1&quot;, &quot;title&quot;: &quot;One or more validation errors occurred&quot;, &quot;status&quot;: 400, &quot;instance&quot;: &quot;/api/products&quot;, &quot;traceId&quot;: &quot;00-f4ced0ae470424dd04cbcebe5f232dc5-bbdcc59f310ebfb8-00&quot;, &quot;errors&quot;: { &quot;Name&quot;: [ &quot;'Name' cannot be empty.&quot; ], &quot;UnitPrice&quot;: [ &quot;'Unit Price' must be grater than '0'.&quot; ] } } If you want to customize validation, you can use the ConfigureValidation extension method: using MinimalHelpers.Validation; builder.Services.ConfigureValidation(options =&gt; { // If you want to get errors as a list instead of a dictionary. options.ErrorResponseFormat = ErrorResponseFormat.List; // The default is &quot;One or more validation errors occurred&quot; options.ValidationErrorTitleMessageFactory = (context, errors) =&gt; $&quot;There was {errors.Values.Sum(v =&gt; v.Length)} error(s)&quot;; }); You can use the ValidationErrorTitleMessageFactory, for example, if you want to localized the title property of the response using a RESX file. Contribute The project is constantly evolving. Contributions are welcome. Feel free to file issues and pull requests on the repo and we'll address them as we can.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#about","content":" note Controller like API registering  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#example-source-csproj-source-files","content":" CSharp ProjectPersonAPI.csPerson.csProgram.cs This is the CSharp Project that references MinimalHelpers.Routing.Analyzers &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.4&quot; /&gt; &lt;PackageReference Include=&quot;MinimalHelpers.Routing.Analyzers&quot; Version=&quot;1.0.13&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  EndpointRouteBuilderExtensions.g.csIEndpointRouteHandlerBuilder.g.cs // &lt;auto-generated /&gt; namespace Microsoft.AspNetCore.Routing; #nullable enable annotations #nullable disable warnings /// &lt;summary&gt; /// Provides extension methods for &lt;see cref=&quot;IEndpointRouteBuilder&quot; /&gt; to add route handlers. /// &lt;/summary&gt; public static class EndpointRouteBuilderExtensions { /// &lt;summary&gt; /// Automatically registers all the route endpoints defined in classes that implement the &lt;see cref=&quot;IEndpointRouteHandlerBuilder &quot;/&gt; interface. /// &lt;/summary&gt; /// &lt;param name=&quot;endpoints&quot;&gt;The &lt;see cref=&quot;IEndpointRouteBuilder&quot; /&gt; to add routes to.&lt;/param&gt; public static IEndpointRouteBuilder MapEndpoints(this IEndpointRouteBuilder endpoints) { global::APIDemo.PersonAPI.MapEndpoints(endpoints); return endpoints; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#download-example-net--c","content":" tip Download Example project MinimalHelpers.Routing.Analyzers   ","version":"Next","tagName":"h3"},{"title":"Share MinimalHelpers.Routing.Analyzers​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#share-minimalhelpersroutinganalyzers","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MinimalHelpers.Routing.Analyzers by Maroc Minerva","url":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"MorrisMoxy by Peter Morris","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MorrisMoxy","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#info","content":" info Name: MorrisMoxy A C# mix-in code generator Author: Peter Morris NuGet:https://www.nuget.org/packages/Morris.Moxy/ You can find more details at https://github.com/mrpmorris/Morris.Moxy Source: https://github.com/mrpmorris/Morris.Moxy  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#original-readme","content":" note Morris.Moxy Morris.Moxy is a code mix-in code generator for Microsoft .NET Overview​ Moxy allows you to write code templates at development time, which are then processed as Roslyn code-generators in real-time, and the results mixed-in to target classes. Goal​ Write your code patterns once. namespace {{ moxy.Class.Namespace }} { partial class {{ moxy.Class.Name}} { public string FullName =&gt; $&quot;{Salutation} {GivenName} {FamilyName}&quot; public string Salutation { get; set; } public string GivenName { get; set; } public string FamilyName { get; set; } } } Moxy automatically creates a .Net attribute for each pattern, which you can then apply to multiple targets in your source code. [PersonName] public partial class Contact { } The Moxy Roslyn code-generator executes the code pattern to generate additional C# code namespace MyApp { partial class Contact { public string FullName =&gt; $&quot;{Salutation} {GivenName} {FamilyName}&quot; public string Salutation { get; set; } public string GivenName { get; set; } public string FamilyName { get; set; } } } Moxy is FAST. Changes to the template should reflect in the code in real-time. No need to recompile C# source code between changes. Getting started​ The easiest way to get started is to read the documentation. Which includes tutorials that are numbered in an order recommended for learningMorris.Moxy. Each will have a README file that explains how the tutorial was created. Installation​ You can download the latest release / pre-release NuGet packages from the officialMorris.Moxy Nuget page Release notes​ See the Releases page for release history. Licence MIT  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#about","content":" note Generate C# code for classes from template using attributes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#example-source-csproj-source-files","content":" CSharp ProjectProgram.csEmployee.csDepartment.csIDName.mixin This is the CSharp Project that references MorrisMoxy &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;mixin\\IDName.mixin&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;mixin\\IDName.mixin&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Morris.Moxy&quot; Version=&quot;1.5.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IDName.MixinAttribute.Moxy.g.csMorrisMoxyDemo.Department.IDName.Instance1.MixinCode.Moxy.g.csMorrisMoxyDemo.Employee.IDName.Instance1.MixinCode.Moxy.g.cs // Generated from mixin\\IDName.mixin at 2025-07-24 04:40:53 UTC namespace MorrisMoxyDemo { [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] internal class IDNameAttribute : Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#download-example-net--c","content":" tip Download Example project MorrisMoxy   ","version":"Next","tagName":"h3"},{"title":"Share MorrisMoxy​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#share-morrismoxy","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MorrisMoxy  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MorrisMoxy by Peter Morris","url":"/RSCG_Examples/v2/docs/MorrisMoxy#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"MockMe by connorivy","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MockMe","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#info","content":" info Name: MockMe The concrete type mocking library for .NET Author: connorivy NuGet:https://www.nuget.org/packages/MockMe/ You can find more details at https://github.com/connorivy/MockMe/ Source: https://github.com/connorivy/MockMe/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#original-readme","content":" note What is it?​ MockMe is a library for mocking dependencies in your unit test projects. Unlike other libraries that can only mock interfaces and virtual methods, MockMe can mock sealed classes and non-virtual methods. Getting Started​ Imagine you have the following repository class sealed class MyRepo { public int ExpensiveDatabaseCall() =&gt; // some code; } Download the MockMe NuGet package, then the source generators and the &quot;MockMe.Mock&quot; type will be available in your project. Then you can customize the behavior of the repository class as below. using MockMe; // use this syntax to trigger the source generator to make a mock of the provided type // the 'mock' object will have 3 properties: Setup, Assert, and MockedObject // hint: rebuild test project after writing this line or IntelliSense may not work correctly var mock = Mock.Me(default(MyRepo)); // the mock.Setup object has an identical interface to the original object // from there you can configure method behavior with 'Returns', 'Callback', 'Throws', etc mock.Setup.ExpensiveDatabaseCall().Returns(99); // the mock.MockedObject is a special instance of the mocked type which has the modified behavior // other instances of the mocked type will have the original behavior MyRepo myRepo = mock.MockedObject; int result = myRepo.ExpensiveDatabaseCall(); Assert.Equal(99, result); // the mock.Assert object also has an identical interface to the original object. // you can use it to assert certain mock behaviors mock.Assert.ExpensiveDatabaseCall().WasCalled(); Check out the Wiki for more examples. Give it a Star​ If you like this project, please give it a star!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#about","content":" note Creating mocks for testing classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#example-source-csproj-source-files","content":" CSharp ProjectTestClock.cs This is the CSharp Project that references MockMe &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;IsTestProject&gt;true&lt;/IsTestProject&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.5.0&quot; /&gt; &lt;PackageReference Include=&quot;MockMe&quot; Version=&quot;1.1.2&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestAdapter&quot; Version=&quot;2.2.10&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestFramework&quot; Version=&quot;2.2.10&quot; /&gt; &lt;PackageReference Include=&quot;coverlet.collector&quot; Version=&quot;3.2.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\MockData\\MockData.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AssemblyAttributes.g.csMock.DummyDeclaration.g.csMock.g.csMyClockMock.g.cs  ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#download-example-net--c","content":" tip Download Example project MockMe   ","version":"Next","tagName":"h3"},{"title":"Share MockMe​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#share-mockme","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MockMe  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Tests\" has the following generators:​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#category-tests-has-the-following-generators","content":" 1 mocklis  2 MockMe  3 MSTest  4 Ridge  5 Rocks  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MockMe by connorivy","url":"/RSCG_Examples/v2/docs/MockMe#see-category","content":" Tests ","version":"Next","tagName":"h3"},{"title":"MSTest by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/MSTest","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#info","content":" info Name: MSTest Microsoft.Testing is a set of platform, framework and protocol intended to make it possible to run any test on any target or device. This package provides the C# source generators for MSTest test framework. Author: Microsoft NuGet:https://www.nuget.org/packages/MSTest.SourceGeneration/ You can find more details at https://github.com/microsoft/testfx Source: https://github.com/microsoft/testfx  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#original-readme","content":" note Microsoft Test Framework MSTest, Microsoft Testing Framework, is a unit testing framework for .NET applications. It allows you to write tests, use Test Explorer, create test suites, and apply the red, green, refactor pattern to write code. This is a fully supported, open source and cross-platform test framework with which to write tests targeting .NET Framework, .NET Core, .NET, UWP and WinUI on Windows, Linux, and Mac. How can I contribute?​ We welcome any kind of contribution! Contributing provides guidance on how to best contributeDev Guide explains how to build and testDocumentation contains information about history, context and supported or unsupported features. It also gather the various official documentation pages on learn.microsoft.com about MSTest. How to consume MSTest?​ MSTest is shipped as NuGet packages that can be added to your projects. The following table lists all available packages. Name\tDescription\tStable version\tPreview version\tDogfood versionMSTest\tThis package is a meta package that simplifies referencing all recommended MSTest packages. Azure Artifacts MSTest.TestFramework\tThis package includes the libraries for writing tests with MSTest. To ensure discovery and execution of your tests, install the `MSTest.TestAdapter`` package. Azure Artifacts MSTest.TestAdapter\tThis package includes the adapter logic to discover and run tests. For access to the testing framework, install the MSTest.TestFramework package. Azure Artifacts MSTest.Analyzers\tThis package includes code analyzers and code fixes for MSTest. Azure Artifacts License​ MSTest is licensed under the MIT license. The LICENSE and ThirdPartyNotices in any downloaded archives are authoritative.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#about","content":" note AOP for MSTest  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#example-source-csproj-source-files","content":" CSharp ProjectUnitTest1.cs This is the CSharp Project that references MSTest &lt;!-- file: UnitTestProject1.csproj --&gt; &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;OutputType&gt;exe&lt;/OutputType&gt; &lt;PublishAot&gt;true&lt;/PublishAot&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Experimental MSTest Engine &amp; source generator, close sourced, licensed the same as our extensions with Microsoft Testing Platform Tools license. --&gt; &lt;PackageReference Include=&quot;MSTest.Engine&quot; Version=&quot;1.0.0-alpha.24163.4&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.SourceGeneration&quot; Version=&quot;1.0.0-alpha.24163.4&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.CodeCoverage.MSBuild&quot; Version=&quot;17.10.4&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Testing.Extensions.CodeCoverage&quot; Version=&quot;17.10.4&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Testing.Extensions.TrxReport&quot; Version=&quot;1.0.2&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Testing.Platform.MSBuild&quot; Version=&quot;1.0.2&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestFramework&quot; Version=&quot;3.2.2&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.Analyzers&quot; Version=&quot;3.2.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\MyImportantClass\\MyImportantClass.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;Using Include=&quot;Microsoft.VisualStudio.TestTools.UnitTesting&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DemoTest.UnitTest1.g.csSourceGeneratedTestingPlatformBuilderHook.g.csSourceGeneratedTestNodesBuilder.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by Microsoft Testing Framework Generator. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ namespace DemoTest { using Threading = global::System.Threading; using ColGen = global::System.Collections.Generic; using CA = global::System.Diagnostics.CodeAnalysis; using Sys = global::System; using Msg = global::Microsoft.Testing.Platform.Extensions.Messages; using MSTF = global::Microsoft.Testing.Framework; [CA::ExcludeFromCodeCoverage] public static class DemoTest_UnitTest1 { public static readonly MSTF::TestNode TestNode = new MSTF::TestNode { StableUid = &quot;DemoTest.DemoTest.UnitTest1&quot;, DisplayName = &quot;UnitTest1&quot;, Properties = new Msg::IProperty[1] { new Msg::TestFileLocationProperty(@&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\MSTest\\src\\DemoTest\\UnitTest1.cs&quot;, new(new(6, -1), new(22, -1))), }, Tests = new MSTF::TestNode[] { new MSTF::InternalUnsafeActionTestNode { StableUid = &quot;DemoTest.DemoTest.UnitTest1.TestMethod1()&quot;, DisplayName = &quot;TestMethod1&quot;, Properties = new Msg::IProperty[2] { new Msg::TestMethodIdentifierProperty( &quot;DemoTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;, &quot;DemoTest&quot;, &quot;UnitTest1&quot;, &quot;TestMethod1&quot;, Sys::Array.Empty&lt;string&gt;(), &quot;System.Void&quot;), new Msg::TestFileLocationProperty(@&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\MSTest\\src\\DemoTest\\UnitTest1.cs&quot;, new(new(9, -1), new(13, -1))), }, Body = static testExecutionContext =&gt; { var instance = new UnitTest1(); try { instance.TestMethod1(); } catch (global::System.Exception ex) { testExecutionContext.ReportException(ex, null); } }, }, new MSTF::InternalUnsafeActionParameterizedTestNode&lt;MSTF::InternalUnsafeTestArgumentsEntry&lt;(int left, int right)&gt;&gt; { StableUid = &quot;DemoTest.DemoTest.UnitTest1.TestMethod2(int, int)&quot;, DisplayName = &quot;TestMethod2&quot;, Properties = new Msg::IProperty[2] { new Msg::TestMethodIdentifierProperty( &quot;DemoTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;, &quot;DemoTest&quot;, &quot;UnitTest1&quot;, &quot;TestMethod2&quot;, new string[2] { &quot;System.Int32&quot;, &quot;System.Int32&quot;, }, &quot;System.Void&quot;), new Msg::TestFileLocationProperty(@&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\MSTest\\src\\DemoTest\\UnitTest1.cs&quot;, new(new(15, -1), new(21, -1))), }, GetArguments = static () =&gt; new MSTF::InternalUnsafeTestArgumentsEntry&lt;(int left, int right)&gt;[] { new MSTF::InternalUnsafeTestArgumentsEntry&lt;(int left, int right)&gt;((1, 2), &quot;left: 1, right: 2&quot;), new MSTF::InternalUnsafeTestArgumentsEntry&lt;(int left, int right)&gt;((100, -97), &quot;left: 100, right: -97&quot;), }, Body = static (testExecutionContext, data) =&gt; { var instance = new UnitTest1(); try { instance.TestMethod2(data.Arguments.left, data.Arguments.right); } catch (global::System.Exception ex) { testExecutionContext.ReportException(ex, null); } }, }, }, }; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#download-example-net--c","content":" tip Download Example project MSTest   ","version":"Next","tagName":"h3"},{"title":"Share MSTest​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#share-mstest","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/MSTest  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Tests\" has the following generators:​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#category-tests-has-the-following-generators","content":" 1 mocklis  2 MockMe  3 MSTest  4 Ridge  5 Rocks  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"MSTest by Microsoft","url":"/RSCG_Examples/v2/docs/MSTest#see-category","content":" Tests ","version":"Next","tagName":"h3"},{"title":"N.SourceGenerators.UnionTypes by Alexey Sosnin","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#info","content":" info Name: N.SourceGenerators.UnionTypes Discriminated union type source generator Author: Alexey Sosnin NuGet:https://www.nuget.org/packages/N.SourceGenerators.UnionTypes/ You can find more details at https://github.com/Ne4to/N.SourceGenerators.UnionTypes Source: https://github.com/Ne4to/N.SourceGenerators.UnionTypes  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#original-readme","content":" note N.SourceGenerators.UnionTypes Discriminated union type source generator Motivation​ C# doesn't support discriminated unions yet. This source generator helps automate writing union types with set of helper methods. Getting Started​ Add package reference to N.SourceGenerators.UnionTypes dotnet add package N.SourceGenerators.UnionTypes Create a partial class or struct that will be used as a union type public partial class FooResult { } Add types you want to use in a discriminated union public record Success(int Value); public record ValidationError(string Message); public record NotFoundError; public partial class FooResult { } Add N.SourceGenerators.UnionTypes.UnionTypeAttribute to a union type. using N.SourceGenerators.UnionTypes; public record Success(int Value); public record ValidationError(string Message); public record NotFoundError; [UnionType(typeof(Success))] [UnionType(typeof(ValidationError))] [UnionType(typeof(NotFoundError))] public partial class FooResult { } Or you can use generic type. public partial class OperationDataResult&lt;[GenericUnionType] TResult, [GenericUnionType] TError&gt; { } // extend generic type union with additional Int32 type [UnionType(typeof(int))] public partial class ExtendedOperationDataResult&lt;[GenericUnionType] TResult, [GenericUnionType] TError&gt; { } Null values are not allowed by default. This behavior can be overriden by AllowNull = true parameter. [UnionType(typeof(int?), AllowNull = true)] [UnionType(typeof(string), AllowNull = true)] public partial class ResultNullable&lt;[GenericUnionType(AllowNull = true)] T&gt; { } Examples​ All examples can be found in examples project Basic​ Implicit conversion public FooResult ImplicitReturn() { // you can return any union type variation without creating FooResult return new NotFoundError(); } Explicit conversion public ValidationError ExplicitCast(FooResult result) { return (ValidationError)result; } Checking value type public void ValueTypeProperty() { FooResult foo = GetFoo(); Type valueType = foo.ValueType; // returns typeof(NotFoundError) static FooResult GetFoo() { return new NotFoundError(); } } TryGet method is used to check if union contains a specific type public void TryGetValue() { FooResult foo = GetFoo(); if (foo.TryGetNotFoundError(out var notFoundError)) { // make something with notFoundError } static FooResult GetFoo() { return new NotFoundError(); } } Alias for each variant is generated based on type name. Use alias parameter to override it. [UnionType(typeof(int))] [UnionType(typeof(string))] // default alias is 'ArrayOfTupleOfIntAndString' but it is overriden by alias parameter [UnionType(typeof(Tuple&lt;int,string&gt;[]), alias: &quot;Items&quot;)] public partial class AliasResult { } Handle all variants​ Match and MatchAsync methods are used to convert union type to another type. These methods force you to handle all possible variations. public IActionResult MatchMethod(FooResult result) { return result.Match&lt;IActionResult&gt;( success =&gt; new OkResult(), validationError =&gt; new BadRequestResult(), notFoundError =&gt; new NotFoundResult() ); } public async Task&lt;IActionResult&gt; MatchAsyncMethod(FooResult result, CancellationToken cancellationToken) { return await result.MatchAsync&lt;IActionResult&gt;( static async (success, ct) =&gt; { await SomeWork(success, ct); return new OkResult(); }, static async (validationError, ct) =&gt; { await SomeWork(validationError, ct); return new BadRequestResult(); }, static async (notFoundError, ct) =&gt; { await SomeWork(notFoundError, ct); return new NotFoundResult(); }, cancellationToken); static Task SomeWork&lt;T&gt;(T value, CancellationToken ct) { return Task.Delay(100, ct); } } Switch and SwitchAsync methods are used to execute some work based on inner type public void SwitchMethod(FooResult result) { result.Switch( success =&gt; SomeWork(success), validationError =&gt; SomeWork(validationError), notFoundError =&gt; SomeWork(notFoundError) ); static void SomeWork&lt;T&gt;(T value) { throw new NotImplementedException(); } } public async Task SwitchAsyncMethod(FooResult result, CancellationToken cancellationToken) { await result.SwitchAsync( static async (success, ct) =&gt; { await SomeWork(success, ct); }, static async (validationError, ct) =&gt; { await SomeWork(validationError, ct); }, static async (notFoundError, ct) =&gt; { await SomeWork(notFoundError, ct); }, cancellationToken); static Task SomeWork&lt;T&gt;(T value, CancellationToken ct) { return Task.Delay(100, ct); } } JSON serialization (EXPERIMENTAL)​ To add JSON support add JsonPolymorphicUnion attribute to union typeadd TypeDiscriminator to each type variant Limitations:​ .NET 7 or neweronly complex type variants Example​ [UnionType(typeof(JsonTestsFooJ), TypeDiscriminator = &quot;Foo&quot;)] [UnionType(typeof(JsonTestsBarJ), TypeDiscriminator = &quot;Bar&quot;)] [JsonPolymorphicUnion] public partial class JsonTestsUnion { } Union to union converter​ When one union type's variants is subset of another union type's variants use one of the following attributes to convert one type to another: UnionConverterTo, UnionConverterFrom, or UnionConverter. [UnionConverterFrom(typeof(DataAccessResult))] // use this attribute public partial class BusinessLogicResult { } [UnionConverterTo(typeof(BusinessLogicResult))] // OR this public partial class DataAccessResult { } [UnionConverter(typeof(DataAccessResult), typeof(BusinessLogicResult))] // OR this public static partial class Converters { } public class Repository { public DataAccessResult UpdateItem() { return new NotFoundError(); } } public class Service { private readonly Repository _repository; public BusinessLogicResult Update() { var isValid = IsValid(); if (!isValid) { return new ValidationError(&quot;the item is not valid&quot;); } var repositoryResult = _repository.UpdateItem(); // implicit conversion DataAccessResult to BusinessLogicResult when `UnionConverterTo` or `UnionConverterFrom` attribute is used return repositoryResult; // OR extension method when UnionConverter attribute is used return repositoryResult.Convert(); } private bool IsValid() =&gt; throw new NotImplementedException(); }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#about","content":" note Generating different union types  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references N.SourceGenerators.UnionTypes &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;N.SourceGenerators.UnionTypes&quot; Version=&quot;0.26.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenericUnionTypeAttribute.g.csJsonPolymorphicUnionAttribute.g.csResultSave.g.csUnionConverterAttribute.g.csUnionConverterFromAttribute.g.csUnionConverterToAttribute.g.csUnionTypeAttribute.g.cs // &lt;auto-generated&gt; // This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes // Feel free to open an issue // &lt;/auto-generated&gt; #nullable enable using System; using System.Runtime.CompilerServices; namespace N.SourceGenerators.UnionTypes { [AttributeUsage(AttributeTargets.GenericParameter, Inherited = false, AllowMultiple = false)] internal sealed class GenericUnionTypeAttribute : Attribute { public string? Alias { get; set; } public bool AllowNull { get; set; } public object? TypeDiscriminator { get; set; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#download-example-net--c","content":" tip Download Example project N.SourceGenerators.UnionTypes   ","version":"Next","tagName":"h3"},{"title":"Share N.SourceGenerators.UnionTypes​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#share-nsourcegeneratorsuniontypes","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"N.SourceGenerators.UnionTypes by Alexey Sosnin","url":"/RSCG_Examples/v2/docs/N.SourceGenerators.UnionTypes#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"NetAutomaticInterface by codecentric AG","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#info","content":" info Name: NetAutomaticInterface Source Generator to create an Interface from a class definition Author: codecentric AG NuGet:https://www.nuget.org/packages/AutomaticInterface/ You can find more details at https://github.com/codecentric/net_automatic_interface Source: https://github.com/codecentric/net_automatic_interface  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#original-readme","content":" note Automatic Interface A C# Source Generator to automatically create Interface from classes. What does it do?​ Not all .NET Interfaces are created equal. Some Interfaces are lovingly handcrafted, e.g. the public interface of your .NET package which is used by your customers. Other interfaces are far from lovingly crafted, they are birthed because you need an interface for testing or for the DI container. They are often implemented only once or twice: The class itself and a mock for testing. They are noise at best and often create lots of friction. Adding a new method / field? You have to edit the interface, too!. Change parameters? Edit the interface. Add documentation? Hopefully you add it to the interface, too! This Source Generator aims to eliminate this cost by generating an interface from the class, without you needing to do anything. This interface will be generated on each subsequent build, eliminating the the friction. Example​ using AutomaticInterfaceAttribute; using System; namespace AutomaticInterfaceExample { /// &lt;summary&gt; /// Class Documentation will be copied /// &lt;/summary&gt; [GenerateAutomaticInterface] // you need to create an Attribute with exactly this name in your solution. You cannot reference Code from the Analyzer. class DemoClass: IDemoClass // You Interface will get the Name I+classname, here IDemoclass. // Generics, including constraints are allowed, too. E.g. MyClass&lt;T&gt; where T: class { /// &lt;summary&gt; /// Property Documentation will be copied /// &lt;/summary&gt; public string Hello { get; set; } // included, get and set are copied to the interface when public public string OnlyGet { get; } // included, get and set are copied to the interface when public /// &lt;summary&gt; /// Method Documentation will be copied /// &lt;/summary&gt; public string AMethod(string x, string y) // included { return BMethod(x,y); } private string BMethod(string x, string y) // ignored because not public { return x + y; } public string CMethod&lt;T, T1, T2, T3, T4&gt;(string? x, string y) // included where T : class where T1 : struct where T3 : DemoClass where T4 : IDemoClass { return &quot;Ok&quot;; } public static string StaticProperty =&gt; &quot;abc&quot;; // static property, ignored public static string StaticMethod() // static method, ignored { return &quot;static&quot; + DateTime.Now; } /// &lt;summary&gt; /// event Documentation will be copied /// &lt;/summary&gt; public event EventHandler ShapeChanged; // included private event EventHandler ShapeChanged2; // ignored because not public private readonly int[] arr = new int[100]; public int this[int index] // currently ignored { get =&gt; arr[index]; set =&gt; arr[index] = value; } } } This will create this interface: #nullable enable using System.CodeDom.Compiler; using AutomaticInterfaceAttribute; using System; /// &lt;summary&gt; /// Result of the generator /// &lt;/summary&gt; namespace AutomaticInterfaceExample { /// &lt;summary&gt; /// Bla bla /// &lt;/summary&gt; [GeneratedCode(&quot;AutomaticInterface&quot;, &quot;&quot;)] public partial interface IDemoClass { /// &lt;summary&gt; /// Property Documentation will be copied /// &lt;/summary&gt; string Hello { get; set; } string OnlyGet { get; } /// &lt;summary&gt; /// Method Documentation will be copied /// &lt;/summary&gt; string AMethod(string x, string y); string CMethod&lt;T, T1, T2, T3, T4&gt;(string? x, string y) where T : class where T1 : struct where T3 : DemoClass where T4 : IDemoClass; /// &lt;summary&gt; /// event Documentation will be copied /// &lt;/summary&gt; event System.EventHandler ShapeChanged; } } #nullable restore How to use it?​ Install the nuget: dotnet add package AutomaticInterfaceCreate an Attribute with the Name [GenerateAutomaticInterface]. You can just copy the minimal code from this Repo (see the AutomaticInterfaceAttribute project). It's the easiest way to get that attribute because you cannot reference any code from the analyzer package.Let your class implement the interface, e.g. SomeClass: ISomeClassBuild Solution, the Interface should now be available. Any errors? Ping me at: christiian.sauer@codecentric.de Troubleshooting​ How can I see the Source code?​ Newer Visual Studio Versions (2019+) can see the source code directly: Alternatively, the Source Generator generates a log file - look out for a &quot;logs&quot; folder somewhere in bin/debug/... OR your temp folder /logs. The exact location is also reported on Diagnosticlevel Info. I have an error​ Please create an issue and a minimally reproducible test for the problem. PRs are welcome! Please make sure that you run CSharpier on the code for formatting. Contributors​ Thanks to dnf for creating some great extensions. I use them partially in this Generator. Unfortunately due to problems referencing packages I cannot depend on his packages directly.skarllot for PRsFrederik91 for PRsdefinitelyokay for PRs Run tests​ Should be simply a build and run Tests Changelog​ 2.1.1​ Fix bug where multiple automatic interfaces caused issuesBetter support for nullable like Task&lt;string?&gt;, previously only top level generic where considered 2.0.0​ Major rework to Incremental Source generatorFixed some outstanding bugsRemoved logging, b/c not really usedIncreased coverage 1.6.1​ Minor bug fixes 1.5.0​ Add support nullable context 1.4.0​ Add support for overloaded methods.Add support for optional parameters in method void test(string x = null) should now work.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#about","content":" note GEnerating interface from class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#example-source-csproj-source-files","content":" CSharp ProjectProgram.csData.csPerson.cs This is the CSharp Project that references NetAutomaticInterface &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AutomaticInterface&quot; Version=&quot;2.1.0&quot; OutputItemType=&quot;Analyzer&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Class2Interface.IPerson.cs //-------------------------------------------------------------------------------------------------- // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. // &lt;/auto-generated&gt; //-------------------------------------------------------------------------------------------------- using System.CodeDom.Compiler; namespace Class2Interface { [GeneratedCode(&quot;AutomaticInterface&quot;, &quot;&quot;)] public partial interface IPerson { /// &lt;inheritdoc /&gt; int ID { get; set; } /// &lt;inheritdoc /&gt; string FirstName { get; set; } /// &lt;inheritdoc /&gt; string LastName { get; set; } /// &lt;inheritdoc /&gt; string Name { get; } /// &lt;inheritdoc /&gt; string FullName(); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#download-example-net--c-","content":" tip Download Example project NetAutomaticInterface   ","version":"Next","tagName":"h3"},{"title":"Share NetAutomaticInterface​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#share-netautomaticinterface","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NetAutomaticInterface  ","version":"Next","tagName":"h3"},{"title":"In the same category (Interface) - 11 other generators​","type":1,"pageTitle":"NetAutomaticInterface by codecentric AG","url":"/RSCG_Examples/v2/docs/NetAutomaticInterface#in-the-same-category-interface---11-other-generators","content":" Biwen.AutoClassGen​  CopyCat​  Farskeptic.AutoCompose​  MakeInterface.Generator​  Matryoshki​  Minerals.AutoInterfaces​  ProxyGen​  Roozie.AutoInterface​  RSCG_CompositeProvider​  rscg_Interface_to_null_object​  RSCG_Static​ ","version":"Next","tagName":"h3"},{"title":"NativeObjects by Kevin Gosse","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NativeObjects","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#info","content":" info Name: NativeObjects Source generator for native interop. Generates implementation for interfaces to expose managed objects as COM-like, or call methods on COM-like native objects. Author: Kevin Gosse NuGet:https://www.nuget.org/packages/NativeObjects/ You can find more details at https://github.com/kevingosse/NativeObjects Source: https://github.com/kevingosse/NativeObjects  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#original-readme","content":" note NativeObjects Source-generator for easier native interop. It provides two core features: Ability to consume COM-like native objectsAbility to expose managed objects as COM-like native objects Usage Remember to enable unsafe on your project when referencing this source-generator &lt;PropertyGroup&gt; &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt; &lt;/PropertyGroup&gt; Declare the interface you want to consume or expose, and decorate it with the [NativeObject] attribute: [NativeObject] public interface ICalculator { int Add(int value1, int value2); } The order of the methods is used to build the vtable. Therefore you MUST declare the methods in your interface in the same order as the native object. From there, you can consume a native object that implements this interface: public int DoSomething(IntPtr nativePtr) { var calc = NativeObjects.ICalculator.Wrap(nativePtr); return calc.Add(2, 3); } Or implement that interface then expose the managed object to native code: public class MyCalculator : ICalculator { public int Add(int value1, int value2) { return value1 + value2; } } var calculator = new MyCalculator(); using (var nativeCalculator = NativeObjects.ICalculator.Wrap(calculator)) { // nativeCalculator can be implicitly cast to IntPtr // This is equivalent to calling nativeCalculator.Object SomeNativeCode((IntPtr)nativeCalculator); } The generated objects have the same visibility as the interface. For instance, if the interface is declared as internal, the generated objects will be internal. Namespace By default, the interop types are emitted in the NativeObjects namespace. You can change it by adding an attribute at the assembly level: [assembly: NativeObjectsNamespace(&quot;MyNamespace&quot;)]   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#about","content":" note Object to IntPtr and back  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references NativeObjects &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;NativeObjects&quot; Version=&quot;1.3.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  NativeObjectAttribute.g.csNativeObjectsDemo.IPerson.g.cs using System; [AttributeUsage(AttributeTargets.Interface, Inherited = false, AllowMultiple = false)] internal class NativeObjectAttribute : Attribute { } [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)] internal class NativeObjectsNamespaceAttribute : Attribute { public NativeObjectsNamespaceAttribute(string name) { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#download-example-net--c","content":" tip Download Example project NativeObjects   ","version":"Next","tagName":"h3"},{"title":"Share NativeObjects​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#share-nativeobjects","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NativeObjects  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"WinAPI\" has the following generators:​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#category-winapi-has-the-following-generators","content":" 1 Com  2 Microsoft.Windows.CsWin32  3 NativeObjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"NativeObjects by Kevin Gosse","url":"/RSCG_Examples/v2/docs/NativeObjects#see-category","content":" WinAPI ","version":"Next","tagName":"h3"},{"title":"NoExamples","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NoExamples","content":"","keywords":"","version":"Next"},{"title":"sidebar_position: 60 title: RSCG Without Examples​","type":1,"pageTitle":"NoExamples","url":"/RSCG_Examples/v2/docs/NoExamples#sidebar_position-60title-rscg-without-examples","content":" ","version":"Next","tagName":"h2"},{"title":"Other RSCG without examples​","type":1,"pageTitle":"NoExamples","url":"/RSCG_Examples/v2/docs/NoExamples#other-rscg-without-examples","content":" 1)AdaskoTheBeAsT.Identity.Dapper https://github.com/AdaskoTheBeAsT/AdaskoTheBeAsT.Identity.Dapper  Why I have not put example: later  2)AjaxService.Gen https://github.com/MrAliSalehi/AjaxService  Why I have not put example: old ISourceGenerator  3)AnyOf https://github.com/StefH/AnyOf  Why I have not put example: old ISourceGenerator  4)ApiClientGenerator https://github.com/surgicalcoder/ApiClientGenerator  Why I have not put example: seems complicated with output file  5)ArchomedaDisposeGenerator https://github.com/Archomeda/DisposeGenerator  Why I have not put example: old ISourceGenerator  6)AttributeFactoryGenerator https://github.com/PaulBraetz/AttributeFactoryGenerator  Why I have not put example: later  7)AutoDeconstructable https://github.com/nemesissoft/Nemesis.TextParsers/tree/master/Nemesis.TextParsers.CodeGen/Deconstructable  Why I have not put example: old ISourceGenerator  8)AutoEmbed https://github.com/chsienki/AutoEmbed  Why I have not put example: old ISourceGenerator  9)AutoFilterer.Generators https://github.com/enisn/AutoFilterer  Why I have not put example: old ISourceGenerator  10)AutoInterface https://github.com/beakona/AutoInterface  Why I have not put example: old ISourceGenerator  11)Avalonia.NameGenerator https://github.com/AvaloniaUI/Avalonia.NameGenerator  Why I have not put example: old ISourceGenerator  12)avatar https://github.com/kzu/avatar  Why I have not put example: archived  13)Azura https://github.com/cyriaca/Azura  Why I have not put example: System.Text.Json has already not refelection serializer  14)BetterEnums https://github.com/Ceiridge/BetterEnums  Why I have not put example: old ISourceGenerator  15)BigMachines https://github.com/archi-Doc/BigMachines  Why I have not put example: later  16)BlazorOcticons https://github.com/BlazorOcticons/BlazorOcticons  Why I have not put example: old ISourceGenerator  17)boilerplatezero https://github.com/IGood/boilerplatezero  Why I have not put example: not yet ready to test something that depends on WPF  18)Buildenator https://github.com/progala2/Buildenator  Why I have not put example: old ISourceGenerator  19)Cloneable https://github.com/mostmand/Cloneable  Why I have not put example: old ISourceGenerator  20)ComputeSharp https://github.com/Sergio0694/ComputeSharp  Why I have not put example: not having nuget, but having IIncrementalGenerator  21)ControllerGenerator https://github.com/cloud0259/ControllerGenerator  Why I have not put example: issue opened  22)CoreWCF https://github.com/CoreWCF/CoreWCF  Why I have not put example: not having nuget, but having IIncrementalGenerator  23)CSV-Parser-Generator https://github.com/LokiMidgard/CSV-Parser-Generator  Why I have not put example: old ISourceGenerator  24)CsvMole https://github.com/pippinmole/CsvMole.NET  Why I have not put example: not having nuget, but having IIncrementalGenerator  25)Data https://github.com/dasMulli/data-builder-generator  Why I have not put example: old ISourceGenerator  26)decorator-generator https://github.com/CodingFlow/decorator-generator  Why I have not put example: old ISourceGenerator  27)DependencyManagement https://github.com/essy-ecosystem/dependency-management  Why I have not put example: DI container. To be analyzed  28)DependencyPropertyGenerator https://github.com/HavenDV/DependencyPropertyGenerator  Why I have not put example: example with MAUI  29)DevExpress.Mvvm.CodeGenerators https://github.com/DevExpress/DevExpress.Mvvm.CodeGenerators  Why I have not put example: old ISourceGenerator  30)Dexie https://github.com/b-straub/DexieNET  Why I have not put example: later  31)DI https://github.com/Frederik91/DependencyInjection.SourceGenerator  Why I have not put example: old ISourceGenerator  32)docopt.net https://github.com/docopt/docopt.net  Why I have not put example: old ISourceGenerator  33)dot-env-generator https://github.com/betwixt-labs/dot-env-generator  Why I have not put example: old ISourceGenerator  34)dotVariant https://github.com/mknejp/dotvariant  Why I have not put example: old ISourceGenerator  35)DUnion https://github.com/danny-may/DUnion/  Why I have not put example: issue opened  36)Durian https://github.com/piotrstenke/Durian  Why I have not put example: old ISourceGenerator  37)EF https://www.nuget.org/packages/Visium.Anima.EntityFrameworkCore.SourceGeneration  Why I have not put example: no readme  38)Enum.Source.Generator https://github.com/EngRajabi/Enum.Source.Generator  Why I have not put example: old ISourceGenerator  39)Enum.Source.Generator https://github.com/EngRajabi/Enum.Source.Generator  Why I have not put example: old ISourceGenerator  40)EnumerationClassGenerator https://github.com/HamedFathi/EnumerationClassGenerator  Why I have not put example: old ISourceGenerator  41)EnumFastToStringDotNet https://github.com/Spinnernicholas/EnumFastToStringDotNet  Why I have not put example: old ISourceGenerator  42)EnumUtilitiesGenerator https://github.com/leoformaggi/enum-utilities-generator  Why I have not put example: old ISourceGenerator  43)EnvVariablesGenerator https://github.com/KAW0/EnvVariablesGenerator  Why I have not put example: old ISourceGenerator  44)epj.RouteGenerator https://github.com/ewerspej/epj.RouteGenerator  Why I have not put example: later  45)ESG https://github.com/Michmcb/EnumSourceGenerator  Why I have not put example: old ISourceGenerator  46)Fairy https://github.com/hermanussen/Fairy  Why I have not put example: old ISourceGenerator  47)FastAutoMapper https://github.com/myblindy/FastAutoMapper  Why I have not put example: old ISourceGenerator  48)FastEndpoints https://github.com/FastEndpoints/FastEndpoints  Why I have not put example: later  49)FastEnumGenerator https://github.com/musictopia2/FastEnumGenerator  Why I have not put example: no readme  50)Flattening https://github.com/Kros-sk/Kros.Generators.Flattening  Why I have not put example: old ISourceGenerator  51)FluentAssertions.Eventual https://github.com/mazharenko/FluentAssertions.Eventual  Why I have not put example: later  52)FluentBuilder https://github.com/StefH/FluentBuilder  Why I have not put example: old ISourceGenerator  53)fonderie https://github.com/jeromelaban/fonderie  Why I have not put example: old ISourceGenerator  54)GenerateHelperLibraries https://github.com/musictopia2/GenerateHelperLibraries  Why I have not put example: old ISourceGenerator  55)Generators.Blazor https://github.com/excubo-ag/Generators.Blazor  Why I have not put example: old ISourceGenerator  56)Generators.Grouping https://github.com/excubo-ag/Generators.Grouping  Why I have not put example: old ISourceGenerator  57)GitBuildInfo.SourceGenerator https://github.com/Elskom/GitBuildInfo.SourceGenerator  Why I have not put example: old ISourceGenerator  58)GraphQL.Tools https://github.com/MoienTajik/GraphQL.Tools  Why I have not put example: old ISourceGenerator  59)GRPC-Mock-Server https://github.com/cezarypiatek/GRPC-Mock-Server  Why I have not put example: later  60)GrpcInjection https://github.com/juniorporfirio/grpcinjection  Why I have not put example: old ISourceGenerator  61)H.NSwag.Generator https://github.com/HavenDV/H.NSwag.Generator  Why I have not put example: later  62)Hexa.Protobuf https://github.com/HexaEngine/Hexa.Protobuf  Why I have not put example: issue opened  63)Hsu.Sg.Proxy https://github.com/hsu-net/source-generators/  Why I have not put example: later  64)HttpClientCodeGenerator https://github.com/Jalalx/HttpClientCodeGenerator  Why I have not put example: old ISourceGenerator  65)https://github.com/Agentew04/CliToolkit https://github.com/Agentew04/CliToolkit  Why I have not put example: issue opened  66)https://github.com/AlexNav73/CoreCraft https://github.com/AlexNav73/CoreCraft  Why I have not put example: later  67)https://github.com/bjornhellander/TestInheritanceGenerator https://github.com/bjornhellander/TestInheritanceGenerator  Why I have not put example: later  68)https://github.com/borisdj/CsCodeGenerator https://github.com/borisdj/CsCodeGenerator  Why I have not put example: later  69)https://github.com/CharlieDigital/SKPromptGenerator https://github.com/CharlieDigital/SKPromptGenerator  Why I have not put example: later  70)https://github.com/chickensoft-games/LogicBlocks https://github.com/chickensoft-games/LogicBlocks  Why I have not put example: later  71)https://github.com/dgmjr-io/InterfaceGenerator https://github.com/dgmjr-io/InterfaceGenerator  Why I have not put example: issue opened  72)https://github.com/eddievelasquez/IntercodeToolbox https://github.com/eddievelasquez/IntercodeToolbox  Why I have not put example: later  73)https://github.com/GaoNian-NET/MapperToolkit https://github.com/GaoNian-NET/MapperToolkit  Why I have not put example: issue opened  74)https://github.com/inputfalken/Dynatello https://github.com/inputfalken/Dynatello  Why I have not put example: later  75)https://github.com/ionite34/MinimalApiMapper https://github.com/ionite34/MinimalApiMapper  Why I have not put example: later  76)https://github.com/JasonBock/CslaGeneratorSerialization https://github.com/JasonBock/CslaGeneratorSerialization  Why I have not put example: later  77)https://github.com/JinShil/JinShil.MixinSourceGenerator https://github.com/JinShil/JinShil.MixinSourceGenerator  Why I have not put example: later  78)https://github.com/kevingosse/NativeObjects https://github.com/kevingosse/NativeObjects  Why I have not put example: later  79)https://github.com/MeltyPlayer/Schema https://github.com/MeltyPlayer/Schema  Why I have not put example: later  80)https://github.com/nevsnirG/MinimalRichDomain https://github.com/nevsnirG/MinimalRichDomain  Why I have not put example: old ISourceGenerator  81)https://github.com/OrgEleCho/EleCho.Internationalization https://github.com/OrgEleCho/EleCho.Internationalization  Why I have not put example: issue opened  82)https://github.com/phil-scott-78/Icons/ https://github.com/phil-scott-78/Icons/  Why I have not put example: later  83)https://github.com/ramhari-dev/PropGenAoT https://github.com/ramhari-dev/PropGenAoT  Why I have not put example: later  84)https://github.com/SG4MVC/SG4MVC https://github.com/SG4MVC/SG4MVC  Why I have not put example: later  85)https://github.com/stbychkov/AutoLoggerMessage https://github.com/stbychkov/AutoLoggerMessage  Why I have not put example: later  86)https://github.com/Stepami/visitor-net https://github.com/Stepami/visitor-net  Why I have not put example: later  87)https://github.com/svee4/RequiredStaticMembers https://github.com/svee4/RequiredStaticMembers  Why I have not put example: issue opened  88)https://github.com/SzymonHalucha/Minerals.AutoCommands https://github.com/SzymonHalucha/Minerals.AutoCommands  Why I have not put example: later  89)https://github.com/Teleopti/Saspect https://github.com/Teleopti/Saspect  Why I have not put example: later  90)https://github.com/TheFo2sh/AsyncFlow https://github.com/TheFo2sh/AsyncFlow  Why I have not put example: later  91)https://github.com/wieslawsoltes/ReactiveGenerator https://github.com/wieslawsoltes/ReactiveGenerator  Why I have not put example: later  92)HubClientProxyGenerator https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Client.SourceGenerator  Why I have not put example: not having nuget, but having IIncrementalGenerator  93)Imp.NET https://github.com/DouglasDwyer/Imp.NET  Why I have not put example: old ISourceGenerator  94)Intellenum https://github.com/SteveDunn/Intellenum  Why I have not put example: not understand how to use  95)InterfaceGenerator https://github.com/daver32/InterfaceGenerator  Why I have not put example: old ISourceGenerator  96)IoTHubClientGenerator https://github.com/alonf/IoTHubClientGenerator  Why I have not put example: old ISourceGenerator  97)JsonByExampleGenerator https://github.com/hermanussen/JsonByExampleGenerator  Why I have not put example: old ISourceGenerator  98)JsonDeserializeResourceSourceGenerator https://github.com/musictopia2/JsonDeserializeResourceSourceGenerator  Why I have not put example: no readme  99)JsonMergePatch https://github.com/ladeak/JsonMergePatch  Why I have not put example: old ISourceGenerator  100)JsonSerializerContextGenerator https://github.com/musictopia2/JsonSerializerContextGenerator  Why I have not put example: no readme  101)JsonSourceGenerator https://github.com/Pilchie/JsonSourceGenerator  Why I have not put example: not having nuget, but having IIncrementalGenerator  102)JsonSrcGen https://github.com/trampster/JsonSrcGen  Why I have not put example: old ISourceGenerator  103)kli.Localize https://github.com/kl1mm/localize  Why I have not put example: old ISourceGenerator  104)laker https://github.com/Lakerfield/Lakerfield.Rpc  Why I have not put example: later  105)lambdajection https://github.com/cythral/lambdajection  Why I have not put example: old ISourceGenerator  106)Lazysh https://github.com/B1Z0N/LazyshGen  Why I have not put example: old ISourceGenerator  107)LoggingDecoratorGenerator https://github.com/DavidFineboym/LoggingDecoratorGenerator  Why I have not put example: Microsoft have done same feature  108)lucide-blazor https://github.com/brecht-vde/lucide-blazor/  Why I have not put example: issue opened  109)ManagedDotnetProfiler https://github.com/kevingosse/ManagedDotnetProfiler  Why I have not put example: later  110)MapDataReader https://github.com/jitbit/MapDataReader  Why I have not put example: old ISourceGenerator  111)MappingCloningExtensions https://github.com/musictopia2/MappingCloningExtensions  Why I have not put example: no readme  112)Maui.BindableProperty.Generator https://github.com/rrmanzano/maui-bindableproperty-generator  Why I have not put example: later  113)MediatR https://github.com/Burgyn/MMLib.MediatR.Generators  Why I have not put example: old ISourceGenerator  114)MemberAccessGenerator https://github.com/ufcpp/MemberAccessGenerator  Why I have not put example: old ISourceGenerator  115)MemoizeSourceGenerator https://github.com/Zoxive/MemoizeSourceGenerator  Why I have not put example: old ISourceGenerator  116)Minerals.AutoCQRS https://github.com/SzymonHalucha/Minerals.AutoCQRS  Why I have not put example: later  117)Minerals.AutoDomain https://github.com/SzymonHalucha/Minerals.AutoDomain  Why I have not put example: later  118)MiniRazor https://github.com/Tyrrrz/MiniRazor/  Why I have not put example: archived  119)MockableStaticGenerator https://github.com/HamedFathi/MockableStaticGenerator  Why I have not put example: old ISourceGenerator  120)MockGen https://github.com/thomas-girotto/MockGen  Why I have not put example: old ISourceGenerator  121)MockSourceGenerator https://github.com/hermanussen/MockSourceGenerator  Why I have not put example: old ISourceGenerator  122)MrMeeseeks.DIE https://github.com/Yeah69/MrMeeseeks.DIE  Why I have not put example: old ISourceGenerator  123)MrMeeseeks.ResXToViewModelGenerator https://github.com/Yeah69/MrMeeseeks.ResXToViewModelGenerator  Why I have not put example: old ISourceGenerator  124)MrMeeseeks.StaticDelegateGenerator https://github.com/Yeah69/MrMeeseeks.StaticDelegateGenerator  Why I have not put example: old ISourceGenerator  125)MrMeeseeks.Visitor https://github.com/Yeah69/MrMeeseeks.Visitor  Why I have not put example: old ISourceGenerator  126)MvvmGen https://github.com/thomasclaudiushuber/mvvmgen  Why I have not put example: later  127)Neon.Roslyn https://www.nuget.org/packages/Neon.Roslyn  Why I have not put example: old ISourceGenerator  128)net_automatic_interface https://github.com/codecentric/net_automatic_interface  Why I have not put example: old ISourceGenerator  129)NSourceGenerators https://github.com/NeVeSpl/NSourceGenerators/  Why I have not put example: old ISourceGenerator  130)observable https://github.com/notanaverageman/Bindables  Why I have not put example: later  131)Overloader https://github.com/emptycoder/Overloader  Why I have not put example: later  132)Pipelines https://github.com/DumplingsDevs/Pipelines/  Why I have not put example: old ISourceGenerator  133)Plastic https://github.com/sang-hyeon/Plastic  Why I have not put example: old ISourceGenerator  134)PolySharp https://github.com/Sergio0694/PolySharp  Why I have not put example: later  135)PrimaryConstructor https://github.com/chaowlert/PrimaryConstructor  Why I have not put example: old ISourceGenerator  136)PrimitiveStaticDataGenerator https://github.com/iiweis/PrimitiveStaticDataGenerator  Why I have not put example: old ISourceGenerator  137)PrintMembersGenerator https://github.com/Youssef1313/PrintMembersGenerator  Why I have not put example: old ISourceGenerator  138)ProxyInterfaceGenerator https://github.com/StefH/ProxyInterfaceSourceGenerator  Why I have not put example: old ISourceGenerator  139)PureHDF https://github.com/Apollo3zehn/PureHDF  Why I have not put example: old ISourceGenerator  140)RazorGen https://github.com/dartk/RazorGen  Why I have not put example: later  141)RazorPageRouteGenerator https://github.com/surgicalcoder/RazorPageRouteGenerator  Why I have not put example: old ISourceGenerator  142)ReForge.Union https://github.com/nalcorso/ReForge.Union  Why I have not put example: not having nuget, but having IIncrementalGenerator  143)RoslynWeave https://github.com/Jishun/RoslynWeave  Why I have not put example: old ISourceGenerator  144)ScenarioTests https://github.com/koenbeuk/ScenarioTests  Why I have not put example: old ISourceGenerator  145)schema https://github.com/MeltyPlayer/Schema  Why I have not put example: later  146)SerdeDn https://github.com/serdedotnet/serde  Why I have not put example: serializer. Done by MSFT with System.Text.Json  147)SmallSharp https://github.com/devlooped/SmallSharp  Why I have not put example: old ISourceGenerator  148)SmartAnnotations https://github.com/fiseni/SmartAnnotations  Why I have not put example: old ISourceGenerator  149)SogePoco https://github.com/d-p-y/SogePoco  Why I have not put example: later  150)SourceApi https://github.com/alekshura/SourceApi  Why I have not put example: old ISourceGenerator  151)SourceConfig https://github.com/alekshura/SourceConfig  Why I have not put example: old ISourceGenerator  152)SourceCrafter.HttpServiceClientGenerator https://github.com/pedro-gilmora/SourceCrafter.HttpServiceClientGenerator/  Why I have not put example: later  153)SourceGeneratorQuery https://github.com/roeibajayo/SourceGeneratorQuery  Why I have not put example: old ISourceGenerator  154)SourceInject https://github.com/giggio/sourceinject/  Why I have not put example: old ISourceGenerator  155)SourceMapper https://github.com/alekshura/SourceMapper  Why I have not put example: old ISourceGenerator  156)SourceMapper https://github.com/paiden/SourceMapper/  Why I have not put example: old ISourceGenerator  157)SqlMarshal https://github.com/kant2002/SqlMarshal  Why I have not put example: old ISourceGenerator  158)ST.NSwag.ServerSourceGenerator https://github.com/s-tarasov/ST.NSwag.ServerSourceGenerator  Why I have not put example: later  159)StackXML https://github.com/ZingBallyhoo/StackXML  Why I have not put example: old ISourceGenerator  160)StaticProxyGenerator https://github.com/robertturner/StaticProxyGenerator  Why I have not put example: old ISourceGenerator  161)StrongInject https://github.com/YairHalberstadt/stronginject/  Why I have not put example: later  162)StronglyTypedEmbeddedResources https://github.com/surgicalcoder/StronglyTypedEmbeddedResources  Why I have not put example: old ISourceGenerator  163)StructPacker https://github.com/RudolfKurka/StructPacker  Why I have not put example: old ISourceGenerator  164)Svg https://github.com/wieslawsoltes/Svg.Skia  Why I have not put example: old ISourceGenerator  165)tecli https://github.com/tyevco/TeCLI  Why I have not put example: old ISourceGenerator  166)TeuJson https://github.com/Terria-K/TeuJson  Why I have not put example: json a class, was done in System.Text.Json  167)Thunderboltloc https://github.com/AlyElhaddad/ThunderboltIoc  Why I have not put example: old ISourceGenerator  168)Tinyhand https://github.com/archi-Doc/Tinyhand  Why I have not put example: tried, need documentation  169)ToString https://github.com/Burgyn/MMLib.ToString  Why I have not put example: old ISourceGenerator  170)Transplator https://github.com/atifaziz/Transplator  Why I have not put example: old ISourceGenerator  171)TupleOverloadGenerator https://github.com/ProphetLamb/TupleOverloadGenerator  Why I have not put example: later  172)TxtToListGenerator https://github.com/musictopia2/TxtToListGenerator  Why I have not put example: no readme  173)TypealizR https://github.com/earloc/TypealizR  Why I have not put example: depends on Microsoft.Extensions.Localization  174)UnitTestBlazor https://github.com/bUnit-dev/bUnit  Why I have not put example: issue opened  175)ValueChangedGenerator https://github.com/ufcpp/ValueChangedGenerator  Why I have not put example: old ISourceGenerator  176)ValueLink https://github.com/archi-Doc/ValueLink  Why I have not put example: later  177)ValueObjectGenerator https://github.com/RyotaMurohoshi/ValueObjectGenerator  Why I have not put example: old ISourceGenerator  178)VisitorPatternGenerator https://github.com/hikarin522/VisitorPatternGenerator/  Why I have not put example: issue opened  179)Visor https://github.com/Tinkoff/Visor  Why I have not put example: later  180)WrapperValueObject https://github.com/martinothamar/WrapperValueObject  Why I have not put example: not maintained as in readme  181)Xtz.StronglyTyped https://github.com/dev-experience/Xtz.StronglyTyped  Why I have not put example: old ISourceGenerator ","version":"Next","tagName":"h2"},{"title":"NextGenMapper by Anton Ryabchikov","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NextGenMapper","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#info","content":" info Name: NextGenMapper Package Description Author: Anton Ryabchikov NuGet:https://www.nuget.org/packages/NextGenMapper/ You can find more details at https://github.com/DedAnton/NextGenMapper Source: https://github.com/DedAnton/NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#original-readme","content":" note Extremely fast and lightweight minimalistic object mapper generated on the fly https://user-images.githubusercontent.com/36799941/191618500-31f7e179-3510-49dc-ad13-18e07de8309b.mov Key features Generation of mapping methods on the flyReflection and expression trees are not usedPerformance like a hand-written mapperMinimum memory allocationDoes not increase application startup timeNo dependencies in the final assemblyNo third party tools and IDE dependenciesStatic analysis supportCode navigation supportEasy to debugNo attributes and fluid API NextGenMapper is a tool that just solves a problem and tries not to create new ones Usage Add using NextGenMapper and call the Map extension method on the object you want to map using NextGenMapper; var source = new Source(&quot;Anton&quot;, 25); var destination = source.Map&lt;Destination&gt;(); Console.WriteLine(destination); record Source(string Name, int Age); record Destination(string Name, int Age); To customize the mapping of certain properties, call the MapWith method and pass the value of the overridden property as an argument using NextGenMapper; var source = new Source(&quot;Anton&quot;, &quot;Ryabchikov&quot;, 25); var destination = source.MapWith&lt;Destination&gt;(name: source.FirstName + ' ' + source.LastName); Console.WriteLine(destination); record Source(string FirstName, string LastName, int Age); record Destination(string Name, int Age); In order for NextGenMapper to use your mapping when mapping other objects, you need to create a partial class Mapper in the NextGenMapper namespace and add the Map method with your implementation to it namespace NextGenMapper; internal static partial class Mapper { internal static Destination Map&lt;To&gt;(this Source source) =&gt; source.MapWith&lt;Destination&gt;(name: source.FirstName + ' ' + source.LastName); } The following collection types are currently supported: List&lt;T&gt;, Array&lt;T&gt;, ICollection&lt;T&gt;, IEnumerable&lt;T&gt;, IList&lt;T&gt;, IReadOnlyCollection&lt;T&gt;, IReadOnlyList&lt;T&gt;, ImmutableArray&lt;T&gt;, ImmutableList&lt;T&gt;, IImmutableList&lt;T&gt; var sourceCollection = new List&lt;Source&gt; { new(&quot;Anton&quot;, 25) }; var destination = sourceCollection.Map&lt;List&lt;Destination&gt;&gt;(); Enums can also be mapped var source = Source.EnumValue; var destination = source.Map&lt;Destination&gt;(); Projection for IQueryable supported _dbContext.Users.Project&lt;UserDestination&gt;().ToList(); Note: Due to the use of new technology, some versions of Visual Studio can sometimes experience problems with syntax highlighting if IntelliCode says an error, but the solution was build without errors is to simply restart Visual Studio Installation​ Install from the package manager console: PM&gt; Install-Package NextGenMapper -prerelease Or from the .NET CLI as: dotnet add package NextGenMapper --prerelease How it works? NextGenMapper uses the new C# language feature - Source Code Generators. You can describe the work of the Source Code Generator in the following steps: Code compilesThe source code generator analyzes the assemblyGenerates new code based on analysisCompiles the new code and adds it to the assembly This is how the method that is called initially looks like: internal static To Map&lt;To&gt;(this object source) =&gt; throw new InvalidOperationException($&quot;&quot;Error when mapping {source.GetType()} to {typeof(To)}, mapping function was not found. Create custom mapping function.&quot;&quot;); When we call it, the generator analyzes this call and generates a mapping function: internal static Destination Map&lt;To&gt;(this Source source) =&gt; new Destination(source.Name, source.Age); The trick is that the method signatures are identical, but the generated method has more specific parameters and fits better, so it is called (this behavior is described in the specification) Status At the moment, all the main functionality has been added. But the work isn't over yet. All tasks and their progress can be viewed on the project board  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#about","content":" note Automating generating mapping between classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDTO.cs This is the CSharp Project that references NextGenMapper &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;NextGenMapper&quot; Version=&quot;0.1.0-alpha.13&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MapperExtensions.g.csMapper_ConfiguredMaps.g.csMapper_ConfiguredMaps_MockMethods.g.csStartMapper.g.cs using System; using System.Collections.Generic; using System.Runtime.CompilerServices; using System.Runtime.InteropServices; namespace NextGenMapper.Extensions { internal static class MapperExtensions { /// &lt;summary&gt; /// Do not use this method, for auto-generated mapper only! /// &lt;/summary&gt; [MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool TryGetSpan&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, out ReadOnlySpan&lt;TSource&gt; span) { bool result = true; if (source.GetType() == typeof(TSource[])) { span = Unsafe.As&lt;TSource[]&gt;(source); } #if NET5_0_OR_GREATER else if (source.GetType() == typeof(List&lt;TSource&gt;)) { span = CollectionsMarshal.AsSpan(Unsafe.As&lt;List&lt;TSource&gt;&gt;(source)); } #endif else { span = default; result = false; } return result; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#download-example-net--c","content":" tip Download Example project NextGenMapper   ","version":"Next","tagName":"h3"},{"title":"Share NextGenMapper​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#share-nextgenmapper","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NextGenMapper  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Mapper\" has the following generators:​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#category-mapper-has-the-following-generators","content":" 1 AutoDTO  2 AutoGen  3 DynamicsMapper  4 LightweightObjectMapper  5 MagicMap  6 mapperly  7 MapTo  8 NextGenMapper  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"NextGenMapper by Anton Ryabchikov","url":"/RSCG_Examples/v2/docs/NextGenMapper#see-category","content":" Mapper ","version":"Next","tagName":"h3"},{"title":"NotNot.AppSettings by jasonswearingen","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings","content":"","keywords":"","version":"Next"},{"title":"Details​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#info","content":" info Name: NotNot.AppSettings Auto-generate strongly typed C# settings objects from your AppSettings.json. Author: jasonswearingen NuGet:https://www.nuget.org/packages/NotNot.AppSettings/ You can find more details at https://github.com/jasonswearingen/NotNot.AppSettings/ Source: https://github.com/jasonswearingen/NotNot.AppSettings/tree/main  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#original-readme","content":" note  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#about","content":" note Application Settings to strongly typed classes. Generate also from AppSettings development  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references NotNot.AppSettings &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.1&quot; /&gt; &lt;PackageReference Include=&quot;NotNot.AppSettings&quot; Version=&quot;1.0.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Update=&quot;appsettings.json&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TestAppSettings.AppSettingsGen.AppSettings.csTestAppSettings.AppSettingsGen._AppSettings.Logging.csTestAppSettings.AppSettingsGen._AppSettings._Logging.LogLevel.cs_BinderShims.cs /** * This file is generated by the NotNot.AppSettings nuget package. * Do not edit this file directly, instead edit the appsettings.json files and rebuild the project. **/ using System; using System.Runtime.CompilerServices; namespace TestAppSettings.AppSettingsGen; [CompilerGenerated] public partial class AppSettings { public TestAppSettings.AppSettingsGen._AppSettings.Logging? Logging{get; set;} public string? AllowedHosts{get; set;} public string? AppName{get; set;} }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#download-example-net--c-","content":" tip Download Example project NotNot.AppSettings   ","version":"Next","tagName":"h3"},{"title":"Share NotNot.AppSettings​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#share-notnotappsettings","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NotNot.AppSettings  ","version":"Next","tagName":"h3"},{"title":"In the same category (FilesToCode)​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#in-the-same-category-filestocode","content":" ","version":"Next","tagName":"h2"},{"title":"Chorn.EmbeddedResourceAccessGenerator​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#chornembeddedresourceaccessgenerator","content":" ","version":"Next","tagName":"h3"},{"title":"EmbedResourceCSharp​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#embedresourcecsharp","content":" ","version":"Next","tagName":"h3"},{"title":"Podimo.ConstEmbed​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#podimoconstembed","content":" ","version":"Next","tagName":"h3"},{"title":"ResXGenerator​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#resxgenerator","content":" ","version":"Next","tagName":"h3"},{"title":"RSCG_Utils​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#rscg_utils","content":" ","version":"Next","tagName":"h3"},{"title":"ThisAssembly_Resources​","type":1,"pageTitle":"NotNot.AppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNot.AppSettings#thisassembly_resources","content":"","version":"Next","tagName":"h3"},{"title":"NTypewriter by NeVeSpl","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NTypewriter","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#info","content":" info Name: NTypewriter Package Description Author: NeVeSpl NuGet:https://www.nuget.org/packages/NTypewriter.SourceGenerator You can find more details at https://github.com/NeVeSpl/NTypewriter Source: https://github.com/NeVeSpl/NTypewriter  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#original-readme","content":" note NTypewriter Scriban templates + Roslyn C# code model =&gt; generated files design/compile/run time == any time For those who do not know Typewriter: NTypewriter is files generator from text templates populated with meta-data about your C# code. It is like a specialized and more convenient T4 design-time template. With NTypewriter you can: auto-generate documentation for your C# codecreate a typed TypeScript API client for your ASP.net web API NTypewriter comes in many flavours, that can be used according to your needs: NTypewriter editor for Visual Studio - extension for Visual Studio that adds support for editing *.nt templates, with syntax highlighting, code completion, live preview, design time rendering, available on vs marketplaceNTypewriter.SourceGenerator - nuget, Roslyn source generator that renders *.nt templates during compilation, since it is a compiler extension, it can be used with any IDE or CI/pipeline that supports source generatorsNTypewriter.Online - blazor client side, online demo of NTypewriter capabilitiesNTypewriter - nuget, library that enables you to create run time solution which will be able to render *.nt templates, for example: your own CLINTypewriter.CodeModel.Roslyn - nuget, library that exposes C# code model from an instance of Microsoft.CodeAnalysis.Compilation, useful if you would like to use a different template engine more about NTypewriter architecture and all extension points that can be used, you will find here For those who know Typewriter: NTypewriter is a younger and more immature brother of beloved Typewriter. They share the same ideas but with a completely different implementation. NTypwriter uses Scriban as a template engine, thus template files are completely not interchangeable. While code model API is about 95% compatible between them, there are some differences. NTypewriter code model is 100% pure, without any amenities that help generate TS files. All things that help generate TypeScript from ASP.NET are located in built-in functions: Action, Type. Oh, did I forget to mention that NTypewriter also solves most of the awaited issues of the Typewriter that were promised for 2.0 version: support for attribute properties/values, statics, indexers, default parameters, nullable, records, constructorsoutput multiple types to a single fileinclude types in CodeModel from referenced assemblies/nugetssave generated file only when file content has changedsharable custom functions between templatesfull control over whitespacescompile-time rendering, without any IDE neededbuilt-in support for getting all types used in type declaration (Type.AllReferencedTypes)you can debug custom functions Index​ Typewriter vs NTypewriter Examples: *.nt templates Getting started NTypewriter editor for Visual Studio InstallCodeModelCaptureSaveRunWhen something goes wrong NTypewriter.SourceGeneratorBuild your own CLI Documentation Template languageCode modelBuilt-in functionsName vs BareName vs FullNameCustom Functions NugetsCustom functionsHow to debug Configuration NugetsLocal vs Global configurationOptions AddGeneratedFilesToVSProjectNamespacesToBeSearchedProjectsToBeSearchedSearchInReferencedProjectsAndAssembliesRenderWhenTemplateIsSavedRenderWhenProjectBuildIsDone Visual Studio Configuration Live preview Known issues Typewriter vs NTypewriter​ Typewriter\tNTypewriterTemplate file extension\t*.tst\t*.nt Syntax\ttypewriter syntax\tscriban scripting language Lambda filters\tpresent\tyes Can be used from CLI\tno\tyes Can be used in pipeline\tno\tyes Full control over whitespaces\tnope\tyup Mapping\tone input always produces one output file\tyou can generate as many files as you want Live preview\tno\tyes Code model Unit of work\tfile\tthere is no concept of a file in NTypewriter, you work on compiled symbols Access modifiers\tcode model contains only public types\tcode model contains all types Partial classes\ttreated as separate units\tall parts of the class are treated as a whole unit Automation Auto-render template on save\tyes (opt-out is possible)\tyes (opt-in is possible) Auto-render when C# file changes\tyes (opt-out is possible)\tno Auto-render on build\tno\tyes (opt-in is possible) Custom functions Placement\tinside template file (.tst)\tin separate file (*.nt.cs) Can be shared\tseparate for every template\tshared between templates inside a project Can be debug\tno\tyes Can be unit tested\tno\tyes VS Integration Supported versions of Visual Studio\t2015, 2017, 2019\t2019 (min ver 16.11.x), 2022 Add generated files to VS project\tyes (opt-out is possible)\tyes (opt-out is possible) Sync deleted or renamed C# types with generated files\tthere is a part of the code that should do that but it does not work anymore\tyes (only when the above option is enabled) Typewriter template: module App { $Classes(*Model)[ export class $Name { $Properties[ public $name: $Type;] }] } equivalent NTypewriter template will be: (open in NTypewriter.Online) {{- for class in data.Classes | Symbols.WhereNameEndsWith &quot;Model&quot; capture output -}} module App { export class {{ class.Name }} { {{- for property in class.Properties | Symbols.ThatArePublic }} public {{ property.Name | String.ToCamelCase }}: {{ property.Type | Type.ToTypeScriptType }}; {{- end }} } } {{- end filePath = class.BareName | String.Append &quot;.ts&quot; Save output filePath end }} yes, it is more verbose, but maintaining it over time will be much easier. Both templates generate exactly the same output: module App { export class CustomerModel { public id: number; public name: string; public orders: OrderModel[]; } } Examples​ All Typewriter examples are available as .nt templates on github and also on NTypewriter.Online website. Notent. templates produce exactly the same output as .tst templates, even bad output formatting was preserved, to make them easier to compare. example\tNTypewriter\tTypewriter\tOnlineCreateYourFirstTemplate\tCreateYourFirstTemplate.nt\tCreateYourFirstTemplate.tst\topen Extensions\tExtensions.nt\tExtensions.tst\topen ModelInterfaces\tModelInterfaces.nt\tModelInterfaces.tst\topen KnockoutModels\tKnockoutModels.nt\tKnockoutModels.tst\topen AngularWebAPIService\tAngularWebAPIService.nt\tAngularWebAPIService.tst\topen Known issues​ NTypewriter does not have own a lexer/parser as Typewriter has, and uses Scriban instead to do heavy work. Scriban works very well with fully correct templates, but with incomplete templates during editing not so much. It is the source of the most glitches in the Editor. Scriban language is also typeless, thus doing code completion is challenging.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#about","content":" note Generating code with a template from classes in project  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references NTypewriter &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;test.nt&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;test.nt&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;NTypewriter.SourceGenerator&quot; Version=&quot;0.5.9&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  diagnostics-initialization.g.csdiagnostics-sg-last-run.g.cs // NTypewriter.SourceGenerator 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\VBCSCompiler\\AnalyzerAssemblyLoader\\0e6b7591c3724d53addfcceb277c5688\\7\\NTypewriter.SourceGenerator.dll NTypewriter.SourceGenerator, Version=0.5.9.0, Culture=neutral, PublicKeyToken=null // NTypewriter 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\NTypewriter.v0.5.9.0.dll NTypewriter, Version=0.5.9.0, Culture=neutral, PublicKeyToken=686471615d7a8f08 // NTypewriter.CodeModel 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\NTypewriter.CodeModel.v0.5.9.0.dll NTypewriter.CodeModel, Version=0.5.9.0, Culture=neutral, PublicKeyToken=9bd097c4961606db // NTypewriter.CodeModel.Functions 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\NTypewriter.CodeModel.Functions.v0.5.9.0.dll NTypewriter.CodeModel.Functions, Version=0.5.9.0, Culture=neutral, PublicKeyToken=64a6b4cdbb438ab5 // NTypewriter.CodeModel.Roslyn 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\NTypewriter.CodeModel.Roslyn.v0.5.9.0.dll NTypewriter.CodeModel.Roslyn, Version=0.5.9.0, Culture=neutral, PublicKeyToken=81d8e46ee60c9c4c // NTypewriter.Editor.Config 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\NTypewriter.Editor.Config.v0.5.9.0.dll NTypewriter.Editor.Config, Version=0.5.9.0, Culture=neutral, PublicKeyToken=b9f8710003231974 // NTypewriter.Runtime 0.5.9.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\NTypewriter.Runtime.v0.5.9.0.dll NTypewriter.Runtime, Version=0.5.9.0, Culture=neutral, PublicKeyToken=4fac57df20922078 // Scriban.Signed 5.0.0.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\Scriban.Signed.v5.10.0.0.dll Scriban.Signed, Version=5.0.0.0, Culture=neutral, PublicKeyToken=5675fb69b15f2433 // System.Text.Json 9.0.0.0 C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\9.0.7\\System.Text.Json.dll System.Text.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 // System.Text.RegularExpressions 9.0.0.0 C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\9.0.7\\System.Text.RegularExpressions.dll System.Text.RegularExpressions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a // Microsoft.CodeAnalysis 4.14.0.0 C:\\Program Files\\dotnet\\sdk\\9.0.302\\Roslyn\\bincore\\Microsoft.CodeAnalysis.dll Microsoft.CodeAnalysis, Version=4.14.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 // Microsoft.CodeAnalysis.CSharp 4.14.0.0 C:\\Program Files\\dotnet\\sdk\\9.0.302\\Roslyn\\bincore\\Microsoft.CodeAnalysis.CSharp.dll Microsoft.CodeAnalysis.CSharp, Version=4.14.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 // Microsoft.CodeAnalysis.Scripting 4.0.0.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\Microsoft.CodeAnalysis.Scripting.v4.0.1.0.dll Microsoft.CodeAnalysis.Scripting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 // Microsoft.CodeAnalysis.CSharp.Scripting 4.0.0.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\Microsoft.CodeAnalysis.CSharp.Scripting.v4.0.1.0.dll Microsoft.CodeAnalysis.CSharp.Scripting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 // Microsoft.CodeAnalysis.Workspaces 4.0.0.0 C:\\Users\\ignat\\AppData\\Local\\Temp\\NTSG\\Microsoft.CodeAnalysis.Workspaces.v4.0.1.0.dll Microsoft.CodeAnalysis.Workspaces, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 // CurrentDomain: VBCSCompiler   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#download-example-net--c","content":" tip Download Example project NTypewriter   ","version":"Next","tagName":"h3"},{"title":"Share NTypewriter​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#share-ntypewriter","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NTypewriter  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"NTypewriter by NeVeSpl","url":"/RSCG_Examples/v2/docs/NTypewriter#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"NotNotAppSettings by jasonswearingen","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NotNotAppSettings","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#info","content":" info Name: NotNotAppSettings Auto-generate strongly typed C# settings objects from your AppSettings.json. Author: jasonswearingen NuGet:https://www.nuget.org/packages/NotNot.AppSettings/ You can find more details at https://github.com/jasonswearingen/NotNot.AppSettings/ Source: https://github.com/jasonswearingen/NotNot.AppSettings/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#original-readme","content":" note NotNot.AppSettings Automatically create strongly typed C# settings objects from AppSettings.json. Uses Source Generators. Includes a simple deserialization helper for when you are using Dependency Injection, or not. Getting Started​ Add an appsettings.json file to your project (make sure it's copied to the output).Install this nuget package NotNot.AppSettings.Build your projectUse the generated AppSettings class in your code. (See the example section below). How it works​ During your project's build process, NotNot.AppSettings will parse the appsettings*.json in your project's root folder. These files are all merged into a single schema. Using source-generators it then creates a set of csharp classes that matches each node in the json hierarchy. After building your project, an AppSettings class contains the strongly-typed definitions, and an AppSettingsBinder helper/loader util will be found under the {YourProjectRootNamespace}.AppSettingsGen namespace. Example​ appsettings.json { &quot;Hello&quot;: { &quot;World&quot;: &quot;Hello back at you!&quot; } } Program.cs using ExampleApp.AppSettingsGen; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; namespace ExampleApp; public class Program { public static async Task Main(string[] args) { { Console.WriteLine(&quot;NON-DI EXAMPLE&quot;); var appSettings = ExampleApp.AppSettingsGen.AppSettingsBinder.LoadDirect(); Console.WriteLine(appSettings.Hello.World); } { Console.WriteLine(&quot;DI EXAMPLE&quot;); HostApplicationBuilder builder = Host.CreateApplicationBuilder(args); builder.Services.AddSingleton&lt;IAppSettingsBinder, AppSettingsBinder&gt;(); var app = builder.Build(); var appSettings = app.Services.GetRequiredService&lt;IAppSettingsBinder&gt;().AppSettings; Console.WriteLine(appSettings.Hello.World); } } } See the ./NotNot.AppSettings.Example folder in the repository for a fully buildable version of this example. Troubleshooting / Tips​ How to extend the generated AppSettings class?​ You can extend any/all of the generated code by creating a partial class in the same namespace. Some settings not being loaded (value is NULL). Or: My appSettings.Development.json file is not loaded​ Ensure the proper environment variable is set. For example, The appSettings.Development.json file is only loaded when the ASPNETCORE_ENVIRONMENTor DOTNET_ENVIORNMENT environment variable is set to Development. Intellisense not working for AppSettings class​ A strongly-typed AppSettings (and sub-classes) is recreated every time you build your project. This may confuse your IDE and you might need to restart it to get intellisense working again. Why are some of my nodes typed as object?​ Under some circumstances, the type of a node's value in appsettings.json would be ambiguous, so object is used: If the value is null or undefinedIf the value is a POJO/Array/primitive in one appsettings file, and a different one of those three in another. Tip: Backup generated code in your git repository​ Add this to your .csproj to have the code output to ./Generated and have it be ignored by your project. This way you can check it into source control and have a backup of the generated code in case you need to stop using this package. &lt;!--output the source generator build files--&gt; &lt;Target Name=&quot;DeleteFolder&quot; BeforeTargets=&quot;PreBuildEvent&quot;&gt; &lt;RemoveDir Directories=&quot;$(CompilerGeneratedFilesOutputPath)&quot; /&gt; &lt;/Target&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!--Exclude the output of source generators from the compilation--&gt; &lt;Compile Remove=&quot;$(CompilerGeneratedFilesOutputPath)/**&quot; /&gt; &lt;/ItemGroup&gt; Contribute​ If you find value from this project, consider sponsoring. Acknowledgments​ This project was inspired by https://github.com/FrodeHus/AppSettingsSourceGenerator which unfortunately did not match my needs in fundamental ways. License: MPL-2.0​ A summary from TldrLegal: MPL is a copyleft license that is easy to comply with. You must make the source code for any of your changes available under MPL, but you can combine the MPL software with proprietary code, as long as you keep the MPL code in separate files. Version 2.0 is, by default, compatible with LGPL and GPL version 2 or greater. You can distribute binaries under a proprietary license, as long as you make the source available under MPL. In brief: You can basically use this project however you want, but all changes to it must be open sourced. Changes​ 1.0.0 : polish and readme tweaks. Put a fork in it, it's done!0.12.0 : change appsettings read logic to use &quot;AdditionalFiles&quot; workflow instead of File.IO0.10.0 : Initial Release.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#about","content":" note Application Settings to strongly typed classes. Generate also from AppSettings development  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references NotNotAppSettings &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.1&quot; /&gt; &lt;PackageReference Include=&quot;NotNot.AppSettings&quot; Version=&quot;1.0.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Update=&quot;appsettings.json&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TestAppSettings.AppSettingsGen.AppSettings.csTestAppSettings.AppSettingsGen._AppSettings.Logging.csTestAppSettings.AppSettingsGen._AppSettings._Logging.LogLevel.cs_BinderShims.cs /** * This file is generated by the NotNot.AppSettings nuget package. * Do not edit this file directly, instead edit the appsettings.json files and rebuild the project. **/ using System; using System.Runtime.CompilerServices; namespace TestAppSettings.AppSettingsGen; [CompilerGenerated] public partial class AppSettings { public TestAppSettings.AppSettingsGen._AppSettings.Logging? Logging{get; set;} public string? AllowedHosts{get; set;} public string? AppName{get; set;} }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#download-example-net--c","content":" tip Download Example project NotNotAppSettings   ","version":"Next","tagName":"h3"},{"title":"Share NotNotAppSettings​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#share-notnotappsettings","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NotNotAppSettings  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"NotNotAppSettings by jasonswearingen","url":"/RSCG_Examples/v2/docs/NotNotAppSettings#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"Meziantou.Polyfill by Gérald Barré","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#info","content":" info Name: Meziantou.Polyfill Source Generator to help multi-targeting projects. Author: Gérald Barré NuGet:https://www.nuget.org/packages/Meziantou.Polyfill/ You can find more details at https://www.meziantou.net/polyfills-in-dotnet-to-ease-multi-targeting.htm Source: https://github.com/meziantou/Meziantou.Polyfill  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#original-readme","content":" note Meziantou.Polyfill Source Generator that adds polyfill methods and types. This helps working with multi-targeted projects. You can use the following MSBuild properties to configure which polyfills are generated: &lt;PropertyGroup&gt; &lt;!-- semi-column separated list of name prefix --&gt; &lt;!-- Tip: The name of the generated polyfills are available in the generated &quot;Debug.g.cs&quot; file --&gt; &lt;MeziantouPolyfill_IncludedPolyfills&gt;T:Type1|T:Type2|M:Member1&lt;/MeziantouPolyfill_IncludedPolyfills&gt; &lt;MeziantouPolyfill_ExcludedPolyfills&gt;M:System.Diagnostics.&lt;/MeziantouPolyfill_ExcludedPolyfills&gt; &lt;!-- Optional: Output the generated files to the obj\\GeneratedFiles folder --&gt; &lt;EmitCompilerGeneratedFiles&gt;True&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GeneratedFiles&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; How to add a new polyfill​ Create a new file named &lt;xml documentation id&gt;.cs in the project Meziantou.Polyfill.EditorRun Meziantou.Polyfill.Generator Notes: All files must be self contained. Use a file class if needed.If you need to generate a file only when another polyfill is generated, add // when &lt;xml documentation id&gt; in the file  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#about","content":" note Generating polyfills that you can see source without de-compiling  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#example-source-csproj-source-files","content":" CSharp ProjectProgram.csStartProcess.cs This is the CSharp Project that references Meziantou.Polyfill &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFrameworks&gt;net7.0;netstandard2.0&lt;/TargetFrameworks&gt; &lt;LangVersion&gt;latest&lt;/LangVersion&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Meziantou.Polyfill&quot; Version=&quot;1.0.28&quot;&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Debug.g.csM_System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0).g.csM_System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0).g.csM_System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1).g.csM_System.Collections.Generic.KeyValuePair`2.Deconstruct(`0_,`1_).g.csM_System.Collections.Generic.Queue`1.TryDequeue(`0_).g.csM_System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken).g.csM_System.IO.TextReader.ReadToEndAsync(System.Threading.CancellationToken).g.csM_System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}).g.csM_System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1}).g.csM_System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}).g.csM_System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1}).g.csM_System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}).g.csM_System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1}).g.csM_System.Linq.Enumerable.OrderDescending``1(System.Collections.Generic.IEnumerable{``0}).g.csM_System.Linq.Enumerable.OrderDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0}).g.csM_System.Linq.Enumerable.Order``1(System.Collections.Generic.IEnumerable{``0}).g.csM_System.Linq.Enumerable.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0}).g.csM_System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0}).g.csM_System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0}).g.csM_System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}).g.csM_System.Net.Http.HttpContent.CopyTo(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken).g.csM_System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken).g.csM_System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken).g.csM_System.Net.Http.HttpContent.ReadAsStream(System.Threading.CancellationToken).g.csM_System.Net.Http.HttpContent.ReadAsStream.g.csM_System.String.Contains(System.Char).g.csM_System.String.Contains(System.Char,System.StringComparison).g.csM_System.String.Contains(System.String,System.StringComparison).g.csM_System.String.EndsWith(System.Char).g.csM_System.String.GetHashCode(System.StringComparison).g.csM_System.String.IndexOf(System.Char,System.StringComparison).g.csM_System.String.Replace(System.String,System.String,System.StringComparison).g.csM_System.String.ReplaceLineEndings(System.String).g.csM_System.String.ReplaceLineEndings.g.csM_System.String.Split(System.Char,System.Int32,System.StringSplitOptions).g.csM_System.String.Split(System.Char,System.StringSplitOptions).g.csM_System.String.StartsWith(System.Char).g.csM_System.Text.StringBuilder.AppendJoin(System.Char,System.Object[]).g.csM_System.Text.StringBuilder.AppendJoin(System.Char,System.String[]).g.csM_System.Text.StringBuilder.AppendJoin(System.String,System.Object[]).g.csM_System.Text.StringBuilder.AppendJoin(System.String,System.String[]).g.csM_System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0}).g.csM_System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0}).g.csM_System.Threading.CancellationTokenSource.CancelAsync.g.csM_System.Threading.Tasks.Task.WaitAsync(System.Threading.CancellationToken).g.csT_System.Collections.Generic.PriorityQueue`2.g.csT_System.Collections.Generic.ReferenceEqualityComparer.g.csT_System.Diagnostics.CodeAnalysis.AllowNullAttribute.g.csT_System.Diagnostics.CodeAnalysis.DisallowNullAttribute.g.csT_System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.g.csT_System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.g.csT_System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.g.csT_System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.g.csT_System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.g.csT_System.Diagnostics.CodeAnalysis.MaybeNullAttribute.g.csT_System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.g.csT_System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.g.csT_System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.g.csT_System.Diagnostics.CodeAnalysis.NotNullAttribute.g.csT_System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.g.csT_System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.g.csT_System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.g.csT_System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.g.csT_System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.g.csT_System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute.g.csT_System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.g.csT_System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.g.csT_System.Diagnostics.CodeAnalysis.UnscopedRefAttribute.g.csT_System.Diagnostics.StackTraceHiddenAttribute.g.csT_System.HashCode.g.csT_System.Index.g.csT_System.Range.g.csT_System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.g.csT_System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.g.csT_System.Runtime.CompilerServices.CollectionBuilderAttribute.g.csT_System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.g.csT_System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute.g.csT_System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.g.csT_System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute.g.csT_System.Runtime.CompilerServices.IsExternalInit.g.csT_System.Runtime.CompilerServices.ModuleInitializerAttribute.g.csT_System.Runtime.CompilerServices.RequiredMemberAttribute.g.csT_System.Runtime.CompilerServices.SkipLocalsInitAttribute.g.csT_System.Runtime.InteropServices.SuppressGCTransitionAttribute.g.csT_System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.g.csT_System.Runtime.Versioning.ObsoletedOSPlatformAttribute.g.csT_System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.g.csT_System.Runtime.Versioning.SupportedOSPlatformAttribute.g.csT_System.Runtime.Versioning.SupportedOSPlatformGuardAttribute.g.csT_System.Runtime.Versioning.TargetPlatformAttribute.g.csT_System.Runtime.Versioning.UnsupportedOSPlatformAttribute.g.csT_System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute.g.csT_System.Threading.Tasks.TaskToAsyncResult.g.cs // IncludedMembers: &lt;null&gt; // ExcludedMembers: &lt;null&gt; // System.Collections.Immutable.ImmutableArray`1: True // System.Memory`1: True // System.Net.Http.HttpContent: True // System.ReadOnlyMemory`1: True // System.ReadOnlySpan`1: True // System.Span`1: True // System.Threading.Tasks.ValueTask: True // System.Threading.Tasks.ValueTask`1: True // // M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0): False // M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0): False // M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1): False // M:System.Collections.Generic.KeyValuePair`2.Deconstruct(`0@,`1@): False // M:System.Collections.Generic.Queue`1.TryDequeue(`0@): False // M:System.Collections.Immutable.ImmutableArray`1.AsSpan(System.Int32,System.Int32): False // M:System.Collections.Immutable.ImmutableArray`1.AsSpan(System.Range): False // M:System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken): False // M:System.IO.Stream.Read(System.Span{System.Byte}): False // M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken): False // M:System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean): False // M:System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken): False // M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte}): False // M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken): False // M:System.IO.StreamReader.ReadLineAsync(): False // M:System.IO.StreamReader.ReadLineAsync(System.Threading.CancellationToken): False // M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken): False // M:System.IO.TextReader.ReadToEndAsync(System.Threading.CancellationToken): False // M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken): False // M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}): False // M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1}): False // M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}): False // M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1}): False // M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}): False // M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1}): False // M:System.Linq.Enumerable.OrderDescending``1(System.Collections.Generic.IEnumerable{``0}): False // M:System.Linq.Enumerable.OrderDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0}): False // M:System.Linq.Enumerable.Order``1(System.Collections.Generic.IEnumerable{``0}): False // M:System.Linq.Enumerable.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0}): False // M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0}): False // M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0}): False // M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}): False // M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32): False // M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0): False // M:System.MemoryExtensions.Contains``1(System.Span{``0},``0): False // M:System.Net.Http.HttpContent.CopyTo(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken): False // M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream): False // M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext): False // M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken): False // M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken): False // M:System.Net.Http.HttpContent.ReadAsStream(System.Threading.CancellationToken): False // M:System.Net.Http.HttpContent.ReadAsStream: False // M:System.String.Contains(System.Char): False // M:System.String.Contains(System.Char,System.StringComparison): False // M:System.String.Contains(System.String,System.StringComparison): False // M:System.String.CopyTo(System.Span{System.Char}): False // M:System.String.EndsWith(System.Char): False // M:System.String.GetHashCode(System.StringComparison): False // M:System.String.IndexOf(System.Char,System.StringComparison): False // M:System.String.Replace(System.String,System.String,System.StringComparison): False // M:System.String.ReplaceLineEndings(System.String): False // M:System.String.ReplaceLineEndings: False // M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions): False // M:System.String.Split(System.Char,System.StringSplitOptions): False // M:System.String.StartsWith(System.Char): False // M:System.String.TryCopyTo(System.Span{System.Char}): False // M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte}): False // M:System.Text.StringBuilder.Append(System.ReadOnlyMemory{System.Char}): False // M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char}): False // M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[]): False // M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[]): False // M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[]): False // M:System.Text.StringBuilder.AppendJoin(System.String,System.String[]): False // M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0}): False // M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0}): False // M:System.Threading.CancellationTokenSource.CancelAsync: True // M:System.Threading.Tasks.Task.WaitAsync(System.Threading.CancellationToken): False // T:System.Collections.Generic.PriorityQueue`2: False // T:System.Collections.Generic.ReferenceEqualityComparer: False // T:System.Diagnostics.CodeAnalysis.AllowNullAttribute: False // T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute: False // T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute: False // T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute: False // T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute: False // T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes: False // T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute: False // T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute: False // T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute: False // T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute: False // T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute: False // T:System.Diagnostics.CodeAnalysis.NotNullAttribute: False // T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute: False // T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute: False // T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute: False // T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute: False // T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute: False // T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute: False // T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute: False // T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute: False // T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute: False // T:System.Diagnostics.StackTraceHiddenAttribute: False // T:System.HashCode: False // T:System.Index: False // T:System.Net.Http.ReadOnlyMemoryContent: False // T:System.Range: False // T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute: False // T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute: False // T:System.Runtime.CompilerServices.CollectionBuilderAttribute: True // T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute: False // T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute: False // T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute: False // T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute: False // T:System.Runtime.CompilerServices.IsExternalInit: False // T:System.Runtime.CompilerServices.ModuleInitializerAttribute: False // T:System.Runtime.CompilerServices.RequiredMemberAttribute: False // T:System.Runtime.CompilerServices.SkipLocalsInitAttribute: False // T:System.Runtime.CompilerServices.TupleElementNamesAttribute: False // T:System.Runtime.InteropServices.SuppressGCTransitionAttribute: False // T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute: False // T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute: False // T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute: False // T:System.Runtime.Versioning.SupportedOSPlatformAttribute: False // T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute: False // T:System.Runtime.Versioning.TargetPlatformAttribute: False // T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute: False // T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute: False // T:System.Threading.Tasks.TaskToAsyncResult: True // T:System.ValueTuple: False // T:System.ValueTuple`1: False // T:System.ValueTuple`2: False // T:System.ValueTuple`3: False // T:System.ValueTuple`4: False // T:System.ValueTuple`5: False // T:System.ValueTuple`6: False // T:System.ValueTuple`7: False // T:System.ValueTuple`8: False // T:System.ITupleInternal: False   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#download-example-net--c","content":" tip Download Example project Meziantou.Polyfill   ","version":"Next","tagName":"h3"},{"title":"Share Meziantou.Polyfill​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#share-meziantoupolyfill","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Meziantou.Polyfill  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Meziantou.Polyfill by Gérald Barré","url":"/RSCG_Examples/v2/docs/Meziantou.Polyfill#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"OneOf by Harry McIntyre","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/OneOf","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#info","content":" info Name: OneOf This source generator automaticly implements OneOfBase hierarchies Author: Harry McIntyre NuGet:https://www.nuget.org/packages/OneOf.SourceGenerator https://www.nuget.org/packages/OneOf/ You can find more details at https://github.com/mcintyre321/OneOf Source: https://github.com/mcintyre321/OneOf  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#original-readme","content":" note OneOf &quot;Ah! It's like a compile time checked switch statement!&quot; - Mike Giorgaras Getting Started​ install-package OneOf This library provides F# style discriminated unions for C#, using a custom type OneOf&lt;T0, ... Tn&gt;. An instance of this type holds a single value, which is one of the types in its generic argument list. I can't encourage you enough to give it a try! Due to exhaustive matching DUs provide an alternative to polymorphism when you want to have a method with guaranteed behaviour-per-type (i.e. adding an abstract method on a base type, and then implementing that method in each type). It's a really powerful tool, ask any f#/Scala dev! :) PS If you like OneOf, you might want to check out ValueOf, for one-line Value Object Type definitions. Use cases​ As a method return value​ The most frequent use case is as a return value, when you need to return different results from a method. Here's how you might use it in an MVC controller action: public OneOf&lt;User, InvalidName, NameTaken&gt; CreateUser(string username) { if (!IsValid(username)) return new InvalidName(); var user = _repo.FindByUsername(username); if(user != null) return new NameTaken(); var user = new User(username); _repo.Save(user); return user; } [HttpPost] public IActionResult Register(string username) { OneOf&lt;User, InvalidName, NameTaken&gt; createUserResult = CreateUser(username); return createUserResult.Match( user =&gt; new RedirectResult(&quot;/dashboard&quot;), invalidName =&gt; { ModelState.AddModelError(nameof(username), $&quot;Sorry, that is not a valid username.&quot;); return View(&quot;Register&quot;); }, nameTaken =&gt; { ModelState.AddModelError(nameof(username), &quot;Sorry, that name is already in use.&quot;); return View(&quot;Register&quot;); } ); } As an 'Option' Type​ It's simple to use OneOf as an Option type - just declare a OneOf&lt;Something, None&gt;. OneOf comes with a variety of useful Types in the OneOf.Types namespace, including Yes, No, Maybe, Unknown, True, False, All, Some, and None. Benefits​ True strongly typed method signature No need to return a custom result base type e.g IActionResult, or even worse, a non-descriptive type (e.g. object)The method signature accurately describes all the potential outcomes, making it easier for consumers to understand the codeMethod consumer HAS to handle all cases (see 'Matching', below) You can avoid using &quot;Exceptions for control flow&quot; antipattern by returning custom Typed error objects As a method parameter value​ You can use also use OneOf as a parameter type, allowing a caller to pass different types without requiring additional overloads. This might not seem that useful for a single parameter, but if you have multiple parameters, the number of overloads required increases rapidly. public void SetBackground(OneOf&lt;string, ColorName, Color&gt; backgroundColor) { ... } //The method above can be called with either a string, a ColorName enum value or a Color instance. Matching​ You use the TOut Match(Func&lt;T0, TOut&gt; f0, ... Func&lt;Tn,TOut&gt; fn) method to get a value out. Note how the number of handlers matches the number of generic arguments. Advantages over switch or if or exception based control flow:​ This has a major advantage over a switch statement, as it requires every parameter to be handled No fallback - if you add another generic parameter, you HAVE to update all the calling code to handle your changes. In brown-field code-bases this is incredibly useful, as the default handler is often a runtime throw NotImplementedException, or behaviour that wouldn't suit the new result type. E.g. OneOf&lt;string, ColorName, Color&gt; backgroundColor = ...; Color c = backgroundColor.Match( str =&gt; CssHelper.GetColorFromString(str), name =&gt; new Color(name), col =&gt; col ); _window.BackgroundColor = c; There is also a .Switch method, for when you aren't returning a value: OneOf&lt;string, DateTime&gt; dateValue = ...; dateValue.Switch( str =&gt; AddEntry(DateTime.Parse(str), foo), int =&gt; AddEntry(int, foo) ); TryPick𝑥 method​ As an alternative to .Switch or .Match you can use the .TryPick𝑥 methods. //TryPick𝑥 methods for OneOf&lt;T0, T1, T2&gt; public bool TryPickT0(out T0 value, out OneOf&lt;T1, T2&gt; remainder) { ... } public bool TryPickT1(out T1 value, out OneOf&lt;T0, T2&gt; remainder) { ... } public bool TryPickT2(out T2 value, out OneOf&lt;T0, T1&gt; remainder) { ... } The return value indicates if the OneOf contains a T𝑥 or not. If so, then value will be set to the inner value from the OneOf. If not, then the remainder will be a OneOf of the remaining generic types. You can use them like this: IActionResult Get(string id) { OneOf&lt;Thing, NotFound, Error&gt; thingOrNotFoundOrError = GetThingFromDb(string id); if (thingOrNotFoundOrError.TryPickT1(out NotFound notFound, out var thingOrError)) //thingOrError is a OneOf&lt;Thing, Error&gt; return StatusCode(404); if (thingOrError.TryPickT1(out var error, out var thing)) //note that thing is a Thing rather than a OneOf&lt;Thing&gt; { _logger.LogError(error.Message); return StatusCode(500); } return Ok(thing); } Reusable OneOf Types using OneOfBase​ You can declare a OneOf as a type, either for reuse of the type, or to provide additional members, by inheriting from OneOfBase. The derived class will inherit the .Match, .Switch, and .TryPick𝑥 methods. public class StringOrNumber : OneOfBase&lt;string, int&gt; { StringOrNumber(OneOf&lt;string, int&gt; _) : base(_) { } // optionally, define implicit conversions // you could also make the constructor public public static implicit operator StringOrNumber(string _) =&gt; new StringOrNumber(_); public static implicit operator StringOrNumber(int _) =&gt; new StringOrNumber(_); public (bool isNumber, int number) TryGetNumber() =&gt; Match( s =&gt; (int.TryParse(s, out var n), n), i =&gt; (true, i) ); } StringOrNumber x = 5; Console.WriteLine(x.TryGetNumber().number); // prints 5 x = &quot;5&quot;; Console.WriteLine(x.TryGetNumber().number); // prints 5 x = &quot;abcd&quot;; Console.WriteLine(x.TryGetNumber().isNumber); // prints False OneOfBase Source Generation​ You can automatically generate OneOfBase hierarchies using GenerateOneOfAttribute and partial class that extends OneOfBase using a Source Generator (thanks to @romfir for the contribution :D). Install it via Install-Package OneOf.SourceGenerator and then define a stub like so: [GenerateOneOf] public partial class StringOrNumber : OneOfBase&lt;string, int&gt; { } During compilation the source generator will produce a class implementing the OneOfBase boiler plate code for you. e.g. public partial class StringOrNumber { public StringOrNumber(OneOf.OneOf&lt;System.String, System.Int32&gt; _) : base(_) { } public static implicit operator StringOrNumber(System.String _) =&gt; new StringOrNumber(_); public static explicit operator System.String(StringOrNumber _) =&gt; _.AsT0; public static implicit operator StringOrNumber(System.Int32 _) =&gt; new StringOrNumber(_); public static explicit operator System.Int32(StringOrNumber _) =&gt; _.AsT1; }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#about","content":" note Functional discriminated unions  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#example-source-csproj-source-files","content":" CSharp ProjectProgram.csStringOrNumber.cs This is the CSharp Project that references OneOf &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;OneOf&quot; Version=&quot;3.0.255&quot; /&gt; &lt;PackageReference Include=&quot;OneOf.SourceGenerator&quot; Version=&quot;3.0.255&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenerateOneOfAttribute.g.csOneOfDemo_StringOrNumber.g.cs // &lt;auto-generated /&gt; using System; #pragma warning disable 1591 namespace OneOf { [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class GenerateOneOfAttribute : Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#download-example-net--c","content":" tip Download Example project OneOf   ","version":"Next","tagName":"h3"},{"title":"Share OneOf​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#share-oneof","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/OneOf  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"OneOf by Harry McIntyre","url":"/RSCG_Examples/v2/docs/OneOf#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"PartiallyApplied by Jason Bock","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/PartiallyApplied","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#info","content":" info Name: PartiallyApplied A way to do partial function application in C# Author: Jason Bock NuGet:https://www.nuget.org/packages/PartiallyApplied/ You can find more details at https://github.com/JasonBock/PartiallyApplied/blob/main/docs/Quickstart.md Source: https://github.com/JasonBock/PartiallyApplied  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#original-readme","content":" note PartiallyApplied A way to do partial function application in C#. Overview​ You can find this code as a package in NuGet. Once installed, you can use it to do partial function application: public static class Maths { public static int Add(int a, int b) =&gt; a + b; } public static class Runner { public static void Run() { var incrementBy3 = Partially.Apply(Maths.Add, 3); var value = incrementBy3(4); // value is now equal to 7. } } More details can be found on the Quickstart page. Note that if you build the code locally, you'll need to build in Release mode for the package reference in PartiallyApplied.NuGetHost to resolve correctly (or unload that project from the solution as it's optional and delete nuget.config).  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#about","content":" note If you need to curry functions, you can use this package  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#example-source-csproj-source-files","content":" CSharp ProjectProgram.csAccounting.cs This is the CSharp Project that references PartiallyApplied &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;PartiallyApplied&quot; Version=&quot;1.3.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Partially.g.cs using System; #nullable enable public static partial class Partially { public static Func&lt;float, float&gt; Apply(Func&lt;float, float, float&gt; method, float discount) =&gt; new((price) =&gt; method(discount, price)); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#download-example-net--c","content":" tip Download Example project PartiallyApplied   ","version":"Next","tagName":"h3"},{"title":"Share PartiallyApplied​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#share-partiallyapplied","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/PartiallyApplied  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"PartiallyApplied by Jason Bock","url":"/RSCG_Examples/v2/docs/PartiallyApplied#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"NetEscapades.EnumGenerators by Andrew Lock","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#info","content":" info Name: NetEscapades.EnumGenerators A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute Author: Andrew Lock NuGet:https://www.nuget.org/packages/NetEscapades.EnumGenerators/ You can find more details at https://andrewlock.net/netescapades-enumgenerators-a-source-generator-for-enum-performance/ Source: https://github.com/andrewlock/NetEscapades.EnumGenerators  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#original-readme","content":" note NetEscapades.EnumGenerators A Source Generator package that generates extension methods for enums, to allow fast &quot;reflection&quot;. This source generator requires the .NET 7 SDK. You can target earlier frameworks like .NET Core 3.1 etc, but the SDK must be at least 7.0.100 Add the package to your application using dotnet add package NetEscapades.EnumGenerators This adds a &lt;PackageReference&gt; to your project. You can additionally mark the package as PrivateAssets=&quot;all&quot; and ExcludeAssets=&quot;runtime&quot;. Setting PrivateAssets=&quot;all&quot; means any projects referencing this one won't get a reference to the NetEscapades.EnumGenerators package. Setting ExcludeAssets=&quot;runtime&quot; ensures the NetEscapades.EnumGenerators.Attributes.dll file is not copied to your build output (it is not required at runtime). &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;NetEscapades.EnumGenerators&quot; Version=&quot;1.0.0-beta04&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;!-- --&gt; &lt;/Project&gt; Adding the package will automatically add a marker attribute, [EnumExtensions], to your project. To use the generator, add the [EnumExtensions] attribute to an enum. For example: [EnumExtensions] public enum MyEnum { First, [Display(Name = &quot;2nd&quot;)] Second, } This will generate a class called MyEnumExtensions (by default), which contains a number of helper methods. For example: public static partial class MyEnumExtensions { public const int Length = 2; public static string ToStringFast(this MyEnum value) =&gt; value switch { MyEnum.First =&gt; nameof(MyEnum.First), MyEnum.Second =&gt; &quot;2nd&quot;, _ =&gt; value.ToString(), }; public static bool IsDefined(MyEnum value) =&gt; value switch { MyEnum.First =&gt; true, MyEnum.Second =&gt; true, _ =&gt; false, }; public static bool IsDefined(string name) =&gt; name switch { nameof(MyEnum.First) =&gt; true, nameof(MyEnum.Second) =&gt; true, _ =&gt; false, }; public static bool TryParse( [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? name, bool ignoreCase, out MyEnum value) =&gt; ignoreCase ? TryParseIgnoreCase(name, out value) : TryParse(name, out value); private static bool TryParseIgnoreCase( [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? name, out MyEnum value) { switch (name) { case { } s when s.Equals(nameof(MyEnum.First), System.StringComparison.OrdinalIgnoreCase): value = MyEnum.First; return true; case { } s when s.Equals(nameof(MyEnum.Second), System.StringComparison.OrdinalIgnoreCase): value = MyEnum.Second; return true; case { } s when int.TryParse(name, out var val): value = (MyEnum)val; return true; default: value = default; return false; } } public static bool TryParse( [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? name, out MyEnum value) { switch (name) { case nameof(MyEnum.First): value = MyEnum.First; return true; case nameof(MyEnum.Second): value = MyEnum.Second; return true; case { } s when int.TryParse(name, out var val): value = (MyEnum)val; return true; default: value = default; return false; } } public static MyEnum[] GetValues() { return new[] { MyEnum.First, MyEnum.Second, }; } public static string[] GetNames() { return new[] { nameof(MyEnum.First), nameof(MyEnum.Second), }; } } If you create a &quot;Flags&quot; enum by decorating it with the [Flags] attribute, an additional method is created, which provides a bitwise alternative to the Enum.HasFlag(flag) method: public static bool HasFlagFast(this MyEnum value, MyEnum flag) =&gt; flag == 0 ? true : (value &amp; flag) == flag; Note that if you provide a [Display] or [Description] attribute, the value you provide for this attribute can be used by methods like ToStringFast() and TryParse() by passing the argument allowMatchingMetadataAttribute: true. Adding both attributes to an enum member is not supported, though conventionally the &quot;first&quot; attribute will be used. You can override the name of the extension class by setting ExtensionClassName in the attribute and/or the namespace of the class by setting ExtensionClassNamespace. By default, the class will be public if the enum is public, otherwise it will be internal. Embedding the attributes in your project​ By default, the [EnumExtensions] attributes referenced in your application are contained in an external dll. It is also possible to embed the attributes directly in your project, so they appear in the dll when your project is built. If you wish to do this, you must do two things: Define the MSBuild constant NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES. This ensures the attributes are embedded in your projectAdd compile to the list of excluded assets in your &lt;PackageReference&gt; element. This ensures the attributes in your project are referenced, instead of the NetEscapades.EnumGenerators.Attributes.dll library. Your project file should look something like this: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;!-- Define the MSBuild constant --&gt; &lt;DefineConstants&gt;$(DefineConstants);NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;NetEscapades.EnumGenerators&quot; Version=&quot;1.0.0-beta04&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;compile;runtime&quot; /&gt; &lt;!-- ☝ Add compile to the list of excluded assets. --&gt; &lt;/Project&gt; Preserving usages of the [EnumExtensions] attribute​ The [EnumExtensions] attribute is decorated with the [Conditional] attribute, so their usage will not appear in the build output of your project. If you use reflection at runtime on one of your enums, you will not find [EnumExtensions] in the list of custom attributes. If you wish to preserve these attributes in the build output, you can define the NETESCAPADES_ENUMGENERATORS_USAGES MSBuild variable. Note that this means your project will have a runtime-dependency on NetEscapades.EnumGenerators.Attributes.dll so you need to ensure this is included in your build output. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;!-- Define the MSBuild constant to preserve usages --&gt; &lt;DefineConstants&gt;$(DefineConstants);NETESCAPADES_ENUMGENERATORS_USAGES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;NetEscapades.EnumGenerators&quot; Version=&quot;1.0.0-beta05&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;!-- ☝ You must not exclude the runtime assets in this case --&gt; &lt;/Project&gt; Error CS0436 and [InternalsVisibleTo]​ In the latest version of NetEscapades.EnumGenerators, you should not experience error CS0436 by default. In previous versions of the NetEscapades.EnumGenerators generator, the [EnumExtensions] attributes were added to your compilation as internal attributes by default. If you added the source generator package to multiple projects, and used the [InternalsVisibleTo] attribute, you could experience errors when you build: warning CS0436: The type 'EnumExtensionsAttribute' in 'NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators\\EnumExtensionsAttribute.cs' conflicts with the imported type 'EnumExtensionsAttribute' in 'MyProject, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. In the latest version of StronglyTypedId, the attributes are not embedded by default, so you should not experience this problem. If you see this error, compare your installation to the examples in the installation guide.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#about","content":" note Running fast tostring and other features for enum  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#example-source-csproj-source-files","content":" CSharp ProjectProgram.csInstallType.csAddToCoffee.cs This is the CSharp Project that references NetEscapades.EnumGenerators &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;NetEscapades.EnumGenerators&quot; Version=&quot;1.0.0-beta08&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;comile;runtime&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AddToCoffeeExtensions_EnumExtensions.g.csEnumExtensionsAttribute.g.csInstallTypeExtensions_EnumExtensions.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the NetEscapades.EnumGenerators source generator // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable #if NETCOREAPP &amp;&amp; !NETCOREAPP2_0 &amp;&amp; !NETCOREAPP1_1 &amp;&amp; !NETCOREAPP1_0 using System; #endif /// &lt;summary&gt; /// Extension methods for &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; /// &lt;/summary&gt; internal static partial class AddToCoffeeExtensions { /// &lt;summary&gt; /// The number of members in the enum. /// This is a non-distinct count of defined names. /// &lt;/summary&gt; public const int Length = 4; /// &lt;summary&gt; /// Returns the string representation of the &lt;see cref=&quot;global::AddToCoffee&quot;/&gt; value. /// If the attribute is decorated with a &lt;c&gt;[Display]&lt;/c&gt; attribute, then /// uses the provided value. Otherwise uses the name of the member, equivalent to /// calling &lt;c&gt;ToString()&lt;/c&gt; on &lt;paramref name=&quot;value&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The value to retrieve the string value for&lt;/param&gt; /// &lt;returns&gt;The string representation of the value&lt;/returns&gt; public static string ToStringFast(this global::AddToCoffee value) =&gt; value switch { global::AddToCoffee.None =&gt; nameof(global::AddToCoffee.None), global::AddToCoffee.Milk =&gt; nameof(global::AddToCoffee.Milk), global::AddToCoffee.Sugar =&gt; nameof(global::AddToCoffee.Sugar), global::AddToCoffee.Biscuit =&gt; nameof(global::AddToCoffee.Biscuit), _ =&gt; value.ToString(), }; /// &lt;summary&gt; /// Determines whether one or more bit fields are set in the current instance. /// Equivalent to calling &lt;see cref=&quot;global::System.Enum.HasFlag&quot; /&gt; on &lt;paramref name=&quot;value&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The value of the instance to investigate&lt;/param&gt; /// &lt;param name=&quot;flag&quot;&gt;The flag to check for&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the fields set in the flag are also set in the current instance; otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; /// &lt;remarks&gt;If the underlying value of &lt;paramref name=&quot;flag&quot;/&gt; is zero, the method returns true. /// This is consistent with the behaviour of &lt;see cref=&quot;global::System.Enum.HasFlag&quot; /&gt;&lt;/remarks&gt; public static bool HasFlagFast(this global::AddToCoffee value, global::AddToCoffee flag) =&gt; flag == 0 ? true : (value &amp; flag) == flag; /// &lt;summary&gt; /// Returns a boolean telling whether the given enum value exists in the enumeration. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The value to check if it's defined&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value exists in the enumeration, &lt;c&gt;false&lt;/c&gt; otherwise&lt;/returns&gt; public static bool IsDefined(global::AddToCoffee value) =&gt; value switch { global::AddToCoffee.None =&gt; true, global::AddToCoffee.Milk =&gt; true, global::AddToCoffee.Sugar =&gt; true, global::AddToCoffee.Biscuit =&gt; true, _ =&gt; false, }; /// &lt;summary&gt; /// Returns a boolean telling whether an enum with the given name exists in the enumeration. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The name to check if it's defined&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if a member with the name exists in the enumeration, &lt;c&gt;false&lt;/c&gt; otherwise&lt;/returns&gt; public static bool IsDefined(string name) =&gt; IsDefined(name, allowMatchingMetadataAttribute: false); /// &lt;summary&gt; /// Returns a boolean telling whether an enum with the given name exists in the enumeration, /// or if a member decorated with a &lt;c&gt;[Display]&lt;/c&gt; attribute /// with the required name exists. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The name to check if it's defined&lt;/param&gt; /// &lt;param name=&quot;allowMatchingMetadataAttribute&quot;&gt;If &lt;c&gt;true&lt;/c&gt;, considers the value of metadata attributes,otherwise ignores them&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if a member with the name exists in the enumeration, or a member is decorated /// with a &lt;c&gt;[Display]&lt;/c&gt; attribute with the name, &lt;c&gt;false&lt;/c&gt; otherwise&lt;/returns&gt; public static bool IsDefined(string name, bool allowMatchingMetadataAttribute) { return name switch { nameof(global::AddToCoffee.None) =&gt; true, nameof(global::AddToCoffee.Milk) =&gt; true, nameof(global::AddToCoffee.Sugar) =&gt; true, nameof(global::AddToCoffee.Biscuit) =&gt; true, _ =&gt; false, }; } #if NETCOREAPP &amp;&amp; !NETCOREAPP2_0 &amp;&amp; !NETCOREAPP1_1 &amp;&amp; !NETCOREAPP1_0 /// &lt;summary&gt; /// Returns a boolean telling whether an enum with the given name exists in the enumeration /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The name to check if it's defined&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if a member with the name exists in the enumeration, &lt;c&gt;false&lt;/c&gt; otherwise&lt;/returns&gt; public static bool IsDefined(in ReadOnlySpan&lt;char&gt; name) =&gt; IsDefined(name, allowMatchingMetadataAttribute: false); /// &lt;summary&gt; /// Returns a boolean telling whether an enum with the given name exists in the enumeration, /// or optionally if a member decorated with a &lt;c&gt;[Display]&lt;/c&gt; attribute /// with the required name exists. /// Slower then the &lt;see cref=&quot;IsDefined(string, bool)&quot; /&gt; overload, but doesn't allocate memory./&gt; /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The name to check if it's defined&lt;/param&gt; /// &lt;param name=&quot;allowMatchingMetadataAttribute&quot;&gt;If &lt;c&gt;true&lt;/c&gt;, considers the value of metadata attributes,otherwise ignores them&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if a member with the name exists in the enumeration, or a member is decorated /// with a &lt;c&gt;[Display]&lt;/c&gt; attribute with the name, &lt;c&gt;false&lt;/c&gt; otherwise&lt;/returns&gt; public static bool IsDefined(in ReadOnlySpan&lt;char&gt; name, bool allowMatchingMetadataAttribute) { return name switch { ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.None).AsSpan(), global::System.StringComparison.Ordinal) =&gt; true, ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Milk).AsSpan(), global::System.StringComparison.Ordinal) =&gt; true, ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Sugar).AsSpan(), global::System.StringComparison.Ordinal) =&gt; true, ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Biscuit).AsSpan(), global::System.StringComparison.Ordinal) =&gt; true, _ =&gt; false, }; } #endif /// &lt;summary&gt; /// Converts the string representation of the name or numeric value of /// an &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; to the equivalent instance. /// The return value indicates whether the conversion succeeded. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The case-sensitive string representation of the enumeration name or underlying value to convert&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;When this method returns, contains an object of type /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; whose /// value is represented by &lt;paramref name=&quot;value&quot;/&gt; if the parse operation succeeds. /// If the parse operation fails, contains the default value of the underlying type /// of &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. This parameter is passed uninitialized.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value parameter was converted successfully; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse( #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif string? name, out global::AddToCoffee value) =&gt; TryParse(name, out value, false, false); /// &lt;summary&gt; /// Converts the string representation of the name or numeric value of /// an &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; to the equivalent instance. /// The return value indicates whether the conversion succeeded. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The string representation of the enumeration name or underlying value to convert&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;When this method returns, contains an object of type /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; whose /// value is represented by &lt;paramref name=&quot;value&quot;/&gt; if the parse operation succeeds. /// If the parse operation fails, contains the default value of the underlying type /// of &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. This parameter is passed uninitialized.&lt;/param&gt; /// &lt;param name=&quot;ignoreCase&quot;&gt;&lt;c&gt;true&lt;/c&gt; to read value in case insensitive mode; &lt;c&gt;false&lt;/c&gt; to read value in case sensitive mode.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value parameter was converted successfully; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse( #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif string? name, out global::AddToCoffee value, bool ignoreCase) =&gt; TryParse(name, out value, ignoreCase, false); /// &lt;summary&gt; /// Converts the string representation of the name or numeric value of /// an &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; to the equivalent instance. /// The return value indicates whether the conversion succeeded. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The string representation of the enumeration name or underlying value to convert&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;When this method returns, contains an object of type /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; whose /// value is represented by &lt;paramref name=&quot;value&quot;/&gt; if the parse operation succeeds. /// If the parse operation fails, contains the default value of the underlying type /// of &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. This parameter is passed uninitialized.&lt;/param&gt; /// &lt;param name=&quot;ignoreCase&quot;&gt;&lt;c&gt;true&lt;/c&gt; to read value in case insensitive mode; &lt;c&gt;false&lt;/c&gt; to read value in case sensitive mode.&lt;/param&gt; /// &lt;param name=&quot;allowMatchingMetadataAttribute&quot;&gt;If &lt;c&gt;true&lt;/c&gt;, considers the value included in metadata attributes such as /// &lt;c&gt;[Display]&lt;/c&gt; attribute when parsing, otherwise only considers the member names.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value parameter was converted successfully; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse( #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif string? name, out global::AddToCoffee value, bool ignoreCase, bool allowMatchingMetadataAttribute) { if (ignoreCase) { switch (name) { case string s when s.Equals(nameof(global::AddToCoffee.None), global::System.StringComparison.OrdinalIgnoreCase): value = global::AddToCoffee.None; return true; case string s when s.Equals(nameof(global::AddToCoffee.Milk), global::System.StringComparison.OrdinalIgnoreCase): value = global::AddToCoffee.Milk; return true; case string s when s.Equals(nameof(global::AddToCoffee.Sugar), global::System.StringComparison.OrdinalIgnoreCase): value = global::AddToCoffee.Sugar; return true; case string s when s.Equals(nameof(global::AddToCoffee.Biscuit), global::System.StringComparison.OrdinalIgnoreCase): value = global::AddToCoffee.Biscuit; return true; case string s when int.TryParse(name, out var val): value = (global::AddToCoffee)val; return true; default: value = default; return false; } } else { switch (name) { case nameof(global::AddToCoffee.None): value = global::AddToCoffee.None; return true; case nameof(global::AddToCoffee.Milk): value = global::AddToCoffee.Milk; return true; case nameof(global::AddToCoffee.Sugar): value = global::AddToCoffee.Sugar; return true; case nameof(global::AddToCoffee.Biscuit): value = global::AddToCoffee.Biscuit; return true; case string s when int.TryParse(name, out var val): value = (global::AddToCoffee)val; return true; default: value = default; return false; } } } #if NETCOREAPP &amp;&amp; !NETCOREAPP2_0 &amp;&amp; !NETCOREAPP1_1 &amp;&amp; !NETCOREAPP1_0 /// &lt;summary&gt; /// Converts the span representation of the name or numeric value of /// an &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; to the equivalent instance. /// The return value indicates whether the conversion succeeded. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The span representation of the enumeration name or underlying value to convert&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;When this method returns, contains an object of type /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; whose /// value is represented by &lt;paramref name=&quot;value&quot;/&gt; if the parse operation succeeds. /// If the parse operation fails, contains the default value of the underlying type /// of &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. This parameter is passed uninitialized.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value parameter was converted successfully; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse( #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif in ReadOnlySpan&lt;char&gt; name, out global::AddToCoffee value) =&gt; TryParse(name, out value, false, false); /// &lt;summary&gt; /// Converts the span representation of the name or numeric value of /// an &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; to the equivalent instance. /// The return value indicates whether the conversion succeeded. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The span representation of the enumeration name or underlying value to convert&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;When this method returns, contains an object of type /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; whose /// value is represented by &lt;paramref name=&quot;value&quot;/&gt; if the parse operation succeeds. /// If the parse operation fails, contains the default value of the underlying type /// of &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. This parameter is passed uninitialized.&lt;/param&gt; /// &lt;param name=&quot;ignoreCase&quot;&gt;&lt;c&gt;true&lt;/c&gt; to read value in case insensitive mode; &lt;c&gt;false&lt;/c&gt; to read value in case sensitive mode.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value parameter was converted successfully; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse( #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif in ReadOnlySpan&lt;char&gt; name, out global::AddToCoffee value, bool ignoreCase) =&gt; TryParse(name, out value, ignoreCase, false); /// &lt;summary&gt; /// Converts the span representation of the name or numeric value of /// an &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; to the equivalent instance. /// The return value indicates whether the conversion succeeded. /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;The span representation of the enumeration name or underlying value to convert&lt;/param&gt; /// &lt;param name=&quot;result&quot;&gt;When this method returns, contains an object of type /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt; whose /// value is represented by &lt;paramref name=&quot;result&quot;/&gt; if the parse operation succeeds. /// If the parse operation fails, contains the default value of the underlying type /// of &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. This parameter is passed uninitialized.&lt;/param&gt; /// &lt;param name=&quot;ignoreCase&quot;&gt;&lt;c&gt;true&lt;/c&gt; to read value in case insensitive mode; &lt;c&gt;false&lt;/c&gt; to read value in case sensitive mode.&lt;/param&gt; /// &lt;param name=&quot;allowMatchingMetadataAttribute&quot;&gt;If &lt;c&gt;true&lt;/c&gt;, considers the value included in metadata attributes such as /// &lt;c&gt;[Display]&lt;/c&gt; attribute when parsing, otherwise only considers the member names.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the value parameter was converted successfully; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public static bool TryParse( #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif in ReadOnlySpan&lt;char&gt; name, out global::AddToCoffee result, bool ignoreCase, bool allowMatchingMetadataAttribute) { if (ignoreCase) { switch (name) { case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.None).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase): result = global::AddToCoffee.None; return true; case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Milk).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase): result = global::AddToCoffee.Milk; return true; case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Sugar).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase): result = global::AddToCoffee.Sugar; return true; case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Biscuit).AsSpan(), global::System.StringComparison.OrdinalIgnoreCase): result = global::AddToCoffee.Biscuit; return true; case ReadOnlySpan&lt;char&gt; current when int.TryParse(name, out var numericResult): result = (global::AddToCoffee)numericResult; return true; default: result = default; return false; } } else { switch (name) { case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.None).AsSpan(), global::System.StringComparison.Ordinal): result = global::AddToCoffee.None; return true; case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Milk).AsSpan(), global::System.StringComparison.Ordinal): result = global::AddToCoffee.Milk; return true; case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Sugar).AsSpan(), global::System.StringComparison.Ordinal): result = global::AddToCoffee.Sugar; return true; case ReadOnlySpan&lt;char&gt; current when current.Equals(nameof(global::AddToCoffee.Biscuit).AsSpan(), global::System.StringComparison.Ordinal): result = global::AddToCoffee.Biscuit; return true; case ReadOnlySpan&lt;char&gt; current when int.TryParse(name, out var numericResult): result = (global::AddToCoffee)numericResult; return true; default: result = default; return false; } } } #endif /// &lt;summary&gt; /// Retrieves an array of the values of the members defined in /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. /// Note that this returns a new array with every invocation, so /// should be cached if appropriate. /// &lt;/summary&gt; /// &lt;returns&gt;An array of the values defined in &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;&lt;/returns&gt; public static global::AddToCoffee[] GetValues() { return new[] { global::AddToCoffee.None, global::AddToCoffee.Milk, global::AddToCoffee.Sugar, global::AddToCoffee.Biscuit, }; } /// &lt;summary&gt; /// Retrieves an array of the names of the members defined in /// &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;. /// Note that this returns a new array with every invocation, so /// should be cached if appropriate. /// &lt;/summary&gt; /// &lt;returns&gt;An array of the names of the members defined in &lt;see cref=&quot;global::AddToCoffee&quot; /&gt;&lt;/returns&gt; public static string[] GetNames() { return new[] { nameof(global::AddToCoffee.None), nameof(global::AddToCoffee.Milk), nameof(global::AddToCoffee.Sugar), nameof(global::AddToCoffee.Biscuit), }; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#download-example-net--c","content":" tip Download Example project NetEscapades.EnumGenerators   ","version":"Next","tagName":"h3"},{"title":"Share NetEscapades.EnumGenerators​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#share-netescapadesenumgenerators","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"NetEscapades.EnumGenerators by Andrew Lock","url":"/RSCG_Examples/v2/docs/NetEscapades.EnumGenerators#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"OptionToStringGenerator by Jim W","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#info","content":" info Name: OptionToStringGenerator This library contains an incremental source generator for formatting configuration objects. Author: Jim W NuGet:https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/ You can find more details at https://github.com/Seekatar/OptionToStringGenerator Source: https://github.com/Seekatar/OptionToStringGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#original-readme","content":" note OptionsToString Incremental Source Generator Problem: I have a configuration class for use with IOptions and I want to safely log out its values at runtime. Solution: Use an incremental source generator to generate an extension method to get a string with masked values for the properties. The methods to mask the values can be used outside of the generated code, too. See below for details. This package generates an OptionsToStringextension method for a class. Using attributes you can control how the values are masked. You can use this to log out the values of your configuration at startup, or via a REST endpoint. Quick Example​ Edit the source of your configuration class and decorate it with attributes. namespace Test; [OptionsToString] internal class PropertySimple { [OutputMask] public string Secret { get; set; } = &quot;Secret&quot;; public int RetryLimit { get; set; } = 5; [OutputRegex(Regex = &quot;User Id=([^;]+).*Password=([^;]+)&quot;)] public string ConnectionString { get; set; } = &quot;Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;&quot;; } // usage _logger.LogInformation(new PropertySimple().OptionsToString()); Output: Test.PropertySimple: Secret : &quot;******&quot; RetryLimit : 5 ConnectionString : &quot;Server=myServerAddress;Database=myDataBase;User Id=***;Password=***;&quot; Alternatively, if you don't have the code for PropertySimple this will produce the same output. internal class PropertyConfig { [OutputPropertyMask(nameof(IOptionsSimple.Secret))] [OutputPropertyRegex(nameof(IOptionsSimple.ConnectionString), Regex = &quot;User Id=([^;]+).*Password=([^;]+)&quot;)] public PropertySimple? PropertySimple { get; set; } } // usage _logger.LogInformation(new PropertyConfig().PropertySimple.OptionsToString()); Usage​ Add the OptionToStringGenerator NuGet package to your project.If you can update the class Decorate a class with the OptionsToString attribute.Optionally decorate properties with an Output* attribute to specify how you want them to be masked. If you don't decorate a property, its full text is dumped out. If you don't want to or can't update the class Add a property to your class of the Type you want to dump out.Decorate the property with multiple OutputProperty* attributes to control how the properties are masked. Example of Editing a Class​ Here's a larger sample class that uses all the different types of masking. Anything without an attribute has its value written out in the clear. The output follows. namespace Test; using Seekatar.OptionToStringGenerator; [OptionsToString] public class PublicOptions { public class AClass { public string Name { get; set; } = &quot;maybe this is secret&quot;; public override string ToString() =&gt; $&quot;{nameof(AClass)}: {Name}&quot;; } public string PlainText { get; set; } = &quot;hi mom&quot;; public char Why { get; set; } = 'Y'; public int PlainInt { get; set; } = 42; public double PlainDouble { get; set; } = 3.141; public double PlainDecimal { get; set; } = 6.02; public DateTime PlainDateTime { get; set; } = new DateTime(2020, 1, 2, 3, 4, 5); public DateOnly PlainDatOnly { get; set; } = new DateOnly(2020, 1, 2); public TimeOnly PlainTimeOnly { get; set; } = new TimeOnly(12, 23, 2); public TimeSpan TimeSpan { get; set; } = new TimeSpan(1, 2, 3, 4, 5); public Guid UUID { get; set; } = Guid.Parse(&quot;6536b25c-3a45-48d8-8ea3-756e19f5bad1&quot;); public string? NullItem { get; set; } public AClass AnObject { get; set; } = new(); [OutputRegex(Regex = @&quot;AClass\\:\\s+(.*)&quot;)] public AClass AMaskedObject { get; set; } = new(); [OutputMask] public string FullyMasked { get; set; } = &quot;thisisasecret&quot;; [OutputMask(PrefixLen=3)] public string FirstThreeNotMasked { get; set; } = &quot;abc1233435667&quot;; [OutputMask(SuffixLen=3)] public string LastThreeNotMasked { get; set; } = &quot;abc1233435667&quot;; [OutputMask(PrefixLen = 3, SuffixLen=3)] public string FirstAndLastThreeNotMasked { get; set; } = &quot;abc1233435667&quot;; [OutputMask(PrefixLen = 100)] public string NotMaskedSinceLongLength { get; set; } = &quot;abc1233435667&quot;; [OutputLengthOnly] public string LengthOnly { get; set; } = &quot;thisisasecretthatonlyshowsthelength&quot;; [OutputRegex(Regex=&quot;User Id=([^;]+).*Password=([^;]+)&quot;)] public string MaskUserAndPassword { get; set; } = &quot;Server=server;Database=db;User Id=myUsername;Password=myPassword;&quot;; [OutputRegex(Regex=&quot;User Id=([^;]+).*Password=([^;]+)&quot;,IgnoreCase=true)] public string MaskUserAndPasswordIgnoreCase { get; set; } = &quot;Server=server;Database=db;user Id=myUsername;Password=myPassword;&quot;; [OutputRegex(Regex = &quot;User Id=([^;]+).*Password=([^;]+)&quot;)] public string RegexNotMatched { get; set; } = &quot;Server=server;Database=db;user Id=myUsername;Password=myPassword;&quot;; public ConsoleColor Color { get; set; } = ConsoleColor.Red; [OutputIgnore] public string IgnoreMe { get; set; } = &quot;abc1233435667&quot;; } // usage var options = new PublicOptions(); _logger.LogInformation(options.OptionsToString()); The output has the class name (by default) followed by an indented list of all the properties' values masked as specified. Test.PublicOptions: PlainText : &quot;hi mom&quot; Why : &quot;Y&quot; PlainInt : 42 PlainDouble : 3.141 PlainDecimal : 6.02 PlainDateTime : 01/02/2020 03:04:05 PlainDatOnly : 01/02/2020 PlainTimeOnly : 12:23 TimeSpan : 1.02:03:04.0050000 UUID : 6536b25c-3a45-48d8-8ea3-756e19f5bad1 NullItem : null AnObject : &quot;AClass: maybe this is secret&quot; AMaskedObject : &quot;AClass: ***&quot; FullyMasked : &quot;*************&quot; FirstThreeNotMasked : &quot;abc**********&quot; LastThreeNotMasked : &quot;**********667&quot; FirstAndLastThreeNotMasked : &quot;abc*******667&quot; NotMaskedSinceLongLength : &quot;abc1233435667&quot; LengthOnly : Len = 35 MaskUserAndPassword : &quot;Server=server;Database=db;User Id=***;Password=***;&quot; MaskUserAndPasswordIgnoreCase : &quot;Server=server;Database=db;user Id=***;Password=***;&quot; RegexNotMatched : &quot;***Regex no match***!&quot; Color : Red Example of Using a Property​ Here's a similar example where you don't have the source for the class, or don't want to change it. In this case, you use multiple OutputProperty* attributes, one for each property you want to mask. This is from the tests where PropertyPublicClass is identical to PublicOptions, so the output will be the same aside from the class name. namespace Test; using Seekatar.OptionToStringGenerator; public class PropertyTestOptions { public MyClass(IOption&lt;PropertyPublicClass&gt; options, ILogger&lt;PropertyTestOptions&gt; logger) { _options =options.Value; logger.LogInformation(options.OptionsToString()); } [OutputPropertyRegex(nameof(PropertyPublicClass.AMaskedObject), Regex = @&quot;AClass\\:\\s+(.*)&quot;)] [OutputPropertyMask(nameof(PropertyPublicClass.FullyMasked))] [OutputPropertyMask(nameof(PropertyPublicClass.FirstThreeNotMasked), PrefixLen = 3)] [OutputPropertyMask(nameof(PropertyPublicClass.LastThreeNotMasked), SuffixLen = 3)] [OutputPropertyMask(nameof(PropertyPublicClass.FirstAndLastThreeNotMasked), PrefixLen = 3, SuffixLen = 3)] [OutputPropertyMask(nameof(PropertyPublicClass.NotMaskedSinceLongLength), PrefixLen = 100)] [OutputPropertyLengthOnly(nameof(PropertyPublicClass.LengthOnly))] [OutputPropertyRegex(nameof(PropertyPublicClass.MaskUserAndPassword), Regex = &quot;User Id=([^;]+).*Password=([^;]+)&quot;)] [OutputPropertyRegex(nameof(PropertyPublicClass.MaskUserAndPasswordIgnoreCase), Regex = &quot;User Id=([^;]+).*Password=([^;]+)&quot;, IgnoreCase = true)] [OutputPropertyRegex(nameof(PropertyPublicClass.RegexNotMatched), Regex = &quot;User Id=([^;]+).*Password=([^;]+)&quot;)] [OutputPropertyIgnore(nameof(PropertyPublicClass.IgnoreMe) )] public PropertyPublicClass? PublicClass { get; set; } } Notes​ All public properties are included by default and output as plain text.Properties will be in the order they are defined in the class, unless Sort=true is set on the OptionsToString attribute.Parent class properties are included by default. Use ExcludeParents = true on the OptionsToString attribute to exclude them.Use the OutputIgnore attribute to exclude a property.ToString() is called on the property's value, then the mask is applied. You can have a custom ToString() method on a class to format its output then it will be masked as the AClass example above.When editing the class, only one Output* attribute is allowed per property. If more than one is set, you'll get a compile warning, and the last attribute set will be used.Regex strings with back slashes need to use a verbatim string or escape the back slashes (e.g. @&quot;\\s+&quot; or &quot;\\\\s+&quot;).OutputRegex must have a Regex parameter, or you'll get a compile error.If the regex doesn't match the value, the output will be ***Regex no match***! to indicate it didn't match.To customize the formatting of masked output see below Formatting Options​ There are properties on the OptionsToStringAttribute for classes and OutputPropertyFormat for properties to control how the output is generated. Name\tDescription\tDefaultIndent\tThe indenting string\t&quot; &quot; (Two spaces) Separator\tThe name-value separator\t&quot;:&quot; Title\tThe title to use for the output. See below\tClass name Json\tFormat the output as JSON\tfalse Sort\tSort the properties\tfalse In addition to literal text, the Title parameter can include property names in braces. For example // for a class [OptionsToString(Title = nameof(TitleOptions) + &quot;_{StringProp}_{IntProp}&quot;)] public class TitleOptions { public int IntProp { get; set; } = 42; public string StringProp { get; set; } = &quot;hi mom&quot;; } // for a property internal class PropertyTestSimple { [OutputPropertyFormat(Title = nameof(TitleOptions) + &quot;_{StringProp}_{IntProp}&quot;)] public TitleOptions TitleOptions { get; set; } = new (); } Both will output TitleOptions_hi mom_42: IntProp : 42 StringProp : &quot;hi mom&quot; Per-Property Formatting Options​ For types that take a format string to ToString() such as DateTime, numbers, etc., you can use the OutputFormatToString attribute. You can also supply a custom method to format a property. For example flattening an array and masking its values. The sample below shows a few examples: # comma separate thousands [OutputFormatToString(&quot;N0&quot;)] public int PlainInt { get; set; } = 423433; # two decimal places [OutputFormatToString(&quot;0.00&quot;)] public double PlainDouble { get; set; } = 3.141; # use the U format for DateTime [OutputFormatToString(&quot;R&quot;)] public DateTime PlainDateTime { get; set; } = new DateTime(2020, 1, 2, 3, 4, 5); [OutputFormatProvider(typeof(FormatOptions), nameof(MyFormatter))] public List&lt;string&gt; Secrets { get; set; } = new List&lt;string&gt; { &quot;secret&quot;, &quot;hushhush&quot;, &quot;psssst&quot; }; # mask each string in the array showing only the first 3 characters public static string? MyFormatter(List&lt;string&gt; o) { if (o is null) return null; return string.Join(&quot;,&quot;, o.Select(s =&gt; Mask.MaskSuffix(s, 3))); } Output: PlainInt : 423,433 PlainDouble : 3.14 PlainDateTime : Thu, 02 Jan 2020 03:04:05 GMT Secrets : &quot;sec***,hus*****,pss***&quot; Collections​ Instead of using OutputFormatProvider, you can create your own method to handle collections. The MessagingOptions test class does so by overriding ToString to get its options and all the children. public override string ToString() { var sb = new StringBuilder(this.OptionsToString()); sb.AppendLine(); foreach (var c in Consumers ?? new Dictionary&lt;string, ClientOptions&gt;()) { sb.AppendLine(c.Value.OptionsToString()); } foreach (var p in Producers ?? new Dictionary&lt;string, ClientOptions&gt;()) { sb.AppendLine(p.Value.OptionsToString()); } return sb.ToString(); } Attributes​ For a class use these attributes. Name\tOn\tDescriptionOptionsToString\tClass\tMarker for the class, and has formatting options OutputMask\tMember\tMask the value with asterisks, with optional prefix and suffix clear OutputRegex\tMember\tMask the value with a regex OutputLengthOnly\tMember\tOnly output the length of the value OutputIgnore\tMember\tIgnore the property OutputFormatToString\tMember\tFormat the value using ToString() with a format string OutputFormatProvider\tMember\tFormat the value using a custom method For a property, use these attributes on the property Name\tDescriptionOutputPropertyFormat\tOptional Formatting options OutputPropertyMask\tMask the value with asterisks, with optional prefix and suffix OutputPropertyRegex\tMask the value with a regex OutputPropertyLengthOnly\tOnly output the length of the value OutputPropertyIgnore\tIgnore the property Warnings and Errors​ If attributes have invalid parameters you will get warnings or errors from the compiler. They are documented here. Trouble Shooting​ Error CS9057​ You may get an error when compiling your code that uses this package. ##[error]#15 7.135 CSC : error CS9057: The analyzer assembly '/root/.nuget/packages/seekatar.optiontostringgenerator/0.1.4/analyzers/dotnet/cs/Seekatar.OptionToStringGenerator.dll' references version '4.6.0.0' of the compiler, which is newer than the currently running version '4.4.0.0'. You must use the .NET SDK 6.0.416 or higher. You can check your version with dotnet --list-sdks. Using Seekatar.Mask​ The methods used by the generated code to mask a value are available when you include the source generator NuGet package. They are in the Seekatar.Mask namespace. using static Seekatar.Mask; ... MaskSuffix(&quot;abc123&quot;, 3) // returns &quot;abc***&quot; Methods are as follows. Each of these corresponds to an attribute as described above. All take object? and return string?. Check each for parameters that control usage. Method\tDescriptionMaskAll\tReturn a string of the same length as the input, with all characters masked MaskLengthOnly\tReturn Len &lt;length&gt; MaskPrefix\tMask the prefix of the string, showing only a few suffix characters MaskPrefixSuffix\tShow only a few prefix and suffix characters MaskRegex\tMask capture groups of a regex MaskSuffix\tMask the suffix of the string, showing only a few prefix characters Implementation​ Big shout out to Andrew Lock and his blog series on incremental source generators. I used that as a starting point for this project. His blog tells his story of building a source generator and you learn better ways to do things as you progress through the blog. In particular, in the last entry he breaks out the Attributes into their own assembly. In the initial generator, he injects the Attributes as code with these lines in the Initialize method of the generator, which is the typical method like this: context.RegisterPostInitializationOutput(ctx =&gt; ctx.AddSource( &quot;ClassExtensionsAttribute.g.cs&quot;, SourceText.From(SourceGenerationHelper.Attribute, Encoding.UTF8))); He says this works fine unless someone uses InternalsVisibleTo to expose the internals of one assembly to another. He tried several things to solve this before coming up with a robust solution in part 8 of his series. There's quite a bit of advanced csproj editing that he covers to get it to work. I applied similar changes and everything but the unit tests worked. After viewing his repo, I found his original unit test helper methods to build the code on-the-fly for the unit tests was different. After picking up those changes, the unit tests worked. Basic Logic of OptionsToStringGenerator.Initialize()​ This has the implementation of IIncrementalGenerator.Initialize method. For this generator here's what I did: Look for classes with at least one attribute (predicate, which must be very fast)Look for ones with my OptionToStringAttribute (transform, which can be slower)Execute() generates the code Take the syntax and get the semantic model of the class, extracting the name, accessibility, and list of properties with a getGenerate the code for the extension method Branching Strategy​ Branch from main for new featuresPushes will trigger a build and test run using GitHub ActionsWhen ready, create a PR to mainTo push to the NuGet Gallery create a releases/vX.X.X branch and push to it. Debugging and Testing​ To debug the generator, the unit test project calls RunGeneratorsAndUpdateCompilation to run the generator and get the output. The unit test output will be the C# code for the extension method of the objects. The integration test project runs the generator then calls the extension methods and gets the output from it. In both cases, the output is written to files and the Verify package is used to compare the output to a snapshot file. For integration tests, if you make changes to the generator, you often have to restart Visual Studio to get it to load the new one. Links to Documentation​ These are links to the MS documentation for the items I used in the generator. ISymbol -- Base class for all semantic symbols IPropertySymbol -- Semantic for the property GetMethod -- is it a {get}DeclaredAccessibility -- is it public? INamedTypeSymbol -- More specific semantic for the class GetAttributesContainingNamespaceDeclaredAccessibilityGetMembers -- get all the members of the class Links​ Andrew Lock's blog series on incremental generators (Part 1)Verify snapshot test toolMS Build (csproj) Pack Doc covers some of the less frequently used optionsMS LoggerMessage source generator source code referenced by Andrew.MS .NET Generators' source code  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#about","content":" note Generating similar ToString method for classes with many properties. It can also generate for external classes.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references OptionToStringGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Seekatar.OptionToStringGenerator&quot; Version=&quot;0.3.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ClassExtensions.g.cs #nullable enable using static Seekatar.Mask; namespace Seekatar.OptionToStringGenerator { public static partial class ClassExtensions { internal static string OptionsToString(this Class2String.Person o) { return $@&quot;Class2String.Person: FirstName : {Format(o?.FirstName,prefixLen:3,suffixLen:0)} LastName : {Format(o?.LastName,prefixLen:0,suffixLen:3)} FUllName : {Format(o?.FUllName)} &quot;; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#download-example-net--c","content":" tip Download Example project OptionToStringGenerator   ","version":"Next","tagName":"h3"},{"title":"Share OptionToStringGenerator​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#share-optiontostringgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/OptionToStringGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"OptionToStringGenerator by Jim W","url":"/RSCG_Examples/v2/docs/OptionToStringGenerator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"Pekspro.BuildInformationGenerator by pekspro","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#info","content":" info Name: Pekspro.BuildInformationGenerator A source generator for creating build information, like build time and commit id. Author: pekspro NuGet:https://www.nuget.org/packages/Pekspro.BuildInformationGenerator/ You can find more details at https://github.com/pekspro/BuildInformationGenerator Source: https://github.com/pekspro/BuildInformationGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#original-readme","content":" note Pekspro.BuildInformationGenerator This project simplifies the process of adding build information to your .NET projects. It uses a source generator to embed details like build time, commit ID and branch directly into your code. By default, the values are faked in debug mode. This can be changed in the[BuildInformation] attribute with the FakeIfDebug property. Usage​ Create a new partial class in your project and add the [BuildInformation](from the Pekspro.BuildInformationGenerator namespace) attribute and define which information you want. For example: [BuildInformation(AddBuildTime = true, AddGitCommitId = true)] partial class MyBuildInformation { } Constants will automatically be added to this class that you can use like this: Console.WriteLine($&quot;Build time: {MyBuildInformation.BuildTime}&quot;); Console.WriteLine($&quot;Commit id: {MyBuildInformation.Git.CommitId}&quot;); Installation​ Add the package to your application with: dotnet add package Pekspro.BuildInformationGenerator This adds a &lt;PackageReference&gt; to your project. It's recommended that you also add the attributes PrivateAssets and ExcludeAssets like below to exclude the source generator to your final assembly: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Pekspro.BuildInformationGenerator&quot; Version=&quot;0.2.0&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; Setting PrivateAssets=&quot;all&quot; means any projects referencing this one won't get a reference to the Pekspro.BuildInformationGenerator package. Setting ExcludeAssets=&quot;runtime&quot; ensures thePekspro.BuildInformationGenerator.Attributes.dll file is not copied to your build output (it is not required at runtime). Configuration​ The [BuildInformation] attribute has a number of properties you can set to control the generated class. Property\tDescriptionAddBuildTime\tBuild time (in UTC). AddLocalBuildTime\tLocal build time. AddAssemblyVersion\tAssembly version. AddOSVersion\tOS version of the machine where the build happens. AddGitCommitId\tCommit id. AddGitBranch\tBranch name. AddDotNetSdkVersion\t.NET SDK version. AddWorkloadMauiVersion\tWorkload for .NET MAUI. AddWorkloadWasmToolsVersion\tWorkload for WebAssembly tools. If everything is set to true, the generated class will look like this: static partial class BuildInfoAll { /// &lt;summary&gt; /// Build time: 2024-06-22 09:57:54 /// Value was taken from the system clock. /// &lt;/summary&gt; public static readonly global::System.DateTime BuildTime = new global::System.DateTime(638546470747876765L, global::System.DateTimeKind.Utc); /// &lt;summary&gt; /// Local build time: 2024-06-22 11:57:54 (+02:00) /// Value was taken from the system clock. /// &lt;/summary&gt; public static readonly global::System.DateTimeOffset LocalBuildTime = new global::System.DateTimeOffset(638546542747876765L, new global::System.TimeSpan(72000000000)); /// &lt;summary&gt; /// Build information related to git. /// &lt;/summary&gt; static public partial class Git { /// &lt;summary&gt; /// The commit id in git at the time of build. /// Value was taken from the AssemblyInformationalVersion attribute. /// &lt;/summary&gt; public const string CommitId = &quot;552a8218395c744446b12d2e7a2662ce19ddecbb&quot;; /// &lt;summary&gt; /// The short commit id in git at the time of build. /// Value was taken from the AssemblyInformationalVersion attribute. /// &lt;/summary&gt; public const string ShortCommitId = &quot;552a8218&quot;; /// &lt;summary&gt; /// The git branch used at build time. /// Value was taken from the git branch command. /// &lt;/summary&gt; public const string Branch = &quot;main&quot;; } /// &lt;summary&gt; /// Version of the assembly. /// Value was taken from assembly version attribute. /// &lt;/summary&gt; public const string AssemblyVersionString = &quot;0.2.0.0&quot;; /// &lt;summary&gt; /// OS version of the building machine. /// Value was taken from Environment.OSVersion. /// &lt;/summary&gt; public const string OSVersion = &quot;Microsoft Windows NT 10.0.22631.0&quot;; /// &lt;summary&gt; /// .NET SDK version used at build time. /// Value was taken from the dotnet --version command. /// &lt;/summary&gt; public const string DotNetSdkVersion = &quot;8.0.205&quot;; /// &lt;summary&gt; /// Build information related to .NET Workloads. /// &lt;/summary&gt; static public partial class Workloads { /// &lt;summary&gt; /// MAUI version used at build time. /// Value was taken from the dotnet workload list command. /// &lt;/summary&gt; public const string MauiVersion = &quot;8.0.7/8.0.100&quot;; /// &lt;summary&gt; /// wasm-tools version used at build time. /// Value was taken from the dotnet workload list command. /// &lt;/summary&gt; public const string WasmToolsVersion = &quot;&quot;; } } You can view your generated code by right clicking on your class name and selecting Go to definition. Another option is to add this to your .csproj file: &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\$(Configuration)\\GeneratedFiles&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; You will then find the file in the obj directory. Performance​ You can specify if you want to have faked or real values: Property\tDefault\tDescriptionFakeIfDebug\ttrue\tFake values if DEBUG is defined. FakeIfRelease\tfalse\tFake values if RELEASE is defined. To get the real values, BuildInformationGenerator might need to start a process. This should be fast, but probably nothing you want during normal development. In Visual Studio, a source generator can be called very often (every keystroke), so try to use fake values in development. Property\tData sourceBuildTime\tDateTimeOffset. LocalBuildTime\tDateTimeOffset. AssemblyVersion\tAssemblyVersion attribute. OSVersion\tEnvironment.OSVersion. Git.CommitId\tAssemblyInformationalVersionAttribute attribute, by default but also the process git rev-parse HEAD as a fallback. Git.Branch\tProcess git branch --show-current. The environment variable BUILD_SOURCEBRANCHNAME might be used instead, that is automatically set in Azure Devops where git cannot be used to the the branch. DotNetSdkVersion\tProcess dotnet --version. Workloads.MauiVersion\tProcess dotnet workload list. Workloads.WasmToolsVersion\tProcess dotnet workload list Requirements​ This source generator requires the .NET 7 SDK. You can target earlier frameworks like .NET Core 3.1 etc, but the SDK must be at least 7.0.100. Credits​ This project is heavily inspired by theNetEscapades.EnumGeneratorsproject.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#about","content":" note adding git build information  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csMyBuildInfo.cs This is the CSharp Project that references Pekspro.BuildInformationGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Pekspro.BuildInformationGenerator&quot; Version=&quot;0.2.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MyBuildInfo.g.cs //--------------------------------------------------------------------------------------- // &lt;auto-generated&gt; // This code was generated by the Pekspro.BuildInformationGenerator source generator. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //--------------------------------------------------------------------------------------- namespace BuildInfo { /// &lt;summary&gt; /// Build information. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Pekspro.BuildInformationGenerator&quot;, &quot;0.2.0&quot;)] static partial class MyBuildInfo { /// &lt;summary&gt; /// Build time: 2025-07-21 05:53:23 /// Value was taken from the system clock. /// &lt;/summary&gt; public static readonly global::System.DateTime BuildTime = new global::System.DateTime(638886740032443853L, global::System.DateTimeKind.Utc); /// &lt;summary&gt; /// Local build time: 2025-07-21 08:53:23 (+03:00) /// Value was taken from the system clock. /// &lt;/summary&gt; public static readonly global::System.DateTimeOffset LocalBuildTime = new global::System.DateTimeOffset(638886848032443853L, new global::System.TimeSpan(108000000000)); /// &lt;summary&gt; /// Build information related to git. /// &lt;/summary&gt; static public partial class Git { /// &lt;summary&gt; /// The commit id in git at the time of build. /// Value was taken from the AssemblyInformationalVersion attribute. /// &lt;/summary&gt; public const string CommitId = &quot;cde253eca53efd2602cf42cb93295671cba5a418&quot;; /// &lt;summary&gt; /// The short commit id in git at the time of build. /// Value was taken from the AssemblyInformationalVersion attribute. /// &lt;/summary&gt; public const string ShortCommitId = &quot;cde253ec&quot;; #warning An error occurred while getting the git branch: An error occurred trying to start process 'git' with working directory 'D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Pekspro.BuildInformationGenerator\\src\\BuildInfo'. The system cannot find the file specified. /// &lt;summary&gt; /// The git branch used at build time. /// /// &lt;/summary&gt; public const string Branch = &quot;&quot;; } /// &lt;summary&gt; /// Version of the assembly. /// Value was taken from assembly version attribute. /// &lt;/summary&gt; public const string AssemblyVersionString = &quot;1.0.0.0&quot;; /// &lt;summary&gt; /// OS version of the building machine. /// Value was taken from Environment.OSVersion. /// &lt;/summary&gt; public const string OSVersion = &quot;Microsoft Windows NT 10.0.26100.0&quot;; /// &lt;summary&gt; /// .NET SDK version used at build time. /// Value was taken from the dotnet --version command. /// &lt;/summary&gt; public const string DotNetSdkVersion = &quot;9.0.302&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#download-example-net--c","content":" tip Download Example project Pekspro.BuildInformationGenerator   ","version":"Next","tagName":"h3"},{"title":"Share Pekspro.BuildInformationGenerator​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#share-peksprobuildinformationgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Pekspro.BuildInformationGenerator by pekspro","url":"/RSCG_Examples/v2/docs/Pekspro.BuildInformationGenerator#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#info","content":" info Name: PlantUmlClassDiagramGenerator This tool is designed to generate PlantUML class diagrams from C# source code. Leveraging SourceGenerator functionality, it analyzes the source code and produces PlantUML class diagrams. Author: Hirotada Kobayashi NuGet:https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/ https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/ You can find more details at https://github.com/pierre3/PlantUmlClassDiagramGenerator/ Source: https://github.com/pierre3/PlantUmlClassDiagramGenerator/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#original-readme","content":" note English | 简体中文 PlantUmlClassDiagramGenerator This is a generator to create a class-diagram of PlantUML from the C# source code. README.md Version revision history Version\tCommit\tComment1.1\te73b4fe\tAdd &quot;-excludeUmlBeginEndTags&quot; option 1.0\t70bb820\tBecause the README.md for other languages is not always updated at the same time, a version number is needed New Feature in Development​ PlantUmlClassDiagramGenerator.SourceGenerator This feature is currently in alpha testing phase. Please test it out and provide your feedback. We greatly appreciate it. Visual Studio Code Extension​ C# to PlantUML .Net Core global tools​ Nuget Gallery: https://www.nuget.org/packages/PlantUmlClassDiagramGenerator Installation​ Download and install the .NET 8.0 SDK or newer. Once installed, run the following command. dotnet tool install --global PlantUmlClassDiagramGenerator Usage​ Run the &quot;puml-gen&quot; command. puml-gen InputPath [OutputPath] [-dir] [-public | -ignore IgnoreAccessibilities] [-excludePaths ExcludePathList] [-createAssociation] InputPath: (Required) Sets a input source file or directory name.OutputPath: (Optional) Sets a output file or directory name. If you omit this option, plantuml files are outputted to same directory as the input files.-dir: (Optional) Specify when InputPath and OutputPath are directory names.-public: (Optional) If specified, only public accessibility members are output.-ignore: (Optional) Specify the accessibility of members to ignore, with a comma separated list.-excludePaths: (Optional) Specify the exclude file and directory. Specifies a relative path from the &quot;InputPath&quot;, with a comma separated list. To exclude multiple paths, which contain a specific folder name, preceed the name by &quot;**/&quot;. Example: &quot;**/bin&quot;-createAssociation: (Optional) Create object associations from references of fields and properites.-allInOne: (Optional) Only if -dir is set: copy the output of all diagrams to file include.puml (this allows a PlanUMLServer to render it).-attributeRequired: (Optional) When this switch is enabled, only types with &quot;PlantUmlDiagramAttribute&quot; in the type declaration will be output.-excludeUmlBeginEndTags: (Optional) When this switch is enabled, it will exclude the &quot;@startuml&quot; and &quot;@enduml&quot; tags from the puml file. examples puml-gen C:\\Source\\App1\\ClassA.cs -public puml-gen C:\\Source\\App1 C:\\PlantUml\\App1 -dir -ignore Private,Protected -createAssociation -allInOne puml-gen C:\\Source\\App1 C:\\PlantUml\\App1 -dir -excludePaths bin,obj,Properties Specification for conversion to PlantUML​ Type Declaration​ Type Keywords​ C#\tPlantUMLclass\tclass struct\tstruct interface\tinterface enum\tenum record\t&lt;&lt;record&gt;&gt; class Type Modifiers​ C#\tPlantUMLabstract\tabstract static\t&lt;&lt;static&gt;&gt; partial\t&lt;&lt;partial&gt;&gt; sealed\t&lt;&lt;sealed&gt;&gt; C# class ClassA { } struct StructA { } interface InterfaceA { } record RecordA { } abstract class AbstractClass { } static class StaticClass { } sealed partial class ClassB{ } enum EnumType{ Apple, Orange, Grape } PlantUML @startuml class ClassA { } struct StructA { } interface InterfaceA { } class RecordA &lt;&lt;record&gt;&gt; { } abstract class AbstractClass { } class StaticClass &lt;&lt;static&gt;&gt; { } class ClassB &lt;&lt;sealed&gt;&gt; &lt;&lt;partial&gt;&gt; { } enum EnumType { Apple, Orange, Grape, } @enduml Generics Type​ C# class GenericsType&lt;T1&gt;{ } class GenericsType&lt;T1,T2&gt;{ } PlantUML class &quot;GenericsType`1&quot;&lt;T1&gt;{ } class &quot;GenericsType`2&quot;&lt;T1,T2&gt;{ } Member Declaration​ Accessibility Modifiers​ C#\tPlantUMLpublic\t+ internal\t&lt;&lt;internal&gt;&gt; protected internal\t# &lt;&lt;internal&gt;&gt; protected\t# private\t- Modifiers​ C#\tPlantUMLabstract\t{abstract} static\t{static} virtual\t&lt;&lt;virtual&gt;&gt; override\t&lt;&lt;override&gt;&gt; new\t&lt;&lt;new&gt;&gt; readonly\t&lt;&lt;readonly&gt;&gt; event\t&lt;&lt;event&gt;&gt; Property Accessors​ C#\tPlantUMLint Prop {get; set;}\tProp : int &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; int Prop {get;}\tProp : int &lt;get&gt; int Prop {get; private set }\tProp : int &lt;&lt;get&gt;&gt;&lt;&lt;private set&gt;&gt; int Prop =&gt; 100;\tProp : int &lt;&lt;get&gt;&gt; C# abstract class AbstractClass { protected int _x; internal int _y; protected internal int _z; public abstract void AbstractMethod(); protected virtual void VirtualMethod(string s){ } public string BaseMethod(int n){ return &quot;&quot;; } } class ClassM : AbstractClass { public static readonly double PI =3.141592; public int PropA { get; set; } public int PropB { get; protected set; } public event EventHandler SomeEvent; public override void AbstractMethod(){ } protected override void VirtualMethod(string s) { } public override string ToString() { return &quot;override&quot;; } public new string BaseMethod(int n){ return &quot;new&quot;; } } PlantUML abstract class AbstractClass { # _x : int &lt;&lt;internal&gt;&gt; _y : int # &lt;&lt;internal&gt;&gt; _z : int + {abstract} AbstractMethod() : void # &lt;&lt;virtual&gt;&gt; VirtualMethod(s:string) : void + BaseMethod(n:int) : string } class ClassM { + {static} &lt;&lt;readonly&gt;&gt; PI : double = 3.141592 + PropA : int &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; + PropB : int &lt;&lt;get&gt;&gt; &lt;&lt;protected set&gt;&gt; + &lt;&lt;event&gt;&gt; SomeEvent : EventHandler + &lt;&lt;override&gt;&gt; AbstractMethod() : void # &lt;&lt;override&gt;&gt; VirtualMethod(s:string) : void + &lt;&lt;override&gt;&gt; ToString() : string + &lt;&lt;new&gt;&gt; BaseMethod(n:int) : string } AbstractClass &lt;|-- ClassM Field and Property Initializers​ Only literal initializers are output. C# class ClassC { private int fieldA = 123; public double Pi {get;} = 3.14159; protected List&lt;string&gt; Items = new List&lt;string&gt;(); } PlantUML class ClassC { - fieldA : int = 123 + Pi : double = 3.14159 # Items : List&lt;string&gt; } Nested Class Declaration​ Nested classes are expanded and associated with &quot;OuterClass + - InnerClass&quot;. C# class OuterClass { class InnerClass { struct InnerStruct { } } } PlantUML class OuterClass{ } class InnerClass{ } &lt;&lt;struct&gt;&gt; class InnerStruct { } OuterClass +- InnerClass InnerClass +- InnerStruct Inheritance Relationsips​ C# abstract class BaseClass { public abstract void AbstractMethod(); protected virtual int VirtualMethod(string s) =&gt; 0; } class SubClass : BaseClass { public override void AbstractMethod() { } protected override int VirtualMethod(string s) =&gt; 1; } interface IInterfaceA {} interface IInterfaceA&lt;T&gt;:IInterfaceA { T Value { get; } } class ImplementClass : IInterfaceA&lt;int&gt; { public int Value { get; } } PlantUML abstract class BaseClass { + {abstract} AbstractMethod() : void # &lt;&lt;virtual&gt;&gt; VirtualMethod(s:string) : int } class SubClass { + &lt;&lt;override&gt;&gt; AbstractMethod() : void # &lt;&lt;override&gt;&gt; VirtualMethod(s:string) : int } interface IInterfaceA { } interface &quot;IInterfaceA`1&quot;&lt;T&gt; { Value : T &lt;&lt;get&gt;&gt; } class ImplementClass { + Value : int &lt;&lt;get&gt;&gt; } BaseClass &lt;|-- SubClass IInterfaceA &lt;|-- &quot;IInterfaceA`1&quot; &quot;IInterfaceA`1&quot; &quot;&lt;int&gt;&quot; &lt;|-- ImplementClass Associations (from references of fields and properties)​ If you specify the &quot;createAssociation&quot; option, object associations is created from field and property references. C# class ClassA{ public IList&lt;string&gt; Strings{get;} = new List&lt;string&gt;(); public Type1 Prop1{get;set;} public Type2 field1; } class Type1 { public int value1{get;set;} } class Type2{ public string string1{get;set;} public ExternalType Prop2 {get;set;} } PlantUML @startuml class ClassA { } class Type1 { + value1 : int &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; } class Type2 { + string1 : string &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; } class &quot;IList`1&quot;&lt;T&gt; { } ClassA o-&gt; &quot;Strings&lt;string&gt;&quot; &quot;IList`1&quot; ClassA --&gt; &quot;Prop1&quot; Type1 ClassA --&gt; &quot;field1&quot; Type2 Type2 --&gt; &quot;Prop2&quot; ExternalType @enduml Record types (with parameter list)​ Record types in C# 9 can have a parameter list. In these cases these parameters are added as properties to the class. C# record Person(string Name, int Age); record Group(string GroupName) { public Person[] Members { get; init; } } PlantUML @startuml class Person &lt;&lt;record&gt;&gt; { + Name : string &lt;&lt;get&gt;&gt; &lt;&lt;init&gt;&gt; + Age : int &lt;&lt;get&gt;&gt; &lt;&lt;init&gt;&gt; } class Group &lt;&lt;record&gt;&gt; { + GroupName : string &lt;&lt;get&gt;&gt; &lt;&lt;init&gt;&gt; + Members : Person[] &lt;&lt;get&gt;&gt; &lt;&lt;init&gt;&gt; } @enduml Attribute-based configuration​ You can add the package PlantUmlClassDiagramGenerator.Attributes to your C# project for attribute-based configuration. PlantUmlDiagramAttribute​ Only types to which PlantUmlDiagramAttribute has been added will be output. This attribute is enabled if the -attributeRequired switch is added to the command line argument. This attribute can be added only to type declalerations. classstructenumrecord class ClassA { public string Name { get; set; } public int Age { get; set; } } [PlantUmlDiagram] class ClassB { public string Name { get; set; } public int Age { get; set; } } Only ClassB with PlantUmlDiagramAttribute will be output. @startuml class ClassB { + Name : string &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; + Age : int &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; } @enduml PlantUmlIgnoreAttribute​ Elements with this attribute added are excluded from the output. [PlantUmlIgnore] class ClassA { public string Name { get; set; } public int Age { get; set; } } class ClassB { public string Name { get; set; } [PlantUmlIgnore] public int Age { get; set; } } class ClassC { public string Name { get; set; } public int Age { get; set; } [PlantUmlIgnore] public ClassC(string name, int age) =&gt; (Name, Age) = (name, age); public void MethodA(); [PlantUmlIgnore] public void MethodB(); } @startuml class ClassB { + Name : string } class ClassC { + Name : string + Age : int + MethodA() : void } @enduml PlantUmlAssociationAttribute​ By adding this attribute, you can define association between classes. This attribute can be added to properties, fields and method parameters. The details of the association are defined in the following properties. Name Specifies the type name on the leaf node side.If omitted, the name of the element to which the attribute is added is used. Association Specifies the edge portion of the association.Sets a valid string in PlantUML.If omitted, &quot;--&quot; is used. RootLabel Specifies the label to be displayed on the root node side.If omitted, nothing is displayed. Label Specifies the label to be displayed in the center of the edge.If omitted, nothing is displayed. LeafLabel Specifies the label to be displayed on the leaf node side.If omitted, nothing is displayed. class Parameters { public string A { get; set; } public string B { get; set; } } class CustomAssociationSample { [PlantUmlAssociation(Name = &quot;Name&quot;, Association = &quot;*--&gt;&quot;, LeafLabel = &quot;LeafLabel&quot;, Label= &quot;Label&quot;, RootLabel = &quot;RootLabel&quot;)] public ClassA A { get; set; } } class CollectionItemsSample { [PlantUmlAssociation(Name = &quot;Item&quot;, Association = &quot;o--&quot;, LeafLabel = &quot;0..*&quot;, Label = &quot;Items&quot;)] public IList&lt;Item&gt; Items { get; set; } } class MethodParamtersSample { public void Run([PlantUmlAssociation(Association = &quot;..&gt;&quot;, Label = &quot;use&quot;)] Parameters p) { Console.WriteLine($&quot;{p.A},{p.B}&quot;); } private ILogger logger; public MyClass([PlantUmlAssociation(Association = &quot;..&gt;&quot;, Label = &quot;Injection&quot;)] ILogger logger) { this.logger = logger; } } @startuml class Parameters { + A : string &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; + B : string &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; } class CustomAssociationSample { } class CollectionItemsSample { } class MethodParamtersSample { + Run(p:Parameters) : void + MyClass(logger:ILogger) } CustomAssociationSample &quot;RootLabel&quot; *--&gt; &quot;LeafLabel&quot; Name : &quot;Label&quot; CollectionItemsSample o-- &quot;0..*&quot; Item : &quot;Items&quot; MethodParamtersSample ..&gt; Parameters : &quot;use&quot; MethodParamtersSample ..&gt; ILogger : &quot;Injection&quot; @enduml PlantUmlIgnoreAssociationAttribute​ This attribute can be added to properties and fields. Properties (or fields) with this attribute are described as members of the class without any association. class User { public string Name { get; set; } public int Age { get; set; } } class ClassA { public static User DefaultUser { get; } public IList&lt;User&gt; Users { get; } public ClassA(IList&lt;User&gt; users) { Users = users; DefaultUser = new User() { Name = &quot;DefaultUser&quot;, Age = &quot;20&quot; }; } } class ClassB { [PlantUmlIgnoreAssociation] public static User DefaultUser { get; } [PlantUmlIgnoreAssociation] public IList&lt;User&gt; Users { get; } public ClassB(IList&lt;User&gt; users) { Users = users; DefaultUser = new User() { Name = &quot;DefaultUser&quot;, Age = &quot;20&quot; }; } } @startuml class User { + Name : string &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; + Age : int &lt;&lt;get&gt;&gt; &lt;&lt;set&gt;&gt; } class ClassA { + ClassA(users:IList&lt;User&gt;) } class ClassB { + {static} DefaultUser : User &lt;&lt;get&gt;&gt; + Users : IList&lt;User&gt; &lt;&lt;get&gt;&gt; + ClassB(users:IList&lt;User&gt;) } class &quot;IList`1&quot;&lt;T&gt; { } ClassA --&gt; &quot;DefaultUser&quot; User ClassA --&gt; &quot;Users&lt;User&gt;&quot; &quot;IList`1&quot; @enduml   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#about","content":" note Generating UML from class definitions  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references PlantUmlClassDiagramGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!--&lt;PackageReference Include=&quot;PlantUmlClassDiagramGenerator.Attributes&quot; Version=&quot;1.3.0.1&quot; /&gt;--&gt; &lt;PackageReference Include=&quot;PlantUmlClassDiagramGenerator.SourceGenerator&quot; Version=&quot;0.1.9-alpha&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;!--&lt;PropertyGroup Condition=&quot;'$(Configuration)|$(Platform)'=='Release|AnyCPU'&quot;&gt;--&gt; &lt;DefineConstants&gt;$(DefineConstants);GENERATE_PLANTUML&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attributes.csPerson.puml namespace PlantUmlClassDiagramGenerator.SourceGenerator.Attributes; [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Enum | System.AttributeTargets.Struct)] internal class PlantUmlDiagramAttribute : System.Attribute { }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#download-example-net--c","content":" tip Download Example project PlantUmlClassDiagramGenerator   ","version":"Next","tagName":"h3"},{"title":"Share PlantUmlClassDiagramGenerator​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#share-plantumlclassdiagramgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"PlantUmlClassDiagramGenerator by Hirotada Kobayashi","url":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"Podimo.ConstEmbed by Podimo","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#info","content":" info Name: Podimo.ConstEmbed A source generator that turns additional files into file constants in a generated namespace. This is an alternative approach to embedding files in C# source manually, or loading them manually as embedded resources via reflection. With ConstEmbed, you will never have to see a runtime error because you mistyped the name, as the constants are evaluated at compile-time. Author: Podimo NuGet:https://www.nuget.org/packages/Podimo.ConstEmbed/ You can find more details at https://github.com/podimo/Podimo.ConstEmbed Source: https://github.com/podimo/Podimo.ConstEmbed  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#original-readme","content":" note Podimo.ConstEmbed This project is a Source Generator which generates constant strings from files at compile-time. Using​ We use project files to control the generation of constants. You can see how these are used in Podimo.ExampleConsoleApp. License​ See LICENSE-APACHE, LICENSE-MIT.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#about","content":" note File content transformed to constants  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#example-source-csproj-source-files","content":" CSharp ProjectProgram.cscreateDB.sql This is the CSharp Project that references Podimo.ConstEmbed &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Podimo.ConstEmbed&quot; Version=&quot;1.0.2&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;!-- The namespace under which we generate the constants. --&gt; &lt;ConstEmbedNamespace&gt;MyAppNamespace&lt;/ConstEmbedNamespace&gt; &lt;!-- The visibility of the classes in which the constants are declared. --&gt; &lt;ConstEmbedVisibility&gt;public&lt;/ConstEmbedVisibility&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;sql/*.sql&quot; ConstEmbed=&quot;SQL&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;sql\\createDB.sql&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  SQL.createDB.g.cs namespace MyAppNamespace { public static partial class SQL { public const string createDB = @&quot;create database Andrei; GO; use Andrei; GO; &quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#download-example-net--c","content":" tip Download Example project Podimo.ConstEmbed   ","version":"Next","tagName":"h3"},{"title":"Share Podimo.ConstEmbed​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#share-podimoconstembed","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Podimo.ConstEmbed  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Podimo.ConstEmbed by Podimo","url":"/RSCG_Examples/v2/docs/Podimo.ConstEmbed#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"PMart.Enumeration by Martinho","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/PMart.Enumeration","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#info","content":" info Name: PMart.Enumeration Source code generator to easly create Enumeration classes. Author: Martinho NuGet:https://www.nuget.org/packages/PMart.Enumeration.Generator/ https://www.nuget.org/packages/PMart.Enumeration/ You can find more details at https://github.com/p-martinho/Enumeration Source: https://github.com/p-martinho/Enumeration  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#original-readme","content":" note PMart.Enumeration This set of libraries provides base classes to implement Enumeration classes, based on string values. It enables the strongly typed advantages, while using string enumerations. It has, also, the possibility to create new enumerations at runtime (let's call it Dynamic Enumerations). What are Enumeration Classes?​ Enumeration classes are alternatives to enum type in C#. They enable features of an object-oriented language without the limitations of the enum type. They are useful, for instance, for business related enumerations on Domain-Driven Design (DDD). For more information about enumeration classes, check the links on the section References. NuGet Packages​ PMart.Enumeration: The Enumeration base classes. PMart.Enumeration.EFCore: The Entity Framework Core support for PMart.Enumeration. PMart.Enumeration.JsonNet: The Newtonsoft Json.NET support for PMart.Enumeration. PMart.Enumeration.SystemTextJson: The System.Text.Json support for PMart.Enumeration. PMart.Enumeration.SwaggerGen: Support to generate Swagger documentation when using PMart.Enumeration. PMart.Enumeration.Mappers: Mappers and mapping extensions for Enumerations (includes mapper for Mapperly). PMart.Enumeration.Generator: A source generator to generate Enumeration classes from a few lines of code. Installation Install one or more of the available NuGet packages in your project. Use your IDE or the command: dotnet add package &lt;package name&gt; Usage An Enumeration is a class that holds a value of type string. Each Enumeration class should have declared one or more static instances to set the available enumeration members. Create a new enumeration class by extending Enumeration&lt;T&gt;, where T is the class itself.Add a private constructor, as in the bellow example.Create a public static readonly instance of the class for each enumeration member. Or you can use the Generator in PMart.Enumeration.Generator package to generate the code for you! Here is a sample for communication types: using PMart.Enumeration; namespace Enumeration.Sample.Enumerations; /// &lt;summary&gt; /// The communication type enumeration. /// &lt;/summary&gt; public class CommunicationType : Enumeration&lt;CommunicationType&gt; { public static readonly CommunicationType Email = new(&quot;Email&quot;); public static readonly CommunicationType Sms = new(&quot;SMS&quot;); public static readonly CommunicationType PushNotification = new(&quot;PushNotification&quot;); private CommunicationType(string value) : base(value) { } } Now, you can use it as an enumeration class, type safe, with all its advantages and features: public bool IsToSendEmail(CommunicationType communicationType) { return communicationType == CommunicationType.Email; } You can check some usage examples in the samples. Features​ The Enumeration classes enables the several features described bellow. For instance, you can add behavior, and/or you can use dynamic enumerations (created in runtime), etc. Value​ It is the string value that the enumeration class holds: CommunicationType.Email.Value; // returns &quot;Email&quot; The ToString() method also returns the value: CommunicationType.Email.ToString(); // returns &quot;Email&quot; GetMembers​ Get all the enumerations from an enumeration class: var allCommunicationTypes = CommunicationType.GetMembers(); // returns an IEnumerable&lt;CommunicationType&gt; with CommunicationType.Email, CommunicationType.Sms and CommunicationType.PushNotification var communicationTypesCount = CommunicationType.GetMembers().Count(); // returns 3 The list of possible enumerations is a Lazy object behind the scene, and it is evaluated only if needed. GetValues​ Get all the possible values of an enumeration class: var allCommunicationTypeValues = CommunicationType.GetValues(); // returns an IEnumerable&lt;string&gt; with &quot;Email&quot;, &quot;SMS&quot; and &quot;PushNotification&quot; var communicationTypeValuesCount = CommunicationType.GetValues().Count(); // returns 3 HasValue​ Find out if there is any enumeration member with a specific value (ignoring letters case): var hasValue = CommunicationType.HasValue(&quot;someUnknownValue&quot;); // false hasValue = CommunicationType.HasValue(&quot;Email&quot;); // true hasValue = CommunicationType.HasValue(&quot;EMAIL&quot;); // true GetFromValueOrDefault​ Get an enumeration instance from a string that matches the value of the enumeration (ignoring letters case), or null when there isn't any enumeration with that value: // Parse the string to Enumeration: var communicationType = CommunicationType.GetFromValueOrDefault(&quot;email&quot;); // returns CommunicationType.Email // Verify if exists an enumeration with the value (GetFromValueOrDefault returns null if there isn't any enumeration with the value). var isValid = communicationType is not null; // true Note: When there's instances with equivalent values (same value ignoring case), the GetValueOrDefault can return any of the instances (is nondeterministic). Therefore, enumeration members with equivalent values are not recommended. // Let's imagine we have these two members: // public static readonly CommunicationType Email = new(&quot;Email&quot;); // public static readonly CommunicationType EmailWithDifferentCase = new(&quot;EMAIL&quot;); // same value, different case (this is not recommended) var emailType = CommunicationType.GetFromValueOrDefault(&quot;Email&quot;); // this may return CommunicationType.Email or CommunicationType.EmailWithDifferentCase (they have equivalent values) var isSame = ReferenceEquals(emailType, CommunicationType.Email); // sometimes is true, sometimes is false, is nondeterministic var isEqual = emailType == EmailWithDifferentCase; // always true. Even if they are different instances, they are equal. Check the Equality section bellow. Equality​ Two different instances of a type derived from Enumeration are equal if they are from the same enumeration type and if the value of both is equivalent, ignoring letters case. // Let's imagine we have these two members: // public static readonly CommunicationType Email = new(&quot;Email&quot;); // public static readonly CommunicationType EmailWithDifferentCase = new(&quot;EMAIL&quot;); // same value, different case (this is not recommended) var isSame = ReferenceEquals(CommunicationType.Email, CommunicationType.EmailWithDifferentCase); // false (they are different instances) var isEqual = CommunicationType.Email == CommunicationType.EmailWithDifferentCase; // true (they are different instances, but they have the same value, ignoring case) It is also possible to test the equality between a string and an Enumeration. It also ignores the letters case. The string must be on the left side of the equality operator: var isStringEqualToEnumeration = &quot;email&quot; == CommunicationType.Email; // true isStringEqualToEnumeration = &quot;EMAIL&quot; == CommunicationType.Email; // true var isStringNotEqualToEnumeration = &quot;email&quot; != CommunicationType.Email; // false isStringNotEqualToEnumeration = &quot;EMAIL&quot; != CommunicationType.Email; // false Switch​ Since you have objects and not constant values (like in a enum), the switch statement can't be constructed the same way as for an enum, but you can, for example, use pattern matching this way: private ISender? GetCommunicationSenderForCommunicationType(CommunicationType communicationType) { // A switch statement for pattern matching return communicationType switch { _ when communicationType == CommunicationType.Email =&gt; _emailSender, _ when communicationType == CommunicationType.PushNotification =&gt; _pushNotificationSender, _ when communicationType == CommunicationType.Sms =&gt; _smsSender, _ =&gt; null }; } Enumeration with Behavior​ We can add custom methods to the Enumeration class (it's an object, after all). Here is a simple example, with a method ParseMessage and with a property IsPhoneNumberRequired: using PMart.Enumeration; namespace Enumeration.Sample.Enumerations; /// &lt;summary&gt; /// The communication type enumeration. /// &lt;/summary&gt; public class CommunicationTypeWithBehaviour : Enumeration&lt;CommunicationTypeWithBehaviour&gt; { public static readonly CommunicationTypeWithBehaviour Email = new(&quot;Email&quot;); public static readonly CommunicationTypeWithBehaviour Sms = new(&quot;SMS&quot;); public static readonly CommunicationTypeWithBehaviour PushNotification = new(&quot;PushNotification&quot;); /// &lt;summary&gt; /// Parses the message. /// &lt;/summary&gt; /// &lt;param name=&quot;message&quot;&gt;The message content.&lt;/param&gt; /// &lt;returns&gt;The parsed message.&lt;/returns&gt; public string ParseMessage(string message) { return $&quot;Message parsed by the communication type {this}: {message}&quot;; } /// &lt;summary&gt; /// Gets a value indicating if this communication type requires phone number. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if this communication type requires phone number; &lt;c&gt;false&lt;/c&gt; otherwise.&lt;/returns&gt; public bool IsPhoneNumberRequired =&gt; this switch { _ when this == Sms =&gt; true, _ when this == PushNotification =&gt; true, _ =&gt; false }; private CommunicationTypeWithBehaviour(string value) : base(value) { } } We can also use inheritance to add specific behavior or properties for each enumeration member in an Enumeration class. Check this example, where the communication type has subclasses with a specific implementation of ParseMessage() and IsPhoneNumberRequired: using PMart.Enumeration; namespace Enumeration.Sample.Enumerations; /// &lt;summary&gt; /// The communication type enumeration. /// &lt;/summary&gt; public abstract class CommunicationTypeWithSpecificBehaviour : Enumeration&lt;CommunicationTypeWithSpecificBehaviour&gt; { public static readonly CommunicationTypeWithSpecificBehaviour Email = new EmailType(); public static readonly CommunicationTypeWithSpecificBehaviour Sms = new SmsType(); public static readonly CommunicationTypeWithSpecificBehaviour PushNotification = new PushNotificationType(); /// &lt;summary&gt; /// Parses the message. /// &lt;/summary&gt; /// &lt;remarks&gt;Each communication type, implements its own way of parsing the message.&lt;/remarks&gt; /// &lt;param name=&quot;message&quot;&gt;The message content.&lt;/param&gt; /// &lt;returns&gt;The parsed message.&lt;/returns&gt; public abstract string ParseMessage(string message); /// &lt;summary&gt; /// Gets a value indicating if this communication type requires phone number. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if this communication type requires phone number; &lt;c&gt;false&lt;/c&gt; otherwise.&lt;/returns&gt; public abstract bool IsPhoneNumberRequired { get; } private CommunicationTypeWithSpecificBehaviour(string value) : base(value) { } private sealed class EmailType : CommunicationTypeWithSpecificBehaviour { public EmailType() : base(&quot;Email&quot;) { } /// &lt;inheritdoc /&gt; public override string ParseMessage(string message) { return $&quot;&lt;html&gt;{message}&lt;/html&gt;&quot;; } /// &lt;inheritdoc /&gt; public override bool IsPhoneNumberRequired =&gt; false; } private sealed class SmsType : CommunicationTypeWithSpecificBehaviour { public SmsType() : base(&quot;Sms&quot;) { } /// &lt;inheritdoc /&gt; public override string ParseMessage(string message) { return $&quot;Message encoded for SMS: {message}&quot;; } /// &lt;inheritdoc /&gt; public override bool IsPhoneNumberRequired =&gt; true; } private sealed class PushNotificationType : CommunicationTypeWithSpecificBehaviour { public PushNotificationType() : base(&quot;PushNotification&quot;) { } /// &lt;inheritdoc /&gt; public override string ParseMessage(string message) { return $&quot;Message encoded for push notification: {message}&quot;; } /// &lt;inheritdoc /&gt; public override bool IsPhoneNumberRequired =&gt; true; } } Dynamic Enumerations​ Instead of extending Enumeration class, you can extend the EnumerationDynamic class. The EnumerationDynamic class extends the Enumeration class, therefore, it has the same features. With this type, you will have an extra method that adds the possibility to create new EnumerationDynamic instances at runtime, if there isn't any enumeration member with a specific value. To create an EnumerationDynamic is the same as Enumeration, but it requires a public empty constructor, in addition to the private constructor. You can use the Generator in PMart.Enumeration.Generator package, that generates the code for you, and therefore you don't need to worry about the constructors. Continuing with the communication types, here is an example using EnumerationDynamic: using PMart.Enumeration; namespace Enumeration.Sample.Enumerations; /// &lt;summary&gt; /// The communication type enumeration. /// &lt;/summary&gt; public class CommunicationTypeDynamic : EnumerationDynamic&lt;CommunicationTypeDynamic&gt; { public static readonly CommunicationTypeDynamic Email = new(&quot;Email&quot;); public static readonly CommunicationTypeDynamic Sms = new(&quot;SMS&quot;); public static readonly CommunicationTypeDynamic PushNotification = new(&quot;PushNotification&quot;); public CommunicationTypeDynamic() { } private CommunicationTypeDynamic(string value) : base(value) { } } Now, you can use the method GetFromValueOrNew(string? value), that returns an instance of the enumeration type, or null if the provided value is null. If there is an enumeration with the provided value (ignoring letters case), it will return that instance, else it will create a new instance with the provided value and return it (or null if the provided value is null). var a = CommunicationTypeDynamic.GetFromValueOrNew(&quot;Email&quot;); // returns CommunicationTypeDynamic.Email var b = CommunicationTypeDynamic.GetFromValueOrNew(&quot;EMAIL&quot;); // returns CommunicationTypeDynamic.Email var c = CommunicationTypeDynamic.GetFromValueOrNew(&quot;someUnknownType&quot;); // returns new instance of CommunicationTypeDynamic, with value = &quot;someUnknownType&quot; var d = CommunicationTypeDynamic.GetFromValueOrNew(null); // returns null var aValue = a?.Value; // &quot;Email&quot; var bValue = b?.Value; // &quot;Email&quot; var cValue = c?.Value; // &quot;someUnknownValue&quot; var dValue = d?.Value; // null Note: Instances created with equivalent values are equal (check section Equality), but different instances: var a = CommunicationTypeDynamic.GetFromValueOrNew(&quot;someUnknownType&quot;); // returns a new instance of CommunicationTypeDynamic, with value = &quot;someUnknownType&quot; var b = CommunicationTypeDynamic.GetFromValueOrNew(&quot;someUnknownType&quot;); // returns another new instance of CommunicationTypeDynamic, with value = &quot;someUnknownType&quot; var c = CommunicationTypeDynamic.GetFromValueOrNew(&quot;SOMEuNKNOWtTYPE&quot;); // returns another new instance of CommunicationTypeDynamic, with value = &quot;SOMEuNKNOWtTYPE&quot; var isAEqualToB = a == b; // true var isAEqualToC = a == c; // true var isBEqualToC = b == c; // true var isASameInstanceThanB = ReferenceEquals(a, b); // false var isASameInstanceThanC = ReferenceEquals(a, c); // false var isBSameInstanceThanC = ReferenceEquals(b, c); // false Note: when you create a new enumeration with EnumerationDynamic, that enumeration will not be added to the list of existent enumeration members: var newCommunicationType = CommunicationTypeDynamic.GetFromValueOrNew(&quot;someUnknownType&quot;); // returns a new instance of CommunicationTypeDynamic, with value = &quot;someUnknownType&quot; var existsTheNewTypeOnCommunicationTypes = CommunicationTypeDynamic .GetMembers() .Any(ct =&gt; ct == newCommunicationType); // false Why Dynamic Enumerations?​ The EnumerationDynamic class can be useful when you want to accept values that are not in the declared enumerations or when you want to have the possibility to create new enumerations at runtime. For example, an API A sends data to API B that then redirects the data to API C. All these APIs use enumeration classes, but API B don't care about the value, it just sends it to API C. So, using EnumerationDynamic on API B you don't need to deploy API B every time you had a new value to the enumeration on API A. Other way, using Enumeration instead of EnumerationDynamic, you would need to update API B in order to recognize the new enumeration member and send it to the API C. You can check the example here. EFCore Support In EF Core, adding a property of type Enumeration or EnumerationDynamic to an entity requires setting the conversion to store the value of the enumeration on the database. The NuGet package PMart.Enumeration.EFCore has the required converters, you just need to add them to your model configuration. Check this sample: For this entity: public class CommunicationRecord { public Guid Id { get; set; } public DateTime SentAt { get; set; } public string To { get; set; } = null!; public CommunicationType? Type { get; set; } public CommunicationTypeDynamic? TypeDynamic { get; set; } } You need to configure it on model creating this way on your DbContext: protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); modelBuilder.Entity&lt;CommunicationRecord&gt;(e =&gt; { e.Property(p =&gt; p.Type) .HasConversion&lt;EnumerationConverter&lt;CommunicationType&gt;&gt;(); e.Property(p =&gt; p.TypeDynamic) .HasConversion&lt;EnumerationDynamicConverter&lt;CommunicationTypeDynamic&gt;&gt;(); }); } An usage sample: public async Task&lt;IEnumerable&lt;CommunicationRecord&gt;&gt; GetCommunicationRecordsByType(CommunicationType communicationType) { var records = await _context.CommunicationRecords .Where(r =&gt; r.Type == communicationType) .ToListAsync(); return records; } Note: In a query, the case sensitivity is determined by the database provider. E.g., if you save the record using an EnumerationDynamic with value &quot;Email&quot;, and then query the database using another instance of EnumerationDynamic with value &quot;EMAIL&quot;, it is possible you get no results, depending on the database. For example, MS SQL Server is, by default, case-insensitive, so you would get the result. Newtonsoft Json.NET Support Using Newtonsoft Json.NET, if you need to serialize/deserialize objects that contain properties of type Enumeration, without any converters, the enumeration property would act like a regular object. For example, using this model: public class CommunicationRecord { public DateTime SentAt { get; set; } public string To { get; set; } = null!; public CommunicationType Type { get; set; } = null!; } The JSON without any custom JSON converters would be like: { &quot;sentAt&quot;: &quot;0001-01-01&quot;, &quot;to&quot;: &quot;someone@email.com&quot;, &quot;communicationType&quot;: { &quot;value&quot;: &quot;Email&quot; } } Probably, you would like a JSON where the CommunicationType works like an enum or a string value: { &quot;sentAt&quot;: &quot;0001-01-01&quot;, &quot;to&quot;: &quot;someone@email.com&quot;, &quot;communicationType&quot;: &quot;Email&quot; } For that, you just need to use the custom converters available on the NuGet package PMart.Enumeration.JsonNet. An example where the converter is added by attribute: public class CommunicationRecord { public DateTime SentAt { get; set; } public string To { get; set; } = null!; [JsonConverter(typeof(EnumerationConverter&lt;CommunicationType&gt;))] public CommunicationType Type { get; set; } = null!; } An example where the converter is added on the serializer converters: public string SerializeCommunicationRecord(CommunicationRecord communicationRecord) { var json = JsonConvert.SerializeObject(communicationRecord, new EnumerationConverter&lt;CommunicationType&gt;()); return json; } For enumerations of type EnumerationDynamic, you can use the generic converter EnumerationDynamicConverter&lt;T&gt;. When you have several enumeration types that you would like to register globally, instead of registering all the converters of type EnumerationConverter&lt;T&gt; (or EnumerationDynamicConverter&lt;T&gt;), one for each enumeration type, you can use the non-generic converter EnumerationConverter. This converter evaluates if the object is derived from Enumeration or EnumerationDynamic and handles it accordingly. It might be a little less performant. public string SerializeCommunicationRecord(CommunicationRecord communicationRecord) { var json = JsonConvert.SerializeObject(communicationRecord, new EnumerationConverter()); return json; } System.Text.Json Support Using System.Text.Json, if you need to serialize/deserialize objects that contain properties of type Enumeration, without any converters, the enumeration property would act like a regular object. Again, for the same model example: public class CommunicationRecord { public DateTime SentAt { get; set; } public string To { get; set; } = null!; public CommunicationType Type { get; set; } = null!; } The JSON without any custom JSON converters would be like: { &quot;sentAt&quot;: &quot;0001-01-01&quot;, &quot;to&quot;: &quot;someone@email.com&quot;, &quot;communicationType&quot;: { &quot;value&quot;: &quot;Email&quot; } } Probably, you would like a JSON where the CommunicationType works like a enum or a string value: { &quot;sentAt&quot;: &quot;0001-01-01&quot;, &quot;to&quot;: &quot;someone@email.com&quot;, &quot;communicationType&quot;: &quot;Email&quot; } For that, you just need to use the JSON converter EnumerationConverterFactory available on the NuGet package PMart.Enumeration.SystemTextJson. An example where the converter is added by attribute: public class CommunicationRecord { public DateTime SentAt { get; set; } public string To { get; set; } = null!; [JsonConverter(typeof(EnumerationConverterFactory))] public CommunicationType Type { get; set; } = null!; } An example where the converter is added on the serializer options: public string SerializeCommunicationRecord(CommunicationRecord communicationRecord) { var serializerOptions = GetSerializerOptions(); var json = JsonSerializer.Serialize(communicationRecord, serializerOptions); return json; } private JsonSerializerOptions GetSerializerOptions() { return new JsonSerializerOptions { Converters = { new EnumerationConverterFactory() } }; } Swagger Support If you would like to add an enumeration property to a model from an API and would like to document it on Swagger like an enum, you should install the NuGet package PMart.Enumeration.SwaggerGen and add the schema filter EnumerationSchemaFilter to the Swagger options on your Program.cs (or Startup.cs), like in this example: builder.Services.AddSwaggerGen(options =&gt; { options.SwaggerDoc(&quot;v1&quot;, new OpenApiInfo {Version = &quot;v1&quot;, Title = &quot;Sample API&quot;}); options.SchemaFilter&lt;EnumerationSchemaFilter&gt;(); }); Here's an example of the result: Mapping Map using built-in features​ To map from a Enumeration or EnumerationDynamic to a string, it is very easy, as explained in the section Features: var stringValue = CommunicationType.Email.Value; // &quot;Email&quot; // Or: var stringValue = CommunicationType.Email.ToString(); // &quot;Email&quot; To map from a string to a Enumeration, is also straightforward, as explained in the section Features: var enumeration = CommunicationType.GetFromValueOrDefault(&quot;Email&quot;); // returns CommunicationType.Email To benefit from the EnumerationDynamic features and map from a string to a EnumerationDynamic, as explained in the section Dynamic Enumerations, just use: var enumeration = CommunicationTypeDynamic.GetFromValueOrNew(&quot;someUnknownType&quot;); // returns a new CommunicationTypeDynamic with value &quot;someUnknownType&quot; To map between different types of Enumeration or EnumerationDynamic, you can do it like this for Enumeration types: var enumeration = OtherCommunicationType.GetFromValueOrDefault(communicationType.Value); Or like this for EnumerationDynamic types: var enumeration = OtherCommunicationTypeDynamic.GetFromValueOrNew(communicationType.Value); Map using Extensions or Mappers​ The NuGet package PMart.Enumeration.Mappers includes a set of extensions and mappers to help the mapping to/from string and between different types of Enumeration or EnumerationDynamic. And they are prepared for null values. Here is an example using the extensions and the mappers to map between Enumeration and string: public string? MapCommunicationTypeToStringUsingExtensions(CommunicationType communicationType) { return communicationType.MapToString(); } public CommunicationType? MapStringToCommunicationTypeUsingExtensions(string communicationType) { return communicationType.MapToEnumeration&lt;CommunicationType&gt;(); } public string MapCommunicationTypeToStringUsingMapper(CommunicationType communicationType) { return StringEnumerationMapper&lt;CommunicationType&gt;.MapToString(communicationType); } public CommunicationType MapStringToCommunicationTypeUsingMapper(string communicationType) { return StringEnumerationMapper&lt;CommunicationType&gt;.MapToEnumeration(communicationType); } Here is an example using the extensions and the mappers to map between EnumerationDynamic and string: public string? MapCommunicationTypeToStringUsingExtensions(CommunicationTypeDynamic communicationType) { return communicationType.MapToString(); } public CommunicationTypeDynamic? MapStringToCommunicationTypeUsingExtensions(string communicationType) { return communicationType.MapToEnumerationDynamic&lt;CommunicationTypeDynamic&gt;(); } public string MapCommunicationTypeToStringUsingMapper(CommunicationTypeDynamic communicationType) { return StringEnumerationDynamicMapper&lt;CommunicationTypeDynamic&gt;.MapToString(communicationType); } public CommunicationTypeDynamic MapStringToCommunicationTypeUsingMapper(string communicationType) { return StringEnumerationDynamicMapper&lt;CommunicationTypeDynamic&gt;.MapToEnumerationDynamic(communicationType); } To map between different types of Enumeration, you can follow this example: public OtherCommunicationType? MapToOtherTypeOfEnumeration(CommunicationType communicationType) { return OtherCommunicationType.GetFromValueOrDefault(communicationType.Value); } public OtherCommunicationType? MapToOtherTypeOfEnumerationUsingExtensions(CommunicationType communicationType) { // Usage: ...MapToEnumeration&lt;the source type, the destination type&gt;(); return communicationType.MapToEnumeration&lt;CommunicationType, OtherCommunicationType&gt;(); } public OtherCommunicationType MapToOtherTypeOfEnumerationTypeUsingMapper(CommunicationType communicationType) { // Usage: EnumerationMapper&lt;the source type, the destination type&gt;.MapToEnumeration(...); return EnumerationMapper&lt;CommunicationType, OtherCommunicationType&gt;.MapToEnumeration(communicationType); } And finally, to map between different types of Enumeration where the destination is an EnumerationDynamic, you can follow this example: public OtherCommunicationTypeDynamic? MapToOtherTypeOfEnumeration(CommunicationType communicationType) { return OtherCommunicationTypeDynamic.GetFromValueOrNew(communicationType.Value); } public OtherCommunicationTypeDynamic? MapToOtherTypeOfEnumerationUsingExtensions( CommunicationType communicationType) { // Usage: ...MapToEnumerationDynamic&lt;the source type, the destination type&gt;(); return communicationType.MapToEnumerationDynamic&lt;CommunicationType, OtherCommunicationTypeDynamic&gt;(); } public OtherCommunicationTypeDynamic MapToOtherTypeOfEnumerationTypeUsingMapper(CommunicationType communicationType) { // Usage: EnumerationDynamicMapper&lt;the source type, the destination type&gt;.MapToEnumerationDynamic(...); return EnumerationDynamicMapper&lt;CommunicationType, OtherCommunicationTypeDynamic&gt;.MapToEnumerationDynamic( communicationType); } Using Mapperly​ The Mapperly is a source generator for generating object mappings. To map objects that have properties of type Enumeration or EnumerationDynamic with Mapperly, you need to implement the mapping in the object mapper. The NuGet package PMart.Enumeration.Mappers provides a set of mappers that can be used in Mapperly mappers, without the need to implement the mapping manually. In this example, we have a source object that is mapped to a destination object, which requires mapping from Enumeration to string (from CommunicationType to string) and between different types of Enumeration (from CommunicationType to OtherCommunicationType): public class SourceObject { public CommunicationType CommunicationType { get; set; } = null!; public CommunicationType OtherCommunicationType { get; set; } = null!; } public class DestinationObject { public string CommunicationType { get; set; } = null!; public OtherCommunicationType OtherCommunicationType { get; set; } = null!; } For this example, we need to create a Mapperly mapper, and we can use the mappers as external mappings, using the attribute [UseStaticMapper]: // ... using Riok.Mapperly.Abstractions; namespace Enumeration.Mappers.Sample.Samples.Mapperly.Mappers; [Mapper] [UseStaticMapper(typeof(StringEnumerationMapper&lt;CommunicationType&gt;))] [UseStaticMapper(typeof(EnumerationMapper&lt;CommunicationType, OtherCommunicationType&gt;))] internal partial class SampleMapper { public partial DestinationObject SourceToDestination(SourceObject sourceModel); } For enumerations of type EnumerationDynamic, you can use the mappers StringEnumerationDynamicMapper and EnumerationDynamicMapper. You can check the sample here. Enumeration Generator Creating a new Enumeration class is a little bit verbose. For instance, you can't forget to extend Enumeration&lt;T&gt; and to create the private constructor (else, it wouldn't compile anyway). Therefore, the package PMart.Enumeration.Generator was added to help on that. It is an incremental generator. Generator Installation​ Add the package to your project: dotnet add package PMart.Enumeration.Generator You need to keep the package PMart.Enumeration installed. To any project referring that project don't get a reference to the PMart.Enumeration.Generator, you can add PrivateAssets=&quot;all&quot; to the package reference. And you can also add ExcludeAssets=&quot;runtime&quot;, to avoid the PMart.Enumeration.Generator.dll file being copied to your build output (it is not required at runtime, it is a generator, so it works in compile time only): &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;!-- ... --&gt; &lt;PackageReference Include=&quot;PMart.Enumeration&quot; Version=&quot;3.1.0&quot; /&gt; &lt;PackageReference Include=&quot;PMart.Enumeration.Generator&quot; Version=&quot;3.1.0&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;!-- ... --&gt; &lt;/Project&gt; Generator Usage​ To create a new Enumeration with the generator, it is easy: Create a partial class, for the Enumeration class.Add the EnumerationAttribute (namespace PMart.Enumeration.Generator.Attributes) on the class.Add fields of type private static readonly string named with the prefix ValueFor (this prefix is one of the ways of doing it, as you can check next), that hold the values that will be used to create the enumeration members (check the bellow examples). The non-fields or fields that are not private static readonly string are ignored. For example, without the generator, the communication type enumeration was like this: using PMart.Enumeration; namespace Enumeration.Sample.Enumerations; /// &lt;summary&gt; /// The communication type enumeration. /// &lt;/summary&gt; public class CommunicationType : Enumeration&lt;CommunicationType&gt; { public static readonly CommunicationType Email = new(&quot;Email&quot;); public static readonly CommunicationType Sms = new(&quot;SMS&quot;); public static readonly CommunicationType PushNotification = new(&quot;PushNotification&quot;); private CommunicationType(string value) : base(value) { } } Using the generator and the prefix ValueFor (this prefix is one of the ways of doing it, as you can check next), it is just like this: using PMart.Enumeration.Generator.Attributes; namespace Enumeration.Generator.Sample.Enumerations; /// &lt;summary&gt; /// The communication type enumeration. /// &lt;/summary&gt; [Enumeration] public partial class CommunicationType { private static readonly string ValueForEmail = &quot;Email&quot;; private static readonly string ValueForSms = &quot;SMS&quot;; private static readonly string ValueForPushNotification = &quot;PushNotification&quot;; } And the generated code will be something like this: // &lt;auto-generated /&gt; namespace Enumeration.Generator.Sample.Enumerations { public partial class CommunicationType : Enumeration&lt;CommunicationType&gt; { public static readonly CommunicationType Email = new CommunicationType(ValueForEmail!); public static readonly CommunicationType Sms = new CommunicationType(ValueForSms!); public static readonly CommunicationType PushNotification = new CommunicationType(ValueForPushNotification!); private CommunicationType(string value) : base(value) { } } } If you don't worry about instantiating the enumeration members and your only concern is about the inheritance from Enumeration&lt;T&gt; and constructors, you can use the generator to build just that parts: [Enumeration] public partial class CommunicationType { public static readonly CommunicationType Email = new(&quot;Email&quot;); public static readonly CommunicationType Sms = new(&quot;SMS&quot;); public static readonly CommunicationType PushNotification = new(&quot;PushNotification&quot;); } You can check other examples in the samples. The EnumerationMember Attribute​ If you don't like the use of the prefix ValueFor to define the member names, you can use the EnumerationMemberAttribute to define the name of the enumeration member (but remember, it is not possible two fields have the same name, it will return a compilation error if you try to do that): [Enumeration] public partial class CommunicationType { [EnumerationMember(&quot;Email&quot;)] private static readonly string EmailCode = &quot;Email&quot;; [EnumerationMember(&quot;Sms&quot;)] private static readonly string SmsCode = &quot;SMS&quot;; [EnumerationMember(&quot;PushNotification&quot;)] private static readonly string PushNotificationCode = &quot;PushNotification&quot;; } The EnumerationIgnore Attribute​ If, for some reason, you already have a field private static readonly string named ValueFor..., but you don't want it to be used to generate a new enumeration member, use the EnumerationIgnoreAttribute: [Enumeration] public partial class CommunicationType { private static readonly string ValueForEmail = &quot;Email&quot;; private static readonly string ValueForSms = &quot;SMS&quot;; private static readonly string ValueForPushNotification = &quot;PushNotification&quot;; [EnumerationIgnore] private static readonly string ValueForSomeFieldThatShouldBeIgnored = &quot;SomeValue&quot;; } Generate EnumerationDynamic​ To generate an Enumeration class of type EnumerationDynamic&lt;T&gt;, enable the option IsDynamic of the EnumerationAttribute: [Enumeration(IsDynamic = true)] public partial class CommunicationTypeDynamic { private static readonly string ValueForEmail = &quot;Email&quot;; private static readonly string ValueForSms = &quot;SMS&quot;; private static readonly string ValueForPushNotification = &quot;PushNotification&quot;; } The generated code will be something like this: // &lt;auto-generated /&gt; namespace Enumeration.Generator.Sample.Enumerations { public partial class CommunicationTypeDynamic : EnumerationDynamic&lt;CommunicationTypeDynamic&gt; { public static readonly CommunicationTypeDynamic Email = new CommunicationTypeDynamic(ValueForEmail!); public static readonly CommunicationTypeDynamic Sms = new CommunicationTypeDynamic(ValueForSms!); public static readonly CommunicationTypeDynamic PushNotification = new CommunicationTypeDynamic(ValueForPushNotification!); public CommunicationTypeDynamic() { } private CommunicationTypeDynamic(string value) : base(value) { } } } Generator Diagnostics​ The generator tries to report errors when the user does common mistakes, namely about naming the enumeration members with names already in use. In some cases, there are no compilation errors on the user code. Without the diagnostics from the generator, the user would not know why the generator doesn't work. For instance, assigning the same name for the enumeration member and for the field, the Enumeration class will not be generated and an error is reported: [Enumeration] public partial class CommunicationType { [EnumerationMember(&quot;Email&quot;)] private static readonly string Email = &quot;Email&quot;; ^^^^^ // Error ENUM0002: The name 'Email' of the Enumeration member is the same as the field name } Or, defining an invalid name for the enumeration member: [Enumeration] public partial class CommunicationType { // 123 is not a valid name for a class member in C# [EnumerationMember(&quot;123&quot;)] private static readonly string Email = &quot;Email&quot;; ^^^^^ // Error ENUM0001: Invalid name for the Enumeration member in the EnumerationMemberAttribute } There are other diagnostics reported for different cases. All are of type Error with an ID like ENUMXXXX and with a descriptive message. Generator Limitations​ The .NET versions restrictions are: .NET SDK: &gt;= 8.0.100MSBuild/Visual Studio: &gt;= 17.8. It does not work for abstract classes. In the example provided in Enumeration with behavior, we use an abstract class and subclasses. When using the generator, you can do the same without being abstract, check this sample.It does not support nested classes (the usage of the EnumerationAttribute in a nested class does not have effect). But it supports nested namespaces. Disclaimer While the enumeration class is a good alternative to enum type, it is more complex and also .NET doesn't handle it as it handles enum (e.g. JSON des/serialization, model binding, etc.), requiring custom code. Please be aware that enumeration class may not fit your needs. References Enumeration Classes: Microsoft Docs: Using enumeration classes instead of enum typesJimmy Bogard: Enumeration ClassesArdalis: Enum Alternatives in C#Ardalis: SmartEnumAnkit Vijay: Enumeration Classes – DDD and beyondAnkit Vijay: EnumerationeShopOnContainers: Enumeration.cs Incremental Generators: Roslyn Documentation: Incremental GeneratorsRoslyn Documentation: Incremental Generators CookbookAndrew Lock: Creating a source generatorAndrew Lock: NetEscapades.EnumGenerators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#about","content":" note Constants as enumeration. With EFCore, Swagger and other implementations.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references PMart.Enumeration &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;PMart.Enumeration&quot; Version=&quot;3.1.0&quot; /&gt; &lt;PackageReference Include=&quot;PMart.Enumeration.Generator&quot; Version=&quot;3.1.0&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonType.g.cs // &lt;auto-generated&gt; // This code was generated by the PMart.Enumeration.Generator source generator. // &lt;/auto-generated&gt; #nullable enable namespace DemoPMart { public partial class PersonType : global::PMart.Enumeration.Enumeration&lt;global::DemoPMart.PersonType&gt; { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;PMart.Enumeration.Generator&quot;, &quot;3.1.0.0&quot;)] public static readonly global::DemoPMart.PersonType Employee = new global::DemoPMart.PersonType(ValueForEmployee!); [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;PMart.Enumeration.Generator&quot;, &quot;3.1.0.0&quot;)] public static readonly global::DemoPMart.PersonType Manager = new global::DemoPMart.PersonType(ValueForManager!); [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;PMart.Enumeration.Generator&quot;, &quot;3.1.0.0&quot;)] private PersonType(string value) : base(value) { } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#download-example-net--c","content":" tip Download Example project PMart.Enumeration   ","version":"Next","tagName":"h3"},{"title":"Share PMart.Enumeration​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#share-pmartenumeration","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/PMart.Enumeration  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Enum\" has the following generators:​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#category-enum-has-the-following-generators","content":" 1 CredFetoEnum  2 EnumClass  3 EnumUtilities  4 Flaggen  5 FusionReactor  6 Genbox.FastEnum  7 jos.enumeration  8 NetEscapades.EnumGenerators  9 PMart.Enumeration  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"PMart.Enumeration by Martinho","url":"/RSCG_Examples/v2/docs/PMart.Enumeration#see-category","content":" Enum ","version":"Next","tagName":"h3"},{"title":"PrimaryParameter by FaustVX","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/PrimaryParameter","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#info","content":" info Name: PrimaryParameter Package Description Author: FaustVX NuGet:https://www.nuget.org/packages/FaustVX.PrimaryParameter.SG You can find more details at https://github.com/FaustVX/PrimaryParameter Source: https://github.com/FaustVX/PrimaryParameter  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#original-readme","content":" note Primary Parameter Description​ Using a Field or RefField or Property attribute on parameters. Automatically generate private readonly fields or private readonly ref readonly fields or public properties. Forbid the use of primary constructor's parameters. Usage​ partial class C([Field(Name = &quot;_a&quot;, AssignFormat = &quot;{0}.ToString()&quot;, Type = typeof(string)), Field(Name = nameof(C._b)), Field, Property(WithInit = true)]int i) // type must be partial, but can be class / struct { # region Generated members // private readonly string _a = i.ToString(); // generated field (with type and formated assignment) // private readonly int _b = i; // generated field (with computed name) // private readonly int _i = i; // generated field // private int { get; init; } = i; // generated Property # endregion public void M0() { i++; // error on usage of i Console.WriteLine(i); // error on usage of i } public void M1() { var i = 0; i++; // don't error on usage of locals Console.WriteLine(_i); // automaticaly created readonly field Console.WriteLine(_a); // automaticaly created readonly field based on Name property Console.WriteLine(I); // automaticaly created readonly property } } ref partial struct Ref([RefField(IsReadonlyRef = false, IsRefReadonly = false), RefField(Name = nameof(Ref.I), Scope = &quot;public&quot;)]int i) { # region Generated members private ref int _i = ref i; public readonly ref readonly int I = ref i; # endregion } To enable the feature, type [Field] or [RefField] or [Property] before the primary parameter you want. You can type as many attributes as you want on a single parameter. Attribute Properties​ Attribute\tProperty\tComments\tDefault valueField\tName\tProperty to modify the generated field name\t_i (for a parameter named i) IsReadnoly\tTo generate the readonly modifier\ttrue Scope\tTo change the scope of the generated property\tprivate AssignFormat\tTo change the assignment for that field\t{0} Type\tTo change the type for that field\tsame type as parameter RefField\tName\tProperty to modify the generated field name\t_i (for a parameter named i) IsReadnolyRef\tTo generate the readonly ref modifier\ttrue IsRefReadnoly\tTo generate the ref readonly modifier\ttrue Scope\tTo change the scope of the generated property\tprivate Property\tName\tProperty to modify the generated field name\tI (for a parameter named i) WithInit\tTo generate the init accessor along the get\tfalse Scope\tTo change the scope of the generated property\tpublic AssignFormat\tTo change the assignment for that property\t{0} Type\tTo change the type for that property\tsame type as parameter .csproj properties​ Property\tDescription\tDefault valueFields PrimaryParameter_Field_DefaultScope\tThe default scope for fields generation\tprivate PrimaryParameter_Field_DefaultReadonly\tShould fields generates with readonly modifier\ttrue Ref Fields PrimaryParameter_RefField_DefaultScope\tThe default scope for ref field generation\tprivate PrimaryParameter_RefField_DefaultReadonlyRef\tShould ref fields generates with readonly ref modifier\ttrue PrimaryParameter_RefField_DefaultRefReadonly\tShould ref fields generates with ref readonly modifier\ttrue Properties PrimaryParameter_Property_DefaultScope\tThe default scope for properties generation\tpublic PrimaryParameter_Property_DefaultWithInit\tShould properties generates with init accessor\ttrue  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#about","content":" note Generating properties from .NET 8 constructor parameters  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references PrimaryParameter &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FaustVX.PrimaryParameter.SG&quot; Version=&quot;1.2.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  FaustVX.PrimaryParameter.SG.g.csFieldAttribute.g.csPropertyAttribute.g.csRefFieldAttribute.g.cs namespace QuickConstructorDemo { partial class Person { public string FirstName { get; init; } = FirstName; } } namespace QuickConstructorDemo { partial class Person { public readonly string _LastName = LastName; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#download-example-net--c","content":" tip Download Example project PrimaryParameter   ","version":"Next","tagName":"h3"},{"title":"Share PrimaryParameter​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#share-primaryparameter","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/PrimaryParameter  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Constructor\" has the following generators:​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#category-constructor-has-the-following-generators","content":" 1 AutoConstructor  2 AutoCtor  3 AutoDeconstruct  4 ConstructorGenerator  5 PrimaryParameter  6 QuickConstructor  7 sourcedepend  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"PrimaryParameter by FaustVX","url":"/RSCG_Examples/v2/docs/PrimaryParameter#see-category","content":" Constructor ","version":"Next","tagName":"h3"},{"title":"PropertyChangedSourceGenerator by Antony Male","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#info","content":" info Name: PropertyChangedSourceGenerator TODO Author: Antony Male NuGet:https://www.nuget.org/packages/PropertyChanged.SourceGenerator/ You can find more details at https://github.com/canton7/PropertyChanged.SourceGenerator Source: https://github.com/canton7/PropertyChanged.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#original-readme","content":" note PropertyChanged.SourceGenerator Implementing INotifyPropertyChanged / INotifyPropertyChanging is annoying. PropertyChanged.SourceGenerator hooks into your compilation process to generate the boilerplate for you, automatically. PropertyChanged.SourceGenerator works well if you're using an MVVM framework or going without, and supports various time-saving features such as: Automatically notifying dependent properties.Calling hooks when particular properties change.Keeping track of whether any properties have changed. Table of Contents​ InstallationQuick StartVersioningDefining your ViewModelDefining Properties Property NamesProperty AccessibilityProperty Doc CommentsAttributes on Generated Properties Property Dependencies Automatic DependenciesManual Dependencies with [DependsOn]Manual Dependencies with [AlsoNotify] Property Changed Hooks Type Hooks with OnPropertyChanged / OnPropertyChangingProperty Hooks with On{PropertyName}Changed / On{PropertyName}Changing Change Tracking with [IsChanged]Configuration Generated Property NamesOnPropertyChanged / OnPropertyChanging Method NameAutomatic Dependencies ContributingComparison to PropertyChanged.Fody Installation​ PropertyChanged.SourceGenerator is available on NuGet. You'll need to be running Visual Studio 2019 16.9 or higher, or by building using the .NET SDK 5.0.200 or higher (your project doesn't have to target .NET 5, you just need to be building using a newish version of the .NET SDK). These dependencies may change in future minor versions, see Versioning. If you're using Visual Studio 17.2.6 with WPF and you get lots of &quot;... already contains a definition for ...&quot; error messages, see this bug and workaround. Quick Start​ using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify] private string _lastName; public string FullName =&gt; $&quot;Dr. {LastName}&quot;; } Make sure your ViewModel is partial, and define the backing fields for your properties, decorated with [Notify]. When you build your project, PropertyChanged.SourceGenerator will create a partial class which looks something like: partial class MyViewModel : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; public string LastName { get =&gt; _lastName; set { if (!EqualityComparer&lt;string&gt;.Default.Equals(_lastName, value)) { _lastName = value; OnPropertyChanged(EventArgsCache.LastName); OnPropertyChanged(EventArgsCache.FullName); } } } protected virtual void OnPropertyChanged(PropertyChangedEventArgs args) { PropertyChanged?.Invoke(args); } } What happened there? PropertyChanged.SourceGenerator spotted that you defined a partial class and at least one property was decorated with [Notify], so it got involved and generated another part to the partial class.It noticed that you hadn't implemented INotifyPropertyChanged, so it implemented it for you (it's also fine if you implement it yourself).For each field decorated with [Notify], it generated property with the same name (but with the leading _ removed and the first letter capitalised) which used that field as its backing field. That property implemented INotifyPropertyChanged.It noticed that FullName depended on LastName, so raised the PropertyChanged event for FullName whenever LastName changed. Note: It's really important that you don't refer to the backing fields after you've defined them: let PropertyChanged.SourceGenerator generate the corresponding properties, and then always use those propertues. Versioning​ Source Generators are a relatively new technology, and they're being improved all the time. Unfortunately, in order for source generators to take advantage of improvements, they must target a newer version of Visual Studio / the .NET SDK. If/when PropertyChanged.SourceGenerator is updated to depend on a new version Visual Studio / the .NET SDK, this will be signified by a minor version bump: the minor version number will be incremented. Changes which mean you have to change existing code to keep PropertyChanged.SourceGenerator working will be signified by a major version bump. Version Number\tMin Visual Studio Version\tMin .NET SDK Version1.0.x\t2019 16.9\t5.0.200 1.1.x\t2022 17.3\t6.0.304 Defining your ViewModel​ INotifyPropertyChanged​ When you define a ViewModel which makes use of PropertyChanged.SourceGenerator, that ViewModel must be partial. If it isn't, you'll get a warning. Your ViewModel can implement INotifyPropertyChanged, or not, or it can implement parts of it (such as implementing the interface but not defining the PropertyChanged event), or it can extend from a base class which implements INotifyPropertyChanged: PropertyChanged.SourceGenerator will figure it out and fill in the gaps. If you've got a ViewModel base class which implements INotifyPropertyChanged (perhaps as part of an MVVM framework), PropertyChanged.SourceGenerator will try and find a suitable method to call in order to raise the PropertyChanged event. It will look for a method called OnPropertyChanged, RaisePropertyChanged, NotifyOfPropertyChange, or NotifyPropertyChanged, which covers all of the major MVVM frameworks (although this is configurable, see Configuration), with one of the following signatures: void OnPropertyChanged(PropertyChangedEventArgs args)void OnPropertyChanged(string propertyName)void OnPropertyChanged(PropertyChangedEventArgs args, object oldValue, object newValue)void OnPropertyChanged(string propertyName, object oldValue, object newValue) If it can't find a suitable method, you'll get a warning and it won't run on that particular ViewModel. INotifyPropertyChanging​ Working with INotifyPropertyChanging is similar, with the caveat that your class or one of its base classes must implement INotifyPropertyChanging (not everone wants to implement this interface, so it's opt-in). You don't need to implement all of the interface members: PropertyChanged.SourceGenerator will step in and fill in the gaps. As with INotifyPropertyChanged, PropertyChanged.SourceGenerator will try and find a suitable method to call in order to raise the PropertyChanging event. It will look for a method called OnPropertyChanging, RaisePropertyChanging, NotifyOfPropertyChanging, or NotifyPropertyChanging (again this is configurable, see Configuration), with one of the following signatures: void OnPropertyChanging(PropertyChangingEventArgs args)void OnPropertyChanging(string propertyName)void OnPropertyChanging(PropertyChangingEventArgs args, object oldValue)void OnPropertyChanging(string propertyName, object oldValue) Defining Properties​ To get PropertyChanged.SourceGenerator to generate a property which implements INotifyPropertyChanged, you must define the backing field for that property, and decorate it with [Notify]. (This is an annoying effect of how Source Generators work. If you'd like a better way, please vote for this issue on partial properties). If you write: using PropertyChanged.SourceGenerator; public partial class MyViewModel : INotifyPropertyChanged { [Notify] private int _foo; } PropertyChanged.SourceGenerator will generate something like: partial class MyViewModel { public int Foo { get =&gt; _foo, set { if (!EqualityComparer&lt;int&gt;.Default.Equals(_foo, value)) { _foo = value; OnPropertyChanged(EventArgsCache.Foo); } } } // PropertyChanged event, OnPropertyChanged method, etc. } Property Names​ The name of the generated property is derived from the name of the backing field, by: Removing a _ prefix, if one existsChanging the first letter to upper-case This can be customised, see Configuration. If you want to manually specify the name of a particular property, you can pass a string to [Notify]: using PropertyChanged.SourceGenerator; public partial class MyViewModel : INotifyPropertyChanged { [Notify(&quot;FOO&quot;)] private int _foo; } PropertyChanged.SourceGenerator will generate a property called FOO. Property Accessibility​ By default, all generated properties have public getters and public setters. This isn't always what you want, so it's possible to override this by passing Getter.XXX and Setter.XXX to [Notify]. using PropertyChanged.SourceGenerator; public partial class MyViewModel : INotifyPropertyChanged { [Notify(Setter.Private)] private int _foo; [Notify(Getter.PrivateProtected, Setter.Protected)] private string _bar; } This generates: partial class MyViewModel { public int Foo { get =&gt; _foo private set { /* ... */ } } protected string Bar { private protected get =&gt; _bar, set { /* ... */ } } } Property Doc Comments​ Any XML doc comments applied to your field will be copied to the generated property. Note that any such comments must appear before the [Notify] attribute. using PropertyChanged.SourceGenerator; public partial class MyViewModel { /// &lt;summary&gt; /// The Foo property /// &lt;/summary&gt; [Notify] private int _foo; } Generates: partial class MyViewModel { /// &lt;summary&gt; /// The Foo property /// &lt;/summary&gt; public int Foo { // ... } } Attributes on Generated Properties​ Sometimes you need the to place attributes onto the generated property, e.g. to control validation or serialization. You can do this by passing a string containing this attribute to the [PropertyAttribute] attribute, e.g.: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [PropertyAttribute(&quot;[System.Xml.Serialization.XmlIgnore]&quot;)] [Notify] private int _foo; } The string that you pass to [PropertAttribute] will be pasted into the generated file verbatim. It's important to note that the generated file doesn't have any using statements, so you need to fully-qualify all types. For example: [PropertyAttribute(&quot;[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]&quot;)] rather than just: [PropertyAttribute(&quot;[EditorBrowsable(EditorBrowsabeState.Never)]&quot;)] Virtual Properties​ If you want the generated property to be virtual, use: using PropertyChanged.SourceGenerator; public partial class MyViewModel : INotifyPropertyChanged { [Notify(IsVirtual = true] private int _foo; } Generates: partial class MyViewModel { public virtual int Foo { // ... } } Property Dependencies​ Sometimes, you have properties which depend on other properties, for example: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify] private string _firstName; [Notify] private string _lastName; public string FullName =&gt; $&quot;{FirstName} {LastName}&quot;; } Whenever FirstName or LastName is updated, you want to raise a PropertyChanged event for FullName, so that the UI also updates the value of FullName which is displayed. Automatic Dependencies​ If a property has a getter which accesses a generated property on the same type, then PropertyChanged.SourceGenerator will automatically raise a PropertyChanged event every time the property it depends on changes. For example, if you write: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify] private string _lastName; public string FullName =&gt; $&quot;Dr. {LastName}&quot;; } PropertyChanged.SourceGenerator will notice that the getter for FullName accesses the generated LastName property, and so it will add code to the LastName setter to raise a PropertyChanged event for FullName whenever LastName is set: partial class MyViewModel : INotifyPropertyChanged { public string LastName { get =&gt; _lastName; set { if (!EqualityComparer&lt;string&gt;.Default.Equals(_lastName, value)) { _lastName = value; OnPropertyChanged(EventArgsCache.LastName); OnPropertyChanged(EventArgsCache.FullName); // &lt;-- Here } } } } If the property being depended on is not being generated by PropertyChanged.SourceGenerator, or is defined in a base class, then PropertyChanged.SourceGenerator handles this by overriding the OnPropertyChanged method. For example: public partial class Base { [Notify] private string _firstName; } public partial class Derived : Base { [Notify] private string _middleName; public string LastName { get; } public string FullName =&gt; $&quot;{FirstName} {MiddleName} {LastName}&quot;; } This will generate something like the following OnPropertyChanged method for Derived: partial class Derived { protected override void OnPropertyChanged(PropertyChangedEventArgs eventArgs) { base.OnPropertyChanged(eventArgs); switch (eventArgs.PropertyName) { case &quot;FirstName&quot;: case &quot;LastName&quot;: OnPropertyChanged(EventArgsCache.FullName); break; } } } Note that this cannot work for getters which access properties on other types, or on other instances of the current type. Also note that your property getter must reference the generated property and not its backing field (i.e. LastName, not _lastName above). Automatic dependency resolution does not happen if the property is decorated with [DependsOn(...)]. Therefore, to disable automatic dependency resolution for a single property, you can decorate it with an empty [DependsOn]. To disable automatic dependency resolution across your entire project, set propertychanged.auto_notify = false in your .editorconfig, see Configuration. Manual Dependencies with [DependsOn]​ If automatic dependencies aren't working for you, you can also specify dependencies manually using the [DependsOn] attribute. [DependsOn] takes the names of one or more generated properties, and means that a PropertyChanged event will be raised if any of those properties are set. For example: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify] private string _firstName; [Notify] private string _lastName; [DependsOn(nameof(FirstName), nameof(LastName))] public string FullName { get; set; } } The generated setters for FirstName and LastName will raise a PropertyChanged event for FullName. As with automatic dependencies, [DependsOn] can refer to properties in the current class or base classes. It can also refer to properties which don't actually exist, which means you can refer to properties on derived classes as well. Manual Dependencies with [AlsoNotify]​ [AlsoNotify] is the opposite of [DependsOn]: you place it on a backing field which also has [Notify], and PropertyChanged.SourceGenerator will insert code to raise a PropertyChanged for each named property whenever the generated property is set. The named property or properties don't have to exist (although you'll get a warning if they don't), and you can raise PropertyChanged events for properties in base classes. If you're naming a property which is generated by PropertyChanged.SourceGenerator, make sure you use the name of the generated property, and not the backing field. For example: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify, AlsoNotify(nameof(FullName))] private string _firstName; [Notify, AlsoNotify(nameof(FullName))] private string _lastName; public string FullName { get; set; } } Property Changed Hooks​ Hooks are a way for you to be told when a generated property is changed, without needing to subscribe to a type's own PropertyChanged event. Type Hooks with OnAnyPropertyChanged / OnAnyPropertyChanging​ INotifyPropertyChanged​ The easiest way to be notified when any generated property has changed is to specify an OnAnyPropertyChanged method. This is called from the generated OnPropertyChanged method. This method can have the following signatures, and any accessibility: void OnAnyPropertyChanged(string propertyName); void OnAnyPropertyChanged(string propertyName, object oldValue, object newValue); In order for PropertyChanged.SourceGenerator to be able to supply values for oldValue and newValue, the OnPropertyChanged method in your base class must have a signature which also has these parameters. Note that the oldValue might be null, if the property is being raised because of a property dependency. INotifyPropertyChanging​ To be notified before a generated property changes, you can specify an OnAnyPropertyChanging method. This method can have the following signatures, and any accessibility: void OnAnyPropertyChanged(string propertyName); void OnAnyPropertyChanged(string propertyName, object oldValue); In order for PropertyChanged.SourceGenerator to be able to supply values for oldValue, the OnPropertyChanging method in your base class must have a signature which also has this parameter. Note that the oldValue might be null, if the property is being raised because of a property dependency. Property Hooks with On{PropertyName}Changed / On{PropertyName}Changing​ INotifyPropertyChanged​ Let's say you have a generated property called FirstName. If you define a method called OnFirstNameChanged in the same class, that method will be called every time FirstName changes. This method can have two signatures: On{PropertyName}Changed().On{PropertyName}Changed(T oldValue, T newValue) where T is the type of the property called PropertyName. For example: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify] private string _firstName; [Notify] private string _lastName; private void OnFirstNameChanged(string oldValue, string newValue) { // ... } private void OnLastNameChanged() { // ... } } Note that oldValue might have a value of default(T), if the property is being raised because of a property dependency. INotifyPropertyChanging​ Using the example above, if you define a method called OnFirstNameChanging in the same class, that method will be called just before FirstName changes. This method can have two signatures: On{PropertyName}Changing().On{PropertyName}Changing(T oldValue) where T is the type of the property called PropertyName. Note that oldValue might have a value of default(T), if the property is being raised because of a property dependency. Change tracking with [IsChanged]​ Sometimes you need to keep track of whether any properties on a type have been set. If you define a bool property and decorate it with [IsChanged], then that property will be set to true whenever any generate properties are set. It's then up to you to set it back to false when appropriate. For example: using PropertyChanged.SourceGenerator; public partial class MyViewModel { [IsChanged] public bool IsChanged { get; private set; } [Notify] private string _firstName; } var vm = new MyViewModel(); Assert.False(vm.IsChanged); vm.FirstName = &quot;Harry&quot;; Assert.True(vm.IsChanged); That bool IsChanged property can also be generated by PropertyChanged.SourceGenerator, if you want a PropertyChanged event to be raised when it changed; using PropertyChanged.SourceGenerator; public partial class MyViewModel { [Notify, IsChanged] private bool _isChanged; } Configuration​ Various aspects of PropertyChanged.SourceGenerator's behaviour can be configured through a .editorconfig file. If you have one already, great! If not simply add a file called .editorconfig in the folder which contains your .csproj file (if you want those settings to apply to a single project), or next to your .sln file (to apply them to all projects in the solution). There are various other ways to combine settings from different .editorconfig files, see the MSDN documentation. All of PropertyChanged.SourceGenerator's settings must be in a [*.cs] section. Generated Property Names​ There are a few settings which control how PropertyChanged.SourceGenerator turns the name of your backing field into the name of the property it generates. [*.cs] # A string to add to the beginning of any generated property name # Default: '' propertychanged.add_prefix = # A semicolon-delimeted list of values to remove from the beginning of any generated property name, if present # Default: '_' propertychanged.remove_prefixes = _ # A string to add to the end of any generated property name # Default: '' propertychanged.add_suffix = # A semicolon-delimeted list of values to remove from the end of any generated property name # Default: '' propertychanged.remove_suffixes = # How the first letter of the generated property name should be capitalised # Valid values: none, upper_case, lower_Case # Default: upper_case propertychanged.first_letter_capitalization = upper_case OnPropertyChanged / OnPropertyChanging Method Name​ When PropertyChanged.SourceGenerator runs, it looks for a suitable pre-existing method which can be used to raise the PropertyChanged and PropertyChanging event. If none is found, it will generate a suitable method itself, if it can. The names of the pre-existing methods which it searches for, and the name of the method which it will generate, can be configured. [*.cs] # A ';' separated list of method names to search for when finding a method to raise the # PropertyChanged event. If none is found, the first name listed here is used to generate one. # Default: OnPropertyChanged;RaisePropertyChanged;NotifyOfPropertyChange;NotifyPropertyChanged propertychanged.onpropertychanged_method_name = OnPropertyChanged;RaisePropertyChanged;NotifyOfPropertyChange;NotifyPropertyChanged # A ';' separated list of method names to search for when finding a method to raise the # PropertyChanging event. If none is found, the first name listed here is used to generate one. # Default: OnPropertyChanging;RaisePropertyChanging;NotifyOfPropertyChanging;NotifyPropertyChanging propertychanged.onpropertychanging_method_name = OnPropertyChanging;RaisePropertyChanging;NotifyOfPropertyChanging;NotifyPropertyChanging Automatic Dependencies​ To disable automatic property dependency resolution across your whole project, set: [*.cs] # Whether to enable automatic property dependency resolution # Valid values: true, false # Default: true propertychanged.auto_notify = false Contributing​ It's great that you want to get involved, thank you! Please open a discussion before doing any serious amount of work, so we can agree an approach before you get started. Open a feature branch based on develop (not master), and make sure that you submit any Pull Requests to the develop branch. Comparison to PropertyChanged.Fody​ PropertyChanged.SourceGenerator has the same goals as PropertyChanged.Fody. Here are some of the differences: PropertyChanged.Fody is able to rewrite your code, which PropertyChanged.SourceGenerator can only add to it (due to the design of Source Generators). This means that PropertyChanged.Fody is able to insert event-raising code directly into your property setters, whereas PropertyChanged.SourceGenerator needs to generate the whole property itself.PropertyChanged.Fody supports some functionality which PropertyChanged.SourceGenerator does not, such as global interception. Please let me know if you need a bit of functionality which PropertyChanged.SourceGenerator doesn't yet support.PropertyChanged.SourceGenerator supports some functionality which PropertyChanged.Fody does not, such as letting you define On{PropertyName}Changed methods which accept the old and new values of the property.PropertyChanged.Fody uses a variety of methods to locate a suitable method to compare a property's old and new value; PropertyChanged.SourceGenerator just uses EqualityComparer&lt;T&gt;.Default.I don't expect you to pay to use PropertyChanged.SourceGenerator, and will never close an issue or refuse a contribution because you're not giving me money.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#about","content":" note Generating PropertyChange to properties  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references PropertyChangedSourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;PropertyChanged.SourceGenerator&quot; Version=&quot;1.0.8&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attributes.csEventArgsCache.g.csPerson.g.cs // &lt;auto-generated&gt; // Auto-generated by PropertyChanged.SourceGenerator 1.0.8.0 // &lt;/auto-generated&gt; namespace PropertyChanged.SourceGenerator { /// &lt;summary&gt; /// Specifies the accessibility of a generated property getter /// &lt;/summary&gt; internal enum Getter { Public = 6, ProtectedInternal = 5, Internal = 4, Protected = 3, PrivateProtected = 2, Private = 1, } /// &lt;summary&gt; /// Specifies the accessibility of a generated property getter /// &lt;/summary&gt; internal enum Setter { Public = 6, ProtectedInternal = 5, Internal = 4, Protected = 3, PrivateProtected = 2, Private = 1, } /// &lt;summary&gt; /// Instruct PropertyChanged.SourceGenerator to generate a property which implements INPC using this backing field /// &lt;/summary&gt; [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = false)] [global::System.Diagnostics.Conditional(&quot;DEBUG&quot;)] internal class NotifyAttribute : global::System.Attribute { /// &lt;summary&gt; /// Generate a property whose name is derived from the name of this field, with a public getter and setter /// &lt;/summary&gt; public NotifyAttribute() { } /// &lt;summary&gt; /// Generate a property with the given name, and optionally the given getter and setter accessibilities /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;Name of the generated property&lt;/param&gt; /// &lt;param name=&quot;get&quot;&gt;Accessibility of the generated getter&lt;/param&gt; /// &lt;param name=&quot;set&quot;&gt;Accessibility of the generated setter&lt;/param&gt; public NotifyAttribute(string name, Getter get = Getter.Public, Setter set = Setter.Public) { } /// &lt;summary&gt; /// Generate a property whose name is derived from the name of this field, with the given getter and optionally setter accessibilities /// &lt;/summary&gt; /// &lt;param name=&quot;get&quot;&gt;Accessibility of the generated getter&lt;/param&gt; /// &lt;param name=&quot;set&quot;&gt;Accessibility of the generated setter&lt;/param&gt; public NotifyAttribute(Getter get, Setter set = Setter.Public) { } /// &lt;summary&gt; /// Generate a property whose name is derived from the name of this field, with a public getter and the given setter accessibility /// &lt;/summary&gt; /// &lt;param name=&quot;set&quot;&gt;Accessibility of the generated setter&lt;/param&gt; public NotifyAttribute(Setter set) { } /// &lt;summary&gt; /// If &lt;c&gt;true&lt;/c&gt;, the generated property will be &lt;c&gt;virtual&lt;/c&gt;. /// &lt;/summary&gt; public bool IsVirtual { get; set; } } /// &lt;summary&gt; /// Instruct PropertyChanged.SourceGenerator to also raise INPC notifications for the named properties whenever the property this is applied to changes /// &lt;/summary&gt; [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)] [global::System.Diagnostics.Conditional(&quot;DEBUG&quot;)] internal class AlsoNotifyAttribute : global::System.Attribute { /// &lt;summary&gt; /// Raise INPC notifications for the given properties when the property generated for this backing field changes /// &lt;/summary&gt; /// &lt;param name=&quot;otherProperties&quot;&gt;Other properties to raise INPC notifications for&lt;/param&gt; public AlsoNotifyAttribute(params string[] otherProperties) { } } /// &lt;summary&gt; /// Instruct PropertyChanged.SourceGenerator to raise INPC notifications for this property whenever one of the named generated properties is changed /// &lt;/summary&gt; [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = false)] [global::System.Diagnostics.Conditional(&quot;DEBUG&quot;)] internal class DependsOnAttribute : global::System.Attribute { /// &lt;summary&gt; /// Raise an INPC notification for this property whenever one of the named properties is changed /// &lt;/summary&gt; /// &lt;param name=&quot;dependsOn&quot;&gt;Other properties this property depends on&lt;/param&gt; public DependsOnAttribute(params string[] dependsOn) { } } /// &lt;summary&gt; /// Instruct PropertyChanged.SourceGenerator to assign true to this boolean property whenver any generated member changes /// &lt;/summary&gt; [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)] [global::System.Diagnostics.Conditional(&quot;DEBUG&quot;)] internal class IsChangedAttribute : global::System.Attribute { } /// &lt;summary&gt; /// Specifies an attribute which will be added to the generated property for this backing field /// &lt;/summary&gt; /// &lt;remarks&gt; /// The string passed to this attribute will be placed verbatim into the generated code. All types must therefore by fully-qualified. /// &lt;/remarks&gt; [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)] [global::System.Diagnostics.Conditional(&quot;DEBUG&quot;)] internal class PropertyAttributeAttribute : global::System.Attribute { /// &lt;summary&gt; /// Specify an attribute which iwll be added to the generated property for this backing field /// &lt;/summary&gt; /// &lt;param name=&quot;attribute&quot;&gt;An attribute to place on the generated property&lt;/param&gt; public PropertyAttributeAttribute(string attribute) { } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#download-example-net--c","content":" tip Download Example project PropertyChangedSourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share PropertyChangedSourceGenerator​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#share-propertychangedsourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"MVVM\" has the following generators:​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#category-mvvm-has-the-following-generators","content":" 1 CommunityToolkit.Mvvm  2 PropertyChangedSourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"PropertyChangedSourceGenerator by Antony Male","url":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator#see-category","content":" MVVM ","version":"Next","tagName":"h3"},{"title":"polytype by Eirik Tsarpalis","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/polytype","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#info","content":" info Name: polytype Practical Generic Programming for C# Author: Eirik Tsarpalis NuGet:https://www.nuget.org/packages/polytype/ You can find more details at https://github.com/eiriktsarpalis/PolyType Source: https://github.com/eiriktsarpalis/PolyType  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#original-readme","content":" note PolyType PolyType is a practical datatype-generic programming library for .NET types. It is a direct adaptation of the TypeShape library for F#, adapted to patterns and idioms available in C#. See the project website for additional background and API documentation. Quick Start​ You can try the library by installing the PolyType NuGet package: $ dotnet add package PolyType which includes the core types and source generator for generating type shapes: using PolyType; [GenerateShape] public partial record Person(string name, int age); Doing this will augment Person with an implementation of the IShapeable&lt;Person&gt; interface. This suffices to make Person usable with any library that targets the PolyType core abstractions. You can try this out by installing the built-in example libraries: $ dotnet add package PolyType.Examples Here's how the same value can be serialized to three separate formats. using PolyType.Examples.JsonSerializer; using PolyType.Examples.CborSerializer; using PolyType.Examples.XmlSerializer; Person person = new(&quot;Pete&quot;, 70); JsonSerializerTS.Serialize(person); // {&quot;Name&quot;:&quot;Pete&quot;,&quot;Age&quot;:70} XmlSerializer.Serialize(person); // &lt;value&gt;&lt;Name&gt;Pete&lt;/Name&gt;&lt;Age&gt;70&lt;/Age&gt;&lt;/value&gt; CborSerializer.EncodeToHex(person); // A2644E616D656450657465634167651846 Since the application uses a source generator to produce the shape for Person, it is fully compatible with Native AOT. See the shape providers article for more details on how to use the library with your types. Introduction​ PolyType is a meta-library that facilitates rapid development of high performance datatype-generic programs. It exposes a simplified model for .NET types that makes it easy for library authors to publish production-ready components in just a few lines of code. The built-in source generator ensures that any library built on top of the PolyType abstractions gets Native AOT support for free. As a library author, PolyType lets you write high performance, feature complete generic components that target its core abstractions. For example, a parser API using PolyType might look as follows: public static class MyFancyParser { public static T? Parse&lt;T&gt;(string myFancyFormat) where T : IShapeable&lt;T&gt;; } As an end user, PolyType lets you generate shape models for your own types that can be used with one or more supported libraries: Person? person = MyFancyParser.Parse&lt;Person&gt;(format); // Compiles [GenerateShape] // Generate an IShapeable&lt;TPerson&gt; implementation partial record Person(string name, int age, List&lt;Person&gt; children); For more information see: The core abstractions document for an overview of the core programming model.The shape providers document for an overview of the built-in shape providers and their APIs.The generated API documentation for the project.The PolyType.Examples project for advanced examples of libraries built on top of PolyType. Case Study: Writing a JSON serializer​ The repo includes a JSON serializer built on top of the Utf8JsonWriter/Utf8JsonReader primitives provided by System.Text.Json. At the time of writing, the full implementation is just under 1200 lines of code but exceeds STJ's built-in JsonSerializer both in terms of supported types and performance. Performance​ Here's a benchmark comparing System.Text.Json with the included PolyType implementation: Serialization​ Method\tMean\tRatio\tAllocated\tAlloc RatioSerialize_StjReflection\t491.9 ns\t1.00\t312 B\t1.00 Serialize_StjSourceGen\t467.0 ns\t0.95\t312 B\t1.00 Serialize_StjSourceGen_FastPath\t227.2 ns\t0.46\t-\t0.00 Serialize_PolyTypeReflection\t277.9 ns\t0.57\t-\t0.00 Serialize_PolyTypeSourceGen\t273.6 ns\t0.56\t-\t0.00 Deserialization​ Method\tMean\tRatio\tAllocated\tAlloc RatioDeserialize_StjReflection\t1,593.0 ns\t1.00\t1024 B\t1.00 Deserialize_StjSourceGen\t1,530.3 ns\t0.96\t1000 B\t0.98 Deserialize_PolyTypeReflection\t773.1 ns\t0.49\t440 B\t0.43 Deserialize_PolyTypeSourceGen\t746.7 ns\t0.47\t440 B\t0.43 Even though both serializers target the same underlying reader and writer types, the PolyType implementation is ~75% faster for serialization and ~100% faster for deserialization, when compared with System.Text.Json's metadata serializer. As expected, fast-path serialization is still fastest since its implementation is fully inlined. Known libraries based on PolyType​ The following code bases are based upon PolyType and may be worth checking out. Nerdbank.MessagePack - a MessagePack library with performance to rival MessagePack-CSharp, and greater simplicity and additional features. Project structure​ The repo consists of the following projects: The core PolyType library containing: The core abstractions defining the type model.The reflection provider implementation.The model classes used by the source generator. The PolyType.SourceGenerator project contains the built-in source generator implementation.The PolyType.Roslyn library exposes a set of components for extracting data models from Roslyn type symbols. Used as the foundation for the built-in source generator.PolyType.Examples containing library examples: A serializer built on top of System.Text.Json,A serializer built on top of System.Xml,A serializer built on top of System.Formats.Cbor,A ConfigurationBinder like implementation,A simple pretty-printer for .NET values,A generic random value generator based on System.Random,A JSON schema generator for .NET types,An object cloning function,A structural IEqualityComparer&lt;T&gt; generator for POCOs and collections,An object validator in the style of System.ComponentModel.DataAnnotations.A simple .NET object mapper. The applications folder contains sample Native AOT console applications.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#about","content":" note Generating shape like reflection from classes. See PolyType.Examples for more details  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references polytype &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;PolyType&quot; Version=&quot;0.16.1&quot; /&gt; &lt;PackageReference Include=&quot;PolyType.Examples&quot; Version=&quot;0.16.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ConsoleApp1.Person.ITypeShapeProviderOfT.g.csGenerateShapeProvider.g.csGenerateShapeProvider.Int32.g.csGenerateShapeProvider.ITypeShapeProvider.g.csGenerateShapeProvider.Person.g.csGenerateShapeProvider.Person_Array.g.csGenerateShapeProvider.String.g.cs // &lt;auto-generated/&gt; #nullable enable annotations #nullable disable warnings namespace ConsoleApp1 { public partial record Person : global::PolyType.IShapeable&lt;global::ConsoleApp1.Person&gt; { static global::PolyType.Abstractions.ITypeShape&lt;global::ConsoleApp1.Person&gt; global::PolyType.IShapeable&lt;global::ConsoleApp1.Person&gt;.GetShape() =&gt; global::PolyType.SourceGenerator.GenerateShapeProvider.Default.Person; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#download-example-net--c","content":" tip Download Example project polytype   ","version":"Next","tagName":"h3"},{"title":"Share polytype​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#share-polytype","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/polytype  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"polytype by Eirik Tsarpalis","url":"/RSCG_Examples/v2/docs/polytype#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"ProtobufSourceGenerator by Laszlo Deak","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#info","content":" info Name: ProtobufSourceGenerator A source generator that generates helper classes with properties attributes with ProtoMember attribute. Author: Laszlo Deak NuGet:https://www.nuget.org/packages/LaDeak.ProtobufSourceGenerator/ You can find more details at https://github.com/ladeak/ProtobufSourceGenerator Source: https://github.com/ladeak/ProtobufSourceGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#original-readme","content":" note Protobuf Source Generator A source generator that generates partial helper classes where member properties are attributed with ProtoMember attribute for serialization with protobuf-net. Getting Started​ Install nuget package: dotnet add package LaDeak.ProtobufSourceGenerator The source generator creates partial classes with private properties that are attributed with [ProtoMember] attributes. The properties get and set a corresponding property from the source type. This way developers are free to add and remove properties without explicitly attributing them. Note that adding, removing or reordering properties might cause breaking changes for the serialized data, as the tags assigned with [ProtoMember] attribute are given based on the source type's definition. To generate a partial type for a custom type, mark the type with [ProtoContract] attribute and with partial modifier. For example, the following entity type can be made source generating: public class Entity { public int Id { get; set; } } Add [ProtoContract] attribute and partial modifier on the type definition: [ProtoContract] public partial class Entity { public int Id { get; set; } } With this change a corresponding partial type is generated, that can be used for serialization with protobuf-net: #nullable enable namespace SampleApp; public partial class Entity { [ProtoBuf.ProtoMember(1)] private int ProtoId { get =&gt; Id; set =&gt; Id = value; } } The source generator generates serializable properties that are auto properties with getter and setters. Non-Generating Properties​ init properties are excluded from source generationNon-auto properties are not generatedProperties marked with [ProtoIgnore] and [ProtoMemeber(x)] attributes are not generated.Positional Records (not supported by protobuf-net) In case a property needs to be serialized, but it has no corresponding generated property, it may be attributed with [ProtoMemeber(x)] on the original type. The source generator makes sure that tag x is not used on the generated partial type. Nested Types​ Generating partial types for nested types is supported, however parent types must be marked with partial modifier. Analyzer​ The source generator also comes with an analyzer helping source generation: issues an error if a custom type of a property is not participating in source generationissues an error if a source generated nested type's parent is not partialissues an info if a property is not part of source generationissues a warning when the base type is not attributed for serialization Advanced Usage​ Null Items in Collections​ Serializing null values by protobuf-net is not allowed: new List&lt;string&gt;() { &quot;one&quot;, null, &quot;three&quot; }; The generator will not remove null items, so in this case an exception shall be handled by the user code. Empty Collections​ public List&lt;string&gt; Value { get; set; } Empty lists are not distinguished by the proto contract from a null lists. protobuf-net suggests to have an additional bool property indicating if the list was empty at serialization or not, and based on the value instantiate a collection at deserialization or not. ProtoBufGenearator generates the helper property such as: [global::ProtoBuf.ProtoMember(1)] private System.Collections.Generic.List&lt;string&gt; ProtoValue { get =&gt; Value; set =&gt; Value = value; } [global::ProtoBuf.ProtoMember(2)] [global::System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute] private bool ProtoIsEmptyValue { get =&gt; ProtoValue?.Count == 0; set { if (value) ProtoValue = new(); } } Initialized to Enumerable Empty​ public IEnumerable&lt;string&gt; Values { get; set; } = Enumerable.Empty&lt;string&gt;(); Collections when initialized with enumerable empty cause an issue with deserialization as protobuf-net will attempt to add an item to the existing collection, which is not possible in the above case. In this case the user may initialze with an empty list, or manually decorate the property with [ProtoMember()] (or [ProtoIgnore]) attribute that will exclude it from protobuf source generation. Custom Attributes on Properties​ It is supported to decorate all properties in the generated partial class with custom attributes. [ProtoContract] [GeneratorOptions(PropertyAttributeType = typeof(NotMappedAttribute))] public partial class CustomAttributedEntity { // ... } In the above example, with the type parameter of GeneratorOptions the generator is instructed to apply NotMappedAttribute attribute on all generated properties on a class. For a more fine grained approach consider excluding the given property from the source generation. For such cases use [ProtoMember()] or [ProtoIgnore] attributes. Base Classes and Inheritance​ Follow the instructions of protobuf-net library. Apply [ProtoInclude(...)] attribute on the type definition.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#about","content":" note Serializing a class to protobuf  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references ProtobufSourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;LaDeak.ProtobufSourceGenerator&quot; Version=&quot;1.5.1&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; /&gt; &lt;PackageReference Include=&quot;protobuf-net&quot; Version=&quot;3.2.26&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ProtoPerson.g.cs // &lt;auto-generated/&gt; #nullable enable namespace ProtobufSourceGeneratorDemo; [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute] public partial class Person { [global::ProtoBuf.ProtoMember(1)] private int ProtoId { get =&gt; Id; set =&gt; Id = value; } [global::ProtoBuf.ProtoMember(2)] private string? ProtoName { get =&gt; Name; set =&gt; Name = value; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#download-example-net--c","content":" tip Download Example project ProtobufSourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share ProtobufSourceGenerator​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#share-protobufsourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ProtobufSourceGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Serializer\" has the following generators:​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#category-serializer-has-the-following-generators","content":" 1 GenPack  2 jsonConverterSourceGenerator  3 JsonPolymorphicGenerator  4 ProtobufSourceGenerator  5 StackXML  6 System.Text.Json  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ProtobufSourceGenerator by Laszlo Deak","url":"/RSCG_Examples/v2/docs/ProtobufSourceGenerator#see-category","content":" Serializer ","version":"Next","tagName":"h3"},{"title":"ProxyGen by Dénes Solti","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ProxyGen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#info","content":" info Name: ProxyGen .NET proxy generator powered by Roslyn Author: Dénes Solti NuGet:https://www.nuget.org/packages/ProxyGen.net/ You can find more details at https://github.com/Sholtee/ProxyGen Source: https://github.com/Sholtee/ProxyGen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#original-readme","content":" note ProxyGen.NET .NET proxy generator powered by Roslyn This documentation refers the version 8.X of the library Purposes​ This library currently supports generating proxies for interface interception and duck typing. To hook into interface method calls:​ Create the interceptor class (which is an InterfaceInterceptor descendant): using Solti.Utils.Proxy; ... public class MyInterceptor: InterfaceInterceptor&lt;IMyInterface&gt; { public MyInterceptor(IMyInterface target) : base(target) {} public MyInterceptor(IMyInterface target, MyParam myParam) : base(target) {} // overloaded constructor public override object? Invoke(InvocationContext context) // Invoking the generated proxy instance will trigger this method { if (suppressOriginalMethod) { return something; // ref|out parameters can be assigned by setting the corresponding &quot;context.Args[]&quot; item } context.Args[0] = someNewVal; // &quot;someNewVal&quot; will be forwarded to the original method return base.Invoke(context); // Let the original method do its work } } // OR public class MyInterceptorTargetingTheImplementation: InterfaceInterceptor&lt;IMyInterface, MyInterfaceImplementation&gt; { public MyInterceptor(MyInterfaceImplementation target) : base(target) {} public override object? Invoke(InvocationContext context) { MemberInfo ifaceMember = context.InterfaceMember, // Will point to the invoked IMyInterface member (e.g.: IMyInterface.Foo()) targetMember = context.TargetMember; // Will point to the underlying MyInterfaceImplementation member (e.g. MyInterfaceImplementation.Foo()) return base.Invoke(context); } } Generate a proxy instance invoking the desired constructor: using System; ... IMyInterface target = new MyClass(); ... IMyInterface proxy; proxy = ProxyGenerator&lt;IMyInterface, MyInterceptor&gt;.Activate(Tuple.Create(target)); // or ActivateAsync() proxy = ProxyGenerator&lt;IMyInterface, MyInterceptor&gt;.Activate(Tuple.Create(target, new MyParam())); Enjoy Note that the target can access its most outer enclosing proxy. To achieve this it just has to implement the IProxyAccess&lt;IMyInterface&gt; interface: using Solti.Utils.Proxy; public class MyClass : IMyInterface, IProxyAccess&lt;IMyInterface&gt; { ... public IMyInterface Proxy { get; set; } } For further usage examples see this or that. To create ducks:​ Declare an interface that covers all the desired members of the target class: public class TargetClass // does not implement IDuck { public void Foo(){...} } ... public interface IDuck { void Foo(); } Generate the duck instance: using Solti.Utils.Proxy.Generators; ... TargetClass target = ...; IDuck duck = DuckGenerator&lt;IDuck, TargetClass&gt;.Activate(Tuple.Create(target)); // or ActivateAsync() Quack Related tests can be seen here. Caching the generated assembly​ By setting the ProxyGen.AssemblyCacheDir property in YourApp.runtimeconfig.json you can make the system cache the generated assembly, so next time your app starts and requests the proxy there won't be time consuming emitting operation. You can do it easily by creating a template file named runtimeconfig.template.json in your project folder: { &quot;configProperties&quot;: { &quot;ProxyGen.AssemblyCacheDir&quot;: &quot;GeneratedAssemblies&quot; } } Embedding the generated type​ This library can be used as a source generator so you can embed the generated proxy type into the assembly that uses it. This is simply done by the Solti.Utils.Proxy.Attributes.EmbedGeneratedTypeAttribute: [assembly: EmbedGeneratedType(typeof(ProxyGenerator&lt;IMyInterface, MyInterceptor&lt;IMyInterface&gt;&gt;))] [assembly: EmbedGeneratedType(typeof(DuckGenerator&lt;IMyInterface, MyClass&gt;))] The xXxGenerator.GetGeneratedType() method returns the embedded type if it is present in the assembly in which the GetGeneratedType() was called. Since all the time consumig operations already happened in compile time, requesting embedded types can singificantly improve the performance. Note that: Open generics are not supported.coveralls.io (and other coverage reporters) may crash if your project was augmented by a source generator. To work this issue around: Ignore the generated sources in your coverage app (e.g.: in OpenCover use the -filter:-[*]Proxies.GeneratedClass_* switch)Create an empty file for each generated class (e.g.: YourProject\\Solti.Utils.Proxy\\Solti.Utils.Proxy.Internals.ProxyEmbedder\\Proxies.GeneratedClass_XxX.cs)Exclude these files from your project: &lt;ItemGroup&gt; &lt;Compile Remove=&quot;Solti.Utils.Proxy\\**&quot; /&gt; &lt;EmbeddedResource Remove=&quot;Solti.Utils.Proxy\\**&quot; /&gt; &lt;None Remove=&quot;Solti.Utils.Proxy\\**&quot; /&gt; &lt;/ItemGroup&gt; Inspecting the generated code​ ProxyGen is able to dump the generated sources. Due to performance considerations it is disabled by default. To enable In runtime: Set the ProxyGen.SourceDump property (in the same way you could see above) to the desired directory (note that environment variables are supported): { &quot;configProperties&quot;: { &quot;ProxyGen.SourceDump&quot;: &quot;%TEMP%&quot; } } In compile time (source generator): Extend your .csproj with the following: &lt;PropertyGroup&gt; &lt;ProxyGen_SourceDump&gt;$(OutputPath)Logs&lt;/ProxyGen_SourceDump&gt; &lt;/PropertyGroup&gt; The output should look like this. Migrating from version​ 2.X Delete all the cached assemblies (if the [Proxy|Duck]Generator.CacheDirectory is set somewhere)InterfaceInterceptor.Invoke() returns the result of the original method (instead of CALL_TARGET) so in the override you may never need to invoke the method parameter directly. 3.X [Proxy|Duck]Generator.GeneratedType[Async] property has been removed. To get the generated proxy type call the [Proxy|Duck]Generator.GetGeneratedType[Async]() method.[Proxy|Duck]Generator.CacheDirectory property has been removed. To set the cache directory tweak the runtimeconfig.json file. 4.X The layout of the InterfaceInterceptor&lt;&gt;.Invoke() has been changed. Invocation parameters can be grabbed from the InvocationContext passed to the Invoke() method.The ConcurrentInterfaceInterceptor&lt;&gt; class has been dropped since the InterfaceInterceptor&lt;&gt; class was rewritten in a thread safe manner. 5.X You don't need to manually activate the generated proxy type, instead you may use the built-in Generator.Activate() method. 6.X The InvocationContext.InvokeTarget property has been removed but you should not be affected by itAs proxy embedder has been reimplemented using the v2 Source Generator API, this feature now requires VS 2022 7.X InterfaceInterceptor&lt;TInterface&gt;.Member|Method has been renamed to InterfaceMember|InterfaceMethod Resources​ API DocsBenchmark ResultsVersion History Supported frameworks​ This project currently targets .NET Standard 2.0 and 2.1.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#about","content":" note intercepting and duck typing  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csIPerson.csglobals.cs This is the CSharp Project that references ProxyGen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ProxyGen.NET&quot; Version=&quot;8.2.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Duck_BB1E45629CF5010E4068E5BFBB7EF53B.cs #pragma warning disable [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;ProxyGen.NET&quot;, &quot;8.2.1.0&quot;), global::System.Diagnostics.DebuggerNonUserCodeAttribute, global::System.Runtime.CompilerServices.CompilerGeneratedAttribute] internal sealed class Duck_BB1E45629CF5010E4068E5BFBB7EF53B : global::Solti.Utils.Proxy.Internals.DuckBase&lt;global::ProxyGenDemo.Person&gt;, global::ProxyGenDemo.IPerson { public Duck_BB1E45629CF5010E4068E5BFBB7EF53B(global::ProxyGenDemo.Person target) : base(target) { } [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] global::System.String global::ProxyGenDemo.IPerson.FullName() =&gt; this.Target.FullName(); global::System.String global::ProxyGenDemo.IPerson.FirstName {[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this.Target.FirstName; [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set =&gt; this.Target.FirstName = value; } global::System.String global::ProxyGenDemo.IPerson.LastName {[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this.Target.LastName; [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set =&gt; this.Target.LastName = value; } public static readonly global::System.Func&lt;global::System.Object, global::System.Object&gt; __Activator = tuple =&gt; { switch (tuple) { case global::System.Tuple&lt;global::ProxyGenDemo.Person&gt; t0: return new global::Duck_BB1E45629CF5010E4068E5BFBB7EF53B(t0.Item1); default: throw new global::System.MissingMethodException(&quot;Constructor with the given layout cannot be found.&quot;); } }; [global::System.Runtime.CompilerServices.ModuleInitializerAttribute] public static void Initialize() =&gt; global::Solti.Utils.Proxy.Internals.LoadedTypes.Register(typeof(global::Duck_BB1E45629CF5010E4068E5BFBB7EF53B)); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#download-example-net--c","content":" tip Download Example project ProxyGen   ","version":"Next","tagName":"h3"},{"title":"Share ProxyGen​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#share-proxygen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ProxyGen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ProxyGen by Dénes Solti","url":"/RSCG_Examples/v2/docs/ProxyGen#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"QueryStringGenerator by Tomi Parviainen","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/QueryStringGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#info","content":" info Name: QueryStringGenerator Package Description Author: Tomi Parviainen NuGet:https://www.nuget.org/packages/QueryStringGenerator/ You can find more details at https://github.com/tparviainen/query-string-generator Source: https://github.com/tparviainen/query-string-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#original-readme","content":" note Query String Generator C# incremental generator to create a method that returns the query string of the object. Usage 1. Install the NuGet package​ PM&gt; Install-Package QueryStringGenerator 2. Update the Model(s)​ Class must be decorated with QueryString attribute, which is declared in QueryStringGenerator namespace. using QueryStringGenerator; [QueryString] public class Model { public int? Limit { get; set; } public int? Offset { get; set; } public string? Sort { get; set; } } 3. Call ToQueryString Method to the Instance of the Class​ By default the generated method name is ToQueryString, which when called returns the query string of the object. var model = new Model { Limit = 10, Sort = &quot;Price&quot; }; Console.WriteLine($&quot;Query string: {model.ToQueryString()}&quot;); /* This code example produces the following results: Query string: &amp;limit=10&amp;sort=Price */ Generated Source Code Below is the auto-generated extension method for the class defined in step 2. above. // &lt;auto-generated /&gt; namespace QueryStringGenerator.App.Models { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;QueryStringGenerator&quot;, &quot;1.0.0&quot;)] public static class QueryStringExtensionForModel { public static string ToQueryString(this Model _this) { if (_this == null) { return string.Empty; } var sb = new global::System.Text.StringBuilder(); if (_this.Limit != null) { sb.Append($&quot;&amp;limit={_this.Limit}&quot;); } if (_this.Offset != null) { sb.Append($&quot;&amp;offset={_this.Offset}&quot;); } if (_this.Sort != null) { sb.Append($&quot;&amp;sort={System.Net.WebUtility.UrlEncode(_this.Sort)}&quot;); } return sb.ToString(); } } } Supported Data Types Nullable value types, including enumsReference types NOTE: The query string value for enum is the name of the enum starting with a lowercase character.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#about","content":" note Generate from string properties of a class a query string for a URL.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references QueryStringGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;QueryStringGenerator&quot; Version=&quot;1.1.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.g.csQueryStringAttribute.g.cs // &lt;auto-generated /&gt; namespace DemoQuery { [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;QueryStringGenerator&quot;, &quot;1.0.0&quot;)] internal static class QueryStringExtensionForPerson { public static string ToQueryString(this Person _this) { if (_this == null) { return string.Empty; } var sb = new System.Text.StringBuilder(); if (_this.FirstName != null) { sb.Append($&quot;&amp;firstname={System.Net.WebUtility.UrlEncode(_this.FirstName)}&quot;); } if (_this.LastName != null) { sb.Append($&quot;&amp;lastname={System.Net.WebUtility.UrlEncode(_this.LastName)}&quot;); } return sb.ToString(); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#download-example-net--c","content":" tip Download Example project QueryStringGenerator   ","version":"Next","tagName":"h3"},{"title":"Share QueryStringGenerator​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#share-querystringgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/QueryStringGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"QueryStringGenerator by Tomi Parviainen","url":"/RSCG_Examples/v2/docs/QueryStringGenerator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"QuickConstructor by Flavien Charlon","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/QuickConstructor","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#info","content":" info Name: QuickConstructor Source generator that automatically creates a constructor from the fields and properties of a class. Author: Flavien Charlon NuGet:https://www.nuget.org/packages/QuickConstructor You can find more details at https://github.com/flavien/QuickConstructor Source: https://github.com/flavien/QuickConstructor  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#original-readme","content":" note QuickConstructor QuickConstructor is a reliable and feature-rich source generator that can automatically emit a constructor from the fields and properties of a class. Features​ Decorate any class with the [QuickConstructor] attribute to automatically generate a constructor for that class.The constructor updates in real-time as the class is modified.Customize which fields and properties are initialized in the constructor.Generate null checks automatically based on nullable annotations.Works with nested classes and generic classes.Supports derived classes.Supports classes, records and structs.Ability to place attributes on the parameters of the generated constructor.No traces left after compilation, no runtime reference necessary.Generate XML documentation automatically for the constructor.Lightning fast thanks to the .NET 6.0 incremental source generator system. Example​ Code without QuickConstructor: public class Car { private readonly string _registration; private readonly string _model; private readonly string _make; private readonly string _color; private readonly int _year; public Car(string registration, string model, string make, string color, int year) { _registration = registration; _model = model; _make = make; _color = color; _year = year; } } With QuickConstructor, this becomes: [QuickConstructor] public partial class Car { private readonly string _registration; private readonly string _model; private readonly string _make; private readonly string _color; private readonly int _year; } The constructor is automatically generated from the field definitions. Installation​ The requirements to use the QuickConstructor package are the following: Visual Studio 17.0+.NET SDK 6.0.100+ Install the NuGet package: dotnet add package QuickConstructor Usage​ QuickConstructor is very easy to use. By simply decorating a class with the [QuickConstructor] attribute and making the class partial, the source generator will automatically create a constructor based on fields and properties declared in the class. The constructor will automatically update to reflect any change made to the class. QuickConstructor offers options to customize various aspects of the constructors being generated. Fields selection​ Quick constructors will always initialize read-only fields as the constructor would otherwise cause a compilation error. However mutable fields can either be included or excluded from the constructor. This is controlled via the Fields property of the [QuickConstructor] attribute. The possible values are: Value\tDescriptionIncludeFields.ReadOnlyFields\t(default) Only read-only fields are initialized in the constructor. IncludeFields.AllFields\tAll fields are initialized in the constructor. Fields with an initializer are never included as part of the constructor. Properties selection​ It is possible to control which property is initialized in the constructor via the Properties property of the [QuickConstructor] attribute. The possible values are: Value\tDescriptionIncludeProperties.None\tNo property is initialized in the constructor. IncludeProperties.ReadOnlyProperties\t(default) Only read-only auto-implemented properties are initialized in the constructor. IncludeProperties.AllProperties\tAll settable properties are initialized in the constructor. Properties with an initializer are never included as part of the constructor. Null checks​ QuickConstructor has the ability to generate null checks for reference parameters. This is controlled via the NullCheck property of the [QuickConstructor] attribute. The possible values are: Value\tDescriptionNullChecks.Always\tNull checks are generated for any field or property whose type is a reference type. NullChecks.Never\tNull checks are not generated for this constructor. NullChecks.NonNullableReferencesOnly\t(default) When null-state analysis is enabled (C# 8.0 and later), a null check will be generated only if a type is marked as non-nullable. When null-state analysis is disabled, no null check is generated. For example, with null-state analysis enabled: [QuickConstructor] public partial class Name { private readonly string _firstName; private readonly string? _middleName; private readonly string _lastName; } This code will result in the following constructor being generated: public Name(string firstName, string? middleName, string lastName) { if (firstName == null) throw new ArgumentNullException(nameof(firstName)); if (lastName == null) throw new ArgumentNullException(nameof(lastName)); this._firstName = firstName; this._middleName = middleName; this._lastName = lastName; } Explicitely include a field or property​ It is possible to explicitely include a field or property by decorating it with the [QuickConstructorParameter]. For example: [QuickConstructor] public partial class Vehicle { [QuickConstructorParameter] private int _mileage; private int _speed; } will result in this constructor: public Vehicle(int mileage) { this._mileage = mileage; } While both _mileage and _speed are mutable fields, and therefore are exluded by default, _mileage does get initialized in the constructor because it is decorated with [QuickConstructorParameter]. Overriding the name of a parameter​ It is possible to override the name of a parameter in the constructor using the Name property of the [QuickConstructorParameter] attribute. This class: [QuickConstructor] public partial class Vehicle { [QuickConstructorParameter(Name = &quot;startingMileage&quot;)] private int _mileage; private int _speed; } will result in this constructor: public Vehicle(int startingMileage) { this._mileage = startingMileage; } Derived classes​ It is possible to generate a constructor for a class inheriting from a base class, however the base class must either itself be decorated with [QuickConstructor], or it must have a parameterless constructor. For example: [QuickConstructor(Fields = IncludeFields.AllFields)] public partial class Vehicle { private int _mileage; private int _speed; } [QuickConstructor] public partial class Bus : Vehicle { private readonly int _capacity; } In that situation, a constructor will be generated for the Bus class, with the following implementation: public Bus(int mileage, int speed, int capacity) : base(mileage, speed) { this._capacity = capacity; } Constructor accessibility​ It is possible to customize the accessibility level of the auto-generated constructor. This is controlled via the ConstructorAccessibility property of the [QuickConstructor] attribute. License​ Copyright 2022 Flavien Charlon Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#about","content":" note Fast add constructors that are read only FIELDS Has multiple other features  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references QuickConstructor &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;QuickConstructor&quot; Version=&quot;1.0.5&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.cs /// &lt;auto-generated&gt; /// This code was generated by the QuickConstructor source generator. /// &lt;/auto-generated&gt; #nullable enable namespace QuickConstructorDemo { partial class Person { /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref=&quot;Person&quot; /&gt; class. /// &lt;/summary&gt; public Person(string @firstName, string? @lastName) { if (@firstName == null) throw new global::System.ArgumentNullException(nameof(@firstName)); this.@FirstName = @firstName; this.@LastName = @lastName; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#download-example-net--c","content":" tip Download Example project QuickConstructor   ","version":"Next","tagName":"h3"},{"title":"Share QuickConstructor​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#share-quickconstructor","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/QuickConstructor  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Constructor\" has the following generators:​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#category-constructor-has-the-following-generators","content":" 1 AutoConstructor  2 AutoCtor  3 AutoDeconstruct  4 ConstructorGenerator  5 PrimaryParameter  6 QuickConstructor  7 sourcedepend  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"QuickConstructor by Flavien Charlon","url":"/RSCG_Examples/v2/docs/QuickConstructor#see-category","content":" Constructor ","version":"Next","tagName":"h3"},{"title":"RazorBlade by Lucas Trzesniewski","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RazorBlade","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#info","content":" info Name: RazorBlade Compile Razor templates at build-time without a dependency on ASP.NET. Author: Lucas Trzesniewski NuGet:https://www.nuget.org/packages/RazorBlade/ You can find more details at https://github.com/ltrzesniewski/RazorBlade Source: https://github.com/ltrzesniewski/RazorBlade  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#original-readme","content":" note RazorBlade The sharpest part of the razor. Compile Razor templates at build-time without a dependency on ASP.NET. Usage​ This package will generate a template class for every .cshtml file in your project. The generated classes will inherit from RazorBlade.HtmlTemplate by default, though it is advised to specify the base class explicitly to get the best IDE experience: @inherits RazorBlade.HtmlTemplate A version with a model is also available for convenience. The following will add a Model property and a constructor with a TModel parameter: @inherits RazorBlade.HtmlTemplate&lt;TModel&gt; Further documentation is provided below. Example​ The following template, in the TestTemplate.cshtml file: @inherits RazorBlade.HtmlTemplate Hello, &lt;i&gt;@Name&lt;/i&gt;! @functions { public string? Name { get; set; } } Will generate the following class in your project: internal partial class TestTemplate : RazorBlade.HtmlTemplate { // ... public string? Name { get; set; } // ... } That you can use like the following: var template = new TestTemplate { Name = &quot;World&quot; }; var result = template.Render(); With a model​ A similar template with a model would be: @using MyApplication.Models @inherits RazorBlade.HtmlTemplate&lt;GreetingModel&gt; Hello, &lt;i&gt;@Model.Name&lt;/i&gt;! Instantiating the generated class requires a model argument: var model = new GreetingModel { Name = &quot;World&quot; }; var template = new TestTemplate(model); var result = template.Render(); Documentation​ Base template classes​ For HTML templates, specify one of the following base classes with an @inherits directive: RazorBlade.HtmlTemplateRazorBlade.HtmlTemplate&lt;TModel&gt; If you'd like to write a plain text template (which never escapes HTML), the following classes are available: RazorBlade.PlainTextTemplateRazorBlade.PlainTextTemplate&lt;TModel&gt; They all derive from RazorBlade.RazorTemplate, which provides the base functionality. You can also write your own base classes. Marking a constructor with [TemplateConstructor] will forward it to the generated template class. Writing templates​ HTML escaping can be avoided by using the @Html.Raw(value) method, just like in ASP.NET. The IEncodedContent interface represents content which does not need to be escaped. The HtmlString class is a simple implementation of this interface. Templates can be included in other templates by evaluating them, since they implement IEncodedContent. For instance, a Footer template can be included by writing @(new Footer()). Remember to always create a new instance of the template to include, even if it doesn't contain custom code, as templates are stateful and not thread-safe. The namespace of the generated class can be customized with the @namespace directive. The default value is deduced from the file location. Executing templates​ The RazorTemplate base class provides Render and RenderAsync methods to execute the template. Templates are stateful and not thread-safe, so it is advised to always create new instances of the templates to render. MSBuild​ The source generator will process RazorBlade MSBuild items which have the .cshtml file extension. By default, all .cshtml files are included, unless one of the EnableDefaultRazorBladeItems or EnableDefaultItems properties are set to false. You can also manually customize this set. Removing the dependency on RazorBlade​ RazorBlade makes it possible to remove the dependency on its runtime assembly. This could be useful for library projects which should be self-contained, with no dependencies on external packages. This mode is enabled by default when the PackageReference of RazorBlade has the PrivateAssets=&quot;all&quot; attribute. In order to avoid compilation warnings, the assembly reference also needs to be explicitly excluded with ExcludeAssets=&quot;compile;runtime&quot;. &lt;PackageReference Include=&quot;RazorBlade&quot; Version=&quot;...&quot; ExcludeAssets=&quot;compile;runtime&quot; PrivateAssets=&quot;all&quot; /&gt; A source generator will then embed an internal version of the RazorBlade library in the target project. This behavior can also be controlled by setting the RazorBladeEmbeddedLibrary MSBuild property to true or false.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#about","content":" note Fast templating with Razor syntax Do not forget to put into AdditionalFiles section of csproj file  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csPersonDisplay.cshtml This is the CSharp Project that references RazorBlade &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RazorBlade&quot; Version=&quot;0.4.3&quot; PrivateAssets=&quot;all&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;PersonDisplay.cshtml&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Attributes.g.csHtmlHelper.g.csHtmlString.g.csHtmlTemplate.g.csIEncodedContent.g.csPlainTextTemplate.g.csRazorTemplate.g.csRazorBladeDemo.PersonDisplay.Razor.g.csRazorBladeDemo.PersonDisplay.RazorBlade.g.cs // This file is part of the RazorBlade library. #nullable enable using System; namespace RazorBlade.Support; /// &lt;summary&gt; /// Specifies that this constructor needs to be provided by the generated template class. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Constructor)] internal sealed class TemplateConstructorAttribute : Attribute { } /// &lt;summary&gt; /// Specifies if a method should be used depending on the template being sync or async. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Method)] internal sealed class ConditionalOnAsyncAttribute : Attribute { /// &lt;summary&gt; /// The message to display. /// &lt;/summary&gt; public string? Message { get; set; } /// &lt;summary&gt; /// Marks a method as meant to be used in a sync or async template. /// &lt;/summary&gt; /// &lt;param name=&quot;async&quot;&gt;True for methods meant to be used in async templates, and false for methods meant to be used for sync templates.&lt;/param&gt; public ConditionalOnAsyncAttribute(bool async) { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#download-example-net--c","content":" tip Download Example project RazorBlade   ","version":"Next","tagName":"h3"},{"title":"Share RazorBlade​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#share-razorblade","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RazorBlade  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RazorBlade by Lucas Trzesniewski","url":"/RSCG_Examples/v2/docs/RazorBlade#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"RazorSlices by Damiam Edwards","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RazorSlices","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#info","content":" info Name: RazorSlices Package Description Author: Damiam Edwards NuGet:https://www.nuget.org/packages/RazorSlices/ You can find more details at https://github.com/DamianEdwards/RazorSlices Source: https://github.com/DamianEdwards/RazorSlices  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#original-readme","content":" note Razor Slices Lightweight Razor-based templates for ASP.NET Core without MVC, Razor Pages, or Blazor, optimized for high-performance, unbuffered rendering with low allocations. Compatible with trimming and native AOT. Great for returning dynamically rendered HTML from Minimal APIs, middleware, etc. Supports .NET 8+ Getting StartedInstallationFeatures Getting Started​ Install the NuGet package into your ASP.NET Core project (.NET 8+): &gt; dotnet add package RazorSlices Create a directory in your project called Slices and add a _ViewImports.cshtml file to it with the following content: @inherits RazorSliceHttpResult @using System.Globalization; @using Microsoft.AspNetCore.Razor; @using Microsoft.AspNetCore.Http.HttpResults; @tagHelperPrefix __disable_tagHelpers__: @removeTagHelper *, Microsoft.AspNetCore.Mvc.Razor In the same directory, add a Hello.cshtml file with the following content: @inherits RazorSliceHttpResult&lt;DateTime&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Hello from Razor Slices!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; Hello from Razor Slices! The time is @Model &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Each .cshtml file will have a proxy type generated for it by the Razor Slices source generator that you can use as the generic argument to the various APIs in Razor Slices for rendering slices. Add a minimal API to return the slice in your Program.cs: app.MapGet(&quot;/hello&quot;, () =&gt; Results.Extensions.RazorSlice&lt;MyApp.Slices.Hello, DateTime&gt;(DateTime.Now)); Installation​ NuGet Releases​ This package is currently available from nuget.org: &gt; dotnet add package RazorSlices CI Builds​ If you wish to use builds from this repo's main branch you can install them from this repo's package feed. Create a personal access token for your GitHub account with the read:packages scope with your desired expiration length: At the command line, navigate to your user profile directory and run the following command to add the package feed to your NuGet configuration, replacing the &lt;GITHUB_USER_NAME&gt; and &lt;PERSONAL_ACCESS_TOKEN&gt; placeholders with the relevant values: ~&gt; dotnet nuget add source -n GitHub -u &lt;GITHUB_USER_NAME&gt; -p &lt;PERSONAL_ACCESS_TOKEN&gt; https://nuget.pkg.github.com/DamianEdwards/index.json You should now be able to add a reference to the package specifying a version from the repository packages feed See these instructions for further details about working with GitHub package feeds. Features​ The library is still new and features are being actively added. Currently supported​ ASP.NET Core 8.0 and above Strongly-typed models (via @inherits RazorSlice&lt;MyModel&gt; or @inherits RazorSliceHttpResult&lt;MyModel&gt;) Razor constructs: Implicit expressions, e.g. @someVariable Explicit expressions, e.g. @(someBool ? thisThing : thatThing) Control structures, e.g. @if(), @switch(), etc. Looping, e.g. @for, @foreach, @while, @do Code blocks, e.g. @{ var someThing = someOtherThing; } Conditional attribute rendering Functions, e.g. @functions { private readonly string _someString = &quot;A very important string&quot;; private int DoAThing() =&gt; 123; } Templated Razor delegates, e.g. @inherits RazorSlice&lt;Todo&gt; &lt;h1&gt;@Title(Model)&lt;/h1&gt; @functions { private IHtmlContent Title(Todo todo) { &lt;text&gt;Todo @todo.Id: @todo.Title&lt;/text&gt; return HtmlString.Empty; } } DI-activated properties via @inject Rendering slices from slices (aka partials) via @(await RenderPartialAsync&lt;MyPartial&gt;()) Using slices as layouts for other slices, including layouts with strongly-typed models: For the layout slice, inherit from RazorLayoutSlice or RazorLayoutSlice&lt;TModel&gt; and use @await RenderBodyAsync() in the layout to render the body @inherits RazorLayoutSlice&lt;LayoutModel&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;@Model.Title&lt;/title&gt; @await RenderSectionAsync(&quot;head&quot;) &lt;/head&gt; &lt;body&gt; @await RenderBodyAsync() &lt;footer&gt; @await RenderSectionAsync(&quot;footer&quot;) &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; For the slice using the layout, implement IUsesLayout&lt;TLayout&gt; or IUsesLayout&lt;TLayout, TModel&gt; to declare which layout to use. If using a layout with a model, ensure you implement the LayoutModel property in your @functions block, e.g @inherits RazorSlice&lt;SomeModel&gt; @implements IUsesLayout&lt;LayoutSlice, LayoutModel&gt; &lt;div&gt; @* Content here *@ &lt;/div&gt; @functions { public LayoutModel LayoutModel =&gt; new() { Title = &quot;My Layout&quot; }; } Layouts can render sections via @await RenderSectionAsync(&quot;SectionName&quot;) and slices can render content into sections by overriding ExecuteSectionAsync, e.g.: protected override Task ExecuteSectionAsync(string name) { if (name == &quot;lorem-header&quot;) { &lt;p class=&quot;text-info&quot;&gt;This page renders a custom &lt;code&gt;IHtmlContent&lt;/code&gt; type that contains lorem ipsum content.&lt;/p&gt; } return Task.CompletedTask; } Note: The @section directive is not supported as it's incompatible with the rendering approach of Razor Slices Asynchronous rendering, i.e. the template can contain await statements, e.g. @await WriteTheThing() Writing UTF8 byte[] values directly to the output Rendering directly to PipeWriter, Stream, TextWriter, StringBuilder, and string outputs, including optimizations for not boxing struct values, zero-allocation rendering of primitives like numbers, etc. (rather than just calling ToString() on everything) Return a slice instance directly as an IResult in minimal APIs via @inherits RazorSliceHttpResult and Results.Extensions.RazorSlice(&quot;/Slices/Hello.cshtml&quot;) Full support for trimming and native AOT when used in conjunction with ASP.NET Core Minimal APIs Interested in supporting but not sure yet​ Extensions to help support using HTMX with Razor SlicesGetting small updates to the Razor compiler itself to get some usability and performance improvements, e.g.: Don't mark the template's ExecuteAsync method as an async method unless the template contains await statements to save on the async state machine overheadSupport compiling static template elements to UTF8 string literals (ReadOnlySpan&lt;byte&gt;) instead of string literals to save on the UTF16 to UTF8 conversion during renderingSupport disabling the default registered @addtaghelper and @model directives which rely on MVC No intention to support​ Tag Helpers and View Components (they're tied to MVC and are intrinsically &quot;heavy&quot;)@model directive (the Razor compiler does not support its use in conjunction with custom base-types via @inherits)@attribute [Authorize] (wrong layer of abstraction for minimal APIs, etc.)@section directive (the Razor compiler emits code that is incompatible with the rendering approach of Razor Slices)  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#about","content":" note Generating html from razor templates. Attention, generates IHttpResult, not html string.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPersonHTML.cshtmlPerson.cs This is the CSharp Project that references RazorSlices &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.10&quot; /&gt; &lt;PackageReference Include=&quot;RazorSlices&quot; Version=&quot;0.8.1&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.6.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Slices_PersonHTML_cshtml.g.csSlices__ViewImports_cshtml.g.csRazorDemoSlices.RazorSliceProxies.g.cs #pragma checksum &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\PersonHTML.cshtml&quot; &quot;{8829d00f-11b8-4213-878b-770e8597ac16}&quot; &quot;6b3710e80836b438a5d8935ea469d238fc095e46298456ca847e09519393bb5e&quot; // &lt;auto-generated/&gt; #pragma warning disable 1591 [assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Slices_PersonHTML), @&quot;mvc.1.0.view&quot;, @&quot;/Slices/PersonHTML.cshtml&quot;)] namespace AspNetCoreGeneratedDocument { #line default using global::System; using global::System.Collections.Generic; using global::System.Linq; using global::System.Threading.Tasks; using global::Microsoft.AspNetCore.Mvc; using global::Microsoft.AspNetCore.Mvc.Rendering; using global::Microsoft.AspNetCore.Mvc.ViewFeatures; #nullable restore #line (3,2)-(3,29) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\_ViewImports.cshtml&quot; using System.Globalization; #nullable disable #nullable restore #line (4,2)-(4,35) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\_ViewImports.cshtml&quot; using Microsoft.AspNetCore.Razor; #nullable disable #nullable restore #line (5,2)-(5,46) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\_ViewImports.cshtml&quot; using Microsoft.AspNetCore.Http.HttpResults; #nullable disable #line default #line hidden [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute(&quot;Identifier&quot;, &quot;/Slices/PersonHTML.cshtml&quot;)] [global::System.Runtime.CompilerServices.CreateNewOnMetadataUpdateAttribute] #nullable restore internal sealed class Slices_PersonHTML : #nullable restore #line (1,11)-(1,55) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\PersonHTML.cshtml&quot; RazorSliceHttpResult&lt;RazorDemoSlices.Person&gt; #line default #line hidden #nullable disable #nullable disable { #pragma warning disable 1998 public async override global::System.Threading.Tasks.Task ExecuteAsync() { WriteLiteral(&quot;&lt;!DOCTYPE html&gt;\\r\\n&lt;html lang=\\&quot;en\\&quot;&gt;\\r\\n&lt;head&gt;\\r\\n &lt;meta charset=\\&quot;utf-8\\&quot;&gt;\\r\\n &lt;title&gt;Hello from Razor Slices!&lt;/title&gt;\\r\\n&lt;/head&gt;\\r\\n&lt;body&gt;\\r\\n &lt;p&gt;\\r\\n My name is &quot;); Write( #nullable restore #line (10,21)-(10,36) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\PersonHTML.cshtml&quot; Model.FirstName #line default #line hidden #nullable disable ); WriteLiteral(&quot; &quot;); Write( #nullable restore #line (10,38)-(10,52) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RazorSlices\\src\\RazorDemoSlices\\Slices\\PersonHTML.cshtml&quot; Model.LastName #line default #line hidden #nullable disable ); WriteLiteral(&quot;\\r\\n &lt;/p&gt;\\r\\n&lt;/body&gt;\\r\\n&lt;/html&gt;&quot;); } #pragma warning restore 1998 #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;dynamic&gt; Html { get; private set; } = default!; #nullable disable } } #pragma warning restore 1591   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#download-example-net--c","content":" tip Download Example project RazorSlices   ","version":"Next","tagName":"h3"},{"title":"Share RazorSlices​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#share-razorslices","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RazorSlices  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RazorSlices by Damiam Edwards","url":"/RSCG_Examples/v2/docs/RazorSlices#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"RDG by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RDG","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#info","content":" info Name: RDG The HttpClient factory is a pattern for configuring and retrieving named HttpClients in a composable way. The HttpClient factory provides extensibility to plug in DelegatingHandlers that address cross-cutting concerns such as service location, load balancing, and reliability. The default HttpClient factory provides built-in diagnostics and logging and manages the lifetimes of connections in a performant way. Commonly used types: System.Net.Http.IHttpClientFactory Author: Microsoft NuGet:https://www.nuget.org/packages/Microsoft.Extensions.Http You can find more details at https://learn.microsoft.com/en-us/aspnet/core/fundamentals/aot/request-delegate-generator/rdg?view=aspnetcore-8.0 Source: https://github.com/dotnet/aspnetcore  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#original-readme","content":" note ASP.NET Core ASP.NET Core is an open-source and cross-platform framework for building modern cloud-based internet-connected applications, such as web apps, IoT apps, and mobile backends. ASP.NET Core apps run on .NET, a free, cross-platform, and open-source application runtime. It was architected to provide an optimized development framework for apps that are deployed to the cloud or run on-premises. It consists of modular components with minimal overhead, so you retain flexibility while constructing your solutions. You can develop and run your ASP.NET Core apps cross-platform on Windows, Mac, and Linux. Learn more about ASP.NET Core. Get started​ Follow the Getting Started instructions. Also check out the .NET Homepage for released versions of .NET, getting started guides, and learning resources. See the Triage Process document for more information on how we handle incoming issues. How to engage, contribute, and give feedback​ Some of the best ways to contribute are to try things out, file issues, join in design conversations, and make pull-requests. Download our latest daily buildsFollow along with the development of ASP.NET Core: Community Standup: The community standup is held every week and streamed live on YouTube. You can view past standups in the linked playlist.Roadmap: The schedule and milestone themes for ASP.NET Core. Build ASP.NET Core source codeCheck out the contributing page to see the best places to log issues and start discussions. Reporting security issues and bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) secure@microsoft.com. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. Related projects​ These are some other repos for related projects: Documentation - documentation sources for https://learn.microsoft.com/aspnet/core/Entity Framework Core - data access technologyRuntime - cross-platform runtime for cloud, mobile, desktop, and IoT appsRazor - the Razor compiler and tooling for working with Razor syntax (.cshtml, .razor) Code of conduct​ See CODE-OF-CONDUCT Nightly builds​ This table includes links to download the latest builds of the ASP.NET Core Shared Framework. Also included are links to download the Windows Hosting Bundle, which includes the ASP.NET Core Shared Framework, the .NET Runtime Shared Framework, and the IIS plugin (ASP.NET Core Module). You can download the latest .NET Runtime builds here, and the latest .NET SDK builds here. If you're unsure what you need, then install the SDK; it has everything except the IIS plugin. Platform\tShared Framework (Installer)\tShared Framework (Binaries)\tHosting Bundle (Installer)Windows x64\tInstaller\tBinaries\tInstaller Windows x86\tInstaller\tBinaries\tInstaller Windows arm64\tInstaller\tBinaries\tInstaller macOS x64\tN/A\tBinaries\tN/A macOS arm64\tN/A\tBinaries\tN/A Linux x64\tDeb Installer - RPM Installer\tBinaries\tN/A Linux arm\tN/A\tBinaries\tN/A Linux arm64\tRPM Installer\tBinaries\tN/A Linux-musl-x64\tN/A\tBinaries\tN/A Linux-musl-arm\tN/A\tBinaries\tN/A Linux-musl-arm64\tN/A\tBinaries\tN/A  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#about","content":" note Generating replacing for minimal API Map  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references RDG &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- &lt;PackageReference Include=&quot;Microsoft.Extensions.Http&quot;&gt;&lt;/PackageReference&gt; --&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;8.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EnableRequestDelegateGenerator&gt;true&lt;/EnableRequestDelegateGenerator&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GeneratedRouteBuilderExtensions.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable namespace System.Runtime.CompilerServices { [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.18.0, Culture=neutral, PublicKeyToken=adb9793829ddae60&quot;, &quot;8.0.18.0&quot;)] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] file sealed class InterceptsLocationAttribute : Attribute { public InterceptsLocationAttribute(string filePath, int line, int column) { } } } namespace Microsoft.AspNetCore.Http.Generated { using System; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Globalization; using System.Linq; using System.Reflection; using System.Runtime.CompilerServices; using System.Text.Json; using System.Text.Json.Serialization.Metadata; using System.Threading.Tasks; using System.IO; using Microsoft.AspNetCore.Antiforgery; using Microsoft.AspNetCore.Routing; using Microsoft.AspNetCore.Routing.Patterns; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Http.Json; using Microsoft.AspNetCore.Http.Metadata; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.FileProviders; using Microsoft.Extensions.Logging; using Microsoft.Extensions.Primitives; using Microsoft.Extensions.Options; using MetadataPopulator = System.Func&lt;System.Reflection.MethodInfo, Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions?, Microsoft.AspNetCore.Http.RequestDelegateMetadataResult&gt;; using RequestDelegateFactoryFunc = System.Func&lt;System.Delegate, Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions, Microsoft.AspNetCore.Http.RequestDelegateMetadataResult?, Microsoft.AspNetCore.Http.RequestDelegateResult&gt;; [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.18.0, Culture=neutral, PublicKeyToken=adb9793829ddae60&quot;, &quot;8.0.18.0&quot;)] file static class GeneratedRouteBuilderExtensionsCore { private static readonly JsonOptions FallbackJsonOptions = new(); private static readonly string[] GetVerb = new[] { global::Microsoft.AspNetCore.Http.HttpMethods.Get }; [InterceptsLocation(@&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RDG\\src\\RDGDemoWebApi\\Program.cs&quot;, 22, 5)] internal static RouteHandlerBuilder MapGet0( this IEndpointRouteBuilder endpoints, [StringSyntax(&quot;Route&quot;)] string pattern, Delegate handler) { MetadataPopulator populateMetadata = (methodInfo, options) =&gt; { Debug.Assert(options != null, &quot;RequestDelegateFactoryOptions not found.&quot;); Debug.Assert(options.EndpointBuilder != null, &quot;EndpointBuilder not found.&quot;); options.EndpointBuilder.Metadata.Add(new System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.18.0, Culture=neutral, PublicKeyToken=adb9793829ddae60&quot;, &quot;8.0.18.0&quot;)); options.EndpointBuilder.Metadata.Add(new ProducesResponseTypeMetadata(statusCode: StatusCodes.Status200OK, type: typeof(global::WeatherForecast[]), contentTypes: GeneratedMetadataConstants.JsonContentType)); return new RequestDelegateMetadataResult { EndpointMetadata = options.EndpointBuilder.Metadata.AsReadOnly() }; }; RequestDelegateFactoryFunc createRequestDelegate = (del, options, inferredMetadataResult) =&gt; { Debug.Assert(options != null, &quot;RequestDelegateFactoryOptions not found.&quot;); Debug.Assert(options.EndpointBuilder != null, &quot;EndpointBuilder not found.&quot;); Debug.Assert(options.EndpointBuilder.ApplicationServices != null, &quot;ApplicationServices not found.&quot;); Debug.Assert(options.EndpointBuilder.FilterFactories != null, &quot;FilterFactories not found.&quot;); var handler = Cast(del, global::WeatherForecast[] () =&gt; throw null!); EndpointFilterDelegate? filteredInvocation = null; var serviceProvider = options.ServiceProvider ?? options.EndpointBuilder.ApplicationServices; var jsonOptions = serviceProvider?.GetService&lt;IOptions&lt;JsonOptions&gt;&gt;()?.Value ?? FallbackJsonOptions; var jsonSerializerOptions = jsonOptions.SerializerOptions; jsonSerializerOptions.MakeReadOnly(); var objectJsonTypeInfo = (JsonTypeInfo&lt;object?&gt;)jsonSerializerOptions.GetTypeInfo(typeof(object)); var responseJsonTypeInfo = (JsonTypeInfo&lt;global::WeatherForecast[]?&gt;)jsonSerializerOptions.GetTypeInfo(typeof(global::WeatherForecast[])); if (options.EndpointBuilder.FilterFactories.Count &gt; 0) { filteredInvocation = GeneratedRouteBuilderExtensionsCore.BuildFilterDelegate(ic =&gt; { if (ic.HttpContext.Response.StatusCode == 400) { return ValueTask.FromResult&lt;object?&gt;(Results.Empty); } return ValueTask.FromResult&lt;object?&gt;(handler()); }, options.EndpointBuilder, handler.Method); } Task RequestHandler(HttpContext httpContext) { var wasParamCheckFailure = false; if (wasParamCheckFailure) { httpContext.Response.StatusCode = 400; return Task.CompletedTask; } var result = handler(); return GeneratedRouteBuilderExtensionsCore.WriteJsonResponseAsync(httpContext.Response, result, responseJsonTypeInfo); } async Task RequestHandlerFiltered(HttpContext httpContext) { var wasParamCheckFailure = false; if (wasParamCheckFailure) { httpContext.Response.StatusCode = 400; } var result = await filteredInvocation(EndpointFilterInvocationContext.Create(httpContext)); if (result is not null) { await GeneratedRouteBuilderExtensionsCore.ExecuteReturnAsync(result, httpContext, objectJsonTypeInfo); } } RequestDelegate targetDelegate = filteredInvocation is null ? RequestHandler : RequestHandlerFiltered; var metadata = inferredMetadataResult?.EndpointMetadata ?? ReadOnlyCollection&lt;object&gt;.Empty; return new RequestDelegateResult(targetDelegate, metadata); }; return MapCore( endpoints, pattern, handler, GetVerb, populateMetadata, createRequestDelegate); } internal static RouteHandlerBuilder MapCore( this IEndpointRouteBuilder routes, string pattern, Delegate handler, IEnumerable&lt;string&gt;? httpMethods, MetadataPopulator populateMetadata, RequestDelegateFactoryFunc createRequestDelegate) { return RouteHandlerServices.Map(routes, pattern, handler, httpMethods, populateMetadata, createRequestDelegate); } private static T Cast&lt;T&gt;(Delegate d, T _) where T : Delegate { return (T)d; } private static EndpointFilterDelegate BuildFilterDelegate(EndpointFilterDelegate filteredInvocation, EndpointBuilder builder, MethodInfo mi) { var routeHandlerFilters = builder.FilterFactories; var context0 = new EndpointFilterFactoryContext { MethodInfo = mi, ApplicationServices = builder.ApplicationServices, }; var initialFilteredInvocation = filteredInvocation; for (var i = routeHandlerFilters.Count - 1; i &gt;= 0; i--) { var filterFactory = routeHandlerFilters[i]; filteredInvocation = filterFactory(context0, filteredInvocation); } return filteredInvocation; } private static Task ExecuteReturnAsync(object? obj, HttpContext httpContext, JsonTypeInfo&lt;object?&gt; jsonTypeInfo) { if (obj is IResult r) { return r.ExecuteAsync(httpContext); } else if (obj is string s) { return httpContext.Response.WriteAsync(s); } else { return WriteJsonResponseAsync(httpContext.Response, obj, jsonTypeInfo); } } [UnconditionalSuppressMessage(&quot;Trimming&quot;, &quot;IL2026:RequiresUnreferencedCode&quot;, Justification = &quot;The 'JsonSerializer.IsReflectionEnabledByDefault' feature switch, which is set to false by default for trimmed ASP.NET apps, ensures the JsonSerializer doesn't use Reflection.&quot;)] [UnconditionalSuppressMessage(&quot;AOT&quot;, &quot;IL3050:RequiresDynamicCode&quot;, Justification = &quot;See above.&quot;)] private static Task WriteJsonResponseAsync&lt;T&gt;(HttpResponse response, T? value, JsonTypeInfo&lt;T?&gt; jsonTypeInfo) { var runtimeType = value?.GetType(); if (jsonTypeInfo.ShouldUseWith(runtimeType)) { return HttpResponseJsonExtensions.WriteAsJsonAsync(response, value, jsonTypeInfo, default); } return response.WriteAsJsonAsync&lt;object?&gt;(value, jsonTypeInfo.Options); } private static bool HasKnownPolymorphism(this JsonTypeInfo jsonTypeInfo) =&gt; jsonTypeInfo.Type.IsSealed || jsonTypeInfo.Type.IsValueType || jsonTypeInfo.PolymorphismOptions is not null; private static bool ShouldUseWith(this JsonTypeInfo jsonTypeInfo, [NotNullWhen(false)] Type? runtimeType) =&gt; runtimeType is null || jsonTypeInfo.Type == runtimeType || jsonTypeInfo.HasKnownPolymorphism(); } [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.18.0, Culture=neutral, PublicKeyToken=adb9793829ddae60&quot;, &quot;8.0.18.0&quot;)] file static class GeneratedMetadataConstants { public static readonly string[] JsonContentType = new [] { &quot;application/json&quot; }; public static readonly string[] PlaintextContentType = new [] { &quot;text/plain&quot; }; public static readonly string[] FormFileContentType = new[] { &quot;multipart/form-data&quot; }; public static readonly string[] FormContentType = new[] { &quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot; }; } [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.18.0, Culture=neutral, PublicKeyToken=adb9793829ddae60&quot;, &quot;8.0.18.0&quot;)] file sealed class LogOrThrowExceptionHelper { private readonly ILogger? _rdgLogger; private readonly bool _shouldThrow; public LogOrThrowExceptionHelper(IServiceProvider? serviceProvider, RequestDelegateFactoryOptions? options) { var loggerFactory = serviceProvider?.GetRequiredService&lt;ILoggerFactory&gt;(); _rdgLogger = loggerFactory?.CreateLogger(&quot;Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator&quot;); _shouldThrow = options?.ThrowOnBadRequest ?? false; } public void RequestBodyIOException(IOException exception) { if (_rdgLogger != null) { _requestBodyIOException(_rdgLogger, exception); } } private static readonly Action&lt;ILogger, Exception?&gt; _requestBodyIOException = LoggerMessage.Define(LogLevel.Debug, new EventId(1, &quot;RequestBodyIOException&quot;), &quot;Reading the request body failed with an IOException.&quot;); public void InvalidJsonRequestBody(string parameterTypeName, string parameterName, Exception exception) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Failed to read parameter \\&quot;{0} {1}\\&quot; from the request body as JSON.&quot;, parameterTypeName, parameterName); throw new BadHttpRequestException(message, exception); } if (_rdgLogger != null) { _invalidJsonRequestBody(_rdgLogger, parameterTypeName, parameterName, exception); } } private static readonly Action&lt;ILogger, string, string, Exception?&gt; _invalidJsonRequestBody = LoggerMessage.Define&lt;string, string&gt;(LogLevel.Debug, new EventId(2, &quot;InvalidJsonRequestBody&quot;), &quot;Failed to read parameter \\&quot;{ParameterType} {ParameterName}\\&quot; from the request body as JSON.&quot;); public void ParameterBindingFailed(string parameterTypeName, string parameterName, string sourceValue) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Failed to bind parameter \\&quot;{0} {1}\\&quot; from \\&quot;{2}\\&quot;.&quot;, parameterTypeName, parameterName, sourceValue); throw new BadHttpRequestException(message); } if (_rdgLogger != null) { _parameterBindingFailed(_rdgLogger, parameterTypeName, parameterName, sourceValue, null); } } private static readonly Action&lt;ILogger, string, string, string, Exception?&gt; _parameterBindingFailed = LoggerMessage.Define&lt;string, string, string&gt;(LogLevel.Debug, new EventId(3, &quot;ParameterBindingFailed&quot;), &quot;Failed to bind parameter \\&quot;{ParameterType} {ParameterName}\\&quot; from \\&quot;{SourceValue}\\&quot;.&quot;); public void RequiredParameterNotProvided(string parameterTypeName, string parameterName, string source) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Required parameter \\&quot;{0} {1}\\&quot; was not provided from {2}.&quot;, parameterTypeName, parameterName, source); throw new BadHttpRequestException(message); } if (_rdgLogger != null) { _requiredParameterNotProvided(_rdgLogger, parameterTypeName, parameterName, source, null); } } private static readonly Action&lt;ILogger, string, string, string, Exception?&gt; _requiredParameterNotProvided = LoggerMessage.Define&lt;string, string, string&gt;(LogLevel.Debug, new EventId(4, &quot;RequiredParameterNotProvided&quot;), &quot;Required parameter \\&quot;{ParameterType} {ParameterName}\\&quot; was not provided from {Source}.&quot;); public void ImplicitBodyNotProvided(string parameterName) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Implicit body inferred for parameter \\&quot;{0}\\&quot; but no body was provided. Did you mean to use a Service instead?&quot;, parameterName); throw new BadHttpRequestException(message); } if (_rdgLogger != null) { _implicitBodyNotProvided(_rdgLogger, parameterName, null); } } private static readonly Action&lt;ILogger, string, Exception?&gt; _implicitBodyNotProvided = LoggerMessage.Define&lt;string&gt;(LogLevel.Debug, new EventId(5, &quot;ImplicitBodyNotProvided&quot;), &quot;Implicit body inferred for parameter \\&quot;{ParameterName}\\&quot; but no body was provided. Did you mean to use a Service instead?&quot;); public void UnexpectedJsonContentType(string? contentType) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Expected a supported JSON media type but got \\&quot;{0}\\&quot;.&quot;, contentType); throw new BadHttpRequestException(message, StatusCodes.Status415UnsupportedMediaType); } if (_rdgLogger != null) { _unexpectedJsonContentType(_rdgLogger, contentType ?? &quot;(none)&quot;, null); } } private static readonly Action&lt;ILogger, string, Exception?&gt; _unexpectedJsonContentType = LoggerMessage.Define&lt;string&gt;(LogLevel.Debug, new EventId(6, &quot;UnexpectedContentType&quot;), &quot;Expected a supported JSON media type but got \\&quot;{ContentType}\\&quot;.&quot;); public void UnexpectedNonFormContentType(string? contentType) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Expected a supported form media type but got \\&quot;{0}\\&quot;.&quot;, contentType); throw new BadHttpRequestException(message, StatusCodes.Status415UnsupportedMediaType); } if (_rdgLogger != null) { _unexpectedNonFormContentType(_rdgLogger, contentType ?? &quot;(none)&quot;, null); } } private static readonly Action&lt;ILogger, string, Exception?&gt; _unexpectedNonFormContentType = LoggerMessage.Define&lt;string&gt;(LogLevel.Debug, new EventId(7, &quot;UnexpectedNonFormContentType&quot;), &quot;Expected a supported form media type but got \\&quot;{ContentType}\\&quot;.&quot;); public void InvalidFormRequestBody(string parameterTypeName, string parameterName, Exception exception) { if (_shouldThrow) { var message = string.Format(CultureInfo.InvariantCulture, &quot;Failed to read parameter \\&quot;{0} {1}\\&quot; from the request body as form.&quot;, parameterTypeName, parameterName); throw new BadHttpRequestException(message, exception); } if (_rdgLogger != null) { _invalidFormRequestBody(_rdgLogger, parameterTypeName, parameterName, exception); } } private static readonly Action&lt;ILogger, string, string, Exception?&gt; _invalidFormRequestBody = LoggerMessage.Define&lt;string, string&gt;(LogLevel.Debug, new EventId(8, &quot;InvalidFormRequestBody&quot;), &quot;Failed to read parameter \\&quot;{ParameterType} {ParameterName}\\&quot; from the request body as form.&quot;); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#download-example-net--c","content":" tip Download Example project RDG   ","version":"Next","tagName":"h3"},{"title":"Share RDG​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#share-rdg","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RDG  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RDG by Microsoft","url":"/RSCG_Examples/v2/docs/RDG#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"Ridge by Michal Motyčka","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Ridge","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#info","content":" info Name: Ridge a html, json and xml parsing library. Author: Michal Motyčka NuGet:https://www.nuget.org/packages/Ridge/ You can find more details at https://github.com/Melchy/Ridge Source: https://github.com/Melchy/Ridge  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#original-readme","content":" note Ridge Ridge is a source generator that creates strongly typed HTTP clients for integration tests. HTTP clients generated by Ridge require theWebApplicationFactory. The use of the WebApplicationFactory allows Ridge to access internal components of ASP.NET and analyze them. This significantly improves route generation and allows implicit support of areas, routing without attributes, and so on. Ridge supports .NET 6 and newer. Quick links​ NuGet packageDocumentation Example​ // --------------------------------------------ExampleController.cs------------------------------------------------- [GenerateClient] // Notice the attribute public class ExamplesController : Controller { [HttpGet(&quot;ReturnGivenNumber&quot;)] public ActionResult&lt;int&gt; ReturnGivenNumber( [FromQuery] int input) { return input; } } // ------------------------------------------Test.cs---------------------------------------------------------------- [Test] public async Task CallControllerUsingRidge() { using var webApplicationFactory = new WebApplicationFactory&lt;Program&gt;() .WithRidge(); // add ridge dependencies to WebApplicationFactory var client = webApplicationFactory.CreateClient(); // create instance of client generated by source generator var examplesControllerClient = new ExamplesControllerClient(client, webApplicationFactory.Services); var response = await examplesControllerClient.ReturnGivenNumber(10); Assert.True(response.IsSuccessStatusCode); Assert.AreEqual(10, response.Result); } Setup​ Mark controller with the [GenerateClient] attribute. This attribute tells the source generator to generate class *YourControllerName*Client in the assembly which contains the controller.Call WithRidge() extension method on WebApplicationFactory.Create instance of *YourControllerName*Client.Create requests using *YourControllerName*Client instance. Hint: Use package RidgeDotNet.AspNetCore in your AspNetCore project instead of RidgeDotNet. RidgeDotNet.AspNetCore has minimal dependencies, preventing unnecessary test code in your project. Best practices​ Use ActionResult&lt;T&gt; when possible to enable strongly typed response generation.Use [FromRoute], [FromQuery], [FromBody], and similar attributes when possible to ensure correct parameter mapping.Add a logger to check generated requests and responses when necessary. More information here.Use RethrowExceptionInsteadOfReturningHttpResponsefor improved test experience. Wiki​ Full documentation can be found in the wiki. Features that are not currently supported​ Note that you can always fall back to WebApplicationFactory when you need to test something that is not supported by Ridge. Minimal APICustom request types. JSON is the only request type currently supported.Single action parameter transformations (add parameter to single action or transform parameter in single action)[FromForm] attributesActions returning custom implementation of IActionResult. Mappings that are not supported by default​ Ridge supports a wide range of parameter mappings, but some special cases are currently not supported by default. Known unsupported mappings are the following: [FromQuery] with an array of complex argumentsComplex types with [FromXXX] attributes on properties Example of [FromQuery] with an array of complex arguments: public virtual ActionResult NotSupported([FromQuery] IEnumerable&lt;ComplexArgument&gt; complexArguments) { //.. } Example of complex types with [FromXXX] attributes on properties: public virtual ActionResult NotSupported(Mixed mixed) { //.. } public class Mixed { [FromBody] public string BodyName { get; set; } [FromHeader] public string HeaderName { get; set; } } If you need to use this feature then consider writingcustom HttpRequestFactoryMiddlewareor creating an issue. Contributions​ Icon made by Freepik from www.flaticon.com.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#about","content":" note Generating test classes for controllers  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#example-source-csproj-source-files","content":" CSharp ProjectProgram.csWeatherForecastController.csBasicTests.cs This is the CSharp Project that references Ridge &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;7.0.9&quot; /&gt; &lt;PackageReference Include=&quot;RidgeDotNet.AspNetCore&quot; Version=&quot;2.0.1&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  WeatherForecastController_Client.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by the Ridge source generator // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ #nullable enable #pragma warning disable CS0419 using Ridge.AspNetCore; using Ridge.AspNetCore.Serialization; using Ridge.AspNetCore.Response; using Ridge.AspNetCore.Parameters; using System; using System.Collections.Generic; using System.Net.Http; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; namespace RidgeDemoWebApp.Controllers { /// &lt;summary&gt; /// Generated Api client. Calls &lt;see cref=&quot;RidgeDemoWebApp.Controllers.WeatherForecastController&quot; /&gt; /// &lt;/summary&gt; public class WeatherForecastControllerClient { private readonly IApplicationClient _applicationClient; /// &lt;summary&gt; /// Creates client for controller. /// &lt;/summary&gt; /// &lt;param name=&quot;httpClient&quot;&gt; /// HttpClient which will be used to call application. /// &lt;/param&gt; /// &lt;param name=&quot;serviceProvider&quot;&gt; /// Application serviceProvider. /// &lt;/param&gt; public WeatherForecastControllerClient(HttpClient httpClient, IServiceProvider serviceProvider) { var applicationClientFactory = serviceProvider.GetService&lt;IApplicationClientFactory&gt;(); if(applicationClientFactory == null) { throw new InvalidOperationException(&quot;'IApplicationClientFactory' could not be resolved. Did you forget to call WithRidge()?.&quot;); } else { _applicationClient = applicationClientFactory.CreateClient(serviceProvider, httpClient); } } /// &lt;summary&gt; /// Calls &lt;see cref=&quot;RidgeDemoWebApp.Controllers.WeatherForecastController.Get&quot; /&gt;. /// &lt;/summary&gt; public async Task&lt;HttpCallResponse&lt;System.Collections.Generic.IEnumerable&lt;RidgeDemoWebApp.WeatherForecast&gt;&gt;&gt; Get(params AdditionalParameter[] additionalParameters) { var methodName = nameof(RidgeDemoWebApp.Controllers.WeatherForecastController.Get); var actionParameters = new Type[] { }; var parametersAndTransformations = new List&lt;RawParameterAndTransformationInfo&gt;() { }; return await _applicationClient.CallAction&lt;System.Collections.Generic.IEnumerable&lt;RidgeDemoWebApp.WeatherForecast&gt;,RidgeDemoWebApp.Controllers.WeatherForecastController&gt;(methodName, actionParameters, additionalParameters, parametersAndTransformations); } } } #pragma warning restore CS0419 #nullable restore   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#download-example-net--c","content":" tip Download Example project Ridge   ","version":"Next","tagName":"h3"},{"title":"Share Ridge​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#share-ridge","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Ridge  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Tests\" has the following generators:​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#category-tests-has-the-following-generators","content":" 1 mocklis  2 MockMe  3 MSTest  4 Ridge  5 Rocks  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Ridge by Michal Motyčka","url":"/RSCG_Examples/v2/docs/Ridge#see-category","content":" Tests ","version":"Next","tagName":"h3"},{"title":"ResXGenerator by Aigamo","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ResXGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#info","content":" info Name: ResXGenerator ResX Designer Source Generator. Author: Aigamo NuGet:https://www.nuget.org/packages/Aigamo.ResXGenerator/ You can find more details at https://github.com/ycanardeau/ResXGenerator Source: https://github.com/ycanardeau/ResXGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#original-readme","content":" note ResXGenerator ResXGenerator is a C# source generator to generate strongly-typed resource classes for looking up localized strings. NOTE: This is an independent fork of VocaDb/ResXFileCodeGenerator. Usage​ Install the Aigamo.ResXGenerator package: dotnet add package Aigamo.ResXGenerator Generated source from ActivityEntrySortRuleNames.resx: // ------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; // ------------------------------------------------------------------------------ #nullable enable namespace Resources { using System.Globalization; using System.Resources; public static class ActivityEntrySortRuleNames { private static ResourceManager? s_resourceManager; public static ResourceManager ResourceManager =&gt; s_resourceManager ??= new ResourceManager(&quot;VocaDb.Web.App_GlobalResources.ActivityEntrySortRuleNames&quot;, typeof(ActivityEntrySortRuleNames).Assembly); public static CultureInfo? CultureInfo { get; set; } /// &lt;summary&gt; /// Looks up a localized string similar to Oldest. /// &lt;/summary&gt; public static string? CreateDate =&gt; ResourceManager.GetString(nameof(CreateDate), CultureInfo); /// &lt;summary&gt; /// Looks up a localized string similar to Newest. /// &lt;/summary&gt; public static string? CreateDateDescending =&gt; ResourceManager.GetString(nameof(CreateDateDescending), CultureInfo); } } New in version 3​ The generator now utilizes the IIncrementalGenerator API to instantly update the generated code, thus giving you instant intellisense. Added error handling for multiple members of same name, and members that have same name as class. These are clickable in visual studio to lead you to the source of the error, unlike before where they resulted in broken builds and you had to figure out why. Namespace naming fixed for resx files in the top level folder. Resx files can now be named with multiple extensions, e.g. myresources.cshtml.resx and will result in class being called myresources. Added the ability to generate inner classes, partial outer classes and non-static members. Very useful if you want to ensure that only a particular class can use those resources instead of being spread around the codebase. Use same 'Link' setting as msbuild uses to determine embedded file name. Can set a class postfix name New in version 3.1​ The generator can now generate code to lookup translations instead of using the 20 year old System.Resources.ResourceManager Options​ PublicClass (per file or globally)​ Use cases: https://github.com/VocaDB/ResXFileCodeGenerator/issues/2. Since version 2.0.0, ResXGenerator generates internal classes by default. You can change this behavior by setting PublicClass to true. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;Resources\\ArtistCategoriesNames.resx&quot;&gt; &lt;PublicClass&gt;true&lt;/PublicClass&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;Resources\\ArtistCategoriesNames.resx&quot; PublicClass=&quot;true&quot; /&gt; &lt;/ItemGroup&gt; If you want to apply this globally, use &lt;PropertyGroup&gt; &lt;ResXGenerator_PublicClass&gt;true&lt;/ResXGenerator_PublicClass&gt; &lt;/PropertyGroup&gt; NullForgivingOperators (globally)​ Use cases: https://github.com/VocaDB/ResXFileCodeGenerator/issues/1. &lt;PropertyGroup&gt; &lt;ResXGenerator_NullForgivingOperators&gt;true&lt;/ResXGenerator_NullForgivingOperators&gt; &lt;/PropertyGroup&gt; By setting ResXGenerator_NullForgivingOperators to true, ResXGenerator generates public static string CreateDate =&gt; ResourceManager.GetString(nameof(CreateDate), CultureInfo)!; instead of public static string? CreateDate =&gt; ResourceManager.GetString(nameof(CreateDate), CultureInfo); Non-static classes (per file or globally)​ To use generated resources with Microsoft.Extensions.Localization IStringLocalizer&lt;T&gt; and resource manager, the resolved type cannot be a static class. You can disable default behavior per file by setting the value to false. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;Resources\\ArtistCategoriesNames.resx&quot;&gt; &lt;StaticClass&gt;false&lt;/StaticClass&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_StaticClass&gt;false&lt;/ResXGenerator_StaticClass&gt; &lt;/PropertyGroup&gt; With global non-static class you can also reset StaticClass per file by setting the value to anything but false. Partial classes (per file or globally)​ To extend an existing class, you can make your classes partial. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;Resources\\ArtistCategoriesNames.resx&quot;&gt; &lt;PartialClass&gt;true&lt;/PartialClass&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_PartialClass&gt;true&lt;/ResXGenerator_PartialClass&gt; &lt;/PropertyGroup&gt; Static Members (per file or globally)​ In some rare cases it might be useful for the members to be non-static. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;Resources\\ArtistCategoriesNames.resx&quot;&gt; &lt;StaticMembers&gt;false&lt;/StaticMembers&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_StaticMembers&gt;false&lt;/ResXGenerator_StaticMembers&gt; &lt;/PropertyGroup&gt; Postfix class name (per file or globally)​ In some cases the it is useful if the name of the generated class doesn't follow the filename. A clear example is Razor pages that always generates a class for the code-behind named &quot;-Model&quot;. This example configuration allows you to use Resources.MyResource in your model, or @Model.Resources.MyResource in your cshtml file. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**/Pages/*.resx&quot;&gt; &lt;ClassNamePostfix&gt;Model&lt;/ClassNamePostfix&gt; &lt;StaticMembers&gt;false&lt;/StaticMembers&gt; &lt;StaticClass&gt;false&lt;/StaticClass&gt; &lt;PartialClass&gt;true&lt;/PartialClass&gt; &lt;PublicClass&gt;true&lt;/PublicClass&gt; &lt;InnerClassVisibility&gt;public&lt;/InnerClassVisibility&gt; &lt;PartialClass&gt;false&lt;/PartialClass&gt; &lt;InnerClassInstanceName&gt;Resources&lt;/InnerClassInstanceName&gt; &lt;InnerClassName&gt;_Resources&lt;/InnerClassName&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or just the postfix globally &lt;PropertyGroup&gt; &lt;ResXGenerator_ClassNamePostfix&gt;Model&lt;/ResXGenerator_ClassNamePostfix&gt; &lt;/PropertyGroup&gt; Inner classes (per file or globally)​ If your resx files are organized along with code files, it can be quite useful to ensure that the resources are not accessible outside the specific class the resx file belong to. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**/*.resx&quot;&gt; &lt;DependentUpon&gt;$([System.String]::Copy('%(FileName).cs'))&lt;/DependentUpon&gt; &lt;InnerClassName&gt;MyResources&lt;/InnerClassName&gt; &lt;InnerClassVisibility&gt;private&lt;/InnerClassVisibility&gt; &lt;InnerClassInstanceName&gt;EveryoneLikeMyNaming&lt;/InnerClassInstanceName&gt; &lt;StaticMembers&gt;false&lt;/StaticMembers&gt; &lt;StaticClass&gt;false&lt;/StaticClass&gt; &lt;PartialClass&gt;true&lt;/PartialClass&gt; &lt;/EmbeddedResource&gt; &lt;EmbeddedResource Update=&quot;**/*.??.resx;**/*.??-??.resx&quot;&gt; &lt;DependentUpon&gt;$([System.IO.Path]::GetFileNameWithoutExtension('%(FileName)')).resx&lt;/DependentUpon&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_InnerClassName&gt;MyResources&lt;/ResXGenerator_InnerClassName&gt; &lt;ResXGenerator_InnerClassVisibility&gt;private&lt;/ResXGenerator_InnerClassVisibility&gt; &lt;ResXGenerator_InnerClassInstanceName&gt;EveryoneLikeMyNaming&lt;/InnerClassInstanceName&gt; &lt;ResXGenerator_StaticMembers&gt;false&lt;/ResXGenerator_StaticMembers&gt; &lt;ResXGenerator_StaticClass&gt;false&lt;/ResXGenerator_StaticClass&gt; &lt;ResXGenerator_PartialClass&gt;true&lt;/ResXGenerator_PartialClass&gt; &lt;/PropertyGroup&gt; This example would generate files like this: // ------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; // ------------------------------------------------------------------------------ #nullable enable namespace Resources { using System.Globalization; using System.Resources; public partial class ActivityEntryModel { public MyResources EveryoneLikeMyNaming { get; } = new(); private class MyResources { private static ResourceManager? s_resourceManager; public static ResourceManager ResourceManager =&gt; s_resourceManager ??= new ResourceManager(&quot;VocaDb.Web.App_GlobalResources.ActivityEntryModel&quot;, typeof(ActivityEntryModel).Assembly); public CultureInfo? CultureInfo { get; set; } /// &lt;summary&gt; /// Looks up a localized string similar to Oldest. /// &lt;/summary&gt; public string? CreateDate =&gt; ResourceManager.GetString(nameof(CreateDate), CultureInfo); /// &lt;summary&gt; /// Looks up a localized string similar to Newest. /// &lt;/summary&gt; public string? CreateDateDescending =&gt; ResourceManager.GetString(nameof(CreateDateDescending), CultureInfo); } } } Inner Class Visibility (per file or globally)​ By default inner classes are not generated, unless this setting is one of the following: PublicInternalPrivateProtectedSameAsOuter Case is ignored, so you could use &quot;private&quot;. It is also possible to use &quot;NotGenerated&quot; to override on a file if the global setting is to generate inner classes. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**/*.resx&quot;&gt; &lt;InnerClassVisibility&gt;private&lt;/InnerClassVisibility&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_InnerClassVisibility&gt;private&lt;/ResXGenerator_InnerClassVisibility&gt; &lt;/PropertyGroup&gt; Inner Class name (per file or globally)​ By default the inner class is named &quot;Resources&quot;, which can be overridden with this setting: &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**/*.resx&quot;&gt; &lt;InnerClassName&gt;MyResources&lt;/InnerClassName&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_InnerClassName&gt;MyResources&lt;/ResXGenerator_InnerClassName&gt; &lt;/PropertyGroup&gt; Inner Class instance name (per file or globally)​ By default no instance is available of the class, but that can be made available if this setting is given. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**/*.resx&quot;&gt; &lt;InnerClassInstanceName&gt;EveryoneLikeMyNaming&lt;/InnerClassInstanceName&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_InnerClassInstanceName&gt;EveryoneLikeMyNaming&lt;/ResXGenerator_InnerClassInstanceName&gt; &lt;/PropertyGroup&gt; For brevity, settings to make everything non-static is omitted. Generate Code (per file or globally)​ By default the ancient System.Resources.ResourceManager is used. Benefits of using System.Resources.ResourceManager: Supports custom CultureInfoLanguages are only loaded the first time a language is referencedOnly use memory for the languages usedCan ship satellite dlls separately Disadvantages of using System.Resources.ResourceManager The satellite dlls are always lazy loaded, so cold start penalty is highSatellite dlls requires that you can scan the dir for which files are available, which can cause issues in some project typesLoading a satellite dll takes way more memory than just loading the respective stringsBuild time for .resources -&gt; satellite dll can be quite slow (~150msec per file)Linker optimization doesn't work, since it cannot know which resources are referenced Benefits of using GenerateCode code generation: All languages are placed in the main dll, no more satellite dllsLookup speed is ~600% faster (5ns vs 33ns)Zero allocationsVery small code footprint (about 10 bytes per language, instead of including the entire System.Resources)Very fast build timeBecause all code is referencing the strings directly, the linker can see which strings are actually used and which are not.No cold start penaltySmaller combined size of dll (up to 50%, since it doesn't need to store the keys for every single language) Disadvantages of using GenerateCode code generation Since CultureInfo are pre-computed, custom CultureInfo are not supported (or rather, they always return the default language)Cannot lookup &quot;all&quot; keys (unless using reflection)Main dll size increased since it contains all language strings (sometimes, the compiler can pack code strings much better than resource strings and it doesn't need to store the keys) Notice, it is required to set GenerateResource to false for all resx files to prevent the built-in resgen.exe from running. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**/*.resx&quot;&gt; &lt;GenerateCode&gt;true&lt;/GenerateCode&gt; &lt;GenerateResource&gt;false&lt;/GenerateResource&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; or globally &lt;PropertyGroup&gt; &lt;ResXGenerator_GenerateCode&gt;true&lt;/ResXGenerator_GenerateCode&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;@(EmbeddedResource)&quot;&gt; &lt;GenerateResource&gt;false&lt;/GenerateResource&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; If you get build error MSB3030, add this to your csproj to prevent it from trying to copy satellite dlls that no longer exists &lt;Target Name=&quot;PreventMSB3030&quot; DependsOnTargets=&quot;ComputeIntermediateSatelliteAssemblies&quot; BeforeTargets=&quot;GenerateSatelliteAssemblies&quot; &gt; &lt;ItemGroup&gt; &lt;IntermediateSatelliteAssembliesWithTargetPath Remove=&quot;@(IntermediateSatelliteAssembliesWithTargetPath)&quot;&gt;&lt;/IntermediateSatelliteAssembliesWithTargetPath&gt; &lt;/ItemGroup&gt; &lt;/Target&gt; Resource file namespaces​ Linked resources namespace follow Link if it is set. The Link setting is also used by msbuild built-in 'resgen.exe' to determine the embedded filename. Use-case: Linking .resx files from outside source (e.g. generated in a localization sub-module by translators) and expose them as &quot;Resources&quot; namespace. &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;..\\..\\Another.Project\\Translations\\*.resx&quot;&gt; &lt;Link&gt;Resources\\%(FileName)%(Extension)&lt;/Link&gt; &lt;PublicClass&gt;true&lt;/PublicClass&gt; &lt;StaticClass&gt;false&lt;/StaticClass&gt; &lt;/EmbeddedResource&gt; &lt;EmbeddedResource Update=&quot;..\\..\\Another.Project\\Translations\\*.*.resx&quot;&gt; &lt;DependentUpon&gt;$([System.IO.Path]::GetFilenameWithoutExtension([System.String]::Copy('%(FileName)'))).resx&lt;/DependentUpon&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; You can also use the TargetPath to just overwrite the namespace &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;..\\..\\Another.Project\\Translations\\*.resx&quot;&gt; &lt;TargetPath&gt;Resources\\%(FileName)%(Extension)&lt;/TargetPath&gt; &lt;PublicClass&gt;true&lt;/PublicClass&gt; &lt;StaticClass&gt;false&lt;/StaticClass&gt; &lt;/EmbeddedResource&gt; &lt;EmbeddedResource Update=&quot;..\\..\\Another.Project\\Translations\\*.*.resx&quot;&gt; &lt;DependentUpon&gt;$([System.IO.Path]::GetFilenameWithoutExtension([System.String]::Copy('%(FileName)'))).resx&lt;/DependentUpon&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; It is also possible to set the namespace using the CustomToolNamespace setting. Unlike the Link and TargetPath, which will prepend the assemblies namespace and includes the filename, the CustomToolNamespace is taken verbatim. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;**\\*.resx&quot;&gt; &lt;CustomToolNamespace&gt;MyNamespace.AllMyResourcesAreBelongToYouNamespace&lt;/CustomToolNamespace&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; Excluding resx files​ Individual resx files can also be excluded from being processed by setting the SkipFile metadata to true. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;ExcludedFile.resx&quot;&gt; &lt;SkipFile&gt;true&lt;/SkipFile&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; Alternatively it can be set with the attribute SkipFile=&quot;true&quot;. &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;ExcludedFile.resx&quot; SkipFile=&quot;true&quot; /&gt; &lt;/ItemGroup&gt; References​ Introducing C# Source Generators | .NET Blogmicrosoft/CsWin32: A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project.kenkendk/mdresxfilecodegenerator: Resx Designer Generatordotnet/ResXResourceManager: Manage localization of all ResX-Based resources in one central place.roslyn/source-generators.cookbook.md at master · dotnet/roslynroslyn/Using Additional Files.md at master · dotnet/roslynufcpp - YouTubeamis92/csharp-source-generators: A list of C# Source Generators (not necessarily awesome) and associated resources: articles, talks, demos.A NuGet package workflow using GitHub Actions | by Andrew Craven | Medium  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#about","content":" note Resources as string  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csGenResources.resxGenResources.Designer.cs This is the CSharp Project that references ResXGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Aigamo.ResXGenerator&quot; Version=&quot;4.2.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;Compile Update=&quot;GenResources.Designer.cs&quot;&gt; &lt;DesignTime&gt;True&lt;/DesignTime&gt; &lt;AutoGen&gt;True&lt;/AutoGen&gt; &lt;DependentUpon&gt;GenResources.resx&lt;/DependentUpon&gt; &lt;/Compile&gt; &lt;Compile Update=&quot;GenResources.resx&quot;&gt; &lt;GenerateCode&gt;true&lt;/GenerateCode&gt; &lt;GenerateResource&gt;false&lt;/GenerateResource&gt; &lt;PublicClass&gt;true&lt;/PublicClass&gt; &lt;/Compile&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;GenResources.resx&quot;&gt; &lt;Generator&gt;PublicResXFileCodeGenerator&lt;/Generator&gt; &lt;LastGenOutput&gt;GenResources.Designer.cs&lt;/LastGenOutput&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;ResXGenerator_GenerateCode&gt;true&lt;/ResXGenerator_GenerateCode&gt; &lt;ResXGenerator_ClassNamePostfix&gt;Model&lt;/ResXGenerator_ClassNamePostfix&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Aigamo.ResXGenerator..g.csResXDemo.GenResourcesModel.g.cs // ------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; // ------------------------------------------------------------------------------ #nullable enable namespace Aigamo.ResXGenerator; internal static partial class Helpers { public static string GetString_(string fallback) =&gt; System.Globalization.CultureInfo.CurrentUICulture.LCID switch { _ =&gt; fallback }; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#download-example-net--c","content":" tip Download Example project ResXGenerator   ","version":"Next","tagName":"h3"},{"title":"Share ResXGenerator​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#share-resxgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ResXGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ResXGenerator by Aigamo","url":"/RSCG_Examples/v2/docs/ResXGenerator#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"Rocks by Json Bock","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Rocks","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#info","content":" info Name: Rocks A mocking library based on the Compiler API. Author: Json Bock NuGet:https://www.nuget.org/packages/Rocks/ You can find more details at https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md Source: https://github.com/JasonBock/Rocks/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#original-readme","content":" note Rocks A mocking library based on the Compiler APIs (Roslyn + Mocks) Getting Started​ Reference the Rocks NuGet package - that's it. Prerequisites​ The Rocks package targets .NET Standard 2.0 for host flexibility. Note that Rocks looks for, and generates, code that targets .NET 7. Usage​ To make a mock, you take an interface or an unsealed class that has virtual members: public interface IAmSimple { void TargetAction(); } and you use Rocks to create a mock with expectations, along with verifying its usage: var expectations = Rock.Create&lt;IAmSimple&gt;(); expectations.Methods().TargetAction(); var mock = expectations.Instance(); mock.TargetAction(); expectations.Verify(); More details can be found on the Quickstart page. Additional Documentation​ Discord ServerChangelogUnit testing best practices with .NET Core and .NET StandardBenchmarkMockNet Feedback​ If you run into any issues, please add them here.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#about","content":" note Creating mocks for testing interfaces/classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#example-source-csproj-source-files","content":" CSharp ProjectTestClock.cs This is the CSharp Project that references Rocks &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;IsTestProject&gt;true&lt;/IsTestProject&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.5.0&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestAdapter&quot; Version=&quot;2.2.10&quot; /&gt; &lt;PackageReference Include=&quot;MSTest.TestFramework&quot; Version=&quot;2.2.10&quot; /&gt; &lt;PackageReference Include=&quot;coverlet.collector&quot; Version=&quot;3.2.0&quot; /&gt; &lt;PackageReference Include=&quot;Rocks&quot; Version=&quot;7.1.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\MockRock\\MockRock.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IMyClock_Rock_Create.g.cs using Rocks.Extensions; using System.Collections.Generic; using System.Collections.Immutable; #nullable enable namespace MockRock { internal static class CreateExpectationsOfIMyClockExtensions { internal static global::Rocks.Expectations.MethodExpectations&lt;global::MockRock.IMyClock&gt; Methods(this global::Rocks.Expectations.Expectations&lt;global::MockRock.IMyClock&gt; @self) =&gt; new(@self); internal static global::MockRock.IMyClock Instance(this global::Rocks.Expectations.Expectations&lt;global::MockRock.IMyClock&gt; @self) { if (!@self.WasInstanceInvoked) { @self.WasInstanceInvoked = true; var @mock = new RockIMyClock(@self); @self.MockType = @mock.GetType(); return @mock; } else { throw new global::Rocks.Exceptions.NewMockInstanceException(&quot;Can only create a new mock once.&quot;); } } private sealed class RockIMyClock : global::MockRock.IMyClock { private readonly global::System.Collections.Generic.Dictionary&lt;int, global::System.Collections.Generic.List&lt;global::Rocks.HandlerInformation&gt;&gt; handlers; public RockIMyClock(global::Rocks.Expectations.Expectations&lt;global::MockRock.IMyClock&gt; @expectations) { this.handlers = @expectations.Handlers; } [global::Rocks.MemberIdentifier(0, &quot;global::System.DateTime GetNow()&quot;)] public global::System.DateTime GetNow() { if (this.handlers.TryGetValue(0, out var @methodHandlers)) { var @methodHandler = @methodHandlers[0]; @methodHandler.IncrementCallCount(); var @result = @methodHandler.Method is not null ? ((global::System.Func&lt;global::System.DateTime&gt;)@methodHandler.Method)() : ((global::Rocks.HandlerInformation&lt;global::System.DateTime&gt;)@methodHandler).ReturnValue; return @result!; } throw new global::Rocks.Exceptions.ExpectationException(&quot;No handlers were found for global::System.DateTime GetNow()&quot;); } [global::Rocks.MemberIdentifier(1, &quot;global::System.DateTime GetUtcNow()&quot;)] public global::System.DateTime GetUtcNow() { if (this.handlers.TryGetValue(1, out var @methodHandlers)) { var @methodHandler = @methodHandlers[0]; @methodHandler.IncrementCallCount(); var @result = @methodHandler.Method is not null ? ((global::System.Func&lt;global::System.DateTime&gt;)@methodHandler.Method)() : ((global::Rocks.HandlerInformation&lt;global::System.DateTime&gt;)@methodHandler).ReturnValue; return @result!; } throw new global::Rocks.Exceptions.ExpectationException(&quot;No handlers were found for global::System.DateTime GetUtcNow()&quot;); } } } internal static class MethodExpectationsOfIMyClockExtensions { internal static global::Rocks.MethodAdornments&lt;global::MockRock.IMyClock, global::System.Func&lt;global::System.DateTime&gt;, global::System.DateTime&gt; GetNow(this global::Rocks.Expectations.MethodExpectations&lt;global::MockRock.IMyClock&gt; @self) =&gt; new global::Rocks.MethodAdornments&lt;global::MockRock.IMyClock, global::System.Func&lt;global::System.DateTime&gt;, global::System.DateTime&gt;(@self.Add&lt;global::System.DateTime&gt;(0, new global::System.Collections.Generic.List&lt;global::Rocks.Argument&gt;())); internal static global::Rocks.MethodAdornments&lt;global::MockRock.IMyClock, global::System.Func&lt;global::System.DateTime&gt;, global::System.DateTime&gt; GetUtcNow(this global::Rocks.Expectations.MethodExpectations&lt;global::MockRock.IMyClock&gt; @self) =&gt; new global::Rocks.MethodAdornments&lt;global::MockRock.IMyClock, global::System.Func&lt;global::System.DateTime&gt;, global::System.DateTime&gt;(@self.Add&lt;global::System.DateTime&gt;(1, new global::System.Collections.Generic.List&lt;global::Rocks.Argument&gt;())); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#download-example-net--c","content":" tip Download Example project Rocks   ","version":"Next","tagName":"h3"},{"title":"Share Rocks​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#share-rocks","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Rocks  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Tests\" has the following generators:​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#category-tests-has-the-following-generators","content":" 1 mocklis  2 MockMe  3 MSTest  4 Ridge  5 Rocks  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Rocks by Json Bock","url":"/RSCG_Examples/v2/docs/Rocks#see-category","content":" Tests ","version":"Next","tagName":"h3"},{"title":"Roozie.AutoInterface by Alex Russak","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#info","content":" info Name: Roozie.AutoInterface C# source generator to generate an interface for a class Author: Alex Russak NuGet:https://www.nuget.org/packages/Roozie.AutoInterface/ You can find more details at https://github.com/AlexRussak/Roozie.AutoInterface Source: https://github.com/AlexRussak/Roozie.AutoInterface  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#original-readme","content":" note Roozie.AutoInterface What is it? Roozie.AutoInterface is a C# source generator that generates an interface for a class. The generated interface contains the XML-doc comments, public properties, and public methods. Why? Interfaces are great for keeping your code loosely coupled and unit testable. But, they add some maintenance overhead. This source generator will keep your interfaces up to date. How to use it? Add the NuGet package to your project. dotnet add package Roozie.AutoInterface --prerelease Create a class where you want to generate an interface. public class MyClass { public string MyProperty { get; set; } public void MyMethod() { // Do something } } Add the [AutoInterface] attribute to the class.An interface will be generated in the same namespace as the class. You can now use the generated interface in your code. If the class is partial, the interface will be automatically implemented. Check out the tests for examples. Configuration​ You can configure the generator in the [AutoInterface] attribute. The following options are available: Option\tDefault Value\tDescriptionName\t&quot;I&quot; + Class name\tSet the interface to whatever name you want. IncludeMethods\ttrue\tSet to false, the generator will automatically include methods in the interface. You can mark a method as included by adding the [AddToInterface] attribute. IncludeProperties\ttrue\tSame as IncludeMethods ImplementOnPartial\ttrue\tWhen true, the interface will be automatically implemented if the class is marked as partial. Contributing Please open an issue if you find a bug or have a feature request. If you'd like to contribute, please open a pull request. Kudos Andrew Lock's Source Generator series is an excellent resource for learning all aspects of source generators.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#about","content":" note Generating interfaces from project  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Roozie.AutoInterface &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Roozie.AutoInterface&quot; Version=&quot;0.6.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  IPerson.g.cs // &lt;auto-generated&gt; // This file was generated by Roozie.AutoInterface v0.6.1.0 // &lt;/auto-generated&gt; using Roozie.AutoInterface; namespace Roozie.AutoInterfaceDemo; #nullable enable public partial class Person : IPerson {} public partial interface IPerson { int ID { get; set; } string? FirstName { get; set; } string? LastName { get; set; } string FullName(); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#download-example-net--c","content":" tip Download Example project Roozie.AutoInterface   ","version":"Next","tagName":"h3"},{"title":"Share Roozie.AutoInterface​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#share-roozieautointerface","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Roozie.AutoInterface  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Roozie.AutoInterface by Alex Russak","url":"/RSCG_Examples/v2/docs/Roozie.AutoInterface#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"RossLean.StringificationGenerator by Alex Kalfakakos","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#info","content":" info Name: RossLean.StringificationGenerator A Roslyn source generator for object construction string generation methods Author: Alex Kalfakakos NuGet:https://www.nuget.org/packages/RossLean.StringificationGenerator/ You can find more details at https://github.com/RossLean/RossLean/ Source: https://github.com/RossLean/RossLean/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#original-readme","content":" note RossLean RossLean is a project within the RossLean organization that aims to bring Roslyn-powered applications (analyzers and source generators) empowering the experience in the C# (and sometimes the entire .NET) ecosystem. Origins​ Some analyzers that are included here were developed intending to enhance the experience of developing in C#. Then, RoseLynn was developed for the purposes of abstracting common operations in Roslyn applications. RossLean, following the same wordplay pattern as RoseLynn, came to life after deciding that grouping our efforts would be more encouraging for the entire community. This included staging and unifying the home for already existing packages and repos, with the intent of developing more in the future. Goals​ The goal of RossLean is to accommodate source generators and analyzers that provide further versatility and usability of existing features and components of the language. This includes expanding on the set of capabilities that any given feature provides. For example, GenericsAnalyzer provides a lot of flexibility around declaring constraints on generic type parameters. The projects are to be made available under the copyrights and ownership of the RossLean organization and its affiliates. Previously held copyright ownership is not ceased, but will be migrated and merged with RossLean. All code herein adheres to the MIT license. It is not expected to change in the future. Current Projects​ GenericsAnalyzer - Expansions to the generic constraint modelNameOn - Enforcement and encouragement of nameof usage patternsSmarttributes - Constraints on application of attributesStringificationGenerator - Generator for construction code generation Future Projects​ Many features that are asked from the community in the C# language design discussions. Currently interesting ones include: Disallow direct value assignment to ref - ref readonly also provides immutability (Link)Opt out of structural typing for specific types (Link) Common coding pattern simplification generators Params method overload generatorType parameter method overload generatorVisitorPatternGenerator Extra features will be included in dedicated issues Check out this GitHub project for a detailed list of issues regarding project ideas and their status. Contributing​ Before opening a PR and making changes, it is required to open an issue for discussion around the desired changes. Any PRs without a clear issue they are tackling will be handled appropriately, depending on the scope of the issue itself. The first priority of all these projects is providing helpful tools and frameworks with the smallest possible performance cost in the development experience within the IDE. We are aware that analyzers and source generators impose a significant enough performance penalty on their own, so we are careful to not hinder the experience any further. Guidelines​ Analyzer and source generator packages should be built in a way such that the underlying .Core packages of each application are automatically transitively installed on the user's project, without their manual intervention. Using RoseLynn is highly encouraged, if necessary. It generally provides a great number of tools that may be useful in common scenarios. RoseLynn.Testing specifically is a must. All projects must come with unit tests covering a viably large set of intended cases. Testing should be focused on isolated reported diagnostics or generated sources. No unit tests must ever fail; if we want to include unit tests that do not currently work, we will have to use Ignore. All unit tests are written using the NUnit testing framework. Analyzers​ Analyzers can be built with Visual Studio 2019 in mind. This restricts the versions of the included Microsoft.CodeAnalysis to below 4.0.0. Additionally, only the RoseLynn*.VS2019 packages can be used. It is not mandatory to support VS 2019 however. Rarely, some analyzer might be focused on newer versions of the language, or have to handle such cases. In this case, where the cost of backwards compatibility would be unreasonably large, VS 2022 onwards is the only path. Source Generators​ All source generators must be incremental (implementing only the IIncrementalGenerator attribute). This means that we will only support Visual Studio 2022 and above. Using T4 templates is highly discouraged, primarily for maintainability concerns. Projects that also provide a domain-specific public API for consumption may not include the API in generated source. The underlying API that the source generator makes use of must be a separate package, and package versions must match exactly. In cases of hotfixes with version number difference in the build number, including the supported version in the description is sufficient.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#about","content":" note Generating constructor code as string  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references RossLean.StringificationGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RossLean.StringificationGenerator&quot; Version=&quot;1.0.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;RossLean.StringificationGenerator.Core&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Code2String.Person.ConstructionCode.g.cs using Code2String; using RossLean.StringificationGenerator.Core; using System.Text; namespace RossLean.StringificationGenerator.Generated; public partial class ConstructionCodeGeneration : BaseConstructionCodeGeneration { public static string ForPerson(Person person) { return $$&quot;&quot;&quot; new Person({{StringLiteral(person.firstName)}}, {{StringLiteral(person.lastName)}}) &quot;&quot;&quot;; } public static void AppendPerson(Person person, StringBuilder builder) { builder.Append($$&quot;&quot;&quot; new Person({{StringLiteral(person.firstName)}}, {{StringLiteral(person.lastName)}}) &quot;&quot;&quot;); } public static string ForPersonTargetTyped(Person person) { return $$&quot;&quot;&quot; new({{StringLiteral(person.firstName)}}, {{StringLiteral(person.lastName)}}) &quot;&quot;&quot;; } public static void AppendPersonTargetTyped(Person person, StringBuilder builder) { builder.Append($$&quot;&quot;&quot; new({{StringLiteral(person.firstName)}}, {{StringLiteral(person.lastName)}}) &quot;&quot;&quot;); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#download-example-net--c","content":" tip Download Example project RossLean.StringificationGenerator   ","version":"Next","tagName":"h3"},{"title":"Share RossLean.StringificationGenerator​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#share-rossleanstringificationgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RossLean.StringificationGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"CodeToString\" has the following generators:​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#category-codetostring-has-the-following-generators","content":" 1 CodeAnalysis  2 RossLean.StringificationGenerator  3 SourceGenerator.Helper.CopyCode  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RossLean.StringificationGenerator by Alex Kalfakakos","url":"/RSCG_Examples/v2/docs/RossLean.StringificationGenerator#see-category","content":" CodeToString ","version":"Next","tagName":"h3"},{"title":"Refit by ReactiveUI","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Refit","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#info","content":" info Name: Refit The automatic type-safe REST library for Xamarin and .NET Author: ReactiveUI NuGet:https://www.nuget.org/packages/Refit/ You can find more details at https://github.com/reactiveui/refit Source: https://github.com/reactiveui/refit  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#original-readme","content":" note Refit: The automatic type-safe REST library for .NET Core, Xamarin and .NET​ Refit\tRefit.HttpClientFactory\tRefit.Newtonsoft.JsonNuGet Refit is a library heavily inspired by Square'sRetrofit library, and it turns your REST API into a live interface: public interface IGitHubApi { [Get(&quot;/users/{user}&quot;)] Task&lt;User&gt; GetUser(string user); } The RestService class generates an implementation of IGitHubApi that usesHttpClient to make its calls: var gitHubApi = RestService.For&lt;IGitHubApi&gt;(&quot;https://api.github.com&quot;); var octocat = await gitHubApi.GetUser(&quot;octocat&quot;); .NET Core supports registering via HttpClientFactory services .AddRefitClient&lt;IGitHubApi&gt;() .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(&quot;https://api.github.com&quot;)); Table of Contents Where does this work? Breaking changes in 6.x API AttributesDynamic Querystring ParametersCollections as Querystring parametersUnescape Querystring parametersBody content Buffering and the Content-Length headerJSON contentXML ContentForm posts Setting request headers Static headersDynamic headersBearer AuthenticationReducing header boilerplate with DelegatingHandlers (Authorization headers worked example)Redefining headersRemoving headers Passing state into DelegatingHandlers Support for Polly and Polly.ContextTarget Interface typeMethodInfo of the method on the Refit client interface that was invoked Multipart uploadsRetrieving the responseUsing generic interfacesInterface inheritance Headers inheritance Default Interface MethodsUsing HttpClientFactoryProviding a custom HttpClientHandling exceptions When returning Task&lt;IApiResponse&gt;, Task&lt;IApiResponse&lt;T&gt;&gt;, or Task&lt;ApiResponse&lt;T&gt;&gt;When returning Task&lt;T&gt;Providing a custom ExceptionFactoryApiException deconstruction with Serilog Where does this work?​ Refit currently supports the following platforms and any .NET Standard 2.0 target: UWPXamarin.AndroidXamarin.MacXamarin.iOSDesktop .NET 4.6.1.NET 5 / .NET CoreBlazorUno Platform SDK Requirements​ Refit 6 requires Visual Studio 16.8 or higher, or the .NET SDK 5.0.100 or higher. It can target any .NET Standard 2.0 platform. Refit 6 does not support the old packages.config format for NuGet references (as they do not support analyzers/source generators). You mustmigrate to PackageReference to use Refit v6 and later. Breaking changes in 6.x​ Refit 6 makes System.Text.Json the default JSON serializer. If you'd like to continue to use Newtonsoft.Json, add the Refit.Newtonsoft.Json NuGet package and set your ContentSerializer to NewtonsoftJsonContentSerializer on your RefitSettings instance. System.Text.Json is faster and uses less memory, though not all features are supported. The migration guide contains more details. IContentSerializer was renamed to IHttpContentSerializer to better reflect its purpose. Additionally, two of its methods were renamed, SerializeAsync&lt;T&gt; -&gt; ToHttpContent&lt;T&gt; and DeserializeAsync&lt;T&gt; -&gt; FromHttpContentAsync&lt;T&gt;. Any existing implementations of these will need to be updated, though the changes should be minor. Updates in 6.3​ Refit 6.3 splits out the XML serialization via XmlContentSerializer into a separate package, Refit.Xml. This is to reduce the dependency size when using Refit with Web Assembly (WASM) applications. If you require XML, add a reference to Refit.Xml. API Attributes​ Every method must have an HTTP attribute that provides the request method and relative URL. There are six built-in annotations: Get, Post, Put, Delete, Patch and Head. The relative URL of the resource is specified in the annotation. [Get(&quot;/users/list&quot;)] You can also specify query parameters in the URL: [Get(&quot;/users/list?sort=desc&quot;)] A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }. If the name of your parameter doesn't match the name in the URL path, use theAliasAs attribute. [Get(&quot;/group/{id}/users&quot;)] Task&lt;List&lt;User&gt;&gt; GroupList([AliasAs(&quot;id&quot;)] int groupId); A request url can also bind replacement blocks to a custom object [Get(&quot;/group/{request.groupId}/users/{request.userId}&quot;)] Task&lt;List&lt;User&gt;&gt; GroupList(UserGroupRequest request); class UserGroupRequest{ int groupId { get;set; } int userId { get;set; } } Parameters that are not specified as a URL substitution will automatically be used as query parameters. This is different than Retrofit, where all parameters must be explicitly specified. The comparison between parameter name and URL parameter is notcase-sensitive, so it will work correctly if you name your parameter groupIdin the path /group/{groupid}/show for example. [Get(&quot;/group/{id}/users&quot;)] Task&lt;List&lt;User&gt;&gt; GroupList([AliasAs(&quot;id&quot;)] int groupId, [AliasAs(&quot;sort&quot;)] string sortOrder); GroupList(4, &quot;desc&quot;); &gt;&gt;&gt; &quot;/group/4/users?sort=desc&quot; Round-tripping route parameter syntax: Forward slashes aren't encoded when using a double-asterisk (**) catch-all parameter syntax. During link generation, the routing system encodes the value captured in a double-asterisk (**) catch-all parameter (for example, {**myparametername}) except the forward slashes. The type of round-tripping route parameter must be string. [Get(&quot;/search/{**page}&quot;)] Task&lt;List&lt;Page&gt;&gt; Search(string page); Search(&quot;admin/products&quot;); &gt;&gt;&gt; &quot;/search/admin/products&quot; Dynamic Querystring Parameters​ If you specify an object as a query parameter, all public properties which are not null are used as query parameters. This previously only applied to GET requests, but has now been expanded to all HTTP request methods, partly thanks to Twitter's hybrid API that insists on non-GET requests with querystring parameters. Use the Query attribute to change the behavior to 'flatten' your query parameter object. If using this Attribute you can specify values for the Delimiter and the Prefix which are used to 'flatten' the object. public class MyQueryParams { [AliasAs(&quot;order&quot;)] public string SortOrder { get; set; } public int Limit { get; set; } public KindOptions Kind { get; set; } } public enum KindOptions { Foo, [EnumMember(Value = &quot;bar&quot;)] Bar } [Get(&quot;/group/{id}/users&quot;)] Task&lt;List&lt;User&gt;&gt; GroupList([AliasAs(&quot;id&quot;)] int groupId, MyQueryParams params); [Get(&quot;/group/{id}/users&quot;)] Task&lt;List&lt;User&gt;&gt; GroupListWithAttribute([AliasAs(&quot;id&quot;)] int groupId, [Query(&quot;.&quot;,&quot;search&quot;)] MyQueryParams params); params.SortOrder = &quot;desc&quot;; params.Limit = 10; params.Kind = KindOptions.Bar; GroupList(4, params) &gt;&gt;&gt; &quot;/group/4/users?order=desc&amp;Limit=10&amp;Kind=bar&quot; GroupListWithAttribute(4, params) &gt;&gt;&gt; &quot;/group/4/users?search.order=desc&amp;search.Limit=10&amp;search.Kind=bar&quot; A similar behavior exists if using a Dictionary, but without the advantages of the AliasAs attributes and of course no intellisense and/or type safety. You can also specify querystring parameters with [Query] and have them flattened in non-GET requests, similar to: [Post(&quot;/statuses/update.json&quot;)] Task&lt;Tweet&gt; PostTweet([Query]TweetParams params); Where TweetParams is a POCO, and properties will also support [AliasAs] attributes. Collections as Querystring parameters​ Use the Query attribute to specify format in which collections should be formatted in query string [Get(&quot;/users/list&quot;)] Task Search([Query(CollectionFormat.Multi)]int[] ages); Search(new [] {10, 20, 30}) &gt;&gt;&gt; &quot;/users/list?ages=10&amp;ages=20&amp;ages=30&quot; [Get(&quot;/users/list&quot;)] Task Search([Query(CollectionFormat.Csv)]int[] ages); Search(new [] {10, 20, 30}) &gt;&gt;&gt; &quot;/users/list?ages=10%2C20%2C30&quot; You can also specify collection format in RefitSettings, that will be used by default, unless explicitly defined in Query attribute. var gitHubApi = RestService.For&lt;IGitHubApi&gt;(&quot;https://api.github.com&quot;, new RefitSettings { CollectionFormat = CollectionFormat.Multi }); Unescape Querystring parameters​ Use the QueryUriFormat attribute to specify if the query parameters should be url escaped [Get(&quot;/query&quot;)] [QueryUriFormat(UriFormat.Unescaped)] Task Query(string q); Query(&quot;Select+Id,Name+From+Account&quot;) &gt;&gt;&gt; &quot;/query?q=Select+Id,Name+From+Account&quot; Body content​ One of the parameters in your method can be used as the body, by using the Body attribute: [Post(&quot;/users/new&quot;)] Task CreateUser([Body] User user); There are four possibilities for supplying the body data, depending on the type of the parameter: If the type is Stream, the content will be streamed via StreamContentIf the type is string, the string will be used directly as the content unless [Body(BodySerializationMethod.Json)] is set which will send it as a StringContentIf the parameter has the attribute [Body(BodySerializationMethod.UrlEncoded)], the content will be URL-encoded (see form posts below)For all other types, the object will be serialized using the content serializer specified in RefitSettings (JSON is the default). Buffering and the Content-Length header​ By default, Refit streams the body content without buffering it. This means you can stream a file from disk, for example, without incurring the overhead of loading the whole file into memory. The downside of this is that no Content-Length header is set on the request. If your API needs you to send a Content-Length header with the request, you can disable this streaming behavior by setting the buffered argument of the [Body] attribute to true: Task CreateUser([Body(buffered: true)] User user); JSON content​ JSON requests and responses are serialized/deserialized using an instance of the IHttpContentSerializer interface. Refit provides two implementations out of the box: SystemTextJsonContentSerializer (which is the default JSON serializer) and NewtonsoftJsonContentSerializer. The first uses System.Text.Json APIs and is focused on high performance and low memory usage, while the latter uses the known Newtonsoft.Json library and is more versatile and customizable. You can read more about the two serializers and the main differences between the two at this link. For instance, here is how to create a new RefitSettings instance using the Newtonsoft.Json-based serializer (you'll also need to add a PackageReference to Refit.Newtonsoft.Json): var settings = new RefitSettings(new NewtonsoftJsonContentSerializer()); If you're using Newtonsoft.Json APIs, you can customize their behavior by setting the Newtonsoft.Json.JsonConvert.DefaultSettings property: JsonConvert.DefaultSettings = () =&gt; new JsonSerializerSettings() { ContractResolver = new CamelCasePropertyNamesContractResolver(), Converters = {new StringEnumConverter()} }; // Serialized as: {&quot;day&quot;:&quot;Saturday&quot;} await PostSomeStuff(new { Day = DayOfWeek.Saturday }); As these are global settings they will affect your entire application. It might be beneficial to isolate the settings for calls to a particular API. When creating a Refit generated live interface, you may optionally pass aRefitSettings that will allow you to specify what serializer settings you would like. This allows you to have different serializer settings for separate APIs: var gitHubApi = RestService.For&lt;IGitHubApi&gt;(&quot;https://api.github.com&quot;, new RefitSettings { ContentSerializer = new NewtonsoftJsonContentSerializer( new JsonSerializerSettings { ContractResolver = new SnakeCasePropertyNamesContractResolver() } )}); var otherApi = RestService.For&lt;IOtherApi&gt;(&quot;https://api.example.com&quot;, new RefitSettings { ContentSerializer = new NewtonsoftJsonContentSerializer( new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() } )}); Property serialization/deserialization can be customised using Json.NET's JsonProperty attribute: public class Foo { // Works like [AliasAs(&quot;b&quot;)] would in form posts (see below) [JsonProperty(PropertyName=&quot;b&quot;)] public string Bar { get; set; } } JSON source generator​ To apply the benefits of the new JSON source generator for System.Text.Json added in .NET 6, you can use SystemTextJsonContentSerializer with a custom instance of RefitSettings and JsonSerializerOptions: var options = new JsonSerializerOptions(); options.AddContext&lt;MyJsonSerializerContext&gt;(); var gitHubApi = RestService.For&lt;IGitHubApi&gt;(&quot;https://api.github.com&quot;, new RefitSettings { ContentSerializer = new SystemTextJsonContentSerializer(options) }); XML Content​ XML requests and responses are serialized/deserialized using System.Xml.Serialization.XmlSerializer. By default, Refit will use JSON content serialization, to use XML content configure the ContentSerializer to use the XmlContentSerializer: var gitHubApi = RestService.For&lt;IXmlApi&gt;(&quot;https://www.w3.org/XML&quot;, new RefitSettings { ContentSerializer = new XmlContentSerializer() }); Property serialization/deserialization can be customised using attributes found in the System.Xml.Serialization namespace: public class Foo { [XmlElement(Namespace = &quot;https://www.w3.org/XML&quot;)] public string Bar { get; set; } } The System.Xml.Serialization.XmlSerializer provides many options for serializing, those options can be set by providing an XmlContentSerializerSettings to the XmlContentSerializer constructor: var gitHubApi = RestService.For&lt;IXmlApi&gt;(&quot;https://www.w3.org/XML&quot;, new RefitSettings { ContentSerializer = new XmlContentSerializer( new XmlContentSerializerSettings { XmlReaderWriterSettings = new XmlReaderWriterSettings() { ReaderSettings = new XmlReaderSettings { IgnoreWhitespace = true } } } ) }); Form posts​ For APIs that take form posts (i.e. serialized as application/x-www-form-urlencoded), initialize the Body attribute with BodySerializationMethod.UrlEncoded. The parameter can be an IDictionary: public interface IMeasurementProtocolApi { [Post(&quot;/collect&quot;)] Task Collect([Body(BodySerializationMethod.UrlEncoded)] Dictionary&lt;string, object&gt; data); } var data = new Dictionary&lt;string, object&gt; { {&quot;v&quot;, 1}, {&quot;tid&quot;, &quot;UA-1234-5&quot;}, {&quot;cid&quot;, new Guid(&quot;d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&quot;)}, {&quot;t&quot;, &quot;event&quot;}, }; // Serialized as: v=1&amp;tid=UA-1234-5&amp;cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&amp;t=event await api.Collect(data); Or you can just pass any object and all public, readable properties will be serialized as form fields in the request. This approach allows you to alias property names using [AliasAs(&quot;whatever&quot;)] which can help if the API has cryptic field names: public interface IMeasurementProtocolApi { [Post(&quot;/collect&quot;)] Task Collect([Body(BodySerializationMethod.UrlEncoded)] Measurement measurement); } public class Measurement { // Properties can be read-only and [AliasAs] isn't required public int v { get { return 1; } } [AliasAs(&quot;tid&quot;)] public string WebPropertyId { get; set; } [AliasAs(&quot;cid&quot;)] public Guid ClientId { get; set; } [AliasAs(&quot;t&quot;)] public string Type { get; set; } public object IgnoreMe { private get; set; } } var measurement = new Measurement { WebPropertyId = &quot;UA-1234-5&quot;, ClientId = new Guid(&quot;d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&quot;), Type = &quot;event&quot; }; // Serialized as: v=1&amp;tid=UA-1234-5&amp;cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&amp;t=event await api.Collect(measurement); If you have a type that has [JsonProperty(PropertyName)] attributes setting property aliases, Refit will use those too ([AliasAs] will take precedence where you have both). This means that the following type will serialize as one=value1&amp;two=value2: public class SomeObject { [JsonProperty(PropertyName = &quot;one&quot;)] public string FirstProperty { get; set; } [JsonProperty(PropertyName = &quot;notTwo&quot;)] [AliasAs(&quot;two&quot;)] public string SecondProperty { get; set; } } NOTE: This use of AliasAs applies to querystring parameters and form body posts, but not to response objects; for aliasing fields on response objects, you'll still need to use [JsonProperty(&quot;full-property-name&quot;)]. Setting request headers​ Static headers​ You can set one or more static request headers for a request applying a Headersattribute to the method: [Headers(&quot;User-Agent: Awesome Octocat App&quot;)] [Get(&quot;/users/{user}&quot;)] Task&lt;User&gt; GetUser(string user); Static headers can also be added to every request in the API by applying theHeaders attribute to the interface: [Headers(&quot;User-Agent: Awesome Octocat App&quot;)] public interface IGitHubApi { [Get(&quot;/users/{user}&quot;)] Task&lt;User&gt; GetUser(string user); [Post(&quot;/users/new&quot;)] Task CreateUser([Body] User user); } Dynamic headers​ If the content of the header needs to be set at runtime, you can add a header with a dynamic value to a request by applying a Header attribute to a parameter: [Get(&quot;/users/{user}&quot;)] Task&lt;User&gt; GetUser(string user, [Header(&quot;Authorization&quot;)] string authorization); // Will add the header &quot;Authorization: token OAUTH-TOKEN&quot; to the request var user = await GetUser(&quot;octocat&quot;, &quot;token OAUTH-TOKEN&quot;); Adding an Authorization header is such a common use case that you can add an access token to a request by applying an Authorize attribute to a parameter and optionally specifying the scheme: [Get(&quot;/users/{user}&quot;)] Task&lt;User&gt; GetUser(string user, [Authorize(&quot;Bearer&quot;)] string token); // Will add the header &quot;Authorization: Bearer OAUTH-TOKEN}&quot; to the request var user = await GetUser(&quot;octocat&quot;, &quot;OAUTH-TOKEN&quot;); //note: the scheme defaults to Bearer if none provided If you need to set multiple headers at runtime, you can add a IDictionary&lt;string, string&gt;and apply a HeaderCollection attribute to the parameter and it will inject the headers into the request: [Get(&quot;/users/{user}&quot;)] Task&lt;User&gt; GetUser(string user, [HeaderCollection] IDictionary&lt;string, string&gt; headers); var headers = new Dictionary&lt;string, string&gt; {{&quot;Authorization&quot;,&quot;Bearer tokenGoesHere&quot;}, {&quot;X-Tenant-Id&quot;,&quot;123&quot;}}; var user = await GetUser(&quot;octocat&quot;, headers); Bearer Authentication​ Most APIs need some sort of Authentication. The most common is OAuth Bearer authentication. A header is added to each request of the form: Authorization: Bearer &lt;token&gt;. Refit makes it easy to insert your logic to get the token however your app needs, so you don't have to pass a token into each method. Add [Headers(&quot;Authorization: Bearer&quot;)] to the interface or methods which need the token.Set AuthorizationHeaderValueGetter in the RefitSettings instance. Refit will call your delegate each time it needs to obtain the token, so it's a good idea for your mechanism to cache the token value for some period within the token lifetime. Reducing header boilerplate with DelegatingHandlers (Authorization headers worked example)​ Although we make provisions for adding dynamic headers at runtime directly in Refit, most use-cases would likely benefit from registering a custom DelegatingHandler in order to inject the headers as part of the HttpClient middleware pipeline thus removing the need to add lots of [Header] or [HeaderCollection] attributes. In the example above we are leveraging a [HeaderCollection] parameter to inject an Authorization and X-Tenant-Id header. This is quite a common scenario if you are integrating with a 3rd party that uses OAuth2. While it's ok for the occasional endpoint, it would be quite cumbersome if we had to add that boilerplate to every method in our interface. In this example we will assume our application is a multi-tenant application that is able to pull information about a tenant through some interface ITenantProvider and has a data store IAuthTokenStore that can be used to retrieve an auth token to attach to the outbound request. //Custom delegating handler for adding Auth headers to outbound requests class AuthHeaderHandler : DelegatingHandler { private readonly ITenantProvider tenantProvider; private readonly IAuthTokenStore authTokenStore; public AuthHeaderHandler(ITenantProvider tenantProvider, IAuthTokenStore authTokenStore) { this.tenantProvider = tenantProvider ?? throw new ArgumentNullException(nameof(tenantProvider)); this.authTokenStore = authTokenStore ?? throw new ArgumentNullException(nameof(authTokenStore)); InnerHandler = new HttpClientHandler(); } protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { var token = await authTokenStore.GetToken(); //potentially refresh token here if it has expired etc. request.Headers.Authorization = new AuthenticationHeaderValue(&quot;Bearer&quot;, token); request.Headers.Add(&quot;X-Tenant-Id&quot;, tenantProvider.GetTenantId()); return await base.SendAsync(request, cancellationToken).ConfigureAwait(false); } } //Startup.cs public void ConfigureServices(IServiceCollection services) { services.AddTransient&lt;ITenantProvider, TenantProvider&gt;(); services.AddTransient&lt;IAuthTokenStore, AuthTokenStore&gt;(); services.AddTransient&lt;AuthHeaderHandler&gt;(); //this will add our refit api implementation with an HttpClient //that is configured to add auth headers to all requests //note: AddRefitClient&lt;T&gt; requires a reference to Refit.HttpClientFactory //note: the order of delegating handlers is important and they run in the order they are added! services.AddRefitClient&lt;ISomeThirdPartyApi&gt;() .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(&quot;https://api.example.com&quot;)) .AddHttpMessageHandler&lt;AuthHeaderHandler&gt;(); //you could add Polly here to handle HTTP 429 / HTTP 503 etc } //Your application code public class SomeImportantBusinessLogic { private ISomeThirdPartyApi thirdPartyApi; public SomeImportantBusinessLogic(ISomeThirdPartyApi thirdPartyApi) { this.thirdPartyApi = thirdPartyApi; } public async Task DoStuffWithUser(string username) { var user = await thirdPartyApi.GetUser(username); //do your thing } } If you aren't using dependency injection then you could achieve the same thing by doing something like this: var api = RestService.For&lt;ISomeThirdPartyApi&gt;(new HttpClient(new AuthHeaderHandler(tenantProvider, authTokenStore)) { BaseAddress = new Uri(&quot;https://api.example.com&quot;) } ); var user = await thirdPartyApi.GetUser(username); //do your thing Redefining headers​ Unlike Retrofit, where headers do not overwrite each other and are all added to the request regardless of how many times the same header is defined, Refit takes a similar approach to the approach ASP.NET MVC takes with action filters —redefining a header will replace it, in the following order of precedence: Headers attribute on the interface (lowest priority)Headers attribute on the methodHeader attribute or HeaderCollection attribute on a method parameter (highest priority) [Headers(&quot;X-Emoji: :rocket:&quot;)] public interface IGitHubApi { [Get(&quot;/users/list&quot;)] Task&lt;List&gt; GetUsers(); [Get(&quot;/users/{user}&quot;)] [Headers(&quot;X-Emoji: :smile_cat:&quot;)] Task&lt;User&gt; GetUser(string user); [Post(&quot;/users/new&quot;)] [Headers(&quot;X-Emoji: :metal:&quot;)] Task CreateUser([Body] User user, [Header(&quot;X-Emoji&quot;)] string emoji); } // X-Emoji: :rocket: var users = await GetUsers(); // X-Emoji: :smile_cat: var user = await GetUser(&quot;octocat&quot;); // X-Emoji: :trollface: await CreateUser(user, &quot;:trollface:&quot;); Note: This redefining behavior only applies to headers with the same name. Headers with different names are not replaced. The following code will result in all headers being included: [Headers(&quot;Header-A: 1&quot;)] public interface ISomeApi { [Headers(&quot;Header-B: 2&quot;)] [Post(&quot;/post&quot;)] Task PostTheThing([Header(&quot;Header-C&quot;)] int c); } // Header-A: 1 // Header-B: 2 // Header-C: 3 var user = await api.PostTheThing(3); Removing headers​ Headers defined on an interface or method can be removed by redefining a static header without a value (i.e. without : &lt;value&gt;) or passing null for a dynamic header. Empty strings will be included as empty headers. [Headers(&quot;X-Emoji: :rocket:&quot;)] public interface IGitHubApi { [Get(&quot;/users/list&quot;)] [Headers(&quot;X-Emoji&quot;)] // Remove the X-Emoji header Task&lt;List&gt; GetUsers(); [Get(&quot;/users/{user}&quot;)] [Headers(&quot;X-Emoji:&quot;)] // Redefine the X-Emoji header as empty Task&lt;User&gt; GetUser(string user); [Post(&quot;/users/new&quot;)] Task CreateUser([Body] User user, [Header(&quot;X-Emoji&quot;)] string emoji); } // No X-Emoji header var users = await GetUsers(); // X-Emoji: var user = await GetUser(&quot;octocat&quot;); // No X-Emoji header await CreateUser(user, null); // X-Emoji: await CreateUser(user, &quot;&quot;); Passing state into DelegatingHandlers​ If there is runtime state that you need to pass to a DelegatingHandler you can add a property with a dynamic value to the underlying HttpRequestMessage.Propertiesby applying a Property attribute to a parameter: public interface IGitHubApi { [Post(&quot;/users/new&quot;)] Task CreateUser([Body] User user, [Property(&quot;SomeKey&quot;)] string someValue); [Post(&quot;/users/new&quot;)] Task CreateUser([Body] User user, [Property] string someOtherKey); } The attribute constructor optionally takes a string which becomes the key in the HttpRequestMessage.Properties dictionary. If no key is explicitly defined then the name of the parameter becomes the key. If a key is defined multiple times the value in HttpRequestMessage.Properties will be overwritten. The parameter itself can be any object. Properties can be accessed inside a DelegatingHandler as follows: class RequestPropertyHandler : DelegatingHandler { public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {} protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { // See if the request has a the property if(request.Properties.ContainsKey(&quot;SomeKey&quot;)) { var someProperty = request.Properties[&quot;SomeKey&quot;]; //do stuff } if(request.Properties.ContainsKey(&quot;someOtherKey&quot;)) { var someOtherProperty = request.Properties[&quot;someOtherKey&quot;]; //do stuff } return await base.SendAsync(request, cancellationToken).ConfigureAwait(false); } } Note: in .NET 5 HttpRequestMessage.Properties has been marked Obsolete and Refit will instead populate the value into the new HttpRequestMessage.Options. Support for Polly and Polly.Context​ Because Refit supports HttpClientFactory it is possible to configure Polly policies on your HttpClient. If your policy makes use of Polly.Context this can be passed via Refit by adding [Property(&quot;PolicyExecutionContext&quot;)] Polly.Context contextas behind the scenes Polly.Context is simply stored in HttpRequestMessage.Properties under the key PolicyExecutionContext and is of type Polly.Context. It's only recommended to pass the Polly.Context this way if your use case requires that the Polly.Context be initialized with dynamic content only known at runtime. If your Polly.Context only requires the same content every time (e.g an ILogger that you want to use to log from inside your policies) a cleaner approach is to inject the Polly.Context via a DelegatingHandler as described in #801 Target Interface Type and method info​ There may be times when you want to know what the target interface type is of the Refit instance. An example is where you have a derived interface that implements a common base like this: public interface IGetAPI&lt;TEntity&gt; { [Get(&quot;/{key}&quot;)] Task&lt;TEntity&gt; Get(long key); } public interface IUsersAPI : IGetAPI&lt;User&gt; { } public interface IOrdersAPI : IGetAPI&lt;Order&gt; { } You can access the concrete type of the interface for use in a handler, such as to alter the URL of the request: class RequestPropertyHandler : DelegatingHandler { public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {} protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { // Get the type of the target interface Type interfaceType = (Type)request.Properties[HttpMessageRequestOptions.InterfaceType]; var builder = new UriBuilder(request.RequestUri); // Alter the Path in some way based on the interface or an attribute on it builder.Path = $&quot;/{interfaceType.Name}{builder.Path}&quot;; // Set the new Uri on the outgoing message request.RequestUri = builder.Uri; return await base.SendAsync(request, cancellationToken).ConfigureAwait(false); } } The full method information (RestMethodInfo) is also always available in the request options. The RestMethodInfo contains more information about the method being called such as the full MethodInfo when using reflection is needed: class RequestPropertyHandler : DelegatingHandler { public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {} protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { // Get the method info if (request.Options.TryGetValue(HttpRequestMessageOptions.RestMethodInfoKey, out RestMethodInfo restMethodInfo)) { var builder = new UriBuilder(request.RequestUri); // Alter the Path in some way based on the method info or an attribute on it builder.Path = $&quot;/{restMethodInfo.MethodInfo.Name}{builder.Path}&quot;; // Set the new Uri on the outgoing message request.RequestUri = builder.Uri; } return await base.SendAsync(request, cancellationToken).ConfigureAwait(false); } } Note: in .NET 5 HttpRequestMessage.Properties has been marked Obsolete and Refit will instead populate the value into the new HttpRequestMessage.Options. Refit provides HttpRequestMessageOptions.InterfaceTypeKey and HttpRequestMessageOptions.RestMethodInfoKey to respectively access the interface type and REST method info from the options. Multipart uploads​ Methods decorated with Multipart attribute will be submitted with multipart content type. At this time, multipart methods support the following parameter types: string (parameter name will be used as name and string value as value)byte arrayStreamFileInfo Name of the field in the multipart data priority precedence: multipartItem.Name if specified and not null (optional); dynamic, allows naming form data part at execution time.[AliasAs] attribute (optional) that decorate the streamPart parameter in the method signature (see below); static, defined in code.MultipartItem parameter name (default) as defined in the method signature; static, defined in code. A custom boundary can be specified with an optional string parameter to the Multipart attribute. If left empty, this defaults to ----MyGreatBoundary. To specify the file name and content type for byte array (byte[]), Stream and FileInfo parameters, use of a wrapper class is required. The wrapper classes for these types are ByteArrayPart, StreamPart and FileInfoPart. public interface ISomeApi { [Multipart] [Post(&quot;/users/{id}/photo&quot;)] Task UploadPhoto(int id, [AliasAs(&quot;myPhoto&quot;)] StreamPart stream); } To pass a Stream to this method, construct a StreamPart object like so: someApiInstance.UploadPhoto(id, new StreamPart(myPhotoStream, &quot;photo.jpg&quot;, &quot;image/jpeg&quot;)); Note: The AttachmentName attribute that was previously described in this section has been deprecated and its use is not recommended. Retrieving the response​ Note that in Refit unlike in Retrofit, there is no option for a synchronous network request - all requests must be async, either via Task or viaIObservable. There is also no option to create an async method via a Callback parameter unlike Retrofit, because we live in the async/await future. Similarly to how body content changes via the parameter type, the return type will determine the content returned. Returning Task without a type parameter will discard the content and solely tell you whether or not the call succeeded: [Post(&quot;/users/new&quot;)] Task CreateUser([Body] User user); // This will throw if the network call fails await CreateUser(someUser); If the type parameter is 'HttpResponseMessage' or 'string', the raw response message or the content as a string will be returned respectively. // Returns the content as a string (i.e. the JSON data) [Get(&quot;/users/{user}&quot;)] Task&lt;string&gt; GetUser(string user); // Returns the raw response, as an IObservable that can be used with the // Reactive Extensions [Get(&quot;/users/{user}&quot;)] IObservable&lt;HttpResponseMessage&gt; GetUser(string user); There is also a generic wrapper class called ApiResponse&lt;T&gt; that can be used as a return type. Using this class as a return type allows you to retrieve not just the content as an object, but also any metadata associated with the request/response. This includes information such as response headers, the http status code and reason phrase (e.g. 404 Not Found), the response version, the original request message that was sent and in the case of an error, an ApiException object containing details of the error. Following are some examples of how you can retrieve the response metadata. //Returns the content within a wrapper class containing metadata about the request/response [Get(&quot;/users/{user}&quot;)] Task&lt;ApiResponse&lt;User&gt;&gt; GetUser(string user); //Calling the API var response = await gitHubApi.GetUser(&quot;octocat&quot;); //Getting the status code (returns a value from the System.Net.HttpStatusCode enumeration) var httpStatus = response.StatusCode; //Determining if a success status code was received if(response.IsSuccessStatusCode) { //YAY! Do the thing... } //Retrieving a well-known header value (e.g. &quot;Server&quot; header) var serverHeaderValue = response.Headers.Server != null ? response.Headers.Server.ToString() : string.Empty; //Retrieving a custom header value var customHeaderValue = string.Join(',', response.Headers.GetValues(&quot;A-Custom-Header&quot;)); //Looping through all the headers foreach(var header in response.Headers) { var headerName = header.Key; var headerValue = string.Join(',', header.Value); } //Finally, retrieving the content in the response body as a strongly-typed object var user = response.Content; Using generic interfaces​ When using something like ASP.NET Web API, it's a fairly common pattern to have a whole stack of CRUD REST services. Refit now supports these, allowing you to define a single API interface with a generic type: public interface IReallyExcitingCrudApi&lt;T, in TKey&gt; where T : class { [Post(&quot;&quot;)] Task&lt;T&gt; Create([Body] T payload); [Get(&quot;&quot;)] Task&lt;List&lt;T&gt;&gt; ReadAll(); [Get(&quot;/{key}&quot;)] Task&lt;T&gt; ReadOne(TKey key); [Put(&quot;/{key}&quot;)] Task Update(TKey key, [Body]T payload); [Delete(&quot;/{key}&quot;)] Task Delete(TKey key); } Which can be used like this: // The &quot;/users&quot; part here is kind of important if you want it to work for more // than one type (unless you have a different domain for each type) var api = RestService.For&lt;IReallyExcitingCrudApi&lt;User, string&gt;&gt;(&quot;http://api.example.com/users&quot;); Interface inheritance​ When multiple services that need to be kept separate share a number of APIs, it is possible to leverage interface inheritance to avoid having to define the same Refit methods multiple times in different services: public interface IBaseService { [Get(&quot;/resources&quot;)] Task&lt;Resource&gt; GetResource(string id); } public interface IDerivedServiceA : IBaseService { [Delete(&quot;/resources&quot;)] Task DeleteResource(string id); } public interface IDerivedServiceB : IBaseService { [Post(&quot;/resources&quot;)] Task&lt;string&gt; AddResource([Body] Resource resource); } In this example, the IDerivedServiceA interface will expose both the GetResource and DeleteResource APIs, while IDerivedServiceB will expose GetResource and AddResource. Headers inheritance​ When using inheritance, existing header attributes will be passed along as well, and the inner-most ones will have precedence: [Headers(&quot;User-Agent: AAA&quot;)] public interface IAmInterfaceA { [Get(&quot;/get?result=Ping&quot;)] Task&lt;string&gt; Ping(); } [Headers(&quot;User-Agent: BBB&quot;)] public interface IAmInterfaceB : IAmInterfaceA { [Get(&quot;/get?result=Pang&quot;)] [Headers(&quot;User-Agent: PANG&quot;)] Task&lt;string&gt; Pang(); [Get(&quot;/get?result=Foo&quot;)] Task&lt;string&gt; Foo(); } Here, IAmInterfaceB.Pang() will use PANG as its user agent, while IAmInterfaceB.Foo and IAmInterfaceB.Ping will use BBB. Note that if IAmInterfaceB didn't have a header attribute, Foo would then use the AAA value inherited from IAmInterfaceA. If an interface is inheriting more than one interface, the order of precedence is the same as the one in which the inherited interfaces are declared: public interface IAmInterfaceC : IAmInterfaceA, IAmInterfaceB { [Get(&quot;/get?result=Foo&quot;)] Task&lt;string&gt; Foo(); } Here IAmInterfaceC.Foo would use the header attribute inherited from IAmInterfaceA, if present, or the one inherited from IAmInterfaceB, and so on for all the declared interfaces. Default Interface Methods​ Starting with C# 8.0, default interface methods (a.k.a. DIMs) can be defined on interfaces. Refit interfaces can provide additional logic using DIMs, optionally combined with private and/or static helper methods: public interface IApiClient { // implemented by Refit but not exposed publicly [Get(&quot;/get&quot;)] internal Task&lt;string&gt; GetInternal(); // Publicly available with added logic applied to the result from the API call public async Task&lt;string&gt; Get() =&gt; FormatResponse(await GetInternal()); private static String FormatResponse(string response) =&gt; $&quot;The response is: {response}&quot;; } The type generated by Refit will implement the method IApiClient.GetInternal. If additional logic is required immediately before or after its invocation, it shouldn't be exposed directly and can thus be hidden from consumers by being marked as internal. The default interface method IApiClient.Get will be inherited by all types implementing IApiClient, including - of course - the type generated by Refit. Consumers of the IApiClient will call the public Get method and profit from the additional logic provided in its implementation (optionally, in this case, with the help of the private static helper FormatResponse). To support runtimes without DIM-support (.NET Core 2.x and below or .NET Standard 2.0 and below), two additional types would be required for the same solution. internal interface IApiClientInternal { [Get(&quot;/get&quot;)] Task&lt;string&gt; Get(); } public interface IApiClient { public Task&lt;string&gt; Get(); } internal class ApiClient : IApiClient { private readonly IApiClientInternal client; public ApiClient(IApiClientInternal client) =&gt; this.client = client; public async Task&lt;string&gt; Get() =&gt; FormatResponse(await client.Get()); private static String FormatResponse(string response) =&gt; $&quot;The response is: {response}&quot;; } Using HttpClientFactory​ Refit has first class support for the ASP.Net Core 2.1 HttpClientFactory. Add a reference to Refit.HttpClientFactory and call the provided extension method in your ConfigureServices method to configure your Refit interface: services.AddRefitClient&lt;IWebApi&gt;() .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(&quot;https://api.example.com&quot;)); // Add additional IHttpClientBuilder chained methods as required here: // .AddHttpMessageHandler&lt;MyHandler&gt;() // .SetHandlerLifetime(TimeSpan.FromMinutes(2)); Optionally, a RefitSettings object can be included: var settings = new RefitSettings(); // Configure refit settings here services.AddRefitClient&lt;IWebApi&gt;(settings) .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(&quot;https://api.example.com&quot;)); // Add additional IHttpClientBuilder chained methods as required here: // .AddHttpMessageHandler&lt;MyHandler&gt;() // .SetHandlerLifetime(TimeSpan.FromMinutes(2)); // or injected from the container services.AddRefitClient&lt;IWebApi&gt;(provider =&gt; new RefitSettings() { /* configure settings */ }) .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(&quot;https://api.example.com&quot;)); // Add additional IHttpClientBuilder chained methods as required here: // .AddHttpMessageHandler&lt;MyHandler&gt;() // .SetHandlerLifetime(TimeSpan.FromMinutes(2)); Note that some of the properties of RefitSettings will be ignored because the HttpClient and HttpClientHandlers will be managed by the HttpClientFactory instead of Refit. You can then get the api interface using constructor injection: public class HomeController : Controller { public HomeController(IWebApi webApi) { _webApi = webApi; } private readonly IWebApi _webApi; public async Task&lt;IActionResult&gt; Index(CancellationToken cancellationToken) { var thing = await _webApi.GetSomethingWeNeed(cancellationToken); return View(thing); } } Providing a custom HttpClient​ You can supply a custom HttpClient instance by simply passing it as a parameter to the RestService.For&lt;T&gt; method: RestService.For&lt;ISomeApi&gt;(new HttpClient() { BaseAddress = new Uri(&quot;https://www.someapi.com/api/&quot;) }); However, when supplying a custom HttpClient instance the following RefitSettings properties will not work: AuthorizationHeaderValueGetterHttpMessageHandlerFactory If you still want to be able to configure the HtttpClient instance that Refit provides while still making use of the above settings, simply expose the HttpClient on the API interface: interface ISomeApi { // This will automagically be populated by Refit if the property exists HttpClient Client { get; } [Headers(&quot;Authorization: Bearer&quot;)] [Get(&quot;/endpoint&quot;)] Task&lt;string&gt; SomeApiEndpoint(); } Then, after creating the REST service, you can set any HttpClient property you want, e.g. Timeout: SomeApi = RestService.For&lt;ISomeApi&gt;(&quot;https://www.someapi.com/api/&quot;, new RefitSettings() { AuthorizationHeaderValueGetter = (rq, ct) =&gt; GetTokenAsync() }); SomeApi.Client.Timeout = timeout; Handling exceptions​ Refit has different exception handling behavior depending on if your Refit interface methods return Task&lt;T&gt; or if they return Task&lt;IApiResponse&gt;, Task&lt;IApiResponse&lt;T&gt;&gt;, or Task&lt;ApiResponse&lt;T&gt;&gt;. When returning Task&lt;IApiResponse&gt;, Task&lt;IApiResponse&lt;T&gt;&gt;, or Task&lt;ApiResponse&lt;T&gt;&gt;​ Refit traps any ApiException raised by the ExceptionFactory when processing the response, and any errors that occur when attempting to deserialize the response to ApiResponse&lt;T&gt;, and populates the exception into the Error property on ApiResponse&lt;T&gt; without throwing the exception. You can then decide what to do like so: var response = await _myRefitClient.GetSomeStuff(); if(response.IsSuccessStatusCode) { //do your thing } else { _logger.LogError(response.Error, response.Error.Content); } When returning Task&lt;T&gt;​ Refit throws any ApiException raised by the ExceptionFactory when processing the response and any errors that occur when attempting to deserialize the response to Task&lt;T&gt;. // ... try { var result = await awesomeApi.GetFooAsync(&quot;bar&quot;); } catch (ApiException exception) { //exception handling } // ... Refit can also throw ValidationApiException instead which in addition to the information present on ApiException also contains ProblemDetails when the service implements the RFC 7807 specification for problem details and the response content type is application/problem+json For specific information on the problem details of the validation exception, simply catch ValidationApiException: // ... try { var result = await awesomeApi.GetFooAsync(&quot;bar&quot;); } catch (ValidationApiException validationException) { // handle validation here by using validationException.Content, // which is type of ProblemDetails according to RFC 7807 // If the response contains additional properties on the problem details, // they will be added to the validationException.Content.Extensions collection. } catch (ApiException exception) { // other exception handling } // ... Providing a custom ExceptionFactory​ You can also override default exceptions behavior that are raised by the ExceptionFactory when processing the result by providing a custom exception factory in RefitSettings. For example, you can suppress all exceptions with the following: var nullTask = Task.FromResult&lt;Exception&gt;(null); var gitHubApi = RestService.For&lt;IGitHubApi&gt;(&quot;https://api.github.com&quot;, new RefitSettings { ExceptionFactory = httpResponse =&gt; nullTask; }); Note that exceptions raised when attempting to deserialize the response are not affected by this. ApiException deconstruction with Serilog​ For users of Serilog, you can enrich the logging of ApiException using theSerilog.Exceptions.Refit NuGet package. Details of how to integrate this package into your applications can be found here.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#about","content":" note Generates code for retrieving data from HTTP API  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPost.csIFindPosts.cs This is the CSharp Project that references Refit &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Refit&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Generated.g.csIFindPosts.g.csPreserveAttribute.g.cs #pragma warning disable namespace Refit.Implementation { /// &lt;inheritdoc /&gt; [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] [global::System.Diagnostics.DebuggerNonUserCode] [global::RefitDemoRefitInternalGenerated.PreserveAttribute] [global::System.Reflection.Obfuscation(Exclude=true)] [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)] internal static partial class Generated { } } #pragma warning restore   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#download-example-net--c-","content":" tip Download Example project Refit   ","version":"Next","tagName":"h3"},{"title":"Share Refit​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#share-refit","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Refit  ","version":"Next","tagName":"h3"},{"title":"In the same category (API) - 9 other generators​","type":1,"pageTitle":"Refit by ReactiveUI","url":"/RSCG_Examples/v2/docs/Refit#in-the-same-category-api---9-other-generators","content":" immediate.apis​  Microsoft.Extensions.Configuration.Binder​  MinimalApiBuilder​  MinimalApis.Discovery​  MinimalHelpers.Routing.Analyzers​  RDG​  RSCG_WebAPIExports​  SafeRouting​  SkinnyControllersCommon​ ","version":"Next","tagName":"h3"},{"title":"RSCG_CompositeProvider by Ignat Andrei","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#info","content":" info Name: RSCG_CompositeProvider Interface to null object - common Author: Ignat Andrei NuGet:https://www.nuget.org/packages/RSCG_CompositeProvider/ https://www.nuget.org/packages/RSCG_CompositeProvider_common/ You can find more details at https://github.com/ignatandrei/RSCG_CompositeProvider Source: https://github.com/ignatandrei/RSCG_CompositeProvider  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#original-readme","content":" note RSCG_CompositeProvider Composite provider from interface . Given multiple implementation of an interface , return data from each / one Usage​ Add the nuget package to your project dotnet add package RSCG_CompositeProvider dotnet add package RSCG_CompositeProviderCommon or put in your csproj file &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_CompositeProvider&quot; Version=&quot;2025.218.2100&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_CompositeProvider_Common&quot; Version=&quot;2025.218.2100&quot; /&gt; &lt;/ItemGroup&gt; Then if you have an interface like this public interface IDataFrom { string Name { get; } Task&lt;string&gt; KeyFromValue(string value, bool isKey); } and multiple implementation of the interface like this class DataFromHttp : IDataValue { public string Name { get { return &quot;DataFromHttp&quot;; } set { } } public async Task&lt;string&gt; KeyFromValue(string key, bool defaultValue) { var http=new HttpClient(); var result = await http.GetStringAsync(&quot;https://www.&quot;+ Guid.NewGuid().ToString()+&quot;.com/&quot; + key); return result; } } class DataFromMemory : IDataValue { public string Name { get { return &quot;DataFromMemory&quot;; } set { } } public async Task&lt;string&gt; KeyFromValue(string key, bool defaultValue) { await Task.Delay(1000); return $&quot;this is value for {key} from memory&quot;; } } then you can call the composite provider to get data from all the implementation of the interface like this IDataValue provider = new DataValue_CP(new DataFromHttp(), new DataFromMemory()); var result = await provider.KeyFromValue(&quot;test&quot;, false); Console.WriteLine(result); DataValue_CP realClass = (DataValue_CP)provider ; var lastInterface = realClass.lastUsedInterface ?? -1; Console.WriteLine(&quot;value was obtained from &quot; + realClass.Get(lastInterface).Name);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#about","content":" note Generate composite class from interface, using multiple sources  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#example-source-csproj-source-files","content":" CSharp ProjectProgram.csIDataValue.csDataFromHttp.cs This is the CSharp Project that references RSCG_CompositeProvider &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_CompositeProvider&quot; Version=&quot;2025.218.2100&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_CompositeProvider_Common&quot; Version=&quot;2025.218.2100&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TheAssemblyInfo.g.csIDataValue_cp.cs // &lt;auto-generated/&gt; namespace Generated.CP_Console { public static class TheAssemblyInfo { public static readonly System.DateTime DateGeneratedUTC ; public const string AssemblyName = &quot;CP_Console&quot;; public const string GeneratedNameNice = &quot;Joseph Brodsky is feeling hard in Willemstad&quot;; public const string GeneratedNameSmall = &quot;hard-Joseph Brodsky&quot;; public const string GeneratedName = &quot;hard-Joseph Brodsky-Willemstad&quot;; static TheAssemblyInfo(){ DateGeneratedUTC = System.DateTime.ParseExact(&quot;2025-07-24 04:41:22&quot;, &quot;yyyy-MM-dd HH:mm:ss&quot;, null); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#download-example-net--c","content":" tip Download Example project RSCG_CompositeProvider   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_CompositeProvider​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#share-rscg_compositeprovider","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_CompositeProvider  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_CompositeProvider by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"rscg_demeter by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/rscg_demeter","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#info","content":" info Name: rscg_demeter Interface to null object - common Author: Andrei Ignat NuGet:https://www.nuget.org/packages/rscg_demeter/ You can find more details at https://github.com/ignatandrei/rscg_demeter/ Source: https://github.com/ignatandrei/rscg_demeter/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#original-readme","content":" note RSCG_Demeter Demeter Law : http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/ Usage Add the package RSCG_Demeter to the csproj &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_Demeter&quot; Version=&quot;2026.328.706&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; Then build the project - the analyzer will run and show the errors in the error list. Export​ Add this to the csproj &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_Demeter_GenerateFile&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_Demeter_GenerateFile&gt;../YourProjectName.csproj.txt&lt;/RSCG_Demeter_GenerateFile&gt; &lt;/PropertyGroup&gt; And the file YourProjectName.csproj.txt will be generated with the errors.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#about","content":" note Generating diagnostics about Law of Demeter violations  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references rscg_demeter &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt; &lt;WarningsNotAsErrors&gt;CS0436,NU1903&lt;/WarningsNotAsErrors&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_Demeter_GenerateFile&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_Demeter_GenerateFile&gt;obj/gx/RSCG_Console.csproj.txt&lt;/RSCG_Demeter_GenerateFile&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Bcl.AsyncInterfaces&quot; Version=&quot;9.0.3&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_Demeter&quot; Version=&quot;2026.328.706&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RSCG_Console.csproj.txt { &quot;dateGenerator&quot;: &quot;20250329050839&quot;, &quot;nameGenerator&quot;: &quot;Gerhart Hauptmann is feeling agreeable in Porto-Novo&quot;, &quot;maxDemeterDots&quot;: 3, &quot;locationsFound&quot;: 5, &quot;DemeterLocations&quot;: [ { &quot;id&quot;: 1, &quot;startLine&quot;: 5, &quot;nrDots&quot;: 2, &quot;endLine&quot;: 5, &quot;filePath&quot;: &quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\rscg_demeter\\\\src\\\\RSCG_Console\\\\Program.cs&quot;, &quot;text&quot;: &quot;dep.Employees.Add(new Employee())&quot; }, { &quot;id&quot;: 2, &quot;startLine&quot;: 9, &quot;nrDots&quot;: 2, &quot;endLine&quot;: 9, &quot;filePath&quot;: &quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\rscg_demeter\\\\src\\\\RSCG_Console\\\\Program.cs&quot;, &quot;text&quot;: &quot; dep.EmployeeNames.Add(emp.Name)&quot; }, { &quot;id&quot;: 3, &quot;startLine&quot;: 12, &quot;nrDots&quot;: 2, &quot;endLine&quot;: 12, &quot;filePath&quot;: &quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\rscg_demeter\\\\src\\\\RSCG_Console\\\\Program.cs&quot;, &quot;text&quot;: &quot;it.Name.StartsWith(\\u0022a\\u0022)&quot; }, { &quot;id&quot;: 4, &quot;startLine&quot;: 14, &quot;nrDots&quot;: 2, &quot;endLine&quot;: 14, &quot;filePath&quot;: &quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\rscg_demeter\\\\src\\\\RSCG_Console\\\\Program.cs&quot;, &quot;text&quot;: &quot;empAll.Select(it =\\u003E it.ID).Distinct().OrderBy(it =\\u003E it)&quot; }, { &quot;id&quot;: 5, &quot;startLine&quot;: 17, &quot;nrDots&quot;: 3, &quot;endLine&quot;: 20, &quot;filePath&quot;: &quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\rscg_demeter\\\\src\\\\RSCG_Console\\\\Program.cs&quot;, &quot;text&quot;: &quot;AppDomain.CurrentDomain.GetAssemblies()\\r\\n .Where(it =\\u003E data.Any(a =\\u003E !(it.FullName?.StartsWith(a) ?? false)))\\r\\n .Distinct()\\r\\n .ToArray()&quot; } ] }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#download-example-net--c","content":" tip Download Example project rscg_demeter   ","version":"Next","tagName":"h3"},{"title":"Share rscg_demeter​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#share-rscg_demeter","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/rscg_demeter  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"rscg_demeter by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_demeter#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"RSCG_Decorator by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_Decorator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#info","content":" info Name: RSCG_Decorator Roslyn Decorator for a class- intercept methods Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_Decorator/ You can find more details at https://github.com/ignatandrei/RSCG_Decorator Source: https://github.com/ignatandrei/RSCG_Decorator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#original-readme","content":" note RSCG_Decorator Decorator for classes , permit to know when method start and ends Usage​ Add reference to RSCG_Decorator and RSCG_DecoratorCommon &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_Decorator&quot; Version=&quot;7.2023.930.2116&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_DecoratorCommon&quot; Version=&quot;7.2023.930.2116&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; For any class that you want to intercept methods, implement interface IDecoratorMethodV1 See example at the RSCG_DecoratorTestConsole public partial class Person : IDecoratorMethodV1 { public void EndMethod(MethodRecognizer recognizer) { logger.LogInformation(&quot;end &quot;+recognizer.UniqueId); } public void ExceptionMethod(Exception ex, MethodRecognizer recognizer) { logger.LogError(ex, &quot;exception on &quot; + recognizer.UniqueId+ &quot; Value Parameters:&quot; + recognizer.ValueTypeParametersString); } public void StartMethod(MethodRecognizer recognizer) { logger.LogInformation(&quot;start &quot; + recognizer.UniqueId + &quot; Value Parameters:&quot;+recognizer.ValueTypeParametersString); } } Usage with ASP.NET Core - or any DI framework​ Let's take Person with interface IPerson. You have the following: serviceCollection .AddTransient&lt;IPerson, Person&gt;(); You can add this as the latest serviceCollection = serviceCollection .AddTransient&lt;Person, Person&gt;() .AddTransient&lt;IPerson, Person_Decorator&gt;(); And when asking for IPerson , the last wins: var data = serviceProvider.GetRequiredService&lt;IPerson&gt;(); //obtaining Person_Decorator because is the last one   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#about","content":" note Intercept methods - start, stop,exception  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPersonLogger.csPerson.cs This is the CSharp Project that references RSCG_Decorator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;TreatWarningsAsErrors&gt;True&lt;/TreatWarningsAsErrors&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Logging&quot; Version=&quot;7.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Logging.Console&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_Decorator&quot; Version=&quot;7.2023.930.2116&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_DecoratorCommon&quot; Version=&quot;7.2023.930.2116&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RSCG_DecoratorTestConsole.Person_MethodDecoratorV1.cs //generated by RSCG_Decorator, version 7.2023.930.2116 namespace RSCG_DecoratorTestConsole { partial class Person_Decorator :RSCG_DecoratorTestConsole.IPerson { private Person original; public Person_Decorator (Person original ){ this.original=original; } //now decorate methods : 5 public string? FirstName { get{ return original.FirstName; } set{ original.FirstName=value; } } public string? LastName { get{ return original.LastName; } set{ original.LastName=value; } } /* FullName */ public string FullName(string separator = &quot; &quot;) { var FullName_14 =new RSCG_DecoratorCommon.MethodRecognizer(&quot;Person&quot;,&quot;FullName&quot;); FullName_14.FileName=&quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\RSCG_Decorator\\\\src\\\\RSCG_DecoratorTestConsole\\\\Person.cs&quot;; FullName_14.Line=14; FullName_14.ValueTypeParameters.Add(&quot;separator&quot;, separator); using var mrUtils= new RSCG_DecoratorCommon.MRUtils(FullName_14, original); try{ return original.FullName(separator); } catch(Exception ex){ mrUtils.SendException(ex); throw; } } /* DisplayNameOnConsole */ public void DisplayNameOnConsole() { var DisplayNameOnConsole_19 =new RSCG_DecoratorCommon.MethodRecognizer(&quot;Person&quot;,&quot;DisplayNameOnConsole&quot;); DisplayNameOnConsole_19.FileName=&quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\RSCG_Decorator\\\\src\\\\RSCG_DecoratorTestConsole\\\\Person.cs&quot;; DisplayNameOnConsole_19.Line=19; using var mrUtils= new RSCG_DecoratorCommon.MRUtils(DisplayNameOnConsole_19, original); try{ original.DisplayNameOnConsole(); } catch(Exception ex){ mrUtils.SendException(ex); throw; } } /* GetName */ public async System.Threading.Tasks.Task&lt;string&gt; GetName() { var GetName_23 =new RSCG_DecoratorCommon.MethodRecognizer(&quot;Person&quot;,&quot;GetName&quot;); GetName_23.FileName=&quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\RSCG_Decorator\\\\src\\\\RSCG_DecoratorTestConsole\\\\Person.cs&quot;; GetName_23.Line=23; using var mrUtils= new RSCG_DecoratorCommon.MRUtils(GetName_23, original); try{ return await original.GetName(); } catch(Exception ex){ mrUtils.SendException(ex); throw; } } /* GetFullName */ public async System.Threading.Tasks.Task&lt;string&gt; GetFullName() { var GetFullName_28 =new RSCG_DecoratorCommon.MethodRecognizer(&quot;Person&quot;,&quot;GetFullName&quot;); GetFullName_28.FileName=&quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\RSCG_Decorator\\\\src\\\\RSCG_DecoratorTestConsole\\\\Person.cs&quot;; GetFullName_28.Line=28; using var mrUtils= new RSCG_DecoratorCommon.MRUtils(GetFullName_28, original); try{ return await original.GetFullName(); } catch(Exception ex){ mrUtils.SendException(ex); throw; } } /* SaveId */ public async System.Threading.Tasks.Task SaveId(int id) { var SaveId_32 =new RSCG_DecoratorCommon.MethodRecognizer(&quot;Person&quot;,&quot;SaveId&quot;); SaveId_32.FileName=&quot;D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\RSCG_Decorator\\\\src\\\\RSCG_DecoratorTestConsole\\\\Person.cs&quot;; SaveId_32.Line=32; SaveId_32.ValueTypeParameters.Add(&quot;id&quot;, id); using var mrUtils= new RSCG_DecoratorCommon.MRUtils(SaveId_32, original); try{ await original.SaveId(id); } catch(Exception ex){ mrUtils.SendException(ex); throw; } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#download-example-net--c","content":" tip Download Example project RSCG_Decorator   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_Decorator​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#share-rscg_decorator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_Decorator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_Decorator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Decorator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"RSCG_ExportDiagram by AndreiIgnat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#info","content":" info Name: RSCG_ExportDiagram Roslyn Diagram generator for external dependencies Author: AndreiIgnat NuGet:https://github.com/ignatandrei/RSCG_ExportDiagram You can find more details at RSCG_ExportDiagram Source: https://github.com/ignatandrei/RSCG_ExportDiagram  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#original-readme","content":" note RSCG_ExportDiagram Usefull diagram for external relations for a csproj with other csproj Install​ Add to the csproj &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_ExportDiagram&quot; Version=&quot;2024.810.832&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_ExportDiagram_OutputFolder&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_ExportDiagram_Exclude&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_ExportDiagram_OutputFolder&gt;..&lt;/RSCG_ExportDiagram_OutputFolder&gt; &lt;RSCG_ExportDiagram_Exclude&gt;&lt;/RSCG_ExportDiagram_Exclude&gt; &lt;/PropertyGroup&gt; And the diagram will be generated in the folder parent for the .csproj file Alternatively, you can use the command line tool to generate the diagram for a solution function ProcessCsproj { param ( [string]$project, [string]$folderOutput ) $version = &quot;2024.810.832&quot; #$folderOutput= &quot;..&quot; $newNode = [xml]@&quot; &lt;MainData&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_ExportDiagram_OutputFolder&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_ExportDiagram_Exclude&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_ExportDiagram_OutputFolder&gt;$folderOutput&lt;/RSCG_ExportDiagram_OutputFolder&gt; &lt;RSCG_ExportDiagram_Exclude&gt;&lt;/RSCG_ExportDiagram_Exclude&gt; &lt;/PropertyGroup&gt; &lt;/MainData&gt; &quot;@ # Write-Host $newNode.MainData.InnerXml $backFile =$project + &quot;.bak&quot; Copy-Item $project $backFile dotnet add $project package RSCG_ExportDiagram -v $version $proj = [xml](Get-Content $project) $foundNode = $proj.Project #Write-Host $proj.Project.InnerXml $ItemGroup = $proj.ImportNode($newNode.DocumentElement.ItemGroup,$true) $proj.Project.PrependChild($ItemGroup) $proj.DocumentElement.AppendChild($ItemGroup ) $PropertyGroup = $proj.ImportNode($newNode.DocumentElement.PropertyGroup,$true) $proj.Project.PrependChild($PropertyGroup) $proj.DocumentElement.AppendChild($PropertyGroup) $proj.Save($project) dotnet build # pause Copy-Item $backFile $project -Force Remove-Item $backFile -Force } $solution = gci *.sln | %{ $_.FullName} $folderSolution = Split-Path $solution # Write-Host $folderSolution Get-Content $solution | Select-String 'Project\\(' | ForEach-Object { $projectParts = $_ -Split '[,=]' | ForEach-Object { $_.Trim('[ &quot;{}]') }; # New-Object PSObject -Property @{ # Name = $projectParts[1]; # File = $projectParts[2]; # Guid = $projectParts[3] # } if ($projectParts[2] -match '.csproj$'){ $fileProject =Join-Path $folderSolution $projectParts[2] Write-Host $fileProject ProcessCsproj -project $fileProject -folderOutput $folderSolution } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#about","content":" note Generating diagram for relation classes within referenced project  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPersonData.cs This is the CSharp Project that references RSCG_ExportDiagram &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_ExportDiagram&quot; Version=&quot;2024.810.832&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_ExportDiagram_OutputFolder&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_ExportDiagram_Exclude&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\Person\\Person.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_ExportDiagram_OutputFolder&gt;obj/GX/&lt;/RSCG_ExportDiagram_OutputFolder&gt; &lt;RSCG_ExportDiagram_Exclude&gt;&lt;/RSCG_ExportDiagram_Exclude&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DiagramDemoConsole_Program_1_gen.csDiagramDemoConsole_rel_csproj.md //JSONFolder=obj/GX/ //projectDir=D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RSCG_ExportDiagram\\src\\DiagramDemoConsole\\ //projectName=DiagramDemoConsole //excludeData= file class Program_References_1 { public Program_References_1() { // Method Main has following external references // Person.PersonData..ctor //Person.PersonData.Name } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#download-example-net--c-","content":" tip Download Example project RSCG_ExportDiagram   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_ExportDiagram​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#share-rscg_exportdiagram","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_ExportDiagram  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementProject) - 17 other generators​","type":1,"pageTitle":"RSCG_ExportDiagram by AndreiIgnat","url":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram#in-the-same-category-enhancementproject---17-other-generators","content":" AutoInvoke.Generator​  AutoSpectre​  BuildInfo​  CommandLine​  Credfeto.Version.Information.Generator​  Larcanum.GitInfo​  LinqGen.Generator​  Pekspro.BuildInformationGenerator​  PlantUmlClassDiagramGenerator​  RSCG_AMS​  RSCG_FunctionsWithDI​  RSCG_NameGenerator​  RSCG_TimeBombComment​  RSCG_Wait​  ThisAssembly​  ThisAssembly.Constants​  ThisAssembly.Metadata​ ","version":"Next","tagName":"h3"},{"title":"RSCG_FunctionsWithDI by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#info","content":" info Name: RSCG_FunctionsWithDI Generate correct functions from [FromServices] Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_FunctionsWithDI/ You can find more details at https://github.com/ignatandrei/functionsdi Source: https://github.com/ignatandrei/functionsdi  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#original-readme","content":" note FunctionsDI Generate (constructor) and functions calls similar with ASP.NET Core WebAPI ( [FromServices] will be provided by DI ) Also, verifies for null . Usage 1 - generate constructors from methods Reference into the csproj &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_FunctionsWithDI&quot; Version=&quot;2022.7.7.636&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_FunctionsWithDI_Base&quot; Version=&quot;2022.7.7.636&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Then for every class you can write [FromServices] using RSCG_FunctionsWithDI_Base; //namespace if necessary public partial class TestDIFunction { public bool TestMyFunc1([FromServices] TestDI1 t1, [FromServices] TestDI2 t2, int x, int y) { return true; } //more functions } generates the constructor with needed details public partial class TestDIFunction { private TestDI1 _TestDI1; private TestDI2 _TestDI2; public TestDIFunction (TestDI1 _TestDI1,TestDI2 _TestDI2) //constructor generated with needed DI { this._TestDI1=_TestDI1; this._TestDI2=_TestDI2; } //end constructor //making call to TestMyFunc1 public bool TestMyFunc1(int x,int y){ var t1 = this._TestDI1 ; if(t1 == null) throw new ArgumentException(&quot; service TestDI1 is null in TestDIFunction &quot;); var t2 = this._TestDI2 ; if(t2 == null) throw new ArgumentException(&quot; service TestDI2 is null in TestDIFunction &quot;); return TestMyFunc1(t1,t2,x,y); } so you can call var test=serviceProvider.GetService&lt;TestDIFunction&gt;(); Console.WriteLine(test.TestMyFunc1(10,3)); // calling without the [FromServices] arguments Usage 2 - generate constructors from fields / constructors &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_FunctionsWithDI&quot; Version=&quot;2022.7.7.636&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_FunctionsWithDI_Base&quot; Version=&quot;2022.7.7.636&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Assuming this classes, that you want to keep a minimum of parameters constructors public partial class TestDIFunctionAdvWithConstructor { [RSCG_FunctionsWithDI_Base.FromServices] private TestDI1 NewTestDI1; [RSCG_FunctionsWithDI_Base.FromServices] public TestDI2 NewTestDI2 { get; set; } public readonly TestDI3 myTestDI3; private TestDIFunctionAdvWithConstructor(TestDI3 test) { myTestDI3= test; } } public partial class TestDIFunctionAdvNoConstructor { [RSCG_FunctionsWithDI_Base.FromServices] public TestDI1 NewTestDI1; [RSCG_FunctionsWithDI_Base.FromServices] private TestDI2 NewTestDI2 { get; set; } } the generator will generate namespace TestFunctionsWithDI { public partial class TestDIFunctionAdvNoConstructor { public TestDIFunctionAdvNoConstructor( TestDI1 _NewTestDI1,TestDI2 _NewTestDI2 ) { this.NewTestDI1 = _NewTestDI1; this.NewTestDI2 = _NewTestDI2; }//end constructor }//class }//namespace namespace TestFunctionsWithDI { public partial class TestDIFunctionAdvWithConstructor { public TestDIFunctionAdvWithConstructor(TestDI3 test, TestDI1 _NewTestDI1, TestDI2 _NewTestDI2) : this (test) { this.NewTestDI1 = _NewTestDI1; this.NewTestDI2 = _NewTestDI2; }//end constructor }//class }//namespace Enjoy!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#about","content":" note Generating functions that have parameters from services  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#example-source-csproj-source-files","content":" CSharp ProjectProgram.csTestDI1.csTestDI2.csTestDIMyClass.cs This is the CSharp Project that references RSCG_FunctionsWithDI &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_FunctionsWithDI&quot; Version=&quot;2022.7.7.636&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_FunctionsWithDI_Base&quot; Version=&quot;2022.7.7.636&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;7.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TestDIMyClass_gen_methods.cs namespace RSCG_FunctionsWithDIDemo { public partial class TestDIMyClass { private TestDI1 _TestDI1; private TestDI2 _TestDI2; public TestDIMyClass (TestDI1 _TestDI1,TestDI2 _TestDI2) { this._TestDI1=_TestDI1; this._TestDI2=_TestDI2; } //end constructor //making call to TestMyFunc1 public bool TestMyFunc1(int x,int y){ var t1 = this._TestDI1 ; if(t1 == null) throw new ArgumentException(&quot; service TestDI1 is null in TestDIMyClass &quot;); var t2 = this._TestDI2 ; if(t2 == null) throw new ArgumentException(&quot; service TestDI2 is null in TestDIMyClass &quot;); return TestMyFunc1(t1,t2,x,y); } }//class }//namespace   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#download-example-net--c","content":" tip Download Example project RSCG_FunctionsWithDI   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_FunctionsWithDI​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#share-rscg_functionswithdi","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_FunctionsWithDI by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_FunctionsWithDI#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"RSCG_IFormattable by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#info","content":" info Name: RSCG_IFormattable Implement IFormattable for a class Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_IFormattable/ https://www.nuget.org/packages/RSCG_IFormattableCommon/ You can find more details at https://github.com/ignatandrei/rscg_iformattable/ Source: https://github.com/ignatandrei/rscg_iformattable/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#original-readme","content":" note RSCG_IFormattable Roslyn Code Generator for IFormattable Usage​ Add to your csproj file: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_IFormattable&quot; Version=&quot;2024.711.2013&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_IFormattableCommon&quot; Version=&quot;2024.711.2013&quot; /&gt; &lt;/ItemGroup&gt; Add to your source file: [RSCG_IFormattableCommon.AddIFormattable] internal partial class Person { public string? FirstName { get; set; } public string? LastName { get; set; } } And then the result is using RSCG_IFormattableConsole; Person person = new (); person.FirstName = &quot;Andrei&quot;; person.LastName = &quot;Ignat&quot;; Console.WriteLine(person.ToString(&quot;The person name is {FirstName} {LastName}&quot;,null));   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#about","content":" note Generating .ToString for IFormattable  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references RSCG_IFormattable &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_IFormattable&quot; Version=&quot;2024.711.2013&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_IFormattableCommon&quot; Version=&quot;2024.711.2013&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.gen.cs namespace RSCG_IFormattableDemo { partial class Person { public string ToString(string format){ return ToString(format, System.Globalization.CultureInfo.CurrentCulture); } public string ToString(string format, IFormatProvider provider) { if (String.IsNullOrEmpty(format)) format = &quot;G&quot;; if (provider == null) provider = System.Globalization.CultureInfo.CurrentCulture; string retValue=format; if(format==&quot;G&quot;) { retValue =&quot;&quot;; retValue += FirstName + &quot; = &quot; + FirstName + &quot;;&quot;; retValue += LastName + &quot; = &quot; + LastName + &quot;;&quot;; return retValue; } if(format.Contains(&quot;{FirstName}&quot;)){ var val = FirstName; retValue=retValue.Replace(&quot;{FirstName}&quot;, val.ToString()); } if(format.Contains(&quot;{LastName}&quot;)){ var val = LastName; retValue=retValue.Replace(&quot;{LastName}&quot;, val.ToString()); } return retValue; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#download-example-net--c","content":" tip Download Example project RSCG_IFormattable   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_IFormattable​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#share-rscg_iformattable","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_IFormattable  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_IFormattable by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_IFormattable#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"rscg_Interface_to_null_object by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#info","content":" info Name: rscg_Interface_to_null_object Interface to null object - common Author: Andrei Ignat NuGet:https://www.nuget.org/packages/rscg_Interface_to_null_object/ https://www.nuget.org/packages/rscg_Interface_to_null_object_common You can find more details at https://github.com/ignatandrei/rscg_Interface_to_null_object/ Source: https://github.com/ignatandrei/rscg_Interface_to_null_object/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#original-readme","content":" note Interface to Null Object Pattern Implementation of https://en.wikipedia.org/wiki/Null_object_pattern from interface Installation Add to your csproj file: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscg_Interface_to_null_object&quot; Version=&quot;2025.120.1832&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;rscg_Interface_to_null_object_common&quot; Version=&quot;2025.120.1832&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Or add the nuget packages rscg_Interface_to_null_object and rscg_Interface_to_null_object_common Usage [InterfaceToNullObject.ToNullObject] public interface IEmployee { public string FirstName { get; set; } public string LastName { get; set; } public IDepartment Department { get; set; } public string GetFullName(); } And then a C# class that implements the interface will be generated public partial class Employee_null : global::IntegrationConsole.IEmployee { public virtual string FirstName { get; set; } = default(string); public virtual string LastName { get; set; } = default(string); public virtual IntegrationConsole.IDepartment Department { get; set; } = default(IntegrationConsole.IDepartment); public virtual string GetFullName() { return default(string); } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#about","content":" note Generate null objects for interfaces  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#example-source-csproj-source-files","content":" CSharp ProjectProgram.csIEmployee.csIDepartment.cs This is the CSharp Project that references rscg_Interface_to_null_object &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscg_Interface_to_null_object&quot; Version=&quot;2025.120.1832&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;rscg_Interface_to_null_object_common&quot; Version=&quot;2025.120.1832&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  AutoInterfaceAttribute.g.csAutoInterfaceVisibilityInternalAttribute.g.csAutoInterfaceVisibilityPrivateProtectedAttribute.g.csAutoInterfaceVisibilityProtectedAttribute.g.csAutoInterfaceVisibilityProtectedInternalAttribute.g.csAutoInterfaceVisibilityPublicAttribute.g.csIDepartment_NullInterface.Department_IDepartment.cs.g.csIEmployee_NullInterface.Employee_Employee.cs.g.csIgnoreAutoInterfaceAttribute.g.cs // &lt;auto-generated/&gt; #pragma warning disable #nullable enable annotations #if !AUTOINTERFACE_EXCLUDE_ATTRIBUTES using System; namespace AutoInterfaceAttributes; /// &lt;summary&gt; /// Generates an interface for the decorated class/struct. /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;AutoInterface&quot;, &quot;2.4.0&quot;)] internal sealed class AutoInterfaceAttribute : Attribute { /// &lt;summary&gt; /// &lt;para&gt;The name of the generated interface.&lt;/para&gt; /// &lt;para&gt;Default is &quot;I{ClassName}&quot;&lt;/para&gt; /// &lt;/summary&gt; public string Name { get; init; } /// &lt;summary&gt; /// &lt;para&gt;The modifier(s) for the interface.&lt;/para&gt; /// &lt;para&gt;Deault is &quot;public partial&quot;&lt;/para&gt; /// &lt;/summary&gt; public string Modifier { get; init; } /// &lt;summary&gt; /// &lt;para&gt;The namespace declaration for the interface.&lt;/para&gt; /// &lt;para&gt;If empty string, no namespace directive will be used (global namespace).&lt;br /&gt; /// Default (if not present) it will be mapped to the same namespace as the namespace of the class/struct.&lt;/para&gt; /// &lt;/summary&gt; public string Namespace { get; init; } /// &lt;summary&gt; /// &lt;para&gt;interface inheritance: Name(s) of interfaces this interface will inherit.&lt;/para&gt; /// &lt;para&gt;Default is Array.Empty&lt;/para&gt; /// &lt;/summary&gt; public Type[] Inheritance { get; init; } /// &lt;summary&gt; /// &lt;para&gt; /// The Classes, structs or interfaces containing the generated interface.&lt;br /&gt; /// e.g. [&quot;public sealed partial class Example&quot;] will wrap the interface with that expression. /// &lt;/para&gt; /// &lt;para&gt;Default is Array.Empty&lt;/para&gt; /// &lt;/summary&gt; public string[] Nested { get; init; } /// &lt;summary&gt; /// &lt;para&gt;If enabled, static members get accepted and are generating &quot;static abstract&quot; members.&lt;/para&gt; /// &lt;para&gt;Default is false&lt;/para&gt; /// &lt;/summary&gt; public bool StaticMembers { get; init; } } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#download-example-net--c","content":" tip Download Example project rscg_Interface_to_null_object   ","version":"Next","tagName":"h3"},{"title":"Share rscg_Interface_to_null_object​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#share-rscg_interface_to_null_object","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/rscg_Interface_to_null_object  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"rscg_Interface_to_null_object by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"RSCG_NameGenerator by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#info","content":" info Name: RSCG_NameGenerator Generates uniqe names for release Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_NameGenerator/ You can find more details at https://github.com/ignatandrei/NameGenerator/ Source: https://github.com/ignatandrei/NameGenerator/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#original-readme","content":" note NameGenerator Generator of names for an assembly / product release . Generates names for {adjective}-{name} or {adjective-name-city} The fact that is a Roslyn Code Generator ensures that you can use it in your projects without any additional dependencies - and get rid of him ! Usage​ Add to the .csproj file: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_NameGenerator&quot; Version=&quot;2024.26.8.2002&quot; &gt; &lt;OutputItemType&gt;Analyzer&lt;/OutputItemType&gt; &lt;ReferenceOutputAssembly&gt;false&lt;/ReferenceOutputAssembly&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;!-- optional --&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Then, in the code, you can use the following code: using Generated.TestNameGenerator; //by just putting here //you will not deploy the dll when you deploy the project //name are generated in the code source Console.WriteLine($&quot;Name:{TheAssemblyInfo.GeneratedName}&quot;); Console.WriteLine($&quot;Nice:{TheAssemblyInfo.GeneratedNameNice}&quot;); Console.WriteLine($&quot;Small:{TheAssemblyInfo.GeneratedNameSmall}&quot;); More examples​ Please see https://ignatandrei.github.io/RSCG_Examples/v2/docs/List-of-RSCG for a list of examples of Roslyn Source Code Generators Enjoy!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#about","content":" note Generating unique names for assemblies  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references RSCG_NameGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_NameGenerator&quot; Version=&quot;2024.26.8.2002&quot; &gt; &lt;OutputItemType&gt;Analyzer&lt;/OutputItemType&gt; &lt;ReferenceOutputAssembly&gt;false&lt;/ReferenceOutputAssembly&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TheAssemblyInfo.g.cs // &lt;auto-generated/&gt; namespace Generated.TestNameGenerator { public static class TheAssemblyInfo { public const string AssemblyName = &quot;TestNameGenerator&quot;; public const string GeneratedNameNice = &quot;Henri Bergson is feeling clear in Dhaka&quot;; public const string GeneratedNameSmall = &quot;clear-Henri Bergson&quot;; public const string GeneratedName = &quot;clear-Henri Bergson-Dhaka&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#download-example-net--c","content":" tip Download Example project RSCG_NameGenerator   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_NameGenerator​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#share-rscg_namegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_NameGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_NameGenerator by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_NameGenerator#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"RSCG_JSON2Class by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#info","content":" info Name: RSCG_JSON2Class This package transforms any json into a class Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_JSON2Class/ You can find more details at https://github.com/ignatandrei/RSCG_JSON2Class Source: https://github.com/ignatandrei/RSCG_JSON2Class  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#original-readme","content":" note RSCG_JSON2Class Transform any json ( including appsettings ) into a class Usage​ Install the nuget package into your project &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_JSON2Class&quot; Version=&quot;2024.2.29.807&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;GenerateDocumentationFile&gt;True&lt;/GenerateDocumentationFile&gt; &lt;/PropertyGroup&gt; Verify that the json file is set analyzer ( and , if you want to deserialize, copy to the output directory) &lt;ItemGroup&gt; &lt;None Remove=&quot;testData.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;testData.json&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; Access from C# code using System.Text.Json; var testData = JsonSerializer.Deserialize&lt;JSON2ClassConsole.SettingsJson.testData&gt;(System.IO.File.ReadAllText(&quot;testData.json&quot;)); ArgumentNullException.ThrowIfNull(testData); Console.WriteLine(testData.Logging.LogLevel.Default); Console.WriteLine(testData.DictData.Number_2);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#about","content":" note transform any json into a class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#example-source-csproj-source-files","content":" CSharp ProjectProgram.cstestData.json This is the CSharp Project that references RSCG_JSON2Class &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;testData.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;testData.json&quot;&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/AdditionalFiles&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_JSON2Class&quot; Version=&quot;2024.2.29.807&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;GenerateDocumentationFile&gt;True&lt;/GenerateDocumentationFile&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  testData.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // Runtime Version: // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System; using System.Collections.Generic; using System.Runtime.Serialization; namespace JSON2ClassConsole.SettingsJson { //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class LogLevel { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;DEFAULT&quot;: return this.Default ; case &quot;MICROSOFT&quot;: return this.Microsoft ; case &quot;MICROSOFTHOSTINGLIFETIME&quot;: return this.MicrosoftHostingLifetime ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from LogLevel prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;Default&quot; ; yield return &quot;Microsoft&quot; ; yield return &quot;MicrosoftHostingLifetime&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;Default&quot;)] public string Default { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;Microsoft&quot;)] public string Microsoft { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;MicrosoftHostingLifetime&quot;)] public string MicrosoftHostingLifetime { get; set; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class Logging { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;LOGLEVEL&quot;: return this.LogLevel ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from Logging prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;LogLevel&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;LogLevel&quot;)] public LogLevel LogLevel { get; set; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class PropChars { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;A&quot;: return this.A ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from PropChars prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;A&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;a&quot;)] public string A { get; set; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class NoProp { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from NoProp prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield break; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class Test { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;NUMBER_1234A&quot;: return this.Number_1234a ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from Test prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;Number_1234a&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;1234a&quot;)] public IList&lt;string&gt; Number_1234a { get; set; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class Number_55 { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;A&quot;: return this.A ; case &quot;NUMBER_2&quot;: return this.Number_2 ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from Number_55 prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;A&quot; ; yield return &quot;Number_2&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;a&quot;)] public string A { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;2&quot;)] public string Number_2 { get; set; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class DictData { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;TEST&quot;: return this.Test ; case &quot;A&quot;: return this.A ; case &quot;NUMBER_2&quot;: return this.Number_2 ; case &quot;MYNUMBER&quot;: return this.MyNumber ; case &quot;NUMBER_55&quot;: return this.Number_55 ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from DictData prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;Test&quot; ; yield return &quot;A&quot; ; yield return &quot;Number_2&quot; ; yield return &quot;MyNumber&quot; ; yield return &quot;Number_55&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;Test&quot;)] public Test Test { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;A&quot;)] public string A { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;2&quot;)] public string Number_2 { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;MyNumber&quot;)] public int MyNumber { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;55&quot;)] public Number_55 Number_55 { get; set; } } //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;RSCG_JSON2Class&quot;, &quot;2024.2.29.807&quot;)] public partial class testData { public object GetFromPropertyName(string propName, bool returnNull =false){ propName=propName?.ToUpper(); switch(propName){ case &quot;LOGGING&quot;: return this.Logging ; case &quot;PROPCHARS&quot;: return this.PropChars ; case &quot;NOPROP&quot;: return this.NoProp ; case &quot;ALLOWEDHOSTS&quot;: return this.AllowedHosts ; case &quot;MYTEST&quot;: return this.MyTest ; case &quot;DICTDATA&quot;: return this.DictData ; default: if(returnNull) return null; throw new ArgumentException(&quot;cannot found from testData prop &quot;+propName); } } public IEnumerable&lt;string&gt; Properties(){ yield return &quot;Logging&quot; ; yield return &quot;PropChars&quot; ; yield return &quot;NoProp&quot; ; yield return &quot;AllowedHosts&quot; ; yield return &quot;MyTest&quot; ; yield return &quot;DictData&quot; ; yield break; } [System.Text.Json.Serialization.JsonPropertyName(&quot;Logging&quot;)] public Logging Logging { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;PropChars&quot;)] public PropChars PropChars { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;NoProp&quot;)] public NoProp NoProp { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;AllowedHosts&quot;)] public string AllowedHosts { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;MyTest&quot;)] public string MyTest { get; set; } [System.Text.Json.Serialization.JsonPropertyName(&quot;DictData&quot;)] public DictData DictData { get; set; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#download-example-net--c","content":" tip Download Example project RSCG_JSON2Class   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_JSON2Class​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#share-rscg_json2class","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_JSON2Class  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_JSON2Class by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_JSON2Class#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"RSCG_Static by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_Static","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#info","content":" info Name: RSCG_Static This package make you an interface and record from static properties / methods Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_Static/ You can find more details at https://github.com/ignatandrei/RSCG_Static Source: https://github.com/ignatandrei/RSCG_Static  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#original-readme","content":" note RSCG_Static Roslyn Source Code Generator - transform static classes into instances and interfaces More, there is a MakeNew static method created to can have DI. Just put a function like this ( example for System.DateTime) public Type GenerateInterfaceFromDate()=&gt;typeof(DateTime); and the properties of the classes will be generated into interfaces and you can write: //for DI, register //ISystem_DateTime with transient for new clsSystem_DateTime() Console.WriteLine(&quot;Hello World!&quot;); ISystem_DateTime dateStatic = recSystem_DateTime.MakeNew();//static ISystem_DateTime dateVar = new clsSystem_DateTime(); //variable = real Console.WriteLine(dateStatic.Now.Second); Console.WriteLine(dateVar.Now.Second); await Task.Delay(10 * 1000); Console.WriteLine(dateStatic.Now.Second); Console.WriteLine(dateVar.Now.Second); More Roslyn Source Code Generators You can find more RSCG with examples at Roslyn Source Code Generators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#about","content":" note Generate interfaces and classes from static classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#example-source-csproj-source-files","content":" CSharp ProjectProgram.csStaticToInterface.cs This is the CSharp Project that references RSCG_Static &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_Static&quot; Version=&quot;2023.5.19.2037&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenerateInterfaceFromDate.cs #nullable enable namespace RSCG_StaticDemo { public interface ISystem_DateTime { public System.DateTime Now {get;} public System.DateTime Today {get;} public System.DateTime UtcNow {get;} }// interface //now the partial class public record recSystem_DateTime (System.DateTime Now,System.DateTime Today,System.DateTime UtcNow) : ISystem_DateTime { public static recSystem_DateTime MakeNew() { return new recSystem_DateTime(System.DateTime.Now,System.DateTime.Today,System.DateTime.UtcNow); } //end makenew } //end record public class clsSystem_DateTime : ISystem_DateTime { public System.DateTime Now {get { return System.DateTime.Now; } } public System.DateTime Today {get { return System.DateTime.Today; } } public System.DateTime UtcNow {get { return System.DateTime.UtcNow; } } } //end class } // namespace #nullable disable   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#download-example-net--c","content":" tip Download Example project RSCG_Static   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_Static​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#share-rscg_static","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_Static  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_Static by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Static#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"rscg_queryables by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/rscg_queryables","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#info","content":" info Name: rscg_queryables Intercept method Author: Andrei Ignat NuGet:https://www.nuget.org/packages/rscg_queryables/ https://www.nuget.org/packages/rscg_queryablesCommon/ You can find more details at https://github.com/ignatandrei/rscg_queryables Source: https://github.com/ignatandrei/rscg_queryables  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#original-readme","content":" note rscg_queryables rscg_queryables is a Roslyn Code Generator designed to generate extension methods for sorting and filtering IEnumerable and IQueryable collections based on a given class. Sorting how the user wants in frontend - description​ Consider a scenario where we need to display a list of Person objects and allow the user to sort them by various properties. The user should have the ability to select the property and the sorting order. public class Person { public string FirstName { get; set; } = string.Empty; public string LastName { get; set; } = string.Empty; public int Age { get; set; } public string FullName { get { return $&quot;{FirstName} {LastName}&quot;; } } } When data is transmitted over HTTP, it is often in the form of a string object. To sort by first name in descending order, the query string should look like this: orderBy=FirstName&amp;Asc=false Then in the backend code we should parse the query string and apply the sorting logic. if(queryString.ContainsKey(&quot;orderBy&quot;)) { string orderBy = queryString[&quot;orderBy&quot;]; bool asc = queryString[&quot;asc&quot;] == &quot;false&quot; ? false: true;//default is true if(orderBy == &quot;FirstName&quot;) { if(asc) { persons = persons.OrderBy(p =&gt; p.FirstName); } else { persons = persons.OrderByDescending(p =&gt; p.FirstName); } } //do the same for other properties : LastName, Age, FullName } The solution​ With rscg_queryables, you can do this in a more elegant way. if(queryString.ContainsKey(&quot;orderBy&quot;)) { string orderBy = queryString[&quot;orderBy&quot;]; bool asc = queryString[&quot;asc&quot;] == &quot;false&quot; ? false: true;//default is true persons = persons.OrderByAscDesc(orderBy, asc); //or you can do this, if you want to control //if(asc) //{ // persons = persons.OrderBy(orderBy); //} //else //{ // persons = persons.OrderByDescending(orderBy); //} } This should be done for everything that implements IEnumerable or IQueryable. Filtering Based on User Preferences - Description​ Consider a scenario where we need to display a list of Person objects and allow the user to filter them by various properties. The user should have the ability to select the property, the filter criteria, and the filter operator (equal or different). When data is transmitted over HTTP, it is often in the form of a string object. To filter by first name where the value is &quot;John&quot;, the query string should look like this: filterBy=FirstName&amp;filterOperator=equal&amp;filterValue=John In the backend code, we need to parse the query string and apply the appropriate filtering logic. if (queryString.ContainsKey(&quot;filterBy&quot;) &amp;&amp; queryString.ContainsKey(&quot;filterOperator&quot;) &amp;&amp; queryString.ContainsKey(&quot;filterValue&quot;)) { string filterBy = queryString[&quot;filterBy&quot;]; string filterOperator = queryString[&quot;filterOperator&quot;]; string filterValue = queryString[&quot;filterValue&quot;]; if (filterBy == &quot;FirstName&quot;) { if (filterOperator == &quot;equal&quot;) { persons = persons.Where(p =&gt; p.FirstName == filterValue); } else if (filterOperator == &quot;different&quot;) { persons = persons.Where(p =&gt; p.FirstName != filterValue); } } // Do the same for other properties: LastName, Age, FullName } The Solution​ With rscg_queryables, you can achieve this in a more elegant and efficient manner. add the nugets to your project &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscg_queryablesCommon&quot; Version=&quot;2024.1110.1815&quot; /&gt; &lt;PackageReference Include=&quot;rscg_queryables&quot; Version=&quot;2024.1110.1815&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; Optional see the code generated &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; Modify the Person class to add the rscg_queryables attribute. [MakeSortable] [MakeWhere] public class Person { //same code as above, omitted for brevity } Use the overloaded Where method to filter the collection based on the query string. if (queryString.ContainsKey(&quot;filterBy&quot;) &amp;&amp; queryString.ContainsKey(&quot;filterOperator&quot;) &amp;&amp; queryString.ContainsKey(&quot;filterValue&quot;)) { string filterBy = queryString[&quot;filterBy&quot;]; string filterOperator = queryString[&quot;filterOperator&quot;] == &quot;equal&quot;?WhereOperator.Equal:WhereOperator.Different; string filterValue = queryString[&quot;filterValue&quot;]; persons = persons.Where(filterBy, filterOperator, filterValue); } This approach can be applied to any collection that implements IEnumerable or IQueryable. Other Roslyn Code Generators​ For more Roslyn Source Code Generators, visit RSCG Examples https://ignatandrei.github.io/RSCG_Examples/v2/docs/rscg-examples.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#about","content":" note Generating code for .Where and .OrderBy by string, not by lambda  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#example-source-csproj-source-files","content":" CSharp ProjectProgram.csStudent.cs This is the CSharp Project that references rscg_queryables &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscg_queryablesCommon&quot; Version=&quot;2024.1110.1815&quot; /&gt; &lt;PackageReference Include=&quot;rscg_queryables&quot; Version=&quot;2024.1110.1815&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  SortAndWhere_Student_sortable.csSortAndWhere_Student_where.cs public static partial class ExtensionsSortable_SortAndWhere_Student { #region Enumerable public static System.Linq.IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; OrderBy ( this IEnumerable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return OrderByAscDesc(source,propertyName,true); } public static System.Linq.IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; OrderByDescending ( this IEnumerable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return OrderByAscDesc(source,propertyName,false); } public static System.Linq.IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; OrderByAscDesc ( this IEnumerable&lt;global::SortAndWhere.Student&gt; source, string propertyName, bool Ascending ) { if(string.Equals(propertyName, &quot;FirstName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.OrderBy(x =&gt; x.FirstName); else return source.OrderByDescending(x =&gt; x.FirstName); } if(string.Equals(propertyName, &quot;LastName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.OrderBy(x =&gt; x.LastName); else return source.OrderByDescending(x =&gt; x.LastName); } if(string.Equals(propertyName, &quot;StartYear&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.OrderBy(x =&gt; x.StartYear); else return source.OrderByDescending(x =&gt; x.StartYear); } throw new ArgumentException($&quot;Property {propertyName} not found&quot;, propertyName); } public static System.Linq.IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; ThenByAscDesc ( this IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; source, string propertyName, bool Ascending ) { if(string.Equals(propertyName, &quot;FirstName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.ThenBy(x =&gt; x.FirstName); else return source.ThenByDescending(x =&gt; x.FirstName); } if(string.Equals(propertyName, &quot;LastName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.ThenBy(x =&gt; x.LastName); else return source.ThenByDescending(x =&gt; x.LastName); } if(string.Equals(propertyName, &quot;StartYear&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.ThenBy(x =&gt; x.StartYear); else return source.ThenByDescending(x =&gt; x.StartYear); } throw new ArgumentException($&quot;Property {propertyName} not found&quot;, propertyName); } public static System.Linq.IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; ThenBy ( this IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return ThenByAscDesc(source,propertyName,true); } public static System.Linq.IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; ThenByDescending ( this IOrderedEnumerable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return ThenByAscDesc(source,propertyName,false); } #endregion #region Queryable public static System.Linq.IOrderedQueryable&lt;global::SortAndWhere.Student&gt; OrderBy ( this IQueryable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return OrderByAscDesc(source,propertyName,true); } public static System.Linq.IOrderedQueryable&lt;global::SortAndWhere.Student&gt; OrderByDescending ( this IQueryable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return OrderByAscDesc(source,propertyName,false); } public static System.Linq.IOrderedQueryable&lt;global::SortAndWhere.Student&gt; OrderByAscDesc ( this IQueryable&lt;global::SortAndWhere.Student&gt; source, string propertyName, bool Ascending ) { if(string.Equals(propertyName, &quot;FirstName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.OrderBy(x =&gt; x.FirstName); else return source.OrderByDescending(x =&gt; x.FirstName); } if(string.Equals(propertyName, &quot;LastName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.OrderBy(x =&gt; x.LastName); else return source.OrderByDescending(x =&gt; x.LastName); } if(string.Equals(propertyName, &quot;StartYear&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.OrderBy(x =&gt; x.StartYear); else return source.OrderByDescending(x =&gt; x.StartYear); } throw new ArgumentException($&quot;Property {propertyName} not found&quot;, propertyName); } public static System.Linq.IOrderedQueryable&lt;global::SortAndWhere.Student&gt; ThenByAscDesc ( this IOrderedQueryable&lt;global::SortAndWhere.Student&gt; source, string propertyName, bool Ascending ) { if(string.Equals(propertyName, &quot;FirstName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.ThenBy(x =&gt; x.FirstName); else return source.ThenByDescending(x =&gt; x.FirstName); } if(string.Equals(propertyName, &quot;LastName&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.ThenBy(x =&gt; x.LastName); else return source.ThenByDescending(x =&gt; x.LastName); } if(string.Equals(propertyName, &quot;StartYear&quot;, StringComparison.OrdinalIgnoreCase)){ if(Ascending) return source.ThenBy(x =&gt; x.StartYear); else return source.ThenByDescending(x =&gt; x.StartYear); } throw new ArgumentException($&quot;Property {propertyName} not found&quot;, propertyName); } public static System.Linq.IOrderedQueryable&lt;global::SortAndWhere.Student&gt; ThenBy ( this IOrderedQueryable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return ThenByAscDesc(source,propertyName,true); } public static System.Linq.IOrderedQueryable&lt;global::SortAndWhere.Student&gt; ThenByDescending ( this IOrderedQueryable&lt;global::SortAndWhere.Student&gt; source, string propertyName ) { return ThenByAscDesc(source,propertyName,false); } #endregion }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#download-example-net--c","content":" tip Download Example project rscg_queryables   ","version":"Next","tagName":"h3"},{"title":"Share rscg_queryables​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#share-rscg_queryables","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/rscg_queryables  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"rscg_queryables by Andrei Ignat","url":"/RSCG_Examples/v2/docs/rscg_queryables#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"RSCG_Templating by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_Templating","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#info","content":" info Name: RSCG_Templating Roslyn Templating for all Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_Templating/ https://www.nuget.org/packages/RSCG_TemplatingCommon You can find more details at https://github.com/ignatandrei/rscg_templating/ Source: https://github.com/ignatandrei/rscg_templating/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#original-readme","content":" note RSCG_Templating Templating for generating everything from classes, methods from a Roslyn Code Generator Templating is in SCRIBAN form How to use​ Add reference to &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_Templating&quot; Version=&quot;2023.1007.724&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_TemplatingCommon&quot; Version=&quot;2023.1007.724&quot; /&gt; &lt;/ItemGroup&gt; &lt;!-- this is just for debug purposes --&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;!-- those are the templates files, see IGenerateDataFromClass --&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;ClassTypeName.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;ClassPropByName.txt&quot; /&gt; &lt;/ItemGroup&gt; Then add additional files , for example //autogenerated by RSCG_Templating version {{data.Version}} from file {{fileName}} namespace {{data.nameSpace}} { partial class {{data.className}} { public string MyTypeName = &quot;{{data.nameSpace}}.{{data.className}}&quot;; }//end class }//end namespace Now add //can have multiple attributes on partial classes [IGenerateDataFromClass(&quot;ClassTypeName&quot;)] public partial class Person Advanced uses​ For the moment , RSCG_Templating generates definition for a class with properties + methods . See example for generating enum from properties and setting properties by name var x = new Person(); Console.WriteLine(&quot;The generated string type is &quot;+x.MyTypeName); x.FirstName = &quot;Andrei&quot;; //set last name via prop x.SetPropValue(ePerson_Properties.LastName, &quot;Ignat&quot;); Console.WriteLine(&quot;called directly first name : &quot; + x.FirstName); Console.WriteLine(&quot;called via enum of prop first name : &quot; + x.GetPropValue(ePerson_Properties.FirstName)); Console.WriteLine(&quot;called get property :&quot; + x.GetPropValue(ePerson_Properties.Name)); See example at https://github.com/ignatandrei/RSCG_Templating/tree/main/src/RSCG_Templating More templates​ Template for having the class type name: ClassTypeNameTemplate for having the class properties as enum : ClassPropByNameTemplate for setting properties after name : ClassPropByName  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#about","content":" note Templating every your data ( starting with class)  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csClassPropByName.txtClassTypeName.txt This is the CSharp Project that references RSCG_Templating &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;ClassTypeName.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;ClassPropByName.txt&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_Templating&quot; Version=&quot;2023.1022.1748&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_TemplatingCommon&quot; Version=&quot;2023.1022.1748&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RSCG_TemplatingDemo.Person.ClassPropByName.csRSCG_TemplatingDemo.Person.ClassTypeName.cs //autogenerated by RSCG_Templating version 2023.1022.1748.0 from file Microsoft.CodeAnalysis.AdditionalTextFile namespace RSCG_TemplatingDemo { public enum ePerson_Properties { None = 0, Name, FirstName, LastName, } partial class Person { public object GetPropValue(ePerson_Properties prop){ switch(prop){ case ePerson_Properties.Name: return this.Name; case ePerson_Properties.FirstName: return this.FirstName; case ePerson_Properties.LastName: return this.LastName; default: throw new NotImplementedException(); } } public void SetPropValue&lt;T&gt;(ePerson_Properties prop , T value){ switch(prop){ case ePerson_Properties.Name: throw new NotImplementedException(); case ePerson_Properties.FirstName: this.FirstName = (string?)(dynamic)value; break; case ePerson_Properties.LastName: this.LastName = (string?)(dynamic)value; break; default: throw new NotImplementedException(); } } }//end class }//end namespace   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#download-example-net--c","content":" tip Download Example project RSCG_Templating   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_Templating​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#share-rscg_templating","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_Templating  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_Templating by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Templating#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"RSCG_TimeBombComment by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#info","content":" info Name: RSCG_TimeBombComment This package make a time bomb from comment. Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_TimeBombComment/ You can find more details at http://msprogrammer.serviciipeweb.ro/category/roslyn/ Source: https://github.com/ignatandrei/RSCG_TimeBombComment  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#original-readme","content":" note RSCG_TimeBombComment aka Time Bomb comment for technical debt Reference the nuget package &lt;PackageReference Include=&quot;RSCG_TimeBombComment&quot; Version=&quot;2023.5.9.2110&quot; PrivateAssets=&quot;all&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; Then just add : //TB: 2021-09-13 this is a comment transformed into an error and you will see the error! The general form is //TB: yyyy-MM-dd whatever here Examples​ //TB: 2020-09-13 this is a comment transformed into an error will produce an error Usage for technical debt​ When you have a //TODO comment in your code, you can transform it into an error time bomb by adding the following line in your project file //TB: yyyy-MM-dd whatever here and on the date will produce an error when compiling the project Usage for obsolete methods​ Imagine you have a method that is obsolete and you want to remember that you have to remove it. Just put the following line in your project file [Obsolete(&quot;should be deleted on the date on the right&quot;, TB_20210915)] static string Test1() { return &quot;asdasd&quot;; } Then RSCG will create a static const boolean TB_20210915 that will be true if the date is less than 2021-09-15 Also, when you want to test something in your code, but give error if compiled with release //Just for debug: if(args.length&gt;0) throw new ArgumentException(); //JFD: test will raise error if compiled with dotnet build -c release Other Roslyn Source Code Generators​ You can find more Roslyn Source Code Generators at https://github.com/ignatandrei/rscg_examples/ More Roslyn Source Code Generators You can find more RSCG with examples at Roslyn Source Code Generators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#about","content":" note This will generate an error from the comment after a certain date  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#example-source-csproj-source-files","content":" CSharp ProjectTestClass.cs This is the CSharp Project that references RSCG_TimeBombComment &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_TimeBombComment&quot; Version=&quot;2023.5.9.2110&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Obsolete_1.cs namespace Console_TimeBombComment { partial class TestClass { const bool TB_20230508 = true; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#download-example-net--c","content":" tip Download Example project RSCG_TimeBombComment   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_TimeBombComment​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#share-rscg_timebombcomment","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_TimeBombComment  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_TimeBombComment by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_TimeBombComment#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"RSCG_UtilityTypes by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#info","content":" info Name: RSCG_UtilityTypes Roslyn Utility Types - Pick, Omit Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_UtilityTypes/ https://www.nuget.org/packages/RSCG_UtilityTypesCommon You can find more details at https://github.com/ignatandrei/RSCG_UtilityTypes Source: https://github.com/ignatandrei/RSCG_UtilityTypes  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#original-readme","content":" note RSCG_UtilityTypes Omit and Pick from TypeScript : https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys generating also extension for converting from one type to another . See demo project. Usage​ Add to your csproj file &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_UtilityTypes&quot; Version=&quot;2023.1223.1230&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_UtilityTypesCommon&quot; Version=&quot;2023.1223.1230&quot; /&gt; &lt;/ItemGroup&gt; In C# 9.0 [Omit(&quot;MoviePreviewSmall&quot;, nameof(Actors),nameof(Year))] [Pick(&quot;MoviePreviewMinimal&quot;, nameof(Title), nameof(Year))] public class Movie { public string? Title { get; set; } public string? Director { get; set; } public int Year { get; set; } public string[]? Actors { get; set; } } And 2 new classes will be generated , MoviePreviewSmall and MoviePreviewMinimal  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#about","content":" note Add omit and pick to selectively generate types from existing types  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references RSCG_UtilityTypes &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_UtilityTypes&quot; Version=&quot;2023.1223.1230&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_UtilityTypesCommon&quot; Version=&quot;2023.1223.1230&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonFull_Person1.csPersonFull_Person2.cs namespace UtilDemo { partial class Person1 { public string FirstName { get; set; } public string LastName { get; set; } public static explicit operator Person1(PersonFull data ) { var ret= new Person1 (); ret.FirstName = data.FirstName; ret.LastName = data.LastName; return ret; } public static explicit operator PersonFull(Person1 data ) { var ret= new PersonFull (); ret.FirstName = data.FirstName; ret.LastName = data.LastName; return ret; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#download-example-net--c","content":" tip Download Example project RSCG_UtilityTypes   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_UtilityTypes​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#share-rscg_utilitytypes","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_UtilityTypes  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_UtilityTypes by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_UtilityTypes#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"RSCG_Utils by Ignat Andrei","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_Utils","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#info","content":" info Name: RSCG_Utils Additional files as strings Author: Ignat Andrei NuGet:https://www.nuget.org/packages/rscgutils You can find more details at https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/source-generation Source: https://github.com/ignatandrei/RSCG_Utils  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#original-readme","content":" note RSCG_Utils Roslyn Source Code Generators Utils Usage Additional Files​ Allow you to see additional files directly as C# const. For this, please add some .gen. files to the project. In your csproj &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscgutils&quot; Version=&quot;2023.502.835&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Second.gen.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;first.gen.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;test\\Afirst.gen.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;sql/**/*&quot; /&gt; &lt;/ItemGroup&gt; In the code //see https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/raw-string string x= MyAdditionalFiles.Second_gen_txt; To debug, you can add into the .csproj &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; More details at http://msprogrammer.serviciipeweb.ro/2023/05/08/file-to-csharp-const/ More Roslyn Source Code Generators You can find more RSCG with examples at Roslyn Source Code Generators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#about","content":" note Add files as C# consts  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#example-source-csproj-source-files","content":" CSharp ProjectProgram.csdata.gen.txt This is the CSharp Project that references RSCG_Utils &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscgutils&quot; Version=&quot;2023.514.835&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;data.gen.txt&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  MyAdditionalFiles.data.gen.txt.cs public static partial class MyAdditionalFiles { //https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/raw-string public const string data_gen_txt = &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; This is a data That you will retrieve as C# const &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;; }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#download-example-net--c","content":" tip Download Example project RSCG_Utils   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_Utils​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#share-rscg_utils","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_Utils  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_Utils by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"RSCG_AMS by Ignat Andrei","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_AMS","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#info","content":" info Name: RSCG_AMS This package lets you put record the commit , date , and more for your software . Author: Ignat Andrei NuGet:https://www.nuget.org/packages/RSCG_AMS/ You can find more details at https://github.com/ignatandrei/RSCG_AMS Source: https://github.com/ignatandrei/RSCG_AMS  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#original-readme","content":" note RSCG_AMS a Roslyn Source Code Generator for About My Software You will obtain ( See online at https://netcoreblockly.herokuapp.com/ams ) How to use​ For Console or DLL​ Add to the csproj 2023.5.21.1551 &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AMS_Base&quot; Version=&quot;2023.5.21.1551&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_AMS&quot; Version=&quot;2023.5.21.1551&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; And access like this: var amsAll = AboutMySoftware.AllDefinitions; foreach (var amsKV in amsAll) { var ams = amsKV.Value; Console.WriteLine($&quot;{amsKV.Key}.{nameof(ams.AssemblyName)} : {ams.AssemblyName}&quot;); Console.WriteLine($&quot;{amsKV.Key}.{nameof(ams.DateGenerated)} : {ams.DateGenerated}&quot;); Console.WriteLine($&quot;{amsKV.Key}.{nameof(ams.CommitId)} : {ams.CommitId}&quot;); Console.WriteLine($&quot;{amsKV.Key}.{nameof(ams.RepoUrl)} : {ams.RepoUrl}&quot;); } For Web applications​ Add to the csproj &lt;PackageReference Include=&quot;AMSWebAPI&quot; Version=&quot;2023.5.21.1551&quot; /&gt; &lt;PackageReference Include=&quot;AMS_Base&quot; Version=&quot;2023.5.21.1551&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_AMS&quot; Version=&quot;2023.5.21.1551&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; And in the Startup.cs put //above the namespace : using AMSWebAPI; app.UseEndpoints(endpoints =&gt; { endpoints.MapControllers(); endpoints.UseAMS(); }); The access /ams/all ( for json) or /ams/index ( for html) Adding releases on date​ For adding releases between dates use the following codes: using AMS_Base; [assembly:VersionReleased(Name=&quot;PreviousReleases&quot;,ISODateTime =&quot;2022-03-31&quot;,recordData = RecordData.Merges)] [assembly: VersionReleased(Name = &quot;WithVersioning&quot;, ISODateTime = &quot;2022-04-02&quot;, recordData = RecordData.Merges)] [assembly: AMS_Base.VersionReleased(Name = &quot;FutureRelease&quot;, ISODateTime = &quot;9999-04-16&quot;, recordData = AMS_Base.RecordData.Merges)] Detecting that you are in a CI build​ Put into the .csproj &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; In the obj folder see the GeneratedX folder, then AMS folder, than AMS.AMSVersion folder, then edit the .cs file with notepad you will see something like public class XAboutMySoftware_digits Please see what are the digits In your code put someething like this bool IsInCI = new XAboutMySoftware_digits().IsInCI; builder.Services.AddDbContextFactory&lt;ApplicationDBContext&gt;( options =&gt; { if (IsInCI) { var cn = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;); options.UseSqlServer(cn); } else { var cn = &quot;Data Source=Tilt.db&quot;; options.UseSqlite(cn); } } ) ; Modifying the subject​ Add to the csproj the following &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;AMSMerge&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;AMSMerge&gt;AMSInterpreter.MergeAnalyzer&lt;/AMSMerge&gt; &lt;/PropertyGroup&gt; and add the following code to a class public static string MergeAnalyzer(string RepoUrl,string CommitId, string Author, DateTime ReleaseDate, string Subject) { try { /*{ //modify the subject string regex = @&quot;^Merge\\ pull\\ request\\ \\#(?&lt;issueID&gt;\\d+)\\ from\\ (?&lt;branch&gt;.+?)$&quot;; RegexOptions options = RegexOptions.Multiline; string input = Subject; MatchCollection matches = Regex.Matches(input, regex, options); foreach (Match match in matches) { return $&quot;Issue ID: {RepoUrl}/issues/{match.Groups[&quot;issueID&quot;].Value} branch: {match.Groups[&quot;branch&quot;].Value}&quot;; ; } return Subject; }*/ } catch (Exception ex) { return $&quot;{CommitId} {ex.Message}&quot;; } } Diagnostics​ //TODO: Add more explanations here &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\AMS\\AMS.csproj&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;ProjectReference Include=&quot;..\\AMS_Base\\AMS_Base.csproj&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;AMSMerge&quot; /&gt; &lt;CompilerVisibleProperty Include=&quot;FakeWarningForDiagnostics&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;FakeWarningForDiagnostics&gt;true&lt;/FakeWarningForDiagnostics&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;AMSMerge&gt;AMSInterpreter.MergeAnalyzer&lt;/AMSMerge&gt; &lt;/PropertyGroup&gt; CI settings​ For GitLab: For GitHub actions: steps: - uses: actions/checkout@v3 with: fetch-depth: 0 How it is built​ The AMS_Base project / nuget is containing the definition The RSCG_AMS project / nuget generates the code for having , in CI , the C# class with the commit / Repo / date / other details. The AMSWebAPI project / nuget generates the code for endpoints : /ams/index.html and /ams/all ( for json ) See more at http://msprogrammer.serviciipeweb.ro/category/ams/ TBD:​ More about https://github.com/ignatandrei/RSCG_AMS/issues/27 &lt;AMSGitArgs&gt;log --merges --pretty='%an|%ai|%H|%s&lt;/AMSGitArgs&gt; More about Angular - to display ams - see src/Angular More Roslyn Source Code Generators You can find more RSCG with examples at Roslyn Source Code Generators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#about","content":" note Automatically registering the version, ci, commit id  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#example-source-csproj-source-files","content":" CSharp ProjectProgram.csglobals.cs This is the CSharp Project that references RSCG_AMS &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;AMS_Base&quot; Version=&quot;2023.5.21.1551&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_AMS&quot; Version=&quot;2023.5.21.1551&quot; ReferenceOutputAssembly=&quot;false&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RSCG_AMSDemo.cs using System; using AMS_Base; namespace RSCG_AMSDemo { /// &lt;summary&gt; /// this is the About My Software for 828469749970839076110119122 /// &lt;/summary&gt; public class XAboutMySoftware_828469749970839076110119122 :AboutMySoftware { /// &lt;summary&gt; /// starts when this module is loaded and /// add the AMS tot the /// &lt;/summary&gt; [System.Runtime.CompilerServices.ModuleInitializer] public static void Add_AboutMySoftware_828469749970839076110119122(){ AboutMySoftware.AddDefinition(&quot;RSCG_AMSDemo&quot;,new XAboutMySoftware_828469749970839076110119122()); } /// &lt;summary&gt; /// constructor /// for AMS 828469749970839076110119122 /// &lt;/summary&gt; public XAboutMySoftware_828469749970839076110119122(){ AssemblyName =&quot;RSCG_AMSDemo&quot; ; DateGenerated = DateTime.ParseExact(&quot;20250724044122&quot;, &quot;yyyyMMddHHmmss&quot;, null); CommitId = &quot;not in a CI run&quot; ; RepoUrl =&quot;https://ignatandrei.github.io/RSCG_AMS/runtimeMessages/NotFound.md&quot; ; CISourceControl = &quot;not in a CI run&quot; ; SourceCommit = &quot;https://ignatandrei.github.io/RSCG_AMS/runtimeMessages/NotFound.md&quot; ; Authors= &quot;&quot;; Version= &quot;&quot;; EnvironmentVars =&quot;;User_TMP;User_OneDriveConsumer;User_Path;User_TEMP;User_OneDrive;Process_windir;Process_CommonProgramW6432;Process_TEMP;Process_ProgramData;Process_PROCESSOR_ARCHITECTURE;Process_CommonProgramFiles;Process_MSBuildLoadMicrosoftTargetsReadOnly;Process_HOMEPATH;Process_ACProArtSvcPort;Process_ProgramW6432;Process_DOTNET_CLI_TELEMETRY_SESSIONID;Process_SystemDrive;Process_SystemRoot;Process_WSLENV;Process_DriverData;Process_MSBUILDFAILONDRIVEENUMERATINGWILDCARD;Process_POWERSHELL_DISTRIBUTION_CHANNEL;Process_LOCALAPPDATA;Process_LOGONSERVER;Process_APPDATA;Process_PROCESSOR_IDENTIFIER;Process_ProgramFiles;Process_WT_SESSION;Process_OS;Process_TMP;Process_OneDrive;Process_HOMEDRIVE;Process_USERDOMAIN;Process_PUBLIC;Process_ComSpec;Process_PSModulePath;Process_MSBuildSDKsPath;Process_ProgramFiles(x86);Process_SESSIONNAME;Process_MSBUILDUSESERVER;Process__MSBUILDTLENABLED;Process_PATHEXT;Process_USERDOMAIN_ROAMINGPROFILE;Process_PROCESSOR_REVISION;Process_USERPROFILE;Process_ALLUSERSPROFILE;Process_PROCESSOR_LEVEL;Process_COMPUTERNAME;Process_Path;Process_USERNAME;Process_MSBuildExtensionsPath;Process_DOTNET_HOST_PATH;Process_CommonProgramFiles(x86);Process_OneDriveConsumer;Process_NUMBER_OF_PROCESSORS;Process_WT_PROFILE_ID;Machine_TEMP;Machine_PROCESSOR_ARCHITECTURE;Machine_PROCESSOR_REVISION;Machine_POWERSHELL_DISTRIBUTION_CHANNEL;Machine_ComSpec;Machine_PSModulePath;Machine_PATHEXT;Machine_ACProArtSvcPort;Machine_DriverData;Machine_USERNAME;Machine_windir;Machine_NUMBER_OF_PROCESSORS;Machine_PROCESSOR_LEVEL;Machine_PROCESSOR_IDENTIFIER;Machine_TMP;Machine_Path;Machine_OS&quot;; User = &quot;ignat&quot;; IsInCI=false; { var v=new VersionReleased(); v.Name = &quot;FutureRelease&quot; ; v.ISODateTime=DateTime.ParseExact(&quot;99990416&quot;,&quot;yyyyMMdd&quot;,null); { var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6cadf69e7812f243cb0c50f49c64aca303475459&quot;; rd.Subject = &quot;Merge pull request #372 from ignatandrei/ReflectionIT.ComparisonOperatorsGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250528&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;2f47cc89cc4d1003efa65684a3fa631f747f79f5&quot;; rd.Subject = &quot;Merge pull request #365 from ignatandrei/zlinq&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250528&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;727237a1675f3a3c5d39716d083f626f0f48cf1e&quot;; rd.Subject = &quot;Merge pull request #363 from ignatandrei/NativeObjects&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250402&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;4fe8d3b066502a77557765755fde613ddc287a7f&quot;; rd.Subject = &quot;Merge pull request #362 from ignatandrei/CSharpGeneratorAnalyzerTest&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250402&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;69ba3487315daa886b894b6f11e70d72307d016e&quot;; rd.Subject = &quot;Merge pull request #361 from ignatandrei/PMart.Enumeration&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250325&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;69c167895f4695eb43fc7240a26d9bbf4ea11aa2&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250324&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;21b27256e5a951c50c191b502e1c331153e99c90&quot;; rd.Subject = &quot;Merge pull request #359 from ignatandrei/MemberAccessor&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250324&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;aeb3321e3e879916e29986b967397172e8d21b41&quot;; rd.Subject = &quot;Merge pull request #358 from ignatandrei/StepwiseBuilderGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250324&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6d89d3d97e5d1721f17e1c00083291f1306cbc56&quot;; rd.Subject = &quot;Merge pull request #357 from ignatandrei/356-httpsgithubcomtaraskovalenkoentitylengthsgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250219&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ef1df7ed94ae964d47a1b15e57088cd383b9536a&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250218&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;3167efa3445433894ba3d27ccb7165b945fa250b&quot;; rd.Subject = &quot;Merge pull request #354 from ignatandrei/RSCG_CompositeProvider&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250218&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;92250ab71fb91a7cdde886f13d3e1d4e09da2461&quot;; rd.Subject = &quot;Merge pull request #353 from ignatandrei/349-httpsgithubcomipjohnsondependencymodules&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6564afa4766e5c517eefc16183b79d893aeca3cf&quot;; rd.Subject = &quot;Merge branch 'main' into 349-httpsgithubcomipjohnsondependencymodules&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;fb44f6423695af32ab20bcc8920e56e3e797033d&quot;; rd.Subject = &quot;Merge pull request #352 from ignatandrei/351-httpsgithubcomconnorivymockme&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9b940b93346ae788f4749f1c583dfc120197897e&quot;; rd.Subject = &quot;Merge pull request #348 from ignatandrei/NullObject&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250121&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;94104c202c607a526657f27a7ed22444c79b4bfa&quot;; rd.Subject = &quot;Merge pull request #347 from ignatandrei/Larcanum.GitInfo&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20250118&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ef42b9d39956f0c72eae520dc76623a409d32b1a&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241223&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a0a15b980f215ec25ebb8ae897ca61bb82568076&quot;; rd.Subject = &quot;Merge pull request #344 from ignatandrei/Pure.DI&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241223&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;3859435334a35f3d3ae779b97e1865f06e62be87&quot;; rd.Subject = &quot;Merge pull request #342 from ignatandrei/341-constructorgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241221&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;40b0dd883c6813a547c33c69a0f17663e9596115&quot;; rd.Subject = &quot;Merge pull request #340 from ignatandrei/valuify&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241220&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a228abe3e56b291a5e9653ec3beee1a77e7d3be3&quot;; rd.Subject = &quot;Merge pull request #339 from ignatandrei/Equatable.Generator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;883108b005de69963a3c7eba15328294aaf2c0b2&quot;; rd.Subject = &quot;Merge pull request #338 from ignatandrei/337-httpsgithubcomrosslightdarpbinaryobjects&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241214&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a966c8a12cafd67d83970a007c0ec50e2a0ea096&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241214&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f42fff8cccae1113d13aecf62d998402af6c953c&quot;; rd.Subject = &quot;Merge pull request #336 from ignatandrei/335-httpsgithubcomanderssonpeterdolly&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241214&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5e16e5c3f702c884b7cfaf1db5b7c8802c56081a&quot;; rd.Subject = &quot;Merge pull request #333 from ignatandrei/Dapper.AOT&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241213&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9d20748b45ceab865ac9574cd1b7387c81035449&quot;; rd.Subject = &quot;Merge pull request #332 from ignatandrei/Microsoft.Windows.CsWin32&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241202&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a7008d8d7b2ef18280c2f01a51e904720964333f&quot;; rd.Subject = &quot;Merge pull request #329 from ignatandrei/328-httpsgithubcomimmediateplatformimmediateapis&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241118&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9272a073e16abb55477423a7ef86a5cc3d57c9c3&quot;; rd.Subject = &quot;Merge pull request #326 from ignatandrei/Hsu.Sg.FluentMember&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241116&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d0ee5781d8aa4aa4ad56d5ba48944a0937d5f6ca&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241115&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;537d05b93a222c08a2390f0d7112037979105b5b&quot;; rd.Subject = &quot;Merge pull request #324 from ignatandrei/323-httpsgithubcomcredfetocredfeto-version-constants-generator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241115&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;92a910eb0ade76240350c10c9aa90875b9479ae1&quot;; rd.Subject = &quot;Merge pull request #322 from ignatandrei/PolyType&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241111&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0f508f4ad1195e7640ac77a0942ac33ebdae0d31&quot;; rd.Subject = &quot;Merge pull request #321 from ignatandrei/320-httpsgithubcomdatacuteembeddedresourcepropertygenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241110&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;20c8400745cfc9a4d32c626b448372fd3f3bc143&quot;; rd.Subject = &quot;Merge pull request #319 from ignatandrei/rscg_queryables&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241110&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c23dc01d09efe053d7b8cd6df4a2d4557dfd1404&quot;; rd.Subject = &quot;Merge pull request #317 from ignatandrei/316-razorslices&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241028&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9d432edec0a632ac802315b7ca35bc3e532ae9f9&quot;; rd.Subject = &quot;Merge pull request #315 from ignatandrei/313-typedsignalr&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241027&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;858c3b5a4f815d95461154b08033c06259585566&quot;; rd.Subject = &quot;Merge pull request #311 from ignatandrei/MinimalHelpers.Routing.Analyzers&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20241021&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;7d60ec2e0aaffa3a74b60d9f160fc6be97a2de1f&quot;; rd.Subject = &quot;Merge pull request #303 from ignatandrei/302-immediatehandlers&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240923&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d50dab7ca83ffc49e0983e33c59e92a7bcb8aff7&quot;; rd.Subject = &quot;Merge pull request #301 from ignatandrei/300-dusharp&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240918&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;61c7c7abc9cf9dd220b4e06a092ec6e70d86b162&quot;; rd.Subject = &quot;Merge pull request #298 from ignatandrei/297-lightweightobjectmapper&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240918&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;7c0b4cf2784c696841d5d06130338041cbf04768&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240918&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;4f21390a04617fc1e17f05457c58268dd418d19c&quot;; rd.Subject = &quot;Merge pull request #296 from ignatandrei/295-tyopes&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240918&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0ad2fd0a116042f2b6c83400919eccad082cd34b&quot;; rd.Subject = &quot;Merge pull request #292 from ignatandrei/Sera.Union&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240829&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5ca0ae17d3354ac87db1fd74d7171057f761dcf9&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240827&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;23c63be52e53ddf78e206aa4d3704af3fbc387e8&quot;; rd.Subject = &quot;Merge pull request #290 from ignatandrei/RSCG_NameGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240826&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e26af0a741dbd2c1abed708736ab1145eab91395&quot;; rd.Subject = &quot;Merge pull request #289 from ignatandrei/Coplt.Dropping&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240823&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e029172db2624ae8a9e11bf2cb01b026ee54e3ab&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240811&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e24d84c372452ddbe102ba31baa92b73f8e53042&quot;; rd.Subject = &quot;Merge pull request #287 from ignatandrei/286-fluentify&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240811&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;b88f6ae6b9cd0871fdfa0e21554ac129b850a1d6&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240811&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;69fa4faa5a9d2ec29558b8bc619593dd776d87e1&quot;; rd.Subject = &quot;Merge pull request #285 from ignatandrei/284-rscg_diagram&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240811&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;4853af2b70f6a43998f33828c66fac8628cf90d5&quot;; rd.Subject = &quot;Merge pull request #283 from ignatandrei/282-servicescan&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240719&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5de05c7f9ac5bc31fdb888c3c70cc5c2ac9b21fd&quot;; rd.Subject = &quot;Merge pull request #281 from ignatandrei/ThisAssembly.Strings&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240719&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;b44a7c19a761914ffe05c6906667c011d517ef5a&quot;; rd.Subject = &quot;Merge pull request #280 from ignatandrei/ThisAssembly.Metadata&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240719&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c5fad0208cbb1c3d7f543af09967cf224fe6d1fc&quot;; rd.Subject = &quot;Merge pull request #279 from ignatandrei/278-httpsgithubcompeksprobuildinformationgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240718&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;51a6dd67bbe091af607870fd80a52ea54d249e47&quot;; rd.Subject = &quot;Merge pull request #277 from ignatandrei/ThisAssembly.Constants&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240718&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5baf684639300a4f9bb0b65b5d7d5d1fbbe03c63&quot;; rd.Subject = &quot;Merge pull request #276 from ignatandrei/JKToolKit.TemplatePropertyGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240718&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f1f2769623dadb2b37a39297716a83a81749579f&quot;; rd.Subject = &quot;Merge pull request #275 from ignatandrei/RSCG_Formattable&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240711&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ecf4e6026fc064087f4fdf21635541ad7647f35e&quot;; rd.Subject = &quot;Merge pull request #274 from ignatandrei/yang&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240709&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;62dbeddb74d032c5ac837103e1394d1b678bcd5a&quot;; rd.Subject = &quot;Merge pull request #272 from ignatandrei/266-depso&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240629&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;2c0fd7d7bc090e3d71e80ff63f5f78eb966c34e6&quot;; rd.Subject = &quot;Merge pull request #271 from ignatandrei/267-factorygenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240628&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c15ff6beab49b37eb9c5c83bde83f960c34f6978&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into 267-factorygenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240628&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;728d5cb0db08d5dd7235a49f223c338cc61d6da7&quot;; rd.Subject = &quot;Merge pull request #270 from ignatandrei/269-httpsgithubcomsteventhuriottablestorage&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240619&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d1963618e3789700e9e48a72091abbd10c3ddf52&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240512&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6383097a568f7c4998cbd5e775f696e8d420c1dc&quot;; rd.Subject = &quot;Merge pull request #264 from ignatandrei/263-httpsgithubcomaabsactorsrcgen&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240511&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;fb4d9538c7a07b994f914845e681b505bd8393d1&quot;; rd.Subject = &quot;Merge pull request #262 from ignatandrei/261-httpsgithubcomszymonhaluchamineralsautomixins&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240509&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;df847eeb4e9d7e713b7697cee6a0198f24c23dd6&quot;; rd.Subject = &quot;Merge pull request #260 from ignatandrei/259-thisclass&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240508&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;24f6fce888bb4dd478433f59c11597529d91067c&quot;; rd.Subject = &quot;Merge pull request #258 from ignatandrei/257-rossleanstringificationgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240503&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;89e9565c149ba2d5d5f26a633b5f5c249673dd5c&quot;; rd.Subject = &quot;Merge pull request #256 from ignatandrei/250-httpsgithubcomszymonhaluchamineralsautointerfacesissues1issuecomment-2041789529&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240501&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c3d56989667f2b1dfe5ab5fbf4bb38b0b8056dc6&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into 250-httpsgithubcomszymonhaluchamineralsautointerfacesissues1issuecomment-2041789529&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240501&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;8c55de71376bb026d7a252c159c7ae65f75f9510&quot;; rd.Subject = &quot;Merge pull request #255 from ignatandrei/MinimalApis.Discovery&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240501&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9de9bad69ab972bac5e86d9b5d90969182b66edd&quot;; rd.Subject = &quot;Merge pull request #254 from ignatandrei/253-bitskit&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240430&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;dcaad7befdceb0e433a2eac35c8ee801f04a5610&quot;; rd.Subject = &quot;Merge pull request #247 from ignatandrei/246-httpsgithubcomvicosanzstronglytypeduid&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240423&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f95fe9715ddf8f7c6fb9833b124f3d59974da82d&quot;; rd.Subject = &quot;Merge pull request #245 from ignatandrei/244-httpswwwnugetorgpackagesfusionreactorsourcegeneratorsenumextensions&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240422&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ce7ce01c2304e20e3fcd8ee51125cbd3451d4b46&quot;; rd.Subject = &quot;Merge pull request #241 from ignatandrei/240-union_source_generator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240408&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;fc1d9900c7dd6cf02233b5f9d78bd6c891e332fa&quot;; rd.Subject = &quot;Merge pull request #239 from ignatandrei/238-enumutilities&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240408&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;fd98656799aac17ee831583493b8ddc7f7743580&quot;; rd.Subject = &quot;Merge pull request #237 from ignatandrei/MSTest&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240407&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;8d17c0673f3473b46993d6171194269b5cf3263a&quot;; rd.Subject = &quot;Merge pull request #236 from ignatandrei/CCC&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240407&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c83a39c4a6c74d92a511f297d0effd6570926138&quot;; rd.Subject = &quot;Merge pull request #232 from ignatandrei/AutoCompose&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240316&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ec09e2f0a67bf99bcb2e646847df539836c6b75a&quot;; rd.Subject = &quot;Merge branch 'main' into AutoCompose&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240316&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ef0139061acb62d681a32057bf7f96f0c0bf6d22&quot;; rd.Subject = &quot;Merge pull request #231 from ignatandrei/230-httpsgithubcomdragonslordtypeutilities&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240309&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f72e3b3c06ce96e3debd4a48d78d3472f2f5ef0e&quot;; rd.Subject = &quot;Merge pull request #229 from ignatandrei/228-linqgen&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240302&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e77f0e994acb5cc759014464e5baa2ccdad986c2&quot;; rd.Subject = &quot;Merge pull request #227 from ignatandrei/226-autoinvokegenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240301&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9f08c653be4032b7331dfa8815df437f78f3a06e&quot;; rd.Subject = &quot;Merge pull request #225 from ignatandrei/224-architectdomainmodeling&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240301&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;dff3acf12f3a2d9a78de402f7df6754b63428f1b&quot;; rd.Subject = &quot;Merge pull request #223 from ignatandrei/222-literal&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240301&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6e316e55189b567cc8cc6b3d97fe8743e307826f&quot;; rd.Subject = &quot;Merge pull request #221 from ignatandrei/220-autospectre&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240228&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;de0226195a84d0d189f929380342305f43ce4795&quot;; rd.Subject = &quot;Merge pull request #218 from ignatandrei/217-lingogen&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240226&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9f44d16218e51f735a05bc47daa347cfb9109dc9&quot;; rd.Subject = &quot;Merge pull request #216 from ignatandrei/215-httpsgithubcomantelcatautogen&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240226&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;80c90b0864fff51f732a6f454d47e09c17760676&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240224&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5f23fbbe205b1d2c0a1a78539aa590c8905454ef&quot;; rd.Subject = &quot;Merge pull request #214 from ignatandrei/213-plantumlclassdiagramgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240218&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;3888b318e37966b13cf125f8b26f77bbc44c5176&quot;; rd.Subject = &quot;Merge pull request #212 from ignatandrei/CopyTo&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;b564258f01d549e9adf8517e4c13c2d42d8c6f10&quot;; rd.Subject = &quot;Merge pull request #211 from ignatandrei/UnionsGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c89d175b900a522977356ff677ee486842d2ac9f&quot;; rd.Subject = &quot;Merge pull request #210 from ignatandrei/209-navitskicrystalized&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5609cf339ffa16a69af43d86e836568c7921c9de&quot;; rd.Subject = &quot;Merge pull request #208 from ignatandrei/207-sourcedepend&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a3f143c8d94722147b633101cc6b74e89253a3d5&quot;; rd.Subject = &quot;Merge pull request #206 from ignatandrei/205-optiontostringgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;abe7d4dc75c2ee2c2aa8de93ce9153693950f7b2&quot;; rd.Subject = &quot;Merge pull request #203 from ignatandrei/192-cachesourcegenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;35564d014a2f3a803953c394e03e9b09cafa4e6a&quot;; rd.Subject = &quot;Merge pull request #202 from ignatandrei/196-jab&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e208529727ebeb786bfeb560215c6fa4a4576ca8&quot;; rd.Subject = &quot;Merge branch 'main' into 196-jab&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d9d87ff86fc46c028d8cfc336c90e875ae89b3c9&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c0f4095df7f3f7345ccce56d65f82245362f13ed&quot;; rd.Subject = &quot;Merge pull request #200 from ignatandrei/195-funicular-switch&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;be87ff1ac1e0847b2fe846f2ff168056aa9f45a4&quot;; rd.Subject = &quot;Merge branch 'main' into 195-funicular-switch&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d3d0dac95ad75cac671c30c0b8b0cc82c35f2ccd&quot;; rd.Subject = &quot;Merge pull request #198 from ignatandrei/193-command-line&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240216&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;3515c737771c60af21f10499be357b7bea61f5df&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240209&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1b221a6c163f174199ea19fb2908f84dad7e8ea3&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240207&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d325e8b77aefae6acc9855a90e34456fa415baae&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240204&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;7a2742a567c815677310770bee7ab4e85dceb46e&quot;; rd.Subject = &quot;Merge pull request #188 from ignatandrei/net_automatic_interface&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240204&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;383643f124abadb68cace5d6ab8f9b6fbea79d9a&quot;; rd.Subject = &quot;Merge pull request #186 from ignatandrei/WIAD&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240203&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0925b55d5a1dabfd079e2f92a97873a91924b0b7&quot;; rd.Subject = &quot;Merge pull request #185 from ignatandrei/184-weave&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240203&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6cd472c2ed1dcc4191917a190e725869feb9d43f&quot;; rd.Subject = &quot;Merge pull request #183 from ignatandrei/182-notnot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240203&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d4253ed2d8e5f79a5c3a5af0d941145a9a4f7761&quot;; rd.Subject = &quot;Merge pull request #181 from ignatandrei/180-hangfirejob&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240203&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;676ba9b58dae22de9478689fa49aafe78aa45eee&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240125&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;4dbe0a5057490e69cfc86876e59d3f7301b7ba33&quot;; rd.Subject = &quot;Merge pull request #177 from ignatandrei/Blazorators&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240121&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ce494f74c9044a59eb06477f01fde5be11ed1faa&quot;; rd.Subject = &quot;Merge pull request #176 from ignatandrei/Chorn.EmbeddedResourceAccessGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240120&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ffbd65d8e5a660b7a0b59f49b7339d416d84a638&quot;; rd.Subject = &quot;Merge pull request #175 from ignatandrei/BuildInfo&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240120&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1a75fe4c00afa005ba6a0f87101fbf22ce239420&quot;; rd.Subject = &quot;Merge pull request #174 from ignatandrei/Class2Interface&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240119&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;3d0d47ac60c0712f7eaa6047c200219a7b3f5da0&quot;; rd.Subject = &quot;Merge pull request #173 from ignatandrei/funcky-discriminated-union&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240119&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1fd1d86e86ea829cb8f822f24b5490485a1634a1&quot;; rd.Subject = &quot;Merge pull request #172 from ignatandrei/DP&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240112&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9daa6fb5369a93e04134108244ca6afaa7b0572a&quot;; rd.Subject = &quot;Merge pull request #171 from ignatandrei/HsuSgSync&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240112&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;2a784d845d546cdabf677f55f681df2e29e41045&quot;; rd.Subject = &quot;Merge pull request #169 from ignatandrei/CopyCat&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240110&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9094531355a654c9812fa42230b1e7aa4cc987cc&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240108&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;805f583a1d27d80346218343c5a6b33ca98da103&quot;; rd.Subject = &quot;Merge pull request #167 from ignatandrei/mocklis&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20240103&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;251d56117a79e0c01926a1d303e7308f1397607a&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231230&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9be5ebf1e7101372a426e6bc30af709ea2a57329&quot;; rd.Subject = &quot;Merge pull request #166 from ignatandrei/RSCG_UtilityTypes&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231223&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;4a628ea4ce0bacb187a2f9254234781c03adc778&quot;; rd.Subject = &quot;Merge pull request #161 from ignatandrei/160-logtelemetry&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231130&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c0a1a456d1fa457bf2a4263b39d3c57d979c71ed&quot;; rd.Subject = &quot;Merge pull request #159 from ignatandrei/158-razor-sdk&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231130&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;2cdb15712a72d956792a881de309fb5f3d415835&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231120&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1996f03fe321e48d3737947b24a1736825385f0f&quot;; rd.Subject = &quot;Merge pull request #157 from ignatandrei/ComImport&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231118&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c742ddb501960e10859a1445f06e4a0f60c1dbce&quot;; rd.Subject = &quot;Merge pull request #156 from ignatandrei/Microsoft.AspNetCore.Http.RequestDelegateGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231117&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;76e8ca06f133ba1d8d5aa0da1ccc10c614b94f82&quot;; rd.Subject = &quot;Merge pull request #155 from ignatandrei/Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231117&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;7d8ce2b3c5f535965f84be891cd05f4a615b2a94&quot;; rd.Subject = &quot;Merge pull request #154 from ignatandrei/Microsoft.Extensions.Options.SourceGeneration&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231116&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;359f0a6204becf12682b7fc5b2a781335ef4a9bd&quot;; rd.Subject = &quot;Merge pull request #153 from ignatandrei/143-biwenautoclassgen&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231115&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;2554ff980c2868116f6d7790ad2f476431b39714&quot;; rd.Subject = &quot;Merge branch 'main' into 143-biwenautoclassgen&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231115&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;8fd01a9e0f327e90adb423863573e81e6ac6abe5&quot;; rd.Subject = &quot;Merge pull request #152 from ignatandrei/151-primaryparameter&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231115&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;2045f58954e0f2953e2fd06d950a8b208954138d&quot;; rd.Subject = &quot;Merge pull request #150 from ignatandrei/142-json-converter-source-generator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231108&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;30bbb1b56950a4aa35a8090995f120bee7977f63&quot;; rd.Subject = &quot;Merge branch 'main' into 142-json-converter-source-generator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231108&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;cfd13de1b38005d9d8ff82283f87faf0bc4731d0&quot;; rd.Subject = &quot;Merge pull request #149 from ignatandrei/148-nsourcegeneratorsuniontypes&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231107&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;61a25a2165d2465fb4bf8388e3192855b5087f61&quot;; rd.Subject = &quot;Merge pull request #147 from ignatandrei/146-autoconstructor&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231106&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0620d74db7edffe52511e0ecfcf5bba463ba43fe&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231106&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ee7b1ee0a733752d080ef6d00a5e934864a7e6a1&quot;; rd.Subject = &quot;Merge pull request #145 from ignatandrei/144-dudnet&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231106&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;b75ea1f3510e4f9a91fe626f5366c086d803f959&quot;; rd.Subject = &quot;Merge pull request #141 from ignatandrei/MinimalApiBuilder&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231027&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;333bd76c980360fdf0271c933eb89802ac447531&quot;; rd.Subject = &quot;Merge pull request #140 from ignatandrei/139-dynamicsmapper&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231022&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;06a2886c584a1fa4b19101c06afb81fd768b87d1&quot;; rd.Subject = &quot;Merge branch 'main' into 139-dynamicsmapper&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231021&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f685f9230214577474d377136b0cdb268400bbca&quot;; rd.Subject = &quot;Merge pull request #137 from ignatandrei/StaticReflection&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231014&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0533bc9b02cff143d5d0a0726a7253cbe7036293&quot;; rd.Subject = &quot;Merge pull request #136 from ignatandrei/124-credfetoenumerationsourcegeneration&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231008&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;366ff79c2d280829a1a02ae5d17eb00f5d5309d4&quot;; rd.Subject = &quot;Merge branch 'main' into 124-credfetoenumerationsourcegeneration&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231008&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;49effaeec5a1e501afea460f3a478be30fcd556e&quot;; rd.Subject = &quot;Merge pull request #135 from ignatandrei/134-meziantoupolyfill&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231007&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;8e040372bb5de435e80469f0f90969fc2a6a5c9f&quot;; rd.Subject = &quot;Merge pull request #133 from ignatandrei/132-rscg_templating&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231007&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;176e11e878398c1d469839c76bd226d56cd0c960&quot;; rd.Subject = &quot;Merge pull request #131 from ignatandrei/130-disposablehelpers&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231005&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c554b763db6cf1eef2b89bd227eb00d46756f0cb&quot;; rd.Subject = &quot;Merge pull request #129 from ignatandrei/MagicMap&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231005&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0ba13e28a4c855f70d5ee4376021f19039c39157&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;112ca007e09037bd9afc62d3b8d6e04860cfe96f&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;6638f0690946b5fd83b435bd72a6b5f6f2d86ba9&quot;; rd.Subject = &quot;Merge pull request #120 from ignatandrei/119-idisposablegenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;db6cb6dc5a1490d85ee7a0fba1ecaeff0d71f96c&quot;; rd.Subject = &quot;Merge branch 'main' into 119-idisposablegenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9f051359d0cc2c3e4579f11be935f7f73973d9a0&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;78966396ac03148897fbcb9f8f8b71a11be2b60d&quot;; rd.Subject = &quot;Merge pull request #128 from ignatandrei/127-jsonpolymorphicgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c7e7a3499cc60366bdeedd17e56635dbc8ab1fac&quot;; rd.Subject = &quot;Merge pull request #126 from ignatandrei/125-mapto&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231004&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1f0d8d98566697d985014a16649e3a8e81e74a17&quot;; rd.Subject = &quot;Merge pull request #122 from ignatandrei/BuilderGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231003&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;41cdfc8689dfc449e152982456bc9bd4846d81d2&quot;; rd.Subject = &quot;Merge branch 'main' into BuilderGenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231003&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9b8a03bf3b8f5fe8983b85223910fa51b8b2fcf5&quot;; rd.Subject = &quot;Merge pull request #123 from SoftStoneDevelop/updateGedaq&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231003&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a07fb51d95db1ab5bb5163f0a552c3e4b3f4958c&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231002&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a0e442d95c0a763bda2fa12ad849791b7232b2b7&quot;; rd.Subject = &quot;Merge pull request #121 from ignatandrei/Disposer&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231002&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;52a18738361baa9c569d719d6ae3346127d22823&quot;; rd.Subject = &quot;Merge pull request #118 from ignatandrei/117-resxgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231002&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;13920c9ed87c9867508d2179b833cab4b2640da4&quot;; rd.Subject = &quot;Merge pull request #116 from ignatandrei/StringLiteral&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231002&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e27daa439b644bfd86ab1ba64c02c3de61fe0989&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20231001&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;734714e52dbcb60b02bc1433dfac2b4c19f332a0&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230924&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;111b45ca9482ef257b7ff4abf2a88727db3ba6b1&quot;; rd.Subject = &quot;Merge pull request #113 from ignatandrei/111-protobuf&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230924&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;02f71e7b1627be66a585a1a762369b6bbf796eb3&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into 111-protobuf&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230924&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;b697ec81811b3676d46fa4228cd78b74864dbb4e&quot;; rd.Subject = &quot;Merge pull request #110 from ignatandrei/109-saferouting&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230923&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;8df9022da6ba2ccc4fed361b28a327fdd423ce88&quot;; rd.Subject = &quot;Merge pull request #107 from ignatandrei/106-sourcegeneratorhelpercopycode&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230923&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c17a1d0b0742d811b9fc33401a6e8bdb3a1a8262&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230916&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d748ebc43de427c9c17e9d0b7dd4fa9ad739f0ad&quot;; rd.Subject = &quot;Merge pull request #104 from ignatandrei/SameCategory&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230909&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;3d25a38df8cd0a5412163df7bb9642ad1a583543&quot;; rd.Subject = &quot;Merge pull request #103 from ignatandrei/M31.FluentAPI&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230901&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0430d22da35551e42e383a5c476044441ce3b439&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230826&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;cd770cc9199d8c823441024348d339bd070afa2a&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230809&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e57ea5862ec113c8d06dd9dd813d521efe22e25f&quot;; rd.Subject = &quot;Merge pull request #102 from ignatandrei/101-gobie&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230806&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d282cd345392c1952f7d4caffe7ebe848bb2dc4c&quot;; rd.Subject = &quot;Merge pull request #100 from ignatandrei/99-ridge&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230806&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9509375224ed43959ddd6fcfe0056a838a131ce0&quot;; rd.Subject = &quot;Merge pull request #98 from ignatandrei/97-strongly&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230805&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;909eb716f89ff9d0f34e0c5f32a6e6097b091845&quot;; rd.Subject = &quot;Merge pull request #96 from ignatandrei/95-propertychangedsourcegenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230805&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0b75c43b38fd4a30f995abc1514f4c41fb967fc6&quot;; rd.Subject = &quot;Merge pull request #94 from ignatandrei/93-injectio&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230805&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;88bca8504af28d7868fd39c8844c9b56a97b21bc&quot;; rd.Subject = &quot;Merge pull request #92 from ignatandrei/91-nextgenmapper&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230805&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ee65b76791438c0164fe6b604a31c54e57f7fb37&quot;; rd.Subject = &quot;Merge pull request #90 from ignatandrei/89-syncmethodgenerator&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230804&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1e4e918309a87d3579677f2b6e8922c73bfaef33&quot;; rd.Subject = &quot;Merge pull request #88 from ignatandrei/87-spreadcheetah&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230803&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;b8667d76734ccd6a682dda08a40839ed90f501b2&quot;; rd.Subject = &quot;Merge pull request #86 from ignatandrei/85-immutype&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230803&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;63ad10a3952b16bf1b2aee92a352081157a9cd2d&quot;; rd.Subject = &quot;Merge pull request #84 from ignatandrei/83-generatorequals&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230803&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a49e7763706b0ef60069c54bfb382f3c55b917f4&quot;; rd.Subject = &quot;Merge pull request #82 from ignatandrei/81-fastgenericnew&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230803&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a9ff00fdf0b757365270720a7c93bec2246f42b6&quot;; rd.Subject = &quot;Merge pull request #80 from ignatandrei/79-breezy&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230802&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;197414b388b7840d468c2fa7b0792a9a675d2e42&quot;; rd.Subject = &quot;Merge pull request #78 from ignatandrei/77-enumclass&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230802&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;72a552210160cd87ec179a323705f146aba68ada&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230801&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e02cf8b4d605687b5c0c4a92f709d4e950338ddb&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230801&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c031123edb667e2af31b9c046b0546584a074793&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230801&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;37f5f448035925d5f26f390da8c8ae359a98ec2d&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230801&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;722a7821f1e12205f1f1741723763c3cb1e09382&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230731&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e269a4919c55bd07a832853e857f23f2f3459154&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230729&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5de7126c98d4d9f090b5d3d82dcd1eec7535a7c7&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230727&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;91d62dff7142c660fc5046a71c6d1db31a7218ec&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230708&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;0d25e6067e1c49500604d812b0c579344a6f69a6&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230704&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;efd1aa541ad0117edfbb55eda5afc92179debb13&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230521&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e458336035ec3f6c8b2096de21ab6a2a2e4377aa&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230519&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;d4d900aedf110891ff6fd974a4230f3e64fa8fbf&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230519&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;497f016ee38ed84ad46a224af224dcc079b212a3&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230518&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;752c2603c69d068d6f3cc533dea4febb3ffcc490&quot;; rd.Subject = &quot;Merge pull request #60 from ignatandrei/40-httpsgithubcomltrzesniewskirazorblade&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230516&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;85c7e47e29fa4aac1f8bc2451ba3f89938a35e6b&quot;; rd.Subject = &quot;Merge pull request #59 from ignatandrei/35-httpsgithubcomdomn1995dunet&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230516&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;74e4bc7adaf110c80d328b957ae6c302969b427c&quot;; rd.Subject = &quot;Merge pull request #58 from ignatandrei/36-httpsgithubcomdistantcamautoctor&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230516&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e6f03e4eaf45c7edbafd6c888f1cc9eee9295ec7&quot;; rd.Subject = &quot;Merge pull request #57 from ignatandrei/37-httpsgithubcomflavienquickconstructor&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230515&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;01c13b88674c19f18f3229b3be0643e454fdfb5b&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230515&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e559ea3ab9adc9cae60dbc942c811eac1dd51e25&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230515&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;201637618cebc273144a4bfb7211a2055c16e80d&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230514&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;a72f3a36c876def2e6c438c3a3c24abe7ba1db0d&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230514&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c0c54da6c25e12bd886698022ac57f7b11fb8c4c&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230513&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;4c6fbf61eda86bcf2d049462913853ec8c52f1b2&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230513&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;56622984f6dddeca95a0f38f8d0809b96470fdff&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230513&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f0caab198c26eb1a21e8e341d094222f689cd13f&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230512&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;87d3b7833fc8f99d41683fa3fcee088a7adfed85&quot;; rd.Subject = &quot;Merge pull request #54 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230511&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;f68ad7b997593ded5e2ba60f65bf0ac295ae36f3&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230510&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;e5e9d0bbb7428cc1950eda609ce618d1394c9a89&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230509&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;95c1e2325ad41b28848a76c98e3b200aaa908a29&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20230509&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); } this.AddVersion(v);} { var v=new VersionReleased(); v.Name = &quot;WithVersioning&quot; ; v.ISODateTime=DateTime.ParseExact(&quot;20220402&quot;,&quot;yyyyMMdd&quot;,null); { var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c5c219a2a3cb26b8d1a46d632cf2dee54653602c&quot;; rd.Subject = &quot;Merge pull request #23 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20211016&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1b6d21a19e8bc4ec9323d4369b8958d5563b0015&quot;; rd.Subject = &quot;Merge pull request #22 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20211011&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;ignatandrei&quot;; rd.CommitId = &quot;6d47fdc34ac4dc999f2e13fd828cd9f79f3bd41b&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into main&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20211005&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c3778675e5bfbeaa81667ada1fa24a19cf0e1efc&quot;; rd.Subject = &quot;Merge pull request #21 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20211003&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;ea755c59323eefd5c2ff7b2c34220ac5f8dbeaeb&quot;; rd.Subject = &quot;Merge pull request #20 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210901&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1ea5abc7b06c3776fd49a991234d63e141a9d1e4&quot;; rd.Subject = &quot;Merge pull request #19 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210831&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;da6a848014673e96e07f64f00106f050d539142d&quot;; rd.Subject = &quot;Merge pull request #18 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210821&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;5bccff438ec6604d7eb45925a4714276b0b4bf16&quot;; rd.Subject = &quot;Merge pull request #17 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210815&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;17aebf5d69a448572ce4fd831f3dd94d56099956&quot;; rd.Subject = &quot;Merge pull request #16 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210815&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;83e209f09c4511a0e5607925fa730658f0940287&quot;; rd.Subject = &quot;Merge pull request #12 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210807&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;072cfeeda71acb1d84961291e962b4eab90b16a5&quot;; rd.Subject = &quot;Merge pull request #11 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210717&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;9172c92711d71da5e5c6aa8929f8ff6a8ac85b9e&quot;; rd.Subject = &quot;Merge pull request #10 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210625&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;918954a5ac28eb47e041faa90990ffd85a4a3499&quot;; rd.Subject = &quot;Merge pull request #7 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210621&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;16d62359fc7d807ed652fd9b4218b4aa04734d43&quot;; rd.Subject = &quot;Merge pull request #5 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210330&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;ignatandrei&quot;; rd.CommitId = &quot;3b082c0aa0f63effd098a2bad184b03447406ec0&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into main&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210308&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;1a998fa87363c6df6b6d4a09dc514503808d380f&quot;; rd.Subject = &quot;Merge pull request #4 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210308&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;c5fa74a2ad780af288ece391da7a5ac84b06332e&quot;; rd.Subject = &quot;Merge pull request #3 from ignatandrei/imgbot&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210307&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;ignatandrei&quot;; rd.CommitId = &quot;1bedfd1d4cb00f666b94fdaecdd7bd7da2e6a435&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into main&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210302&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;ignatandrei&quot;; rd.CommitId = &quot;3223ba3b8e69fc9e72e34735cc135b39881f7b59&quot;; rd.Subject = &quot;Merge branch 'main' of https://github.com/ignatandrei/RSCG_Examples into main&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210218&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); }{ var rd=new ReleaseData(); rd.Author = &quot;Andrei Ignat&quot;; rd.CommitId = &quot;bea2886eb02f17523a34ff16f475654cb4b24ff4&quot;; rd.Subject = &quot;Merge pull request #1 from ignatandrei/whitesource/configure&quot;; rd.ReleaseDate = DateTime.ParseExact(&quot;20210217&quot;,&quot;yyyyMMdd&quot;,null); v.AddRelease(rd); } this.AddVersion(v);} } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#download-example-net--c","content":" tip Download Example project RSCG_AMS   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_AMS​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#share-rscg_ams","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_AMS  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_AMS by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_AMS#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"RSCG_Utils_Memo by Ignat Andrei","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#info","content":" info Name: RSCG_Utils_Memo Additional files as strings Author: Ignat Andrei NuGet:https://www.nuget.org/packages/rscgutils You can find more details at https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/source-generation Source: https://github.com/ignatandrei/RSCG_Utils  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#original-readme","content":" note RSCG_Utils Roslyn Source Code Generators Utils Usage Additional Files​ Allow you to see additional files directly as C# const. For this, please add some .gen. files to the project. In your csproj &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscgutils&quot; Version=&quot;2023.502.835&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Second.gen.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;first.gen.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;test\\Afirst.gen.txt&quot; /&gt; &lt;AdditionalFiles Include=&quot;sql/**/*&quot; /&gt; &lt;/ItemGroup&gt; In the code //see https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/raw-string string x= MyAdditionalFiles.Second_gen_txt; To debug, you can add into the .csproj &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GeneratedX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; More details at http://msprogrammer.serviciipeweb.ro/2023/05/08/file-to-csharp-const/ Json2Class​ If you have an additional json file, you can have a file from this &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;my.gen.json&quot; /&gt; &lt;/ItemGroup&gt; And you can have from the code var json = System.Text.Json.JsonSerializer .Deserialize&lt;GeneratedJson.my_gen_json&gt;(MyAdditionalFiles.my_gen_json); ArgumentNullException.ThrowIfNull( json ); Console.WriteLine( &quot;:hosts&quot;+json.AllowedHosts ); Memoization of function returns​ Put _MemoPure and the return of the function will be memo-ized public long Test_MemoPure() { Console.WriteLine(&quot;calculating type&quot;); return this.GetType().ToString().GetHashCode(); } public async Task&lt;long&gt; fib(long nr) { await Task.Delay(1000); //Console.WriteLine(&quot;calculated value for &quot; + nr); if (nr &lt;= 1) return 1; if (nr == 2) return 2; return await fib(nr - 1) + await fib(nr - 1); } public async Task&lt;long&gt; fibonacci_MemoPure(long nr) { if (nr &lt;= 1) return 1; if (nr == 2) return 2; await Task.Delay(1000); return await fibonacci(nr - 1) + await fibonacci(nr - 1); } And call fibTest f = new(); Console.WriteLine(&quot;first time :&quot; + f.Test()); Console.WriteLine(&quot;second time :&quot; + f.Test()); Console.WriteLine(DateTime.Now.ToString(&quot;mm_ss&quot;)); Console.WriteLine(&quot;no memo :&quot;+await f.fib(5)); Console.WriteLine(DateTime.Now.ToString(&quot;mm_ss&quot;)); Console.WriteLine(&quot;memo :&quot; + await f.fibonacci(5)); Console.WriteLine(DateTime.Now.ToString(&quot;mm_ss&quot;)); Console.WriteLine(&quot;FAST memo :&quot; + await f.fibonacci(5)); Console.WriteLine(DateTime.Now.ToString(&quot;mm_ss&quot;)); More Roslyn Source Code Generators You can find more RSCG with examples at Roslyn Source Code Generators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#about","content":" note Memo the function result  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#example-source-csproj-source-files","content":" CSharp ProjectProgram.csfib.cs This is the CSharp Project that references RSCG_Utils_Memo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;rscgutils&quot; Version=&quot;2023.914.2016&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DemoRSCG_UtilsMemo_fibTest_fibonacci_MemoPure.csDemoRSCG_UtilsMemo_fibTest_Test_MemoPure.cs using System.Collections.Concurrent; //this is auto-generated by a tool namespace DemoRSCG_UtilsMemo; partial class fibTest { System.Collections.Concurrent.ConcurrentDictionary&lt;Tuple&lt;long &gt; , long&gt; __cache_DemoRSCG_UtilsMemo_fibTest_fibonacci_MemoPure =new System.Collections.Concurrent.ConcurrentDictionary&lt;Tuple&lt;long &gt;, long&gt;(); //True public async Task&lt;long&gt; fibonacci (long nr ){ var key= Tuple.Create(nr); if (__cache_DemoRSCG_UtilsMemo_fibTest_fibonacci_MemoPure.TryGetValue(key, out var result)) return result; //Console.WriteLine($&quot;not in cache, calculating {key}&quot;); var data= await __wrap_fibonacci(key); return __cache_DemoRSCG_UtilsMemo_fibTest_fibonacci_MemoPure.GetOrAdd(key,data); } public async Task&lt;long&gt; __wrap_fibonacci (Tuple&lt;long &gt; args){ return await fibonacci_MemoPure (args.Item1); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#download-example-net--c","content":" tip Download Example project RSCG_Utils_Memo   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_Utils_Memo​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#share-rscg_utils_memo","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_Utils_Memo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_Utils_Memo by Ignat Andrei","url":"/RSCG_Examples/v2/docs/RSCG_Utils_Memo#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"RSCG_Wait by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_Wait","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#info","content":" info Name: RSCG_Wait This package wait for a time and put all global options into a cs file Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_WaitAndOptions/ You can find more details at https://github.com/ignatandrei/RSCG_WaitAndOptions Source: https://github.com/ignatandrei/RSCG_WaitAndOptions  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#original-readme","content":" note RSCG_WaitAndOptions Wait pending compilation and see compiling options This package is just for demo purposes and it is not intended to be used in production code. More details at https://ignatandrei.github.io/RSCG_Examples/v2/docs/GoodPractices How to use Add the Nuget package RSCG_WaitAndOptions to your project and use the following code: &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_Wait_Seconds&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_Wait_Seconds&gt;10&lt;/RSCG_Wait_Seconds&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_WaitAndOptions&quot; Version=&quot;2024.2.24.1940&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; And then compile the code . You will see in obj/GX the code generated And you can access by Console.WriteLine(RSCG_Wait.MyGeneratedCode.DateStart); Console.WriteLine(RSCG_Wait.MyGeneratedCode.SecondsToWait); Console.WriteLine(RSCG_Wait.MyGeneratedCode.DateEnd); Console.WriteLine(RSCG_Wait.OptionsFromBuild.build_property_projectdir);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#about","content":" note Demo for waiting in compilation and show the options of compiling the code  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references RSCG_Wait &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;CompilerVisibleProperty Include=&quot;RSCG_Wait_Seconds&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;RSCG_Wait_Seconds&gt;10&lt;/RSCG_Wait_Seconds&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RSCG_WaitAndOptions&quot; Version=&quot;2024.2.24.1940&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;GenerateDocumentationFile&gt;True&lt;/GenerateDocumentationFile&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GeneratorOptions.g.csWaitGeneratorEnd.g.csWaitGeneratorStart.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool RSCG_Wait. // Runtime Version: 2024.2.24.1940 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ //pragma warning disable CS1591 namespace RSCG_Wait; [global::System.CodeDom.Compiler.GeneratedCode(&quot;RSCG_Wait&quot;, &quot;2024.2.24.1940&quot;)] [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] partial class OptionsFromBuild {//real name: build_property.rootnamespace public static string build_property_rootnamespace =&gt; @&quot;Console_Wait&quot;; //real name: build_property.projecttypeguids public static string build_property_projecttypeguids =&gt; @&quot;&quot;; //real name: build_property.enforceextendedanalyzerrules public static string build_property_enforceextendedanalyzerrules =&gt; @&quot;&quot;; //real name: build_property.rscg_wait_seconds public static string build_property_rscg_wait_seconds =&gt; @&quot;10&quot;; //real name: build_property.targetframework public static string build_property_targetframework =&gt; @&quot;net8.0&quot;; //real name: build_property.targetplatformminversion public static string build_property_targetplatformminversion =&gt; @&quot;&quot;; //real name: build_property.enablecodestyleseverity public static string build_property_enablecodestyleseverity =&gt; @&quot;&quot;; //real name: build_property.invariantglobalization public static string build_property_invariantglobalization =&gt; @&quot;&quot;; //real name: build_property.platformneutralassembly public static string build_property_platformneutralassembly =&gt; @&quot;&quot;; //real name: build_property.effectiveanalysislevelstyle public static string build_property_effectiveanalysislevelstyle =&gt; @&quot;8.0&quot;; //real name: build_property.projectdir public static string build_property_projectdir =&gt; @&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\RSCG_Wait\\src\\Console_Wait\\&quot;; //real name: build_property.enablecomhosting public static string build_property_enablecomhosting =&gt; @&quot;&quot;; //real name: build_property.enablegeneratedcominterfacecomimportinterop public static string build_property_enablegeneratedcominterfacecomimportinterop =&gt; @&quot;&quot;; //real name: build_property._supportedplatformlist public static string build_property__supportedplatformlist =&gt; @&quot;Linux,macOS,Windows&quot;; //real name: build_property.usingmicrosoftnetsdkweb public static string build_property_usingmicrosoftnetsdkweb =&gt; @&quot;&quot;; }//end class//end namespace   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#download-example-net--c","content":" tip Download Example project RSCG_Wait   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_Wait​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#share-rscg_wait","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_Wait  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_Wait by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_Wait#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"RSCG_WebAPIExports by Andrei Ignat","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#info","content":" info Name: RSCG_WebAPIExports Add Excel export to your WebAPI Author: Andrei Ignat NuGet:https://www.nuget.org/packages/RSCG_WebAPIExports/ You can find more details at https://github.com/ignatandrei/RSCG_WebAPIExports/ Source: https://github.com/ignatandrei/RSCG_WebAPIExports/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#original-readme","content":" note RSCG_WebAPIExports Add exports to file to WebAPI ( for the moment, just Excel / xlsx) How to use in WebAPI project​ Add reference to the package in the .csproj &lt;PackageReference Include=&quot;RSCG_WebAPIExports&quot; Version=&quot;2023.8.16.1255&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; /&gt; &lt;!-- &lt;PackageReference Include=&quot;RSCG_WebAPIExports&quot; Version=&quot;2023.8.16.1255&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; /&gt; &lt;PackageReference Include=&quot;ArrayToExcel&quot; Version=&quot;2.2.2&quot; /&gt; --&gt; Then in the WebAPI add using WebApiExportToFile; //code // Add services to the container. //WebApiExportToFile.AddExport(builder.Services); builder.Services.AddExport(); var app = builder.Build(); app.UseExport(); Add to any url : .xlsx ( e.g. for /WeatherForecast put /WeatherForecast.xlsx ) and the excel will be downloaded  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#about","content":" note Generating Excel from WebAPI json array  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#example-source-csproj-source-files","content":" CSharp ProjectProgram.csWeatherForecastController.cs This is the CSharp Project that references RSCG_WebAPIExports &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OpenApi&quot; Version=&quot;7.0.10&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_WebAPIExports&quot; Version=&quot;2023.8.16.1255&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;PackageReference Include=&quot;ArrayToExcel&quot; Version=&quot;2.2.2&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Extensions.g.csmiddlewareExport.methods.g.csMiddlewareExportToFile.g.cs using Microsoft.AspNetCore.Rewrite; namespace WebApiExportToFile; #nullable enable public static partial class Extensions { static partial void AddReturnTypesFromGenerator(); public static IServiceCollection AddExport(this IServiceCollection services, params Type[]? typesReturnedByActions) { AddReturnTypesFromGenerator(); //MiddlewareExportToFile.AddReturnType(typeof(Person[])); //MiddlewareExportToFile.AddReturnType(typeof(WeatherForecast[])); MiddlewareExportToFile.AddReturnTypes(typesReturnedByActions); return services.AddSingleton&lt;MiddlewareExportToFile&gt;(); } public static IApplicationBuilder UseExport(this IApplicationBuilder app) { app.UseMiddleware&lt;MiddlewareExportToFile&gt;(); var options = new RewriteOptions().Add(MiddlewareExportToFile.RewriteExtNeeded); app.UseRewriter(options); return app; } } #nullable disable   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#download-example-net--c","content":" tip Download Example project RSCG_WebAPIExports   ","version":"Next","tagName":"h3"},{"title":"Share RSCG_WebAPIExports​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#share-rscg_webapiexports","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_WebAPIExports  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"RSCG_WebAPIExports by Andrei Ignat","url":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"215 RSCG list by category","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/rscg-examples","content":"","keywords":"","version":"Next"},{"title":"Actor​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#actor","content":" Expand Actor =&gt;examples:1 ActorSrcGen  ","version":"Next","tagName":"h2"},{"title":"AOP​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#aop","content":" Expand AOP =&gt;examples:1 WhatIAmDoing  ","version":"Next","tagName":"h2"},{"title":"API​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#api","content":" Expand API =&gt;examples:10 SkinnyControllersCommon Refit RSCG_WebAPIExports SafeRouting MinimalApiBuilder Microsoft.Extensions.Configuration.Binder RDG MinimalApis.Discovery MinimalHelpers.Routing.Analyzers immediate.apis  ","version":"Next","tagName":"h2"},{"title":"Async​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#async","content":" Expand Async =&gt;examples:2 HsuSgSync AsyncIt  ","version":"Next","tagName":"h2"},{"title":"Bitwise​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#bitwise","content":" Expand Bitwise =&gt;examples:2 BitsKit Darp.BinaryObjects  ","version":"Next","tagName":"h2"},{"title":"Blazor​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#blazor","content":" Expand Blazor =&gt;examples:4 Blazorators GoLive.Generator.BlazorInterop Blazor.TSRuntime BadIdeas.Icons.FontAwesome  ","version":"Next","tagName":"h2"},{"title":"Builder​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#builder","content":" Expand Builder =&gt;examples:7 BuilderGenerator Architect.DomainModeling Fluentify Hsu.Sg.FluentMember StepwiseBuilderGenerator DimonSmart.BuilderGenerator ShadowWriterBuilder  ","version":"Next","tagName":"h2"},{"title":"Clone​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#clone","content":" Expand Clone =&gt;examples:2 CopyTo Dolly  ","version":"Next","tagName":"h2"},{"title":"CodeToString​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#codetostring","content":" Expand CodeToString =&gt;examples:3 SourceGenerator.Helper.CopyCode CodeAnalysis RossLean.StringificationGenerator  ","version":"Next","tagName":"h2"},{"title":"CommandLine​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#commandline","content":" Expand CommandLine =&gt;examples:1 ArgumentParsing  ","version":"Next","tagName":"h2"},{"title":"Console​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#console","content":" Expand Console =&gt;examples:1 Figgle  ","version":"Next","tagName":"h2"},{"title":"Constructor​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#constructor","content":" Expand Constructor =&gt;examples:7 AutoDeconstruct QuickConstructor AutoCtor AutoConstructor PrimaryParameter sourcedepend ConstructorGenerator  ","version":"Next","tagName":"h2"},{"title":"Database​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#database","content":" Expand Database =&gt;examples:5 Gedaq Breezy TableStorage Dapper.AOT EntityLengths.Generator  ","version":"Next","tagName":"h2"},{"title":"DependencyInjection​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#dependencyinjection","content":" Expand DependencyInjection =&gt;examples:9 AutoRegisterInject Injectio jab FactoryGenerator depso ServiceScan.SourceGenerator Pure.DI DependencyModules.SourceGenerator BunnyTailServiceRegistration  ","version":"Next","tagName":"h2"},{"title":"Disposer​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#disposer","content":" Expand Disposer =&gt;examples:5 BenutomoAutomaticDisposeImplSourceGenerator Disposer DisposableHelpers IDisposableGenerator Coplt.Dropping  ","version":"Next","tagName":"h2"},{"title":"EnhancementClass​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#enhancementclass","content":" Expand EnhancementClass =&gt;examples:27 System.Text.RegularExpressions Microsoft.Extensions.Logging System.Runtime.InteropServices ApparatusAOT Microsoft.Interop.JavaScript.JSImportGenerator Lombok.NET MemoryPack FastGenericNew Immutype SyncMethodGenerator M31.FluentAPI RSCG_Decorator Meziantou.Polyfill StaticReflection DudNet Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator TelemetryLogging Ling.Audit RSCG_UtilityTypes AspectGenerator OptionToStringGenerator CommonCodeGenerator ThisClass Enhanced.GetTypes QueryStringGenerator MemberAccessor Comparison  ","version":"Next","tagName":"h2"},{"title":"EnhancementProject​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#enhancementproject","content":" Expand EnhancementProject =&gt;examples:20 ThisAssembly RSCG_TimeBombComment RSCG_AMS RSCG_FunctionsWithDI BuildInfo CommandLine PlantUmlClassDiagramGenerator RSCG_Wait AutoSpectre AutoInvoke.Generator LinqGen.Generator ThisAssembly.Constants Pekspro.BuildInformationGenerator ThisAssembly.Metadata RSCG_ExportDiagram RSCG_NameGenerator Credfeto.Version.Information.Generator Larcanum.GitInfo ShadowWriterProjectInfo AssemblyVersionInfo  ","version":"Next","tagName":"h2"},{"title":"Enum​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#enum","content":" Expand Enum =&gt;examples:9 NetEscapades.EnumGenerators EnumClass CredFetoEnum EnumUtilities FusionReactor PMart.Enumeration jos.enumeration Flaggen Genbox.FastEnum  ","version":"Next","tagName":"h2"},{"title":"Equals​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#equals","content":" Expand Equals =&gt;examples:3 GeneratorEquals Equatable.Generator Valuify  ","version":"Next","tagName":"h2"},{"title":"FilesToCode​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#filestocode","content":" Expand FilesToCode =&gt;examples:15 RSCG_Utils Podimo.ConstEmbed EmbedResourceCSharp ThisAssembly_Resources ResXGenerator Chorn.EmbeddedResourceAccessGenerator NotNotAppSettings Weave corecraft LingoGen RSCG_JSON2Class DotnetYang ThisAssembly.Strings Datacute.EmbeddedResourcePropertyGenerator Strings.ResourceGenerator  ","version":"Next","tagName":"h2"},{"title":"FunctionalProgramming​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#functionalprogramming","content":" Expand FunctionalProgramming =&gt;examples:16 dunet PartiallyApplied OneOf RSCG_Utils_Memo N.SourceGenerators.UnionTypes Funcky.DiscriminatedUnion FunicularSwitch cachesourcegenerator UnionsGenerator TypeUtilities UnionGen Sera.Union Dusharp rscg_queryables polytype rscg_demeter  ","version":"Next","tagName":"h2"},{"title":"Hangfire​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#hangfire","content":" Expand Hangfire =&gt;examples:1 HangfireRecurringJob  ","version":"Next","tagName":"h2"},{"title":"Interface​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#interface","content":" Expand Interface =&gt;examples:14 RSCG_Static Matryoshki ProxyGen Roozie.AutoInterface Biwen.AutoClassGen CopyCat MakeInterface.Generator NetAutomaticInterface Farskeptic.AutoCompose Minerals.AutoInterfaces rscg_Interface_to_null_object RSCG_CompositeProvider AutoInterface ShadowWriterNullobjects  ","version":"Next","tagName":"h2"},{"title":"Linq​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#linq","content":" Expand Linq =&gt;examples:1 zlinq  ","version":"Next","tagName":"h2"},{"title":"Mapper​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#mapper","content":" Expand Mapper =&gt;examples:8 mapperly NextGenMapper AutoDTO MapTo MagicMap DynamicsMapper AutoGen LightweightObjectMapper  ","version":"Next","tagName":"h2"},{"title":"Mediator​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#mediator","content":" Expand Mediator =&gt;examples:3 Mediator DeeDee Immediate.Handlers  ","version":"Next","tagName":"h2"},{"title":"MVVM​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#mvvm","content":" Expand MVVM =&gt;examples:2 CommunityToolkit.Mvvm PropertyChangedSourceGenerator  ","version":"Next","tagName":"h2"},{"title":"Optimizer​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#optimizer","content":" Expand Optimizer =&gt;examples:1 StringLiteral  ","version":"Next","tagName":"h2"},{"title":"PrimitiveObsession​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#primitiveobsession","content":" Expand PrimitiveObsession =&gt;examples:5 Vogen Strongly UnitGenerator DomainPrimitives StronglyTypedUid  ","version":"Next","tagName":"h2"},{"title":"Serializer​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#serializer","content":" Expand Serializer =&gt;examples:6 System.Text.Json ProtobufSourceGenerator JsonPolymorphicGenerator jsonConverterSourceGenerator GenPack StackXML  ","version":"Next","tagName":"h2"},{"title":"SignalR​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#signalr","content":" Expand SignalR =&gt;examples:1 TypedSignalR.Client  ","version":"Next","tagName":"h2"},{"title":"StateMachine​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#statemachine","content":" Expand StateMachine =&gt;examples:1 SuperFluid  ","version":"Next","tagName":"h2"},{"title":"Templating​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#templating","content":" Expand Templating =&gt;examples:14 RazorBlade Microsoft.NET.Sdk.Razor.SourceGenerators MorrisMoxy spreadcheetah Gobie RSCG_Templating InterceptorTemplate Minerals.AutoMixins RSCG_IFormattable JKToolKit.TemplatePropertyGenerator RazorSlices NTypewriter Tortuga.Shipwright InlineComposition  ","version":"Next","tagName":"h2"},{"title":"Tests​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#tests","content":" Expand Tests =&gt;examples:5 Rocks Ridge mocklis MSTest MockMe  ","version":"Next","tagName":"h2"},{"title":"WinAPI​","type":1,"pageTitle":"215 RSCG list by category","url":"/RSCG_Examples/v2/docs/rscg-examples#winapi","content":" Expand WinAPI =&gt;examples:3 Com Microsoft.Windows.CsWin32 NativeObjects  flowchart LR; Actor--&gt; ActorSrcGen((ActorSrcGen)) AOP--&gt; WhatIAmDoing((WhatIAmDoing)) API--&gt; SkinnyControllersCommon((SkinnyControllersCommon)) API--&gt; Refit((Refit)) API--&gt; RSCG_WebAPIExports((RSCG_WebAPIExports)) API--&gt; SafeRouting((SafeRouting)) API--&gt; MinimalApiBuilder((MinimalApiBuilder)) API--&gt; Microsoft.Extensions.Configuration.Binder((Microsoft.Extensions.Configuration.Binder)) API--&gt; RDG((RDG)) API--&gt; MinimalApis.Discovery((MinimalApis.Discovery)) API--&gt; MinimalHelpers.Routing.Analyzers((MinimalHelpers.Routing.Analyzers)) API--&gt; immediate.apis((immediate.apis)) Async--&gt; HsuSgSync((HsuSgSync)) Async--&gt; AsyncIt((AsyncIt)) Bitwise--&gt; BitsKit((BitsKit)) Bitwise--&gt; Darp.BinaryObjects((Darp.BinaryObjects)) Blazor--&gt; Blazorators((Blazorators)) Blazor--&gt; GoLive.Generator.BlazorInterop((GoLive.Generator.BlazorInterop)) Blazor--&gt; Blazor.TSRuntime((Blazor.TSRuntime)) Blazor--&gt; BadIdeas.Icons.FontAwesome((BadIdeas.Icons.FontAwesome)) Builder--&gt; BuilderGenerator((BuilderGenerator)) Builder--&gt; Architect.DomainModeling((Architect.DomainModeling)) Builder--&gt; Fluentify((Fluentify)) Builder--&gt; Hsu.Sg.FluentMember((Hsu.Sg.FluentMember)) Builder--&gt; StepwiseBuilderGenerator((StepwiseBuilderGenerator)) Builder--&gt; DimonSmart.BuilderGenerator((DimonSmart.BuilderGenerator)) Builder--&gt; ShadowWriterBuilder((ShadowWriterBuilder)) Clone--&gt; CopyTo((CopyTo)) Clone--&gt; Dolly((Dolly)) CodeToString--&gt; SourceGenerator.Helper.CopyCode((SourceGenerator.Helper.CopyCode)) CodeToString--&gt; CodeAnalysis((CodeAnalysis)) CodeToString--&gt; RossLean.StringificationGenerator((RossLean.StringificationGenerator)) CommandLine--&gt; ArgumentParsing((ArgumentParsing)) Console--&gt; Figgle((Figgle)) Constructor--&gt; AutoDeconstruct((AutoDeconstruct)) Constructor--&gt; QuickConstructor((QuickConstructor)) Constructor--&gt; AutoCtor((AutoCtor)) Constructor--&gt; AutoConstructor((AutoConstructor)) Constructor--&gt; PrimaryParameter((PrimaryParameter)) Constructor--&gt; sourcedepend((sourcedepend)) Constructor--&gt; ConstructorGenerator((ConstructorGenerator)) Database--&gt; Gedaq((Gedaq)) Database--&gt; Breezy((Breezy)) Database--&gt; TableStorage((TableStorage)) Database--&gt; Dapper.AOT((Dapper.AOT)) Database--&gt; EntityLengths.Generator((EntityLengths.Generator)) DependencyInjection--&gt; AutoRegisterInject((AutoRegisterInject)) DependencyInjection--&gt; Injectio((Injectio)) DependencyInjection--&gt; jab((jab)) DependencyInjection--&gt; FactoryGenerator((FactoryGenerator)) DependencyInjection--&gt; depso((depso)) DependencyInjection--&gt; ServiceScan.SourceGenerator((ServiceScan.SourceGenerator)) DependencyInjection--&gt; Pure.DI((Pure.DI)) DependencyInjection--&gt; DependencyModules.SourceGenerator((DependencyModules.SourceGenerator)) DependencyInjection--&gt; BunnyTailServiceRegistration((BunnyTailServiceRegistration)) Disposer--&gt; BenutomoAutomaticDisposeImplSourceGenerator((BenutomoAutomaticDisposeImplSourceGenerator)) Disposer--&gt; Disposer((Disposer)) Disposer--&gt; DisposableHelpers((DisposableHelpers)) Disposer--&gt; IDisposableGenerator((IDisposableGenerator)) Disposer--&gt; Coplt.Dropping((Coplt.Dropping)) EnhancementClass--&gt; System.Text.RegularExpressions((System.Text.RegularExpressions)) EnhancementClass--&gt; Microsoft.Extensions.Logging((Microsoft.Extensions.Logging)) EnhancementClass--&gt; System.Runtime.InteropServices((System.Runtime.InteropServices)) EnhancementClass--&gt; ApparatusAOT((ApparatusAOT)) EnhancementClass--&gt; Microsoft.Interop.JavaScript.JSImportGenerator((Microsoft.Interop.JavaScript.JSImportGenerator)) EnhancementClass--&gt; Lombok.NET((Lombok.NET)) EnhancementClass--&gt; MemoryPack((MemoryPack)) EnhancementClass--&gt; FastGenericNew((FastGenericNew)) EnhancementClass--&gt; Immutype((Immutype)) EnhancementClass--&gt; SyncMethodGenerator((SyncMethodGenerator)) EnhancementClass--&gt; M31.FluentAPI((M31.FluentAPI)) EnhancementClass--&gt; RSCG_Decorator((RSCG_Decorator)) EnhancementClass--&gt; Meziantou.Polyfill((Meziantou.Polyfill)) EnhancementClass--&gt; StaticReflection((StaticReflection)) EnhancementClass--&gt; DudNet((DudNet)) EnhancementClass--&gt; Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator((Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator)) EnhancementClass--&gt; TelemetryLogging((TelemetryLogging)) EnhancementClass--&gt; Ling.Audit((Ling.Audit)) EnhancementClass--&gt; RSCG_UtilityTypes((RSCG_UtilityTypes)) EnhancementClass--&gt; AspectGenerator((AspectGenerator)) EnhancementClass--&gt; OptionToStringGenerator((OptionToStringGenerator)) EnhancementClass--&gt; CommonCodeGenerator((CommonCodeGenerator)) EnhancementClass--&gt; ThisClass((ThisClass)) EnhancementClass--&gt; Enhanced.GetTypes((Enhanced.GetTypes)) EnhancementClass--&gt; QueryStringGenerator((QueryStringGenerator)) EnhancementClass--&gt; MemberAccessor((MemberAccessor)) EnhancementClass--&gt; Comparison((Comparison)) EnhancementProject--&gt; ThisAssembly((ThisAssembly)) EnhancementProject--&gt; RSCG_TimeBombComment((RSCG_TimeBombComment)) EnhancementProject--&gt; RSCG_AMS((RSCG_AMS)) EnhancementProject--&gt; RSCG_FunctionsWithDI((RSCG_FunctionsWithDI)) EnhancementProject--&gt; BuildInfo((BuildInfo)) EnhancementProject--&gt; CommandLine((CommandLine)) EnhancementProject--&gt; PlantUmlClassDiagramGenerator((PlantUmlClassDiagramGenerator)) EnhancementProject--&gt; RSCG_Wait((RSCG_Wait)) EnhancementProject--&gt; AutoSpectre((AutoSpectre)) EnhancementProject--&gt; AutoInvoke.Generator((AutoInvoke.Generator)) EnhancementProject--&gt; LinqGen.Generator((LinqGen.Generator)) EnhancementProject--&gt; ThisAssembly.Constants((ThisAssembly.Constants)) EnhancementProject--&gt; Pekspro.BuildInformationGenerator((Pekspro.BuildInformationGenerator)) EnhancementProject--&gt; ThisAssembly.Metadata((ThisAssembly.Metadata)) EnhancementProject--&gt; RSCG_ExportDiagram((RSCG_ExportDiagram)) EnhancementProject--&gt; RSCG_NameGenerator((RSCG_NameGenerator)) EnhancementProject--&gt; Credfeto.Version.Information.Generator((Credfeto.Version.Information.Generator)) EnhancementProject--&gt; Larcanum.GitInfo((Larcanum.GitInfo)) EnhancementProject--&gt; ShadowWriterProjectInfo((ShadowWriterProjectInfo)) EnhancementProject--&gt; AssemblyVersionInfo((AssemblyVersionInfo)) Enum--&gt; NetEscapades.EnumGenerators((NetEscapades.EnumGenerators)) Enum--&gt; EnumClass((EnumClass)) Enum--&gt; CredFetoEnum((CredFetoEnum)) Enum--&gt; EnumUtilities((EnumUtilities)) Enum--&gt; FusionReactor((FusionReactor)) Enum--&gt; PMart.Enumeration((PMart.Enumeration)) Enum--&gt; jos.enumeration((jos.enumeration)) Enum--&gt; Flaggen((Flaggen)) Enum--&gt; Genbox.FastEnum((Genbox.FastEnum)) Equals--&gt; GeneratorEquals((GeneratorEquals)) Equals--&gt; Equatable.Generator((Equatable.Generator)) Equals--&gt; Valuify((Valuify)) FilesToCode--&gt; RSCG_Utils((RSCG_Utils)) FilesToCode--&gt; Podimo.ConstEmbed((Podimo.ConstEmbed)) FilesToCode--&gt; EmbedResourceCSharp((EmbedResourceCSharp)) FilesToCode--&gt; ThisAssembly_Resources((ThisAssembly_Resources)) FilesToCode--&gt; ResXGenerator((ResXGenerator)) FilesToCode--&gt; Chorn.EmbeddedResourceAccessGenerator((Chorn.EmbeddedResourceAccessGenerator)) FilesToCode--&gt; NotNotAppSettings((NotNotAppSettings)) FilesToCode--&gt; Weave((Weave)) FilesToCode--&gt; corecraft((corecraft)) FilesToCode--&gt; LingoGen((LingoGen)) FilesToCode--&gt; RSCG_JSON2Class((RSCG_JSON2Class)) FilesToCode--&gt; DotnetYang((DotnetYang)) FilesToCode--&gt; ThisAssembly.Strings((ThisAssembly.Strings)) FilesToCode--&gt; Datacute.EmbeddedResourcePropertyGenerator((Datacute.EmbeddedResourcePropertyGenerator)) FilesToCode--&gt; Strings.ResourceGenerator((Strings.ResourceGenerator)) FunctionalProgramming--&gt; dunet((dunet)) FunctionalProgramming--&gt; PartiallyApplied((PartiallyApplied)) FunctionalProgramming--&gt; OneOf((OneOf)) FunctionalProgramming--&gt; RSCG_Utils_Memo((RSCG_Utils_Memo)) FunctionalProgramming--&gt; N.SourceGenerators.UnionTypes((N.SourceGenerators.UnionTypes)) FunctionalProgramming--&gt; Funcky.DiscriminatedUnion((Funcky.DiscriminatedUnion)) FunctionalProgramming--&gt; FunicularSwitch((FunicularSwitch)) FunctionalProgramming--&gt; cachesourcegenerator((cachesourcegenerator)) FunctionalProgramming--&gt; UnionsGenerator((UnionsGenerator)) FunctionalProgramming--&gt; TypeUtilities((TypeUtilities)) FunctionalProgramming--&gt; UnionGen((UnionGen)) FunctionalProgramming--&gt; Sera.Union((Sera.Union)) FunctionalProgramming--&gt; Dusharp((Dusharp)) FunctionalProgramming--&gt; rscg_queryables((rscg_queryables)) FunctionalProgramming--&gt; polytype((polytype)) FunctionalProgramming--&gt; rscg_demeter((rscg_demeter)) Hangfire--&gt; HangfireRecurringJob((HangfireRecurringJob)) Interface--&gt; RSCG_Static((RSCG_Static)) Interface--&gt; Matryoshki((Matryoshki)) Interface--&gt; ProxyGen((ProxyGen)) Interface--&gt; Roozie.AutoInterface((Roozie.AutoInterface)) Interface--&gt; Biwen.AutoClassGen((Biwen.AutoClassGen)) Interface--&gt; CopyCat((CopyCat)) Interface--&gt; MakeInterface.Generator((MakeInterface.Generator)) Interface--&gt; NetAutomaticInterface((NetAutomaticInterface)) Interface--&gt; Farskeptic.AutoCompose((Farskeptic.AutoCompose)) Interface--&gt; Minerals.AutoInterfaces((Minerals.AutoInterfaces)) Interface--&gt; rscg_Interface_to_null_object((rscg_Interface_to_null_object)) Interface--&gt; RSCG_CompositeProvider((RSCG_CompositeProvider)) Interface--&gt; AutoInterface((AutoInterface)) Interface--&gt; ShadowWriterNullobjects((ShadowWriterNullobjects)) Linq--&gt; zlinq((zlinq)) Mapper--&gt; mapperly((mapperly)) Mapper--&gt; NextGenMapper((NextGenMapper)) Mapper--&gt; AutoDTO((AutoDTO)) Mapper--&gt; MapTo((MapTo)) Mapper--&gt; MagicMap((MagicMap)) Mapper--&gt; DynamicsMapper((DynamicsMapper)) Mapper--&gt; AutoGen((AutoGen)) Mapper--&gt; LightweightObjectMapper((LightweightObjectMapper)) Mediator--&gt; Mediator((Mediator)) Mediator--&gt; DeeDee((DeeDee)) Mediator--&gt; Immediate.Handlers((Immediate.Handlers)) MVVM--&gt; CommunityToolkit.Mvvm((CommunityToolkit.Mvvm)) MVVM--&gt; PropertyChangedSourceGenerator((PropertyChangedSourceGenerator)) Optimizer--&gt; StringLiteral((StringLiteral)) PrimitiveObsession--&gt; Vogen((Vogen)) PrimitiveObsession--&gt; Strongly((Strongly)) PrimitiveObsession--&gt; UnitGenerator((UnitGenerator)) PrimitiveObsession--&gt; DomainPrimitives((DomainPrimitives)) PrimitiveObsession--&gt; StronglyTypedUid((StronglyTypedUid)) Serializer--&gt; System.Text.Json((System.Text.Json)) Serializer--&gt; ProtobufSourceGenerator((ProtobufSourceGenerator)) Serializer--&gt; JsonPolymorphicGenerator((JsonPolymorphicGenerator)) Serializer--&gt; jsonConverterSourceGenerator((jsonConverterSourceGenerator)) Serializer--&gt; GenPack((GenPack)) Serializer--&gt; StackXML((StackXML)) SignalR--&gt; TypedSignalR.Client((TypedSignalR.Client)) StateMachine--&gt; SuperFluid((SuperFluid)) Templating--&gt; RazorBlade((RazorBlade)) Templating--&gt; Microsoft.NET.Sdk.Razor.SourceGenerators((Microsoft.NET.Sdk.Razor.SourceGenerators)) Templating--&gt; MorrisMoxy((MorrisMoxy)) Templating--&gt; spreadcheetah((spreadcheetah)) Templating--&gt; Gobie((Gobie)) Templating--&gt; RSCG_Templating((RSCG_Templating)) Templating--&gt; InterceptorTemplate((InterceptorTemplate)) Templating--&gt; Minerals.AutoMixins((Minerals.AutoMixins)) Templating--&gt; RSCG_IFormattable((RSCG_IFormattable)) Templating--&gt; JKToolKit.TemplatePropertyGenerator((JKToolKit.TemplatePropertyGenerator)) Templating--&gt; RazorSlices((RazorSlices)) Templating--&gt; NTypewriter((NTypewriter)) Templating--&gt; Tortuga.Shipwright((Tortuga.Shipwright)) Templating--&gt; InlineComposition((InlineComposition)) Tests--&gt; Rocks((Rocks)) Tests--&gt; Ridge((Ridge)) Tests--&gt; mocklis((mocklis)) Tests--&gt; MSTest((MSTest)) Tests--&gt; MockMe((MockMe)) WinAPI--&gt; Com((Com)) WinAPI--&gt; Microsoft.Windows.CsWin32((Microsoft.Windows.CsWin32)) WinAPI--&gt; NativeObjects((NativeObjects))   📄️ 01 - ThisAssembly The ThisAssembly.Info allows you access to the Assembly Information as constants, instead of going to reflection each time. 📄️ 02 - RSCG_TimeBombComment This will generate an error from the comment after a certain date 📄️ 03 - System.Text.Json Json Serialize without reflection 📄️ 04 - RSCG_Utils Add files as C# consts 📄️ 05 - System.Text.RegularExpressions Regex compiled 📄️ 06 - SkinnyControllersCommon Automatically add controllers actions for any class injected in constructor 📄️ 07 - Microsoft.Extensions.Logging Logging defined and compiled 📄️ 08 - RSCG_Static Generate interfaces and classes from static classes 📄️ 09 - CommunityToolkit.Mvvm Shows how to implement INotifyPropertyChanged,ObservableProperty and RelayCommand 📄️ 10 - RSCG_AMS Automatically registering the version, ci, commit id 📄️ 11 - AutoDeconstruct Automatically add deconstruct for all types in an assembly 📄️ 12 - System.Runtime.InteropServices Generate PInvoke calls 📄️ 13 - QuickConstructor Fast add constructors that are read only FIELDS 📄️ 14 - AutoCtor Generate constructor from non-initialized fields 📄️ 15 - dunet Add union types to C# - similar with F#/TS discriminated unions 📄️ 16 - Vogen Transform values( e.g. int) into classes 📄️ 17 - RazorBlade Fast templating with Razor syntax 📄️ 18 - PartiallyApplied If you need to curry functions, you can use this package 📄️ 19 - ApparatusAOT This will generate code for investigating at runtime the properties of an object 📄️ 20 - NetEscapades.EnumGenerators Running fast tostring and other features for enum 📄️ 21 - Microsoft.Interop.JavaScript.JSImportGenerator Generating partial JSimport / JSExport in C# form 📄️ 22 - RSCG_FunctionsWithDI Generating functions that have parameters from services 📄️ 23 - Microsoft.NET.Sdk.Razor.SourceGenerators Generating razor/cshtml pages to cs pages 📄️ 24 - Rocks Creating mocks for testing interfaces/classes 📄️ 25 - mapperly Mapping classes to/from DTO 📄️ 26 - Podimo.ConstEmbed File content transformed to constants 📄️ 27 - EmbedResourceCSharp reading embedded resources fast 📄️ 28 - Lombok.NET Generating toString from props/fields. Other demos on site 📄️ 29 - Gedaq Generating code from attribute query 📄️ 30 - Refit Generates code for retrieving data from HTTP API 📄️ 31 - MorrisMoxy Generate C# code for classes from template using attributes 📄️ 32 - Mediator Gnerating mediator data without reflection 📄️ 33 - Matryoshki Adding decorators to an implementation of interface 📄️ 34 - MemoryPack Efficient serializer 📄️ 35 - DeeDee Mediatr generated data 📄️ 36 - ProxyGen intercepting and duck typing 📄️ 37 - AutoRegisterInject Generating class DI registration from attributes 📄️ 38 - EnumClass enum 2 class 📄️ 39 - Breezy ORM Mapper 📄️ 40 - FastGenericNew Creating instances fast. As generator show source code. Otherwise could be a dll 📄️ 41 - GeneratorEquals Generating Equals from properties 📄️ 42 - Immutype Immutable from constructors 📄️ 43 - spreadcheetah generating Excel from objects 📄️ 44 - SyncMethodGenerator Generating Sync method from async 📄️ 45 - BenutomoAutomaticDisposeImplSourceGenerator Automatic dispose resources 📄️ 46 - NextGenMapper Automating generating mapping between classes 📄️ 47 - Injectio Attributes to DI helper 📄️ 48 - PropertyChangedSourceGenerator Generating PropertyChange to properties 📄️ 49 - Strongly Generate and customize strong id structs 📄️ 50 - Ridge Generating test classes for controllers 📄️ 51 - OneOf Functional discriminated unions 📄️ 52 - Gobie templating for classes , fields ... 📄️ 53 - RSCG_WebAPIExports Generating Excel from WebAPI json array 📄️ 54 - AutoDTO Generate DTO classes from business/ef classes 📄️ 55 - M31.FluentAPI Builder for your class. But the order counts - generates a new interface each time 📄️ 56 - Roozie.AutoInterface Generating interfaces from project 📄️ 57 - RSCG_Utils_Memo Memo the function result 📄️ 58 - ThisAssembly_Resources Embed resources to file 📄️ 59 - SourceGenerator.Helper.CopyCode Transform Code to string 📄️ 60 - SafeRouting Safe Routing for MVC 📄️ 61 - ProtobufSourceGenerator Serializing a class to protobuf 📄️ 62 - RSCG_Decorator Intercept methods - start, stop,exception 📄️ 63 - StringLiteral Optimizing memory for strings 📄️ 64 - ResXGenerator Resources as string 📄️ 65 - Disposer Generates partials for dispose resources 📄️ 66 - BuilderGenerator Generating Builder class for an object 📄️ 67 - MapTo AutoGenerate Mapping 📄️ 68 - JsonPolymorphicGenerator Generating JsonDerivedType to be added to the base class 📄️ 69 - RSCG_Templating Templating every your data ( starting with class) 📄️ 70 - MagicMap Auto mapping 📄️ 71 - DisposableHelpers Generating boilerplate for thread safe Dispose 📄️ 72 - Meziantou.Polyfill Generating polyfills that you can see source without de-compiling 📄️ 73 - IDisposableGenerator Generating disposable 📄️ 74 - CredFetoEnum Enum / description to string 📄️ 75 - StaticReflection Call prop/methods on classes 📄️ 76 - UnitGenerator Generating classes instead of value objects( e.g. int) 📄️ 77 - DynamicsMapper Mapper for Dataverse client - generates also column names from properties 📄️ 78 - MinimalApiBuilder Generate Minimal API from classes 📄️ 79 - DudNet Generate proxy classes for the principal classes 📄️ 80 - AutoConstructor Generating constructor for class with many properties 📄️ 81 - N.SourceGenerators.UnionTypes Generating different union types 📄️ 82 - jsonConverterSourceGenerator Json Polymorphic generator 📄️ 83 - PrimaryParameter Generating properties from .NET 8 constructor parameters 📄️ 84 - Biwen.AutoClassGen Generating properties from interface to class. 📄️ 85 - Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator Generating the validation for data annotations on options classes. 📄️ 86 - Microsoft.Extensions.Configuration.Binder Generating Binding for configuration files 📄️ 87 - RDG Generating replacing for minimal API Map 📄️ 88 - Com Generating Com Declarations 📄️ 89 - InterceptorTemplate Andrei Ignat 📄️ 90 - TelemetryLogging Generating deep logging messages for a class 📄️ 91 - Ling.Audit Generating audit data from class implementation of interfaces 📄️ 92 - RSCG_UtilityTypes Add omit and pick to selectively generate types from existing types 📄️ 93 - mocklis Generating mocks from classes for unit tests 📄️ 94 - AspectGenerator AOP for methods in the same project. Uses interceptors 📄️ 95 - CopyCat Implementation of the Decorator pattern in C# - only for not implemented methods 📄️ 96 - HsuSgSync Generate code for async to sync methods 📄️ 97 - DomainPrimitives One of the most complete and mature libraries for DomainPrimitives in .NET 📄️ 98 - Funcky.DiscriminatedUnion Generating discriminated unions for C# 9.0 and above. 📄️ 99 - MakeInterface.Generator Generating interface from class definition 📄️ 100 - BuildInfo Generating build information 📄️ 101 - Chorn.EmbeddedResourceAccessGenerator Embedded Resources to C# Code 📄️ 102 - Blazorators Generate javascript interop code for Blazor WASM projects. 📄️ 103 - HangfireRecurringJob Generating recurring jobs for Hangfire from class attribute 📄️ 104 - NotNot.AppSettings Application Settings to strongly typed classes. Generate also from AppSettings development 📄️ 104 - NotNotAppSettings Application Settings to strongly typed classes. Generate also from AppSettings development 📄️ 105 - Weave Scriban like generator 📄️ 106 - WhatIAmDoing Intercept any method in any project 📄️ 107 - NetAutomaticInterface GEnerating interface from class 📄️ 108 - CommandLine Generating easy command line applications. 📄️ 109 - FunicularSwitch Generating discriminated unions for C# 9.0 and above. 📄️ 110 - jab generating DI code 📄️ 111 - cachesourcegenerator Caching methods results 📄️ 112 - OptionToStringGenerator Generating similar ToString method for classes with many properties. It can also generate for external classes. 📄️ 113 - sourcedepend Generating constructor for DI 📄️ 114 - corecraft Decomposing properties and class into Domain Models. Seems however too complicated to use 📄️ 115 - UnionsGenerator Generating Union types for C# 📄️ 116 - CopyTo Generating copy to code for properties of a class 📄️ 117 - PlantUmlClassDiagramGenerator Generating UML from class definitions 📄️ 118 - RSCG_Wait Demo for waiting in compilation and show the options of compiling the code 📄️ 119 - AutoGen Generating function to map DTOs 📄️ 120 - LingoGen Translating from multiple languages 📄️ 121 - AutoSpectre Generating prompt to input values for a console application. 📄️ 122 - RSCG_JSON2Class transform any json into a class 📄️ 123 - CodeAnalysis Code to string literal. Unfortunately, it carries also some other CodeAnalysis generated files, which are not so useful. 📄️ 124 - Architect.DomainModeling Domain Modelling -DDD, Entity and more. Here I will show just the builder 📄️ 125 - AutoInvoke.Generator Finding all implementation of an interface/class and invoke them. 📄️ 126 - LinqGen.Generator No-alloc for Linq operations 📄️ 127 - TypeUtilities Pick/Omit for classes ( also have some mapping ) 📄️ 128 - Farskeptic.AutoCompose Generating decorators for classes that implements interfaces. 📄️ 129 - CommonCodeGenerator Generating ToString from classes 📄️ 130 - MSTest AOP for MSTest 📄️ 131 - EnumUtilities Enum to string- and multiple other extensions for an enum 📄️ 132 - UnionGen Generating unions between types 📄️ 133 - FusionReactor Enums to string and other extensions 📄️ 134 - StronglyTypedUid Transforming a record into a GUID 📄️ 135 - BitsKit Reading efficiently from a bit structure 📄️ 136 - MinimalApis.Discovery Controller like API registering 📄️ 137 - Minerals.AutoInterfaces Generating interface from class 📄️ 138 - RossLean.StringificationGenerator Generating constructor code as string 📄️ 139 - ThisClass Generate full class name from class 📄️ 140 - Minerals.AutoMixins Generate Mixin from another classes 📄️ 141 - ActorSrcGen Generating source code for actors in C#. 📄️ 142 - TableStorage Generate resources for accessing Azure Table Storage 📄️ 143 - FactoryGenerator generating DI code 📄️ 144 - depso generating DI code 📄️ 145 - DotnetYang Generating source code from YANG models 📄️ 146 - RSCG_IFormattable Generating .ToString for IFormattable 📄️ 147 - JKToolKit.TemplatePropertyGenerator String templating for a class 📄️ 148 - ThisAssembly.Constants Generating Constants from csproj 📄️ 149 - Pekspro.BuildInformationGenerator adding git build information 📄️ 150 - ThisAssembly.Metadata Generating code from assembly metadata 📄️ 151 - ThisAssembly.Strings generating code from resx files 📄️ 152 - ServiceScan.SourceGenerator Generating service collection / DI registration 📄️ 153 - RSCG_ExportDiagram Generating diagram for relation classes within referenced project 📄️ 154 - Fluentify Generate fluent builder 📄️ 155 - Coplt.Dropping Generating disposable 📄️ 156 - RSCG_NameGenerator Generating unique names for assemblies 📄️ 157 - Sera.Union Generate tagged union 📄️ 158 - Enhanced.GetTypes Generating list of PUBLIC classes that implements an interface 📄️ 159 - LightweightObjectMapper Generating function to map DTOs 📄️ 160 - Dusharp Generate tagged union 📄️ 161 - Immediate.Handlers Generating mediator like handlers 📄️ 162 - MinimalHelpers.Routing.Analyzers Controller like API registering 📄️ 163 - TypedSignalR.Client Creating typed Signal R clients 📄️ 164 - RazorSlices Generating html from razor templates. Attention, generates IHttpResult, not html string. 📄️ 165 - rscg_queryables Generating code for .Where and .OrderBy by string, not by lambda 📄️ 166 - Datacute.EmbeddedResourcePropertyGenerator Generating class to access easy the embedded resource 📄️ 167 - polytype Generating shape like reflection from classes. See PolyType.Examples for more details 📄️ 168 - Credfeto.Version.Information.Generator Embedding build information as compile time constants in C# projects. 📄️ 169 - GenPack Generating Binary Serialization and properties for class 📄️ 170 - QueryStringGenerator Generate from string properties of a class a query string for a URL. 📄️ 171 - Hsu.Sg.FluentMember Adding builder pattern to classes 📄️ 172 - GoLive.Generator.BlazorInterop Generating interop from C# to javascript for Blazor 📄️ 173 - Microsoft.Windows.CsWin32 Generating WinAPI code in C# 📄️ 174 - Dapper.AOT Generating AOT code for Dapper -hydrating classes from SQL queries. 📄️ 175 - Dolly Clone objects with ease. 📄️ 176 - Darp.BinaryObjects Serialize bits of data 📄️ 177 - Equatable.Generator Generating Equals from properties 📄️ 178 - Valuify Generating Equals from properties 📄️ 179 - ConstructorGenerator Generate constructor for classes 📄️ 180 - Pure.DI Constructing injecting container 📄️ 181 - Larcanum.GitInfo Generates GitInfo data from the current environment. 📄️ 182 - rscg_Interface_to_null_object Generate null objects for interfaces 📄️ 183 - NTypewriter Generating code with a template from classes in project 📄️ 184 - MockMe Creating mocks for testing classes 📄️ 185 - DependencyModules.SourceGenerator Generating service dependencies from attributes. 📄️ 186 - RSCG_CompositeProvider Generate composite class from interface, using multiple sources 📄️ 187 - EntityLengths.Generator Generating constants for max length for properties in entities 📄️ 188 - StepwiseBuilderGenerator Generating Builder- as steps 📄️ 189 - MemberAccessor Generate getter and setter for class members. 📄️ 190 - PMart.Enumeration Constants as enumeration. With EFCore, Swagger and other implementations. 📄️ 191 - rscg_demeter Generating diagnostics about Law of Demeter violations 📄️ 192 - immediate.apis Defining APIs in classes instead of in minimal API or controllers 📄️ 193 - NativeObjects Object to IntPtr and back 📄️ 194 - zlinq zero allocations for LINQ operations, high performance, functional programming 📄️ 195 - Comparison If you want to generate comparison operators for your classes, startin with IComparable 📄️ 196 - ArgumentParsing Transform command line arguments into strongly typed objects 📄️ 197 - BunnyTailServiceRegistration Generating service registration code from attributes 📄️ 198 - DimonSmart.BuilderGenerator Generating builder pattern code for classes 📄️ 199 - SuperFluid Generate a state machine from a yaml file 📄️ 200 - Figgle Generating ASCII art text for console applications 📄️ 201 - Strings.ResourceGenerator Generating strongly typed string resources - with parameter and Localization 📄️ 202 - jos.enumeration Generating enum from static consts 📄️ 203 - Tortuga.Shipwright Generate mixin between classes 📄️ 204 - InlineComposition Mixin classes and interfaces together 📄️ 205 - Flaggen Explicit operations about flags with enums, and bitwise operations 📄️ 206 - ShadowWriterBuilder Generating null objects for testing 📄️ 207 - AutoInterface generating interface from a class 📄️ 208 - AsyncIt Generate async from sync or sync from async 📄️ 209 - ShadowWriterProjectInfo Generating C# code from project attributes 📄️ 210 - AssemblyVersionInfo Generating assembly version and other info from csproj to csharp 📄️ 211 - ShadowWriterNullobjects Generate null object for an class that implements an interface 📄️ 212 - StackXML Generating XML serializer without reflection 📄️ 213 - Blazor.TSRuntime Generating C# Code for Blazor from javascript files 📄️ 214 - Genbox.FastEnum Generating values for enums 📄️ 215 - BadIdeas.Icons.FontAwesome generate font awesome icons ","version":"Next","tagName":"h2"},{"title":"Pure.DI by Nikolay Pianikov","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Pure.DI","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#info","content":" info Name: Pure.DI Author: Nikolay Pianikov NuGet:https://www.nuget.org/packages/Pure.DI/ You can find more details at https://github.com/DevTeam/Pure.DI Source: https://github.com/DevTeam/Pure.DI  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#original-readme","content":" note Pure DI for .NET Supports .NET starting with .NET Framework 2.0, released 2005-10-27, and all newer versions. Usage requirements​ .NET SDK 6.0.4 or later is installed. At the same time, you can develop .NET projects even for older versions like .NET Framework 2.0 C# 8 or later. This requirement only needs to be met for projects that reference the Pure.DI source code generator, other projects can use any version of C#. Key features​ Pure.DI is not a framework or library, but a source code generator for creating object graphs. To make them accurate, the developer uses a set of intuitive hints from the Pure.DI API. During the compilation phase, Pure.DI determines the optimal graph structure, checks its correctness, and generates partial class code to create object graphs in the Pure DI paradigm using only basic language constructs. The resulting generated code is robust, works everywhere, throws no exceptions, does not depend on .NET library calls or .NET reflections, is efficient in terms of performance and memory consumption, and is subject to all optimizations. This code can be easily integrated into an application because it does not use unnecessary delegates, additional calls to any methods, type conversions, boxing/unboxing, etc. DI without any IoC/DI containers, frameworks, dependencies and hence no performance impact or side effects. Pure.DI is actually a .NET code generator. It uses basic language constructs to create simple code as well as if you were doing it yourself: de facto it's just a bunch of nested constructor calls. This code can be viewed, analyzed at any time, and debugged. A predictable and verified dependency graph is built and validated on the fly while writing code. All logic for analyzing the graph of objects, constructors and methods takes place at compile time. Pure.DI notifies the developer at compile time of missing or cyclic dependencies, cases when some dependencies are not suitable for injection, etc. The developer has no chance to get a program that will crash at runtime because of some exception related to incorrect object graph construction. All this magic happens at the same time as the code is written, so you have instant feedback between the fact that you have made changes to your code and the fact that your code is already tested and ready to use. Does not add any dependencies to other assemblies. When using pure DI, no dependencies are added to assemblies because only basic language constructs and nothing more are used. Highest performance, including compiler and JIT optimization and minimal memory consumption. All generated code runs as fast as your own, in pure DI style, including compile-time and run-time optimization. As mentioned above, graph analysis is done at compile time, and at runtime there are only a bunch of nested constructors, and that's it. Memory is spent only on the object graph being created. It works everywhere. Since the pure DI approach does not use any dependencies or .NET reflection at runtime, it does not prevent the code from running as expected on any platform: Full .NET Framework 2.0+, .NET Core, .NET, UWP/XBOX, .NET IoT, Xamarin, Native AOT, etc. Ease of Use. The Pure.DI API is very similar to the API of most IoC/DI libraries. And this was a conscious decision: the main reason is that programmers don't need to learn a new API. Superfine customization of generic types. In Pure.DI it is proposed to use special marker types instead of using open generic types. This allows you to build the object graph more accurately and take full advantage of generic types. Supports the major .NET BCL types out of the box. Pure.DI already supports many of BCL types like Array, IEnumerable&lt;T&gt;, IList&lt;T&gt;, IReadOnlyCollection&lt;T&gt;, IReadOnlyList&lt;T&gt;, ISet&lt;T&gt;, IProducerConsumerCollection&lt;T&gt;, ConcurrentBag&lt;T&gt;, Func&lt;T&gt;, ThreadLocal, ValueTask&lt;T&gt;, Task&lt;T&gt;, MemoryPool&lt;T&gt;, ArrayPool&lt;T&gt;, ReadOnlyMemory&lt;T&gt;, Memory&lt;T&gt;, ReadOnlySpan&lt;T&gt;, Span&lt;T&gt;, IComparer&lt;T&gt;, IEqualityComparer&lt;T&gt; and etc. without any extra effort. Good for building libraries or frameworks where resource consumption is particularly critical. Its high performance, zero memory consumption/preparation overhead, and lack of dependencies make it ideal for building libraries and frameworks. Schrödinger's cat will demonstrate how it all works ​ The reality is​ Let's create an abstraction​ interface IBox&lt;out T&gt; { T Content { get; } } interface ICat { State State { get; } } enum State { Alive, Dead } Here's our implementation​ record CardboardBox&lt;T&gt;(T Content): IBox&lt;T&gt;; class ShroedingersCat(Lazy&lt;State&gt; superposition): ICat { // The decoherence of the superposition // at the time of observation via an irreversible process public State State =&gt; superposition.Value; } [!IMPORTANT] Our abstraction and implementation knows nothing about the magic of DI or any frameworks. Let's glue it all together​ Add the Pure.DI package to your project: Let's bind the abstractions to their implementations and set up the creation of the object graph: DI.Setup(nameof(Composition)) // Models a random subatomic event that may or may not occur .Bind().As(Singleton).To&lt;Random&gt;() // Quantum superposition of two states: Alive or Dead .Bind().To((Random random) =&gt; (State)random.Next(2)) .Bind().To&lt;ShroedingersCat&gt;() // Cardboard box with any contents .Bind().To&lt;CardboardBox&lt;TT&gt;&gt;() // Composition Root .Root&lt;Program&gt;(&quot;Root&quot;); [!NOTE] In fact, the Bind().As(Singleton).To&lt;Random&gt;() binding is unnecessary since Pure.DI supports many .NET BCL types out of the box, including Random. It was added just for the example of using the Singleton lifetime. The above code specifies the generation of a partial class named Composition, this name is defined in the DI.Setup(nameof(Composition)) call. This class contains a Root property that returns a graph of objects with an object of type Program as the root. The type and name of the property is defined by calling Root&lt;Program&gt;(&quot;Root&quot;). The code of the generated class looks as follows: partial class Composition { private Lock _lock = new Lock(); private Random? _random; public Program Root { [MethodImpl(MethodImplOptions.AggressiveInlining)] get { var stateFunc = new Func&lt;State&gt;(() =&gt; { if (_random is null) using (_lock.EnterScope()) if (_random is null) _random = new Random(); return (State)_random.Next(2) }); return new Program( new CardboardBox&lt;ICat&gt;( new ShroedingersCat( new Lazy&lt;State&gt;( stateFunc)))); } } public T Resolve&lt;T&gt;() { ... } public object Resolve(Type type) { ... } } Obviously, this code does not depend on other libraries, does not use type reflection or any other tricks that can negatively affect performance and memory consumption. It looks like an efficient code written by hand. At any given time, you can study it and understand how it works. The public Program Root { get; } property here is a Composition Root, the only place in the application where the composition of the object graph for the application takes place. Each instance is created by only basic language constructs, which compiles with all optimizations with minimal impact on performance and memory consumption. In general, applications may have multiple composition roots and thus such properties. Each composition root must have its own unique name, which is defined when the Root&lt;T&gt;(string name) method is called, as shown in the above code. Time to open boxes!​ class Program(IBox&lt;ICat&gt; box) { // Composition Root, a single place in an application // where the composition of the object graphs // for an application take place static void Main() =&gt; new Composition().Root.Run(); private void Run() =&gt; Console.WriteLine(box); } Pure.DI creates efficient code in a pure DI paradigm, using only basic language constructs as if you were writing code by hand. This allows you to take full advantage of Dependency Injection everywhere and always, without any compromise! The full analog of this application with top-level statements can be found here. Just try creating a project from scratch! Install the projects template dotnet new install Pure.DI.Templates In some directory, create a console application dotnet new di And run it dotnet run Examples​ Basics​ Auto-bindingsInjections of abstractionsComposition rootsResolve methodsSimplified bindingFactorySimplified factoryClass argumentsRoot argumentsTagsSmart tagsBuild up of an existing objectField injectionMethod injectionProperty injectionDefault valuesRequired properties or fieldsRoot bindingAsync RootConsumer types Lifetimes​ TransientSingletonPerResolvePerBlockScopeAuto scopedDefault lifetimeDefault lifetime for a typeDefault lifetime for a type and a tagDisposable singletonAsync disposable singletonAsync disposable scope Base Class Library​ FuncEnumerableEnumerable genericsArrayLazyTaskValueTaskManually started tasksSpan and ReadOnlySpanTupleWeak ReferenceAsync EnumerableService collectionFunc with argumentsFunc with tagKeyed service providerService providerService provider with scopeOverriding the BCL binding Generics​ GenericsGeneric composition rootsComplex genericsGeneric composition roots with constraintsGeneric async composition roots with constraintsCustom generic argumentBuild up of an existing generic objectGeneric root arguments Attributes​ Constructor ordinal attributeMember ordinal attributeTag attributeType attributeInject attributeCustom attributesCustom universal attributeCustom generic argument attributeBind attributeBind attribute with lifetime and tagBind attribute for a generic type Interception​ DecoratorInterceptionAdvanced interception Hints​ Resolve hintThreadSafe hintOnDependencyInjection hintOnCannotResolve hintOnNewInstance hintToString hintCheck for a root Advanced​ Composition root kindsTag TypeTag UniqueTag on injection siteTag on a constructor argumentTag on a memberTag on a method argumentTag on injection site with wildcardsDependent compositionsAccumulatorsGlobal compositionsPartial classA few partial classesTracking disposable instances per a composition rootTracking disposable instances in delegatesTracking disposable instances using pre-built classesTracking disposable instances with different lifetimesTracking async disposable instances per a composition rootTracking async disposable instances in delegatesExposed rootsExposed roots with tagsExposed roots via argExposed roots via root argExposed generic rootsExposed generic roots with argsDI tracing via serilog Applications​ Console Schrödinger's catTop level statementsNative AOT UI MAUIWPFAvaloniaWin Forms Net CoreWin Forms Web WebMinimal Web APIWeb APIgRPC serviceBlazor ServerBlazor WebAssembly https://devteam.github.io/Pure.DI/ Git repo with examples Schrödinger's catHow to use Pure.DI to create and test libraries Generated Code​ Each generated class, hereafter called a composition, must be customized. Setup starts with a call to the Setup(string compositionTypeName) method: DI.Setup(&quot;Composition&quot;) .Bind&lt;IDependency&gt;().To&lt;Dependency&gt;() .Bind&lt;IService&gt;().To&lt;Service&gt;() .Root&lt;IService&gt;(&quot;Root&quot;); The following class will be generated partial class Composition { // Default constructor public Composition() { } // Scope constructor internal Composition(Composition parentScope) { } // Composition root public IService Root { get { return new Service(new Dependency()); } } public T Resolve&lt;T&gt;() { ... } public T Resolve&lt;T&gt;(object? tag) { ... } public object Resolve(Type type) { ... } public object Resolve(Type type, object? tag) { ... } } The compositionTypeName parameter can be omitted if the setup is performed inside a partial class, then the composition will be created for this partial classfor the case of a class with composition kind CompositionKind.Global, see this example Setup arguments The first parameter is used to specify the name of the composition class. All sets with the same name will be combined to create one composition class. Alternatively, this name may contain a namespace, e.g. a composition class is generated for Sample.Composition: namespace Sample { partial class Composition { ... } } The second optional parameter may have multiple values to determine the kind of composition. CompositionKind.Public​ This value is used by default. If this value is specified, a normal composition class will be created. CompositionKind.Internal​ If you specify this value, the class will not be generated, but this setup can be used by others as a base setup. For example: DI.Setup(&quot;BaseComposition&quot;, CompositionKind.Internal) .Bind().To&lt;Dependency&gt;(); DI.Setup(&quot;Composition&quot;).DependsOn(&quot;BaseComposition&quot;) .Bind().To&lt;Service&gt;(); If the CompositionKind.Public flag is set in the composition setup, it can also be the base for other compositions, as in the example above. CompositionKind.Global​ No composition class will be created when this value is specified, but this setup is the base setup for all setups in the current project, and DependsOn(...) is not required. Constructors Default constructor​ It's quite trivial, this constructor simply initializes the internal state. Parameterized constructor​ It replaces the default constructor and is only created if at least one argument is specified. For example: DI.Setup(&quot;Composition&quot;) .Arg&lt;string&gt;(&quot;name&quot;) .Arg&lt;int&gt;(&quot;id&quot;) ... In this case, the constructor with arguments is as follows: public Composition(string name, int id) { ... } and there is no default constructor. It is important to remember that only those arguments that are used in the object graph will appear in the constructor. Arguments that are not involved cannot be defined, as they are omitted from the constructor parameters to save resources. Scope constructor​ This constructor creates a composition instance for the new scope. This allows Lifetime.Scoped to be applied. See this example for details. Composition Roots Public Composition Roots​ To create an object graph quickly and conveniently, a set of properties (or a methods) is formed. These properties/methods are here called roots of compositions. The type of a property/method is the type of the root object created by the composition. Accordingly, each invocation of a property/method leads to the creation of a composition with a root element of this type. DI.Setup(&quot;Composition&quot;) .Bind&lt;IService&gt;().To&lt;Service&gt;() .Root&lt;IService&gt;(&quot;MyService&quot;); In this case, the property for the IService type will be named MyService and will be available for direct use. The result of its use will be the creation of a composition of objects with the root of IService type: public IService MyService { get { ... return new Service(...); } } This is recommended way to create a composition root. A composition class can contain any number of roots. Private Composition Roots​ If the root name is empty, a private composition root with a random name is created: private IService RootM07D16di_0001 { get { ... } } This root is available in Resolve methods in the same way as public roots. For example: DI.Setup(&quot;Composition&quot;) .Bind&lt;IService&gt;().To&lt;Service&gt;() .Root&lt;IService&gt;(); These properties have an arbitrary name and access modifier private and cannot be used directly from the code. Do not attempt to use them, as their names are arbitrarily changed. Private composition roots can be resolved by Resolve methods. Methods &quot;Resolve&quot; Methods &quot;Resolve&quot;​ By default, a set of four Resolve methods is generated: public T Resolve&lt;T&gt;() { ... } public T Resolve&lt;T&gt;(object? tag) { ... } public object Resolve(Type type) { ... } public object Resolve(Type type, object? tag) { ... } These methods can resolve both public and private composition roots that do not depend on any arguments of the composition roots. They are useful when using the Service Locator approach, where the code resolves composition roots in place: var composition = new Composition(); composition.Resolve&lt;IService&gt;(); This is a not recommended way to create composition roots because Resolve methods have a number of disadvantages: They provide access to an unlimited set of dependencies.Their use can potentially lead to runtime exceptions, for example, when the corresponding root has not been defined.Lead to performance degradation because they search for the root of a composition based on its type. To control the generation of these methods, see the Resolve hint. Dispose and DisposeAsync​ Provides a mechanism to release unmanaged resources. These methods are generated only if the composition contains at least one singleton/scoped instance that implements either the IDisposable and/or DisposeAsync interface. The Dispose() or DisposeAsync() method of the composition should be called to dispose of all created singleton/scoped objects: using var composition = new Composition(); or await using var composition = new Composition(); To dispose objects of other lifetimes please see this or this examples. Setup hints Setup hints​ Hints are used to fine-tune code generation. Setup hints can be used as shown in the following example: DI.Setup(&quot;Composition&quot;) .Hint(Hint.Resolve, &quot;Off&quot;) .Hint(Hint.ThreadSafe, &quot;Off&quot;) .Hint(Hint.ToString, &quot;On&quot;) ... In addition, setup hints can be commented out before the Setup method as hint = value. For example: // Resolve = Off // ThreadSafe = Off DI.Setup(&quot;Composition&quot;) ... Both approaches can be mixed: // Resolve = Off DI.Setup(&quot;Composition&quot;) .Hint(Hint.ThreadSafe, &quot;Off&quot;) ... Hint\tValues\tC# version\tDefaultResolve\tOn or Off On OnNewInstance\tOn or Off\t9.0\tOff OnNewInstancePartial\tOn or Off On OnNewInstanceImplementationTypeNameRegularExpression\tRegular expression .+ OnNewInstanceTagRegularExpression\tRegular expression .+ OnNewInstanceLifetimeRegularExpression\tRegular expression .+ OnDependencyInjection\tOn or Off\t9.0\tOff OnDependencyInjectionPartial\tOn or Off On OnDependencyInjectionImplementationTypeNameRegularExpression\tRegular expression .+ OnDependencyInjectionContractTypeNameRegularExpression\tRegular expression .+ OnDependencyInjectionTagRegularExpression\tRegular expression .+ OnDependencyInjectionLifetimeRegularExpression\tRegular expression .+ OnCannotResolve\tOn or Off\t9.0\tOff OnCannotResolvePartial\tOn or Off On OnCannotResolveContractTypeNameRegularExpression\tRegular expression .+ OnCannotResolveTagRegularExpression\tRegular expression .+ OnCannotResolveLifetimeRegularExpression\tRegular expression .+ OnNewRoot\tOn or Off Off OnNewRootPartial\tOn or Off On ToString\tOn or Off Off ThreadSafe\tOn or Off On ResolveMethodModifiers\tMethod modifier public ResolveMethodName\tMethod name Resolve ResolveByTagMethodModifiers\tMethod modifier public ResolveByTagMethodName\tMethod name Resolve ObjectResolveMethodModifiers\tMethod modifier public ObjectResolveMethodName\tMethod name Resolve ObjectResolveByTagMethodModifiers\tMethod modifier public ObjectResolveByTagMethodName\tMethod name Resolve DisposeMethodModifiers\tMethod modifier public DisposeAsyncMethodModifiers\tMethod modifier public FormatCode\tOn or Off Off SeverityOfNotImplementedContract\tError or Warning or Info or Hidden Error Comments\tOn or Off On The list of hints will be gradually expanded to meet the needs and desires for fine-tuning code generation. Please feel free to add your ideas. Resolve Hint​ Determines whether to generate Resolve methods. By default, a set of four Resolve methods are generated. Set this hint to Off to disable the generation of resolve methods. This will reduce the generation time of the class composition, and in this case no private composition roots will be generated. The class composition will be smaller and will only have public roots. When the Resolve hint is disabled, only the public roots properties are available, so be sure to explicitly define them using the Root&lt;T&gt;(string name) method with an explicit composition root name. OnNewInstance Hint​ Determines whether to use the OnNewInstance partial method. By default, this partial method is not generated. This can be useful, for example, for logging purposes: internal partial class Composition { partial void OnNewInstance&lt;T&gt;(ref T value, object? tag, object lifetime) =&gt; Console.WriteLine($&quot;'{typeof(T)}'('{tag}') created.&quot;); } You can also replace the created instance with a T type, where T is the actual type of the created instance. To minimize performance loss when calling OnNewInstance, use the three hints below. OnNewInstancePartial Hint​ Determines whether to generate the OnNewInstance partial method. By default, this partial method is generated when the OnNewInstance hint is On. OnNewInstanceImplementationTypeNameRegularExpression Hint​ This is a regular expression for filtering by instance type name. This hint is useful when OnNewInstance is in On state and it is necessary to limit the set of types for which the OnNewInstance method will be called. OnNewInstanceTagRegularExpression Hint​ This is a regular expression for filtering by tag. This hint is also useful when OnNewInstance is in On state and it is necessary to limit the set of tags for which the OnNewInstance method will be called. OnNewInstanceLifetimeRegularExpression Hint​ This is a regular expression for filtering by lifetime. This hint is also useful when OnNewInstance is in On state and it is necessary to restrict the set of life times for which the OnNewInstance method will be called. OnDependencyInjection Hint​ Determines whether to use the OnDependencyInjection partial method when the OnDependencyInjection hint is On to control dependency injection. By default it is On. // OnDependencyInjection = On // OnDependencyInjectionPartial = Off // OnDependencyInjectionContractTypeNameRegularExpression = ICalculator[\\d]{1} // OnDependencyInjectionTagRegularExpression = Abc DI.Setup(&quot;Composition&quot;) ... OnDependencyInjectionPartial Hint​ Determines whether to generate the OnDependencyInjection partial method to control dependency injection. By default, this partial method is not generated. It cannot have an empty body because of the return value. It must be overridden when it is generated. This may be useful, for example, for Interception Scenario. // OnDependencyInjection = On // OnDependencyInjectionContractTypeNameRegularExpression = ICalculator[\\d]{1} // OnDependencyInjectionTagRegularExpression = Abc DI.Setup(&quot;Composition&quot;) ... To minimize performance loss when calling OnDependencyInjection, use the three tips below. OnDependencyInjectionImplementationTypeNameRegularExpression Hint​ This is a regular expression for filtering by instance type name. This hint is useful when OnDependencyInjection is in On state and it is necessary to restrict the set of types for which the OnDependencyInjection method will be called. OnDependencyInjectionContractTypeNameRegularExpression Hint​ This is a regular expression for filtering by the name of the resolving type. This hint is also useful when OnDependencyInjection is in On state and it is necessary to limit the set of permissive types for which the OnDependencyInjection method will be called. OnDependencyInjectionTagRegularExpression Hint​ This is a regular expression for filtering by tag. This hint is also useful when OnDependencyInjection is in the On state and you want to limit the set of tags for which the OnDependencyInjection method will be called. OnDependencyInjectionLifetimeRegularExpression Hint​ This is a regular expression for filtering by lifetime. This hint is also useful when OnDependencyInjection is in On state and it is necessary to restrict the set of lifetime for which the OnDependencyInjection method will be called. OnCannotResolve Hint​ Determines whether to use the OnCannotResolve&lt;T&gt;(...) partial method to handle a scenario in which an instance cannot be resolved. By default, this partial method is not generated. Because of the return value, it cannot have an empty body and must be overridden at creation. // OnCannotResolve = On // OnCannotResolveContractTypeNameRegularExpression = string|DateTime // OnDependencyInjectionTagRegularExpression = null DI.Setup(&quot;Composition&quot;) ... To avoid missing failed bindings by mistake, use the two relevant hints below. OnCannotResolvePartial Hint​ Determines whether to generate the OnCannotResolve&lt;T&gt;(...) partial method when the OnCannotResolve hint is On to handle a scenario in which an instance cannot be resolved. By default it is On. // OnCannotResolve = On // OnCannotResolvePartial = Off // OnCannotResolveContractTypeNameRegularExpression = string|DateTime // OnDependencyInjectionTagRegularExpression = null DI.Setup(&quot;Composition&quot;) ... To avoid missing failed bindings by mistake, use the two relevant hints below. OnNewRoot Hint​ Determines whether to use a static partial method OnNewRoot&lt;TContract, T&gt;(...) to handle the new composition root registration event. // OnNewRoot = On DI.Setup(&quot;Composition&quot;) ... Be careful, this hint disables checks for the ability to resolve dependencies! OnNewRootPartial Hint​ Determines whether to generate a static partial method OnNewRoot&lt;TContract, T&gt;(...) when the OnNewRoot hint is On to handle the new composition root registration event. // OnNewRootPartial = Off DI.Setup(&quot;Composition&quot;) ... OnCannotResolveContractTypeNameRegularExpression Hint​ This is a regular expression for filtering by the name of the resolving type. This hint is also useful when OnCannotResolve is in On state and it is necessary to limit the set of resolving types for which the OnCannotResolve method will be called. OnCannotResolveTagRegularExpression Hint​ This is a regular expression for filtering by tag. This hint is also useful when OnCannotResolve is in On state and it is necessary to limit the set of tags for which the OnCannotResolve method will be called. OnCannotResolveLifetimeRegularExpression Hint​ This is a regular expression for filtering by lifetime. This hint is also useful when OnCannotResolve is in the On state and it is necessary to restrict the set of lives for which the OnCannotResolve method will be called. ToString Hint​ Determines whether to generate the ToString() method. This method provides a class diagram in mermaid format. To see this diagram, just call the ToString method and copy the text to this site. // ToString = On DI.Setup(&quot;Composition&quot;) .Bind&lt;IService&gt;().To&lt;Service&gt;() .Root&lt;IService&gt;(&quot;MyService&quot;); var composition = new Composition(); string classDiagram = composition.ToString(); ThreadSafe Hint​ This hint determines whether the composition of objects will be created in a thread-safe way. The default value of this hint is On. It is a good practice not to use threads when creating an object graph, in this case the hint can be disabled, which will result in a small performance gain. For example: // ThreadSafe = Off DI.Setup(&quot;Composition&quot;) .Bind&lt;IService&gt;().To&lt;Service&gt;() .Root&lt;IService&gt;(&quot;MyService&quot;); ResolveMethodModifiers Hint​ Overrides the modifiers of the public T Resolve&lt;T&gt;() method. ResolveMethodName Hint​ Overrides the method name for public T Resolve&lt;T&gt;(). ResolveByTagMethodModifiers Hint​ Overrides the modifiers of the public T Resolve&lt;T&gt;(object? tag) method. ResolveByTagMethodName Hint​ Overrides the method name for public T Resolve&lt;T&gt;(object? tag). ObjectResolveMethodModifiers Hint​ Overrides the modifiers of the public object Resolve(Type type) method. ObjectResolveMethodName Hint​ Overrides the method name for public object Resolve(Type type). ObjectResolveByTagMethodModifiers Hint​ Overrides the modifiers of the public object Resolve(Type type, object? tag) method. ObjectResolveByTagMethodName Hint​ Overrides the method name for public object Resolve(Type type, object? tag). DisposeMethodModifiers Hint​ Overrides the modifiers of the public void Dispose() method. DisposeAsyncMethodModifiers Hint​ Overrides the modifiers of the public ValueTask DisposeAsync() method. FormatCode Hint​ Specifies whether the generated code should be formatted. This option consumes a lot of CPU resources. This hint may be useful when studying the generated code or, for example, when making presentations. SeverityOfNotImplementedContract Hint​ Indicates the severity level of the situation when, in the binding, an implementation does not implement a contract. Possible values: &quot;Error&quot;, it is default value.&quot;Warning&quot; - something suspicious but allowed.&quot;Info&quot; - information that does not indicate a problem.&quot;Hidden&quot; - what's not a problem. Comments Hint​ Specifies whether the generated code should be commented. // Represents the composition class DI.Setup(nameof(Composition)) .Bind&lt;IService&gt;().To&lt;Service&gt;() // Provides a composition root of my service .Root&lt;IService&gt;(&quot;MyService&quot;); Appropriate comments will be added to the generated Composition class and the documentation for the class, depending on the IDE used, will look something like this: Then documentation for the composition root: NuGet packages​ Pure.DI DI Source code generator Pure.DI.Abstractions Abstractions for Pure.DI Pure.DI.Templates Template Package you can call from the shell/command line. Pure.DI.MS Tools for working with Microsoft DI Project template​ Install the DI template Pure.DI.Templates dotnet new install Pure.DI.Templates Create a &quot;Sample&quot; console application from the template di dotnet new di -o ./Sample And run it dotnet run --project Sample For more information about the template, please see this page. Troubleshooting​ Version update When updating the version, it is possible that the previous version of the code generator remains active and is used by compilation services. In this case, the old and new versions of the generator may conflict. For a project where the code generator is used, it is recommended to do the following: After updating the version, close the IDE if it is openDelete the obj and bin directoriesExecute the following commands one by one dotnet build-server shutdown dotnet restore dotnet build Disabling API generation Pure.DI automatically generates its API. If an assembly already has the Pure.DI API, for example, from another assembly, it is sometimes necessary to disable its automatic generation to avoid ambiguity. To do this, you need to add a DefineConstants element to the project files of these modules. For example: &lt;PropertyGroup&gt; &lt;DefineConstants&gt;$(DefineConstants);PUREDI_API_SUPPRESSION&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; Display generated files You can set project properties to save generated files and control their storage location. In the project file, add the &lt;EmitCompilerGeneratedFiles&gt; element to the &lt;PropertyGroup&gt; group and set its value to true. Build the project again. The generated files are now created in the obj/Debug/netX.X/generated/Pure.DI/Pure.DI/Pure.DI.SourceGenerator directory. The path components correspond to the build configuration, the target framework, the source generator project name, and the full name of the generator type. You can choose a more convenient output folder by adding the &lt;CompilerGeneratedFilesOutputPath&gt; element to the application project file. For example: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt; Contribution​ Thank you for your interest in contributing to the Pure.DI project! First of all, if you are going to make a big change or feature, please open a problem first. That way, we can coordinate and understand if the change you're going to work on fits with current priorities and if we can commit to reviewing and merging it within a reasonable timeframe. We don't want you to waste a lot of your valuable time on something that may not align with what we want for Pure.DI. Contribution prerequisites: .NET SDK 9.0 or later is installed. The entire build logic is a regular console .NET application. You can use the build.cmd and build.sh files with the appropriate command in the parameters to perform all basic actions on the project, e.g: Command\tDescriptiong, generator\tBuilds and tests generator l, libs\tBuilds and tests libraries c, check\tCompatibility checks p, pack\tCreates NuGet packages r, readme\tGenerates README.md benchmarks, bm\tRuns benchmarks deploy, dp\tDeploys packages t, template\tCreates and deploys templates u, upgrade\tUpgrading the internal version of DI to the latest public version For example: ./build.sh pack ./build.cmd benchmarks If you are using the Rider IDE, it already has a set of configurations to run these commands. This project uses C# interactive build automation system for .NET. This tool helps to make .NET builds more efficient. Additional resources​ Examples of how to set up a composition Pure.DIC# interactiveImmutypeMSBuild logger Articles RU New in Pure.DIRU Pure.DI v2.1RU Pure.DI next stepRU Pure.DI for .NET RU DotNext video Benchmarks environment BenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.4894/22H2/2022Update) AMD Ryzen 9 5900X, 1 CPU, 24 logical and 12 physical cores .NET SDK 9.0.100 [Host] : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2 DefaultJob : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#about","content":" note Constructing injecting container  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabaseCon.csDatabase.csIDatabase.cs This is the CSharp Project that references Pure.DI &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Pure.DI&quot; Version=&quot;2.1.44&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Composition.g.csPure.DI.Components.Api.g.csPure.DI.Components.GenericTypeArguments.g.csPure.DI.Features.Default.g.cs // &lt;auto-generated/&gt; // by Pure.DI 2.1.44+4da6876f3ecd7c34771553d8409b829e287d3041 #nullable enable annotations using Pure.DI; using System; using System.Buffers; using System.Collections.Concurrent; using System.Collections.Generic; using System.Text; using System.Threading; using System.Threading.Tasks; /// &lt;summary&gt; /// &lt;para&gt; /// &lt;b&gt;Composition roots:&lt;/b&gt;&lt;br/&gt; /// &lt;list type=&quot;bullet&quot;&gt; /// &lt;item&gt; /// &lt;term&gt; /// Private composition root of type &lt;see cref=&quot;InjectDemo.Database&quot;/&gt;. It can be resolved by &lt;see cref=&quot;Resolve{T}()&quot;/&gt; method: &lt;c&gt;Resolve&amp;lt;global::InjectDemo.Database&amp;gt;()&lt;/c&gt; /// &lt;/term&gt; /// &lt;description&gt; /// Provides a composition root of type &lt;see cref=&quot;InjectDemo.Database&quot;/&gt;. /// &lt;/description&gt; /// &lt;/item&gt; /// &lt;/list&gt; /// &lt;/para&gt; /// &lt;br/&gt; /// &lt;br/&gt;This class was created by &lt;a href=&quot;https://github.com/DevTeam/Pure.DI&quot;&gt;Pure.DI&lt;/a&gt; source code generator. /// &lt;/summary&gt; #if !NET20 &amp;&amp; !NET35 &amp;&amp; !NETSTANDARD1_0 &amp;&amp; !NETSTANDARD1_1 &amp;&amp; !NETSTANDARD1_2 &amp;&amp; !NETSTANDARD1_3 &amp;&amp; !NETSTANDARD1_4 &amp;&amp; !NETSTANDARD1_5 &amp;&amp; !NETSTANDARD1_6 &amp;&amp; !NETCOREAPP1_0 &amp;&amp; !NETCOREAPP1_1 [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] #endif partial class Composition { private readonly Composition _rootM07D21di; /// &lt;summary&gt; /// This constructor creates a new instance of &lt;see cref=&quot;Composition&quot;/&gt;. /// &lt;/summary&gt; [global::Pure.DI.OrdinalAttribute(256)] public Composition() { _rootM07D21di = this; } /// &lt;summary&gt; /// This constructor creates a new instance of &lt;see cref=&quot;Composition&quot;/&gt; scope based on &lt;paramref name=&quot;parentScope&quot;/&gt;. This allows the &lt;see cref=&quot;Lifetime.Scoped&quot;/&gt; life time to be applied. /// &lt;/summary&gt; /// &lt;param name=&quot;parentScope&quot;&gt;Scope parent.&lt;/param&gt; internal Composition(Composition parentScope) { _rootM07D21di = (parentScope ?? throw new global::System.ArgumentNullException(nameof(parentScope)))._rootM07D21di; } #region Roots /// &lt;summary&gt; /// &lt;para&gt; /// Provides a composition root of type &lt;see cref=&quot;InjectDemo.Database&quot;/&gt;. /// &lt;/para&gt; /// &lt;/summary&gt; private global::InjectDemo.Database RootM07D21di1 { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return new global::InjectDemo.Database(new global::InjectDemo.DatabaseCon()); } } #endregion #region API /// &lt;summary&gt; /// Resolves the composition root. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;The type of the composition root.&lt;/typeparam&gt; /// &lt;returns&gt;A composition root.&lt;/returns&gt; #if NETSTANDARD2_0_OR_GREATER || NETCOREAPP || NET40_OR_GREATER || NET [global::System.Diagnostics.Contracts.Pure] #endif [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public T Resolve&lt;T&gt;() { return ResolverM07D21di&lt;T&gt;.Value.Resolve(this); } /// &lt;summary&gt; /// Resolves the composition root by tag. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;The type of the composition root.&lt;/typeparam&gt; /// &lt;param name=&quot;tag&quot;&gt;The tag of a composition root.&lt;/param&gt; /// &lt;returns&gt;A composition root.&lt;/returns&gt; #if NETSTANDARD2_0_OR_GREATER || NETCOREAPP || NET40_OR_GREATER || NET [global::System.Diagnostics.Contracts.Pure] #endif [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public T Resolve&lt;T&gt;(object? tag) { return ResolverM07D21di&lt;T&gt;.Value.ResolveByTag(this, tag); } /// &lt;summary&gt; /// Resolves the composition root. /// &lt;/summary&gt; /// &lt;param name=&quot;type&quot;&gt;The type of the composition root.&lt;/param&gt; /// &lt;returns&gt;A composition root.&lt;/returns&gt; #if NETSTANDARD2_0_OR_GREATER || NETCOREAPP || NET40_OR_GREATER || NET [global::System.Diagnostics.Contracts.Pure] #endif [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public object Resolve(global::System.Type type) { var index = (int)(_bucketSizeM07D21di * ((uint)global::System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(type) % 1)); ref var pair = ref _bucketsM07D21di[index]; return pair.Key == type ? pair.Value.Resolve(this) : ResolveM07D21di(type, index); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)] private object ResolveM07D21di(global::System.Type type, int index) { var finish = index + _bucketSizeM07D21di; while (++index &lt; finish) { ref var pair = ref _bucketsM07D21di[index]; if (pair.Key == type) { return pair.Value.Resolve(this); } } throw new global::System.InvalidOperationException($&quot;{CannotResolveMessageM07D21di} {OfTypeMessageM07D21di} {type}.&quot;); } /// &lt;summary&gt; /// Resolves the composition root by tag. /// &lt;/summary&gt; /// &lt;param name=&quot;type&quot;&gt;The type of the composition root.&lt;/param&gt; /// &lt;param name=&quot;tag&quot;&gt;The tag of a composition root.&lt;/param&gt; /// &lt;returns&gt;A composition root.&lt;/returns&gt; #if NETSTANDARD2_0_OR_GREATER || NETCOREAPP || NET40_OR_GREATER || NET [global::System.Diagnostics.Contracts.Pure] #endif [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public object Resolve(global::System.Type type, object? tag) { var index = (int)(_bucketSizeM07D21di * ((uint)global::System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(type) % 1)); ref var pair = ref _bucketsM07D21di[index]; return pair.Key == type ? pair.Value.ResolveByTag(this, tag) : ResolveM07D21di(type, tag, index); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)] private object ResolveM07D21di(global::System.Type type, object? tag, int index) { var finish = index + _bucketSizeM07D21di; while (++index &lt; finish) { ref var pair = ref _bucketsM07D21di[index]; if (pair.Key == type) { return pair.Value.ResolveByTag(this, tag); } } throw new global::System.InvalidOperationException($&quot;{CannotResolveMessageM07D21di} \\&quot;{tag}\\&quot; {OfTypeMessageM07D21di} {type}.&quot;); } #endregion private readonly static int _bucketSizeM07D21di; private readonly static global::Pure.DI.Pair&lt;global::System.Type, global::Pure.DI.IResolver&lt;Composition, object&gt;&gt;[] _bucketsM07D21di; static Composition() { var valResolverM07D21di_0000 = new ResolverM07D21di_0000(); ResolverM07D21di&lt;global::InjectDemo.Database&gt;.Value = valResolverM07D21di_0000; _bucketsM07D21di = global::Pure.DI.Buckets&lt;global::System.Type, global::Pure.DI.IResolver&lt;Composition, object&gt;&gt;.Create( 1, out _bucketSizeM07D21di, new global::Pure.DI.Pair&lt;global::System.Type, global::Pure.DI.IResolver&lt;Composition, object&gt;&gt;[1] { new global::Pure.DI.Pair&lt;global::System.Type, global::Pure.DI.IResolver&lt;Composition, object&gt;&gt;(typeof(InjectDemo.Database), valResolverM07D21di_0000) }); } #region Resolvers private const string CannotResolveMessageM07D21di = &quot;Cannot resolve composition root &quot;; private const string OfTypeMessageM07D21di = &quot;of type &quot;; private class ResolverM07D21di&lt;T&gt;: global::Pure.DI.IResolver&lt;Composition, T&gt; { public static global::Pure.DI.IResolver&lt;Composition, T&gt; Value = new ResolverM07D21di&lt;T&gt;(); public virtual T Resolve(Composition composite) { throw new global::System.InvalidOperationException($&quot;{CannotResolveMessageM07D21di}{OfTypeMessageM07D21di}{typeof(T)}.&quot;); } public virtual T ResolveByTag(Composition composite, object tag) { throw new global::System.InvalidOperationException($&quot;{CannotResolveMessageM07D21di}\\&quot;{tag}\\&quot; {OfTypeMessageM07D21di}{typeof(T)}.&quot;); } } private sealed class ResolverM07D21di_0000: ResolverM07D21di&lt;InjectDemo.Database&gt; { public override InjectDemo.Database Resolve(Composition composition) { return composition.RootM07D21di1; } public override InjectDemo.Database ResolveByTag(Composition composition, object tag) { switch (tag) { case null: return composition.RootM07D21di1; default: return base.ResolveByTag(composition, tag); } } } #endregion }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#download-example-net--c","content":" tip Download Example project Pure.DI   ","version":"Next","tagName":"h3"},{"title":"Share Pure.DI​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#share-puredi","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Pure.DI  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Pure.DI by Nikolay Pianikov","url":"/RSCG_Examples/v2/docs/Pure.DI#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#info","content":" info Name: ServiceScan.SourceGenerator Package Description Author: Oleksandr Liakhevych NuGet:https://www.nuget.org/packages/ServiceScan.SourceGenerator/ You can find more details at https://github.com/Dreamescaper/ServiceScan.SourceGenerator Source: https://github.com/Dreamescaper/ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#original-readme","content":" note ServiceScan.SourceGenerator Source generator for services registrations inspired by Scrutor. Code generation allows to have AOT-compatible code, without an additional hit on startup performance due to runtime assembly scanning. Installation​ Add the NuGet Package to your project: dotnet add package ServiceScan.SourceGenerator Usage​ ServiceScan generates a partial method implementation based on GenerateServiceRegistrations attribute. This attribute can be added to a partial method with IServiceCollection parameter. For example, based on the following partial method: public static partial class ServicesExtensions { [GenerateServiceRegistrations(AssignableTo = typeof(IMyService), Lifetime = ServiceLifetime.Scoped)] public static partial IServiceCollection AddServices(this IServiceCollection services); } ServiceScan will generate the following implementation: public static partial class ServicesExtensions { public static partial IServiceCollection AddServices(this IServiceCollection services) { return services .AddScoped&lt;IMyService, ServiceImplementation1&gt;() .AddScoped&lt;IMyService, ServiceImplementation2&gt;(); } } The only thing left is to invoke this method on your IServiceCollection instance. Examples​ Register all FluentValidation validators​ Unlike using FluentValidation.DependencyInjectionExtensions package, ServiceScan is AOT-compatible, and doesn't affect startup performance: [GenerateServiceRegistrations(AssignableTo = typeof(IValidator&lt;&gt;), Lifetime = ServiceLifetime.Singleton)] public static partial IServiceCollection AddValidators(this IServiceCollection services); Add MediatR handlers​ public static IServiceCollection AddMediatR(this IServiceCollection services) { return services .AddTransient&lt;IMediator, Mediator&gt;() .AddMediatRHandlers(); } [GenerateServiceRegistrations(AssignableTo = typeof(IRequestHandler&lt;&gt;), Lifetime = ServiceLifetime.Transient)] [GenerateServiceRegistrations(AssignableTo = typeof(IRequestHandler&lt;,&gt;), Lifetime = ServiceLifetime.Transient)] private static partial IServiceCollection AddMediatRHandlers(this IServiceCollection services); It adds MediatR handlers, which would work for simple cases, although you might need to add other types like PipelineBehaviors or NotificationHandlers. Add all repository types from your project based on name filter as their implemented interfaces:​ [GenerateServiceRegistrations( TypeNameFilter = &quot;*Repository&quot;, AsImplemetedInterfaces = true, Lifetime = ServiceLifetime.Scoped)] private static partial IServiceCollection AddRepositories(this IServiceCollection services); Parameters​ GenerateServiceRegistrations attribute has the following properties: Property\tDescriptionFromAssemblyOf\tSet the assembly containing the given type as the source of types to register. If not specified, the assembly containing the method with this attribute will be used. AssignableTo\tSet the type that the registered types must be assignable to. Types will be registered with this type as the service type, unless AsImplementedInterfaces or AsSelf is set. Lifetime\tSet the lifetime of the registered services. ServiceLifetime.Transient is used if not specified. AsImplementedInterfaces\tIf true, the registered types will be registered as implemented interfaces instead of their actual type. AsSelf\tIf true, types will be registered with their actual type. It can be combined with AsImplementedInterfaces. In that case implemeted interfaces will be &quot;forwarded&quot; to an actual implementation type TypeNameFilter\tSet this value to filter the types to register by their full name. You can use '*' wildcards. You can also use ',' to separate multiple filters.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#about","content":" note Generating service collection / DI registration  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.csDatabaseCon.cs This is the CSharp Project that references ServiceScan.SourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ServiceScan.SourceGenerator&quot; Version=&quot;1.1.2&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;8.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  GenerateServiceRegistrationsAttribute.Generated.csMyServiceProvider_AddMyServices.Generated.cs #nullable enable using System; using System.Diagnostics; using Microsoft.Extensions.DependencyInjection; namespace ServiceScan.SourceGenerator; [Conditional(&quot;CODE_ANALYSIS&quot;)] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] internal class GenerateServiceRegistrationsAttribute : Attribute { /// &lt;summary&gt; /// Set the assembly containing the given type as the source of types to register. /// If not specified, the assembly containing the method with this attribute will be used. /// &lt;/summary&gt; public Type? FromAssemblyOf { get; set; } /// &lt;summary&gt; /// Set the type that the registered types must be assignable to. /// Types will be registered with this type as the service type, /// unless &lt;see cref=&quot;AsImplementedInterfaces&quot;/&gt; or &lt;see cref=&quot;AsSelf&quot;/&gt; is set. /// &lt;/summary&gt; public Type? AssignableTo { get; set; } /// &lt;summary&gt; /// Set the lifetime of the registered services. /// &lt;see cref=&quot;ServiceLifetime.Transient&quot;/&gt; is used if not specified. /// &lt;/summary&gt; public ServiceLifetime Lifetime { get; set; } /// &lt;summary&gt; /// If set to true, types will be registered as implemented interfaces instead of their actual type. /// &lt;/summary&gt; public bool AsImplementedInterfaces { get; set; } /// &lt;summary&gt; /// If set to true, types will be registered with their actual type. /// It can be combined with &lt;see cref=&quot;AsImplementedInterfaces&quot;/&gt;, in that case implemeted interfaces will be /// &quot;forwarded&quot; to &quot;self&quot; implementation. /// &lt;/summary&gt; public bool AsSelf { get; set; } /// &lt;summary&gt; /// Set this value to filter the types to register by their full name. /// You can use '*' wildcards. /// You can also use ',' to separate multiple filters. /// &lt;/summary&gt; /// &lt;example&gt;Namespace.With.Services.*&lt;/example&gt; /// &lt;example&gt;*Service,*Factory&lt;/example&gt; public string? TypeNameFilter { get; set; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#download-example-net--c","content":" tip Download Example project ServiceScan.SourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share ServiceScan.SourceGenerator​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#share-servicescansourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"DependencyInjection\" has the following generators:​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#category-dependencyinjection-has-the-following-generators","content":" 1 AutoRegisterInject  2 BunnyTailServiceRegistration  3 DependencyModules.SourceGenerator  4 depso  5 FactoryGenerator  6 Injectio  7 jab  8 Pure.DI  9 ServiceScan.SourceGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ServiceScan.SourceGenerator by Oleksandr Liakhevych","url":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator#see-category","content":" DependencyInjection ","version":"Next","tagName":"h3"},{"title":"ShadowWriterBuilder by Stefan Stolz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#info","content":" info Name: ShadowWriterBuilder Leverage the capabilities of Roslyn source generators to help generate boilerplate code efficiently. Author: Stefan Stolz NuGet:https://www.nuget.org/packages/ShadowWriter/ You can find more details at https://github.com/StefanStolz/ShadowWriter Source: https://github.com/StefanStolz/ShadowWriter  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#original-readme","content":" note ShadowWriter ShadowWriter is a Roslyn Source Generator designed to simplify and automate aspects of .NET development. It currently supports the following features: ✨ Features​ Samples can be found in the Source-Code or in the Wiki. 1. Generate Null Objects​ The NullObject feature in ShadowWriter provides a simple way to automatically generate null object implementations for interfaces and classes. This pattern is useful for providing default &quot;do nothing&quot; implementations that can help avoid null reference exceptions and simplify code. Usage​ To create a null object implementation, simply add the [NullObject] attribute to your class: [NullObject] public partial class ImplementingMyInterface : IMyInterface { } 2. Inject Project Information​ Embeds values from the project file (*.csproj) directly into your source code. This is useful for build metadata, version numbers, or project-specific configuration. Available Properties​ The generated TheProject class provides the following static properties: Property\tDescription\tExampleFullPath\tThe complete path to the project file\t/path/to/YourProject.csproj ProjectDirectory\tThe directory containing the project file\t/path/to/ Name\tThe name of the project\tYourProject OutDir\tThe output directory for compiled artifacts\t/path/to/artifacts/bin/YourProject/debug/ Version\tThe current version of the project\t1.0.0 RootNamespace\tThe root namespace of the project\tYourProject Example Usage​ // Access project information anywhere in your code Console.WriteLine($&quot;Project Name: {TheProject.Name}&quot;); Console.WriteLine($&quot;Project Version: {TheProject.Version}&quot;); Console.WriteLine($&quot;Project Output Directory: {TheProject.OutDir}&quot;); 3. Experimental: Typed Access to EmbeddedResources​ Generates strongly typed wrappers for EmbeddedResources, allowing safe and convenient access to resources at runtime. ⚠️ Feature #3 is experimental and may change significantly in future versions. Details can be found in the Wiki. 4. Generate Builders for Records​ The Builder feature in ShadowWriter automatically generates builder classes for your record types. This significantly reduces boilerplate when constructing complex objects, especially with optional and nullable parameters or when you want to use a fluent API pattern for object creation. Usage​ To enable builder generation, simply annotate your partial record with the [Builder] attribute: [Builder] public partial record WithBuilder(int Number); The generator will create a corresponding builder class (e.g., WithBuilder.Builder) with mutable Properties for each Parameter. Examples​ A variety of record types are supported: // Record with a single value type [Builder] public partial record WithBuilder(int Number); The generated builder enables you to create instances using a clear, chainable API. For example: var builder = new WithBuilder.Builder(); builder.Number = 1; var item = builder.Build(); 📦 Installation​ You can install ShadowWriter via NuGet: dotnet package add ShadowWriter ⚙️ Usage ShadowWriter runs automatically during compilation. No manual setup is needed. Documentation and configuration options will be expanded in future versions. 📄 License This project is licensed under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#about","content":" note Generating null objects for testing  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references ShadowWriterBuilder &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ShadowWriter&quot; Version=&quot;0.9.5&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BuilderAttribute.g.csBuilderPerson.g.cs // &lt;auto-generated/&gt; using System; using System.CodeDom.Compiler; using System.Runtime.CompilerServices; namespace ShadowWriter { [CompilerGenerated] [GeneratedCode(&quot;ShadowWriter&quot;, &quot;0.9.5.0&quot;)] [System.AttributeUsage(AttributeTargets.Class)] internal sealed class BuilderAttribute : System.Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#download-example-net--c","content":" tip Download Example project ShadowWriterBuilder   ","version":"Next","tagName":"h3"},{"title":"Share ShadowWriterBuilder​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#share-shadowwriterbuilder","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ShadowWriterBuilder  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Builder\" has the following generators:​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#category-builder-has-the-following-generators","content":" 1 Architect.DomainModeling  2 BuilderGenerator  3 DimonSmart.BuilderGenerator  4 Fluentify  5 Hsu.Sg.FluentMember  6 ShadowWriterBuilder  7 StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ShadowWriterBuilder by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterBuilder#see-category","content":" Builder ","version":"Next","tagName":"h3"},{"title":"ShadowWriterNullobjects by Stefan Stolz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#info","content":" info Name: ShadowWriterNullobjects Leverage the capabilities of Roslyn source generators to help generate boilerplate code efficiently. Author: Stefan Stolz NuGet:https://www.nuget.org/packages/ShadowWriter/ You can find more details at https://github.com/StefanStolz/ShadowWriter Source: https://github.com/StefanStolz/ShadowWriter  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#original-readme","content":" note ShadowWriter ShadowWriter is a Roslyn Source Generator designed to simplify and automate aspects of .NET development. It currently supports the following features: ✨ Features​ Samples can be found in the Source-Code or in the Wiki. 1. Generate Null Objects​ The NullObject feature in ShadowWriter provides a simple way to automatically generate null object implementations for interfaces and classes. This pattern is useful for providing default &quot;do nothing&quot; implementations that can help avoid null reference exceptions and simplify code. Usage​ To create a null object implementation, simply add the [NullObject] attribute to your class: [NullObject] public partial class ImplementingMyInterface : IMyInterface { } 2. Inject Project Information​ Embeds values from the project file (*.csproj) directly into your source code. This is useful for build metadata, version numbers, or project-specific configuration. Available Properties​ The generated TheProject class provides the following static properties: Property\tDescription\tExampleFullPath\tThe complete path to the project file\t/path/to/YourProject.csproj ProjectDirectory\tThe directory containing the project file\t/path/to/ Name\tThe name of the project\tYourProject OutDir\tThe output directory for compiled artifacts\t/path/to/artifacts/bin/YourProject/debug/ Version\tThe current version of the project\t1.0.0 RootNamespace\tThe root namespace of the project\tYourProject Example Usage​ // Access project information anywhere in your code Console.WriteLine($&quot;Project Name: {TheProject.Name}&quot;); Console.WriteLine($&quot;Project Version: {TheProject.Version}&quot;); Console.WriteLine($&quot;Project Output Directory: {TheProject.OutDir}&quot;); 3. Experimental: Typed Access to EmbeddedResources​ Generates strongly typed wrappers for EmbeddedResources, allowing safe and convenient access to resources at runtime. ⚠️ Feature #3 is experimental and may change significantly in future versions. Details can be found in the Wiki. 4. Generate Builders for Records​ The Builder feature in ShadowWriter automatically generates builder classes for your record types. This significantly reduces boilerplate when constructing complex objects, especially with optional and nullable parameters or when you want to use a fluent API pattern for object creation. Usage​ To enable builder generation, simply annotate your partial record with the [Builder] attribute: [Builder] public partial record WithBuilder(int Number); The generator will create a corresponding builder class (e.g., WithBuilder.Builder) with mutable Properties for each Parameter. Examples​ A variety of record types are supported: // Record with a single value type [Builder] public partial record WithBuilder(int Number); The generated builder enables you to create instances using a clear, chainable API. For example: var builder = new WithBuilder.Builder(); builder.Number = 1; var item = builder.Build(); 📦 Installation​ You can install ShadowWriter via NuGet: dotnet package add ShadowWriter ⚙️ Usage​ ShadowWriter runs automatically during compilation. No manual setup is needed. Documentation and configuration options will be expanded in future versions. 📄 License​ This project is licensed under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#about","content":" note Generate null object for an class that implements an interface  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDepartment.csEmployee.cs This is the CSharp Project that references ShadowWriterNullobjects &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ShadowWriter&quot; Version=&quot;0.9.8&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BuilderAttribute.g.csNullInterfaceDepartment.g.csNullInterfaceEmployee.g.csNullObjectAttribute.g.csShadowWriter.TheProject.g.cs // &lt;auto-generated/&gt; using System; using System.CodeDom.Compiler; using System.Runtime.CompilerServices; namespace ShadowWriter { [CompilerGenerated] [GeneratedCode(&quot;ShadowWriter&quot;, &quot;0.9.8.0&quot;)] [System.AttributeUsage(AttributeTargets.Class)] internal sealed class BuilderAttribute : System.Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#download-example-net--c","content":" tip Download Example project ShadowWriterNullobjects   ","version":"Next","tagName":"h3"},{"title":"Share ShadowWriterNullobjects​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#share-shadowwriternullobjects","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ShadowWriterNullobjects  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Interface\" has the following generators:​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#category-interface-has-the-following-generators","content":" 1 AutoInterface  2 Biwen.AutoClassGen  3 CopyCat  4 Farskeptic.AutoCompose  5 MakeInterface.Generator  6 Matryoshki  7 Minerals.AutoInterfaces  8 NetAutomaticInterface  9 ProxyGen  10 Roozie.AutoInterface  11 RSCG_CompositeProvider  12 rscg_Interface_to_null_object  13 RSCG_Static  14 ShadowWriterNullobjects  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ShadowWriterNullobjects by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects#see-category","content":" Interface ","version":"Next","tagName":"h3"},{"title":"ShadowWriterProjectInfo by Stefan Stolz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#info","content":" info Name: ShadowWriterProjectInfo Leverage the capabilities of Roslyn source generators to help generate boilerplate code efficiently. Author: Stefan Stolz NuGet:https://www.nuget.org/packages/ShadowWriter/ You can find more details at https://github.com/StefanStolz/ShadowWriter Source: https://github.com/StefanStolz/ShadowWriter  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#original-readme","content":" note ShadowWriter ShadowWriter is a Roslyn Source Generator designed to simplify and automate aspects of .NET development. It currently supports the following features: ✨ Features​ Samples can be found in the Source-Code or in the Wiki. 1. Generate Null Objects​ The NullObject feature in ShadowWriter provides a simple way to automatically generate null object implementations for interfaces and classes. This pattern is useful for providing default &quot;do nothing&quot; implementations that can help avoid null reference exceptions and simplify code. Usage​ To create a null object implementation, simply add the [NullObject] attribute to your class: [NullObject] public partial class ImplementingMyInterface : IMyInterface { } 2. Inject Project Information​ Embeds values from the project file (*.csproj) directly into your source code. This is useful for build metadata, version numbers, or project-specific configuration. Available Properties​ The generated TheProject class provides the following static properties: Property\tDescription\tExampleFullPath\tThe complete path to the project file\t/path/to/YourProject.csproj ProjectDirectory\tThe directory containing the project file\t/path/to/ Name\tThe name of the project\tYourProject OutDir\tThe output directory for compiled artifacts\t/path/to/artifacts/bin/YourProject/debug/ Version\tThe current version of the project\t1.0.0 RootNamespace\tThe root namespace of the project\tYourProject Example Usage​ // Access project information anywhere in your code Console.WriteLine($&quot;Project Name: {TheProject.Name}&quot;); Console.WriteLine($&quot;Project Version: {TheProject.Version}&quot;); Console.WriteLine($&quot;Project Output Directory: {TheProject.OutDir}&quot;); 3. Experimental: Typed Access to EmbeddedResources​ Generates strongly typed wrappers for EmbeddedResources, allowing safe and convenient access to resources at runtime. ⚠️ Feature #3 is experimental and may change significantly in future versions. Details can be found in the Wiki. 4. Generate Builders for Records​ The Builder feature in ShadowWriter automatically generates builder classes for your record types. This significantly reduces boilerplate when constructing complex objects, especially with optional and nullable parameters or when you want to use a fluent API pattern for object creation. Usage​ To enable builder generation, simply annotate your partial record with the [Builder] attribute: [Builder] public partial record WithBuilder(int Number); The generator will create a corresponding builder class (e.g., WithBuilder.Builder) with mutable Properties for each Parameter. Examples​ A variety of record types are supported: // Record with a single value type [Builder] public partial record WithBuilder(int Number); The generated builder enables you to create instances using a clear, chainable API. For example: var builder = new WithBuilder.Builder(); builder.Number = 1; var item = builder.Build(); 📦 Installation​ You can install ShadowWriter via NuGet: dotnet package add ShadowWriter ⚙️ Usage ShadowWriter runs automatically during compilation. No manual setup is needed. Documentation and configuration options will be expanded in future versions. 📄 License This project is licensed under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#about","content":" note Generating C# code from project attributes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references ShadowWriterProjectInfo &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ShadowWriter&quot; Version=&quot;0.9.5&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  BuilderAttribute.g.csNullObjectAttribute.g.csShadowWriter.TheProject.g.cs // &lt;auto-generated/&gt; using System; using System.CodeDom.Compiler; using System.Runtime.CompilerServices; namespace ShadowWriter { [CompilerGenerated] [GeneratedCode(&quot;ShadowWriter&quot;, &quot;0.9.5.0&quot;)] [System.AttributeUsage(AttributeTargets.Class)] internal sealed class BuilderAttribute : System.Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#download-example-net--c","content":" tip Download Example project ShadowWriterProjectInfo   ","version":"Next","tagName":"h3"},{"title":"Share ShadowWriterProjectInfo​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#share-shadowwriterprojectinfo","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ShadowWriterProjectInfo  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementProject\" has the following generators:​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#category-enhancementproject-has-the-following-generators","content":" 1 AssemblyVersionInfo  2 AutoInvoke.Generator  3 AutoSpectre  4 BuildInfo  5 CommandLine  6 Credfeto.Version.Information.Generator  7 Larcanum.GitInfo  8 LinqGen.Generator  9 Pekspro.BuildInformationGenerator  10 PlantUmlClassDiagramGenerator  11 RSCG_AMS  12 RSCG_ExportDiagram  13 RSCG_FunctionsWithDI  14 RSCG_NameGenerator  15 RSCG_TimeBombComment  16 RSCG_Wait  17 ShadowWriterProjectInfo  18 ThisAssembly  19 ThisAssembly.Constants  20 ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ShadowWriterProjectInfo by Stefan Stolz","url":"/RSCG_Examples/v2/docs/ShadowWriterProjectInfo#see-category","content":" EnhancementProject ","version":"Next","tagName":"h3"},{"title":"SkinnyControllersCommon by Ignat Andrei","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#info","content":" info Name: SkinnyControllersCommon ** C# 9.0 ONLY ** Author: Ignat Andrei NuGet:https://www.nuget.org/packages/SkinnyControllersCommon You can find more details at https://github.com/ignatandrei/SkinnyControllersGenerator/ Source: https://github.com/ignatandrei/SkinnyControllersGenerator/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#original-readme","content":" note SkinnyControllersGenerator SkinnyControllers generates controller action for each field of your controller How to install SkinnyControllers in a .NET Core 5 WebAPI / MVC application Step 1: Install https://www.nuget.org/packages/SkinnyControllersGenerator/ Step 2: Install https://www.nuget.org/packages/SkinnyControllersCommon/ Step 3: Add a field to your action either via DI, either directly [ApiController] [Route(&quot;[controller]/[action]&quot;)] public partial class WeatherForecastController : ControllerBase { private readonly RepositoryWF repository; public WeatherForecastController(RepositoryWF repository) { this.repository = repository; //or make //this.repository=new RepositoryWF(); } Step 4: Add partial declaration and decorate your controller with [AutoActions(template = TemplateIndicator.AllPost,FieldsName =new[] *, ExcludeFields =new[]_logger)] [ApiController] [Route(&quot;[controller]/[action]&quot;)] public partial class WeatherForecastController : ControllerBase You can choose your template from All PostGet - if not arguments, POST elseRest action You can add your template in 2 ways: //if custom template , hte name must end in controller.txt [AutoActions(template = TemplateIndicator.CustomTemplateFile, FieldsName = new[] * ,CustomTemplateFileName = &quot;Controllers\\CustomTemplate1.controller.txt&quot;)] For creating new generic templates, please PR to https://github.com/ignatandrei/SkinnyControllersGenerator That's all! Usual problems: error CS0260: Missing partial modifier on declaration of type Answer: Did you put partial on the controller declaration ? public partial class More Roslyn Source Code Generators You can find more RSCG with examples at Roslyn Source Code Generators  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#about","content":" note Automatically add controllers actions for any class injected in constructor  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example ( source csproj, source files )​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#example--source-csproj-source-files-","content":" CSharp ProjectProgram.csWeatherForecastController.csWeatherActions.cs This is the CSharp Project that references SkinnyControllersCommon &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;SkinnyControllersCommon&quot; Version=&quot;2023.5.14.2055&quot; /&gt; &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.2.3&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  WeatherForecastController.autogenerate.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // SkinnyControllersGenerator: // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System.CodeDom.Compiler; using System.Runtime.CompilerServices; using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Logging; namespace SkinnyControllersDemo.Controllers { [GeneratedCode(&quot;SkinnyControllersGenerator&quot;, &quot;&quot;)] [CompilerGenerated] partial class WeatherForecastController{ /*[HttpGet()] public int id(){ System.Diagnostics.Debugger.Break(); return 1; } */ [HttpGet] public System.Collections.Generic.IEnumerable&lt;SkinnyControllersDemo.WeatherForecast&gt; Get (){ //System.Diagnostics.Debugger.Break(); return weather.Get(); } [HttpPost] public System.Threading.Tasks.Task&lt;int&gt; MultiplyBy2 (int nr){ //System.Diagnostics.Debugger.Break(); return weather.MultiplyBy2(nr); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#download-example-net--c-","content":" tip Download Example project SkinnyControllersCommon   ","version":"Next","tagName":"h3"},{"title":"Share SkinnyControllersCommon​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#share-skinnycontrollerscommon","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"In the same category (API) - 9 other generators​","type":1,"pageTitle":"SkinnyControllersCommon by Ignat Andrei","url":"/RSCG_Examples/v2/docs/SkinnyControllersCommon#in-the-same-category-api---9-other-generators","content":" immediate.apis​  Microsoft.Extensions.Configuration.Binder​  MinimalApiBuilder​  MinimalApis.Discovery​  MinimalHelpers.Routing.Analyzers​  RDG​  Refit​  RSCG_WebAPIExports​  SafeRouting​ ","version":"Next","tagName":"h3"},{"title":"SafeRouting by David Wake","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/SafeRouting","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#info","content":" info Name: SafeRouting Generates strongly-typed route information for ASP.NET Core razor pages and MVC controllers. Author: David Wake NuGet:https://www.nuget.org/packages/SafeRouting/ You can find more details at https://github.com/daviddotcs/safe-routing Source: https://github.com/daviddotcs/safe-routing  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#original-readme","content":" note Safe Routing Source Generator for ASP.NET Core Safe Routing is a source generator which analyses a project's razor pages and MVC controllers, producing strongly-typed representations of those routes as you type. This enables you to link between pages with compile time safety instead of using the standard &quot;stringly typed&quot; approach. Table of Contents​ Usage ExampleInstallation Tag HelpersExtension Methods Getting Started Binding Source AttributesBundled AttributesAreasController Methods with the Same NameUsing Razor Class Libraries Configuration Available Configuration Options LimitationsWorking with the Source Code ProjectsBuilding the NuGet Package Usage Example​ Consider the following contrived example of a controller class. public sealed class ProductController : Controller { [FromRoute] public int? Limit { get; set; } [Route(&quot;/Product/Search/{name}/{Limit?}&quot;)] public IActionResult Search(string name) =&gt; Ok(); } Redirecting to the Search action could be rewritten as follows: BEFORE: return RedirectToAction(&quot;Search&quot;, &quot;Product&quot;, new { Name = &quot;chair&quot;, Limit = 10 }); AFTER: return Routes.Controllers.Product.Search(&quot;chair&quot;, 10).Redirect(this); The controller name, action name, names of action method parameters, and names of bound properties on the controller are no longer referenced with strings, and are instead referenced with C# classes, methods, parameters, and properties that offer compile time safety. Similarly, consider the following razor page model class: public sealed class EditModel : PageModel { [FromRoute] public int Id { get; set; } public void OnGet() { // ... } public void OnPost() { // ... } } The generated code enables you to access the URL for the OnGet handler with the following code: string? editUrl = Routes.Pages.Edit.Get(123).Url(Url); Installation​ To install, simply add the SafeRouting package to your ASP.NET Core project. You must have .NET SDK 6.0.1xx or greater installed which is included in Visual Studio 17.0 or greater. Tag Helpers​ To enable the included tag helpers, add the following line to _ViewImports.cshtml files where required. @addTagHelper SafeRouting.TagHelpers.*, SafeRouting.Common This enables for-route attributes to be added to &lt;a&gt;, &lt;img&gt;, and &lt;form&gt; elements, for example: @{ var controllerRoute = Routes.Controllers.Product.Search(&quot;chair&quot;, 10); var pageRoute = Routes.Pages.Edit.Post(Model.Id); } &lt;!-- Adds the URL in the href attribute --&gt; &lt;a for-route=&quot;controllerRoute&quot;&gt;Search for chairs&lt;/a&gt; &lt;!-- Adds the URL in the src attribute --&gt; &lt;img for-route=&quot;controllerRoute&quot; alt=&quot;&quot; /&gt; &lt;!-- Adds the URL in the action attribute --&gt; &lt;form for-route=&quot;pageRoute&quot; method=&quot;post&quot;&gt;&lt;/form&gt; Extension Methods​ The Redirect extension methods return RedirectToActionResult or RedirectToPageResult values as appropriate for the particular route, and accept the active controller or page model as a parameter. The Url extension methods return a string with a URL for the route, accepting an IUrlHelper instance as a parameter. For projects using C# 8 or 9, add using SafeRouting.Extensions; to your source code to access the extension methods Redirect() and Url(). Projects using C# 10 or above will automatically have access to these extension methods via a generated global using static directive. Getting Started​ The following code snippet demonstrates accessing, modifying, and retrieving generated route information for the ProductController class defined above. // For C# 9 and below include this using directive to enable the Redirect() and Url() extension methods: //using SafeRouting.Extensions; // Get route information for the Search method on ProductController with a name value of &quot;chair&quot; and limit unset // Route: /Product/Search/chair var route = Routes.Controllers.Product.Search(&quot;chair&quot;, limit: null); // Assign a value for the Limit property (defined on the controller class) // Route: /Product/Search/chair/5 route[route.Properties.Limit] = 5; // Set the value of a parameter // Route: /Product/Search/book/5 route[route.Parameters.Name] = &quot;book&quot;; // Set a value using the Set method // Route: /Product/Search/book/10 route.Set(route.Properties.Limit, 10); // Remove a route value // Route: /Product/Search/book route.Remove(route.Properties.Limit); // Access the URL for the route using an IUrlHelper // Value: &quot;/Product/Search/book&quot; string? routeUrl = route.Url(Url); // Get route information for the OnGet method on the /Edit page var pageRoute = Routes.Pages.Edit.Get(123); // &quot;/Edit?Id=123&quot; var path = pageRoute.Path(linkGenerator); // &quot;https://example.org/Edit?Id=123&quot; var uri = pageRoute.Url(linkGenerator, &quot;https&quot;, new HostString(&quot;example.org&quot;)); // Redirect from within a controller action method or a page handler method return route.Redirect(this); Binding Source Attributes​ The generated methods will closely resemble your original controller action methods and page handler methods, but will only include parameters which can be bound via the URL. Consider the following action method: public IActionResult Index( string standard, [FromBody] string fromBody, [FromForm] string fromForm, [FromHeader] string fromHeader, [FromQuery] string fromQuery, [FromRoute] string fromRoute, [FromServices] string fromServices) { // ... } The generated route helper method omits the parameters with the attributes [FromBody], [FromForm], [FromHeader], and [FromServices] because they are not bound to any part of the URL. The generated helper method instead looks like this: public static IndexRouteInfo Index(string standard, string fromQuery, string fromRoute) { // ... } Properties on the controller or page model class which are annotated with [FromRoute], [FromQuery], or [BindProperty(SupportsGet = true)] attributes, and properties within a class annotated with [BindProperties(SupportsGet = true)] are automatically included in the signatures of all generated methods for that class. This ensures that all route values necessary for constructing a URL are provided when calling the methods. E.g; consider the following razor page model: public sealed class EditModel : PageModel { [FromRoute] public int ProductId { get; set; } public void OnGet() { // ... } public void OnPost(string name) { // ... } } The route-bound ProductId property is added to each of the generated methods, resulting in the following method signatures: Support.Pages_Edit.GetRouteValues Get(int productId); Support.Pages_Edit.PostRouteValues Post(string name, int productId); Bundled Attributes​ A couple of included attributes allow you to customise how the source generator interprets your code. [ExcludeFromRouteGenerator] can be applied to a class, property, method, or parameter to have it be ignored by the analyser. [RouteGeneratorName] allows you to rename any symbol (class, property, method, or parameter) in the generated code, which can help you avoid naming conflicts. Areas​ By default, the generated helper classes for controller and page routes will be added to the namespaces Routes.Controllers and Routes.Pages, respectively. Controllers adorned with the [Area] attribute, and pages within an /Areas/{area-name}/Pages/ directory structure have their helper classes added to Routes.Areas.AreaName.Controllers and Routes.Areas.AreaName.Pages respectively (replacing AreaName with the name of the area). Controller Methods with the Same Name​ There are a couple of situations to be mindful of involving controllers with multiple methods of the same name. Firstly, consider the following controller: public class ProductController : Controller { public IActionResult Edit(int productId) { // ... } [HttpPost] public IActionResult Edit(int productId, [FromForm] string name) { // ... } } Because of the way that the generated methods only include parameters which can be bound via the URL, the the above methods would both result in generated methods with the same signature. Because of this, the above code results in a compile error. To work around this, you could either rename one of the methods, or apply the [RouteGeneratorName] attribute to one of the methods to rename the generated method into something unique. The other situation to be aware of is when you have multiple overloads with different resulting signatures, the generated route values classes returned by the generated methods will be named with sequential numbers to ensure uniqueness. For example, if the above class was written without the [FromForm] attribute, the generated methods would be written with the following signatures: Support.Controllers_Product.EditRouteValues Edit(int productId); Support.Controllers_Product.Edit2RouteValues Edit(int productId, string name); It is recommended that you don't directly reference the names of the classes returned by those methods, and instead use the var keyword if you need to capture the result into a variable. I.e.; var route = Routes.Controllers.Product.Edit(1, &quot;Blanket&quot;); Using Razor Class Libraries​ Route information is only generated for source code within each project which references the SafeRouting package. In order to reference routes within another library, that library must reference SafeRouting and be configured to use the public access modifier for classes (which is the default). Configuration​ This source generator can be configured via a Global AnalyzerConfig file. Example .globalconfig file: is_global = true safe_routing.generated_access_modifier = internal safe_routing.generated_namespace = Example.Namespace.Routes Available Configuration Options​ Option\tDescriptionsafe_routing.generated_access_modifier\tThe access modifier used for all generated classes. Can be public or internal. Defaults to public. safe_routing.generated_namespace\tThe namespace under which all generated route classes are created. Defaults to Routes. safe_routing.generated_parameter_case\tThe case used for parameters in generated methods. Can be standard (camel case) or pascal. Defaults to standard. Limitations​ The including project must use C# 8 or later.Pages must have a PageModel inheriting class within a .cshtml.cs file in either a Pages or Areas/{area name}/Pages directory at any depth to be discovered. They may also only be declared as partial classes as long as the declaration within the .cshtml.cs file explicitly inherits from PageModel.Multiple classes which inherit from PageModel cannot be declared in the same .cshtml.cs file.Custom attributes which affect routing are unsupported and will be ignored by the source generator.Nullable annotations on parameter and property types are respected, but attributes affecting nullability are not copied across to the generated code.Generic classes, nested classes, and non-public classes which inherit from PageModel are ignored by the source generator.For .NET 7 and beyond, it is recommended to either continue using the [FromServices] attribute (or optionally [FromKeyedServices] in .NET 8+) for parameters which are implicitly injected, or to replace it with [ExcludeFromRouteGenerator]. Otherwise injected parameters will be included in the method signatures of the generated route methods.Only parameters and properties of simple types are currently supported. Working with the Source Code​ Projects​ SafeRouting.Common: A class library which is included in the NuGet package to define types, tag helpers, and extension methods.SafeRouting.Generator: The source generator itself.SafeRouting.Tests.Integration: Integration tests to ensure the source generator works within a standard project.SafeRouting.Tests.Unit: A series of snapshot tests to verify that the source generator is producing the expected output for given source code inputs. Each test which produces a diagnostic or generates source code will have matching *.verified.* files in the Snapshots directory containing that expected output. Building the NuGet Package​ Ensure you have the latest .NET SDK installed via https://dotnet.microsoft.com/en-us/download/dotnet.Install dotnet-script. dotnet tool install -g dotnet-script Within the src directory, run the build script with the new build number as an argument, e.g.; 1.2.3. dotnet script build.csx -- 1.2.3 Review the output to ensure that the build succeeded and all tests passed.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#about","content":" note Safe Routing for MVC  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#example-source-csproj-source-files","content":" CSharp Project_ViewImports.cshtml_Layout.cshtml This is the CSharp Project that references SafeRouting &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;SafeRouting&quot; Version=&quot;1.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Views_Home_Index_cshtml.g.csViews_Home_Privacy_cshtml.g.csViews_Shared_Error_cshtml.g.csViews_Shared__Layout_cshtml.g.csViews_Shared__ValidationScriptsPartial_cshtml.g.csViews__ViewImports_cshtml.g.csViews__ViewStart_cshtml.g.csControllerRoutes.g.csglobalusings.g.cs #pragma checksum &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\SafeRouting\\src\\SafeRoutingDemo\\Views\\Home\\Index.cshtml&quot; &quot;{8829d00f-11b8-4213-878b-770e8597ac16}&quot; &quot;2999aea4fd9585148590d2af132f38ffc044fe9b3869b38d4a2bbf6259d065ea&quot; // &lt;auto-generated/&gt; #pragma warning disable 1591 [assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Home_Index), @&quot;mvc.1.0.view&quot;, @&quot;/Views/Home/Index.cshtml&quot;)] namespace AspNetCoreGeneratedDocument { #line default using global::System; using global::System.Collections.Generic; using global::System.Linq; using global::System.Threading.Tasks; using global::Microsoft.AspNetCore.Mvc; using global::Microsoft.AspNetCore.Mvc.Rendering; using global::Microsoft.AspNetCore.Mvc.ViewFeatures; #nullable restore #line (1,2)-(1,23) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\SafeRouting\\src\\SafeRoutingDemo\\Views\\_ViewImports.cshtml&quot; using SafeRoutingDemo #nullable disable ; #nullable restore #line (2,2)-(2,30) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\SafeRouting\\src\\SafeRoutingDemo\\Views\\_ViewImports.cshtml&quot; using SafeRoutingDemo.Models #nullable disable ; #line default #line hidden [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute(&quot;Identifier&quot;, &quot;/Views/Home/Index.cshtml&quot;)] [global::System.Runtime.CompilerServices.CreateNewOnMetadataUpdateAttribute] #nullable restore internal sealed class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage&lt;dynamic&gt; #nullable disable { #pragma warning disable 1998 public async override global::System.Threading.Tasks.Task ExecuteAsync() { #nullable restore #line (1,3)-(3,1) &quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\SafeRouting\\src\\SafeRoutingDemo\\Views\\Home\\Index.cshtml&quot; ViewData[&quot;Title&quot;] = &quot;Home Page&quot;; #line default #line hidden #nullable disable WriteLiteral(&quot;\\r\\n&lt;div class=\\&quot;text-center\\&quot;&gt;\\r\\n &lt;h1 class=\\&quot;display-4\\&quot;&gt;Welcome&lt;/h1&gt;\\r\\n &lt;p&gt;Learn about &lt;a href=\\&quot;https://docs.microsoft.com/aspnet/core\\&quot;&gt;building Web apps with ASP.NET Core&lt;/a&gt;.&lt;/p&gt;\\r\\n&lt;/div&gt;\\r\\n&quot;); } #pragma warning restore 1998 #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!; #nullable disable #nullable restore [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute] public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;dynamic&gt; Html { get; private set; } = default!; #nullable disable } } #pragma warning restore 1591   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#download-example-net--c","content":" tip Download Example project SafeRouting   ","version":"Next","tagName":"h3"},{"title":"Share SafeRouting​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#share-saferouting","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/SafeRouting  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"API\" has the following generators:​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#category-api-has-the-following-generators","content":" 1 immediate.apis  2 Microsoft.Extensions.Configuration.Binder  3 MinimalApiBuilder  4 MinimalApis.Discovery  5 MinimalHelpers.Routing.Analyzers  6 RDG  7 Refit  8 RSCG_WebAPIExports  9 SafeRouting  10 SkinnyControllersCommon  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"SafeRouting by David Wake","url":"/RSCG_Examples/v2/docs/SafeRouting#see-category","content":" API ","version":"Next","tagName":"h3"},{"title":"Sera.Union by Sera","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Sera.Union","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#info","content":" info Name: Sera.Union Tagged union for c# Author: Sera NuGet:https://www.nuget.org/packages/Sera.Union/ You can find more details at https://github.com/sera-net/Sera.Union Source: https://github.com/sera-net/Sera.Union  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#original-readme","content":" note Sera.Union Sera.Union Sera.Union.Utilities Generate Tagged Union using source generator All unmanaged types will overlapAll classes will overlapOther types will be tiled Example​ [Union] public readonly partial struct Union1 { [UnionTemplate] private interface Template { int A(); string B(); bool C(); (int a, int b) D(); void E(); List&lt;int&gt;? F(); (int a, string b) G(); } } Generate output: Union1.union.g.cs // &lt;auto-generated/&gt; #nullable enable using Sera.TaggedUnion; public readonly partial struct Union1 : global::Sera.TaggedUnion.ITaggedUnion , global::System.IEquatable&lt;Union1&gt; , global::System.IComparable&lt;Union1&gt; #if NET7_0_OR_GREATER , global::System.Numerics.IEqualityOperators&lt;Union1, Union1, bool&gt; , global::System.Numerics.IComparisonOperators&lt;Union1, Union1, bool&gt; #endif { private readonly __impl_ _impl; private Union1(__impl_ _impl) { this._impl = _impl; } public readonly Tags Tag { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag; } public enum Tags : byte { A = 1, B = 2, C = 3, D = 4, E = 5, F = 6, G = 7, } [global::System.Runtime.CompilerServices.CompilerGenerated] private struct __impl_ { public __class_ _class_; public __unmanaged_ _unmanaged_; public (int a, string b) _0; public readonly Tags _tag; [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)] internal struct __class_ { [global::System.Runtime.InteropServices.FieldOffset(0)] public string _0; [global::System.Runtime.InteropServices.FieldOffset(0)] public List&lt;int&gt;? _1; } [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)] internal struct __unmanaged_ { [global::System.Runtime.InteropServices.FieldOffset(0)] public int _0; [global::System.Runtime.InteropServices.FieldOffset(0)] public bool _1; [global::System.Runtime.InteropServices.FieldOffset(0)] public (int a, int b) _2; } public __impl_(Tags _tag) { this._class_ = default; global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_); this._0 = default!; this._tag = _tag; } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeA(int value) { var _impl = new __impl_(Tags.A); _impl._unmanaged_._0 = value; return new Union1(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeB(string value) { var _impl = new __impl_(Tags.B); _impl._class_._0 = value; return new Union1(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeC(bool value) { var _impl = new __impl_(Tags.C); _impl._unmanaged_._1 = value; return new Union1(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeD((int a, int b) value) { var _impl = new __impl_(Tags.D); _impl._unmanaged_._2 = value; return new Union1(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeE() { var _impl = new __impl_(Tags.E); return new Union1(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeF(List&lt;int&gt;? value) { var _impl = new __impl_(Tags.F); _impl._class_._1 = value; return new Union1(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Union1 MakeG((int a, string b) value) { var _impl = new __impl_(Tags.G); _impl._0 = value; return new Union1(_impl); } public readonly bool IsA { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.A; } public readonly bool IsB { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.B; } public readonly bool IsC { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.C; } public readonly bool IsD { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.D; } public readonly bool IsE { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.E; } public readonly bool IsF { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.F; } public readonly bool IsG { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.G; } public int A { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; !this.IsA ? default! : this._impl._unmanaged_._0!; } public string B { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; !this.IsB ? default! : this._impl._class_._0!; } public bool C { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; !this.IsC ? default! : this._impl._unmanaged_._1!; } public (int a, int b) D { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; !this.IsD ? default! : this._impl._unmanaged_._2!; } public List&lt;int&gt;? F { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; !this.IsF ? default! : this._impl._class_._1!; } public (int a, string b) G { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; !this.IsG ? default! : this._impl._0!; } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly bool Equals(Union1 other) =&gt; this.Tag != other.Tag ? false : this.Tag switch { Tags.A =&gt; global::System.Collections.Generic.EqualityComparer&lt;int&gt;.Default.Equals(this.A, other.A), Tags.B =&gt; global::System.Collections.Generic.EqualityComparer&lt;string&gt;.Default.Equals(this.B, other.B), Tags.C =&gt; global::System.Collections.Generic.EqualityComparer&lt;bool&gt;.Default.Equals(this.C, other.C), Tags.D =&gt; global::System.Collections.Generic.EqualityComparer&lt;(int a, int b)&gt;.Default.Equals(this.D, other.D), Tags.F =&gt; global::System.Collections.Generic.EqualityComparer&lt;List&lt;int&gt;?&gt;.Default.Equals(this.F, other.F), Tags.G =&gt; global::System.Collections.Generic.EqualityComparer&lt;(int a, string b)&gt;.Default.Equals(this.G, other.G), _ =&gt; true, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override int GetHashCode() =&gt; this.Tag switch { Tags.A =&gt; global::System.HashCode.Combine(this.Tag, this.A), Tags.B =&gt; global::System.HashCode.Combine(this.Tag, this.B), Tags.C =&gt; global::System.HashCode.Combine(this.Tag, this.C), Tags.D =&gt; global::System.HashCode.Combine(this.Tag, this.D), Tags.F =&gt; global::System.HashCode.Combine(this.Tag, this.F), Tags.G =&gt; global::System.HashCode.Combine(this.Tag, this.G), _ =&gt; global::System.HashCode.Combine(this.Tag), }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override bool Equals(object? obj) =&gt; obj is Union1 other &amp;&amp; Equals(other); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator ==(Union1 left, Union1 right) =&gt; Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator !=(Union1 left, Union1 right) =&gt; !Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly int CompareTo(Union1 other) =&gt; this.Tag != other.Tag ? Comparer&lt;Tags&gt;.Default.Compare(this.Tag, other.Tag) : this.Tag switch { Tags.A =&gt; global::System.Collections.Generic.Comparer&lt;int&gt;.Default.Compare(this.A, other.A), Tags.B =&gt; global::System.Collections.Generic.Comparer&lt;string&gt;.Default.Compare(this.B, other.B), Tags.C =&gt; global::System.Collections.Generic.Comparer&lt;bool&gt;.Default.Compare(this.C, other.C), Tags.D =&gt; global::System.Collections.Generic.Comparer&lt;(int a, int b)&gt;.Default.Compare(this.D, other.D), Tags.F =&gt; global::System.Collections.Generic.Comparer&lt;List&lt;int&gt;?&gt;.Default.Compare(this.F, other.F), Tags.G =&gt; global::System.Collections.Generic.Comparer&lt;(int a, string b)&gt;.Default.Compare(this.G, other.G), _ =&gt; 0, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;(Union1 left, Union1 right) =&gt; left.CompareTo(right) &lt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;(Union1 left, Union1 right) =&gt; left.CompareTo(right) &gt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;=(Union1 left, Union1 right) =&gt; left.CompareTo(right) &lt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;=(Union1 left, Union1 right) =&gt; left.CompareTo(right) &gt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override string ToString() =&gt; this.Tag switch { Tags.A =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.A)} {{ {this.A} }}&quot;, Tags.B =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.B)} {{ {this.B} }}&quot;, Tags.C =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.C)} {{ {this.C} }}&quot;, Tags.D =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.D)} {{ {this.D} }}&quot;, Tags.E =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.E)}&quot;, Tags.F =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.F)} {{ {this.F} }}&quot;, Tags.G =&gt; $&quot;{nameof(Union1)}.{nameof(Tags.G)} {{ {this.G} }}&quot;, _ =&gt; nameof(Union1), }; } How to use​ var u = Union1.MakeA(123); if (u is { Tag: Union1.Tags.A, A: var a }) { } if (u is { IsA: true, A: var a }) { } if (u.IsA) { var a = u.A; } Support generics​ Generics will not overlap [Union] public partial struct Option&lt;T&gt; { [UnionTemplate] private interface Template { T Some(); void None(); } } [Union] public partial struct Result&lt;T, E&gt; { [UnionTemplate] private interface Template { T Ok(); E Err(); } } Generate output: Option[T].union.g.cs // &lt;auto-generated/&gt; #nullable enable using Sera.TaggedUnion; public partial struct Option&lt;T&gt; : global::Sera.TaggedUnion.ITaggedUnion , global::System.IEquatable&lt;Option&lt;T&gt;&gt; , global::System.IComparable&lt;Option&lt;T&gt;&gt; #if NET7_0_OR_GREATER , global::System.Numerics.IEqualityOperators&lt;Option&lt;T&gt;, Option&lt;T&gt;, bool&gt; , global::System.Numerics.IComparisonOperators&lt;Option&lt;T&gt;, Option&lt;T&gt;, bool&gt; #endif { private __impl_ _impl; private Option(__impl_ _impl) { this._impl = _impl; } public readonly Tags Tag { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag; } public enum Tags : byte { Some = 1, None = 2, } [global::System.Runtime.CompilerServices.CompilerGenerated] private struct __impl_ { public T _0; public readonly Tags _tag; public __impl_(Tags _tag) { this._0 = default!; this._tag = _tag; } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Option&lt;T&gt; MakeSome(T value) { var _impl = new __impl_(Tags.Some); _impl._0 = value; return new Option&lt;T&gt;(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Option&lt;T&gt; MakeNone() { var _impl = new __impl_(Tags.None); return new Option&lt;T&gt;(_impl); } public readonly bool IsSome { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.Some; } public readonly bool IsNone { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.None; } public T Some { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] readonly get =&gt; !this.IsSome ? default! : this._impl._0!; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set { if (this.IsSome) { this._impl._0 = value; } } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly bool Equals(Option&lt;T&gt; other) =&gt; this.Tag != other.Tag ? false : this.Tag switch { Tags.Some =&gt; global::System.Collections.Generic.EqualityComparer&lt;T&gt;.Default.Equals(this.Some, other.Some), _ =&gt; true, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override int GetHashCode() =&gt; this.Tag switch { Tags.Some =&gt; global::System.HashCode.Combine(this.Tag, this.Some), _ =&gt; global::System.HashCode.Combine(this.Tag), }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override bool Equals(object? obj) =&gt; obj is Option&lt;T&gt; other &amp;&amp; Equals(other); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator ==(Option&lt;T&gt; left, Option&lt;T&gt; right) =&gt; Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator !=(Option&lt;T&gt; left, Option&lt;T&gt; right) =&gt; !Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly int CompareTo(Option&lt;T&gt; other) =&gt; this.Tag != other.Tag ? Comparer&lt;Tags&gt;.Default.Compare(this.Tag, other.Tag) : this.Tag switch { Tags.Some =&gt; global::System.Collections.Generic.Comparer&lt;T&gt;.Default.Compare(this.Some, other.Some), _ =&gt; 0, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;(Option&lt;T&gt; left, Option&lt;T&gt; right) =&gt; left.CompareTo(right) &lt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;(Option&lt;T&gt; left, Option&lt;T&gt; right) =&gt; left.CompareTo(right) &gt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;=(Option&lt;T&gt; left, Option&lt;T&gt; right) =&gt; left.CompareTo(right) &lt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;=(Option&lt;T&gt; left, Option&lt;T&gt; right) =&gt; left.CompareTo(right) &gt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override string ToString() =&gt; this.Tag switch { Tags.Some =&gt; $&quot;{nameof(Option&lt;T&gt;)}.{nameof(Tags.Some)} {{ {this.Some} }}&quot;, Tags.None =&gt; $&quot;{nameof(Option&lt;T&gt;)}.{nameof(Tags.None)}&quot;, _ =&gt; nameof(Option&lt;T&gt;), }; } Result[T,E].union.g.cs // &lt;auto-generated/&gt; #nullable enable using Sera.TaggedUnion; public partial struct Result&lt;T, E&gt; : global::Sera.TaggedUnion.ITaggedUnion , global::System.IEquatable&lt;Result&lt;T, E&gt;&gt; , global::System.IComparable&lt;Result&lt;T, E&gt;&gt; #if NET7_0_OR_GREATER , global::System.Numerics.IEqualityOperators&lt;Result&lt;T, E&gt;, Result&lt;T, E&gt;, bool&gt; , global::System.Numerics.IComparisonOperators&lt;Result&lt;T, E&gt;, Result&lt;T, E&gt;, bool&gt; #endif { private __impl_ _impl; private Result(__impl_ _impl) { this._impl = _impl; } public readonly Tags Tag { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag; } public enum Tags : byte { Ok = 1, Err = 2, } [global::System.Runtime.CompilerServices.CompilerGenerated] private struct __impl_ { public T _0; public E _1; public readonly Tags _tag; public __impl_(Tags _tag) { this._0 = default!; this._1 = default!; this._tag = _tag; } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Result&lt;T, E&gt; MakeOk(T value) { var _impl = new __impl_(Tags.Ok); _impl._0 = value; return new Result&lt;T, E&gt;(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static Result&lt;T, E&gt; MakeErr(E value) { var _impl = new __impl_(Tags.Err); _impl._1 = value; return new Result&lt;T, E&gt;(_impl); } public readonly bool IsOk { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.Ok; } public readonly bool IsErr { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.Err; } public T Ok { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] readonly get =&gt; !this.IsOk ? default! : this._impl._0!; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set { if (this.IsOk) { this._impl._0 = value; } } } public E Err { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] readonly get =&gt; !this.IsErr ? default! : this._impl._1!; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set { if (this.IsErr) { this._impl._1 = value; } } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly bool Equals(Result&lt;T, E&gt; other) =&gt; this.Tag != other.Tag ? false : this.Tag switch { Tags.Ok =&gt; global::System.Collections.Generic.EqualityComparer&lt;T&gt;.Default.Equals(this.Ok, other.Ok), Tags.Err =&gt; global::System.Collections.Generic.EqualityComparer&lt;E&gt;.Default.Equals(this.Err, other.Err), _ =&gt; true, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override int GetHashCode() =&gt; this.Tag switch { Tags.Ok =&gt; global::System.HashCode.Combine(this.Tag, this.Ok), Tags.Err =&gt; global::System.HashCode.Combine(this.Tag, this.Err), _ =&gt; global::System.HashCode.Combine(this.Tag), }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override bool Equals(object? obj) =&gt; obj is Result&lt;T, E&gt; other &amp;&amp; Equals(other); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator ==(Result&lt;T, E&gt; left, Result&lt;T, E&gt; right) =&gt; Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator !=(Result&lt;T, E&gt; left, Result&lt;T, E&gt; right) =&gt; !Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly int CompareTo(Result&lt;T, E&gt; other) =&gt; this.Tag != other.Tag ? Comparer&lt;Tags&gt;.Default.Compare(this.Tag, other.Tag) : this.Tag switch { Tags.Ok =&gt; global::System.Collections.Generic.Comparer&lt;T&gt;.Default.Compare(this.Ok, other.Ok), Tags.Err =&gt; global::System.Collections.Generic.Comparer&lt;E&gt;.Default.Compare(this.Err, other.Err), _ =&gt; 0, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;(Result&lt;T, E&gt; left, Result&lt;T, E&gt; right) =&gt; left.CompareTo(right) &lt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;(Result&lt;T, E&gt; left, Result&lt;T, E&gt; right) =&gt; left.CompareTo(right) &gt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;=(Result&lt;T, E&gt; left, Result&lt;T, E&gt; right) =&gt; left.CompareTo(right) &lt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;=(Result&lt;T, E&gt; left, Result&lt;T, E&gt; right) =&gt; left.CompareTo(right) &gt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override string ToString() =&gt; this.Tag switch { Tags.Ok =&gt; $&quot;{nameof(Result&lt;T, E&gt;)}.{nameof(Tags.Ok)} {{ {this.Ok} }}&quot;, Tags.Err =&gt; $&quot;{nameof(Result&lt;T, E&gt;)}.{nameof(Tags.Err)} {{ {this.Err} }}&quot;, _ =&gt; nameof(Result&lt;T, E&gt;), }; }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#about","content":" note Generate tagged union  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references Sera.Union &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Sera.Union&quot; Version=&quot;0.7.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  UnionTypesDemo.ResultSave.union.g.cs // &lt;auto-generated/&gt; #nullable enable using Sera.TaggedUnion; namespace UnionTypesDemo { public partial struct ResultSave : global::Sera.TaggedUnion.ITaggedUnion , global::System.IEquatable&lt;ResultSave&gt; , global::System.IComparable&lt;ResultSave&gt; #if NET7_0_OR_GREATER , global::System.Numerics.IEqualityOperators&lt;ResultSave, ResultSave, bool&gt; , global::System.Numerics.IComparisonOperators&lt;ResultSave, ResultSave, bool&gt; #endif { private __impl_ _impl; private ResultSave(__impl_ _impl) { this._impl = _impl; } public readonly Tags Tag { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag; } public enum Tags : byte { Ok = 1, NotFound = 2, } [global::System.Runtime.CompilerServices.CompilerGenerated] private struct __impl_ { public __unmanaged_ _unmanaged_; public readonly Tags _tag; [global::System.Runtime.CompilerServices.CompilerGenerated] [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)] internal struct __unmanaged_ { [global::System.Runtime.InteropServices.FieldOffset(0)] public int _0; } public __impl_(Tags _tag) { global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_); this._tag = _tag; } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static ResultSave MakeOk(int value) { var _impl = new __impl_(Tags.Ok); _impl._unmanaged_._0 = value; return new ResultSave(_impl); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static ResultSave MakeNotFound() { var _impl = new __impl_(Tags.NotFound); return new ResultSave(_impl); } public readonly bool IsOk { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.Ok; } public readonly bool IsNotFound { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get =&gt; this._impl._tag == Tags.NotFound; } public int Ok { [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] readonly get =&gt; !this.IsOk ? default! : this._impl._unmanaged_._0!; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set { if (this.IsOk) { this._impl._unmanaged_._0 = value; } } } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly bool Equals(ResultSave other) =&gt; this.Tag != other.Tag ? false : this.Tag switch { Tags.Ok =&gt; global::System.Collections.Generic.EqualityComparer&lt;int&gt;.Default.Equals(this.Ok, other.Ok), _ =&gt; true, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override int GetHashCode() =&gt; this.Tag switch { Tags.Ok =&gt; global::System.HashCode.Combine(this.Tag, this.Ok), _ =&gt; global::System.HashCode.Combine(this.Tag), }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override bool Equals(object? obj) =&gt; obj is ResultSave other &amp;&amp; Equals(other); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator ==(ResultSave left, ResultSave right) =&gt; Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator !=(ResultSave left, ResultSave right) =&gt; !Equals(left, right); [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly int CompareTo(ResultSave other) =&gt; this.Tag != other.Tag ? global::System.Collections.Generic.Comparer&lt;Tags&gt;.Default.Compare(this.Tag, other.Tag) : this.Tag switch { Tags.Ok =&gt; global::System.Collections.Generic.Comparer&lt;int&gt;.Default.Compare(this.Ok, other.Ok), _ =&gt; 0, }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;(ResultSave left, ResultSave right) =&gt; left.CompareTo(right) &lt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;(ResultSave left, ResultSave right) =&gt; left.CompareTo(right) &gt; 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &lt;=(ResultSave left, ResultSave right) =&gt; left.CompareTo(right) &lt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public static bool operator &gt;=(ResultSave left, ResultSave right) =&gt; left.CompareTo(right) &gt;= 0; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public readonly override string ToString() =&gt; this.Tag switch { Tags.Ok =&gt; $&quot;{nameof(ResultSave)}.{nameof(Tags.Ok)} {{ {this.Ok} }}&quot;, Tags.NotFound =&gt; $&quot;{nameof(ResultSave)}.{nameof(Tags.NotFound)}&quot;, _ =&gt; nameof(ResultSave), }; } } // namespace UnionTypesDemo   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#download-example-net--c","content":" tip Download Example project Sera.Union   ","version":"Next","tagName":"h3"},{"title":"Share Sera.Union​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#share-seraunion","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Sera.Union  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Sera.Union by Sera","url":"/RSCG_Examples/v2/docs/Sera.Union#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"SourceGenerator.Helper.CopyCode by Patrick Kranz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#info","content":" info Name: SourceGenerator.Helper.CopyCode This Generator is intendede to generate text that a source generator can use to emit source to its generation. (See ReadMe) Author: Patrick Kranz NuGet:https://www.nuget.org/packages/SourceGenerator.Helper.CopyCode/ You can find more details at https://github.com/LokiMidgard/SourceGenerator.Helper.CopyCode Source: https://github.com/LokiMidgard/SourceGenerator.Helper.CopyCode  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#original-readme","content":" note SourceGenerator.Helper.CopyCode This Generator is intendede to generate text that a source generator can use to emit source to its generation. E.g. Instead of writing a String that contains the definiton of an Attribute (without syntax highlighting and checking). You can generate the attribute normaly in Code and anotate it wit [SourceGenerator.Helper.CopyCode.Copy]. Attributes defined on that Type will also be copied, if they are defined below the [SourceGenerator.Helper.CopyCode.Copy]-Attribute. Assume you have the following attribute: namespace SourceGenerator.Helper.CopyCode.Example; [SourceGenerator.Helper.CopyCode.Copy] [System.AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = false)] internal sealed class MyGeneratorAttribute : Attribute { } then the generator will generate: // &lt;auto-generated/&gt; #nullable enable namespace SourceGenerator.Helper.CopyCode; internal static partial class Copy { public const string SourceGeneratorHelperCopyCodeExampleMyGeneratorAttribute = &quot;&quot;&quot; // &lt;auto-generated/&gt; #nullable enable namespace SourceGenerator.Helper.CopyCode.Example; [System.AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = false)] internal sealed class MyGeneratorAttribute : Attribute { } &quot;&quot;&quot;; } And your Generator can emit it: [Generator(LanguageNames.CSharp)] public class MyGenerator : IIncrementalGenerator { public void Initialize(IncrementalGeneratorInitializationContext context) { context.RegisterPostInitializationOutput(context =&gt; context.AddSource(&quot;attribute.g.cs&quot;, SourceGenerator.Helper.CopyCode.Copy.SourceGeneratorHelperCopyCodeExampleMyGeneratorAttribute )); // The rest of your generator� } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#about","content":" note Transform Code to string  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references SourceGenerator.Helper.CopyCode &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;SourceGenerator.Helper.CopyCode&quot; Version=&quot;0.0.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  CopyAttribute.g.csSourceGenerator_Helper_CopyCodeDemo.NumberAttribute.Copy.g.csSourceGenerator_Helper_CopyCodeDemo.Person.Copy.g.cs // &lt;auto-generated/&gt; #nullable enable namespace SourceGenerator.Helper.CopyCode { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;SourceGenerator.Helper.CopyCode&quot;, &quot;0.0.1.0&quot;)] [global::System.AttributeUsage(global::System.AttributeTargets.Enum | global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct | global::System.AttributeTargets.Interface, AllowMultiple = false)] internal sealed class CopyAttribute : global::System.Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#download-example-net--c","content":" tip Download Example project SourceGenerator.Helper.CopyCode   ","version":"Next","tagName":"h3"},{"title":"Share SourceGenerator.Helper.CopyCode​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#share-sourcegeneratorhelpercopycode","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"CodeToString\" has the following generators:​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#category-codetostring-has-the-following-generators","content":" 1 CodeAnalysis  2 RossLean.StringificationGenerator  3 SourceGenerator.Helper.CopyCode  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"SourceGenerator.Helper.CopyCode by Patrick Kranz","url":"/RSCG_Examples/v2/docs/SourceGenerator.Helper.CopyCode#see-category","content":" CodeToString ","version":"Next","tagName":"h3"},{"title":"sourcedepend by Colin Wilmans","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/sourcedepend","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#info","content":" info Name: sourcedepend A source generator for C# that uses Roslyn (the C# compiler) to allow you to generate your constructor for injection during compile time. Author: Colin Wilmans NuGet:https://www.nuget.org/packages/sourcedepend/ You can find more details at https://github.com/crwsolutions/sourcedepend Source: https://github.com/crwsolutions/sourcedepend  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#original-readme","content":" note Source Depend A source generator for C# that uses Roslyn (the C# compiler) to help you with dependency injection (DI). It saves you from writing the constructor because this will be written for you (during compile time). Just tag the member with a [Dependency] attribute. Version history​ v0.1. First implementation.v0.2. Complete rewrite from ISourceGenerator to IIncrementalGenerator, this should boost performance keep sealed and accessibility intact. v0.3. Complete Rewrite: reorganized the code. Allow one level of inheritance. How to use it​ Install it and add the attribute to the fields or properties you want be set in your constructor, like so: public partial class ExampleService { [Dependency] private readonly AnotherService anotherService; [Dependency] AnotherService Prop { get; } } Alternative assignment​ It is also possible that the generated assignment is to an alternative property: public partial class ExampleService { [Dependency(nameof(BindingContext))] AnotherService ViewModel =&gt; BindingContext as AnotherService; } Inheritance​ And it is possible to inherit from a base implementation that also uses the [Dependency] attribute: internal partial class BaseExampleService { [Dependency] private readonly IForBaseService _someBaseService; } internal partial class ExampleService : BaseExampleService { } Add construction work​ Because your constructor is highjacked, there are the alternative methods PreConstruct/PostConstruct to do your construction work: public partial class ExampleService { [Dependency] private readonly AnotherService anotherService; ///This method will be called before the generated assignments partial void PreConstruct() { Initialize() } ///This method will be called after the generated assignments partial void PostConstruct() =&gt; anotherService.ConstructValue = &quot;Hello from post-construct!&quot;; } These samples give the following combined generated code: namespace ConsoleApp { public partial class ExampleService { public ExampleService(ConsoleApp.IAnotherService anotherService, ConsoleApp.AnotherService prop, ConsoleApp.AnotherService viewModel, ConsoleApp.IForBaseService someBaseService) : base(someBaseService) { PreConstruct(); this.anotherService = anotherService; Prop = prop; BindingContext = viewModel; PostConstruct(); } partial void PreConstruct(); partial void PostConstruct(); } } namespace ConsoleApp { /// &lt;inheritdoc/&gt; internal partial class BaseExampleService { public BaseExampleService(ConsoleApp.IForBaseService someBaseService) { PreConstruct(); this._someBaseService = someBaseService; PostConstruct(); } partial void PreConstruct(); partial void PostConstruct(); } } Installing​ The package is available on NuGet. To install from the command line: dotnet add package sourcedepend Or use the Package Manager in Visual Studio. Contributing​ The main supported IDE for development is Visual Studio 2019. Questions, comments, bug reports, and pull requests are all welcome. Bug reports that include steps to reproduce (including code) are preferred. Even better, make them in the form of pull requests. Maintainers/Core team​ Contributors can be found at the contributors page on Github. License​ This software is open source, licensed under the MIT License. See LICENSE for details. Check out the terms of the license before you contribute, fork, copy or do anything with the code. If you decide to contribute you agree to grant copyright of all your contribution to this project and agree to mention clearly if do not agree to these terms. Your work will be licensed with the project at MIT, along the rest of the code.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#about","content":" note Generating constructor for DI  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references sourcedepend &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;SourceDepend&quot; Version=&quot;0.3.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Dependency.Generated.g.csPerson_Dependency.g.cs // &lt;auto-generated /&gt; /// &lt;summary&gt; /// Injects this item in the constructor. This will also highjack your constructor, so if you have any construct business, use PreConstruct() or PostConstruct() methods. /// &lt;/summary&gt; /// &lt;remarks&gt; /// Make sure your class is partial. /// &lt;/remarks&gt; [System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Property, Inherited = false, AllowMultiple = false)] [System.Diagnostics.Conditional(&quot;DependencyGenerator_DEBUG&quot;)] internal sealed class DependencyAttribute : System.Attribute { internal DependencyAttribute(string alternativePropertyName = null) { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#download-example-net--c","content":" tip Download Example project sourcedepend   ","version":"Next","tagName":"h3"},{"title":"Share sourcedepend​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#share-sourcedepend","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/sourcedepend  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Constructor\" has the following generators:​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#category-constructor-has-the-following-generators","content":" 1 AutoConstructor  2 AutoCtor  3 AutoDeconstruct  4 ConstructorGenerator  5 PrimaryParameter  6 QuickConstructor  7 sourcedepend  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"sourcedepend by Colin Wilmans","url":"/RSCG_Examples/v2/docs/sourcedepend#see-category","content":" Constructor ","version":"Next","tagName":"h3"},{"title":"spreadcheetah by Sveinung","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/spreadcheetah","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#info","content":" info Name: spreadcheetah SpreadCheetah is a high-performance .NET library for generating spreadsheet (Microsoft Excel XLSX) files. Author: Sveinung NuGet:https://www.nuget.org/packages/spreadcheetah/ You can find more details at https://github.com/sveinungf/spreadcheetah Source: https://github.com/sveinungf/spreadcheetah  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#original-readme","content":" note SpreadCheetah SpreadCheetah is a high-performance .NET library for generating spreadsheet (Microsoft Excel XLSX) files. Features​ Performance (see benchmarks below)Low memory allocation (see benchmarks below)Async APIsNo dependency to Microsoft ExcelTargeting .NET Standard 2.0 (for .NET Framework 4.6.1 and later)Free and open source! SpreadCheetah is designed to create spreadsheet files in a forward-only manner. That means worksheets from left to right, rows from top to bottom, and row cells from left to right. This allows for creating spreadsheet files in a streaming manner, while also keeping a low memory footprint. Most basic spreadsheet functionality is supported, such as cells with different data types, basic styling, and formulas. More advanced functionality is planned for future releases. How to install​ SpreadCheetah is available as a NuGet package. The NuGet package targets .NET Standard 2.0 as well as newer versions of .NET. The .NET Standard 2.0 version is just intended for backwards compatibility (.NET Framework and earlier versions of .NET Core). More optimizations are enabled when targeting newer versions of .NET. Basic usage​ using (var spreadsheet = await Spreadsheet.CreateNewAsync(stream)) { // A spreadsheet must contain at least one worksheet. await spreadsheet.StartWorksheetAsync(&quot;Sheet 1&quot;); // Cells are inserted row by row. var row = new List&lt;Cell&gt;(); row.Add(new Cell(&quot;Answer to the ultimate question:&quot;)); row.Add(new Cell(42)); // Rows are inserted from top to bottom. await spreadsheet.AddRowAsync(row); // Remember to call Finish before disposing. // This is important to properly finalize the XLSX file. await spreadsheet.FinishAsync(); } Other examples​ Writing to a fileStyling basicsFormula basicsDateTime and formattingData ValidationsPerformance tips Using the Source Generator​ Source Generators is a newly released feature in the C# compiler. SpreadCheetah includes a source generator that makes it easier to create rows from objects. It is used in a similar way to the System.Text.Json source generator: namespace MyNamespace; // A plain old C# class which we want to add as a row in a worksheet. // The source generator will pick the properties with public getters. // The order of the properties will decide the order of the cells. public class MyObject { public string Question { get; set; } public int Answer { get; set; } } The source generator will be instructed to generate code by defining a partial class like this: using SpreadCheetah.SourceGeneration; namespace MyNamespace; [WorksheetRow(typeof(MyObject))] public partial class MyObjectRowContext : WorksheetRowContext { } During build, the type will be analyzed and an implementation of the context class will be created. We can then create a row from an object by calling AddAsRowAsync with the object and the context type as parameters: await using var spreadsheet = await Spreadsheet.CreateNewAsync(stream); await spreadsheet.StartWorksheetAsync(&quot;Sheet 1&quot;); var myObj = new MyObject { Question = &quot;How many Rings of Power were there?&quot;, Answer = 20 }; await spreadsheet.AddAsRowAsync(myObj, MyObjectRowContext.Default.MyObject); await spreadsheet.FinishAsync(); Here is a peek at part of the code that was generated for this example: // &lt;auto-generated /&gt; private static async ValueTask AddAsRowInternalAsync(Spreadsheet spreadsheet, MyObject obj, CancellationToken token) { var cells = ArrayPool&lt;DataCell&gt;.Shared.Rent(2); try { cells[0] = new DataCell(obj.Question); cells[1] = new DataCell(obj.Answer); await spreadsheet.AddRowAsync(cells.AsMemory(0, 2), token).ConfigureAwait(false); } finally { ArrayPool&lt;DataCell&gt;.Shared.Return(cells, true); } } The source generator can generate rows from classes, records, and structs. It can be used in all supported .NET versions, including .NET Framework, however the C# version must be 8.0 or greater. Benchmarks​ The benchmark results here have been collected using Benchmark.NET with the following system configuration: BenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19043.2251/21H1/May2021Update) Intel Core i5-8600K CPU 3.60GHz (Coffee Lake), 1 CPU, 6 logical and 6 physical cores .NET SDK=7.0.100 [Host] : .NET 7.0.0 (7.0.22.51805), X64 RyuJIT AVX2 .NET 6.0 : .NET 6.0.11 (6.0.1122.52304), X64 RyuJIT AVX2 .NET 7.0 : .NET 7.0.0 (7.0.22.51805), X64 RyuJIT AVX2 .NET Framework 4.8 : .NET Framework 4.8 (4.8.4515.0), X64 RyuJIT VectorSize=256 InvocationCount=1 UnrollFactor=1 The code executed in the benchmark creates a worksheet of 20 000 rows and 10 columns filled with string values. The same use case has been implemented in other spreadsheet libraries for comparison. Some of these libraries have multiple ways of achieving the same result, but to make this a fair comparison the idea is to use the most efficient approach for each library. The code is available here. .NET Framework 4.8​ Library\tMean\tError\tStdDev\tAllocatedSpreadCheetah\t68.67 ms\t0.283 ms\t0.251 ms\t152.23 KB Open XML (SAX approach)\t438.22 ms\t1.161 ms\t1.086 ms\t43 317.24 KB EPPlus v4\t609.98 ms\t6.626 ms\t5.874 ms\t286 142.58 KB Open XML (DOM approach)\t1,098.52 ms\t9.419 ms\t8.811 ms\t161 123.16 KB ClosedXML\t1,618.57 ms\t7.088 ms\t6.630 ms\t565 074.91 KB .NET 6​ Library\tMean\tError\tStdDev\tAllocatedSpreadCheetah\t28.53 ms\t0.079 ms\t0.070 ms\t6.48 KB Open XML (SAX approach)\t250.65 ms\t0.541 ms\t0.480 ms\t66 049.91 KB EPPlus v4\t405.90 ms\t1.782 ms\t1.579 ms\t195 790.25 KB Open XML (DOM approach)\t775.74 ms\t14.404 ms\t14.147 ms\t182 926.06 KB ClosedXML\t1,262.92 ms\t19.825 ms\t18.544 ms\t524 913.50 KB .NET 7​ Library\tMean\tError\tStdDev\tAllocatedSpreadCheetah\t25.14 ms\t0.148 ms\t0.138 ms\t6.48 KB Open XML (SAX approach)\t239.72 ms\t0.231 ms\t0.216 ms\t66 046.48 KB EPPlus v4\t406.69 ms\t1.852 ms\t1.642 ms\t195 792.41 KB Open XML (DOM approach)\t831.68 ms\t10.446 ms\t9.771 ms\t182 926.04 KB ClosedXML\t1,171.07 ms\t8.106 ms\t7.186 ms\t524 846.85 KB  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#about","content":" note generating Excel from objects does not work with DateTime  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references spreadcheetah &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;SpreadCheetah&quot; Version=&quot;1.10.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  spreadcheetahDemo.PersonRowContext.g.cs // &lt;auto-generated /&gt; #nullable enable using SpreadCheetah; using SpreadCheetah.SourceGeneration; using System; using System.Buffers; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; namespace spreadcheetahDemo { public partial class PersonRowContext { private static PersonRowContext? _default; public static PersonRowContext Default =&gt; _default ??= new PersonRowContext(); public PersonRowContext() { } private WorksheetRowTypeInfo&lt;spreadcheetahDemo.Person&gt;? _Person; public WorksheetRowTypeInfo&lt;spreadcheetahDemo.Person&gt; Person =&gt; _Person ??= WorksheetRowMetadataServices.CreateObjectInfo&lt;spreadcheetahDemo.Person&gt;(AddAsRowAsync, AddRangeAsRowsAsync); private static ValueTask AddAsRowAsync(SpreadCheetah.Spreadsheet spreadsheet, spreadcheetahDemo.Person? obj, CancellationToken token) { if (spreadsheet is null) throw new ArgumentNullException(nameof(spreadsheet)); if (obj is null) return spreadsheet.AddRowAsync(ReadOnlyMemory&lt;DataCell&gt;.Empty, token); return AddAsRowInternalAsync(spreadsheet, obj, token); } private static ValueTask AddRangeAsRowsAsync(SpreadCheetah.Spreadsheet spreadsheet, IEnumerable&lt;spreadcheetahDemo.Person?&gt; objs, CancellationToken token) { if (spreadsheet is null) throw new ArgumentNullException(nameof(spreadsheet)); if (objs is null) throw new ArgumentNullException(nameof(objs)); return AddRangeAsRowsInternalAsync(spreadsheet, objs, token); } private static async ValueTask AddAsRowInternalAsync(SpreadCheetah.Spreadsheet spreadsheet, spreadcheetahDemo.Person obj, CancellationToken token) { var cells = ArrayPool&lt;DataCell&gt;.Shared.Rent(2); try { await AddCellsAsRowAsync(spreadsheet, obj, cells, token).ConfigureAwait(false); } finally { ArrayPool&lt;DataCell&gt;.Shared.Return(cells, true); } } private static async ValueTask AddRangeAsRowsInternalAsync(SpreadCheetah.Spreadsheet spreadsheet, IEnumerable&lt;spreadcheetahDemo.Person?&gt; objs, CancellationToken token) { var cells = ArrayPool&lt;DataCell&gt;.Shared.Rent(2); try { await AddEnumerableAsRowsAsync(spreadsheet, objs, cells, token).ConfigureAwait(false); } finally { ArrayPool&lt;DataCell&gt;.Shared.Return(cells, true); } } private static async ValueTask AddEnumerableAsRowsAsync(SpreadCheetah.Spreadsheet spreadsheet, IEnumerable&lt;spreadcheetahDemo.Person?&gt; objs, DataCell[] cells, CancellationToken token) { foreach (var obj in objs) { await AddCellsAsRowAsync(spreadsheet, obj, cells, token).ConfigureAwait(false); } } private static ValueTask AddCellsAsRowAsync(SpreadCheetah.Spreadsheet spreadsheet, spreadcheetahDemo.Person? obj, DataCell[] cells, CancellationToken token) { if (obj is null) return spreadsheet.AddRowAsync(ReadOnlyMemory&lt;DataCell&gt;.Empty, token); cells[0] = new DataCell(obj.FirstName); cells[1] = new DataCell(obj.LastName); return spreadsheet.AddRowAsync(cells.AsMemory(0, 2), token); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#download-example-net--c","content":" tip Download Example project spreadcheetah   ","version":"Next","tagName":"h3"},{"title":"Share spreadcheetah​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#share-spreadcheetah","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/spreadcheetah  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"spreadcheetah by Sveinung","url":"/RSCG_Examples/v2/docs/spreadcheetah#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"StackXML by Zing","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/StackXML","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#info","content":" info Name: StackXML Stack based zero-allocation XML serializer and deserializer powered by C# 9 source generators Author: Zing NuGet:https://www.nuget.org/packages/StackXML/ You can find more details at https://github.com/ZingBallyhoo/StackXML Source: https://github.com/ZingBallyhoo/StackXML  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#original-readme","content":" note StackXML Stack based zero*-allocation XML serializer and deserializer powered by C# 9 source generators. Why​ Premature optimisation :) Setup​ From Nuget https://www.nuget.org/packages/StackXML As a submodule Add the following to your project to reference the serializer and enable the source generator &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\StackXML\\StackXML\\StackXML.csproj&quot; /&gt; &lt;ProjectReference Include=&quot;..\\StackXML\\StackXML.Generator\\StackXML.Generator.csproj&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; /&gt; &lt;/ItemGroup&gt; Usage​ The common entrypoint for deserializing is XmlReadBuffer.ReadStatic(ReadOnlySpan&lt;char&gt;)The common entrypoint for serializing is XmlWriteBuffer.SerializeStatic(IXmlSerializable) This method returns a string, to avoid this allocation you will need create your own instance of XmlWriteBuffer and ensure it is disposed safely like SerializeStatic does. The ToSpan method returns the char span containing the serialized text Features​ Fully structured XML serialization and deserialization with 0 allocations, apart from the output data structure when deserializing. Serialization uses a pooled buffer from ArrayPool&lt;char&gt;.Shared that is released when the serializer is disposed. XmlReadBuffer handles deserializationXmlWriteBuffer handles serializationXmlCls maps a type to an element Used for the serializer to know what the element name should beUsed by the deserializer to map to IXmlSerializable bodies with no explicit name XmlField maps to attributesXmlBody maps to child elementsIXmlSerializable (not actually an interface, see quirks) represents a type that can be read from or written to XML Can be manually added as a base, or the source generator will add it automatically to any type that has XML attributes Parsing delimited attributes into typed lists &lt;test list='1,2,3,4,6,7,8,9'&gt;[XmlField(&quot;list&quot;)] [XmlSplitStr(',')] public List&lt;int&gt; m_list;Using StrReader and StrWriter, see below StrReader and StrWriter classes, for reading and writing (comma usually) delimited strings with 0 allocations. Can be used in a fully structured way by adding StrField attributes to fields on a ref partial struct (not compatible with XmlSplitStr, maybe future consideration) Agnostic logging through LibLog Quirks​ Invalid data inside or between elements is ignored &lt;int&gt;0&lt;this still deserializes as zero with no errors&lt;/int&gt;&lt;test&gt;anything here is completely missed&lt;testInner/&gt;&lt;test/&gt; Spaces between attributes is not required by the deserializer e.g &lt;test one='aa'two='bb'&gt; XmlSerializer must be disposed otherwise the pooled buffer will be leaked. XmlSerializer.SerializeStatic gives of an example of how this should be done in a safe way Data types can only be classes, not structs. All types must inherit from IXmlSerializable (either manually or added by the source generator) which is actually an abstract class and not an interfaceUsing structs would be possible but I don't think its worth the box Types from another assembly can't be used as a field/body. Needs fixingAll elements in the data to parse must be defined in the type in one way or another, otherwise an exception will be thrown. The deserializer relies on complete parsing and has no way of skipping elements Comments within a primitive type body will cause the parser to crash (future consideration...) &lt;n&gt;&lt;!--uh oh--&gt;hi&lt;n&gt; Null strings are currently output exactly the same as empty strings... might need changingThe source generator emits a parameterless constructor on all XML types that initializes List&lt;T&gt; bodies to an empty list Trying to serialize a null list currently crashes the serializer.... When decoding XML text an extra allocation of the input string is required WebUtility.HtmlDecode does not provide an overload taking a span, but the method taking a string turns it into a span anyway.. hmmThe decode is avoided where possible Would be nice to be able to use ValueStringBuilder. See https://github.com/dotnet/runtime/issues/25587 Performance​ Very simple benchmark, loading a single element and getting the string value of its attribute attribute BenchmarkDotNet=v0.13.0, OS=Windows 10.0.19045 Intel Core i5-6600K CPU 3.50GHz (Skylake), 1 CPU, 4 logical and 4 physical cores .NET SDK=9.0.200 [Host] : .NET 9.0.2 (9.0.225.6610), X64 RyuJIT DefaultJob : .NET 9.0.2 (9.0.225.6610), X64 RyuJIT Method\tMean\tError\tStdDev\tRatio\tRatioSD\tGen 0\tGen 1\tGen 2\tAllocatedReadBuffer\t60.16 ns\t0.791 ns\t0.740 ns\t1.00\t0.00\t0.0178\t-\t-\t56 B XmlReader_\t823.91 ns\t6.864 ns\t6.421 ns\t13.70\t0.23\t3.2892\t-\t-\t10,336 B XDocument_\t1,047.87 ns\t17.032 ns\t15.931 ns\t17.42\t0.27\t3.4218\t-\t-\t10,760 B XmlDocument\t1,435.48 ns\t15.425 ns\t14.428 ns\t23.87\t0.43\t3.9063\t-\t-\t12,248 B XmlSerializer\t6,398.11 ns\t88.037 ns\t82.350 ns\t106.37\t2.14\t4.5471\t-\t-\t14,305 B Example data classes​ Simple Attribute​ &lt;test attribute='value'/&gt; [XmlCls(&quot;test&quot;))] public partial class Test { [XmlField(&quot;attribute&quot;)] public string m_attribute; } Text body​ &lt;test2&gt; &lt;name&gt;&lt;![CDATA[Hello world]]&gt;&lt;/name&gt; &lt;/test2&gt; CData can be configured by setting cdataMode for serializing and deserializing &lt;test2&gt; &lt;name&gt;Hello world&lt;/name&gt; &lt;/test2&gt; [XmlCls(&quot;test2&quot;))] public partial class Test2 { [XmlBody(&quot;name&quot;)] public string m_name; } Lists​ &lt;container&gt; &lt;listItem name=&quot;hey&quot; age='25'/&gt; &lt;listItem name=&quot;how&quot; age='2'/&gt; &lt;listItem name=&quot;are&quot; age='4'/&gt; &lt;listItem name=&quot;you&quot; age='53'/&gt; &lt;/container&gt; [XmlCls(&quot;listItem&quot;))] public partial class ListItem { [XmlField(&quot;name&quot;)] public string m_name; [XmlField(&quot;age&quot;)] public int m_age; // could also be byte, uint etc } [XmlCls(&quot;container&quot;)] public partial class ListContainer { [XmlBody()] public List&lt;ListItem&gt; m_items; // no explicit name, is taken from XmlCls } Delimited attributes​ &lt;musicTrack id='5' artists='5,6,1,24,535'&gt; &lt;n&gt;&lt;![CDATA[Awesome music]]&gt;&lt;/n&gt; &lt;tags&gt;cool&lt;/tags&gt; &lt;tags&gt;awesome&lt;/tags&gt; &lt;tags&gt;fresh&lt;/tags&gt; &lt;/musicTrack&gt; [XmlCls(&quot;musicTrack&quot;))] public partial class MusicTrack { [XmlField(&quot;id&quot;)] public int m_id; [XmlBody(&quot;n&quot;)] public string m_name; [XmlField(&quot;artists&quot;), XmlSplitStr(',')] public List&lt;int&gt; m_artists; [XmlBody(&quot;tags&quot;)] public List&lt;string&gt; m_tags; }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#about","content":" note Generating XML serializer without reflection  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references StackXML &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;StackXML&quot; Version=&quot;1.0.0&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  SerializerDemo.Person.cs using System; using System.IO; using System.Collections.Generic; using StackXML; using StackXML.Str; // &lt;auto-generated/&gt; #pragma warning disable namespace SerializerDemo { /// &lt;inheritdoc cref=&quot;Person&quot;/&gt; partial class Person : IXmlSerializable { public virtual ReadOnlySpan&lt;char&gt; GetNodeName() { return &quot;person&quot;; } public virtual bool ParseAttribute(ref XmlReadBuffer buffer, ReadOnlySpan&lt;char&gt; name, ReadOnlySpan&lt;char&gt; value) { switch (name) { case &quot;age&quot;: { this.Age = buffer.m_params.m_stringParser.Parse&lt;System.Int32&gt;(value); return true; } case &quot;name&quot;: { this.Name = value.ToString(); return true; } } return false; } public virtual void SerializeAttributes(ref XmlWriteBuffer buffer) { buffer.PutAttribute(&quot;age&quot;, Age); buffer.PutAttribute(&quot;name&quot;, Name); } public virtual bool ParseFullBody(ref XmlReadBuffer buffer, ReadOnlySpan&lt;char&gt; bodySpan, ref int end) { return false; } public virtual bool ParseSubBody(ref XmlReadBuffer buffer, ReadOnlySpan&lt;char&gt; name, ReadOnlySpan&lt;char&gt; bodySpan, ReadOnlySpan&lt;char&gt; innerBodySpan, ref int end, ref int endInner) { return false; } public virtual void SerializeBody(ref XmlWriteBuffer buffer) { } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#download-example-net--c","content":" tip Download Example project StackXML   ","version":"Next","tagName":"h3"},{"title":"Share StackXML​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#share-stackxml","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/StackXML  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Serializer\" has the following generators:​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#category-serializer-has-the-following-generators","content":" 1 GenPack  2 jsonConverterSourceGenerator  3 JsonPolymorphicGenerator  4 ProtobufSourceGenerator  5 StackXML  6 System.Text.Json  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"StackXML by Zing","url":"/RSCG_Examples/v2/docs/StackXML#see-category","content":" Serializer ","version":"Next","tagName":"h3"},{"title":"StepwiseBuilderGenerator by Georgiy Petrov","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#info","content":" info Name: StepwiseBuilderGenerator This package provides a Source Generator that creates strongly-typed, stepwise “fluent” builders for your types. You simply annotate a class with [StepwiseBuilder] and specify the steps you need in the class’s parameterless constructor. The source generator then produces a partial class containing builder interfaces and step methods. Author: Georgiy Petrov NuGet:https://www.nuget.org/packages/StepwiseBuilderGenerator/ You can find more details at https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator Source: https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#original-readme","content":" note Stepwise Builder Generator This repository provides a Source Generator that creates strongly-typed, stepwise “fluent” builders for your types. You simply annotate a class with [StepwiseBuilder] and specify the steps you need in the class’s parameterless constructor. The source generator then produces a partial class containing builder interfaces and step methods. Why Use Stepwise Builders?​ Compile-time safety: Each required step is enforced in sequence.Reduced boilerplate: No need to handwrite repetitive builder chains.Readable &amp; maintainable: Clean, fluent APIs that guide users step-by-step. How It Works​ Annotate a class with [StepwiseBuilder].Inside the parameterless constructor, create a chain of methods using GenerateStepwiseBuilder(): AddStep&lt;TArgument&gt;(stepName, fieldName = null): adds a step to capture a value of type TArgument.BranchFrom(&quot;BaseBuilderName&quot;, &quot;BaseBuilderStep&quot;) (optional): indicates an alternate path is offered from the step before BaseBuilderStep in BaseBuilderName.CreateBuilderFor&lt;TResult&gt;(): defines the final target type being built. When you compile, the generator inspects these calls and automatically produces: A partial builder class that implements interfaces representing each step.A chain of interfaces (e.g., IYourClassFirstStep, IYourClassSecondStep, …) to enforce the order of steps.An optional extension method if you used BranchFrom(...), allowing you to jump to a new step at the point *before* a specified step in another builder’s chain. Quick Start Example​ 1. Create a Class &amp; Decorate with [StepwiseBuilder]​ using StepwiseBuilderGenerator; [StepwiseBuilder] public partial class MyClass { public MyClass() // Parameterless constructor { GenerateStepwiseBuilder() .AddStep&lt;int&gt;(&quot;FirstStep&quot;, &quot;MyIntField&quot;) .AddStep&lt;string&gt;(&quot;SecondStep&quot;) // defaults to &quot;SecondStepValue&quot; .AddStep&lt;bool&gt;(&quot;ThirdStep&quot;) // further step .CreateBuilderFor&lt;MyTargetType&gt;(); } } When you build your project, the generator produces MyClass.g.cs in the same namespace, containing: IMyClassFirstStep with .FirstStep(int value).IMyClassSecondStep with .SecondStep(string value).IMyClassThirdStep with .ThirdStep(bool value).IMyClassBuild with .Build(Func&lt;MyClass, MyTargetType&gt; buildFunc).A partial MyClass that implements all the above interfaces, storing step values in fields like public int MyIntField;, public string SecondStepValue;, etc. 2. Using the Generated Builder​ var builder = new MyClass(); MyTargetType result = builder .FirstStep(42) .SecondStep(&quot;Hello&quot;) .ThirdStep(true) .Build(instance =&gt; { return new MyTargetType { SomeIntProperty = instance.MyIntField, SomeStringProperty = instance.SecondStepValue, SomeBoolProperty = instance.ThirdStepValue }; }); The stepwise nature ensures you can’t skip or reorder steps; they must be called in the generated sequence. 3. Branching from Another Builder​ Suppose we want an alternative path that branches before SecondStep. Here’s our original chain in MyClass: FirstStep -&gt; SecondStep -&gt; ThirdStep -&gt; Build By writing: [StepwiseBuilder] public partial class MyOtherClass { public MyOtherClass() { GenerateStepwiseBuilder() .BranchFrom(&quot;MyClass&quot;, &quot;SecondStep&quot;) // offer a path from BEFORE 'SecondStep' .AddStep&lt;bool&gt;(&quot;AlternateStep&quot;) .CreateBuilderFor&lt;AnotherType&gt;(); } } We get: A partial MyOtherClass with steps for .AlternateStep(...).An extension method so that right after FirstStep(...) in MyClass, you can choose either to go .SecondStep(...) -&gt; ThirdStep(...) -&gt; Build or .AlternateStep(...) -&gt; Build.Because it’s a separate path, once you choose .AlternateStep(...), you cannot call .ThirdStep(...). FAQ​ 1. What if I have generics in my class?​ The generator handles generic type parameters by including them in the generated partial class and interfaces. 2. What if I have a branch in a generic class?​ If you have a branch (BranchFrom(...)), the branching class should have a matching generic signature (names, constraints, etc.) so the extension methods can properly link the two builders. 3. Can I add custom logic to steps?​ Yes. Because the generated class is partial, you can add your own partial methods or fields. Steps themselves are automatically generated as chainable methods. 4. What happens if I omit a step’s fieldName parameter?​ The generator will default to naming that field as &quot;{StepName}Value&quot;. For example, if your step is .AddStep&lt;int&gt;(&quot;Foo&quot;), the field becomes public int FooValue;. 5. Should I always write the build logic in .Build(...)?​ Not necessarily. It’s often beneficial to keep the .Build(...) method minimal and place common or advanced build logic in extension methods. For instance, suppose your generated interface is IMyClassBuild; you can do: public static class MyClassBuilderExtensions { // This extension method extends the build interface directly public static MyTargetType BuildMyTarget(this IMyClassBuild builder) { // Here, we call the underlying Build method, passing in your creation logic. // You have direct access via the 'myClass' parameter in the delegate. return builder.Build(myClass =&gt; { return new MyTargetType { SomeIntProperty = myClass.MyIntField, SomeStringProperty = myClass.SecondStepValue, SomeBoolProperty = myClass.ThirdStepValue }; }); } } Then in user code, you simply do: var result = new MyClass() .FirstStep(42) .SecondStep(&quot;Hello&quot;) .ThirdStep(true) .BuildMyTarget(); This keeps your builder usage consistent while consolidating object-creation details elsewhere. Steps Enum​ Each generated builder class includes enum Steps listing all steps (excluding the final Build) in the order they were declared. You might use this for logging, debugging, or reflection-based logic if desired. Factory Methods in StepwiseBuilders​ For each generated base builder, the generator also provides a static factory method within the StepwiseBuilders partial class. These methods allow you to conveniently initialize a builder without directly instantiating the generated partial class.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#about","content":" note Generating Builder- as steps  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references StepwiseBuilderGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;StepwiseBuilderGenerator&quot; Version=&quot;1.0.3&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person.g.cs using StepwiseBuilderGenerator; using System; namespace Builder; public interface IPersonSetFirstNameBld { IPersonSetLastNameBuilder SetFirstNameBld(string value); } public interface IPersonSetLastNameBuilder { IPersonAge SetLastNameBuilder(string value); } public interface IPersonAge { IPersonBuild Age(int value); } public interface IPersonBuild { Person Build(Func&lt;Person, Person&gt; buildFunc); } public partial class Person : IPersonSetFirstNameBld,IPersonSetLastNameBuilder,IPersonAge,IPersonBuild { public string FirstName; public string LastName; public int AgeValue; public IPersonSetLastNameBuilder SetFirstNameBld(string value) { FirstName = value; return this; } public IPersonAge SetLastNameBuilder(string value) { LastName = value; return this; } public IPersonBuild Age(int value) { AgeValue = value; return this; } public Person Build(Func&lt;Person, Person&gt; buildFunc) { return buildFunc(this); } public enum Steps { SetFirstNameBld, SetLastNameBuilder, Age, } } public static partial class StepwiseBuilders { public static IPersonSetFirstNameBld Person() { return new Person(); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#download-example-net--c","content":" tip Download Example project StepwiseBuilderGenerator   ","version":"Next","tagName":"h3"},{"title":"Share StepwiseBuilderGenerator​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#share-stepwisebuildergenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/StepwiseBuilderGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Builder\" has the following generators:​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#category-builder-has-the-following-generators","content":" 1 Architect.DomainModeling  2 BuilderGenerator  3 DimonSmart.BuilderGenerator  4 Fluentify  5 Hsu.Sg.FluentMember  6 ShadowWriterBuilder  7 StepwiseBuilderGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"StepwiseBuilderGenerator by Georgiy Petrov","url":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator#see-category","content":" Builder ","version":"Next","tagName":"h3"},{"title":"StringLiteral by Nobuyuki Iwanaga","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/StringLiteral","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#info","content":" info Name: StringLiteral A C# Source Generator for optimizing UTF-8 binaries. Author: Nobuyuki Iwanaga NuGet:https://www.nuget.org/packages/StringLiteralGenerator/ You can find more details at https://github.com/ufcpp/StringLiteralGenerator Source: https://github.com/ufcpp/StringLiteralGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#original-readme","content":" note C# StringLiteralGenerator A C# Source Generator for optimizing UTF-8 binaries. Original source (manually written): namespace Sample { partial class Literals { [StringLiteral.Utf8Attribute(&quot;aαあ😊&quot;)] public static partial System.ReadOnlySpan&lt;byte&gt; S(); } } Generated source: namespace Sample { partial class Literals { public static partial System.ReadOnlySpan&lt;byte&gt; S() =&gt; new byte[] {97, 206, 177, 227, 129, 130, 240, 159, 152, 138, }; } } Generates UTF-8 binary data from string literals (UTF-16).The UTF-8 data is optimized to avoid allocation. see: C# ReadOnlySpan and static data NuGet​ &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;StringLiteralGenerator&quot; Version=&quot;1.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; For versions earlier than .NET 5 SDK RC2 you may also need to add a reference to Microsoft.Net.Compilers.Toolset. So the csproj may look like this: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;StringLiteralGenerator&quot; Version=&quot;1.0.0-preiew&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Net.Compilers.Toolset&quot; Version=&quot;3.8.0-4.final&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#about","content":" note Optimizing memory for strings  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#example-source-csproj-source-files","content":" CSharp ProjectProgram.csLiteralConstants.cs This is the CSharp Project that references StringLiteral &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;StringLiteralGenerator&quot; Version=&quot;2.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  StringLiteralDemo_LiteralConstants_utf8literal.csUtf8Attribute.cs // &lt;auto-generated /&gt; namespace StringLiteralDemo { partial class LiteralConstants { public static partial System.ReadOnlySpan&lt;byte&gt; MyName() =&gt; new byte[] {65, 110, 100, 114, 101, 105, 32, 73, 103, 110, 97, 116, }; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#download-example-net--c","content":" tip Download Example project StringLiteral   ","version":"Next","tagName":"h3"},{"title":"Share StringLiteral​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#share-stringliteral","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/StringLiteral  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Optimizer\" has the following generators:​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#category-optimizer-has-the-following-generators","content":" 1 StringLiteral  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"StringLiteral by Nobuyuki Iwanaga","url":"/RSCG_Examples/v2/docs/StringLiteral#see-category","content":" Optimizer ","version":"Next","tagName":"h3"},{"title":"Strings.ResourceGenerator by Birgir Kristmannsson","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#info","content":" info Name: Strings.ResourceGenerator A Roslyn ISourceGenerator that reads string resources from various file formats and generates resource accessors Author: Birgir Kristmannsson NuGet:https://www.nuget.org/packages/Strings.ResourceGenerator/ You can find more details at https://github.com/biggik/Strings.ResourceGenerator Source: https://github.com/biggik/Strings.ResourceGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#original-readme","content":" note Strings.ResourceGenerator Roslyn source generator that takes strings from various file formats and creates resource accessors that access strings resources in a controlled manner Current support is for: .strings files (one per language, e.g. Errors.strings and Errors.de.strings).strings file (multiple language support in a side-by-side fashion, with embedded configuration).json files (multiple language support).yaml files (multiple language support) The generated accessors use the current region when selecting the language to pick strings from at runtime, but also accessor for per-language fetching of resources, e.g. via Errors.Neutral.MyErrorString and Errors.DE.MyErrorString For all of the formats the following applies: Keys must be unique for each string resourceValues can either use standard formatting (e.g. 0, 1, etc) or interpolation (e.g. {name}), but not bothSignatures must match for all languages Parameters to strings also support type specifiers, formatting specifiers and signature ordering Format: :format, e.g. &quot;String with {0:n2} formatted&quot;Type: @type, e.g. &quot;String with \\{name@string\\}&quot;Order: @order, e.g. String with \\{name@string@1\\}&quot; (order requires type as well) Example of using all: `&quot;String with {amount:n2@decimal@3}&quot;' See examples of files online on the project site .strings files​ A .strings file is simply a UTF-8 encoded flat file of string resources in a key=value format. A slightly more complex version of a .strings file includes configuration and allows for multi-locale strings .strings only​ The format of the file should be ResourceKey=Resource value ExceptionLogging=An exception has occurred. Error message is {message} .strings with multi-locale​ The format of the file should be [Configuration] namespace=MyLibrary.Namespace [Resources] /* Used by exception logger middleware */ ExceptionLogging=An exception has occurred. Error message is {message} is:ExceptionLogging=Villa kom upp. Villuskilaboð voru {message} /* Or, alternatively, skip the resource key for additional locale resources */ ExceptionLogging2=An exception has occurred. Error message is {message} is:Villa kom upp. Villuskilaboð voru {message} .json files​ .json files can be used to add strings. Json files need to be serializable from Strings.ResourceGenerator.Models.StringsModel (using NewtonSoft Json) .yaml files​ .yaml files can be used to add strings. Yaml files need to be serializable from Strings.ResourceGenerator.Models.StringsModel (using YamlDotNet) How to get started Reference the Strings.ResourceGenerate Nuget package Modify the reference as follows &lt;PackageReference Include=&quot;Strings.ResourceGenerator&quot; Version=&quot;0.6.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; Include configuration for AdditionalFiles for the generator, here is one example: &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Resources\\*.strings&quot; /&gt; &lt;AdditionalFiles Include=&quot;Resources\\JsonExample.json&quot; /&gt; &lt;AdditionalFiles Include=&quot;Resources\\NeutralExample.yaml&quot; /&gt; &lt;AdditionalFiles Include=&quot;Resources\\JsonExample.json&quot; /&gt; &lt;AdditionalFiles Include=&quot;Resources\\strings.config&quot; /&gt; &lt;/ItemGroup&gt; Configuration​ While no configuration is required, the following are options to configure basic settings of the generator. Configuration is done by differently based on the type of source file, but is embedded in the file in all cases except where a strings.config file is used. This should be fairly obvious from the example project on GitHub. A generic strings.config is the default where a more specific Errors.strings.config could be used for Errors.strings The defaults for the parameters are as follows public=false preferConst=true prefix= namespace=Strings.Resources public​ if set to true, then the string accessor classes are generated as public classes, suitable in library implementations consumed by other assemblies, otherwise the accessors are internal preferConst​ if set to true (the default), then, where possible, accessors are generated as public const string instead of public static stringThis is not possible for multiple languages, since there a lookup is done based on the locale, so the value is never constant prefix​ If set, then generated classes will be prefixed, e.g. for Errors.strings and a prefix of Application, the generated class would be ApplicationErrors namespace​ If set, then generated classes will be generated in the specified namespace, otherwise they will default to the Strings.Resources namespace Examples​ See Strings.ResourceGenerator.Examples project. In its Resources folder are examples of .strings files and a strings.config file (see MultiLanguageExample.strings, MultiLanguageExample.is.strings, strings.config).strings file with config and multi-locale resources (see MultiLocaleStrings.strings).yml file with config and single-locale resources (see NeutralExample.yaml).json file with config and multi-locale resources (see JsonExample.json) Generation​ For .strings files, empty and commented out lines (prefixed by # or //) are ignored in string generation Validation​ For multi-language string resources, validation is done on: resource keys - each language must have all the same keysresource string parameters - each parameterized resource key must have the same signature for all languages TODO​ Consider supporting XLiff [https://en.wikipedia.org/wiki/XLIFF] Release notes 0.5.0​ Initial release with support for .strings files 0.5.1​ Adding support for .json and .yaml files as well as generation that supports direct access to locale resources via generated resource accessors 0.5.2​ Minor update. Fixed one typo, and generate configuration entries into source as comments 0.5.3​ Minor update. Fixed deserialization of json config 0.5.4​ Minor update. Fixed documentation generation for public interface 0.5.5​ Minor update. Fixed documentation generation for public properties 0.5.6​ Minor update. 0.6.0​ Update to .strings handling to allow for multi-locale and configuration in a single file Documentation updated 0.6.1​ Allow resource key to be optional (.strings file) for additional locale strings 0.6.2​ Temporarily stop splitting long lines due to complexity with interpolation 0.6.3​ Generate generator version into header comments (for clarity) 0.6.4​ Added [ExcludeFromCodeCoverage] attribute to generated classes (configurable) 0.6.5​ Fixed configuration and improved unit tests 0.6.6​ Fixed issue with full namespaces in type declaration parameters 0.6.7​ Fixed normalization of escaped strings 0.6.8​ Encode documentation for valid XML 0.6.9​ Re-fixed normalization. Code requires refactoring from seriously old implementation that mixes responsibilities. But for now ... 0.6.10​ Set, and allow to configure, a custom Justification message for ExcludeFromCodeCoverage attributes 0.6.11​ Add rudimentary support for multi-line raw strings 0.7.0​ Refactored to use IIncrementalGenerator instead of ISourceGenerator on request https://github.com/biggik/Strings.ResourceGenerator/issues/1  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#about","content":" note Generating strongly typed string resources - with parameter and Localization  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example ( source csproj, source files )​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#example--source-csproj-source-files-","content":" CSharp ProjectProgram.csCountries.json This is the CSharp Project that references Strings.ResourceGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;TestData\\*.json&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Strings.ResourceGenerator&quot; Version=&quot;0.7.0&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot; GeneratePathProperty=&quot;true&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Countries.g.cs // &lt;auto-generated/&gt; using System; using System.Collections.Generic; using System.Globalization; namespace Strings.ResourceGenerator.Examples.Resources { // Strings.ResourceGenerator v0.7.0.0 by Status ehf - Generated 2025-08-01 15:26:22 (UTC) // Generated from: D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strings.ResourceGenerator\\src\\EmbedDemo\\TestData\\Countries.json, D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strings.ResourceGenerator\\src\\EmbedDemo\\TestData\\Countries.json // 1 string with interpolation parameters /// &lt;summary&gt; /// Generated string accessor class for Countries /// Configuration [] /// Namespace : Strings.ResourceGenerator.Examples.Resources /// Public : True /// Prefix : /// Const : False /// ExcludeCoverage : True /// ExcludeCoverageMessage : Auto-generated from string resources /// &lt;/summary&gt; [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = &quot;Auto-generated from string resources&quot;)] public static class Countries { // Lazy initializers for each locale private static readonly Lazy&lt;IGeneratedLocalizerForCountries&gt; _neutral = new Lazy&lt;IGeneratedLocalizerForCountries&gt;(() =&gt; InitializeLocalizerFor(&quot;Neutral&quot;)); private static readonly Lazy&lt;IGeneratedLocalizerForCountries&gt; _it = new Lazy&lt;IGeneratedLocalizerForCountries&gt;(() =&gt; InitializeLocalizerFor(&quot;IT&quot;)); private static IGeneratedLocalizerForCountries InitializeLocalizerFor(string locale) { if (locale == &quot;IT&quot;) { return new GeneratedLocalizerForCountriesIT(); } else { return new GeneratedLocalizerForCountriesNeutral(); } } private static IGeneratedLocalizerForCountries Current { get { if (CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToUpper() == &quot;IT&quot;) { return _it.Value; } else { return _neutral.Value; } } } /// &lt;summary&gt; /// Accessor for the 'neutral' locale /// &lt;/summary&gt; public static IGeneratedLocalizerForCountries Neutral =&gt; _neutral.Value; /// &lt;summary&gt; /// Accessor for the 'it' locale /// &lt;/summary&gt; public static IGeneratedLocalizerForCountries IT =&gt; _it.Value; #region String accessors /// &lt;summary&gt; /// Neutral: Goodbye {within} &lt;br/&gt; /// IT: Ciao {within} /// &lt;/summary&gt; public static string Goodbye(string within) =&gt; Current.Goodbye(within); #endregion /// &lt;summary&gt; /// Format the string identified by &lt;paramref name=&quot;name&quot;/&gt; with the given parameters /// &lt;/summary&gt; public static string Format(string name, params object[] args) { return args == null || args.Length == 0 ? name : string.Format(name, args); } /// &lt;summary&gt; /// Unescape unnecessary escapes when string is not used as part of code /// &lt;/summary&gt; public static string Unescape(string value) { return value.Replace(&quot;\\\\&quot;, &quot;&quot;); } /// &lt;summary&gt; /// Get the string identified by &lt;paramref name=&quot;name&quot;/&gt; formatted with the specified parameters /// &lt;/summary&gt; public static string GetString(string name, params object[] args) =&gt; Current.GetString(name, args); /// &lt;summary&gt; /// Get the string identified by &lt;paramref name=&quot;name&quot;/&gt; formatted with the specified parameters, or empty string if not found /// /// &lt;/summary&gt; public static string GetStringOrEmpty(string name, params object[] args) =&gt; Current.GetStringOrEmpty(name, args); #region IGeneratedLocalizerForCountries /// &lt;summary&gt; /// Interface IGeneratedLocalizerForCountries for string access to Countries resources /// &lt;/summary&gt; public interface IGeneratedLocalizerForCountries { /// &lt;summary&gt; /// Get the string identified by &lt;paramref name=&quot;name&quot;/&gt; formatted with the specified parameters /// &lt;/summary&gt; string GetString(string name, params object[] args); /// &lt;summary&gt; /// Get the string identified by &lt;paramref name=&quot;name&quot;/&gt; formatted with the specified parameters, or empty string if not found /// &lt;/summary&gt; string GetStringOrEmpty(string name, params object[] args); /// &lt;summary&gt; /// Goodbye {within} /// &lt;/summary&gt; string Goodbye(string within); } #endregion #region GeneratedLocalizerForCountriesBase [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = &quot;Auto-generated from string resources&quot;)] private abstract class GeneratedLocalizerForCountriesBase { #region Generic string lookup (by dictionary) private readonly Lazy&lt;Dictionary&lt;string, string&gt;&gt; lookup; protected Dictionary&lt;string, string&gt; Lookup =&gt; lookup.Value; protected GeneratedLocalizerForCountriesBase() { lookup = new Lazy&lt;Dictionary&lt;string, string&gt;&gt;(() =&gt; InitializeLookupResources()); } /// &lt;summary&gt; /// Get the string identified by &lt;paramref name=&quot;name&quot;/&gt; formatted with the specified parameters /// &lt;/summary&gt; public string GetString(string name, params object[] args) { if (lookup.Value.ContainsKey(name)) { var s = lookup.Value[name]; return args == null || args.Length == 0 ? s : string.Format(s, args); } throw new ArgumentException($&quot;Lookup value {name} is not found in localized resources in Countries&quot;); } /// &lt;summary&gt; /// Get the string identified by &lt;paramref name=&quot;name&quot;/&gt; formatted with the specified parameters, or empty string if not found /// &lt;/summary&gt; public string GetStringOrEmpty(string name, params object[] args) { try { return GetString(name, args); } catch (ArgumentException) { return &quot;&quot;; } } protected abstract Dictionary&lt;string, string&gt; InitializeLookupResources(); #endregion } #endregion #region GeneratedLocalizerForCountriesIT [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = &quot;Auto-generated from string resources&quot;)] private class GeneratedLocalizerForCountriesIT : GeneratedLocalizerForCountriesBase, IGeneratedLocalizerForCountries { #region Generic string lookup (by dictionary) protected override Dictionary&lt;string, string&gt; InitializeLookupResources() =&gt; new Dictionary&lt;string, string&gt; { { &quot;Goodbye&quot;, &quot;Ciao {within}&quot; }, }; #endregion #region String accessors public string Goodbye(string within) =&gt; $&quot;Ciao {within}&quot;; #endregion } #endregion #region GeneratedLocalizerForCountriesNeutral [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = &quot;Auto-generated from string resources&quot;)] private class GeneratedLocalizerForCountriesNeutral : GeneratedLocalizerForCountriesBase, IGeneratedLocalizerForCountries { #region Generic string lookup (by dictionary) protected override Dictionary&lt;string, string&gt; InitializeLookupResources() =&gt; new Dictionary&lt;string, string&gt; { { &quot;Goodbye&quot;, &quot;Goodbye {within}&quot; }, }; #endregion #region String accessors public string Goodbye(string within) =&gt; $&quot;Goodbye {within}&quot;; #endregion } #endregion } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#download-example-net--c-","content":" tip Download Example project Strings.ResourceGenerator   ","version":"Next","tagName":"h3"},{"title":"Share Strings.ResourceGenerator​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#share-stringsresourcegenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Strings.ResourceGenerator  ","version":"Next","tagName":"h3"},{"title":"In the same category (FilesToCode) - 14 other generators​","type":1,"pageTitle":"Strings.ResourceGenerator by Birgir Kristmannsson","url":"/RSCG_Examples/v2/docs/Strings.ResourceGenerator#in-the-same-category-filestocode---14-other-generators","content":" Chorn.EmbeddedResourceAccessGenerator​  corecraft​  Datacute.EmbeddedResourcePropertyGenerator​  DotnetYang​  EmbedResourceCSharp​  LingoGen​  NotNotAppSettings​  Podimo.ConstEmbed​  ResXGenerator​  RSCG_JSON2Class​  RSCG_Utils​  ThisAssembly_Resources​  ThisAssembly.Strings​  Weave​ ","version":"Next","tagName":"h3"},{"title":"StaticReflection by Cricle","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/StaticReflection","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#info","content":" info Name: StaticReflection Use roslyn to make relection static, autogen code for type reflection Author: Cricle NuGet:https://www.nuget.org/packages/FastStaticReflection/ https://www.nuget.org/packages/FastStaticReflection.CodeGen/ You can find more details at https://github.com/Cricle/StaticReflection/ Source: https://github.com/Cricle/StaticReflection/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#original-readme","content":" note StaticReflection A fast, easy, scalable static reflection. Fast use​ Install from nuget FastStaticReflection, FastStaticReflection.CodeGen Write assembly class [StaticReflectionAssembly]//for generate assembly code public partial class C { } Tag static type reflection //You can Tag at assembly [assembly: StaticReflection(Type = typeof(StaticReflection.Sample.A))] //Or Property [StaticReflection] [StaticReflection(Type =typeof(B))] public A a { get; set; } //Or class [StaticReflection] public class A { //.... } For use internal class Program { static void Main(string[] args) { var b=new Student(); var @class=C.Default.Types.First(x =&gt; x.Name == &quot;Student&quot;); @class.SetProperty(b, &quot;Id&quot;, 1);//Reflection get property value Console.WriteLine(&quot;Id: &quot;+@class.GetProperty(b, &quot;Id&quot;));//Reflection set property value var @event = (IEventTransfer)@class.Events.First(x =&gt; x.Name == &quot;AlreadyGoSchool&quot;); using (var eventScope = @event.CreateScope(b)) { eventScope.Start(); eventScope.EventTransfed += Instance_EventTransfed;//Reflection listen event var method = @class.Methods.First(x =&gt; x.Name == &quot;GoToSchool&quot;); Console.WriteLine(&quot;GoToSchool:&quot; + method.InvokeUsualMethod(b));//Reflection call method } var obj = @class.Constructors.First(x =&gt; x.ArgumentTypes.Count == 0); var inst = obj.InvokeUsualMethod(null);//Reflection create object Console.WriteLine(inst); } private static void Instance_EventTransfed(object? sender, EventTransferEventArgs e) { Console.WriteLine(&quot;EventRaise: &quot; + e.Args[0]); } } [StaticReflection] public record class Student { public int Id { get; set; } public string? Name { get; set; } public event EventHandler&lt;Student&gt;? AlreadyGoSchool; public int GoToSchool() { AlreadyGoSchool?.Invoke(this, this); return Id; } } [StaticReflectionAssembly] public partial class C { } Benchmarks​ Benchmarks  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#about","content":" note Call prop/methods on classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references StaticReflection &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;FastStaticReflection&quot; Version=&quot;1.0.0-preview.3&quot; /&gt; &lt;PackageReference Include=&quot;FastStaticReflection.CodeGen&quot; Version=&quot;1.0.0-preview.3&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  PersonReflection.g.cs // &lt;auto-generated/&gt; #pragma warning disable CS9082 #pragma warning disable CS8669 namespace StaticReflectionDemo { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;StaticReflection.CodeGen&quot;, &quot;1.0.0&quot;)] [global::System.Diagnostics.DebuggerStepThrough] [global::System.Runtime.CompilerServices.CompilerGenerated] internal sealed class PersonReflection : StaticReflection.ITypeDefine { [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;StaticReflection.CodeGen&quot;, &quot;1.0.0&quot;)] [global::System.Diagnostics.DebuggerStepThrough] [global::System.Runtime.CompilerServices.CompilerGenerated] internal sealed class Person0PReflection : StaticReflection.IMemberInvokeDefine&lt;StaticReflectionDemo.Person, string&gt;, StaticReflection.IPropertyDefine, StaticReflection.IMemberAnonymousInvokeDefine { public static readonly Person0PReflection Instance = new Person0PReflection(); public System.Type DeclareType { get; } = typeof(StaticReflectionDemo.Person); public System.String Name { get; } = &quot;FirstName&quot;; public System.String MetadataName { get; } = &quot;FirstName&quot;; public System.Boolean IsVirtual { get; } = false; public System.Boolean IsStatic { get; } = false; public System.Boolean IsOverride { get; } = false; public System.Boolean IsAbstract { get; } = false; public System.Boolean IsSealed { get; } = false; public System.Boolean IsDefinition { get; } = true; public System.Boolean IsExtern { get; } = false; public System.Boolean IsImplicitlyDeclared { get; } = false; public System.Boolean CanBeReferencedByName { get; } = true; public System.Boolean IsPublic { get; } = true; public System.Boolean IsPrivate { get; } = false; public System.Boolean IsProtected { get; } = false; public System.Boolean IsInternal { get; } = false; public System.Type PropertyType { get; } = typeof(string); public System.Boolean CanRead { get; } = true; public System.Boolean CanWrite { get; } = true; public System.Boolean IsRequired { get; } = false; public System.Boolean IsWithEvents { get; } = false; public System.Boolean ReturnsByRef { get; } = false; public System.Boolean ReturnsByRefReadonly { get; } = false; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; GetterAttributes { get; } = new System.Attribute[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; SetterAttributes { get; } = new System.Attribute[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; Attributes { get; } = new System.Attribute[] { }; [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public string GetValue(Person instance) { return instance.FirstName; } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public void SetValue(Person instance, string value) { instance.FirstName = value; } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public void SetValueAnonymous(object instance, object value) { SetValue((StaticReflectionDemo.Person)instance, (string)value); } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public object GetValueAnonymous(object instance) { return (object)GetValue((StaticReflectionDemo.Person)instance); } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;StaticReflection.CodeGen&quot;, &quot;1.0.0&quot;)] [global::System.Diagnostics.DebuggerStepThrough] [global::System.Runtime.CompilerServices.CompilerGenerated] internal sealed class Person1PReflection : StaticReflection.IMemberInvokeDefine&lt;StaticReflectionDemo.Person, string&gt;, StaticReflection.IPropertyDefine, StaticReflection.IMemberAnonymousInvokeDefine { public static readonly Person1PReflection Instance = new Person1PReflection(); public System.Type DeclareType { get; } = typeof(StaticReflectionDemo.Person); public System.String Name { get; } = &quot;LastName&quot;; public System.String MetadataName { get; } = &quot;LastName&quot;; public System.Boolean IsVirtual { get; } = false; public System.Boolean IsStatic { get; } = false; public System.Boolean IsOverride { get; } = false; public System.Boolean IsAbstract { get; } = false; public System.Boolean IsSealed { get; } = false; public System.Boolean IsDefinition { get; } = true; public System.Boolean IsExtern { get; } = false; public System.Boolean IsImplicitlyDeclared { get; } = false; public System.Boolean CanBeReferencedByName { get; } = true; public System.Boolean IsPublic { get; } = true; public System.Boolean IsPrivate { get; } = false; public System.Boolean IsProtected { get; } = false; public System.Boolean IsInternal { get; } = false; public System.Type PropertyType { get; } = typeof(string); public System.Boolean CanRead { get; } = true; public System.Boolean CanWrite { get; } = true; public System.Boolean IsRequired { get; } = false; public System.Boolean IsWithEvents { get; } = false; public System.Boolean ReturnsByRef { get; } = false; public System.Boolean ReturnsByRefReadonly { get; } = false; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; GetterAttributes { get; } = new System.Attribute[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; SetterAttributes { get; } = new System.Attribute[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; Attributes { get; } = new System.Attribute[] { }; [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public string GetValue(Person instance) { return instance.LastName; } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public void SetValue(Person instance, string value) { instance.LastName = value; } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public void SetValueAnonymous(object instance, object value) { SetValue((StaticReflectionDemo.Person)instance, (string)value); } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public object GetValueAnonymous(object instance) { return (object)GetValue((StaticReflectionDemo.Person)instance); } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;StaticReflection.CodeGen&quot;, &quot;1.0.0&quot;)] [global::System.Diagnostics.DebuggerStepThrough] [global::System.Runtime.CompilerServices.CompilerGenerated] internal sealed class Person0MReflection : StaticReflection.IMethodDefine, StaticReflection.Invoking.IArgsMethod&lt;StaticReflectionDemo.Person, string&gt;, StaticReflection.Invoking.IArgs0AnonymousMethod, StaticReflection.Invoking.IUsualArgsMethod&lt;StaticReflectionDemo.Person, string&gt;, StaticReflection.Invoking.IUsualArgs0AnonymousMethod { public static readonly Person0MReflection Instance = new Person0MReflection(); private Person0MReflection() { } public System.String Name { get; } = &quot;Name&quot;; public System.String MetadataName { get; } = &quot;Name&quot;; public System.Boolean IsVirtual { get; } = false; public System.Boolean IsStatic { get; } = false; public System.Boolean IsOverride { get; } = false; public System.Boolean IsAbstract { get; } = false; public System.Boolean IsSealed { get; } = false; public System.Boolean IsDefinition { get; } = true; public System.Boolean IsExtern { get; } = false; public System.Boolean IsImplicitlyDeclared { get; } = false; public System.Boolean CanBeReferencedByName { get; } = true; public System.Boolean IsPublic { get; } = true; public System.Boolean IsPrivate { get; } = false; public System.Boolean IsProtected { get; } = false; public System.Boolean IsInternal { get; } = false; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; Attributes { get; } = new System.Attribute[] { }; public System.Type DeclareType { get; } = typeof(StaticReflectionDemo.Person); public System.Boolean ReturnsByRef { get; } = false; public StaticReflection.StaticMethodKind MethodKind { get; } = StaticReflection.StaticMethodKind.Ordinary; public StaticReflection.StaticRefKind RefKind { get; } = StaticReflection.StaticRefKind.None; public StaticReflection.StaticNullableAnnotation ReturnNullableAnnotation { get; } = StaticReflection.StaticNullableAnnotation.NotAnnotated; public StaticReflection.StaticNullableAnnotation ReceiverNullableAnnotation { get; } = StaticReflection.StaticNullableAnnotation.NotAnnotated; public System.Boolean ReturnsByRefReadonly { get; } = false; public System.Type ReturnType { get; } = typeof(string); public System.Collections.Generic.IReadOnlyList&lt;System.Type&gt; ArgumentTypes { get; } = new System.Type[] { }; public System.Boolean IsGenericMethod { get; } = false; public System.Int32 Arity { get; } = 0; public System.Boolean IsExtensionMethod { get; } = false; public System.Boolean IsAsync { get; } = false; public System.Boolean IsVararg { get; } = false; public System.Boolean IsCheckedBuiltin { get; } = false; public System.Boolean HidesBaseMethodsByName { get; } = false; public System.Boolean ReturnsVoid { get; } = false; public System.Boolean IsReadOnly { get; } = false; public System.Boolean IsInitOnly { get; } = false; public System.Boolean IsPartialDefinition { get; } = false; public System.Boolean IsConditional { get; } = false; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.ITypeArgumentDefine&gt; TypeArguments { get; } = new StaticReflection.ITypeArgumentDefine[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; ReturnTypeAttributes { get; } = new System.Attribute[] { }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public #if !NET7_0_OR_GREATER unsafe #endif ref string Invoke(StaticReflectionDemo.Person instance) { ref string result = ref System.Runtime.CompilerServices.Unsafe.AsRef(instance.Name()); return ref result; } public #if !NET7_0_OR_GREATER unsafe #endif ref object InvokeAnonymous(object instance) { return ref System.Runtime.CompilerServices.Unsafe.AsRef&lt;object&gt;(Invoke((StaticReflectionDemo.Person)instance)); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public string InvokeUsual(StaticReflectionDemo.Person instance) { return instance.Name(); } public object InvokeUsualAnonymous(object instance) { return InvokeUsual((StaticReflectionDemo.Person)instance); } } [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;StaticReflection.CodeGen&quot;, &quot;1.0.0&quot;)] [global::System.Diagnostics.DebuggerStepThrough] [global::System.Runtime.CompilerServices.CompilerGenerated] internal sealed class Person0CReflection : StaticReflection.IConstructorDefine, StaticReflection.Invoking.IArgsMethod&lt;StaticReflectionDemo.Person, StaticReflectionDemo.Person&gt;, StaticReflection.Invoking.IArgs0AnonymousMethod, StaticReflection.Invoking.IUsualArgsMethod&lt;StaticReflectionDemo.Person, StaticReflectionDemo.Person&gt;, StaticReflection.Invoking.IUsualArgs0AnonymousMethod { public static readonly Person0CReflection Instance = new Person0CReflection(); private Person0CReflection() { } public System.String Name { get; } = &quot;.ctor&quot;; public System.String MetadataName { get; } = &quot;.ctor&quot;; public System.Boolean IsVirtual { get; } = false; public System.Boolean IsStatic { get; } = false; public System.Boolean IsOverride { get; } = false; public System.Boolean IsAbstract { get; } = false; public System.Boolean IsSealed { get; } = false; public System.Boolean IsDefinition { get; } = true; public System.Boolean IsExtern { get; } = false; public System.Boolean IsImplicitlyDeclared { get; } = true; public System.Boolean CanBeReferencedByName { get; } = false; public System.Boolean IsPublic { get; } = true; public System.Boolean IsPrivate { get; } = false; public System.Boolean IsProtected { get; } = false; public System.Boolean IsInternal { get; } = false; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; Attributes { get; } = new System.Attribute[] { }; public System.Type DeclareType { get; } = typeof(StaticReflectionDemo.Person); public System.Boolean ReturnsByRef { get; } = false; public StaticReflection.StaticMethodKind MethodKind { get; } = StaticReflection.StaticMethodKind.Constructor; public StaticReflection.StaticRefKind RefKind { get; } = StaticReflection.StaticRefKind.None; public StaticReflection.StaticNullableAnnotation ReturnNullableAnnotation { get; } = StaticReflection.StaticNullableAnnotation.NotAnnotated; public StaticReflection.StaticNullableAnnotation ReceiverNullableAnnotation { get; } = StaticReflection.StaticNullableAnnotation.NotAnnotated; public System.Boolean ReturnsByRefReadonly { get; } = false; public System.Type ReturnType { get; } = typeof(StaticReflectionDemo.Person); public System.Collections.Generic.IReadOnlyList&lt;System.Type&gt; ArgumentTypes { get; } = new System.Type[] { }; public System.Boolean IsGenericMethod { get; } = false; public System.Int32 Arity { get; } = 0; public System.Boolean IsExtensionMethod { get; } = false; public System.Boolean IsAsync { get; } = false; public System.Boolean IsVararg { get; } = false; public System.Boolean IsCheckedBuiltin { get; } = false; public System.Boolean HidesBaseMethodsByName { get; } = false; public System.Boolean ReturnsVoid { get; } = true; public System.Boolean IsReadOnly { get; } = false; public System.Boolean IsInitOnly { get; } = false; public System.Boolean IsPartialDefinition { get; } = false; public System.Boolean IsConditional { get; } = false; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.ITypeArgumentDefine&gt; TypeArguments { get; } = new StaticReflection.ITypeArgumentDefine[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; ReturnTypeAttributes { get; } = new System.Attribute[] { }; [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public #if !NET7_0_OR_GREATER unsafe #endif ref StaticReflectionDemo.Person Invoke(StaticReflectionDemo.Person instance) { ref StaticReflectionDemo.Person result = ref System.Runtime.CompilerServices.Unsafe.AsRef(new Person()); return ref result; } public #if !NET7_0_OR_GREATER unsafe #endif ref object InvokeAnonymous(object instance) { return ref System.Runtime.CompilerServices.Unsafe.AsRef&lt;object&gt;(Invoke((StaticReflectionDemo.Person)instance)); } [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] public StaticReflectionDemo.Person InvokeUsual(StaticReflectionDemo.Person instance) { return new Person(); } public object InvokeUsualAnonymous(object instance) { return InvokeUsual((StaticReflectionDemo.Person)instance); } } public static readonly PersonReflection Instance = new PersonReflection(); public System.Type DeclareType { get; } = typeof(StaticReflectionDemo.Person); public System.String Name { get; } = &quot;Person&quot;; public System.String MetadataName { get; } = &quot;Person&quot;; public System.Boolean IsVirtual { get; } = false; public System.Boolean IsStatic { get; } = false; public System.Boolean IsOverride { get; } = false; public System.Boolean IsAbstract { get; } = false; public System.Boolean IsSealed { get; } = false; public System.Boolean IsDefinition { get; } = true; public System.Boolean IsExtern { get; } = false; public System.Boolean IsImplicitlyDeclared { get; } = false; public System.Boolean CanBeReferencedByName { get; } = true; public System.Boolean IsPublic { get; } = false; public System.Boolean IsPrivate { get; } = false; public System.Boolean IsProtected { get; } = false; public System.Boolean IsInternal { get; } = true; public System.Type? BaseType { get; } = typeof(StaticReflectionDemo.Person); public System.Boolean IsReferenceType { get; } = true; public System.Boolean IsValueType { get; } = false; public System.Boolean IsAnonymousType { get; } = false; public System.Boolean IsTupleType { get; } = false; public System.Boolean IsNativeIntegerType { get; } = false; public System.Boolean IsRefLikeType { get; } = false; public System.Boolean IsUnmanagedType { get; } = false; public System.Boolean IsReadOnly { get; } = false; public System.Boolean IsRecord { get; } = false; public System.Int32 TypeKind { get; } = 2; public StaticReflection.StaticNullableAnnotation NullableAnnotation { get; } = StaticReflection.StaticNullableAnnotation.None; public System.Collections.Generic.IReadOnlyList&lt;System.String&gt; Interfaces { get; } = new System.String[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.String&gt; AllInterfaces { get; } = new System.String[] { }; public System.Collections.Generic.IReadOnlyList&lt;System.Attribute&gt; Attributes { get; } = new System.Attribute[] { new StaticReflection.Annotions.StaticReflectionAttribute() { } }; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.IPropertyDefine&gt; Properties { get; } = new StaticReflection.IPropertyDefine[] { Person0PReflection.Instance, Person1PReflection.Instance }; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.IMethodDefine&gt; Methods { get; } = new StaticReflection.IMethodDefine[] { Person0MReflection.Instance }; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.IEventDefine&gt; Events { get; } = new StaticReflection.IEventDefine[] { }; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.IFieldDefine&gt; Fields { get; } = new StaticReflection.IFieldDefine[] { }; public System.Collections.Generic.IReadOnlyList&lt;StaticReflection.IConstructorDefine&gt; Constructors { get; } = new StaticReflection.IConstructorDefine[] { Person0CReflection.Instance }; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#download-example-net--c","content":" tip Download Example project StaticReflection   ","version":"Next","tagName":"h3"},{"title":"Share StaticReflection​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#share-staticreflection","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/StaticReflection  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"StaticReflection by Cricle","url":"/RSCG_Examples/v2/docs/StaticReflection#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"StronglyTypedUid by Victor Sánchez","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/StronglyTypedUid","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#info","content":" info Name: StronglyTypedUid Implementation of Strongly Typed Ids. Author: Victor Sánchez NuGet:https://www.nuget.org/packages/StronglyTypedUid/ You can find more details at https://github.com/vicosanz/StronglyTypedUid Source: https://github.com/vicosanz/StronglyTypedUid  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#original-readme","content":" note StronglyTypedUid C# Implementation of Strongly Typed Id made easy. StronglyTypedUid StronglyTypedUid.Generator Buy me a coffee​ If you want to reward my effort, ☕ https://www.paypal.com/paypalme/vicosanzdev?locale.x=es_XC All strongly typed ids are source generated, you must create a record struct in this ways: Using attribute decorating a record struct (default Guid version) [StronglyTypedUid] public readonly partial record struct CustomerId { } If you want change to Ulid [StronglyTypedUid(asUlid:true)] public readonly partial record struct CustomerId { } Create additional converters to popular packages like efcore, dapper and newtonsoftjson [StronglyTypedUid(asUlid:true, [EnumAdditionalConverters.EFCore, EnumAdditionalConverters.Dapper, EnumAdditionalConverters.NewtonsoftJson])] public readonly partial record struct CustomerId { } The generator will create a partial record struct of the same name // Auto generated code [TypeConverter(typeof(CustomerIdTypeConverter))] [System.Text.Json.Serialization.JsonConverter(typeof(CustomerIdJsonConverter))] public readonly partial record struct CustomerId(Guid Value) : IStronglyTypedGuid { public static CustomerId Empty =&gt; new(Guid.Empty); public static CustomerId NewCustomerId() =&gt; new(Guid.NewGuid()); public static implicit operator CustomerId(Guid value) =&gt; new(value); public static explicit operator Guid(CustomerId value) =&gt; value.Value; public bool IsEmpty =&gt; Value == Guid.Empty; public override string ToString() =&gt; Value.ToString(); public static CustomerId Parse(string text) =&gt; new CustomerId(Guid.Parse(text)); public static bool TryParse(string text, out CustomerId result) { try { if (Guid.TryParse(text, out Guid uid)) { result = uid; return true; } } catch (Exception) { } result = default; return false; } } You can add additional logic to your strongly type id. [StronglyTypedUid] public readonly partial record struct CustomerId { public override string ToTaggedString() =&gt; $&quot;CID-{Value}&quot;; public static bool TryParseTagged(string text, out CustomerId customer) { try { if (Guid.TryParse(text[4..], out Guid result)) { customer = result; return true; } } catch (Exception) { } customer = default; return false; } } The new type is decorated with a TypeConverter and a JsonConverter automatically [TypeConverter(typeof(CustomerIdTypeConverter))] [System.Text.Json.Serialization.JsonConverter(typeof(CustomerIdJsonConverter))] You can serialize and deserialize without problems public record Customer(CustomerId Id, string Name); var newcustomer = new Customer(CustomerId.NewCustomerId(), &quot;Jhon&quot;); var serializeOptions = new JsonSerializerOptions { WriteIndented = true }; var json = JsonSerializer.Serialize(newcustomer, serializeOptions); var newcustomer2 = JsonSerializer.Deserialize&lt;Customer&gt;(json);   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#about","content":" note Transforming a record into a GUID  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPersonId.cs This is the CSharp Project that references StronglyTypedUid &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;StronglyTypedUid&quot; Version=&quot;1.0.1&quot; /&gt; &lt;PackageReference Include=&quot;StronglyTypedUid.Common&quot; Version=&quot;1.0.1&quot; /&gt; &lt;PackageReference Include=&quot;StronglyTypedUid.Generator&quot; Version=&quot;1.0.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RecordToGuid.PersonId.g.cs using System; using System.ComponentModel; using System.Globalization; using System.Text.Json.Serialization; using System.Text.Json; using System.Buffers; using StronglyTypedUid; #nullable enable namespace RecordToGuid; [TypeConverter(typeof(PersonIdTypeConverter))] [System.Text.Json.Serialization.JsonConverter(typeof(PersonIdJsonConverter))] public readonly partial record struct PersonId(Guid Value) : IStronglyTypedUid { public static PersonId Empty =&gt; new(Guid.Empty); public static PersonId NewPersonId() =&gt; new(Guid.NewGuid()); public static implicit operator PersonId(Guid value) =&gt; new(value); public static explicit operator Guid(PersonId value) =&gt; value.Value; public bool IsEmpty =&gt; Value == Guid.Empty; public override string ToString() =&gt; Value.ToString(); public static PersonId Parse(string text) =&gt; new PersonId(Guid.Parse(text)); public static bool TryParse(string text, out PersonId result) { try { if (Guid.TryParse(text, out Guid uid)) { result = uid; return true; } } catch (Exception) { } result = default; return false; } } public class PersonIdTypeConverter : TypeConverter { private static readonly Type StringType = typeof(string); private static readonly Type UidType = typeof(Guid); public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) =&gt; sourceType == StringType || sourceType == UidType || base.CanConvertFrom(context, sourceType); public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) =&gt; value switch { Guid g =&gt; new PersonId(g), string stringValue =&gt; PersonId.Parse(stringValue), _ =&gt; base.ConvertFrom(context, culture, value), }; public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) =&gt; destinationType == StringType || destinationType == UidType || base.CanConvertTo(context, destinationType); public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) { if (value is PersonId result) { if (destinationType == StringType) { return result.ToString(); } if (destinationType == UidType) { return (Guid)result; } } return base.ConvertTo(context, culture, value, destinationType); } } public class PersonIdJsonConverter : JsonConverter&lt;PersonId&gt; { public override PersonId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { try { if (reader.TokenType != JsonTokenType.String) throw new JsonException(&quot;Expected string&quot;); return new PersonId(new Guid(reader.GetString())); } catch (IndexOutOfRangeException e) { throw new JsonException(&quot;PersonId invalid: length must be 36&quot;, e); } catch (OverflowException e) { throw new JsonException(&quot;PersonId invalid: invalid character&quot;, e); } } public override void Write(Utf8JsonWriter writer, PersonId value, JsonSerializerOptions options) { writer.WriteStringValue(value.ToString()); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#download-example-net--c","content":" tip Download Example project StronglyTypedUid   ","version":"Next","tagName":"h3"},{"title":"Share StronglyTypedUid​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#share-stronglytypeduid","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/StronglyTypedUid  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"PrimitiveObsession\" has the following generators:​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#category-primitiveobsession-has-the-following-generators","content":" 1 DomainPrimitives  2 Strongly  3 StronglyTypedUid  4 UnitGenerator  5 Vogen  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"StronglyTypedUid by Victor Sánchez","url":"/RSCG_Examples/v2/docs/StronglyTypedUid#see-category","content":" PrimitiveObsession ","version":"Next","tagName":"h3"},{"title":"SyncMethodGenerator by Zomp Inc.","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#info","content":" info Name: SyncMethodGenerator Sync Method Generator Author: Zomp Inc. NuGet:https://www.nuget.org/packages/Zomp.SyncMethodGenerator/ You can find more details at https://github.com/zompinc/sync-method-generator Source: https://github.com/zompinc/sync-method-generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#original-readme","content":" note Sync Method Generator This .NET source generator produces a sync method from an async one. Use cases​ A library which exposes both sync and async version of a methodAn application has to process two kinds of data in the same way: Large data from I/O which cannot be stored in memory before processing: Original async methodSmall sample of data in memory, usually a sample of the larger data: Generated sync method How it works​ Add CreateSyncVersionAttribute to your async method in your partial class [Zomp.SyncMethodGenerator.CreateSyncVersion] static async Task WriteAsync(ReadOnlyMemory&lt;byte&gt; buffer, Stream stream, CancellationToken ct) =&gt; await stream.WriteAsync(buffer, ct).ConfigureAwait(true); And it will generate a sync version of the method: static void Write(ReadOnlySpan&lt;byte&gt; buffer, Stream stream) =&gt; stream.Write(buffer); A list of changes applied to the new synchronized method: Remove async modifier Remove await from methods as well as foreach statement Change types From\tToTask or ValueTask\tvoid Task or ValueTask\tT IAsyncEnumerable\tIEnumerable IAsyncEnumerator\tIEnumerator Memory\tSpan ReadOnlyMemory\tReadOnlySpan Remove parameters CancellationTokenIProgress Invocation changes Remove ConfigureAwaitRemove WithCancellationRemove Async suffix from method calls (e.g. MoveNextAsync becomes MoveNext)Remove CancellationToken parameterRemove IProgress.Report(T) callRemove Memory.Span property Remove CreateSyncVersionAttribute Update XML documentation Installation​ To add the library use: dotnet add package Zomp.SyncMethodGenerator   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#about","content":" note Generating Sync method from async  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csWriter.cs This is the CSharp Project that references SyncMethodGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Zomp.SyncMethodGenerator&quot; Version=&quot;1.0.14&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  CreateSyncVersionAttribute.g.csZomp.SyncMethodGeneratorDemo.Writer.HahaAsync.g.csZomp.SyncMethodGeneratorDemo.Writer.WriteAsync.g.cs // &lt;auto-generated/&gt; namespace Zomp.SyncMethodGenerator { /// &lt;summary&gt; /// An attribute that can be used to automatically generate a synchronous version of an async method. Must be used in a partial class. /// &lt;/summary&gt; [System.AttributeUsage(System.AttributeTargets.Method)] internal class CreateSyncVersionAttribute : System.Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#download-example-net--c","content":" tip Download Example project SyncMethodGenerator   ","version":"Next","tagName":"h3"},{"title":"Share SyncMethodGenerator​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#share-syncmethodgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/SyncMethodGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"SyncMethodGenerator by Zomp Inc.","url":"/RSCG_Examples/v2/docs/SyncMethodGenerator#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"SuperFluid by James Hughes","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/SuperFluid","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#info","content":" info Name: SuperFluid An incremental source generator for fluent APIs with grammar Author: James Hughes NuGet:https://www.nuget.org/packages/SuperFluid/ You can find more details at https://github.com/hughesjs/SuperFluid Source: https://github.com/hughesjs/SuperFluid  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#original-readme","content":" note SuperFluid A C# library for generating fluent APIs with grammar. Introduction It is often desirable to define an API that allows us to express our intentions as an easily readable method chain. The most common example of this in C# would probably be LINQ: var result = myCollection .Where(item =&gt; item.IsActive) .OrderBy(item =&gt; item.Name) .Select(item =&gt; new { item.Id, item.Name }); The simple case of this is actually quite simple to implement, you just have each of your methods return the type of the declaring object and this. public class Car { public Car Unlock() { // Do something return this; } public Car Enter() { // Do something return this; } public Car Start() { // Do something return this; } } // Which then lets us do var car = new Car().Unlock().Enter().Start(); However, in this instance, there's nothing stopping us from starting the car before we've unlocked and entered it. Clearly, in cases where we want to enforce a valid state, we have to define a grammar for our API. Typically, we accomplish this by designing a state machine for our API and then working out the set of all unique combinations of transitions, and creating interfaces for each of these states. We can then make the return type for each method be the interface that represents the set of transitions that it allows. public class Car: ICanEnter, ICanStart { public ICanEnter Unlock() { // Do something return this; } public ICanStart Enter() { // Do something return this; } public void Start() { // Do something return this; } } // Which then lets us do var car = new Car().Unlock().Enter().Start(); // But we can't do var car = new Car().Unlock().Start(); // Haven't entered yet var otherCar = new Car().Enter().Start(); // Haven't unlocked yet This write up explains how tricky this can be to do by hand. This is where SuperFluid comes in. It lets us define the grammar for your API in a YAML file and then generates the interfaces for you. All you then need to do is implement the interfaces and you're good to go. How to Use Installation​ You can install SuperFluid from Nuget: Install-Package SuperFluid Defining Your Grammar​ [!WARNING] Your grammar file needs to end with .fluid.yml to be picked up by SuperFluid. Your grammar is defined in a YAML file following this data structure. record FluidApiDefinition { public required string Name { get; init; } public required string Namespace { get; init; } public required FluidApiMethodDefinition InitialState { get; init; } public required List&lt;FluidApiMethodDefinition&gt; Methods { get; init; } } record FluidApiMethodDefinition { public required string Name { get; init; } public string? ReturnType { get; init; } public List&lt;string&gt; CanTransitionTo { get; init; }; public List&lt;FluidApiArgumentDefinition&gt; Arguments { get; init; }; public List&lt;FluidGenericArgumentDefinition&gt; GenericArguments { get; init; }; } record FluidApiArgumentDefinition { public required string Type { get; init; } public required string Name { get; init; } public string? DefaultValue { get; init; } } record FluidGenericArgumentDefinition { public required List&lt;string&gt; Constraints { get; init; } public required string Name { get; init; } } Essentially, you do the following: Define the initial state of your API, the namespaces you want your interfaces to be in, and what you want the main interface to be called.Define each of the methods that you want to be able to call on your API.Define the arguments that each method takes.Define the return type of each method.Define the states that each method can transition to. Then Roslyn will generate the interfaces for you. A simple example of this would be: Name: &quot;ICarActor&quot; Namespace: &quot;SuperFluid.Tests.Cars&quot; InitialState: Name: &quot;Initialize&quot; CanTransitionTo: - &quot;Unlock&quot; Methods: - Name: &quot;Unlock&quot; CanTransitionTo: - &quot;Lock&quot; - &quot;Enter&quot; - Name: &quot;Lock&quot; CanTransitionTo: - &quot;Unlock&quot; - Name: &quot;Enter&quot; CanTransitionTo: - &quot;Start&quot; - &quot;Exit&quot; - Name: &quot;Exit&quot; CanTransitionTo: - &quot;Lock&quot; - &quot;Enter&quot; - Name: &quot;Start&quot; Arguments: # These are deliberately out of order to test that the parser sticks the defaults to the end of the argument list - Name: &quot;direction&quot; Type: &quot;string&quot; DefaultValue: &quot;\\&quot;Forward\\&quot;&quot; # Note that we need the quotes here - Name: &quot;speed&quot; Type: &quot;int&quot; - Name: &quot;hotwire&quot; Type: &quot;bool&quot; DefaultValue: &quot;false&quot; # These constraints are pointless but are here to test the parser GenericArguments: - Name: &quot;T&quot; Constraints: - &quot;class&quot; - &quot;INumber&quot; - Name: &quot;X&quot; Constraints: - &quot;notnull&quot; CanTransitionTo: - &quot;Stop&quot; - &quot;Build&quot; - Name: &quot;Stop&quot; CanTransitionTo: - &quot;Start&quot; - &quot;Exit&quot; - Name: &quot;Build&quot; Arguments: - Name: &quot;color&quot; Type: &quot;string&quot; CanTransitionTo: [] ReturnType: &quot;string&quot; Unfortunately, Roslyn isn't great at giving you feedback for source generation errors. In Rider, you can find them under Problems &gt; Toolset, Environment if it's actually run. I plan to add an analyzer to the project that can give actual feedback to you but this might take a while. Registering Your Grammar File with SuperFluid​ You need to add your grammar file(s) as AdditionalFiles in your csproj file. &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;myGrammarFile.fluid.yml&quot; /&gt; &lt;/ItemGroup&gt; You can have as many files as you want and they don't have to be in the root of your project. Implementing Your API​ Actually implementing the API is pretty simple. You just implement the root interface that has been generated. In the above example, that would be ICarActor. You then just implement the methods on that interface, and you're good to go. One note, if you use your IDE's feature to generate your method stubs, you might end up with multiple declarations of each method for each explicit interface that has it as a component. In this case, just delete the explicit implementations and implement the method once using the standard public type name(args) syntax. This is simply an artefact of the fact that you can arrive at the same method through multiple transitions. Reference Project Another one of my projects PgfPlotsSdk uses SuperFluid to generate a complicated fluent API for working with LaTex PgfPlots. The yaml file for this is here. The relevant class is here.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#about","content":" note Generate a state machine from a yaml file  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#how-to-use-1","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#example-source-csproj-source-files","content":" CSharp ProjectCalculator.fluid.ymlProgram.csCalculatorService.cs This is the CSharp Project that references SuperFluid &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AdditionalFiles Include=&quot;Calculator.fluid.yml&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;SuperFluid&quot; Version=&quot;1.0.1&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;true&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ICalculator.fluid.g.csICanAddOrSubtract.fluid.g.csICanAddOrSubtractOrCalculate.fluid.g.cs namespace SimpleFluentExample; public interface ICalculator: ICanAddOrSubtractOrCalculate,ICanAddOrSubtract { public static abstract ICanAddOrSubtract Create(); }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#download-example-net--c","content":" tip Download Example project SuperFluid   ","version":"Next","tagName":"h3"},{"title":"Share SuperFluid​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#share-superfluid","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/SuperFluid  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"StateMachine\" has the following generators:​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#category-statemachine-has-the-following-generators","content":" 1 SuperFluid  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"SuperFluid by James Hughes","url":"/RSCG_Examples/v2/docs/SuperFluid#see-category","content":" StateMachine ","version":"Next","tagName":"h3"},{"title":"System.Runtime.InteropServices by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#info","content":" info Name: System.Runtime.InteropServices Provides types that support COM interop and platform invoke services. Commonly Used Types: System.Runtime.InteropServices.GCHandle System.Runtime.InteropServices.GuidAttribute System.Runtime.InteropServices.COMException System.DllNotFoundException System.Runtime.InteropServices.DllImportAttribute Author: Microsoft NuGet:https://www.nuget.org/packages/System.Runtime.InteropServices/ You can find more details at https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke-source-generation Source: https://www.nuget.org/packages/System.Runtime.InteropServices/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#original-readme","content":" note  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#about","content":" note Generate PInvoke calls  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDemoMsgBox.csglobals.cs This is the CSharp Project that references System.Runtime.InteropServices &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  LibraryImports.g.cs // &lt;auto-generated/&gt; unsafe partial class DemoImport { [System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Interop.LibraryImportGenerator&quot;, &quot;7.0.10.26716&quot;)] [System.Runtime.CompilerServices.SkipLocalsInitAttribute] internal static partial int MessageBoxW_LI(nint hWnd, string lpText, string lpCaption, uint uType) { int __lastError; int __retVal; // Pin - Pin data in preparation for calling the P/Invoke. fixed (void* __lpText_native = &amp;global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpText)) fixed (void* __lpCaption_native = &amp;global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpCaption)) { System.Runtime.InteropServices.Marshal.SetLastSystemError(0); __retVal = __PInvoke(hWnd, (ushort*)__lpText_native, (ushort*)__lpCaption_native, uType); __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError(); } System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError); return __retVal; // Local P/Invoke [System.Runtime.InteropServices.DllImportAttribute(&quot;user32.dll&quot;, EntryPoint = &quot;MessageBoxW&quot;, ExactSpelling = true)] static extern unsafe int __PInvoke(nint hWnd, ushort* lpText, ushort* lpCaption, uint uType); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#download-example-net--c","content":" tip Download Example project System.Runtime.InteropServices   ","version":"Next","tagName":"h3"},{"title":"Share System.Runtime.InteropServices​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#share-systemruntimeinteropservices","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/System.Runtime.InteropServices  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"System.Runtime.InteropServices by Microsoft","url":"/RSCG_Examples/v2/docs/System.Runtime.InteropServices#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"Strongly by Lucas Teles","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Strongly","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#info","content":" info Name: Strongly A source generator for creating strongly-typed values by decorating with a [Strongly] attribute Author: Lucas Teles NuGet:https://www.nuget.org/packages/Strongly/ You can find more details at https://github.com/lucasteles/Strongly/ Source: https://github.com/lucasteles/Strongly/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#original-readme","content":" note Strongly Strongly makes creating strongly-typed values as easy as adding an attribute! No more accidentally passing arguments in the wrong order to methods - Strongly uses .NET 6's compile-time incremental source generators to generate the boilerplaterequired to use strongly-typed IDs. Simply, install the required package add the [Strongly] attribute to a struct (in the Stronglynamespace): using Strongly; [Strongly] // &lt;- Add this attribute to auto-generate the rest of the type public partial struct FooId { } and the source generator magically generates the backing code when you save the file! Use Go to Definition to see the generated code: Strongly requires requires the .NET Core SDK v6.0.100 or greater. Installing​ To use the the Strongly NuGet package, install the Strongly package into your project. Depending on which converters you implement, you may need one or more of the following additional packages System.Text.Json (optional, only required if generating a System.Text JsonConverter). Note that in .NET Core apps, you will likely already reference this project via transitive dependencies.Newtonsoft.Json (optional, only required if generating a Newtonsoft JsonConverter). Note that in some ASP.NET Core apps, you will likely already reference this project via transitive dependencies.Dapper (optional, only required if generating a type mapper)EF Core (optional, only required if generating an EF Core ValueConverter)Swagger Annotations (optional, only required if generating an Swagger Schema Filter To install the packages, add the references to your csproj file, for example by running dotnet add package Strongly This adds a &lt;PackageReference&gt; to your project. You can additionally mark the package as PrivateAssets=&quot;all&quot;and ExcludeAssets=&quot;runtime&quot;. Setting PrivateAssets=&quot;all&quot; means any projects referencing this one will not also get a reference to the Stronglypackage. Setting ExcludeAssets=&quot;runtime&quot; ensures the Strongly.Attributes.dll file is not copied to your build output (it is not required at runtime). &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;Strongly&quot; Version=&quot;1.0.0&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;runtime&quot;/&gt; &lt;!-- --&gt; &lt;/Project&gt; Usage​ To create a strongly-typed ID, create a partial struct with the desired name, and decorate it with the [Strongly]attribute, in the Strongly namespace: using Strongly; [Strongly] // Add this attribute to auto-generate the rest of the type public partial struct FooId { } This generates the &quot;default&quot; strongly-typed ID using a Guid backing field, a custom TypeConverter, and a custom JsonConverter based on System.Text.Json. Customising the converters​ You can customise which converters to generate by using flags. For example, to generate a TypeConverter, a Newtonsoft.Json, and an EF Core ValueConverter, use using Strongly; [Strongly(converters: StronglyConverter.TypeConverter | StronglyConverter.SystemTextJson | StronglyConverter.EfValueConverter)] public partial struct SystemTextJsonConverterId { } Using different types as a backing fields​ The default strongly-typed ID uses a Guid backing field: using Strongly; [Strongly] public partial struct FooId { } var id = new FooId(Guid.NewGuid()); You can choose a different type backing field, by passing a value of the StronglyBackingType enum in the constructor. using Strongly; [Strongly(backingType: StronglyBackingType.String)] public partial struct FooId { } var id = new FooId(&quot;my-id-value&quot;); Currently supported values are Guid (the default), int, long,decimal,BigInteger, MassTransit.NewIdand string. Changing the defaults globally​ If you wish to change the converters, backing types, or implementations used by default for all the [Strongly]-decorated types in your project, you can use the assembly attribute [StronglyDefaults] to set all of these. For example, the following sets the default converter to a whole project to [SystemTextJson], and changes the default backing-type to an int // Set the defaults for the project [assembly:StronglyDefaults( backingType: StronglyType.Int, converters: StronglyConverter.SystemTextJson)] [Strongly] public partial struct OrderId { } [Strongly] public partial struct UserId { } This is equivalent to setting these values manually on all the IDs: [Strongly( backingType: StronglyType.Int, converters: StronglyConverter.SystemTextJson)] public partial struct OrderId { } [Strongly( backingType: StronglyType.Int, converters: StronglyConverter.SystemTextJson)] public partial struct UserId { } EF Core - ValueConverter​ When you create a Strongly type with EF Converter, the type will have a nested ValueConverter class you can use on your entity model definition [Strongly(StronglyType.String, StronglyConverter.EfValueConverter)] public partial struct PhoneNumber { } public class MyDbContext : DbContext { protected override void OnModelCreating(ModelBuilder builder) { var customer = builder.Entity&lt;Customer&gt;(); customer.Property(x =&gt; x.Phone).HasConversion&lt;PhoneNumber.EfValueConverter&gt;(); } } If you have lots of strongly type values you can use the package bellow to automatically set the Strongly ValueConverter on all your entities dotnet add package Strongly.EFCore After installation you need to set it on yor DbContextOptionsBuilder services .AddDbContext&lt;AppDbContext&gt;(options =&gt; options .UseStronglyTypeConverters() /* ... */ ) OpenApi/Swagger Specification​ If you wish to use an ID in your Swagger models and want to have schema and model sample reflecting the value backing-field type you will need: Install Swagger Annotations &gt;=5.0.0Enable annotation in swagger gen with services.AddSwaggerGen(c =&gt; c.EnableAnnotations());Use the converter flag StronglyConverter.SwaggerSchemaFilter on the ID decorator. eg: [Strongly( backingType: StronglyType.Int, converters: StronglyConverter.SwaggerSchemaFilter | StronglyConverter.SystemTextJson)] public partial struct UserId { } Embedding the attributes in your project​ By default, the [Strongly] attributes referenced in your application are contained in an external dll. It is also possible to embed the attributes directly in your project, so they appear in the dll when your project is built. If you wish to do this, you must do two things: Define the MSBuild constant STRONGLY_TYPED_EMBED_ATTRIBUTES. This ensures the attributes are embedded in your projectAdd compile to the list of excluded assets in your &lt;PackageReference&gt; element. This ensures the attributes in your project are referenced, instead of the Strongly.Attributes.dll library. Your project file should look something like this: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;!-- Define the MSBuild constant --&gt; &lt;DefineConstants&gt;STRONGLY_TYPED_EMBED_ATTRIBUTES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;Strongly&quot; Version=&quot;1.0.0&quot; PrivateAssets=&quot;all&quot; ExcludeAssets=&quot;compile;runtime&quot;/&gt; &lt;!-- ☝ Add compile to the list of excluded assets. --&gt; &lt;/Project&gt; Preserving usages of the [Strongly] attribute​ The [Strongly] and [StronglyDefaults] attributes are decorated with the [Conditional]attribute, so their usage will not appear in the build output of your project. If you use reflection at runtime on one of your IDs, you will not find [Strongly] in the list of custom attributes. If you wish to preserve these attributes in the build output, you can define the STRONGLY_TYPED_USAGES MSBuild variable. Note that this means your project will have a runtime-dependency on Strongly.Attributes.dll so you need to ensure this is included in your build output. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt; &lt;!-- Define the MSBuild constant to preserve usages --&gt; &lt;DefineConstants&gt;STRONGLY_TYPED_USAGES&lt;/DefineConstants&gt; &lt;/PropertyGroup&gt; &lt;!-- Add the package --&gt; &lt;PackageReference Include=&quot;Strongly&quot; Version=&quot;1.0.0&quot; PrivateAssets=&quot;all&quot;/&gt; &lt;!-- ☝ You must not exclude the runtime assets in this case --&gt; &lt;/Project&gt; Why do I need this library?​ Andrew have written a blog-post serieson strongly-typed IDs that explains the issues and rational behind this library. For a detailed view, I suggest starting there, but I provide a brief introduction here. This library is designed to tackle a specific instance of primitive obsession, whereby we use primitive objects (Guid/string/int/long/decimal etc) to represent the IDs or values of domain objects. The problem is that these types are all interchangeable - an order ID can be assigned to a product ID despite the fact that is likely nonsensical from the domain point of view. See here for a more concrete example. By using strongly-typed values, we give each of then its own Type which wraps the underlying primitive value. This ensures you can only use the value where it makes sense: ProductIds can only be assigned to products, or you can only search for products using a ProductId, not an OrderId. Unfortunately, taking this approach requires a lot of boilerplate and ceremonyto make working with it manageable. This library abstracts all that away from you, by generating the boilerplate at build-time by using a Roslyn-powered code generator. What code is generated?​ The exact code generated depends on the arguments you provide to the Strongly attribute. The code is generated to theobj folder of the project, so you can use Go to Definition on your Id to see the exact code generated in each case. Requirements​ The Strongly NuGet package is a .NET Standard 2.0 package. You must be using the .NET 6+ SDK (though you can compile for other target frameworks like .NET Core 2.1 and .NET Framework 4.8) The structs you decorate with the Strongly attribute must be marked partial. Credits​ This project born as a fork of StronglyTypedId  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#about","content":" note Generate and customize strong id structs  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Strongly &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Strongly&quot; Version=&quot;1.1.0&quot; OutputItemType=&quot;Analyzer&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  StronglyAttribute.g.csStronglyConverter.g.csStronglyDefaultsAttribute.g.csStronglyDemo.DayId.g.csStronglyDemo.MonthId.g.csStronglyDemo.YearId.g.csStronglyImplementations.g.csStronglyType.g.cs #if STRONGLY_TYPED_EMBED_ATTRIBUTES using System; namespace Strongly { /// &lt;summary&gt; /// Place on partial structs to make the type a strongly-typed ID /// &lt;/summary&gt; [AttributeUsage(AttributeTargets.Struct)] [System.Diagnostics.Conditional(&quot;STRONGLY_TYPED_USAGES&quot;)] internal sealed class StronglyAttribute : Attribute { /// &lt;summary&gt; /// Make the struct a strongly typed ID /// &lt;/summary&gt; /// &lt;param name=&quot;backingType&quot;&gt;The &lt;see cref=&quot;Type&quot;/&gt; to use to store the strongly-typed ID value. /// If not set, uses &lt;see cref=&quot;StronglyDefaultsAttribute.BackingType&quot;/&gt;, which defaults to &lt;see cref=&quot;StronglyType.Guid&quot;/&gt;&lt;/param&gt; /// &lt;param name=&quot;converters&quot;&gt;Converters to create for serializing/deserializing the strongly-typed ID value. /// If not set, uses &lt;see cref=&quot;StronglyDefaultsAttribute.Converters&quot;/&gt;, which defaults to &lt;see cref=&quot;StronglyConverter.NewtonsoftJson&quot;/&gt; /// and &lt;see cref=&quot;StronglyConverter.TypeConverter&quot;/&gt;&lt;/param&gt; /// &lt;param name=&quot;implementations&quot;&gt;Interfaces and patterns the strongly typed id should implement /// If not set, uses &lt;see cref=&quot;StronglyDefaultsAttribute.Implementations&quot;/&gt;, which defaults to &lt;see cref=&quot;StronglyImplementations.IEquatable&quot;/&gt; /// and &lt;see cref=&quot;StronglyImplementations.IComparable&quot;/&gt;&lt;/param&gt; public StronglyAttribute( StronglyType backingType = StronglyType.Default, StronglyConverter converters = StronglyConverter.Default, StronglyImplementations implementations = StronglyImplementations.Default) { BackingType = backingType; Converters = converters; Implementations = implementations; } /// &lt;summary&gt; /// The &lt;see cref=&quot;Type&quot;/&gt; to use to store the strongly-typed ID value /// &lt;/summary&gt; public StronglyType BackingType { get; } /// &lt;summary&gt; /// JSON library used to serialize/deserialize strongly-typed ID value /// &lt;/summary&gt; public StronglyConverter Converters { get; } /// &lt;summary&gt; /// Interfaces and patterns the strongly typed id should implement /// &lt;/summary&gt; public StronglyImplementations Implementations { get; } } } #endif   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#download-example-net--c","content":" tip Download Example project Strongly   ","version":"Next","tagName":"h3"},{"title":"Share Strongly​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#share-strongly","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Strongly  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"PrimitiveObsession\" has the following generators:​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#category-primitiveobsession-has-the-following-generators","content":" 1 DomainPrimitives  2 Strongly  3 StronglyTypedUid  4 UnitGenerator  5 Vogen  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Strongly by Lucas Teles","url":"/RSCG_Examples/v2/docs/Strongly#see-category","content":" PrimitiveObsession ","version":"Next","tagName":"h3"},{"title":"System.Text.RegularExpressions by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#info","content":" info Name: System.Text.RegularExpressions Provides the System.Text.RegularExpressions.Regex class, an implementation of a regular expression engine. Commonly Used Types: System.Text.RegularExpressions.Regex System.Text.RegularExpressions.RegexOptions System.Text.RegularExpressions.Match System.Text.RegularExpressions.Group System.Text.RegularExpressions.Capture System.Text.RegularExpressions.MatchEvaluator Author: Microsoft NuGet:https://www.nuget.org/packages/System.Text.RegularExpressions/ You can find more details at https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-source-generators/ Source: https://github.com/dotnet/runtime  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#original-readme","content":" note .NET Runtime What is .NET?How can I contribute?Reporting security issues and security bugsFiling issuesUseful Links.NET FoundationLicense This repo contains the code to build the .NET runtime, libraries and shared host (dotnet) installers for all supported platforms, as well as the sources to .NET runtime and libraries. What is .NET?​ Official Starting Page: &lt;https://dotnet.microsoft.com\\&gt; How to use .NET (with VS, VS Code, command-line CLI) Install official releasesInstall daily buildsDocumentation (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) Deploying apps Supported OS versions RoadmapReleases How can I contribute?​ We welcome contributions! Many people all over the world have helped make this project better. Contributing explains what kinds of contributions we welcomeWorkflow Instructions explains how to build and testGet Up and Running on .NET Core explains how to get nightly builds of the runtime and its libraries to test them in your own projects. Reporting security issues and security bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;secure@microsoft.com&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's Security doc. Also see info about related Microsoft .NET Core and ASP.NET Core Bug Bounty Program. Filing issues​ This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the dotnet binary (sometimes known as the muxer) and installation of the .NET runtime and libraries. For other issues, please file them to their appropriate sibling repos. We have links to many of them on our new issue page. Useful Links​ .NET Core source index / .NET Framework source indexAPI Reference docs.NET API Catalog (incl. APIs from daily builds and API usage info)API docs writing guidelines - useful when writing /// comments.NET Discord Server - a place to discuss the development of .NET and its ecosystem .NET Foundation​ .NET Runtime is a .NET Foundation project. There are many .NET related projects on GitHub. .NET home repo - links to 100s of .NET projects, from Microsoft and the community.ASP.NET Core home - the best place to start learning about ASP.NET Core. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. General .NET OSS discussions: .NET Foundation Discussions License​ .NET (including the runtime repo) is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#about","content":" note Regex compiled  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#example-source-csproj-source-files","content":" CSharp ProjectProgram.csWeatherForecast.cs This is the CSharp Project that references System.Text.RegularExpressions &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RegexGenerator.g.cs // &lt;auto-generated/&gt; #nullable enable #pragma warning disable CS0162 // Unreachable code #pragma warning disable CS0164 // Unreferenced label #pragma warning disable CS0219 // Variable assigned but never used namespace Demo { partial class DemoRegex { /// &lt;remarks&gt; /// Pattern explanation:&lt;br/&gt; /// &lt;code&gt; /// ○ Match with 2 alternative expressions, atomically.&lt;br/&gt; /// ○ Match a sequence of expressions.&lt;br/&gt; /// ○ Match a character in the set [Aa].&lt;br/&gt; /// ○ Match a character in the set [Bb].&lt;br/&gt; /// ○ Match a character in the set [Cc].&lt;br/&gt; /// ○ Match a sequence of expressions.&lt;br/&gt; /// ○ Match a character in the set [Dd].&lt;br/&gt; /// ○ Match a character in the set [Ee].&lt;br/&gt; /// ○ Match a character in the set [Ff].&lt;br/&gt; /// &lt;/code&gt; /// &lt;/remarks&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;System.Text.RegularExpressions.Generator&quot;, &quot;7.0.10.26716&quot;)] private static partial global::System.Text.RegularExpressions.Regex AbcOrDefGeneratedRegex() =&gt; global::System.Text.RegularExpressions.Generated.AbcOrDefGeneratedRegex_0.Instance; } } namespace System.Text.RegularExpressions.Generated { using System; using System.CodeDom.Compiler; using System.Collections; using System.ComponentModel; using System.Globalization; using System.Runtime.CompilerServices; using System.Text.RegularExpressions; using System.Threading; /// &lt;summary&gt;Custom &lt;see cref=&quot;Regex&quot;/&gt;-derived type for the AbcOrDefGeneratedRegex method.&lt;/summary&gt; [GeneratedCodeAttribute(&quot;System.Text.RegularExpressions.Generator&quot;, &quot;7.0.10.26716&quot;)] file sealed class AbcOrDefGeneratedRegex_0 : Regex { /// &lt;summary&gt;Cached, thread-safe singleton instance.&lt;/summary&gt; internal static readonly AbcOrDefGeneratedRegex_0 Instance = new(); /// &lt;summary&gt;Initializes the instance.&lt;/summary&gt; private AbcOrDefGeneratedRegex_0() { base.pattern = &quot;abc|def&quot;; base.roptions = RegexOptions.IgnoreCase; ValidateMatchTimeout(Utilities.s_defaultTimeout); base.internalMatchTimeout = Utilities.s_defaultTimeout; base.factory = new RunnerFactory(); base.capsize = 1; } /// &lt;summary&gt;Provides a factory for creating &lt;see cref=&quot;RegexRunner&quot;/&gt; instances to be used by methods on &lt;see cref=&quot;Regex&quot;/&gt;.&lt;/summary&gt; private sealed class RunnerFactory : RegexRunnerFactory { /// &lt;summary&gt;Creates an instance of a &lt;see cref=&quot;RegexRunner&quot;/&gt; used by methods on &lt;see cref=&quot;Regex&quot;/&gt;.&lt;/summary&gt; protected override RegexRunner CreateInstance() =&gt; new Runner(); /// &lt;summary&gt;Provides the runner that contains the custom logic implementing the specified regular expression.&lt;/summary&gt; private sealed class Runner : RegexRunner { /// &lt;summary&gt;Scan the &lt;paramref name=&quot;inputSpan&quot;/&gt; starting from base.runtextstart for the next match.&lt;/summary&gt; /// &lt;param name=&quot;inputSpan&quot;&gt;The text being scanned by the regular expression.&lt;/param&gt; protected override void Scan(ReadOnlySpan&lt;char&gt; inputSpan) { // Search until we can't find a valid starting position, we find a match, or we reach the end of the input. while (TryFindNextPossibleStartingPosition(inputSpan) &amp;&amp; !TryMatchAtCurrentPosition(inputSpan) &amp;&amp; base.runtextpos != inputSpan.Length) { base.runtextpos++; if (Utilities.s_hasTimeout) { base.CheckTimeout(); } } } /// &lt;summary&gt;Search &lt;paramref name=&quot;inputSpan&quot;/&gt; starting from base.runtextpos for the next location a match could possibly start.&lt;/summary&gt; /// &lt;param name=&quot;inputSpan&quot;&gt;The text being scanned by the regular expression.&lt;/param&gt; /// &lt;returns&gt;true if a possible match was found; false if no more matches are possible.&lt;/returns&gt; private bool TryFindNextPossibleStartingPosition(ReadOnlySpan&lt;char&gt; inputSpan) { int pos = base.runtextpos; ulong charMinusLow; // Any possible match is at least 3 characters. if (pos &lt;= inputSpan.Length - 3) { // The pattern matches a character in the set [CFcf] at index 2. // Find the next occurrence. If it can't be found, there's no match. ReadOnlySpan&lt;char&gt; span = inputSpan.Slice(pos); for (int i = 0; i &lt; span.Length - 2; i++) { int indexOfPos = span.Slice(i + 2).IndexOfAny(&quot;CFcf&quot;); if (indexOfPos &lt; 0) { goto NoMatchFound; } i += indexOfPos; if (((long)((0x9000000090000000UL &lt;&lt; (int)(charMinusLow = (uint)span[i] - 'A')) &amp; (charMinusLow - 64)) &lt; 0) &amp;&amp; ((long)((0x9000000090000000UL &lt;&lt; (int)(charMinusLow = (uint)span[i + 1] - 'B')) &amp; (charMinusLow - 64)) &lt; 0)) { base.runtextpos = pos + i; return true; } } } // No match found. NoMatchFound: base.runtextpos = inputSpan.Length; return false; } /// &lt;summary&gt;Determine whether &lt;paramref name=&quot;inputSpan&quot;/&gt; at base.runtextpos is a match for the regular expression.&lt;/summary&gt; /// &lt;param name=&quot;inputSpan&quot;&gt;The text being scanned by the regular expression.&lt;/param&gt; /// &lt;returns&gt;true if the regular expression matches at the current position; otherwise, false.&lt;/returns&gt; private bool TryMatchAtCurrentPosition(ReadOnlySpan&lt;char&gt; inputSpan) { int pos = base.runtextpos; int matchStart = pos; ReadOnlySpan&lt;char&gt; slice = inputSpan.Slice(pos); // Match with 2 alternative expressions, atomically. { if (slice.IsEmpty) { return false; // The input didn't match. } switch (slice[0]) { case 'A' or 'a': if ((uint)slice.Length &lt; 3 || !slice.Slice(1).StartsWith(&quot;bc&quot;, StringComparison.OrdinalIgnoreCase)) // Match the string &quot;bc&quot; (ordinal case-insensitive) { return false; // The input didn't match. } pos += 3; slice = inputSpan.Slice(pos); break; case 'D' or 'd': if ((uint)slice.Length &lt; 3 || !slice.Slice(1).StartsWith(&quot;ef&quot;, StringComparison.OrdinalIgnoreCase)) // Match the string &quot;ef&quot; (ordinal case-insensitive) { return false; // The input didn't match. } pos += 3; slice = inputSpan.Slice(pos); break; default: return false; // The input didn't match. } } // The input matched. base.runtextpos = pos; base.Capture(0, matchStart, pos); return true; } } } } /// &lt;summary&gt;Helper methods used by generated &lt;see cref=&quot;Regex&quot;/&gt;-derived implementations.&lt;/summary&gt; [GeneratedCodeAttribute(&quot;System.Text.RegularExpressions.Generator&quot;, &quot;7.0.10.26716&quot;)] file static class Utilities { /// &lt;summary&gt;Default timeout value set in &lt;see cref=&quot;AppContext&quot;/&gt;, or &lt;see cref=&quot;Regex.InfiniteMatchTimeout&quot;/&gt; if none was set.&lt;/summary&gt; internal static readonly TimeSpan s_defaultTimeout = AppContext.GetData(&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;) is TimeSpan timeout ? timeout : Regex.InfiniteMatchTimeout; /// &lt;summary&gt;Whether &lt;see cref=&quot;s_defaultTimeout&quot;/&gt; is non-infinite.&lt;/summary&gt; internal static readonly bool s_hasTimeout = s_defaultTimeout != Timeout.InfiniteTimeSpan; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#download-example-net--c-","content":" tip Download Example project System.Text.RegularExpressions   ","version":"Next","tagName":"h3"},{"title":"Share System.Text.RegularExpressions​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#share-systemtextregularexpressions","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/System.Text.RegularExpressions  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementClass) - 27 other generators​","type":1,"pageTitle":"System.Text.RegularExpressions by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.RegularExpressions#in-the-same-category-enhancementclass---27-other-generators","content":" ApparatusAOT​  AspectGenerator​  CommonCodeGenerator​  Comparison​  DudNet​  Enhanced.GetTypes​  FastGenericNew​  HsuSgSync​  Immutype​  Ling.Audit​  Lombok.NET​  M31.FluentAPI​  MemberAccessor​  MemoryPack​  Meziantou.Polyfill​  Microsoft.Extensions.Logging​  Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator​  Microsoft.Interop.JavaScript.JSImportGenerator​  OptionToStringGenerator​  QueryStringGenerator​  RSCG_Decorator​  RSCG_UtilityTypes​  StaticReflection​  SyncMethodGenerator​  System.Runtime.InteropServices​  TelemetryLogging​  ThisClass​ ","version":"Next","tagName":"h3"},{"title":"TableStorage by Steven Thuriot","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/TableStorage","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#info","content":" info Name: TableStorage Package Description Author: Steven Thuriot NuGet:https://www.nuget.org/packages/TableStorage/ You can find more details at https://github.com/StevenThuriot/TableStorage Source: https://github.com/StevenThuriot/TableStorage  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#original-readme","content":" note TableStorage Streamlined way of working with Azure Data Tables Installation​ dotnet add package TableStorage Usage​ Create your own TableContext and mark it with the [TableContext] attribute. This class must be partial. [TableContext] public partial class MyTableContext; Create your models, these must be classes and have a parameterless constructor. Mark them with the [TableSet] attribute. This class must be partial. [TableSet] public partial class Model { public string Data { get; set; } public bool Enabled { get; set; } } Properties can also be defined using the [TableSetProperty] attribute. This is particularly useful if you are planning on using dotnet 8+'s Native AOT, as the source generation will make sure any breaking reflection calls are avoided by the Azure.Core libraries. [TableSet] [TableSetProperty(typeof(string), &quot;Data&quot;)] [TableSetProperty(typeof(bool), &quot;Enabled&quot;)] public partial class Model; Some times it's also nice to have a pretty name for your PartitionKey and RowKey properties, as the original names might not always make much sense when reading your code, at least not in a functional way. You can use the [PartitionKeyAttribute] and [RowKeyAttribute] attributes to create a proxy for these two properties. [TableSet] [PartitionKey(&quot;MyPrettyPartitionKey&quot;)] [RowKey(&quot;MyPrettyRowKey&quot;)] public partial class Model; Place your tables on your TableContext. The sample below will create 2 tables in table storage, named Models1 and Models2. [TableContext] public partial class MyTableContext { public TableSet&lt;Model&gt; Models1 { get; set; } public TableSet&lt;Model&gt; Models2 { get; set; } } Register your TableContext in your services. An extension method will be available specifically for your context. builder.Services.AddMyTableContext(builder.Configuration.GetConnectionString(&quot;MyConnectionString&quot;)); Optionally, pass along a Configure method to adjust some configuration options. builder.Services.AddMyTableContext(builder.Configuration.GetConnectionString(&quot;MyConnectionString&quot;), Configure); static void Configure(TableOptions options) { options.AutoTimestamps = true; options.TableMode = TableUpdateMode.Merge; } Inject MyTableContext into your class and use as needed. public class MyService(MyTableContext context) { private readonly MyTableContext _context = context; public async Task DoSomething(CancellationToken token) { var entity = await _context.Models1.GetEntityOrDefaultAsync(&quot;partitionKey&quot;, &quot;rowKey&quot;, token); if (entity is not null) { //Do more } } } For some special cases, your table name might not be known at compile time. To handle those, an extension method has been added: var tableSet = context.GetTableSet&lt;Model&gt;(&quot;randomname&quot;); Linq​ A few simple Linq extension methods have been provided in the TableStorage.Linq namespace that optimize some existing LINQ methods specifically for Table Storage. Since these return an instance that implements IAsyncEnumerable, System.Linq.Async is an excellent companion to these methods. Do keep in mind that as soon as you start using IAsyncEnumerable, any further operations will run client-side. Note: Select will include the actual transformation. If you want the original model, with only the selected fields retrieved, use SelectFields instead. If you are using Native AOT, you will need to use SelectFields as Select will not work.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#about","content":" note Generate resources for accessing Azure Table Storage  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDatabase.cs This is the CSharp Project that references TableStorage &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Azure.Storage.Blobs&quot; Version=&quot;12.13.1&quot; /&gt; &lt;PackageReference Include=&quot;Azure.Storage.Files.Shares&quot; Version=&quot;12.1.0&quot; /&gt; &lt;PackageReference Include=&quot;Azure.Storage.Queues&quot; Version=&quot;12.11.1&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Azure&quot; Version=&quot;1.5.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.DependencyInjection&quot; Version=&quot;8.0.0&quot; /&gt; &lt;PackageReference Include=&quot;TableStorage&quot; Version=&quot;4.2.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TableContextAttribute.g.csTableContexts.g.csTableSetAttributes.g.csTableSets.g.cs using System; namespace TableStorage { [AttributeUsage(AttributeTargets.Class)] public sealed class TableContextAttribute : Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#download-example-net--c","content":" tip Download Example project TableStorage   ","version":"Next","tagName":"h3"},{"title":"Share TableStorage​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#share-tablestorage","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/TableStorage  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Database\" has the following generators:​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#category-database-has-the-following-generators","content":" 1 Breezy  2 Dapper.AOT  3 EntityLengths.Generator  4 Gedaq  5 TableStorage  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"TableStorage by Steven Thuriot","url":"/RSCG_Examples/v2/docs/TableStorage#see-category","content":" Database ","version":"Next","tagName":"h3"},{"title":"System.Text.Json by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/System.Text.Json","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#info","content":" info Name: System.Text.Json A minimalistic and fast JSON parser/deserializer, for full .NET Author: Microsoft NuGet:https://www.nuget.org/packages/System.Text.Json/ You can find more details at https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/source-generation Source: https://github.com/dotnet/runtime  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#original-readme","content":" note .NET Runtime What is .NET?How can I contribute?Reporting security issues and security bugsFiling issuesUseful Links.NET FoundationLicense This repo contains the code to build the .NET runtime, libraries and shared host (dotnet) installers for all supported platforms, as well as the sources to .NET runtime and libraries. What is .NET?​ Official Starting Page: &lt;https://dotnet.microsoft.com\\&gt; How to use .NET (with VS, VS Code, command-line CLI) Install official releasesInstall daily buildsDocumentation (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) Deploying apps Supported OS versions RoadmapReleases How can I contribute?​ We welcome contributions! Many people all over the world have helped make this project better. Contributing explains what kinds of contributions we welcomeWorkflow Instructions explains how to build and testGet Up and Running on .NET Core explains how to get nightly builds of the runtime and its libraries to test them in your own projects. Reporting security issues and security bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;secure@microsoft.com&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's Security doc. Also see info about related Microsoft .NET Core and ASP.NET Core Bug Bounty Program. Filing issues​ This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the dotnet binary (sometimes known as the muxer) and installation of the .NET runtime and libraries. For other issues, please file them to their appropriate sibling repos. We have links to many of them on our new issue page. Useful Links​ .NET Core source index / .NET Framework source indexAPI Reference docs.NET API Catalog (incl. APIs from daily builds and API usage info)API docs writing guidelines - useful when writing /// comments.NET Discord Server - a place to discuss the development of .NET and its ecosystem .NET Foundation​ .NET Runtime is a .NET Foundation project. There are many .NET related projects on GitHub. .NET home repo - links to 100s of .NET projects, from Microsoft and the community.ASP.NET Core home - the best place to start learning about ASP.NET Core. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. General .NET OSS discussions: .NET Foundation Discussions License​ .NET (including the runtime repo) is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#about","content":" note Json Serialize without reflection  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#example-source-csproj-source-files","content":" CSharp ProjectProgram.csWeatherForecast.csOptionsExampleContext.cs This is the CSharp Project that references System.Text.Json &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  OptionsExampleContext.DateTime.g.csOptionsExampleContext.g.csOptionsExampleContext.GetJsonTypeInfo.g.csOptionsExampleContext.Int32.g.csOptionsExampleContext.PropertyNames.g.csOptionsExampleContext.String.g.csOptionsExampleContext.WeatherForecast.g.cs // &lt;auto-generated/&gt; #nullable enable annotations #nullable disable warnings // Suppress warnings about [Obsolete] member usage in generated code. #pragma warning disable CS0618 namespace JsonSerializerOptionsExample { internal partial class OptionsExampleContext { private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo&lt;global::System.DateTime&gt;? _DateTime; /// &lt;summary&gt; /// Defines the source generated JSON serialization contract metadata for a given type. /// &lt;/summary&gt; public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo&lt;global::System.DateTime&gt; DateTime { get =&gt; _DateTime ??= Create_DateTime(Options, makeReadOnly: true); } private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo&lt;global::System.DateTime&gt; Create_DateTime(global::System.Text.Json.JsonSerializerOptions options, bool makeReadOnly) { global::System.Text.Json.Serialization.Metadata.JsonTypeInfo&lt;global::System.DateTime&gt;? jsonTypeInfo = null; global::System.Text.Json.Serialization.JsonConverter? customConverter; if (options.Converters.Count &gt; 0 &amp;&amp; (customConverter = GetRuntimeProvidedCustomConverter(options, typeof(global::System.DateTime))) != null) { jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo&lt;global::System.DateTime&gt;(options, customConverter); } else { jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo&lt;global::System.DateTime&gt;(options, global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.DateTimeConverter); } if (makeReadOnly) { jsonTypeInfo.MakeReadOnly(); } return jsonTypeInfo; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#download-example-net--c-","content":" tip Download Example project System.Text.Json   ","version":"Next","tagName":"h3"},{"title":"Share System.Text.Json​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#share-systemtextjson","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/System.Text.Json  ","version":"Next","tagName":"h3"},{"title":"In the same category (Serializer) - 4 other generators​","type":1,"pageTitle":"System.Text.Json by Microsoft","url":"/RSCG_Examples/v2/docs/System.Text.Json#in-the-same-category-serializer---4-other-generators","content":" GenPack​  jsonConverterSourceGenerator​  JsonPolymorphicGenerator​  ProtobufSourceGenerator​ ","version":"Next","tagName":"h3"},{"title":"TelemetryLogging by Microsoft","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/TelemetryLogging","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#info","content":" info Name: TelemetryLogging Common abstractions for high-level telemetry primitives. Author: Microsoft NuGet:https://www.nuget.org/packages/Microsoft.Extensions.Telemetry.Abstractions/ You can find more details at https://andrewlock.net/behind-logproperties-and-the-new-telemetry-logging-source-generator/ Source: https://github.com/dotnet/extensions  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#original-readme","content":" note Enriched Capabilities This repository contains a suite of libraries that provide facilities commonly needed when creating production-ready applications. Initially developed to support high-scale and high-availability services within Microsoft, such as Microsoft Teams, these libraries deliver functionality that can help make applications more efficient, more robust, and more manageable. The major functional areas this repo addresses are: Compliance: Mechanisms to help manage application data according to privacy regulations and policies, which includes a data annotation framework, audit report generation, and telemetry redaction.Diagnostics: Provides a set of APIs that can be used to gather and report diagnostic information about the health of a service.Contextual Options: Extends the .NET Options model to enable experimentations in production.Resilience: Builds on top of the popular Polly library to provide sophisticated resilience pipelines to make applications robust to transient errors.Telemetry: Sophisticated telemetry facilities provide enhanced logging, metering, tracing, and latency measuring functionality.AspNetCore extensions: Provides different middlewares and extensions that can be used to build high-performance and high-availability ASP.NET Core services.Static Analysis: Curated static analysis settings to help improve your code.Testing: Dramatically simplifies testing around common .NET abstractions such as ILogger and the TimeProvider. How can I contribute?​ We welcome contributions! Many people all over the world have helped make this project better. Contributing explains what kinds of contributions we welcomeBuild instructions explains how to build and test Reporting security issues and security bugs​ Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;secure@microsoft.com&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's Security doc. Also see info about related Microsoft .NET Core and ASP.NET Core Bug Bounty Program. Useful Links​ .NET Core source index / .NET Framework source indexAPI Reference docs.NET API Catalog (incl. APIs from daily builds and API usage info)API docs writing guidelines - useful when writing /// comments.NET Discord Server - a place to discuss the development of .NET and its ecosystem .NET Foundation​ This project is a .NET Foundation project. There are many .NET related projects on GitHub. .NET home repo - links to 100s of .NET projects, from Microsoft and the community.ASP.NET Core home - the best place to start learning about ASP.NET Core. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. General .NET OSS discussions: .NET Foundation Discussions License​ .NET (including the runtime repo) is licensed under the MIT license.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#about","content":" note Generating deep logging messages for a class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#example-source-csproj-source-files","content":" CSharp ProjectProgram.csLogDemo.cs This is the CSharp Project that references TelemetryLogging &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Logging.Console&quot; Version=&quot;8.0.0&quot; /&gt; &lt;PackageReference Include=&quot;Microsoft.Extensions.Telemetry.Abstractions&quot; Version=&quot;8.0.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Logging.g.cs // &lt;auto-generated/&gt; #nullable enable #pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103 partial class LoggingSample { /// &lt;summary&gt; /// Logs &quot;Value is {value:E}&quot; at &quot;Critical&quot; level. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Gen.Logging&quot;, &quot;8.0.0.0&quot;)] public static partial void UsingFormatSpecifier(global::Microsoft.Extensions.Logging.ILogger logger, double value) { var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState; _ = state.ReserveTagSpace(2); state.TagArray[1] = new(&quot;value&quot;, value); state.TagArray[0] = new(&quot;{OriginalFormat}&quot;, &quot;Value is {value:E}&quot;); logger.Log( global::Microsoft.Extensions.Logging.LogLevel.Critical, new(20, nameof(UsingFormatSpecifier)), state, null, static (s, _) =&gt; { var value = s.TagArray[1].Value; return global::System.FormattableString.Invariant($&quot;Value is {value:E}&quot;); }); state.Clear(); } /// &lt;summary&gt; /// Logs &quot;Logging all person properties&quot; at &quot;Information&quot; level. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Gen.Logging&quot;, &quot;8.0.0.0&quot;)] public partial void LogWithProperties(global::Person person) { if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information)) { return; } var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState; _ = state.ReserveTagSpace(3); state.TagArray[2] = new(&quot;person.firstName&quot;, person?.firstName); state.TagArray[1] = new(&quot;person.LastName&quot;, person?.LastName); state.TagArray[0] = new(&quot;{OriginalFormat}&quot;, &quot;Logging all person properties&quot;); _logger.Log( global::Microsoft.Extensions.Logging.LogLevel.Information, new(19, &quot;PersonLogging&quot;), state, null, static (s, _) =&gt; { return &quot;Logging all person properties&quot;; }); state.Clear(); } /// &lt;summary&gt; /// Logs &quot;Fixed message&quot; at &quot;Trace&quot; level. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Gen.Logging&quot;, &quot;8.0.0.0&quot;)] public partial void LogWithCustomEventName() { if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Trace)) { return; } var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState; _ = state.ReserveTagSpace(1); state.TagArray[0] = new(&quot;{OriginalFormat}&quot;, &quot;Fixed message&quot;); _logger.Log( global::Microsoft.Extensions.Logging.LogLevel.Trace, new(9, &quot;CustomEventName&quot;), state, null, static (s, _) =&gt; { return &quot;Fixed message&quot;; }); state.Clear(); } /// &lt;summary&gt; /// Logs &quot;Welcome to {city} {province}!&quot;. /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Microsoft.Gen.Logging&quot;, &quot;8.0.0.0&quot;)] public partial void LogWithDynamicLogLevel(string city, global::Microsoft.Extensions.Logging.LogLevel level, string province) { if (!_logger.IsEnabled(level)) { return; } var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState; _ = state.ReserveTagSpace(3); state.TagArray[2] = new(&quot;city&quot;, city); state.TagArray[1] = new(&quot;province&quot;, province); state.TagArray[0] = new(&quot;{OriginalFormat}&quot;, &quot;Welcome to {city} {province}!&quot;); _logger.Log( level, new(10, nameof(LogWithDynamicLogLevel)), state, null, static (s, _) =&gt; { var city = s.TagArray[2].Value ?? &quot;(null)&quot;; var province = s.TagArray[1].Value ?? &quot;(null)&quot;; return global::System.FormattableString.Invariant($&quot;Welcome to {city} {province}!&quot;); }); state.Clear(); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#download-example-net--c-","content":" tip Download Example project TelemetryLogging   ","version":"Next","tagName":"h3"},{"title":"Share TelemetryLogging​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#share-telemetrylogging","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/TelemetryLogging  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementClass) - 27 other generators​","type":1,"pageTitle":"TelemetryLogging by Microsoft","url":"/RSCG_Examples/v2/docs/TelemetryLogging#in-the-same-category-enhancementclass---27-other-generators","content":" ApparatusAOT​  AspectGenerator​  CommonCodeGenerator​  Comparison​  DudNet​  Enhanced.GetTypes​  FastGenericNew​  HsuSgSync​  Immutype​  Ling.Audit​  Lombok.NET​  M31.FluentAPI​  MemberAccessor​  MemoryPack​  Meziantou.Polyfill​  Microsoft.Extensions.Logging​  Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator​  Microsoft.Interop.JavaScript.JSImportGenerator​  OptionToStringGenerator​  QueryStringGenerator​  RSCG_Decorator​  RSCG_UtilityTypes​  StaticReflection​  SyncMethodGenerator​  System.Runtime.InteropServices​  System.Text.RegularExpressions​  ThisClass​ ","version":"Next","tagName":"h3"},{"title":"ThisAssembly by Daniel Cazzulino","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ThisAssembly","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#info","content":" info Name: ThisAssembly Meta-package that includes all ThisAssembly.* packages. Author: Daniel Cazzulino NuGet:https://www.nuget.org/packages/ThisAssembly You can find more details at https://www.clarius.org/ThisAssembly/ Source: https://github.com/devlooped/ThisAssembly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#original-readme","content":" note ThisAssembly Exposes project and assembly level information as constants in the ThisAssembly class using source generators powered by Roslyn. The main generated entry point type is ThisAssembly in the global namespace, and is declared as partial so you can extend it too with manually created members. Each package in turn extends this partial class to add their own nestes types and members. The ThisAssembly meta-package includes all the other packages for convenience. NOTE: for now, ThisAssembly only generates C# code. ThisAssembly.AssemblyInfo​ This package generates a static ThisAssembly.Info class with public constants exposing the following attribute values generated by default for SDK style projects: AssemblyConfigurationAttribute AssemblyCompanyAttribute AssemblyTitleAttribute AssemblyDescriptionAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyVersionAttribute AssemblyInformationalVersionAttribute AssemblyFileVersionAttribute If your project includes these attributes by other means, they will still be emitted properly on the ThisAssembly.Info class. ThisAssembly.Constants​ This package generates a static ThisAssembly.Constants class with public constants for @(Constant) MSBuild items in the project. &lt;ItemGroup&gt; &lt;Constant Include=&quot;Foo.Bar&quot; Value=&quot;Baz&quot; Comment=&quot;Yay!&quot; /&gt; &lt;Constant Include=&quot;Foo.Hello&quot; Value=&quot;World&quot; Comment=&quot;Comments make everything better 😍&quot; /&gt; &lt;/ItemGroup&gt; In addition to arbitrary constants via &lt;Constant ...&gt;, it's quite useful (in particular in test projects) to generate constants for files in the project, so there's also a shorthand for those: &lt;ItemGroup&gt; &lt;FileConstant Include=&quot;@(Content)&quot; /&gt; &lt;/ItemGroup&gt; Which results in: ThisAssembly.Git​ This package generates a static ThisAssembly.Git class with constants for the following Git properties from the current project: CommitSha (first 9 chars from Commit)Root (normalized to forward slashes)Url (if PublishRepositoryUrl=true)Branch (from CI environment variables) This package relies on your project's installedMicrosoft.SourceLink.*package reference according to your specific Git-based source control server (such as GitHub, Azure DevOps, BitBucket, etc). The Branch property is populated from environment variables provided by the currently supported CI systems: GitHub Actions, Azure DevOps, AppVeyor, TeamCity, Travis CI, Circle CI, GitLab CI, Buddy, and Jenkins. Whenever the CI system provides a pull request number, the branch name ispr[NUMBER], such as pr123. This makes it easy to use it as a semver metadata label. Note: by default, the values of these constants are populated during &quot;real&quot; builds (that is, not IDE/design-time builds used to populate intellisense). This is to avoid negatively affecting the editor's performance. This means, however, that the properties will seem to always be empty when inspecting them in the IDE (although never at run-time). If you want to force population of these values for design-time builds, set the EnableSourceControlManagerQueries property to true. This property is defined and documented bydotnet/sourcelink. At the MSBuild level, targets can take a dependency on the providedInitializeGitInformation target, which sets the equivalent properties named: RepositoryCommitRepositoryShaRepositoryRootRepositoryUrlRepositoryBranch The names of these properties were chosen on purpose to match the properties used by nuget packand nugetizer to populate the relevant package metadata. So if you have a GitHub repository, installing these three packages will ensure you have the proper metadata out of the box and the simplest packaging experience possible: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.SourceLink.GitHub&quot; /&gt; &lt;PackageReference Include=&quot;ThisAssembly.Git&quot; /&gt; &lt;PackageReference Include=&quot;NuGetizer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; ThisAssembly.Metadata​ This package provides a static ThisAssembly.Metadata class with public constants exposing each [System.Reflection.AssemblyMetadata(..)] defined for the project. For an attribute declared (i.e. in AssemblyInfo.cs) like: [assembly: System.Reflection.AssemblyMetadataAttribute(&quot;Foo&quot;, &quot;Bar&quot;)] A corresponding ThisAssembly.Metadata.Foo constant with the value Bar is provided. The metadata attribute can alternatively be declared using MSBuild syntax in the project (for .NET 5.0+ projects that have built-in support for @(AssemblyMetadata) items): &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;Foo&quot; Value=&quot;Bar&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Project​ This package generates a static ThisAssembly.Project class with public constants exposing project properties that have been opted into this mechanism by adding them as ProjectProperty MSBuild items in the project file, such as: &lt;PropertyGroup&gt; &lt;!-- Some arbitrary MSBuild property declared somewhere --&gt; &lt;Foo&gt;Bar&lt;/Foo&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Opt-in to emitting that property value as a constant in ThisAssembly.Project --&gt; &lt;ProjectProperty Include=&quot;Foo&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Resources​ This package generates a static ThisAssembly.Resources class with public properties exposing shortcuts to retrieve the contents of embedded resources. This package generates a static ThisAssembly.Resources class with public properties exposing typed APIs to retrieve the contents of embedded resources. &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;Content/Docs/License.md&quot; /&gt; &lt;/ItemGroup&gt; Since markdown files are text files, the API will expose a Text property property for it that will read its content once and cache it: The $(EmbeddedResourceStringExtensions) MSBuild property allows customizing which file extensions get treated as text files. By default, it's defined as: &lt;PropertyGroup&gt; &lt;EmbeddedResourceStringExtensions&gt;.txt|.cs|.sql|.json|.md&lt;/EmbeddedResourceStringExtensions&gt; &lt;/PropertyGroup&gt; You can append additional file extensions to this list, or override it completely. The list must be pipe-separated. You can always use the provided GetStream and GetBytes for more advanced scenarios (or for non-text resources). Optionally, you can specify the Kind metadata for a specific EmbeddedResource you want treated as a text file: &lt;EmbeddedResource Include=&quot;query.kql&quot; Kind=&quot;Text&quot; /&gt; You can also add a Comment item metadata attribute, which will be used as the &lt;summary&gt; XML doc for the generated member. ThisAssembly.Strings​ This package generates a static ThisAssembly.Strings class with public constants exposing string resources in .resx files or methods with the right number of parameters for strings that use formatting parameters. In addition, it groups constants and methods in nested classes according to an optional underscore separator to organize strings. For example, User_InvalidCredentials can be accessed with ThisAssembly.Strings.User.InvalidCredentials if it contains a simple string, or as a method with the right number of parametres if its value has a format string. Given the following Resx file: Name\tValue\tCommentInfrastructure_MissingService\tService 0 is required.\tFor logging only! Shopping_NoShipping\tWe cannot ship 0 to 1. Shopping_OutOfStock\tProduct is out of stock at this time. The following code would be generated: partial class ThisAssembly { public static partial class Strings { public static partial class Infrastructure { /// &lt;summary&gt; /// For logging only! /// =&gt; &quot;Service {0} is required.&quot; /// &lt;/summary&gt; public static string MissingService(object arg0) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;MissingService&quot;), arg0); } public static partial class Shopping { /// &lt;summary&gt; /// =&gt; &quot;We cannot ship {0} to {1}.&quot; /// &lt;/summary&gt; public static string NoShipping(object arg0, object arg1) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;NoShipping&quot;), arg0, arg1); /// &lt;summary&gt; /// =&gt; &quot;Product is out of stock at this time.&quot; /// &lt;/summary&gt; public static string OutOfStock =&gt; Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;OutOfStock&quot;); } } } Dogfooding We also produce CI packages from branches and pull requests so you can dogfood builds as quickly as they are produced. The CI feed is https://pkg.kzu.io/index.json. The versioning scheme for packages is: PR builds: 42.42.42-pr[NUMBER]Branch builds: 42.42.42-[BRANCH].[COMMITS] Sponsors Learn more about GitHub Sponsors  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#about","content":" note The ThisAssembly.Info allows you access to the Assembly Information as constants, instead of going to reflection each time. I found useful to see the assembly version right away in any project that I have.  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#example-source-csproj-source-files","content":" CSharp ProjectRSCG_Version.csprojProgram.cs This is the CSharp Project that references ThisAssembly &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;!-- this is the code to start RSCG --&gt; &lt;Version&gt;2023.5.7.800&lt;/Version&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ThisAssembly&quot; Version=&quot;1.2.14&quot; OutputItemType=&quot;Analyzer&quot; ReferenceOutputAssembly=&quot;false&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ThisAssembly.AssemblyInfo.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System.CodeDom.Compiler; using System.Runtime.CompilerServices; /// &lt;summary&gt; /// Provides access to the current assembly information as pure constants, /// without requiring reflection. /// &lt;/summary&gt; partial class ThisAssembly { /// &lt;summary&gt; /// Gets the AssemblyInfo attributes. /// &lt;/summary&gt; [GeneratedCode(&quot;ThisAssembly.AssemblyInfo&quot;, &quot;1.2.14&quot;)] [CompilerGenerated] public static partial class Info { public const string Company = @&quot;RSCG_Version&quot;; public const string Configuration = @&quot;Debug&quot;; public const string FileVersion = @&quot;2023.5.7.800&quot;; public const string InformationalVersion = @&quot;2023.5.7.800+ce07c539f94b51011f87ded758344c97ff870aba&quot;; public const string Product = @&quot;RSCG_Version&quot;; public const string Title = @&quot;RSCG_Version&quot;; public const string Version = @&quot;2023.5.7.800&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#download-example-net--c-","content":" tip Download Example project ThisAssembly   ","version":"Next","tagName":"h3"},{"title":"Share ThisAssembly​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#share-thisassembly","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ThisAssembly  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementProject) - 17 other generators​","type":1,"pageTitle":"ThisAssembly by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly#in-the-same-category-enhancementproject---17-other-generators","content":" AutoInvoke.Generator​  AutoSpectre​  BuildInfo​  CommandLine​  Credfeto.Version.Information.Generator​  Larcanum.GitInfo​  LinqGen.Generator​  Pekspro.BuildInformationGenerator​  PlantUmlClassDiagramGenerator​  RSCG_AMS​  RSCG_ExportDiagram​  RSCG_FunctionsWithDI​  RSCG_NameGenerator​  RSCG_TimeBombComment​  RSCG_Wait​  ThisAssembly.Constants​  ThisAssembly.Metadata​ ","version":"Next","tagName":"h3"},{"title":"ThisAssembly_Resources by Daniel Cazzulino","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#info","content":" info Name: ThisAssembly_Resources ** C# 9.0+ ONLY ** This package generates a static ThisAssembly.Resources class with public properties exposing string and Stream shortcuts to access embedded resources. Author: Daniel Cazzulino NuGet:https://www.nuget.org/packages/ThisAssembly.Resources/ You can find more details at https://www.clarius.org/ThisAssembly/ Source: https://github.com/devlooped/ThisAssembly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#original-readme","content":" note ============ Exposes project and assembly level information as constants in the ThisAssembly class using source generators powered by Roslyn. The main generated entry point type is ThisAssembly in the global namespace, and is declared as partial so you can extend it too with manually created members. Each package in turn extends this partial class to add their own nestes types and members. The ThisAssembly meta-package includes all the other packages for convenience. NOTE: for now, ThisAssembly only generates C# code. ThisAssembly.AssemblyInfo​ This package generates a static ThisAssembly.Info class with public constants exposing the following attribute values generated by default for SDK style projects: AssemblyConfigurationAttribute AssemblyCompanyAttribute AssemblyTitleAttribute AssemblyDescriptionAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyVersionAttribute AssemblyInformationalVersionAttribute AssemblyFileVersionAttribute If your project includes these attributes by other means, they will still be emitted properly on the ThisAssembly.Info class. ThisAssembly.Constants​ This package generates a static ThisAssembly.Constants class with public constants for @(Constant) MSBuild items in the project. &lt;ItemGroup&gt; &lt;Constant Include=&quot;Foo.Bar&quot; Value=&quot;Baz&quot; Comment=&quot;Yay!&quot; /&gt; &lt;Constant Include=&quot;Foo.Hello&quot; Value=&quot;World&quot; Comment=&quot;Comments make everything better 😍&quot; /&gt; &lt;/ItemGroup&gt; In addition to arbitrary constants via &lt;Constant ...&gt;, it's quite useful (in particular in test projects) to generate constants for files in the project, so there's also a shorthand for those: &lt;ItemGroup&gt; &lt;FileConstant Include=&quot;@(Content)&quot; /&gt; &lt;/ItemGroup&gt; Which results in: ThisAssembly.Git​ This package generates a static ThisAssembly.Git class with constants for the following Git properties from the current project: CommitSha (first 9 chars from Commit)Root (normalized to forward slashes)Url (if PublishRepositoryUrl=true)Branch (from CI environment variables) This package relies on your project's installedMicrosoft.SourceLink.*package reference according to your specific Git-based source control server (such as GitHub, Azure DevOps, BitBucket, etc). The Branch property is populated from environment variables provided by the currently supported CI systems: GitHub Actions, Azure DevOps, AppVeyor, TeamCity, Travis CI, Circle CI, GitLab CI, Buddy, and Jenkins. Whenever the CI system provides a pull request number, the branch name ispr[NUMBER], such as pr123. This makes it easy to use it as a semver metadata label. Note: by default, the values of these constants are populated during &quot;real&quot; builds (that is, not IDE/design-time builds used to populate intellisense). This is to avoid negatively affecting the editor's performance. This means, however, that the properties will seem to always be empty when inspecting them in the IDE (although never at run-time). If you want to force population of these values for design-time builds, set the EnableSourceControlManagerQueries property to true. This property is defined and documented bydotnet/sourcelink. At the MSBuild level, targets can take a dependency on the providedInitializeGitInformation target, which sets the equivalent properties named: RepositoryCommitRepositoryShaRepositoryRootRepositoryUrlRepositoryBranch The names of these properties were chosen on purpose to match the properties used by nuget packand nugetizer to populate the relevant package metadata. So if you have a GitHub repository, installing these three packages will ensure you have the proper metadata out of the box and the simplest packaging experience possible: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.SourceLink.GitHub&quot; /&gt; &lt;PackageReference Include=&quot;ThisAssembly.Git&quot; /&gt; &lt;PackageReference Include=&quot;NuGetizer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; ThisAssembly.Metadata​ This package provides a static ThisAssembly.Metadata class with public constants exposing each [System.Reflection.AssemblyMetadata(..)] defined for the project. For an attribute declared (i.e. in AssemblyInfo.cs) like: [assembly: System.Reflection.AssemblyMetadataAttribute(&quot;Foo&quot;, &quot;Bar&quot;)] A corresponding ThisAssembly.Metadata.Foo constant with the value Bar is provided. The metadata attribute can alternatively be declared using MSBuild syntax in the project (for .NET 5.0+ projects that have built-in support for @(AssemblyMetadata) items): &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;Foo&quot; Value=&quot;Bar&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Project​ This package generates a static ThisAssembly.Project class with public constants exposing project properties that have been opted into this mechanism by adding them as ProjectProperty MSBuild items in the project file, such as: &lt;PropertyGroup&gt; &lt;!-- Some arbitrary MSBuild property declared somewhere --&gt; &lt;Foo&gt;Bar&lt;/Foo&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Opt-in to emitting that property value as a constant in ThisAssembly.Project --&gt; &lt;ProjectProperty Include=&quot;Foo&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Resources​ This package generates a static ThisAssembly.Resources class with public properties exposing shortcuts to retrieve the contents of embedded resources. This package generates a static ThisAssembly.Resources class with public properties exposing typed APIs to retrieve the contents of embedded resources. &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;Content/Docs/License.md&quot; /&gt; &lt;/ItemGroup&gt; Since markdown files are text files, the API will expose a Text property property for it that will read its content once and cache it: The $(EmbeddedResourceStringExtensions) MSBuild property allows customizing which file extensions get treated as text files. By default, it's defined as: &lt;PropertyGroup&gt; &lt;EmbeddedResourceStringExtensions&gt;.txt|.cs|.sql|.json|.md&lt;/EmbeddedResourceStringExtensions&gt; &lt;/PropertyGroup&gt; You can append additional file extensions to this list, or override it completely. The list must be pipe-separated. You can always use the provided GetStream and GetBytes for more advanced scenarios (or for non-text resources). Optionally, you can specify the Kind metadata for a specific EmbeddedResource you want treated as a text file: &lt;EmbeddedResource Include=&quot;query.kql&quot; Kind=&quot;Text&quot; /&gt; You can also add a Comment item metadata attribute, which will be used as the &lt;summary&gt; XML doc for the generated member. ThisAssembly.Strings​ This package generates a static ThisAssembly.Strings class with public constants exposing string resources in .resx files or methods with the right number of parameters for strings that use formatting parameters. In addition, it groups constants and methods in nested classes according to an optional underscore separator to organize strings. For example, User_InvalidCredentials can be accessed with ThisAssembly.Strings.User.InvalidCredentials if it contains a simple string, or as a method with the right number of parametres if its value has a format string. Given the following Resx file: Name\tValue\tCommentInfrastructure_MissingService\tService 0 is required.\tFor logging only! Shopping_NoShipping\tWe cannot ship 0 to 1. Shopping_OutOfStock\tProduct is out of stock at this time. The following code would be generated: partial class ThisAssembly { public static partial class Strings { public static partial class Infrastructure { /// &lt;summary&gt; /// For logging only! /// =&gt; &quot;Service {0} is required.&quot; /// &lt;/summary&gt; public static string MissingService(object arg0) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;MissingService&quot;), arg0); } public static partial class Shopping { /// &lt;summary&gt; /// =&gt; &quot;We cannot ship {0} to {1}.&quot; /// &lt;/summary&gt; public static string NoShipping(object arg0, object arg1) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;NoShipping&quot;), arg0, arg1); /// &lt;summary&gt; /// =&gt; &quot;Product is out of stock at this time.&quot; /// &lt;/summary&gt; public static string OutOfStock =&gt; Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;OutOfStock&quot;); } } } Dogfooding We also produce CI packages from branches and pull requests so you can dogfood builds as quickly as they are produced. The CI feed is https://pkg.kzu.io/index.json. The versioning scheme for packages is: PR builds: 42.42.42-pr[NUMBER]Branch builds: 42.42.42-[BRANCH].[COMMITS] Sponsors Learn more about GitHub Sponsors  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#about","content":" note Embed resources to file  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#example-source-csproj-source-files","content":" CSharp ProjectProgram.csmytext.sql This is the CSharp Project that references ThisAssembly_Resources &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;Content/mytext.sql&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ThisAssembly.Resources&quot; Version=&quot;1.4.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Content.mytext.g.csThisAssembly.Resources.EmbeddedResource.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // ThisAssembly.Resources: 1.4.1 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System; using System.IO; partial class ThisAssembly { public static partial class Resources { public static partial class Content { /// &lt;summary&gt; /// =&gt; @&quot;Content\\mytext.sql&quot; /// &lt;/summary&gt; public static partial class mytext { private static string text; public static string Text =&gt; text ??= EmbeddedResource.GetContent(@&quot;Content\\mytext.sql&quot;); public static byte[] GetBytes() =&gt; EmbeddedResource.GetBytes(@&quot;Content\\mytext.sql&quot;); public static Stream GetStream() =&gt; EmbeddedResource.GetStream(@&quot;Content\\mytext.sql&quot;); } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#download-example-net--c","content":" tip Download Example project ThisAssembly_Resources   ","version":"Next","tagName":"h3"},{"title":"Share ThisAssembly_Resources​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#share-thisassembly_resources","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ThisAssembly_Resources  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FilesToCode\" has the following generators:​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#category-filestocode-has-the-following-generators","content":" 1 Chorn.EmbeddedResourceAccessGenerator  2 corecraft  3 Datacute.EmbeddedResourcePropertyGenerator  4 DotnetYang  5 EmbedResourceCSharp  6 LingoGen  7 NotNotAppSettings  8 Podimo.ConstEmbed  9 ResXGenerator  10 RSCG_JSON2Class  11 RSCG_Utils  12 Strings.ResourceGenerator  13 ThisAssembly_Resources  14 ThisAssembly.Strings  15 Weave  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ThisAssembly_Resources by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly_Resources#see-category","content":" FilesToCode ","version":"Next","tagName":"h3"},{"title":"ThisAssembly.Constants by Daniel Cazzulino","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#info","content":" info Name: ThisAssembly.Constants ** C# 9.0 ONLY ** This package generates a static ThisAssembly.Constants class with public constants for each Constant MSBuild item in the project. For example: &lt;ItemGroup&gt; &lt;Constant Include=&quot;Foo.Bar&quot; Value=&quot;Baz&quot; /&gt; &lt;/ItemGroup&gt; Results in a corresponding ThisAssembly.Constants.Foo.Bar constant with the value Baz: Generated code: C#: partial class ThisAssembly { public static partial class Constants { public static partial class Foo { public const string Bar = &quot;Baz&quot;; } } } Built from https://github.com/kzu/ThisAssembly/tree/c7bb40af9 Author: Daniel Cazzulino NuGet:https://www.nuget.org/packages/ThisAssembly.Constants/ You can find more details at https://github.com/devlooped/ThisAssembly Source: https://github.com/devlooped/ThisAssembly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#original-readme","content":" note ThisAssembly ============ Exposes project and assembly level information as constants in the ThisAssembly class using source generators powered by Roslyn. The main generated entry point type is ThisAssembly in the global namespace, and is declared as partial so you can extend it too with manually created members. Each package in turn extends this partial class to add their own nestes types and members. The ThisAssembly meta-package includes all the other packages for convenience. NOTE: for now, ThisAssembly only generates C# code. ThisAssembly.AssemblyInfo​ This package generates a static ThisAssembly.Info class with public constants exposing the following attribute values generated by default for SDK style projects: AssemblyConfigurationAttribute AssemblyCompanyAttribute AssemblyTitleAttribute AssemblyDescriptionAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyVersionAttribute AssemblyInformationalVersionAttribute AssemblyFileVersionAttribute If your project includes these attributes by other means, they will still be emitted properly on the ThisAssembly.Info class. ThisAssembly.Constants​ This package generates a static ThisAssembly.Constants class with public constants for @(Constant) MSBuild items in the project. &lt;ItemGroup&gt; &lt;Constant Include=&quot;Foo.Bar&quot; Value=&quot;Baz&quot; Comment=&quot;Yay!&quot; /&gt; &lt;Constant Include=&quot;Foo.Hello&quot; Value=&quot;World&quot; Comment=&quot;Comments make everything better 😍&quot; /&gt; &lt;/ItemGroup&gt; In addition to arbitrary constants via &lt;Constant ...&gt;, it's quite useful (in particular in test projects) to generate constants for files in the project, so there's also a shorthand for those: &lt;ItemGroup&gt; &lt;FileConstant Include=&quot;@(Content)&quot; /&gt; &lt;/ItemGroup&gt; Which results in: ThisAssembly.Git​ This package generates a static ThisAssembly.Git class with constants for the following Git properties from the current project: CommitSha (first 9 chars from Commit)Root (normalized to forward slashes)Url (if PublishRepositoryUrl=true)Branch (from CI environment variables) This package relies on your project's installedMicrosoft.SourceLink.*package reference according to your specific Git-based source control server (such as GitHub, Azure DevOps, BitBucket, etc). The Branch property is populated from environment variables provided by the currently supported CI systems: GitHub Actions, Azure DevOps, AppVeyor, TeamCity, Travis CI, Circle CI, GitLab CI, Buddy, and Jenkins. Whenever the CI system provides a pull request number, the branch name ispr[NUMBER], such as pr123. This makes it easy to use it as a semver metadata label. Note: by default, the values of these constants are populated during &quot;real&quot; builds (that is, not IDE/design-time builds used to populate intellisense). This is to avoid negatively affecting the editor's performance. This means, however, that the properties will seem to always be empty when inspecting them in the IDE (although never at run-time). If you want to force population of these values for design-time builds, set the EnableSourceControlManagerQueries property to true. This property is defined and documented bydotnet/sourcelink. At the MSBuild level, targets can take a dependency on the providedInitializeGitInformation target, which sets the equivalent properties named: RepositoryCommitRepositoryShaRepositoryRootRepositoryUrlRepositoryBranch The names of these properties were chosen on purpose to match the properties used by nuget packand nugetizer to populate the relevant package metadata. So if you have a GitHub repository, installing these three packages will ensure you have the proper metadata out of the box and the simplest packaging experience possible: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.SourceLink.GitHub&quot; /&gt; &lt;PackageReference Include=&quot;ThisAssembly.Git&quot; /&gt; &lt;PackageReference Include=&quot;NuGetizer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; ThisAssembly.Metadata​ This package provides a static ThisAssembly.Metadata class with public constants exposing each [System.Reflection.AssemblyMetadata(..)] defined for the project. For an attribute declared (i.e. in AssemblyInfo.cs) like: [assembly: System.Reflection.AssemblyMetadataAttribute(&quot;Foo&quot;, &quot;Bar&quot;)] A corresponding ThisAssembly.Metadata.Foo constant with the value Bar is provided. The metadata attribute can alternatively be declared using MSBuild syntax in the project (for .NET 5.0+ projects that have built-in support for @(AssemblyMetadata) items): &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;Foo&quot; Value=&quot;Bar&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Project​ This package generates a static ThisAssembly.Project class with public constants exposing project properties that have been opted into this mechanism by adding them as ProjectProperty MSBuild items in the project file, such as: &lt;PropertyGroup&gt; &lt;!-- Some arbitrary MSBuild property declared somewhere --&gt; &lt;Foo&gt;Bar&lt;/Foo&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Opt-in to emitting that property value as a constant in ThisAssembly.Project --&gt; &lt;ProjectProperty Include=&quot;Foo&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Resources​ This package generates a static ThisAssembly.Resources class with public properties exposing shortcuts to retrieve the contents of embedded resources. This package generates a static ThisAssembly.Resources class with public properties exposing typed APIs to retrieve the contents of embedded resources. &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;Content/Docs/License.md&quot; /&gt; &lt;/ItemGroup&gt; Since markdown files are text files, the API will expose a Text property property for it that will read its content once and cache it: The $(EmbeddedResourceStringExtensions) MSBuild property allows customizing which file extensions get treated as text files. By default, it's defined as: &lt;PropertyGroup&gt; &lt;EmbeddedResourceStringExtensions&gt;.txt|.cs|.sql|.json|.md&lt;/EmbeddedResourceStringExtensions&gt; &lt;/PropertyGroup&gt; You can append additional file extensions to this list, or override it completely. The list must be pipe-separated. You can always use the provided GetStream and GetBytes for more advanced scenarios (or for non-text resources). Optionally, you can specify the Kind metadata for a specific EmbeddedResource you want treated as a text file: &lt;EmbeddedResource Include=&quot;query.kql&quot; Kind=&quot;Text&quot; /&gt; You can also add a Comment item metadata attribute, which will be used as the &lt;summary&gt; XML doc for the generated member. ThisAssembly.Strings​ This package generates a static ThisAssembly.Strings class with public constants exposing string resources in .resx files or methods with the right number of parameters for strings that use formatting parameters. In addition, it groups constants and methods in nested classes according to an optional underscore separator to organize strings. For example, User_InvalidCredentials can be accessed with ThisAssembly.Strings.User.InvalidCredentials if it contains a simple string, or as a method with the right number of parametres if its value has a format string. Given the following Resx file: Name\tValue\tCommentInfrastructure_MissingService\tService 0 is required.\tFor logging only! Shopping_NoShipping\tWe cannot ship 0 to 1. Shopping_OutOfStock\tProduct is out of stock at this time. Shopping_AvailableOn\tProduct available on {date:yyyy-MM}. The following code would be generated: partial class ThisAssembly { public static partial class Strings { public static partial class Infrastructure { /// &lt;summary&gt; /// For logging only! /// =&gt; &quot;Service {0} is required.&quot; /// &lt;/summary&gt; public static string MissingService(object arg0) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;MissingService&quot;), arg0); } public static partial class Shopping { /// &lt;summary&gt; /// =&gt; &quot;We cannot ship {0} to {1}.&quot; /// &lt;/summary&gt; public static string NoShipping(object arg0, object arg1) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;NoShipping&quot;), arg0, arg1); /// &lt;summary&gt; /// =&gt; &quot;Product is out of stock at this time.&quot; /// &lt;/summary&gt; public static string OutOfStock =&gt; Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;OutOfStock&quot;); /// &lt;summary&gt; /// Product available on \\{date:yyyy-MM\\}. /// &lt;/summary&gt; public static string AvailableOn(object date) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisAssemblyTests.Resources&quot;).GetString(&quot;WithNamedFormat&quot;).Replace(&quot;\\{date:yyyy-MM\\}&quot;, &quot;{0}&quot;), ((IFormattable)date).ToString(&quot;yyyy-MM&quot;, CultureInfo.CurrentCulture)); } } } Dogfooding We also produce CI packages from branches and pull requests so you can dogfood builds as quickly as they are produced. The CI feed is https://pkg.kzu.io/index.json. The versioning scheme for packages is: PR builds: 42.42.42-pr[NUMBER]Branch builds: 42.42.42-[BRANCH].[COMMITS] Sponsors Learn more about GitHub Sponsors  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#about","content":" note Generating Constants from csproj  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references ThisAssembly.Constants &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;Constant Include=&quot;TimeOut&quot; Value=&quot;100&quot; Comment=&quot;Test&quot; /&gt; &lt;PackageReference Include=&quot;ThisAssembly.Constants&quot; Version=&quot;1.4.3&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TimeOut.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // ThisAssembly.Constants: 1.4.3 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System; using System.Globalization; partial class ThisAssembly { public static partial class Constants { /// &lt;summary&gt; /// Test /// &lt;/summary&gt; public const string TimeOut = &quot;&quot;&quot; 100 &quot;&quot;&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#download-example-net--c-","content":" tip Download Example project ThisAssembly.Constants   ","version":"Next","tagName":"h3"},{"title":"Share ThisAssembly.Constants​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#share-thisassemblyconstants","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ThisAssembly.Constants  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementProject) - 17 other generators​","type":1,"pageTitle":"ThisAssembly.Constants by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Constants#in-the-same-category-enhancementproject---17-other-generators","content":" AutoInvoke.Generator​  AutoSpectre​  BuildInfo​  CommandLine​  Credfeto.Version.Information.Generator​  Larcanum.GitInfo​  LinqGen.Generator​  Pekspro.BuildInformationGenerator​  PlantUmlClassDiagramGenerator​  RSCG_AMS​  RSCG_ExportDiagram​  RSCG_FunctionsWithDI​  RSCG_NameGenerator​  RSCG_TimeBombComment​  RSCG_Wait​  ThisAssembly​  ThisAssembly.Metadata​ ","version":"Next","tagName":"h3"},{"title":"ThisAssembly.Metadata by Daniel Cazzulino","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#info","content":" info Name: ThisAssembly.Metadata This package generates a static ThisAssembly.Metadata with public constants exposing each [System.Reflection.AssemblyMetadata(..)] defined for the project, such as when using .NET 5.0+ support for `` items. So for an attribute like: [assembly: System.Reflection.AssemblyMetadataAttribute(&quot;Foo&quot;, &quot;Bar&quot;)] A corresponding ThisAssembly.Metadata.Foo constant with the value Bar is provided. The metadata attribute can alternatively be declared using MSBuild in the project (for .NET 5.0+ projects): &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;Foo&quot; Value=&quot;Bar&quot; /&gt; &lt;/ItemGroup&gt; Generated code: C#: partial class ThisAssembly { public static partial class Metadata { public const string Foo = &quot;Bar&quot;; } } Author: Daniel Cazzulino NuGet:https://www.nuget.org/packages/ThisAssembly.Metadata/ You can find more details at https://github.com/devlooped/ThisAssembly Source: https://github.com/devlooped/ThisAssembly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#original-readme","content":" note ThisAssembly Exposes project and assembly level information as constants in the ThisAssembly class using source generators powered by Roslyn. The main generated entry point type is ThisAssembly in the global namespace, and is declared as partial so you can extend it too with manually created members. Each package in turn extends this partial class to add their own nestes types and members. The ThisAssembly meta-package includes all the other packages for convenience. NOTE: for now, ThisAssembly only generates C# code. ThisAssembly.AssemblyInfo​ This package generates a static ThisAssembly.Info class with public constants exposing the following attribute values generated by default for SDK style projects: AssemblyConfigurationAttribute AssemblyCompanyAttribute AssemblyTitleAttribute AssemblyDescriptionAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyVersionAttribute AssemblyInformationalVersionAttribute AssemblyFileVersionAttribute If your project includes these attributes by other means, they will still be emitted properly on the ThisAssembly.Info class. ThisAssembly.Constants​ This package generates a static ThisAssembly.Constants class with public constants for @(Constant) MSBuild items in the project. &lt;ItemGroup&gt; &lt;Constant Include=&quot;Foo.Bar&quot; Value=&quot;Baz&quot; Comment=&quot;Yay!&quot; /&gt; &lt;Constant Include=&quot;Foo.Hello&quot; Value=&quot;World&quot; Comment=&quot;Comments make everything better 😍&quot; /&gt; &lt;/ItemGroup&gt; In addition to arbitrary constants via &lt;Constant ...&gt;, it's quite useful (in particular in test projects) to generate constants for files in the project, so there's also a shorthand for those: &lt;ItemGroup&gt; &lt;FileConstant Include=&quot;@(Content)&quot; /&gt; &lt;/ItemGroup&gt; Which results in: ThisAssembly.Git​ This package generates a static ThisAssembly.Git class with constants for the following Git properties from the current project: CommitSha (first 9 chars from Commit)Root (normalized to forward slashes)Url (if PublishRepositoryUrl=true)Branch (from CI environment variables) This package relies on your project's installedMicrosoft.SourceLink.*package reference according to your specific Git-based source control server (such as GitHub, Azure DevOps, BitBucket, etc). The Branch property is populated from environment variables provided by the currently supported CI systems: GitHub Actions, Azure DevOps, AppVeyor, TeamCity, Travis CI, Circle CI, GitLab CI, Buddy, and Jenkins. Whenever the CI system provides a pull request number, the branch name ispr[NUMBER], such as pr123. This makes it easy to use it as a semver metadata label. Note: by default, the values of these constants are populated during &quot;real&quot; builds (that is, not IDE/design-time builds used to populate intellisense). This is to avoid negatively affecting the editor's performance. This means, however, that the properties will seem to always be empty when inspecting them in the IDE (although never at run-time). If you want to force population of these values for design-time builds, set the EnableSourceControlManagerQueries property to true. This property is defined and documented bydotnet/sourcelink. At the MSBuild level, targets can take a dependency on the providedInitializeGitInformation target, which sets the equivalent properties named: RepositoryCommitRepositoryShaRepositoryRootRepositoryUrlRepositoryBranch The names of these properties were chosen on purpose to match the properties used by nuget packand nugetizer to populate the relevant package metadata. So if you have a GitHub repository, installing these three packages will ensure you have the proper metadata out of the box and the simplest packaging experience possible: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.SourceLink.GitHub&quot; /&gt; &lt;PackageReference Include=&quot;ThisAssembly.Git&quot; /&gt; &lt;PackageReference Include=&quot;NuGetizer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; ThisAssembly.Metadata​ This package provides a static ThisAssembly.Metadata class with public constants exposing each [System.Reflection.AssemblyMetadata(..)] defined for the project. For an attribute declared (i.e. in AssemblyInfo.cs) like: [assembly: System.Reflection.AssemblyMetadataAttribute(&quot;Foo&quot;, &quot;Bar&quot;)] A corresponding ThisAssembly.Metadata.Foo constant with the value Bar is provided. The metadata attribute can alternatively be declared using MSBuild syntax in the project (for .NET 5.0+ projects that have built-in support for @(AssemblyMetadata) items): &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;Foo&quot; Value=&quot;Bar&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Project​ This package generates a static ThisAssembly.Project class with public constants exposing project properties that have been opted into this mechanism by adding them as ProjectProperty MSBuild items in the project file, such as: &lt;PropertyGroup&gt; &lt;!-- Some arbitrary MSBuild property declared somewhere --&gt; &lt;Foo&gt;Bar&lt;/Foo&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Opt-in to emitting that property value as a constant in ThisAssembly.Project --&gt; &lt;ProjectProperty Include=&quot;Foo&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Resources​ This package generates a static ThisAssembly.Resources class with public properties exposing shortcuts to retrieve the contents of embedded resources. This package generates a static ThisAssembly.Resources class with public properties exposing typed APIs to retrieve the contents of embedded resources. &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;Content/Docs/License.md&quot; /&gt; &lt;/ItemGroup&gt; Since markdown files are text files, the API will expose a Text property property for it that will read its content once and cache it: The $(EmbeddedResourceStringExtensions) MSBuild property allows customizing which file extensions get treated as text files. By default, it's defined as: &lt;PropertyGroup&gt; &lt;EmbeddedResourceStringExtensions&gt;.txt|.cs|.sql|.json|.md&lt;/EmbeddedResourceStringExtensions&gt; &lt;/PropertyGroup&gt; You can append additional file extensions to this list, or override it completely. The list must be pipe-separated. You can always use the provided GetStream and GetBytes for more advanced scenarios (or for non-text resources). Optionally, you can specify the Kind metadata for a specific EmbeddedResource you want treated as a text file: &lt;EmbeddedResource Include=&quot;query.kql&quot; Kind=&quot;Text&quot; /&gt; You can also add a Comment item metadata attribute, which will be used as the &lt;summary&gt; XML doc for the generated member. ThisAssembly.Strings​ This package generates a static ThisAssembly.Strings class with public constants exposing string resources in .resx files or methods with the right number of parameters for strings that use formatting parameters. In addition, it groups constants and methods in nested classes according to an optional underscore separator to organize strings. For example, User_InvalidCredentials can be accessed with ThisAssembly.Strings.User.InvalidCredentials if it contains a simple string, or as a method with the right number of parametres if its value has a format string. Given the following Resx file: Name\tValue\tCommentInfrastructure_MissingService\tService 0 is required.\tFor logging only! Shopping_NoShipping\tWe cannot ship 0 to 1. Shopping_OutOfStock\tProduct is out of stock at this time. Shopping_AvailableOn\tProduct available on {date:yyyy-MM}. The following code would be generated: partial class ThisAssembly { public static partial class Strings { public static partial class Infrastructure { /// &lt;summary&gt; /// For logging only! /// =&gt; &quot;Service {0} is required.&quot; /// &lt;/summary&gt; public static string MissingService(object arg0) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;MissingService&quot;), arg0); } public static partial class Shopping { /// &lt;summary&gt; /// =&gt; &quot;We cannot ship {0} to {1}.&quot; /// &lt;/summary&gt; public static string NoShipping(object arg0, object arg1) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;NoShipping&quot;), arg0, arg1); /// &lt;summary&gt; /// =&gt; &quot;Product is out of stock at this time.&quot; /// &lt;/summary&gt; public static string OutOfStock =&gt; Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;OutOfStock&quot;); /// &lt;summary&gt; /// Product available on \\{date:yyyy-MM\\}. /// &lt;/summary&gt; public static string AvailableOn(object date) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisAssemblyTests.Resources&quot;).GetString(&quot;WithNamedFormat&quot;).Replace(&quot;\\{date:yyyy-MM\\}&quot;, &quot;{0}&quot;), ((IFormattable)date).ToString(&quot;yyyy-MM&quot;, CultureInfo.CurrentCulture)); } } } Dogfooding We also produce CI packages from branches and pull requests so you can dogfood builds as quickly as they are produced. The CI feed is https://pkg.kzu.io/index.json. The versioning scheme for packages is: PR builds: 42.42.42-pr[NUMBER]Branch builds: 42.42.42-[BRANCH].[COMMITS] Sponsors Learn more about GitHub Sponsors  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#about","content":" note Generating code from assembly metadata  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references ThisAssembly.Metadata &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;MyName&quot; Value=&quot;Andrei&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ThisAssembly.Metadata&quot; Version=&quot;1.4.3&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ThisAssembly.Metadata.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System.CodeDom.Compiler; using System.Runtime.CompilerServices; /// &lt;summary&gt; /// Provides access to the current assembly information as pure constants, /// without requiring reflection. /// &lt;/summary&gt; partial class ThisAssembly { /// &lt;summary&gt; /// Gets the assembly metadata. /// &lt;/summary&gt; [GeneratedCode(&quot;ThisAssembly.Metadata&quot;, &quot;1.4.3&quot;)] [CompilerGenerated] public static partial class Metadata { /// &lt;summary&gt;Name = Test&lt;/summary&gt; public const string Name = &quot;&quot;&quot; Test &quot;&quot;&quot;; /// &lt;summary&gt;MyName = Andrei&lt;/summary&gt; public const string MyName = &quot;&quot;&quot; Andrei &quot;&quot;&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#download-example-net--c-","content":" tip Download Example project ThisAssembly.Metadata   ","version":"Next","tagName":"h3"},{"title":"Share ThisAssembly.Metadata​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#share-thisassemblymetadata","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ThisAssembly.Metadata  ","version":"Next","tagName":"h3"},{"title":"In the same category (EnhancementProject) - 17 other generators​","type":1,"pageTitle":"ThisAssembly.Metadata by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Metadata#in-the-same-category-enhancementproject---17-other-generators","content":" AutoInvoke.Generator​  AutoSpectre​  BuildInfo​  CommandLine​  Credfeto.Version.Information.Generator​  Larcanum.GitInfo​  LinqGen.Generator​  Pekspro.BuildInformationGenerator​  PlantUmlClassDiagramGenerator​  RSCG_AMS​  RSCG_ExportDiagram​  RSCG_FunctionsWithDI​  RSCG_NameGenerator​  RSCG_TimeBombComment​  RSCG_Wait​  ThisAssembly​  ThisAssembly.Constants​ ","version":"Next","tagName":"h3"},{"title":"ThisClass by Trym Lund Flogard","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ThisClass","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#info","content":" info Name: ThisClass Exposes class and type information as constants in the ThisClass class using source generators powered by Roslyn, inspired by ThisAssembly. Author: Trym Lund Flogard NuGet:https://www.nuget.org/packages/ThisClass/ You can find more details at https://github.com/trympet/ThisClass Source: https://github.com/trympet/ThisClass  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#original-readme","content":" note ThisClass Exposes class and type information as constants in the ThisClass class using source generators powered by Roslyn, inspired by ThisAssembly. ThisClass​ Add the ThisClassAttribute to generate type information for a class. [ThisClass] partial class Demo { public Demo() { Logger.Info($&quot;Hello from {ThisClass.FullName}&quot;); // SampleApp.Demo } } NLog.Extensions.ThisClass​ Create class loggers without using reflection. using SomeNamespace; namespace SampleApp.NLog { ... namespace AnotherNamespace { using SomeOtherNamespace; [ClassLoggerLazy] partial class Demo2&lt;T&gt; : SomeInterface&lt;T&gt; where T : SomeOtherInterface { public static void SayHello() { Logger.Info(&quot;Hello&quot;); } [ClassLogger] internal partial class NestedClass : SomeInterface&lt;SomeOtherInterface&gt; { } } } } Looks like this behind the scenes // &lt;auto-generated/&gt; #nullable enable namespace SampleApp.NLog { partial class Demo1 { public static partial class ThisClass { /// &lt;summary&gt; /// Gets the fully qualified name of the parent class, including the namespace but not the assembly. /// &lt;/summary&gt; public const string FullName = &quot;SampleApp.NLog.Demo1&quot;; } } } // &lt;auto-generated/&gt; #nullable enable namespace SampleApp.NLog { namespace AnotherNamespace { using SomeOtherNamespace; partial class Demo2&lt;T&gt; : global::SomeNamespace.SomeInterface&lt;T&gt; where T : global::SomeOtherNamespace.SomeOtherInterface { public static partial class ThisClass { /// &lt;summary&gt; /// Gets the fully qualified name of the parent class, including the namespace but not the assembly. /// &lt;/summary&gt; public const string FullName = &quot;SampleApp.NLog.AnotherNamespace.Demo2&quot;; } private static global::NLog.Logger? __loggerLazy; private static global::NLog.Logger Logger =&gt; __loggerLazy ??= global::NLog.LogManager.GetLogger(ThisClass.FullName); } } } // &lt;auto-generated/&gt; #nullable enable namespace SampleApp.NLog { namespace AnotherNamespace { using SomeOtherNamespace; partial class Demo2&lt;T&gt; : global::SomeNamespace.SomeInterface&lt;T&gt; where T : global::SomeOtherNamespace.SomeOtherInterface { partial class NestedClass : global::SomeNamespace.SomeInterface&lt;global::SomeOtherNamespace.SomeOtherInterface&gt; { public static partial class ThisClass { /// &lt;summary&gt; /// Gets the fully qualified name of the parent class, including the namespace but not the assembly. /// &lt;/summary&gt; public const string FullName = &quot;SampleApp.NLog.AnotherNamespace.Demo2.NestedClass&quot;; } private static readonly global::NLog.Logger Logger = global::NLog.LogManager.GetLogger(ThisClass.FullName); } } } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#about","content":" note Generate full class name from class  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references ThisClass &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ThisClass&quot; Version=&quot;1.5.11&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person_ThisClass.g.csThisClassAttribute.g.cs // &lt;auto-generated/&gt; #pragma warning disable CS0108, CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658, CS0436, CS8981 #nullable enable namespace DemoClass; partial class Person { public static partial class ThisClass { /// &lt;summary&gt; /// Gets the fully qualified name of the parent class, including the namespace but not the assembly. /// &lt;/summary&gt; public const string FullName = &quot;DemoClass.Person&quot;; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#download-example-net--c","content":" tip Download Example project ThisClass   ","version":"Next","tagName":"h3"},{"title":"Share ThisClass​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#share-thisclass","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ThisClass  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"EnhancementClass\" has the following generators:​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#category-enhancementclass-has-the-following-generators","content":" 1 ApparatusAOT  2 AspectGenerator  3 CommonCodeGenerator  4 Comparison  5 DudNet  6 Enhanced.GetTypes  7 FastGenericNew  8 Immutype  9 Ling.Audit  10 Lombok.NET  11 M31.FluentAPI  12 MemberAccessor  13 MemoryPack  14 Meziantou.Polyfill  15 Microsoft.Extensions.Logging  16 Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator  17 Microsoft.Interop.JavaScript.JSImportGenerator  18 OptionToStringGenerator  19 QueryStringGenerator  20 RSCG_Decorator  21 RSCG_UtilityTypes  22 StaticReflection  23 SyncMethodGenerator  24 System.Runtime.InteropServices  25 System.Text.RegularExpressions  26 TelemetryLogging  27 ThisClass  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"ThisClass by Trym Lund Flogard","url":"/RSCG_Examples/v2/docs/ThisClass#see-category","content":" EnhancementClass ","version":"Next","tagName":"h3"},{"title":"ThisAssembly.Strings by Daniel Cazzulino","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#info","content":" info Name: ThisAssembly.Strings This package generates a static ThisAssembly.Strings class with public constants exposing string resources in .resx files or methods with the right number of parameters for strings that use formatting parameters. In addition, it groups constants and methods in nested classes according to an optional underscore separator to organize strings. For example, User_InvalidCredentials can be accessed with ThisAssembly.Strings.User.InvalidCredentials if it contains a simple string, or as a method with the right number of parametres if its value has a format string. Built from https://github.com/kzu/ThisAssembly/tree/f77a712b7 Author: Daniel Cazzulino NuGet:https://www.nuget.org/packages/ThisAssembly.Strings/ You can find more details at https://github.com/devlooped/ThisAssembly Source: https://github.com/devlooped/ThisAssembly  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#original-readme","content":" note ThisAssembly Exposes project and assembly level information as constants in the ThisAssembly class using source generators powered by Roslyn. The main generated entry point type is ThisAssembly in the global namespace, and is declared as partial so you can extend it too with manually created members. Each package in turn extends this partial class to add their own nestes types and members. The ThisAssembly meta-package includes all the other packages for convenience. NOTE: for now, ThisAssembly only generates C# code. ThisAssembly.AssemblyInfo​ This package generates a static ThisAssembly.Info class with public constants exposing the following attribute values generated by default for SDK style projects: AssemblyConfigurationAttribute AssemblyCompanyAttribute AssemblyTitleAttribute AssemblyDescriptionAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyVersionAttribute AssemblyInformationalVersionAttribute AssemblyFileVersionAttribute If your project includes these attributes by other means, they will still be emitted properly on the ThisAssembly.Info class. ThisAssembly.Constants​ This package generates a static ThisAssembly.Constants class with public constants for @(Constant) MSBuild items in the project. &lt;ItemGroup&gt; &lt;Constant Include=&quot;Foo.Bar&quot; Value=&quot;Baz&quot; Comment=&quot;Yay!&quot; /&gt; &lt;Constant Include=&quot;Foo.Hello&quot; Value=&quot;World&quot; Comment=&quot;Comments make everything better 😍&quot; /&gt; &lt;/ItemGroup&gt; In addition to arbitrary constants via &lt;Constant ...&gt;, it's quite useful (in particular in test projects) to generate constants for files in the project, so there's also a shorthand for those: &lt;ItemGroup&gt; &lt;FileConstant Include=&quot;@(Content)&quot; /&gt; &lt;/ItemGroup&gt; Which results in: ThisAssembly.Git​ This package generates a static ThisAssembly.Git class with constants for the following Git properties from the current project: CommitSha (first 9 chars from Commit)Root (normalized to forward slashes)Url (if PublishRepositoryUrl=true)Branch (from CI environment variables) This package relies on your project's installedMicrosoft.SourceLink.*package reference according to your specific Git-based source control server (such as GitHub, Azure DevOps, BitBucket, etc). The Branch property is populated from environment variables provided by the currently supported CI systems: GitHub Actions, Azure DevOps, AppVeyor, TeamCity, Travis CI, Circle CI, GitLab CI, Buddy, and Jenkins. Whenever the CI system provides a pull request number, the branch name ispr[NUMBER], such as pr123. This makes it easy to use it as a semver metadata label. Note: by default, the values of these constants are populated during &quot;real&quot; builds (that is, not IDE/design-time builds used to populate intellisense). This is to avoid negatively affecting the editor's performance. This means, however, that the properties will seem to always be empty when inspecting them in the IDE (although never at run-time). If you want to force population of these values for design-time builds, set the EnableSourceControlManagerQueries property to true. This property is defined and documented bydotnet/sourcelink. At the MSBuild level, targets can take a dependency on the providedInitializeGitInformation target, which sets the equivalent properties named: RepositoryCommitRepositoryShaRepositoryRootRepositoryUrlRepositoryBranch The names of these properties were chosen on purpose to match the properties used by nuget packand nugetizer to populate the relevant package metadata. So if you have a GitHub repository, installing these three packages will ensure you have the proper metadata out of the box and the simplest packaging experience possible: &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.SourceLink.GitHub&quot; /&gt; &lt;PackageReference Include=&quot;ThisAssembly.Git&quot; /&gt; &lt;PackageReference Include=&quot;NuGetizer&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; ThisAssembly.Metadata​ This package provides a static ThisAssembly.Metadata class with public constants exposing each [System.Reflection.AssemblyMetadata(..)] defined for the project. For an attribute declared (i.e. in AssemblyInfo.cs) like: [assembly: System.Reflection.AssemblyMetadataAttribute(&quot;Foo&quot;, &quot;Bar&quot;)] A corresponding ThisAssembly.Metadata.Foo constant with the value Bar is provided. The metadata attribute can alternatively be declared using MSBuild syntax in the project (for .NET 5.0+ projects that have built-in support for @(AssemblyMetadata) items): &lt;ItemGroup&gt; &lt;AssemblyMetadata Include=&quot;Foo&quot; Value=&quot;Bar&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Project​ This package generates a static ThisAssembly.Project class with public constants exposing project properties that have been opted into this mechanism by adding them as ProjectProperty MSBuild items in the project file, such as: &lt;PropertyGroup&gt; &lt;!-- Some arbitrary MSBuild property declared somewhere --&gt; &lt;Foo&gt;Bar&lt;/Foo&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Opt-in to emitting that property value as a constant in ThisAssembly.Project --&gt; &lt;ProjectProperty Include=&quot;Foo&quot; /&gt; &lt;/ItemGroup&gt; ThisAssembly.Resources​ This package generates a static ThisAssembly.Resources class with public properties exposing shortcuts to retrieve the contents of embedded resources. This package generates a static ThisAssembly.Resources class with public properties exposing typed APIs to retrieve the contents of embedded resources. &lt;ItemGroup&gt; &lt;EmbeddedResource Include=&quot;Content/Docs/License.md&quot; /&gt; &lt;/ItemGroup&gt; Since markdown files are text files, the API will expose a Text property property for it that will read its content once and cache it: The $(EmbeddedResourceStringExtensions) MSBuild property allows customizing which file extensions get treated as text files. By default, it's defined as: &lt;PropertyGroup&gt; &lt;EmbeddedResourceStringExtensions&gt;.txt|.cs|.sql|.json|.md&lt;/EmbeddedResourceStringExtensions&gt; &lt;/PropertyGroup&gt; You can append additional file extensions to this list, or override it completely. The list must be pipe-separated. You can always use the provided GetStream and GetBytes for more advanced scenarios (or for non-text resources). Optionally, you can specify the Kind metadata for a specific EmbeddedResource you want treated as a text file: &lt;EmbeddedResource Include=&quot;query.kql&quot; Kind=&quot;Text&quot; /&gt; You can also add a Comment item metadata attribute, which will be used as the &lt;summary&gt; XML doc for the generated member. ThisAssembly.Strings​ This package generates a static ThisAssembly.Strings class with public constants exposing string resources in .resx files or methods with the right number of parameters for strings that use formatting parameters. In addition, it groups constants and methods in nested classes according to an optional underscore separator to organize strings. For example, User_InvalidCredentials can be accessed with ThisAssembly.Strings.User.InvalidCredentials if it contains a simple string, or as a method with the right number of parametres if its value has a format string. Given the following Resx file: Name\tValue\tCommentInfrastructure_MissingService\tService 0 is required.\tFor logging only! Shopping_NoShipping\tWe cannot ship 0 to 1. Shopping_OutOfStock\tProduct is out of stock at this time. Shopping_AvailableOn\tProduct available on {date:yyyy-MM}. The following code would be generated: partial class ThisAssembly { public static partial class Strings { public static partial class Infrastructure { /// &lt;summary&gt; /// For logging only! /// =&gt; &quot;Service {0} is required.&quot; /// &lt;/summary&gt; public static string MissingService(object arg0) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;MissingService&quot;), arg0); } public static partial class Shopping { /// &lt;summary&gt; /// =&gt; &quot;We cannot ship {0} to {1}.&quot; /// &lt;/summary&gt; public static string NoShipping(object arg0, object arg1) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;NoShipping&quot;), arg0, arg1); /// &lt;summary&gt; /// =&gt; &quot;Product is out of stock at this time.&quot; /// &lt;/summary&gt; public static string OutOfStock =&gt; Strings.GetResourceManager(&quot;ThisStore.Properties.Resources&quot;).GetString(&quot;OutOfStock&quot;); /// &lt;summary&gt; /// Product available on \\{date:yyyy-MM\\}. /// &lt;/summary&gt; public static string AvailableOn(object date) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;ThisAssemblyTests.Resources&quot;).GetString(&quot;WithNamedFormat&quot;).Replace(&quot;\\{date:yyyy-MM\\}&quot;, &quot;{0}&quot;), ((IFormattable)date).ToString(&quot;yyyy-MM&quot;, CultureInfo.CurrentCulture)); } } } Dogfooding We also produce CI packages from branches and pull requests so you can dogfood builds as quickly as they are produced. The CI feed is https://pkg.kzu.io/index.json. The versioning scheme for packages is: PR builds: 42.42.42-pr[NUMBER]Branch builds: 42.42.42-[BRANCH].[COMMITS] Sponsors Learn more about GitHub Sponsors  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#about","content":" note generating code from resx files  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#example-source-csproj-source-files","content":" CSharp ProjectProgram.csDemo.resx This is the CSharp Project that references ThisAssembly.Strings &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ThisAssembly.Strings&quot; Version=&quot;1.4.3&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;Compile Update=&quot;Demo.Designer.cs&quot;&gt; &lt;DesignTime&gt;True&lt;/DesignTime&gt; &lt;AutoGen&gt;True&lt;/AutoGen&gt; &lt;DependentUpon&gt;Demo.resx&lt;/DependentUpon&gt; &lt;/Compile&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;EmbeddedResource Update=&quot;Demo.resx&quot;&gt; &lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt; &lt;LastGenOutput&gt;Demo.Designer.cs&lt;/LastGenOutput&gt; &lt;/EmbeddedResource&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  StringsDemo.Demo.csThisAssembly.Strings.g.cs //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // ThisAssembly.Strings: 1.4.3 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ using System; using System.Globalization; partial class ThisAssembly { public static partial class Strings { /// &lt;summary&gt; /// the person name /// &lt;/summary&gt; public static string PersonName(object arg0) =&gt; string.Format(CultureInfo.CurrentCulture, Strings.GetResourceManager(&quot;StringsDemo.Demo&quot;).GetString(&quot;PersonName&quot;), arg0); } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#download-example-net--c-","content":" tip Download Example project ThisAssembly.Strings   ","version":"Next","tagName":"h3"},{"title":"Share ThisAssembly.Strings​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#share-thisassemblystrings","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/ThisAssembly.Strings  ","version":"Next","tagName":"h3"},{"title":"In the same category (FilesToCode) - 13 other generators​","type":1,"pageTitle":"ThisAssembly.Strings by Daniel Cazzulino","url":"/RSCG_Examples/v2/docs/ThisAssembly.Strings#in-the-same-category-filestocode---13-other-generators","content":" Chorn.EmbeddedResourceAccessGenerator​  corecraft​  Datacute.EmbeddedResourcePropertyGenerator​  DotnetYang​  EmbedResourceCSharp​  LingoGen​  NotNotAppSettings​  Podimo.ConstEmbed​  ResXGenerator​  RSCG_JSON2Class​  RSCG_Utils​  ThisAssembly_Resources​  Weave​ ","version":"Next","tagName":"h3"},{"title":"Tortuga.Shipwright by Tortuga Research","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#info","content":" info Name: Tortuga.Shipwright Package Description Author: Tortuga Research NuGet:https://www.nuget.org/packages/Tortuga.Shipwright/ You can find more details at https://github.com/TortugaResearch/Tortuga.Shipwright Source: https://github.com/TortugaResearch/Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#original-readme","content":" note Tortuga Shipwright Installation​ To register the Source Generator, add the following to your project file. &lt;!-- Code Generator --&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Tortuga.Shipwright&quot; Version=&quot;0.9.0&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Tortuga.Shipwright.Shared&quot; Version=&quot;0.9.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Don't include the output from a previous source generator execution into future runs; the */** trick here ensures that there's at least one subdirectory, which is our key that it's coming from a source generator as opposed to something that is coming from some other tool. --&gt; &lt;Compile Remove=&quot;$(CompilerGeneratedFilesOutputPath)/*/**/*.cs&quot; /&gt; &lt;/ItemGroup&gt; The EmitCompilerGeneratedFiles setting is not required, but it does make trouble-shooting easier. Check `Show All Files&quot; in Visual Studio to see the generated files. Trait Engine​ Terminology​ Trait: A set of methods and properties being injected into a container class.Container: The class that contains one or more traits. Basic Pattern​ The trait needs no special decorations. However, it is advisable to mark it as sealed because inheritance is not supported with traits. Traits should be marked with the Trait attribute. (This is not currently enforced, but may be in future versions.) Trait classes may be marked as public or, if in the same assembly, internal. The container class uses the UseTrait attribute and must be marked partial. For example: [UseTrait(typeof(MyTrait)] public partial class MyContiner { ... } Exposing Members​ For a method or property, add the Expose attribute to the member. [Expose] public int Add(int a, int b) {...} [Expose] public int CustomerAge {get; set;} The member being exposed must be visible to the container. This means public or, if in the same assembly, internal. Non-public Members​ To make a exposed member non-public in the container class, set the Accessibility property. For example, [Expose(Accessibility = Accessibility.Internal)] public ICacheAdapter Cache { get; set; } = null!; You may also set an inheritance rule such as override, sealed, or virtual. [Expose(Inheritance = Inheritance.Override)] public ConcurrentDictionary&lt;Type, object&gt; ExtensionCache {get =&gt; m_ExtensionCache;} Additional Attributes​ The following attributes will be copied from an exposed trait member to the matching container member. EditorBrowsableAttributeObsoleteAttribute Accessing the Container​ To allow the trait to get a reference to it's container, use the Container attribute. [Container] internal IDataSource DataSource { get; set; } = null!; There is no limit to the number of Container properties in a trait. (Presumably each would request a different interface.) If RegisterInterface = true is used, then the interface being requeted will be added to the container class. That class will still need to implement the interface. Callbacks into the container​ In lieu of using a container property (see above), a trait can request a specific callback be created in the container. Define the 'partial' property in the trait as a Func or Action delegate. [Partial(&quot;customerKey,startDate,endDate&quot;] public Func&lt;int, DateTime, DateTime, OrderCollection&gt; OnGetOrdersByCustomer {get; set;} = null!; In the container, the following will be generated. private partial OrderCollection OnGetOrdersByCustomer(int customerKey, DateTime startDate, DateTime endDate); The container will then be responsible for implementing the partial method. Automatically Implementing an Interface​ If a trait implements an interface, then it's container will automatically implement it as well. All interface methods and properties will call back to the trait. The container explicitly implements the interface. Use the Expose attribute on each member if you also want the methods to be marked as public. Warning: Interfaces with init properties are not supported. Additional Attributes​ The following attributes will be copied from an exposed interface member to the matching container member. EditorBrowsableAttributeObsoleteAttribute XML Docs​ If the trait is in the same project as the container, XML Docs will be automatically included in the generated code. This requires DocumentationFile to be enabled at the project level. Shipwright does not currently support XML Docs on traits defined in a different project. (This appears to be a limitation of Roslyn.)  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#about","content":" note Generate mixin between classes  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.csEmployee.cs This is the CSharp Project that references Tortuga.Shipwright &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;!-- Code Generator --&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Tortuga.Shipwright&quot; Version=&quot;0.9.0&quot; &gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;/PackageReference&gt; &lt;PackageReference Include=&quot;Tortuga.Shipwright.Shared&quot; Version=&quot;0.9.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- Don't include the output from a previous source generator execution into future runs; the */** trick here ensures that there's at least one subdirectory, which is our key that it's coming from a source generator as opposed to something that is coming from some other tool. --&gt; &lt;Compile Remove=&quot;$(CompilerGeneratedFilesOutputPath)/*/**/*.cs&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Logs.csMixinConsoleDemo.Employee.cs /* Container class: MixinConsoleDemo.Employee Adding trait: MixinConsoleDemo.Person */   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#download-example-net--c","content":" tip Download Example project Tortuga.Shipwright   ","version":"Next","tagName":"h3"},{"title":"Share Tortuga.Shipwright​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#share-tortugashipwright","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Tortuga.Shipwright  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Templating\" has the following generators:​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#category-templating-has-the-following-generators","content":" 1 Gobie  2 InlineComposition  3 InterceptorTemplate  4 JKToolKit.TemplatePropertyGenerator  5 Microsoft.NET.Sdk.Razor.SourceGenerators  6 Minerals.AutoMixins  7 MorrisMoxy  8 NTypewriter  9 RazorBlade  10 RazorSlices  11 RSCG_IFormattable  12 RSCG_Templating  13 spreadcheetah  14 Tortuga.Shipwright  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Tortuga.Shipwright by Tortuga Research","url":"/RSCG_Examples/v2/docs/Tortuga.Shipwright#see-category","content":" Templating ","version":"Next","tagName":"h3"},{"title":"TypeUtilities by Yevhenii Serdiuk","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/TypeUtilities","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#info","content":" info Name: TypeUtilities A set of type utilities to transform types. Include utils like: PickOmit Author: Yevhenii Serdiuk NuGet:https://www.nuget.org/packages/TypeUtilities/ You can find more details at https://github.com/DragonsLord/TypeUtilities Source: https://github.com/DragonsLord/TypeUtilities  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#original-readme","content":" note TypeUtilities Type Utilities provides a source generators to create/transform one type into another. This project was inspired by the TypeScript Utility Types and was ment to bring similar functionality to the C# via source generators Installation​ To use the the TypeUtilities, install the TypeUtilities package into your project. To install the packages, add the references to your csproj file, for example by running dotnet add package TypeUtilities This adds a &lt;PackageReference&gt; to your project. Usage​ TypeUtilities provides several attributes: Map​ Map Attribute simply maps memebers of the source type to the target type using specified format. using TypeUtilities; using TypeUtilities.Abstractions; public class SourceType { public Guid Id { get; } public int Value { get; set; } public DateTime Created { get; set; } } [Map(typeof(SourceType))] public partial class SimpleMap { } // Generated result //----- SimpleMap.map.SourceType.g.cs public partial class SimpleMap { public System.Guid Id { get; } public int Value { get; set; } public System.DateTime Created { get; set; } } // -------------------- [Map(typeof(SourceType), MemberDeclarationFormat = $&quot;{Tokens.Accessibility} string Mapped{Tokens.Name}{Tokens.Accessors}&quot;, MemberKindSelection = MemberKindFlags.ReadonlyProperty )] public partial class AdvancedMap { } // Generated result //----- AdvancedMap.map.SourceType.g.cs public partial class AdvancedMap { public string MappedId { get; } } // -------------------- More detailed description for Map is provided here Omit​ Omit Attribute is similar to Map but also accepts an explicit list of members that should be exluded using TypeUtilities; public class SourceType { public Guid Id { get; } public int Value { get; set; } public DateTime Created { get; set; } } [Omit(typeof(SourceType), &quot;Value&quot;)] public partial class TargetType { public int MyValue { get; set; } } // Generated result //----- TargetType.omit.SourceType.g.cs public partial class TargetType { public Guid Id { get; } public DateTime Created { get; set; } } Pick​ Pick Attribute is similar to Map but also requires to explicitly specify all members that should be included using TypeUtilities; public class SourceType { public Guid Id { get; } public int Value { get; set; } public DateTime Created { get; set; } } [Pick(typeof(SourceType), &quot;Id&quot;, nameof(SourceType.Value))] public partial class TargetType { } // Generated result //----- TargetType.omit.SourceType.g.cs public partial class TargetType { public Guid Id { get; } public int Value { get; set; } }   ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#about","content":" note Pick/Omit for classes ( also have some mapping )  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references TypeUtilities &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;TypeUtilities&quot; Version=&quot;0.0.1&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  Person1.pick.PersonFull.g.csPerson2.map.PersonFull.g.csPerson2.omit.PersonFull.g.cs namespace UtilDemo; public partial class Person1 { public string? FirstName { get; set; } public string? LastName { get; set; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#download-example-net--c","content":" tip Download Example project TypeUtilities   ","version":"Next","tagName":"h3"},{"title":"Share TypeUtilities​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#share-typeutilities","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/TypeUtilities  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"TypeUtilities by Yevhenii Serdiuk","url":"/RSCG_Examples/v2/docs/TypeUtilities#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"UnionGen by M. Haslinger","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/UnionGen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#info","content":" info Name: UnionGen A source generator for creating C# union types via a generic marker attribute. Author: M. Haslinger NuGet:https://www.nuget.org/packages/UnionGen/ You can find more details at https://github.com/markushaslinger/union_source_generator Source: https://github.com/markushaslinger/union_source_generator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#original-readme","content":" note Union Source Generator Union Source Generator is a C# source generator that generates a union type for a set of types. The generated union type can hold any one of the specified types. Consuming the type can be done by exhaustive pattern matching. The main component is one generic attribute, UnionAttribute, which is used to specify the types that the union can hold, on a struct: [Union&lt;Result&lt;int&gt;, NotFound&gt;] public readonly partial struct SimpleObj; This will result in a generated SimpleObj type that can hold any of the specified types, but only one at a time. It also provides compile time checked exhaustive Switch and Match methods to handle the different types. Implicit conversions operators are generated as well as equality members. SimpleObj simple = CreateSimple(); simple.Switch( r =&gt; Console.WriteLine($&quot;Found: {r}&quot;), _ =&gt; Console.WriteLine(&quot;not found&quot;)); int result = simple.Match(r =&gt; r.Value * 2, _ =&gt; -1); SimpleObj CreateSimple() =&gt; new NotFound(); While the generator itself has to be a netstandard2.0 project, the generated code assumes C#12 / .NET 8 at this point. This project is heavily influenced by the great OneOf library. All credit for the original concept to its authors! Opinionated Naming Scheme​ This library is opinionated as it will try to assign 'readable' names to the properties based on the specified types: SimpleObj simple = new SimpleObj(new Result&lt;int&gt;(12)); bool found = simple.IsNotFound; Result&lt;int&gt; result = simple.AsResultOfInt32(); It even will try to detect collections and assign names like ListOfFoo or DictionaryOfStringAndInt64. The same is true for the lambda parameter names in the Match &amp; Switch methods. For Switch they will get names like forString (or forNone) and for Match ones like withString (or withNone). That can work great in many scenarios but will probably lead to bad naming in some cases - that's the trade-off I'm willing to accept. Union Object Size​ We try to be smart and use as little memory as possible for the union object. They are readonly structsOnly those fields actually needed are generated e.g. only a single reference field which is used for all reference typesif there are no reference types, no reference field is generatedif there are no value types, no value field is generated A single byte is used for storing the state so that they union object knows what it is Plus padding for alignment done by the runtime. Motivation​ My main motivation was to finally learn more about writing source generators by creating one myself. I haven't found a lot of resources regarding generic marker attributes in combination with source generators, so I'm not sure my approach is optimal, but maybe it can serve as a starting point for others. As a first project I wanted something with a small scope and I was always a little annoyed by the property names (T0, T1, ...) in the OneOf library (which they have to use due to the types being generic - even when using their source generator). So this is what I decided to tackle. Quality​ This is a two-day toy project without much testing (and no serious automated tests). I will probably use it in my own projects in the future to see how far I'll get and fix issues as they arise. Feedback (and PRs 😉) to make the implementation more robust, efficient and generally better are welcome, of course! Don't expect production grade reliability here!  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#about","content":" note Generating unions between types  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references UnionGen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;UnionGen&quot; Version=&quot;1.4.0&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  UnionTypesDemo.ResultSave.g.cs // &lt;auto-generated by UnionSourceGen /&gt; #nullable enable using System; namespace UnionTypesDemo { public readonly partial struct ResultSave : IEquatable&lt;ResultSave&gt; { private readonly UnionGen.Types.Result&lt;int&gt; _value0; private readonly UnionGen.Types.NotFound _value1; private readonly UnionGen.InternalUtil.StateByte _state; private ResultSave(int index, int actualTypeIndex) { _state = new UnionGen.InternalUtil.StateByte(index, actualTypeIndex); } public ResultSave(UnionGen.Types.Result&lt;int&gt; value): this(0, 0) { _value0 = value; } public ResultSave(UnionGen.Types.NotFound value): this(1, 1) { _value1 = value; } [Obsolete(UnionGen.InternalUtil.UnionGenInternalConst.DefaultConstructorWarning, true)] public ResultSave(): this(0, 0) {} public bool IsResultOfInt32 =&gt; _state.Index == 0; public bool IsNotFound =&gt; _state.Index == 1; public UnionGen.Types.Result&lt;int&gt; AsResultOfInt32() =&gt; IsResultOfInt32 ? _value0 : throw UnionGen.InternalUtil.ExceptionHelper.ThrowNotOfType(GetTypeName(0), GetTypeName(_state.ActualTypeIndex)); public UnionGen.Types.NotFound AsNotFound() =&gt; IsNotFound ? _value1 : throw UnionGen.InternalUtil.ExceptionHelper.ThrowNotOfType(GetTypeName(1), GetTypeName(_state.ActualTypeIndex)); public static implicit operator ResultSave(UnionGen.Types.Result&lt;int&gt; value) =&gt; new ResultSave(value); public static implicit operator ResultSave(UnionGen.Types.NotFound value) =&gt; new ResultSave(value); public static bool operator ==(ResultSave left, ResultSave right) =&gt; left.Equals(right); public static bool operator !=(ResultSave left, ResultSave right) =&gt; !left.Equals(right); public TResult Match&lt;TResult&gt;(Func&lt;UnionGen.Types.Result&lt;int&gt;, TResult&gt; withResultOfInt32, Func&lt;UnionGen.Types.NotFound, TResult&gt; withNotFound) =&gt; _state.ActualTypeIndex switch { 0 =&gt; withResultOfInt32(_value0), 1 =&gt; withNotFound(_value1), _ =&gt; throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(_state.ActualTypeIndex) }; public void Switch(Action&lt;UnionGen.Types.Result&lt;int&gt;&gt; forResultOfInt32, Action&lt;UnionGen.Types.NotFound&gt; forNotFound) { switch (_state.ActualTypeIndex) { case 0: forResultOfInt32(_value0); break; case 1: forNotFound(_value1); break; default: throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(_state.ActualTypeIndex); } } public override string ToString() =&gt; _state.Index switch { 0 =&gt; _value0.ToString()!, 1 =&gt; _value1.ToString()!, _ =&gt; throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(_state.Index) }; public bool Equals(ResultSave other) =&gt; _state.Index == other._state.Index &amp;&amp; _state.Index switch { 0 =&gt; _value0.Equals(other._value0), 1 =&gt; _value1.Equals(other._value1), _ =&gt; false }; public override bool Equals(object? obj) { if (ReferenceEquals(null, obj)) { return false; } return obj is ResultSave other &amp;&amp; Equals(other); } public override int GetHashCode(){ unchecked { var hash = _state.Index switch { 0 =&gt; _value0.GetHashCode(), 1 =&gt; _value1.GetHashCode(), _ =&gt; 0 }; return (hash * 397) ^ _state.Index; } } public string GetTypeName(int index) =&gt; index switch { 0 =&gt; &quot;UnionGen.Types.Result&lt;int&gt;&quot;, 1 =&gt; &quot;UnionGen.Types.NotFound&quot;, _ =&gt; throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(index) }; } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#download-example-net--c","content":" tip Download Example project UnionGen   ","version":"Next","tagName":"h3"},{"title":"Share UnionGen​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#share-uniongen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnionGen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"UnionGen by M. Haslinger","url":"/RSCG_Examples/v2/docs/UnionGen#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"v1","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/v1","content":"v1 This was a previous version of the examples at https://ignatandrei.github.io/RSCG_Examples/v1 - and is not updated anymore The new version is at https://ignatandrei.github.io/RSCG_Examples/v2 Here are the links No\tName\tLink V12\tEnum\tv1 3\tJsonByExampleGenerator\tv1 4\tCopyConstructor + Deconstructor\tv1 5\tGeneratedMapper\tv1 6\tSkinny Controllers\tv1 7\tdata-builder-generator\tv1 8\tMetadata from object\tv1 9\tMockSourceGenerator\tv1 10\tMethod decorator\tv1 11\tPartiallyApplied\tv1 12\tIFormattable\tv1 13\tAutoInterface\tv1 14\tProperty Expression Generator\tv1 15\tTransplator\tv1 16\tRSCG_AMS\tv1 17\tHttpClientGenerator\tv1 18\tDatabaseToWebAPI\tv1 19\tSourceInject\tv1 20\tStatic To Interface\tv1 21\tBaseTypes\tv1 22\tAppSettingsEditor\tv1 23\tApparatusAOT\tv1 24\tRSCG_TimeBombComment\tv1 25\tStructRecordsGenerator\tv1 26\tAOPMarkerCI\tv1 27\tBoilerplateFree\tv1","keywords":"","version":"Next"},{"title":"Valuify by Paul Martins","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Valuify","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#info","content":" info Name: Valuify A .NET Roslyn source generator that enables record-like behavior for classes in projects using C# versions prior to 9.0. Author: Paul Martins NuGet:https://www.nuget.org/packages/Valuify/ You can find more details at https://github.com/MooVC/valuify Source: https://github.com/MooVC/valuify  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#original-readme","content":" note Valuify Valuify is a .NET Roslyn Source Generator designed to enable record-like behavior for classes in projects using C# versions prior to 9.0. Valuify was created primarily to simplify the engineering associated with the creation of Roslyn Source Generators, with a focus on the caching capabilities associated with the IIncrementalGenerator. Valuify ensures that two distinct instances of a given type are considered equal based on their property values, allowing the generator to skip redundant code generation when input states remain unchanged, enhancing performance and reducing the overall footprint of code to be engineered and maintained. While Valuify is primarily designed with Roslyn Source Generators in mind, it also benefits legacy codebases that lack access to the record type introduced in C# 9.0. When used alongside Fluentify, a complimentary Roslyn Source Generator that provides extension methods for creating projections, classes gain functionality equivalent to the with expression in records, preserving immutability while also providing for value-based equality. Installation​ To install Valuify, use the following command in your package manager console: install-package Valuify Usage​ Valuify automatically creates the code required to support property based equality on partial classes that have the Valuify attribute. using Valuify; [Valuify] public partial class Property { public string Name { get; set; } public string Type { get; set; } } Valuify will generate the following code for the above example: Equality Operator (==)​ The Equality Operator provides the code neccessary to ensure that two instances are deemed equal based on their property values when checked using the == operator. When the type of a property is a scalar, the global::System.Collections.Generic.EqualityComparer&lt;T&gt;.Default instance is used t check for equality. When the type of a property implements System.Collections.IEnumerable, the global::Valuify.Internal.SequenceEqualityComparer is used, when ensures the instance associated with the property is checked for equality based on its contents, rather than its reference. The following demonstrates the Equality Operator (==) code generated for Property type: partial class Property { public static bool operator ==(Property left, Property right) { if (ReferenceEquals(left, right)) { return true; } if (ReferenceEquals(left, null) || ReferenceEquals(right, null)) { return false; } return global::System.Collections.Generic.EqualityComparer&lt;string&gt;.Default.Equals(left.Name, right.Name) &amp;&amp; global::System.Collections.Generic.EqualityComparer&lt;string&gt;.Default.Equals(left.Type, right.Type); } } The Equality Operator (==) is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.Equality.g.cs The Equality Operator (==) will not be generated if the type explicitly defines an alternative implementation. Equals Method Override​ The Equals Method Override provides the code neccessary to route calls directed towards the object.Equals(object) method to the IEquatable&lt;T&gt;.Equals(T) method. The following demonstrates the Equals Method Override code generated for Property type: partial class Property { public sealed override bool Equals(object other) { return Equals(other as Property); } } The Equals Method Override is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.Equals.g.cs The Equals Method Override will not be generated if the type explicitly defines an alternative implementation. Equatable Interface Annotation​ The Equatable Interface Annotation provides the code neccessary to ensure the type declares that it implements System.IEquatable&lt;T&gt;. The following demonstrates the Equatable Interface Annotation code generated for Property type: partial class Property : IEquatable&lt;Property&gt; { } The Equatable Interface Annotation is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.IEquatable.g.cs The Equatable Interface Annotation will not be generated if the type already declares that it implements the interface, either explicitly on the type declaration or via its base type. Equatable Implementation​ The Equatable Implementation provides the code neccessary to implement the IEquatable&lt;T&gt;.Equals(T) method, which serves to route calls to the Equality Operator (==) for the type. The following demonstrates the Equatable Implementation code generated for Property type: partial class Property { public bool Equals(Property other) { return this == other; } } The Equatable Implementation is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.IEquatable.Equals.g.cs The Equatable Implementation will not be generated if the type explicitly defines an alternative implementation. GetHashCode Method Override​ The GetHashCode Method Override provides the code neccessary to override the base object.GetHashCode() method to generate a unique, or near-unique hash, based on the values for each property declared by the type. When the type of a property implements System.Collections.IEnumerable, the hash will account for the contents, rather than the collection reference. This is achieves using a custom implementation provided by global::Valuify.Internal.HashCode.Combine(object[]), which is akin to the HashCode.Combine implementation, introduced in C# 8.0. The following demonstrates the GetHashCode Method Override code generated for Property type: partial class Property { public sealed override int GetHashCode() { return global::Valuify.Internal.HashCode.Combine(Name, Type); } } The GetHashCode Method Override is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.GetHashCode.g.cs The GetHashCode Method Override will not be generated if the type explicitly defines an alternative implementation. Inequality Operator (!=)​ The Inequality Operator (!=) provides the code neccessary to ensure that two instances are deemed inequal based on differences in their property values when checked using the != operator. The implementation serves to route calls to the Equality Operator (==). The following demonstrates the Inequality Operator (!=) code generated for Property type: partial class Property { public static bool operator !=(Property left, Property right) { return !(left == right); } } The Inequality Operator (!=) is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.Inequality.g.cs The Inequality Operator (!=) will not be generated if the type explicitly defines an alternative implementation. ToString Method Override​ The ToString Method Override provides the code neccessary to override the base object.ToString() method to generate a unique value based on the the values for each property declared by the type. The output is similar to that produced by the record type, introduced in C# 9.0. The following demonstrates the ToString Method Override code generated for Property type: partial class Property { public sealed override string ToString() { return string.Format(&quot;Property { Name = {0}, Type = {1} }&quot;, Name, Type); } } The ToString Method Override is generated with a hintname that adheres to the following pattern: {Fully Qualified Namespace}.{Type Name}.ToString.g.cs The ToString Method Override will not be generated if the type explicitly defines an alternative implementation. Analyzers​ Valuify includes several analyzers to assist engineers with its usage. These are: Rule ID\tCategory\tSeverity\tNotesVALFY01\tUsage\tWarning\tType is not a class VALFY02\tUsage\tWarning\tType is not marked as partial VALFY03\tDesign\tInfo\tType does not declare any properties Contributing​ Contributions are welcome - see the CONTRIBUTING.md file for details. License​ This project is licensed under the MIT License - see the LICENSE.md file for details.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#about","content":" note Generating Equals from properties  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Valuify &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Valuify&quot; Version=&quot;1.1.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ValuifyAttribute.g.csGeneratorEqualsDemo.Person.Equality.g.csGeneratorEqualsDemo.Person.Equals.g.csGeneratorEqualsDemo.Person.GetHashCode.g.csGeneratorEqualsDemo.Person.IEquatable.Equals.g.csGeneratorEqualsDemo.Person.IEquatable.g.csGeneratorEqualsDemo.Person.Inequality.g.csGeneratorEqualsDemo.Person.ToString.g.csValuify.Internal.HashCode.g.csValuify.Internal.SequenceEqualityComparer.g.cs namespace Valuify { using System; using System.Diagnostics.CodeAnalysis; [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] internal sealed class ValuifyAttribute : Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#download-example-net--c","content":" tip Download Example project Valuify   ","version":"Next","tagName":"h3"},{"title":"Share Valuify​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#share-valuify","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Valuify  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Equals\" has the following generators:​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#category-equals-has-the-following-generators","content":" 1 Equatable.Generator  2 GeneratorEquals  3 Valuify  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Valuify by Paul Martins","url":"/RSCG_Examples/v2/docs/Valuify#see-category","content":" Equals ","version":"Next","tagName":"h3"},{"title":"UnitGenerator by Cysharp, Inc","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/UnitGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#info","content":" info Name: UnitGenerator C# Source Generator to create value-object, inspired by units of measure. Author: Cysharp, Inc NuGet:https://www.nuget.org/packages/UnitGenerator/ You can find more details at https://github.com/Cysharp/UnitGenerator Source: https://github.com/Cysharp/UnitGenerator  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#original-readme","content":" note UnitGenerator C# Source Generator to create Value object pattern, also inspired by units of measure to support all arithmetic operators and serialization. NuGet: UnitGenerator Install-Package UnitGenerator Introduction​ For example, Identifier, UserId is comparable only to UserId, and cannot be assigned to any other type. Also, arithmetic operations are not allowed. using UnitGenerator; [UnitOf(typeof(int))] public readonly partial struct UserId { } will generates [System.ComponentModel.TypeConverter(typeof(UserIdTypeConverter))] public readonly partial struct UserId : IEquatable&lt;UserId&gt; { readonly int value; public UserId(int value) { this.value = value; } public readonly int AsPrimitive() =&gt; value; public static explicit operator int(UserId value) =&gt; value.value; public static explicit operator UserId(int value) =&gt; new UserId(value); public bool Equals(UserId other) =&gt; value.Equals(other.value); public override bool Equals(object? obj) =&gt; // snip... public override int GetHashCode() =&gt; value.GetHashCode(); public override string ToString() =&gt; value.ToString(); public static bool operator ==(in UserId x, in UserId y) =&gt; x.value.Equals(y.value); public static bool operator !=(in UserId x, in UserId y) =&gt; !x.value.Equals(y.value); private class UserIdTypeConverter : System.ComponentModel.TypeConverter { // snip... } } However, Hp in games, should not be allowed to be assigned to other types, but should support arithmetic operations with int. For example double heal = target.Hp = Hp.Min(target.Hp * 2, target.MaxHp). [UnitOf(typeof(int), UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod)] public readonly partial struct Hp { } // -- generates [System.ComponentModel.TypeConverter(typeof(HpTypeConverter))] public readonly partial struct Hp : IEquatable&lt;Hp&gt; #if NET7_0_OR_GREATER , IEqualityOperators&lt;Hp, Hp, bool&gt; #endif , IComparable&lt;Hp&gt; #if NET7_0_OR_GREATER , IComparisonOperators&lt;Hp, Hp, bool&gt; #endif #if NET7_0_OR_GREATER , IAdditionOperators&lt;Hp, Hp, Hp&gt; , ISubtractionOperators&lt;Hp, Hp, Hp&gt; , IMultiplyOperators&lt;Hp, Hp, Hp&gt; , IDivisionOperators&lt;Hp, Hp, Hp&gt; , IUnaryPlusOperators&lt;Hp, Hp&gt; , IUnaryNegationOperators&lt;Hp, Hp&gt; , IIncrementOperators&lt;Hp&gt; , IDecrementOperators&lt;Hp&gt; #endif { readonly int value; public Hp(int value) { this.value = value; } public int AsPrimitive() =&gt; value; public static explicit operator int(Hp value) =&gt; value.value; public static explicit operator Hp(int value) =&gt; new Hp(value); public bool Equals(Hp other) =&gt; value.Equals(other.value); public override bool Equals(object? obj) =&gt; // snip... public override int GetHashCode() =&gt; value.GetHashCode(); public override string ToString() =&gt; value.ToString(); public static bool operator ==(in Hp x, in Hp y) =&gt; x.value.Equals(y.value); public static bool operator !=(in Hp x, in Hp y) =&gt; !x.value.Equals(y.value); private class HpTypeConverter : System.ComponentModel.TypeConverter { /* snip... */ } // UnitGenerateOptions.ArithmeticOperator public static Hp operator +(Hp x, Hp y) =&gt; new Hp(checked((int)(x.value + y.value))); public static Hp operator -(Hp x, Hp y) =&gt; new Hp(checked((int)(x.value - y.value))); public static Hp operator *(Hp x, Hp y) =&gt; new Hp(checked((int)(x.value * y.value))); public static Hp operator /(Hp x, Hp y) =&gt; new Hp(checked((int)(x.value / y.value))); public static Hp operator ++(Hp x) =&gt; new Hp(checked((int)(x.value + 1))); public static Hp operator --(Hp x) =&gt; new Hp(checked((int)(x.value - 1))); public static Hp operator +(A value) =&gt; new((int)(+value.value)); public static Hp operator -(A value) =&gt; new((int)(-value.value)); // UnitGenerateOptions.ValueArithmeticOperator public static Hp operator +(Hp x, in int y) =&gt; new Hp(checked((int)(x.value + y))); public static Hp operator -(Hp x, in int y) =&gt; new Hp(checked((int)(x.value - y))); public static Hp operator *(Hp x, in int y) =&gt; new Hp(checked((int)(x.value * y))); public static Hp operator /(Hp x, in int y) =&gt; new Hp(checked((int)(x.value / y))); // UnitGenerateOptions.Comparable public int CompareTo(Hp other) =&gt; value.CompareTo(other.value); public static bool operator &gt;(Hp x, Hp y) =&gt; x.value &gt; y.value; public static bool operator &lt;(Hp x, Hp y) =&gt; x.value &lt; y.value; public static bool operator &gt;=(Hp x, Hp y) =&gt; x.value &gt;= y.value; public static bool operator &lt;=(Hp x, Hp y) =&gt; x.value &lt;= y.value; // UnitGenerateOptions.MinMaxMethod public static Hp Min(Hp x, Hp y) =&gt; new Hp(Math.Min(x.value, y.value)); public static Hp Max(Hp x, Hp y) =&gt; new Hp(Math.Max(x.value, y.value)); } You can configure with UnitGenerateOptions, which method to implement. [Flags] enum UnitGenerateOptions { None = 0, ImplicitOperator = 1, ParseMethod = 1 &lt;&lt; 1, MinMaxMethod = 1 &lt;&lt; 2, ArithmeticOperator = 1 &lt;&lt; 3, ValueArithmeticOperator = 1 &lt;&lt; 4, Comparable = 1 &lt;&lt; 5, Validate = 1 &lt;&lt; 6, JsonConverter = 1 &lt;&lt; 7, MessagePackFormatter = 1 &lt;&lt; 8, DapperTypeHandler = 1 &lt;&lt; 9, EntityFrameworkValueConverter = 1 &lt;&lt; 10, WithoutComparisonOperator = 1 &lt;&lt; 11, JsonConverterDictionaryKeySupport = 1 &lt;&lt; 12, Normalize = 1 &lt;&lt; 13, } UnitGenerateOptions has some serializer support. For example, a result like Serialize(userId) =&gt; { Value = 1111 } is awful. The value-object should be serialized natively, i.e. Serialize(useId) =&gt; 1111, and should be able to be added directly to a database, etc. Currently UnitGenerator supports MessagePack for C#, System.Text.Json(JsonSerializer), Dapper and EntityFrameworkCore. [UnitOf(typeof(int), UnitGenerateOptions.MessagePackFormatter)] public readonly partial struct UserId { } // -- generates [MessagePackFormatter(typeof(UserIdMessagePackFormatter))] public readonly partial struct UserId { class UserIdMessagePackFormatter : IMessagePackFormatter&lt;UserId&gt; { public void Serialize(ref MessagePackWriter writer, UserId value, MessagePackSerializerOptions options) { options.Resolver.GetFormatterWithVerify&lt;int&gt;().Serialize(ref writer, value.value, options); } public UserId Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) { return new UserId(options.Resolver.GetFormatterWithVerify&lt;int&gt;().Deserialize(ref reader, options)); } } } Table of Contents​ UnitOfAttributeUnitGenerateOptions ImplicitOperatorParseMethodMinMaxMethodArithmeticOperatorValueArithmeticOperatorComparableWithoutComparisonOperatorValidateNormalizeJsonConverterJsonConverterDictionaryKeySupportMessagePackFormatterDapperTypeHandlerEntityFrameworkValueConverter Use for UnityLicense UnitOfAttribute​ When referring to the UnitGenerator, it generates a internal UnitOfAttribute. namespace UnitGenerator { [AttributeUsage(AttributeTargets.Struct, AllowMultiple = false)] internal class UnitOfAttribute : Attribute { public Type Type { get; } public UnitGenerateOptions Options { get; } public UnitArithmeticOperators ArithmeticOperators { get; set; } public string ToStringFormat { get; set; } public UnitOfAttribute(Type type, UnitGenerateOptions options = UnitGenerateOptions.None) { ... } } } You can attach this attribute with any specified underlying type to readonly partial struct. [UnitOf(typeof(Guid))] public readonly partial struct GroupId { } [UnitOf(typeof(string))] public readonly partial struct Message { } [UnitOf(typeof(long))] public readonly partial struct Power { } [UnitOf(typeof(byte[]))] public readonly partial struct Image { } [UnitOf(typeof(DateTime))] public readonly partial struct StartDate { } [UnitOf(typeof((string street, string city)))] public readonly partial struct StreetAddress { } Standard UnitOf(UnitGenerateOptions.None) generates value constructor, explicit operator, implement IEquatable , override GetHashCode, override ToString, == and != operator, TypeConverter for ASP.NET Core binding, AsPrimitive method. If you want to retrieve primitive value, use AsPrimitive() instead of .Value. This is intended to avoid casual getting of primitive values (using the arithmetic operator option if available). When type is bool, also implements true, false, ! operators. public static bool operator true(Foo x) =&gt; x.value; public static bool operator false(Foo x) =&gt; !x.value; public static bool operator !(Foo x) =&gt; !x.value; When type is Guid or Ulid, also implements New() and New***() static operator. public static GroupId New(); public static GroupId NewGroupId(); Second parameter UnitGenerateOptions options can configure which method to implement, default is None. Optional named parameter: ArithmeticOperators can configure which generates operators specifically. Default is Number. (This can be used if UnitGenerateOptions.ArithmeticOperator is specified.) Optional named parameter: ToStringFormat can configure ToString format. Default is null and output as ${0}. UnitGenerateOptions​ When referring to the UnitGenerator, it generates a internal UnitGenerateOptions that is bit flag of which method to implement. [Flags] internal enum UnitGenerateOptions { None = 0, ImplicitOperator = 1, ParseMethod = 2, MinMaxMethod = 4, ArithmeticOperator = 8, ValueArithmeticOperator = 16, Comparable = 32, Validate = 64, JsonConverter = 128, MessagePackFormatter = 256, DapperTypeHandler = 512, EntityFrameworkValueConverter = 1024, } You can use this with [UnitOf]. [UnitOf(typeof(int), UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod)] public readonly partial struct Strength { } [UnitOf(typeof(DateTime), UnitGenerateOptions.Validate | UnitGenerateOptions.ParseMethod | UnitGenerateOptions.Comparable)] public readonly partial struct EndDate { } [UnitOf(typeof(double), UnitGenerateOptions.ParseMethod | UnitGenerateOptions.MinMaxMethod | UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.Validate | UnitGenerateOptions.JsonConverter | UnitGenerateOptions.MessagePackFormatter | UnitGenerateOptions.DapperTypeHandler | UnitGenerateOptions.EntityFrameworkValueConverter)] public readonly partial struct AllOptionsStruct { } You can setup project default options like this. internal static class UnitOfOptions { public const UnitGenerateOptions Default = UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod; } [UnitOf(typeof(int), UnitOfOptions.Default)] public readonly partial struct Hp { } ImplicitOperator​ // Default public static explicit operator U(T value) =&gt; value.value; public static explicit operator T(U value) =&gt; new T(value); // UnitGenerateOptions.ImplicitOperator public static implicit operator U(T value) =&gt; value.value; public static implicit operator T(U value) =&gt; new T(value); ParseMethod​ public static T Parse(string s) public static bool TryParse(string s, out T result) MinMaxMethod​ public static T Min(T x, T y) public static T Max(T x, T y) ArithmeticOperator​ public static T operator +(in T x, in T y) =&gt; new T(checked((U)(x.value + y.value))); public static T operator -(in T x, in T y) =&gt; new T(checked((U)(x.value - y.value))); public static T operator *(in T x, in T y) =&gt; new T(checked((U)(x.value * y.value))); public static T operator /(in T x, in T y) =&gt; new T(checked((U)(x.value / y.value))); public static T operator +(T value) =&gt; new((U)(+value.value)); public static T operator -(T value) =&gt; new((U)(-value.value)); public static T operator ++(T x) =&gt; new T(checked((U)(x.value + 1))); public static T operator --(T x) =&gt; new T(checked((U)(x.value - 1))); In addition, all members conforming to System.Numerics.INumber are generated. If you want to suppress this and generate only certain operators, you can use the the ArithmeticOperatros option of [UnitOf] attribute as follows: [UnitOf( typeof(int), UnitGenerateOptions.ArithmeticOperator, ArithmeticOperators = UnitArithmeticOperators.Addition | UnitArithmeticOperators.Subtraction)] public readonly partial struct Hp { } Value\tGeneratesUnitArithmeticOperators.Addition\tT operator +(T, T) UnitArithmeticOperators.Subtraction\tT operator -(T, T) UnitArithmeticOperators.Multiply\tT operator *(T, T), T operator +(T), T operator-(T) UnitArithmeticOperators.Division\tT operator /(T, T), T operator +(T), T operator-(T) UnitArithmeticOperators.Increment\tT operator ++(T) UnitArithmeticOperators.Decrement\tT operator --(T) ValueArithmeticOperator​ public static T operator +(in T x, in U y) =&gt; new T(checked((U)(x.value + y))); public static T operator -(in T x, in U y) =&gt; new T(checked((U)(x.value - y))); public static T operator *(in T x, in U y) =&gt; new T(checked((U)(x.value * y))); public static T operator /(in T x, in U y) =&gt; new T(checked((U)(x.value / y))); Comparable​ Implements IComparable and &gt;, &lt;, &gt;=, &lt;= operators. public U CompareTo(T other) =&gt; value.CompareTo(other.value); public static bool operator &gt;(in T x, in T y) =&gt; x.value &gt; y.value; public static bool operator &lt;(in T x, in T y) =&gt; x.value &lt; y.value; public static bool operator &gt;=(in T x, in T y) =&gt; x.value &gt;= y.value; public static bool operator &lt;=(in T x, in T y) =&gt; x.value &lt;= y.value; WithoutComparisonOperator​ Without implements &gt;, &lt;, &gt;=, &lt;= operators. For example, useful for Guid. [UnitOf(typeof(Guid), UnitGenerateOptions.Comparable | UnitGenerateOptions.WithoutComparisonOperator)] public readonly partial struct FooId { } Validate​ Implements partial void Validate() method that is called on constructor. // You can implement this custom validate method. [UnitOf(typeof(int), UnitGenerateOptions.Validate)] public readonly partial struct SampleValidate { // impl here. private partial void Validate() { if (value &gt; 9999) throw new Exception(&quot;Invalid value range: &quot; + value); } } // Source generator generate this codes. public T(int value) { this.value = value; this.Validate(); } private partial void Validate(); Normalize​ Implements partial void Normalize(ref T value) method that is called on constructor. // You can implement this custom normalize method to change value during initialization [UnitOf(typeof(int), UnitGenerateOptions.Normalize)] public readonly partial struct SampleValidate { // impl here. private partial void Normalize(ref int value) { value = Math.Max(value, 9999); } } // Source generator generate this codes. public T(int value) { this.value = value; this.Normalize(ref this.value); } private partial void Normalize(ref int value); JsonConverter​ Implements System.Text.Json's JsonConverter. It will be used JsonSerializer automatically. [JsonConverter(typeof(UserIdJsonConverter))] public readonly partial struct UserId { class UserIdJsonConverter : JsonConverter&lt;UserId&gt; } JsonConverterDictionaryKeySupport​ Implements JsonConverter's WriteAsPropertyName/ReadAsPropertyName. It supports from .NET 6, supports Dictionary's Key. var dict = Dictionary&lt;UserId, int&gt; JsonSerializer.Serialize(dict); MessagePackFormatter​ Implements MessagePack for C#'s MessagePackFormatter. It will be used MessagePackSerializer automatically. [MessagePackFormatter(typeof(UserIdMessagePackFormatter))] public readonly partial struct UserId { class UserIdMessagePackFormatter : IMessagePackFormatter&lt;UserId&gt; } DapperTypeHandler​ Implements Dapper's TypeHandler by public accessibility. TypeHandler is automatically registered at the time of Module initialization. public readonly partial struct UserId { public class UserIdTypeHandler : Dapper.SqlMapper.TypeHandler&lt;UserId&gt; } [ModuleInitializer] public static void AddTypeHandler() { Dapper.SqlMapper.AddTypeHandler(new A.ATypeHandler()); } EntityFrameworkValueConverter​ Implements EntityFrameworkCore's ValueConverter by public accessibility. It is not registered automatically so you need to register manually. public readonly partial struct UserId { public class UserIdValueConverter : ValueConverter&lt;UserId, int&gt; } // setup handler manually builder.HasConversion(new UserId.UserIdValueConverter()); Use for Unity​ C# Source Generator feature is rely on C# 9.0. If you are using Unity 2021.2, that supports Source Generators. Add the UnitGenerator.dll from the releases page, disable Any Platform, disable Include all platforms and set label as RoslynAnalyzer. It works in Unity Editor however does not work on IDE because Unity does not generate analyzer reference to .csproj. We provides CsprojModifer to analyzer support, uses Add analyzer references to generated .csproj supports both IDE and Unity Editor. Unity(2020) does not support C# 9.0 so can not use directly. However, C# Source Genertor supports output source as file. Create UnitSourceGen.csproj. &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt; &lt;!-- add this two lines and configure output path --&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(ProjectDir)..\\Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- reference UnitGenerator --&gt; &lt;PackageReference Include=&quot;UnitGenerator&quot; Version=&quot;1.0.0&quot; /&gt; &lt;!-- add target sources path from Unity --&gt; &lt;Compile Include=&quot;..\\MyUnity\\Assets\\Scripts\\Models\\**\\*.cs&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; install .NET SDK and run this command. dotnet build UnitSourceGen.csproj File will be generated under UnitGenerator\\UnitGenerator.SourceGenerator\\*.Generated.cs. UnitOfAttribute is also included in generated folder, so at first, run build command and get attribute to configure. License​ This library is under the MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#about","content":" note Generating classes instead of value objects( e.g. int)  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references UnitGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;UnitGenerator&quot; Version=&quot;1.5.1&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  StronglyDemo.DayId.g.csStronglyDemo.MonthId.g.csStronglyDemo.YearId.g.csUnitOfAttribute.cs // &lt;auto-generated&gt; // THIS (.cs) FILE IS GENERATED BY UnitGenerator. DO NOT CHANGE IT. // &lt;/auto-generated&gt; #pragma warning disable CS8669 using System; using System.Globalization; #if NET7_0_OR_GREATER using System.Numerics; #endif namespace StronglyDemo { [System.ComponentModel.TypeConverter(typeof(DayIdTypeConverter))] readonly partial struct DayId : IEquatable&lt;DayId&gt; #if NET7_0_OR_GREATER , IEqualityOperators&lt;DayId, DayId, bool&gt; #endif { readonly int value; public int AsPrimitive() =&gt; value; public DayId(int value) { this.value = value; } public static explicit operator int(DayId value) { return value.value; } public static explicit operator DayId(int value) { return new DayId(value); } public bool Equals(DayId other) { return value.Equals(other.value); } public override bool Equals(object obj) { if (obj == null) return false; var t = obj.GetType(); if (t == typeof(DayId)) { return Equals((DayId)obj); } if (t == typeof(int)) { return value.Equals((int)obj); } return value.Equals(obj); } public static bool operator ==(DayId x, DayId y) { return x.value.Equals(y.value); } public static bool operator !=(DayId x, DayId y) { return !x.value.Equals(y.value); } public override int GetHashCode() { return value.GetHashCode(); } public override string ToString() =&gt; value.ToString(); // Default private class DayIdTypeConverter : System.ComponentModel.TypeConverter { private static readonly Type WrapperType = typeof(DayId); private static readonly Type ValueType = typeof(int); public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType) { if (sourceType == WrapperType || sourceType == ValueType) { return true; } return base.CanConvertFrom(context, sourceType); } public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType) { if (destinationType == WrapperType || destinationType == ValueType) { return true; } return base.CanConvertTo(context, destinationType); } public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { if (value != null) { var t = value.GetType(); if (t == typeof(DayId)) { return (DayId)value; } if (t == typeof(int)) { return new DayId((int)value); } } return base.ConvertFrom(context, culture, value); } public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType) { if (value is DayId wrappedValue) { if (destinationType == WrapperType) { return wrappedValue; } if (destinationType == ValueType) { return wrappedValue.AsPrimitive(); } } return base.ConvertTo(context, culture, value, destinationType); } } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#download-example-net--c","content":" tip Download Example project UnitGenerator   ","version":"Next","tagName":"h3"},{"title":"Share UnitGenerator​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#share-unitgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnitGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"PrimitiveObsession\" has the following generators:​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#category-primitiveobsession-has-the-following-generators","content":" 1 DomainPrimitives  2 Strongly  3 StronglyTypedUid  4 UnitGenerator  5 Vogen  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"UnitGenerator by Cysharp, Inc","url":"/RSCG_Examples/v2/docs/UnitGenerator#see-category","content":" PrimitiveObsession ","version":"Next","tagName":"h3"},{"title":"UnionsGenerator by Paul Braetz","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/UnionsGenerator","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#info","content":" info Name: UnionsGenerator Generate hybrid (tagged/type) union types. Author: Paul Braetz NuGet:https://www.nuget.org/packages/RhoMicro.CodeAnalysis.UnionsGenerator You can find more details at https://github.com/PaulBraetz/RhoMicro.CodeAnalysis/ Source: https://github.com/PaulBraetz/RhoMicro.CodeAnalysis/  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#original-readme","content":" note Rhomicro.CodeAnalysis This repository contains my explorations on c# source code generation and analysis. The [UnionsGenerator](https://github.com/PaulBraetz/RhoMicro.CodeAnalysis//UnionsGenerator generator enables the use of union types in C#. The [UtilityGenerators](https://github.com/PaulBraetz/RhoMicro.CodeAnalysis//UtilityGenerators generator helps you write code generators and analyzers. The [CopyTo](https://github.com/PaulBraetz/RhoMicro.CodeAnalysis//CopyTo generator generates methods to copy the contents of one instance to another. I created this generator for a friend, so it is not as feature rich as it could be.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#about","content":" note Generating Union types for C#  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#example-source-csproj-source-files","content":" CSharp ProjectProgram.csResultSave.csSaveToDatabase.cs This is the CSharp Project that references UnionsGenerator &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;RhoMicro.CodeAnalysis.UnionsGenerator&quot; Version=&quot;14.0.2&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  RhoMicro_CodeAnalysis_RelationTypeAttribute.g.csRhoMicro_CodeAnalysis_UnionFactoryAttribute.g.csRhoMicro_CodeAnalysis_UnionsGenerator_Generated_Util.g.csRhoMicro_CodeAnalysis_UnionTypeAttribute.g.csRhoMicro_CodeAnalysis_UnionTypeSettingsAttribute.g.csUnionTypesDemo_ResultSave.g.cs // &lt;auto-generated&gt; // This file was generated by RhoMicro.CodeAnalysis.UnionsGenerator // The tool used to generate this code may be subject to license terms; // this generated code is however not subject to those terms, instead it is // subject to the license (if any) applied to the containing project. // &lt;/auto-generated&gt; #nullable enable #pragma warning disable namespace RhoMicro.CodeAnalysis { using System; /// &lt;summary&gt; /// Marks the target type to be related to another union type. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] #if UNIONS_GENERATOR [GenerateFactory(OmitTypeCheck = true)] #endif sealed partial class RelationAttribute&lt;T0&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;The third type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1, T2&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;The third type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;The fourth type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1, T2, T3&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;The third type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;The fourth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;The fifth type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1, T2, T3, T4&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;The third type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;The fourth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;The fifth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;The sixth type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1, T2, T3, T4, T5&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;The third type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;The fourth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;The fifth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;The sixth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;The seventh type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1, T2, T3, T4, T5, T6&gt; : Attribute { } /// &lt;summary&gt; /// Marks the target type to be related to other union types. /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T0&quot;&gt;The first type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T1&quot;&gt;The second type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T2&quot;&gt;The third type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T3&quot;&gt;The fourth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T4&quot;&gt;The fifth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T5&quot;&gt;The sixth type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T6&quot;&gt;The seventh type to register as related to the target union type.&lt;/typeparam&gt; /// &lt;typeparam name=&quot;T7&quot;&gt;The eighth type to register as related to the target union type.&lt;/typeparam&gt; [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Class, AllowMultiple = true, Inherited = false)] sealed partial class RelationAttribute&lt;T0, T1, T2, T3, T4, T5, T6, T7&gt; : Attribute { } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#download-example-net--c","content":" tip Download Example project UnionsGenerator   ","version":"Next","tagName":"h3"},{"title":"Share UnionsGenerator​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#share-unionsgenerator","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnionsGenerator  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"FunctionalProgramming\" has the following generators:​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#category-functionalprogramming-has-the-following-generators","content":" 1 cachesourcegenerator  2 dunet  3 Dusharp  4 Funcky.DiscriminatedUnion  5 FunicularSwitch  6 N.SourceGenerators.UnionTypes  7 OneOf  8 PartiallyApplied  9 polytype  10 rscg_demeter  11 rscg_queryables  12 RSCG_Utils_Memo  13 Sera.Union  14 TypeUtilities  15 UnionGen  16 UnionsGenerator  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"UnionsGenerator by Paul Braetz","url":"/RSCG_Examples/v2/docs/UnionsGenerator#see-category","content":" FunctionalProgramming ","version":"Next","tagName":"h3"},{"title":"Weave by John Gietzen","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Weave","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#info","content":" info Name: Weave Weave is a text templating engine that is all about attention to detail. Weave handles the tricky work of making your rendered text beautiful. Author: John Gietzen NuGet:https://www.nuget.org/packages/Weave/ You can find more details at https://github.com/otac0n/Weave Source: https://github.com/otac0n/Weave  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#original-readme","content":" note Weave Weave is a text templating engine for .NET that is all about attention to detail. Weave handles the tricky work of making your rendered text beautiful. Getting Started​ The easiest way to get a copy of Weave is to install the Weave NuGet package in Visual Studio. PM&gt; Install-Package Weave Due to a limitation in Visual Studio, you will need to reload your project for the 'WeaveTemplate' build action to be recognized. Once you have the package installed, files in your project marked as 'WeaveTemplate' in the properties window will be compiled to their respective .weave.cs template classes before every build. These template classes will be automatically included in compilation. For help with template syntax, see the Syntax Guide wiki entry Example​ @namespace MyProject @methodname RenderFizzBuzz @model IEnumerable&lt;int&gt; {{each i in model}} {{if i % 3 == 0 &amp;&amp; i % 5 == 0}} {{= i }} FizzBuzz {{elif i % 3 == 0}} {{= i }} Fizz {{elif i % 5 == 0}} {{= i }} Buzz {{else}} {{= i }} {{/if}} {{/each}} This would generate a static (by default) method named RenderFizzBuzz in the Templates class (again, by default). You would use this method like so: Templates.RenderFizzBuzz(Enumerable.Range(0, 100), Console.Out); Any TextWriter is supported. To get the text as a string, use a StringWriter.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#about","content":" note Scriban like generator  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPerson.cs This is the CSharp Project that references Weave &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;None Remove=&quot;MyDataT.weave&quot; /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Weave&quot; Version=&quot;2.1.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;WeaveTemplate Include=&quot;MyDataT.weave&quot;&gt; &lt;/WeaveTemplate&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  .._p5C.._p5C.._p5CMyDataT.weave.g.cs // ----------------------------------------------------------------------- // &lt;auto-generated&gt; // This code was generated by Weave 2.1.0.0 // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; // ----------------------------------------------------------------------- namespace #line 1 &quot;..\\..\\..\\MyDataT.weave&quot; MyProject #line default { using System; using System.IO; partial class Templates { [System.CodeDom.Compiler.GeneratedCode(&quot;Weave&quot;, &quot;2.1.0.0&quot;)] public static void #line 2 &quot;..\\..\\..\\MyDataT.weave&quot; RenderFizzBuzz #line default ( #line 3 &quot;..\\..\\..\\MyDataT.weave&quot; WeaveDemo.Person #line default model, TextWriter writer, string indentation = null) { var __originalIndentation = indentation = indentation ?? string.Empty; writer.Write(indentation); writer.Write(&quot;I will write p.FullName();&quot;); writer.WriteLine(); writer.WriteLine(); writer.Write(indentation); writer.Write( #line 7 &quot;..\\..\\..\\MyDataT.weave&quot; model.FullName() #line default ); writer.WriteLine(); } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C# )​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#download-example-net--c-","content":" tip Download Example project Weave   ","version":"Next","tagName":"h3"},{"title":"Share Weave​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#share-weave","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Weave  ","version":"Next","tagName":"h3"},{"title":"In the same category (FilesToCode) - 13 other generators​","type":1,"pageTitle":"Weave by John Gietzen","url":"/RSCG_Examples/v2/docs/Weave#in-the-same-category-filestocode---13-other-generators","content":" Chorn.EmbeddedResourceAccessGenerator​  corecraft​  Datacute.EmbeddedResourcePropertyGenerator​  DotnetYang​  EmbedResourceCSharp​  LingoGen​  NotNotAppSettings​  Podimo.ConstEmbed​  ResXGenerator​  RSCG_JSON2Class​  RSCG_Utils​  ThisAssembly_Resources​  ThisAssembly.Strings​ ","version":"Next","tagName":"h3"},{"title":"Vogen by Steve Dunn","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/Vogen","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#info","content":" info Name: Vogen This package contains a Souce Generator which generates Value Objects that wrap simple primitives such as int, string, double etc. A ValueObject is a strongly typed (strongly, not stringly) domain object that is immutable. Instead of int customerId = 42; we have var customerId = CustomerId.From(42); To use, just create something like this: [ValueObject(typeof(int))] public partial struct CustomerId { } var customerId = CustomerId.From(42); Validation is in just one place. You can't introduce bad objects into your domain, therefore you can assume that in your domain every ValueObject is valid. Author: Steve Dunn NuGet:https://www.nuget.org/packages/Vogen/ You can find more details at https://dunnhq.com/posts/2021/primitive-obsession/ Source: https://github.com/SteveDunn/Vogen  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#original-readme","content":" note Name\tOperating System\tStatus\tHistoryGitHub Actions\tUbuntu, Mac &amp; Windows Give a Star! ⭐​ If you like or are using this project please give it a star. Thanks! Vogen: cure your Primitive Obsession Vogen is a .NET Source Generator and analyzer. It turns your primitives (ints, decimals etc.) into Value Objects that represent domain concepts (CustomerId, AccountBalance etc.) It adds new C# compilation errors to help stop the creation of invalid Value Objects. Overview​ The source generator generates strongly typed domain concepts. You provide this: [ValueObject&lt;int&gt;] public partial struct CustomerId { } ... and Vogen generates source similar to this: public partial struct CustomerId : System.IEquatable&lt;CustomerId&gt;, System.IComparable&lt;CustomerId&gt;, System.IComparable { private readonly int _value; public readonly int Value =&gt; _value; public CustomerId() { throw new Vogen.ValueObjectValidationException(&quot;Validation skipped by attempting to use the default constructor...&quot;); } private CustomerId(int value) =&gt; _value = value; public static CustomerId From(int value) { CustomerId instance = new CustomerId(value); return instance; } public readonly bool Equals(CustomerId other) ... public readonly bool Equals(int primitive) ... public readonly override bool Equals(object obj) ... public static bool operator ==(CustomerId left, CustomerId right) ... public static bool operator !=(CustomerId left, CustomerId right) ... public static bool operator ==(CustomerId left, int right) ... public static bool operator !=(CustomerId left, int right) ... public static bool operator ==(int left, CustomerId right) ... public static bool operator !=(int left, CustomerId right) ... public readonly override int GetHashCode() ... public readonly override string ToString() ... } You then use CustomerId instead of int in your domain in the full knowledge that it is valid and safe to use: CustomerId customerId = CustomerId.From(123); SendInvoice(customerId); ... public void SendInvoice(CustomerId customerId) { ... } Note: int is the default type for Value Objects, but it is generally a good idea to explicitly declare each type for clarity. Plus, although int is the default, you can - individually or globally - configure them to be other types. See the Configuration section later in the document, but here's some brief examples: [ValueObject&lt;decimal&gt;] public partial struct AccountBalance { } [ValueObject(typeof(string))] public partial class LegalEntityName { } The main goal of Vogen is to ensure the validity of your Value Objects, the code analyser helps you to avoid mistakes which might leave you with uninitialized Value Objects in your domain. It does this by adding new constraints in the form of new C# compilation errors. There are a few ways you could end up with uninitialized Value Objects. One way is by giving your type constructors. Providing your own constructors could mean that you forget to set a value, so Vogen doesn't allow you to have user defined constructors: [ValueObject] public partial struct CustomerId { // Vogen deliberately generates this so that you can't create your own: // error CS0111: Type 'CustomerId' already defines a member called 'CustomerId' with the same parameter type public CustomerId() { } // error VOG008: Cannot have user defined constructors, please use the From method for creation. public CustomerId(int value) { } } In addition, Vogen will spot issues when creating or consuming Value Objects: // catches object creation expressions var c = new CustomerId(); // error VOG010: Type 'CustomerId' cannot be constructed with 'new' as it is prohibited CustomerId c = default; // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. var c = default(CustomerId); // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. var c = GetCustomerId(); // error VOG010: Type 'CustomerId' cannot be constructed with 'new' as it is prohibited var c = Activator.CreateInstance&lt;CustomerId&gt;(); // error VOG025: Type 'CustomerId' cannot be constructed via Reflection as it is prohibited. var c = Activator.CreateInstance(typeof(CustomerId)); // error VOG025: Type 'MyVo' cannot be constructed via Reflection as it is prohibited // catches lambda expressions Func&lt;CustomerId&gt; f = () =&gt; default; // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. // catches method / local function return expressions CustomerId GetCustomerId() =&gt; default; // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. CustomerId GetCustomerId() =&gt; new CustomerId(); // error VOG010: Type 'CustomerId' cannot be constructed with 'new' as it is prohibited CustomerId GetCustomerId() =&gt; new(); // error VOG010: Type 'CustomerId' cannot be constructed with 'new' as it is prohibited // catches argument / parameter expressions Task&lt;CustomerId&gt; t = Task.FromResult&lt;CustomerId&gt;(new()); // error VOG010: Type 'CustomerId' cannot be constructed with 'new' as it is prohibited void Process(CustomerId customerId = default) { } // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. One of the main goals of this project is to achieve almost the same speed and memory performance as using primitives directly. Put another way, if your decimal primitive represents an Account Balance, then there is extremely low overhead of using an AccountBalance Value Object instead. Please see the performance metrics below. Installation​ Vogen is a Nuget package. Install it with: dotnet add package Vogen When added to your project, the source generator generates the wrappers for your primitives and and the code analyserwill let you know if you try to create invalid Value Objects. Usage​ Think about your domain concepts and how you use primitives to represent them, e.g. instead of this: public void HandlePayment(int customerId, int accountId, decimal paymentAmount) ... have this: public void HandlePayment(CustomerId customerId, AccountId accountId, PaymentAmount paymentAmount) It's as simple as creating types like this: [ValueObject] public partial struct CustomerId { } [ValueObject] public partial struct AccountId { } [ValueObject&lt;decimal&gt;] public partial struct PaymentAmount { } More on Primitive Obsession​ The source generator generates Value Objects. Value Objects help combat Primitive Obsession by wrapping simple primitives such as int, string, double etc. in a strongly-typed type. Primitive Obsession (AKA StringlyTyped) means being obsessed with primitives. It is a Code Smell that degrades the quality of software. &quot;Primitive Obsession is using primitive data types to represent domain ideas&quot; # Some examples: instead of int age - we'd have Age age. Age might have validation that it couldn't be negativeinstead of string postcode - we'd have Postcode postcode. Postcode might have validation on the format of the text The source generator is opinionated. The opinions help ensure consistency. The opinions are: A Value Object (VO) is constructed via a factory method named From, e.g. Age.From(12)A VO is equatable (Age.From(12) == Age.From(12))A VO, if validated, is validated with a static method named Validate that returns a Validation resultAny validation that is not Validation.Ok results in a ValueObjectValidationException being thrown It is common to represent domain ideas as primitives, but primitives might not be able to fully describe the domain idea. To use Value Objects instead of primitives, we simply swap code like this: public class CustomerInfo { private int _id; public CustomerInfo(int id) =&gt; _id = id; } .. to this: public class CustomerInfo { private CustomerId _id; public CustomerInfo(CustomerId id) =&gt; _id = id; } Tell me more about the Code Smell​ There's a blog post here that describes it, but to summarise: Primitive Obsession is being obsessed with the seemingly convenient way that primitives, such as ints and strings, allow us to represent domain objects and ideas. It is this: int customerId = 42 What's wrong with that? A customer ID likely cannot be fully represented by an int. An int can be negative or zero, but it's unlikely a customer ID can be. So, we have constraints on a customer ID. We can't represent or enforce those constraints on an int. So, we need some validation to ensure the constraints of a customer ID are met. Because it's in int, we can't be sure if it's been checked beforehand, so we need to check it every time we use it. Because it's a primitive, someone might've changed the value, so even if we're 100% sure we've checked it before, it still might need checking again. So far, we've used as an example, a customer ID of value 42. In C#, it may come as no surprise that &quot;42 == 42&quot; (I haven't checked that in JavaScript!). But, in our domain, should 42 always equal 42? Probably not if you're comparing a Supplier ID of 42 to a Customer ID of 42! But primitives won't help you here (remember, 42 == 42!). (42 == 42) // true (SuppliedId.From(42) == SupplierId.From(42)) // true (SuppliedId.From(42) == VendorId.From(42)) // compilation error But sometimes, we need to denote that a Value Object isn't valid or has not been set. We don't want anyone outside of the object doing this as it could be used accidentally. It's common to have Unspecified instances, e.g. public class Person { public Age Age { get; } = Age.Unspecified; } We can do that with an Instance attribute: [ValueObject] [Instance(&quot;Unspecified&quot;, -1)] public readonly partial struct Age { public static Validation Validate(int value) =&gt; value &gt; 0 ? Validation.Ok : Validation.Invalid(&quot;Must be greater than zero.&quot;); } This generates public static Age Unspecified = new Age(-1);. The constructor is private, so only this type can (deliberately) create invalid instances. Now, when we use Age, our validation becomes clearer: public void Process(Person person) { if(person.Age == Age.Unspecified) { // age not specified. } } We can also specify other instance properties: [ValueObject(typeof(float))] [Instance(&quot;Freezing&quot;, 0)] [Instance(&quot;Boiling&quot;, 100)] public readonly partial struct Celsius { public static Validation Validate(float value) =&gt; value &gt;= -273 ? Validation.Ok : Validation.Invalid(&quot;Cannot be colder than absolute zero&quot;); } Configuration​ Each Value Object can have it's own optional configuration. Configuration includes: The underlying typeAny 'conversions' (Dapper, System.Text.Json, Newtonsoft.Json, etc.) - see the Integrations page in the wiki for more informationThe type of the exception that is thrown when validation fails If any of those above are not specified, then global configuration is inferred. It looks like this: [assembly: VogenDefaults(underlyingType: typeof(int), conversions: Conversions.Default, throws: typeof(ValueObjectValidationException))] Those again are optional. If they're not specified, then they are defaulted to: Underlying type = typeof(int)Conversions = Conversions.Default (TypeConverter and System.Text.Json)Validation exception type = typeof(ValueObjectValidationException) There are several code analysis warnings for invalid configuration, including: when you specify an exception that does not derive from System.Exceptionwhen your exception does not have 1 public constructor that takes an intwhen the combination of conversions does not match an entry Performance​ (to run these yourself: dotnet run -c Release --framework net7.0 -- --job short --filter * in the Vogen.Benchmarks folder) As mentioned previously, the goal of Vogen is to achieve very similar performance compare to using primitives themselves. Here's a benchmark comparing the use of a validated Value Object with underlying type of int vs using an int natively (primitively 🤓) BenchmarkDotNet=v0.13.2, OS=Windows 11 (10.0.22621.1194) AMD Ryzen 9 5950X, 1 CPU, 32 logical and 16 physical cores .NET SDK=7.0.102 [Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2 ShortRun : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2 Job=ShortRun IterationCount=3 LaunchCount=1 WarmupCount=3 Method\tMean\tError\tStdDev\tRatio\tRatioSD\tGen0\tAllocatedUsingIntNatively\t14.55 ns\t1.443 ns\t0.079 ns\t1.00\t0.00\t-\t- UsingValueObjectStruct\t14.88 ns\t3.639 ns\t0.199 ns\t1.02\t0.02\t-\t- There is no discernible difference between using a native int and a VO struct; both are pretty much the same in terms of speed and memory. The next most common scenario is using a VO class to represent a native String. These results are: BenchmarkDotNet=v0.13.2, OS=Windows 11 (10.0.22621.1194) AMD Ryzen 9 5950X, 1 CPU, 32 logical and 16 physical cores .NET SDK=7.0.102 [Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2 ShortRun : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2 Job=ShortRun IterationCount=3 LaunchCount=1 WarmupCount=3 Method\tMean\tError\tStdDev\tRatio\tRatioSD\tGen0\tAllocated\tAlloc RatioUsingStringNatively\t151.8 ns\t32.19\t1.76\t1.00\t0.00\t0.0153\t256 B\t1.00 UsingValueObjectAsStruct\t184.8 ns\t12.19\t0.67\t1.22\t0.02\t0.0153\t256 B\t1.00 There is a tiny amount of performance overhead, but these measurements are incredibly small. There is no memory overhead. Serialisation and type conversion​ By default, each VO is decorated with a TypeConverter and System.Text.Json (STJ) serializer. There are other converters/serializer for: Newtonsoft.Json (NSJ)DapperEFCoreLINQ to DB They are controlled by the Conversions enum. The following has serializers for NSJ and STJ: [ValueObject(conversions: Conversions.NewtonsoftJson | Conversions.SystemTextJson, underlyingType: typeof(float))] public readonly partial struct Celsius { } If you don't want any conversions, then specify Conversions.None. If you want your own conversion, then again specify none, and implement them yourself, just like any other type. But be aware that even serializers will get the same compilation errors for new and default when trying to create VOs. If you want to use Dapper, remember to register it - something like this: SqlMapper.AddTypeHandler(new Customer.DapperTypeHandler()); See the examples folder for more information. FAQ​ Is there a Wiki for this project?​ Yes, it's here: https://github.com/SteveDunn/Vogen/wiki What versions of .NET are supported?​ The source generator is .NET Standard 2.0. The code it generates supports all C# language versions from 6.0 and onwards If you're using the generator in a .NET Framework project and using the old style projects (the one before the 'SDK style' projects), then you'll need to do a few things differently: add the reference using PackageReference in the .csproj file: &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Vogen&quot; Version=&quot;[LATEST_VERSION_HERE - E.G. 1.0.18]&quot; PrivateAssets=&quot;all&quot; /&gt; &lt;/ItemGroup&gt; set the language version to latest (or anything 8 or more): &lt;PropertyGroup&gt; + &lt;LangVersion&gt;latest&lt;/LangVersion&gt; &lt;Configuration Condition=&quot; '$(Configuration)' == '' &quot;&gt;Debug&lt;/Configuration&gt; Does it support C# 11 features?​ This is primarily a source generator. The source it generates is mostly C# 6 for compatibility. But if you use features from a later language version, for instance records from C# 9, then it will also generate records. Source generation is driven by attributes, and, if you're using .NET 7 or above, the generic version of the ValueObject attribute is exposed: [ValueObject&lt;int&gt;] public partial struct Age { } Why are they called 'Value Objects'?​ The term Value Object represents a small object who's equality is based on value and not identity. From Wikipedia In computer science, a Value Object is a small object that represents a simple entity whose equality is not based on identity: i.e. two Value Objects are equal when they have the same value, not necessarily being the same object. In DDD, a Value Object is (again, from Wikipedia) ... a Value Object is an immutable object that contains attributes but has no conceptual identity How can I view the code that is generated?​ Add this to your .csproj file: &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;Generated&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;Compile Remove=&quot;Generated/*/**/*.cs&quot; /&gt; &lt;/ItemGroup&gt; Then, you can view the generated files in the Generated folder. In Visual Studio, you need to select 'Show all files' in the Solution Explorer window: Here's an example from the included Samples project: Why can't I just use public record struct CustomerId(int Value);?​ That doesn't give you validation. To validate Value, you can't use the shorthand syntax (Primary Constructor). So you'd need to do: public record struct CustomerId { public CustomerId(int value) { if(value &lt;=0) throw new Exception(...) } } You might also provide other constructors which might not validate the data, thereby allowing invalid data into your domain. Those other constructors might not throw exception, or might throw different exceptions. One of the opinions in Vogen is that any invalid data given to a Value Object throws a ValueObjectValidationException. You could also use default(CustomerId) to evade validation. In Vogen, there are analysers that catch this and fail the build, e.g: // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. CustomerId c = default; // error VOG009: Type 'CustomerId' cannot be constructed with default as it is prohibited. var c2 = default(CustomerId); Can I serialize and deserialize them?​ Yes. By default, each VO is decorated with a TypeConverter and System.Text.Json (STJ) serializer. There are other converters/serializers for: Newtonsoft.Json (NSJ)DapperEFCoreLINQ to DB Can I use them in EFCore?​ Yes, although there are certain considerations. Please see the EFCore page on the Wiki, but the TL;DR is: If the Value Object on your entity is a struct, then you don't need to do anything special But if it is a class, then you need a conversion to be generated, e.g. [ValueObject&lt;string&gt;(conversions: Conversions.EfCoreValueConverter)]and you need to tell EFCore to use that converter in the OnModelCreating method, e.g.: builder.Entity&lt;SomeEntity&gt;(b =&gt; { b.Property(e =&gt; e.Name).HasConversion(new Name.EfCoreValueConverter()); }); It seems like a lot of overhead; I can validate the value myself when I use it!​ You could, but to ensure consistency throughout your domain, you'd have to validate everywhere. And Shallow's Law says that that's not possible: ⚖️ Shalloway's Law&quot;when N things need to change and N &gt; 1, Shalloway will find at most N - 1 of these things.&quot; Concretely: &quot;When 5 things need to change, Shalloway will find at most, 4 of these things.&quot; If my VO is a struct, can I prohibit the use of CustomerId customerId = default(CustomerId);?​ Yes. The analyzer generates a compilation error. If my VO is a struct, can I prohibit the use of CustomerId customerId = new(CustomerId);?​ Yes. The analyzer generates a compilation error. If my VO is a struct, can I have my own constructor?​ No. The parameter-less constructor is generated automatically, and the constructor that takes the underlying value is also generated automatically. If you add further constructors, then you will get a compilation error from the code generator, e.g. [ValueObject(typeof(int))] public partial struct CustomerId { // Vogen already generates this as a private constructor: // error CS0111: Type 'CustomerId' already defines a member called 'CustomerId' with the same parameter type public CustomerId() { } // error VOG008: Cannot have user defined constructors, please use the From method for creation. public CustomerId(int value) { } } If my VO is a struct, can I have my own fields?​ You could, but you'd get compiler warning CS0282-There is no defined ordering between fields in multiple declarations of partial class or struct 'type' Why are there no implicit conversions to and from the primitive types that are being wrapped?​ Implicit operators can be useful, but for Value Objects, they can confuse things. Take the following code without any implicit conversions: Age age1 = Age.From(1); OsVersion osVersion = OsVersion.From(1); Console.WriteLine(age1 == osVersion); // won't compile! \\o/ That makes perfect sense. But adding in an implicit operator from Age to int, and it does compile! Console.WriteLine(age1 == osVersion); // TRUE! (◎_◎;) If we remove that implicit operator and replace it with an implicit operator from int to Age, it no longer compiles, which is great (we've got type safety back), but we end up violating the rules of implicit operators: Predefined C# implicit conversions always succeed and never throw an exception. User-defined implicit conversions should behave in that way as well. If a custom conversion can throw an exception or lose information, define it as an explicit conversion In my research, I read some other opinions, and noted that the guidelines listed in this answer say: If the conversion can throw an InvalidCast exception, then it shouldn't be implicit.If the conversion causes a heap allocation each time it is performed, then it shouldn't be implicit. Which is interesting - Vogen wouldn't throw an InvalidCastException (only an ValueObjectValidationException). Also, for structs, we wouldn't create a heap allocation. But since users of Vogen can declare a Value Object as a class or struct, then we wouldn't want implicit operators (from primitive =&gt; ValueObject) for just structs and not classes. Can you opt-in to implicit conversions?​ No, but you can provide them yourself. For certain types it would allow a much more natural way of expressing, er, expressions. Although it can be confusing. Let's say there's a type like this (and imagine that there's implicit conversions to Age and to int'): [ValueObject(typeof(int))] public readonly partial struct Age { public static Validation Validate(int n) =&gt; n &gt;= 0 ? Validation.Ok : Validation.Invalid(&quot;Must be zero or more&quot;); } That says that Age instances can never be negative. So you would probably expect the following to throw, but it doesn't: var age20 = Age.From(20); var age10 = age20 / 2; ++age10; age10 -= 12; // bang - goes negative?? The implicit cast in var age10 = age20 / 2 results in an int and not an Age. Changing it to Age age10 = age20 / 2 fixes it. But this does go to show that it can be confusing. Why is there no interface?​ If I'm using a library that uses Vogen, I'd like to easily tell if the type is just a primitive wrapper or not by the fact that it implements an interface, such as IValidated&lt;T&gt; Just like primitives have no interfaces, there's no need to have interfaces on Value Objects. The receiver that takes a CustomerId knows that it's a Value Object. If it were instead to take an IValidated&lt;int&gt;, then it wouldn't have any more information; you'd still have to know to call Value to get the value. It might also relax type safety. Without the interface, we have signatures such as this: public void SomSomething(CustomerId customerId, SupplierId supplierId, ProductId productId); ... but with the interface, we could have signatures such as this: public void SomSomething(IValidate&lt;int&gt; customerId, IValidated&lt;int&gt; supplierId, IValidated&lt;int&gt; productId); So, callers could mess things up by calling DoSomething(productId, supplierId, customerId)) There would also be no need to know if it's validated, as, if it's in your domain, it's valid (there's no way to manually create invalid instances). And with that said, there would also be no point in exposing the 'Validate' method via the interface because validation is done at creation. Can I represent special values​ Yes. You might want to represent special values for things like invalid or unspecified instances, e.g. /* * Instances are the only way to avoid validation, so we can create instances * that nobody else can. This is useful for creating special instances * that represent concepts such as 'invalid' and 'unspecified'. */ [ValueObject] [Instance(&quot;Unspecified&quot;, -1)] [Instance(&quot;Invalid&quot;, -2)] public readonly partial struct Age { private static Validation Validate(int value) =&gt; value &gt; 0 ? Validation.Ok : Validation.Invalid(&quot;Must be greater than zero.&quot;); } You can then use default values when using these types, e.g. public class Person { public Age Age { get; set; } = Age.Unspecified } ... and if you take an Age, you can compare it to an instance that is invalid/unspecified public void CanEnter(Age age) { if(age == Age.Unspecified || age == Age.Invalid) throw CannotEnterException(&quot;Name not specified or is invalid&quot;) return age &lt; 17; } Can I normalize the value when a VO is created?​ I'd like normalize/sanitize the values used, for example, trimming the input. Is this possible? Yes, add NormalizeInput method, e.g. private static string NormalizeInput(string input) =&gt; input.Trim(); See wiki for more information. Can I create custom Value Object attributes with my own defaults?​ Yes, but (at the moment) it requires that you put your defaults in your attribute's constructor - not in the call to the base class' constructor (see this comment). public class CustomValueObjectAttribute : ValueObjectAttribute&lt;long&gt; { // This attribute will default to having both the default conversions and EF Core type conversions public CustomValueObjectAttribute(Conversions conversions = Conversions.Default | Conversions.EfCoreValueConverter) { } } NOTE: custom attributes must extend a ValueObjectAttribute class; you cannot layer custom attributes on top of each other Why isn't this concept part of the C# language?​ It would be great if it was, but it's not currently. I wrote an article about it, but in summary, there is a long-standing language proposal focusing on non-defaultable value types. Having non-defaultable value types is a great first step, but it would also be handy to have something in the language to enforce validate. So I added a language proposal for invariant records. One of the responses in the proposal says that the language team decided that validation policies should not be part of C#, but provided by source generators. How do I run the benchmarks?​ dotnet run -c Release -- --job short --framework net6.0 --filter * Why do I get a build a build error when running .\\Build.ps1?​ You might see this: .\\Build.ps1 : File C:\\Build.ps1 cannot be loaded. The file C:\\Build.ps1 is not digitally signed. You cannot run this script on the current system. To get around this, run `Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass What alternatives are there?​ StronglyTypedIdThis is focused more on IDs. Vogen is focused more of 'Domain Concepts' and the constraints associated with those concepts. StringlyTypedThis is my first attempt and is NON source-generated. There is memory overhead because the base type is a class. There are also no analyzers. It is now marked as deprecated in favor of Vogen. ValueOfSimilar to StringlyTyped - non source-generated and no analysers. This is also more relaxed and allows composite 'underlying' types. ValueObjectGeneratorSimilar to Vogen, but less focused on validation and no code analyzer. What primitive types are supported?​ Any type can be wrapped. Serialisation and type conversions have implementations for: string int long short byte float (Single) decimal double DateTime DateOnly TimeOnly DateTimeOffset Guid bool For other types, a generic type conversion and serializer is applied. If you are supplying your own converters for type conversion and serialization, then specify None for converters and decorate your type with attributes for your own types, e.g. [ValueObject(typeof(SpecialPrimitive), conversions: Conversions.None)] [System.Text.Json.Serialization.JsonConverter(typeof(SpecialPrimitiveJsonConverter))] [System.ComponentModel.TypeConverter(typeof(SpecialPrimitiveTypeConverter))] public partial struct SpecialMeasurement { } I've done a change that means the 'Snapshot' tests are expectedly failing in the build - what do I do?​ Vogen uses a combination of unit tests, in-memory compilation tests, and snapshot tests. The snapshot tests are used to compare the output of the source generators to the expected output stored on disk. If your feature/fix changes the output of the source generators, then running the snapshot tests will bring up your configured code diff tool, for instance, Beyond Compare, to show the differences. You can accept the differences in that tool, or, if there's a lot of differences (and they're all expected!), you have various options depending on your platform and tooling. Those are described here. NOTE: If the change to the source generators expectedly changes the majority of the snapshot tests, then you can tell the snapshot runner to overwrite the expected files with the actual files that are generated. To do this, run Build.ps1 -resetSnapshots $true. This deletes all snaphsot folders under the tests folder and treats everything that's generated as the new baseline for future comparisons. This will mean that there are potentially thousands of changed files that will end up in the commit, but it's expected and unavoidable. How do I debug the source generator?​ The easiest way is to debug the SnapshotTests. Put a breakpoint in the code, and then just debug a test somewhere. To debug an analyzer, select or write a test in the AnalyzerTests. There are tests that exercise the various analyzers and code-fixers. How do I run the tests that actually use the source generator?​ It is difficult to run tests that use the source generator in the same project as the source generator, so there is a separate solution for this. It's called Consumers.sln. What happens is that build.ps1 builds the generator, runs the tests, and creates the NuGet package in a private local folder. The package is version 999.9.xxx and the consumer references the latest version. The consumer can then really use the source generator, just like anything else. Note: if you don't want to run the lengthy snapshot tests when building the local nuget package, run .\\Build.ps1 -v &quot;minimal&quot; -skiptests $true Can I get it to throw my own exception?​ Yes, by specifying the exception type in either the ValueObject attribute, or globally, with VogenConfiguration. I get an error from Linq2DB when I use a ValueObject that wraps a TimeOnly saying that DateTime cannot be converted to TimeOnly - what should I do?​ Linq2DB 4.0 or greater supports DateOnly and TimeOnly. Vogen generates value converters for Linq2DB; for DateOnly, it just works, but for `TimeOnly, you need to add this to your application: MappingSchema.Default.SetConverter&lt;DateTime, TimeOnly&gt;(dt =&gt; TimeOnly.FromDateTime(dt)); Attribution​ I took a lot of inspiration from Andrew Lock's StronglyTypedId. I also got some great ideas from Gérald Barré's Meziantou.Analyzer  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#about","content":" note Transform values( e.g. int) into classes If you know what are ValueObject,that is one solution  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#example-source-csproj-source-files","content":" CSharp ProjectProgram.csPersonId.cs This is the CSharp Project that references Vogen &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Vogen&quot; Version=&quot;3.0.16&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  DemoVogen_PersonId.g.cs // ------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen) // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; // ------------------------------------------------------------------------------ // Suppress warnings about [Obsolete] member usage in generated code. #pragma warning disable CS0618 // Suppress warnings for 'Override methods on comparable types'. #pragma warning disable CA1036 // Suppress Error MA0097 : A class that implements IComparable&lt;T&gt; or IComparable should override comparison operators #pragma warning disable MA0097 // Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.' // The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations. #pragma warning disable CS8669 // Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member' #pragma warning disable CS1591 using Vogen; namespace DemoVogen { [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&quot;Vogen&quot;, &quot;3.0.0.0&quot;)] [global::System.Text.Json.Serialization.JsonConverter(typeof(PersonIdSystemTextJsonConverter))] [global::System.ComponentModel.TypeConverter(typeof(PersonIdTypeConverter))] [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(PersonIdDebugView))] [global::System.Diagnostics.DebuggerDisplayAttribute(&quot;Underlying type: System.Int32, Value = { _value }&quot;)] public partial struct PersonId : global::System.IEquatable&lt;PersonId&gt;, global::System.IEquatable&lt;System.Int32&gt; , global::System.IComparable&lt;PersonId&gt;, global::System.IComparable { #if DEBUG private readonly global::System.Diagnostics.StackTrace _stackTrace = null; #endif private readonly global::System.Boolean _isInitialized; private readonly System.Int32 _value; /// &lt;summary&gt; /// Gets the underlying &lt;see cref=&quot;System.Int32&quot; /&gt; value if set, otherwise a &lt;see cref=&quot;ValueObjectValidationException&quot; /&gt; is thrown. /// &lt;/summary&gt; public readonly System.Int32 Value { [global::System.Diagnostics.DebuggerStepThroughAttribute] get { EnsureInitialized(); return _value; } } [global::System.Diagnostics.DebuggerStepThroughAttribute] [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)] public PersonId() { #if DEBUG _stackTrace = new global::System.Diagnostics.StackTrace(); #endif _isInitialized = false; _value = default; } [global::System.Diagnostics.DebuggerStepThroughAttribute] private PersonId(System.Int32 value) { _value = value; _isInitialized = true; } /// &lt;summary&gt; /// Builds an instance from the provided underlying type. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The underlying type.&lt;/param&gt; /// &lt;returns&gt;An instance of this type.&lt;/returns&gt; public static PersonId From(System.Int32 value) { PersonId instance = new PersonId(value); return instance; } public static explicit operator PersonId(System.Int32 value) =&gt; From(value); public static explicit operator System.Int32(PersonId value) =&gt; value.Value; // only called internally when something has been deserialized into // its primitive type. private static PersonId Deserialize(System.Int32 value) { return new PersonId(value); } public readonly global::System.Boolean Equals(PersonId other) { // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals. // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type. if(!_isInitialized || !other._isInitialized) return false; return global::System.Collections.Generic.EqualityComparer&lt;System.Int32&gt;.Default.Equals(Value, other.Value); } public readonly global::System.Boolean Equals(System.Int32 primitive) =&gt; Value.Equals(primitive); public readonly override global::System.Boolean Equals(global::System.Object obj) { return obj is PersonId &amp;&amp; Equals((PersonId) obj); } public static global::System.Boolean operator ==(PersonId left, PersonId right) =&gt; Equals(left, right); public static global::System.Boolean operator !=(PersonId left, PersonId right) =&gt; !(left == right); public static global::System.Boolean operator ==(PersonId left, System.Int32 right) =&gt; Equals(left.Value, right); public static global::System.Boolean operator !=(PersonId left, System.Int32 right) =&gt; !Equals(left.Value, right); public static global::System.Boolean operator ==(System.Int32 left, PersonId right) =&gt; Equals(left, right.Value); public static global::System.Boolean operator !=(System.Int32 left, PersonId right) =&gt; !Equals(left, right.Value); public int CompareTo(PersonId other) =&gt; Value.CompareTo(other.Value); public int CompareTo(object other) { if(other == null) return 1; if(other is PersonId x) return CompareTo(x); throw new global::System.ArgumentException(&quot;Cannot compare to object as it is not of type PersonId&quot;, nameof(other)); } /// &lt;inheritdoc cref=&quot;int.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider?, out int)&quot;/&gt; /// &lt;summary&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The value created via the &lt;see cref=&quot;From&quot;/&gt; method. /// &lt;/returns&gt; /// &lt;exception cref=&quot;ValueObjectValidationException&quot;&gt;Thrown when the value can be parsed, but is not valid.&lt;/exception&gt; public static global::System.Boolean TryParse(global::System.ReadOnlySpan&lt;char&gt; s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif out PersonId result) { if(System.Int32.TryParse(s, style, provider, out var r)) { result = From(r); return true; } result = default; return false; } /// &lt;inheritdoc cref=&quot;int.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, out int)&quot;/&gt; /// &lt;summary&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The value created via the &lt;see cref=&quot;From&quot;/&gt; method. /// &lt;/returns&gt; /// &lt;exception cref=&quot;ValueObjectValidationException&quot;&gt;Thrown when the value can be parsed, but is not valid.&lt;/exception&gt; public static global::System.Boolean TryParse(global::System.ReadOnlySpan&lt;char&gt; s, global::System.IFormatProvider provider, #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif out PersonId result) { if(System.Int32.TryParse(s, provider, out var r)) { result = From(r); return true; } result = default; return false; } /// &lt;inheritdoc cref=&quot;int.TryParse(System.ReadOnlySpan{char}, out int)&quot;/&gt; /// &lt;summary&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The value created via the &lt;see cref=&quot;From&quot;/&gt; method. /// &lt;/returns&gt; /// &lt;exception cref=&quot;ValueObjectValidationException&quot;&gt;Thrown when the value can be parsed, but is not valid.&lt;/exception&gt; public static global::System.Boolean TryParse(global::System.ReadOnlySpan&lt;char&gt; s, #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif out PersonId result) { if(System.Int32.TryParse(s, out var r)) { result = From(r); return true; } result = default; return false; } /// &lt;inheritdoc cref=&quot;int.TryParse(string?, System.Globalization.NumberStyles, System.IFormatProvider?, out int)&quot;/&gt; /// &lt;summary&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The value created via the &lt;see cref=&quot;From&quot;/&gt; method. /// &lt;/returns&gt; /// &lt;exception cref=&quot;ValueObjectValidationException&quot;&gt;Thrown when the value can be parsed, but is not valid.&lt;/exception&gt; public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif out PersonId result) { if(System.Int32.TryParse(s, style, provider, out var r)) { result = From(r); return true; } result = default; return false; } /// &lt;inheritdoc cref=&quot;int.TryParse(string?, System.IFormatProvider?, out int)&quot;/&gt; /// &lt;summary&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The value created via the &lt;see cref=&quot;From&quot;/&gt; method. /// &lt;/returns&gt; /// &lt;exception cref=&quot;ValueObjectValidationException&quot;&gt;Thrown when the value can be parsed, but is not valid.&lt;/exception&gt; public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider, #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif out PersonId result) { if(System.Int32.TryParse(s, provider, out var r)) { result = From(r); return true; } result = default; return false; } /// &lt;inheritdoc cref=&quot;int.TryParse(string?, out int)&quot;/&gt; /// &lt;summary&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The value created via the &lt;see cref=&quot;From&quot;/&gt; method. /// &lt;/returns&gt; /// &lt;exception cref=&quot;ValueObjectValidationException&quot;&gt;Thrown when the value can be parsed, but is not valid.&lt;/exception&gt; public static global::System.Boolean TryParse(string s, #if NETCOREAPP3_0_OR_GREATER [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] #endif out PersonId result) { if(System.Int32.TryParse(s, out var r)) { result = From(r); return true; } result = default; return false; } public readonly override global::System.Int32 GetHashCode() =&gt; global::System.Collections.Generic.EqualityComparer&lt;System.Int32&gt;.Default.GetHashCode(_value); /// &lt;summary&gt;Returns the string representation of the underlying type&lt;/summary&gt; /// &lt;inheritdoc cref=&quot;System.Int32.ToString()&quot; /&gt; public readonly override global::System.String ToString() =&gt;_isInitialized ? Value.ToString() : &quot;[UNINITIALIZED]&quot;; private readonly void EnsureInitialized() { if (!_isInitialized) { #if DEBUG global::System.String message = &quot;Use of uninitialized Value Object at: &quot; + _stackTrace ?? &quot;&quot;; #else global::System.String message = &quot;Use of uninitialized Value Object.&quot;; #endif throw new global::Vogen.ValueObjectValidationException(message); } } class PersonIdSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter&lt;PersonId&gt; { public override PersonId Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) { return PersonId.Deserialize(reader.GetInt32()); } public override void Write(System.Text.Json.Utf8JsonWriter writer, PersonId value, global::System.Text.Json.JsonSerializerOptions options) { writer.WriteNumberValue(value.Value); } #if NET6_0_OR_GREATER public override PersonId ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) { return PersonId.Deserialize(global::System.Int32.Parse(reader.GetString(), global::System.Globalization.NumberStyles.Any, global::System.Globalization.CultureInfo.InvariantCulture)); } public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, PersonId value, global::System.Text.Json.JsonSerializerOptions options) { writer.WritePropertyName(value.Value.ToString(global::System.Globalization.CultureInfo.InvariantCulture)); } #endif } class PersonIdTypeConverter : global::System.ComponentModel.TypeConverter { public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType) { return sourceType == typeof(global::System.Int32) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType); } public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value) { return value switch { global::System.Int32 intValue =&gt; PersonId.Deserialize(intValue), global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) &amp;&amp; global::System.Int32.TryParse(stringValue, out var result) =&gt; PersonId.Deserialize(result), _ =&gt; base.ConvertFrom(context, culture, value), }; } public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType) { return sourceType == typeof(global::System.Int32) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType); } public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType) { if (value is PersonId idValue) { if (destinationType == typeof(global::System.Int32)) { return idValue.Value; } if (destinationType == typeof(global::System.String)) { return idValue.Value.ToString(); } } return base.ConvertTo(context, culture, value, destinationType); } } internal sealed class PersonIdDebugView { private readonly PersonId _t; PersonIdDebugView(PersonId t) { _t = t; } public global::System.Boolean IsInitialized =&gt; _t._isInitialized; public global::System.String UnderlyingType =&gt; &quot;System.Int32&quot;; public global::System.String Value =&gt; _t._isInitialized ? _t._value.ToString() : &quot;[not initialized]&quot; ; #if DEBUG public global::System.String CreatedWith =&gt; _t._stackTrace?.ToString() ?? &quot;the From method&quot;; #endif public global::System.String Conversions =&gt; @&quot;Default&quot;; } } }   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#download-example-net--c","content":" tip Download Example project Vogen   ","version":"Next","tagName":"h3"},{"title":"Share Vogen​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#share-vogen","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/Vogen  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"PrimitiveObsession\" has the following generators:​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#category-primitiveobsession-has-the-following-generators","content":" 1 DomainPrimitives  2 Strongly  3 StronglyTypedUid  4 UnitGenerator  5 Vogen  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"Vogen by Steve Dunn","url":"/RSCG_Examples/v2/docs/Vogen#see-category","content":" PrimitiveObsession ","version":"Next","tagName":"h3"},{"title":"WhatIAmDoing by Ignat Andrei","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/WhatIAmDoing","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#info","content":" info Name: WhatIAmDoing What I Am Doing - see what your software is doing. Add also RSCG_WhatIAmDoing_Common Author: Ignat Andrei NuGet:https://www.nuget.org/packages/RSCG_WhatIAmDoing/ https://www.nuget.org/packages/RSCG_WhatIAmDoing_Common/ You can find more details at https://github.com/ignatandrei/RSCG_WhatIAmDoing Source: https://github.com/ignatandrei/RSCG_WhatIAmDoing  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#original-readme","content":" note RSCG_WhatIAmDoing Instrument C# software on CI to find what the software is doing. Introduction Decide what you want to monitor ... and then monitor it. Example Packages​ Add the following into the csproj you want to be monitores &lt;ItemGroup&gt; &lt;!-- &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.Memory&quot; Version=&quot;8.0.0&quot; /&gt; --&gt; &lt;PackageReference Include=&quot;RSCG_WhatIAmDoing&quot; Version=&quot;8.2024.10201.735&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_WhatIAmDoing_Common&quot; Version=&quot;8.2024.10201.735&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);RSCG_InterceptorTemplate&lt;/InterceptorsPreviewNamespaces&gt; &lt;/PropertyGroup&gt; Code​ Intercept static methods​ Assume that you want to monitor all calls to System.Console //[ExposeClass(typeof(Encoding), nameof(Encoding.EncodingName))] //[InterceptStatic(&quot;System.IO.File.*ts&quot;)] //[InterceptStatic(&quot;System.IO.File.*&quot;)] [InterceptStatic(&quot;System.Console.*&quot;)] // regex //[InterceptStatic(&quot;WIAD_DemoConsole.Fib.*&quot;)] internal class InterceptorMethodStatic : InterceptorMethodStaticBase, IInterceptorMethodStatic { } Intercept instance methods​ Assume that you want to monitor all calls to any method of any instance of Person //[InterceptInstanceClass(typeof(Person),&quot;ame&quot;)] //[InterceptInstanceClass(typeof(Person), &quot;parat&quot;)] //[InterceptInstanceClass(typeof(Person), &quot;ncodi&quot;)] [InterceptInstanceClass(typeof(Person), &quot;.*&quot;)] //regex public class InterceptorMethodInstanceClass: InterceptorMethodInstanceClassBase, IInterceptorMethodInstanceClass { public InterceptorMethodInstanceClass() { } } See the results​ var data= CachingData.Methods().ToArray(); foreach (var item in data) { WriteLine($&quot;Method {item.typeAndMethodData.MethodName} from class {item.typeAndMethodData.TypeOfClass} Time: {item.StartedAtDate} state {item.State} &quot;); WriteLine($&quot; =&gt;Arguments: {item.ArgumentsAsString()}&quot;); if ((item.State &amp; AccumulatedStateMethod.HasResult) == AccumulatedStateMethod.HasResult) { WriteLine($&quot; =&gt;Result: {item.Result}&quot;); } } More details If you want to implement YOUR interception , implement the following interfaces IInterceptorMethodInstanceClass IInterceptorMethodStatic License MIT  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#about","content":" note Intercept any method in any project  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#example-source-csproj-source-files","content":" CSharp ProjectProgram.csInterceptorStatic.cs This is the CSharp Project that references WhatIAmDoing &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!-- &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.Memory&quot; Version=&quot;8.0.0&quot; /&gt; --&gt; &lt;PackageReference Include=&quot;RSCG_WhatIAmDoing&quot; Version=&quot;8.2024.10201.735&quot; /&gt; &lt;PackageReference Include=&quot;RSCG_WhatIAmDoing_Common&quot; Version=&quot;8.2024.10201.735&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;InterceptorsPreviewNamespaces&gt;$(InterceptorsPreviewNamespaces);RSCG_InterceptorTemplate&lt;/InterceptorsPreviewNamespaces&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  System.Console_WriteLine_1.csSystem.Console_WriteLine_2.csSystem.Console_WriteLine_3.csSystem.Console_WriteLine_4.cs #pragma warning disable CS1591 #pragma warning disable CS9113 namespace System.Runtime.CompilerServices{ [AttributeUsage(AttributeTargets.Method,AllowMultiple =true)] file class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute { } }//end namespace namespace RSCG_InterceptorTemplate{ static partial class SimpleIntercept { //replace code:Console.WriteLine(&quot;Hello, World!&quot;); //replace code:123456789!123456789!123456789!12345 [System.Runtime.CompilerServices.InterceptsLocation(@&quot;D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\WIAD\\src\\WIADDemo\\Program.cs&quot;, 3, 9)] //[System.Diagnostics.DebuggerStepThrough()] public static void Intercept__WriteLine_0 ( string? value ) { System.Collections.Generic.Dictionary&lt;string,string?&gt; valValues = new (){ };//end valValues System.Collections.Generic.Dictionary&lt;string,string?&gt; stringValues = new() { { &quot;value&quot;, value ?.ToString() } , };//end stringValues System.Collections.Generic.Dictionary&lt;string,string?&gt; expValues = new() { };//end exposeValues var x=WIADDemo.InterceptorMethodStatic .InterceptStaticMethodBefore( $$$&quot;&quot;&quot;&quot; {&quot;IsVoid&quot;:true,&quot;Tag&quot;:&quot;&quot;,&quot;MethodName&quot;:&quot;WriteLine&quot;,&quot;TypeOfClass&quot;:&quot;System.Console&quot;} &quot;&quot;&quot;&quot; ,valValues , stringValues , expValues ) ; try{ System.Console.WriteLine(value); WIADDemo.InterceptorMethodStatic .InterceptMethodAfterWithoutResult(x); } catch(System.Exception ex){ WIADDemo.InterceptorMethodStatic .InterceptMethodException(x,ex); throw; } finally{ WIADDemo.InterceptorMethodStatic .InterceptMethodFinally(x); } } }//end class }//namespace RSCG_InterceptorTemplate   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#download-example-net--c","content":" tip Download Example project WhatIAmDoing   ","version":"Next","tagName":"h3"},{"title":"Share WhatIAmDoing​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#share-whatiamdoing","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/WhatIAmDoing  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"AOP\" has the following generators:​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#category-aop-has-the-following-generators","content":" 1 WhatIAmDoing  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"WhatIAmDoing by Ignat Andrei","url":"/RSCG_Examples/v2/docs/WhatIAmDoing#see-category","content":" AOP ","version":"Next","tagName":"h3"},{"title":"TypedSignalR.Client by nenoNaninu","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#info","content":" info Name: TypedSignalR.Client C# Source Generator to create strongly typed SignalR Client. Author: nenoNaninu NuGet:https://www.nuget.org/packages/TypedSignalR.Client/ You can find more details at https://github.com/nenoNaninu/TypedSignalR.Client Source: https://github.com/nenoNaninu/TypedSignalR.Client  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#original-readme","content":" note TypedSignalR.Client C# Source Generator to create strongly typed SignalR clients. Table of Contents​ InstallWhy TypedSignalR.Client?APIUsage Client Cancellation Server Recommendation Sharing a ProjectClient Code Format Streaming SupportClient Results SupportCompile-Time Error SupportGenerated Source CodeRelated Work Install​ NuGet: TypedSignalR.Client dotnet add package Microsoft.AspNetCore.SignalR.Client dotnet add package TypedSignalR.Client Why TypedSignalR.Client?​ The ASP.NET Core SignalR C# client is not strongly typed. To call a Hub (server-side) method, we must specify the method defined in Hub using a string. We also have to determine the return type manually. Moreover, registering client methods called from a server also requires specifying the method name as a string, and we must set parameter types manually. // C# SignalR Client // without TypedSignalR.Client // Specify a hub method to invoke using string. await connection.InvokeAsync(&quot;HubMethod1&quot;); // Manually determine a return type. // Parameters are cast to object type. var guid = await connection.InvokeAsync&lt;Guid&gt;(&quot;HubMethod2&quot;, &quot;message&quot;, 99); // Registering a client method requires a string, and parameter types must be set manually. var subscription = connection.On&lt;string, DateTime&gt;(&quot;ClientMethod&quot;, (message, dateTime) =&gt; {}); These are very painful and cause bugs easily. Moreover, if we change the code on the server-side, the modification on the client-side becomes very troublesome. The leading cause of the problems is that they are not strongly typed. TypedSignalR.Client aims to generate strongly typed SignalR clients using interfaces in which the server and client methods are defined. Defining interfaces is helpful not only for the client-side but also for the server-side. See Usage section for details. // C# SignalR Client // with TypedSignalR.Client // First, create a hub proxy. IHub hubProxy = connection.CreateHubProxy&lt;IHub&gt;(); // Invoke a hub method through hub proxy. // We no longer need to specify the method using a string. await hubProxy.HubMethod1(); // Both parameters and return types are strongly typed. var guid = await hubProxy.HubMethod2(&quot;message&quot;, 99); // Client method registration is also strongly typed, so it's safe and easy. var subscription = connection.Register&lt;IReceiver&gt;(new Receiver()); // Defining interfaces are useful not only for the client-side but also for the server-side. // See Usage in this README.md for details. interface IHub { Task HubMethod1(); Task&lt;Guid&gt; HubMethod2(string message, int value); } interface IReceiver { Task ClientMethod(string message, DateTime dateTime); } class Receiver : IReceiver { // implementation } API​ This Source Generator provides two extension methods and one interface. static class HubConnectionExtensions { THub CreateHubProxy&lt;THub&gt;(this HubConnection connection, CancellationToken cancellationToken = default){...} IDisposable Register&lt;TReceiver&gt;(this HubConnection connection, TReceiver receiver){...} } // An interface for observing SignalR events. interface IHubConnectionObserver { Task OnClosed(Exception? exception); Task OnReconnected(string? connectionId); Task OnReconnecting(Exception? exception); } Use it as follows. HubConnection connection = ...; IHub hub = connection.CreateHubProxy&lt;IHub&gt;(); IDisposable subscription = connection.Register&lt;IReceiver&gt;(new Receiver()); Usage​ For example, we have the following interface defined. public class UserDefinedType { public Guid Id { get; set; } public DateTime Datetime { get; set; } } // The return type of methods on the client-side must be Task. public interface IClientContract { // Of course, user defined type is OK. Task ClientMethod1(string user, string message, UserDefinedType userDefine); Task ClientMethod2(); } // The return type of methods on the hub-side must be Task or Task&lt;T&gt;. public interface IHubContract { Task&lt;string&gt; HubMethod1(string user, string message); Task HubMethod2(); } class Receiver1 : IClientContract { // implementation } class Receiver2 : IClientContract, IHubConnectionObserver { // implementation } Client​ It's very easy to use. HubConnection connection = ...; var hub = connection.CreateHubProxy&lt;IHubContract&gt;(); var subscription1 = connection.Register&lt;IClientContract&gt;(new Receiver1()); // When an instance of a class that implements IHubConnectionObserver is registered (Receiver2 in this case), // the method defined in IHubConnectionObserver is automatically registered regardless of the type argument. var subscription2 = connection.Register&lt;IClientContract&gt;(new Receiver2()); // Invoke hub methods hub.HubMethod1(&quot;user&quot;, &quot;message&quot;); // Unregister the receiver subscription.Dispose(); Cancellation​ In ASP.NET Core SignalR, CancellationToken is passed for each invoke. On the other hand, in TypedSignalR.Client, CancellationToken is passed only once when creating a hub proxy. The passed CancelationToken will be used for each invoke internally. var cts = new CancellationTokenSource(); // The following two are equivalent. // 1: ASP.NET Core SignalR Client var ret = await connection.InvokeAsync&lt;string&gt;(&quot;HubMethod1&quot;, &quot;user&quot;, &quot;message&quot;, cts.Token); await connection.InvokeAsync(&quot;HubMethod2&quot;, cts.Token); // 2: TypedSignalR.Client var hubProxy = connection.CreateHubProxy&lt;IHubContract&gt;(cts.Token); var ret = await hubProxy.HubMethod1(&quot;user&quot;, &quot;message&quot;); await hubProxy.HubMethod2(); Server​ Using the interface definitions, we can write as follows on the server-side (ASP.NET Core). TypedSignalR.Client is not necessary. using Microsoft.AspNetCore.SignalR; public class SomeHub : Hub&lt;IClientContract&gt;, IHubContract { public async Task&lt;string&gt; HubMethod1(string user, string message) { var instance = new UserDefinedType() { Id = Guid.NewGuid(), DateTime = DateTime.Now, }; // broadcast await this.Clients.All.ClientMethod1(user, message, instance); return &quot;OK!&quot;; } public async Task HubMethod2() { await this.Clients.Caller.ClientMethod2(); } } Recommendation​ Sharing a Project​ I recommend that these interfaces be shared between the client-side and server-side project, for example, by project references. server.csproj --&gt; shared.csproj &lt;-- client.csproj Client Code Format​ It is easier to handle if we write client code in the following format. class Client : IReceiver, IHubConnectionObserver, IDisposable { private readonly IHub _hubProxy; private readonly IDisposable _subscription; private readonly CancellationTokenSource _cancellationTokenSource = new(); public Client(HubConnection connection) { _hubProxy = connection.CreateHubProxy&lt;IHub&gt;(_cancellationTokenSource.Token); _subscription = connection.Register&lt;IReceiver&gt;(this); } // implementation } Streaming Support​ SignalR supports both server-to-client streaming and client-to-server streaming. TypedSignalR.Client supports both server-to-client streaming and client-to-server streaming. If you use IAsyncEnumerable&lt;T&gt;, Task&lt;IAsyncEnumerable&lt;T&gt;&gt;, or Task&lt;ChannelReader&lt;T&gt;&gt; for the method return type, it is analyzed as server-to-client streaming. And if IAsyncEnumerable&lt;T&gt; or ChannelReader&lt;T&gt; is used in the method parameter, it is analyzed as client-to-server streaming. When using server-to-client streaming, a single CancellationToken can be used as a method parameter (Note: CancellationToken cannot be used as a parameter except for server-to-client streaming). Client Results Support​ .NET 7 and later, you can use client results. TypedSignalR.Client supports client results. If you use Task&lt;T&gt; for the method return type in the receiver interface, you can use client results. Compile-Time Error Support​ This library has some restrictions, including those that come from server-side implementations. Type argument of the CreateHubProxy/Register method must be an interface.Only method definitions are allowed in the interface used for CreateHubProxy/Register. It is forbidden to define properties and events. The return type of the method in the interface used for CreateHubProxy must be Task or Task&lt;T&gt;.The return type of the method in the interface used for Register must be Task. It is complicated for humans to comply with these restrictions properly. So, this library looks for parts that do not follow the restriction and report detailed errors at compile time. Therefore, no runtime error occurs. Generated Source Code​ TypedSignalR.Client checks the type argument of a methods CreateHubProxy and Register and generates source code. Generated source code can be seen in Visual Studio. Related Work​ nenoNaninu/TypedSignalR.Client.TypeScript TypeScript source generator to provide strongly typed SignalR clients by analyzing C# type definitions. nenoNaninu/TypedSignalR.Client.DevTools SignalR development tools inspired by SwaggerUI. nenoNaninu/AspNetCore.SignalR.OpenTelemetry SignalR instrumentation library for OpenTelemetry.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#about","content":" note Creating typed Signal R clients  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references TypedSignalR.Client &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;Microsoft.AspNetCore.SignalR.Client&quot; Version=&quot;6.0.1&quot; /&gt; &lt;PackageReference Include=&quot;TypedSignalR.Client&quot; Version=&quot;3.6.0&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;ProjectReference Include=&quot;..\\TestSignalRCommon\\TestSignalRCommon.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  TypedSignalR.Client.Components.Generated.csTypedSignalR.Client.HubConnectionExtensions.Binder.Generated.csTypedSignalR.Client.HubConnectionExtensions.Generated.csTypedSignalR.Client.HubConnectionExtensions.HubInvoker.Generated.cs // &lt;auto-generated&gt; // THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client // &lt;/auto-generated&gt; #nullable enable #pragma warning disable CS1591 namespace TypedSignalR.Client { internal interface IHubConnectionObserver { global::System.Threading.Tasks.Task OnClosed(global::System.Exception? exception); global::System.Threading.Tasks.Task OnReconnected(string? connectionId); global::System.Threading.Tasks.Task OnReconnecting(global::System.Exception? exception); } internal interface IHubInvoker { } internal interface IHubInvokerFactory { } internal interface IHubInvokerFactory&lt;out T&gt; : IHubInvokerFactory { T CreateHubInvoker(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken); } internal interface IReceiverBinder { } internal interface IReceiverBinder&lt;in T&gt; : IReceiverBinder { global::System.IDisposable Bind(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, T receiver); } } #pragma warning restore CS1591   ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#download-example-net--c","content":" tip Download Example project TypedSignalR.Client   ","version":"Next","tagName":"h3"},{"title":"Share TypedSignalR.Client​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#share-typedsignalrclient","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/TypedSignalR.Client  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"SignalR\" has the following generators:​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#category-signalr-has-the-following-generators","content":" 1 TypedSignalR.Client  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"TypedSignalR.Client by nenoNaninu","url":"/RSCG_Examples/v2/docs/TypedSignalR.Client#see-category","content":" SignalR ","version":"Next","tagName":"h3"},{"title":"zlinq by Cysharp - subsidiary of Cygames","type":0,"sectionRef":"#","url":"/RSCG_Examples/v2/docs/zlinq","content":"","keywords":"","version":"Next"},{"title":"NuGet / site data​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#nuget--site-data","content":"   ","version":"Next","tagName":"h2"},{"title":"Details​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#details","content":" ","version":"Next","tagName":"h2"},{"title":"Info​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#info","content":" info Name: zlinq DropIn replacement Source Generator for ZLinq. Author: Cysharp - subsidiary of Cygames NuGet:https://www.nuget.org/packages/ZLinq.DropInGenerator/ https://www.nuget.org/packages/ZLinq/ You can find more details at https://neuecc.medium.com/zlinq-a-zero-allocation-linq-library-for-net-1bb0a3e5c749 Source: https://github.com/Cysharp/ZLinq  ","version":"Next","tagName":"h3"},{"title":"Original Readme​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#original-readme","content":" note ZLinq Zero allocation LINQ with LINQ to Span, LINQ to SIMD, and LINQ to Tree (FileSystem, JSON, GameObject, etc.) for all .NET platforms(netstandard2.0, 2.1, net8, net9) and Unity, Godot. Unlike regular LINQ, ZLinq doesn't increase allocations when adding more method chains, and it also has higher basic performance. You can check various benchmark patterns at GitHub Actions/Benchmark. ZLinq shows high performance in almost all patterns, with some benchmarks showing overwhelming differences. As a bonus, LINQ operators and optimizations equivalent to .NET 10 can be used in .NET Framework 4.8 (netstandard2.0) and Unity (netstandard2.1). dotnet add package ZLinq using ZLinq; var seq = source .AsValueEnumerable() // only add this line .Where(x =&gt; x % 2 == 0) .Select(x =&gt; x * 3); foreach (var item in seq) { } 99% compatibility with .NET 10's LINQ (including new Shuffle, RightJoin, LeftJoin operators)Zero allocation for method chains through struct-based Enumerable via ValueEnumerableLINQ to Span to full support LINQ operations on Span&lt;T&gt; using .NET 9/C# 13's allows ref structLINQ to Tree to extend tree-structured objects (built-in support for FileSystem, JSON, GameObject)LINQ to SIMD to automatic application of SIMD where possible and customizable arbitrary operationsOptional Drop-in replacement Source Generator to automatically accelerate all LINQ methods In ZLinq, we have proven high compatibility and performance by running dotnet/runtime's System.Linq.Tests as a drop-in replacement, passing 9000 tests. Previously, value type-based LINQ implementations were often experimental, but ZLinq fully implements all methods to completely replace standard LINQ in production use, delivering high performance suitable even for demanding applications like games. The performance aspects are based on my experience with previous LINQ implementations (linq.js, SimdLinq, UniRx, R3), zero-allocation implementations (ZString, ZLogger), and high-performance serializers (MessagePack-CSharp, MemoryPack). ZLinq achieves zero-allocation LINQ implementation using the following structs and interfaces. public readonly ref struct ValueEnumerable&lt;TEnumerator, T&gt;(TEnumerator enumerator) where TEnumerator : struct, IValueEnumerator&lt;T&gt;, allows ref struct { public readonly TEnumerator Enumerator = enumerator; } public interface IValueEnumerator&lt;T&gt; : IDisposable { bool TryGetNext(out T current); // as MoveNext + Current // Optimization helper bool TryGetNonEnumeratedCount(out int count); bool TryGetSpan(out ReadOnlySpan&lt;T&gt; span); bool TryCopyTo(scoped Span&lt;T&gt; destination, Index offset); } Besides changing to a struct-based approach, we've integrated MoveNext and Current to reduce the number of iterator calls. Also, some operators don't need to hold Current, which allows minimizing the struct size. Additionally, being struct-based, we efficiently separate internal state by copying the Enumerator instead of using GetEnumerator. With .NET 9/C# 13 or later, allows ref struct enables natural integration of Span&lt;T&gt; into LINQ. public static ValueEnumerable&lt;Where&lt;TEnumerator, TSource&gt;, TSource&gt; Where&lt;TEnumerator, TSource&gt;(this ValueEnumerable&lt;TEnumerator, TSource&gt; source, Func&lt;TSource, Boolean&gt; predicate) where TEnumerator : struct, IValueEnumerator&lt;TSource&gt;, allows ref struct Operators have this method signature. C# cannot infer types from generic constraints(dotnet/csharplang#6930). Therefore, the traditional Struct LINQ approach required implementing all operator combinations as instance methods, resulting in 100,000+ methods and massive assembly sizes. However, in ZLinq, we've successfully avoided all the boilerplate method implementations by devising an approach that properly conveys types to C# compiler. Additionally, TryGetNonEnumeratedCount(out int count), TryGetSpan(out ReadOnlySpan&lt;T&gt; span), and TryCopyTo(Span&lt;T&gt; destination, Index offset) defined in the interface itself enable flexible optimizations. To minimize assembly size, we've designed the library to achieve maximum optimization with minimal method additions. For example, TryCopyTo works efficiently with methods like ToArray when combined with TryGetNonEnumeratedCount. However, it also allows copying to smaller-sized destinations. By combining this with Index, we can optimize First, Last, and ElementAt using just TryCopyTo by passing a single-element Span along with an Index. If you're interested in architecture, please read my blog post &quot;ZLinq&quot;, a Zero-Allocation LINQ Library for .NET where I wrote the details. Getting Started​ You can install package from NuGet/ZLinq. For Unity usage, refer to the Unity section. For Godot usage, refer to the Godot section. dotnet add package ZLinq Use using ZLinq; and call AsValueEnumerable() on any iterable type to use ZLinq's zero-allocation LINQ. using ZLinq; var source = new int[] { 1, 2, 3, 4, 5 }; // Call AsValueEnumerable to apply ZLinq var seq1 = source.AsValueEnumerable().Where(x =&gt; x % 2 == 0); // Can also be applied to Span (only in .NET 9/C# 13 environments that support allows ref struct) Span&lt;int&gt; span = stackalloc int[5] { 1, 2, 3, 4, 5 }; var seq2 = span.AsValueEnumerable().Select(x =&gt; x * x); Even if it's netstandard 2.0 or below .NET 10, all operators up to .NET 10 are available. You can method chain and foreach like regular LINQ, but there are some limitations. Please see Difference and Limitation for details. ZLinq has drop-in replacements that apply ZLinq without needing to call AsValueEnumerable(). For more information, see Drop-in replacement. Detailed information about LINQ to Tree for LINQ-ifying tree structures (FileSystems and JSON) and LINQ to SIMD for expanding SIMD application range can be found in their respective sections. Additional Operators​ In ZLinq, we prioritize compatibility, so we try to minimize adding custom operators. However, the following methods have been added to enable efficient processing with zero allocation: AsValueEnumerable()​ Converts existing collections to a type that can be chained with ZLinq. Any IEnumerable&lt;T&gt; can be converted, but for the following types, conversion is done with zero allocation without IEnumerable&lt;T&gt;.GetEnumerator() allocation. Standard supported types are T[], List&lt;T&gt;, ArraySegment&lt;T&gt;, Memory&lt;T&gt;, ReadOnlyMemory&lt;T&gt;, ReadOnlySequence&lt;T&gt;, Dictionary&lt;TKey, TValue&gt;, Queue&lt;T&gt;, Stack&lt;T&gt;, LinkedList&lt;T&gt;, HashSet&lt;T&gt;, ImmutableArray&lt;T&gt;, Span&lt;T&gt;, ReadOnlySpan&lt;T&gt;. However, conversion from ImmutableArray&lt;T&gt; requires .NET 8 or higher, and conversion from Span&lt;T&gt;, ReadOnlySpan&lt;T&gt; requires .NET 9 or higher. When a type is declared as IEnumerable&lt;T&gt; or ICollection&lt;T&gt; rather than concrete types like T[] or List&lt;T&gt;, generally additional allocations occur when using foreach. In ZLinq, even when these interfaces are declared, if the actual type is T[] or List&lt;T&gt;, processing is performed with zero allocation. Convert from System.Collections.IEnumerable is also supported. In that case, using AsValueEnumerable() without specifying a type converts to ValueEnumerable&lt;, object&gt;, but you can also cast it simultaneously by AsValueEnumerable&lt;T&gt;(). IEnumerable nonGenericCollection = default!; nonGenericCollection.AsValueEnumerable(); // ValueEnumerable&lt;, object&gt; nonGenericCollection.AsValueEnumerable&lt;int&gt;(); // ValueEnumerable&lt;, int&gt; ValueEnumerable.Range(), ValueEnumerable.Repeat(), ValueEnumerable.Empty()​ ValueEnumerable.Range operates more efficiently when handling with ZLinq than Enumerable.Range().AsValueEnumerable(). The same applies to Repeat and Empty. The Range can also handle System.Range, step increments, IAdditionOperators&lt;T&gt;, DateTime, and more. Please refer to the Range section for details. Average() : where INumber&lt;T&gt;, Sum() : where INumber&lt;T&gt;​ System.Linq's Average and Sum are limited to certain primitive types, but ZLinq extends them to all INumber&lt;T&gt; types. In .NET 8 or higher, where constraints are included, but for others (netstandard2.0, 2.1), runtime errors will occur when called with non-primitive target types. SumUnchecked()​ Sum is checked, but checking for overflow during SIMD execution creates performance overhead. SumUnchecked skips overflow checking to achieve maximum SIMD aggregation performance. Note that this requires .NET 8 or higher, and SIMD-supported types are sbyte, short, int, long, byte, ushort, uint, ulong, double, and the source must be able to get a Span (TryGetSpan returns true). AggregateBy, CountBy constraints​ .NET 9 AggregateBy and CountBy has TKey : notnull constraints. However, this is due to internal implementation considerations, and it lacks consistency with traditional operators such as Lookup and Join. Therefore, in ZLinq, the notnull constraint was removed. int CopyTo(Span&lt;T&gt; destination), void CopyTo(List&lt;T&gt; list)​ CopyTo can be used to avoid allocation of the return collection unlike ToArray or ToList. int CopyTo(Span&lt;T&gt; destination) allows the destination to be smaller than the source, returning the number of elements copied. void CopyTo(List&lt;T&gt; list) clears the list and then fills it with elements from the source, so the destination size is list.Count. PooledArray&lt;TSource&gt; ToArrayPool()​ The returned array is rented from ArrayPool&lt;TSource&gt;.Shared. PooledArray&lt;TSource&gt; defines .Span, .Memory, .AsEnumerable() and other methods. These allow you to pass a ValueEnumerable to another method while minimizing allocations. Additionally, through .AsValueEnumerable(), you can call ZLinq methods, which is useful for temporarily materializing computationally expensive operations. Being IDisposable, you can return the borrowed array to ArrayPool&lt;TSource&gt;.Shared using the using statement. using var array = ValueEnumerable.Range(1, 1000).ToArrayPool(); var size = array.Size; // same as Length/Count in other types var span = array.Span; var memory = array.Memory; var arraySegment = array.ArraySegment; var enumerable = array.AsEnumerable(); var valueEnumerable = array.AsValueEnumerable(); For performance reasons to reduce allocations, PooledArray&lt;TSource&gt; is a struct. This creates a risk of returning the same array multiple times due to boxing or copying. Also, ArrayPool is not suitable for long-term array storage. It is recommended to simply use ToArrayPool() with using and keep the lifetime short. If you absolutely need the raw internal array, you can Deconstruct it to (T[] Array, int Size). After deconstructing, ownership is considered transferred, and all methods of PooledArray&lt;TSource&gt; become unavailable. JoinToString(char|string seperator)​ Since ZLinq is not IEnumerable&lt;T&gt;, it cannot be passed to String.Join. JoinToString provides the same functionality as String.Join, returning a string joined with the separator. Range​ Range is not only compatible with System.Linq's Range(int start, int count) but also has many additional overloads such as System.Range and DateTime. // 95, 96, 97, 98, 99 var range1 = ValueEnumerable.Range(95..100); // 95, 96, 97, 98, 99, 100 var range2 = ValueEnumerable.Range(95..100, RightBound.Inclusive); // 10, 12, 14, 16, 18 var step = ValueEnumerable.Range(start: 10, count: 5, step: 2); // 10, 9, 8, 7, 6 var reverse = ValueEnumerable.Range(start: 10, count: 5, step: -1); // 10, 9, 8, 7, 6, 5 var downTo = ValueEnumerable.Range(start: 10, end: 5, RightBound.Inclusive); // 0, 1,......... var infinite = ValueEnumerable.Range(..); // a, b, c,..., z var alphabets = ValueEnumerable.Range(start: 'a', end: 'z', RightBound.Inclusive); // 5/13, 5/14, 5/15, 5/16, 5/17, 5/18, 5/19 var daysOfweek = ValueEnumerable.Range(DateTime.Now, 7, TimeSpan.FromDays(1)); ; // 5/1, 5/2,...,5/31 var now = DateTime.Now; var calendarOfThisMonth = ValueEnumerable.Range(new DateTime(now.Year, now.Month, 1), DateTime.DaysInMonth(now.Year, now.Month), TimeSpan.FromDays(1)); Passing .. as Range creates an infinite stream. Range is Exclusive by default, but you can also run it as Inclusive by specifying RightBound.Inclusive/Exclusive. Also, in .NET 8 or later, it supports IAdditionOperators&lt;T&gt;, allowing you to generate not only int but also char, float, etc. In addition, it supports more generic generation with not only count but also T end specification and TStep step. It supports DateTime, DateTimeOffset + TimeSpan for all platforms. Unfortunately, DateTime and DateTimeOffset do not support Generic Math, but we have prepared our own implementation that provides functionality equivalent to IAdditionOperators&lt;T&gt; support. This makes it easy to generate date sequences. The complete list of Range APIs is as follows. public enum RightBound { Inclusive, Exclusive } public static partial class ValueEnumerable { public static ValueEnumerable&lt;FromRange, int&gt; Range(int start, int count) public static ValueEnumerable&lt;FromRange2, int&gt; Range(Range range, RightBound rightBound = RightBound.Exclusive) #if NET8_0_OR_GREATER public static ValueEnumerable&lt;FromRange&lt;T, T&gt;, T&gt; Range&lt;T&gt;(T start, int count) where T : INumberBase&lt;T&gt; public static ValueEnumerable&lt;FromRange&lt;T, TStep&gt;, T&gt; Range&lt;T, TStep&gt;(T start, int count, TStep step) where T : IAdditionOperators&lt;T, TStep, T&gt; public static ValueEnumerable&lt;FromRangeTo&lt;T, T&gt;, T&gt; Range&lt;T&gt;(T start, T end, RightBound rightBound) where T : INumberBase&lt;T&gt;, IComparisonOperators&lt;T, T, bool&gt; public static ValueEnumerable&lt;FromRangeTo&lt;T, TStep&gt;, T&gt; Range&lt;T, TStep&gt;(T start, T end, TStep step, RightBound rightBound) where T : IAdditionOperators&lt;T, TStep, T&gt;, IComparisonOperators&lt;T, T, bool&gt; #endif public static ValueEnumerable&lt;FromRangeDateTime, DateTime&gt; Range(DateTime start, int count, TimeSpan step) public static ValueEnumerable&lt;FromRangeDateTimeTo, DateTime&gt; Range(DateTime start, DateTime end, TimeSpan step, RightBound rightBound) public static ValueEnumerable&lt;FromRangeDateTimeOffset, DateTimeOffset&gt; Range(DateTimeOffset start, int count, TimeSpan step) public static ValueEnumerable&lt;FromRangeDateTimeOffsetTo, DateTimeOffset&gt; Range(DateTimeOffset start, DateTimeOffset end, TimeSpan step, RightBound rightBound) } Difference and Limitation​ For .NET 9 and above, ValueEnumerable&lt;T&gt; is a ref struct and cannot be converted to IEnumerable&lt;T&gt;. To ensure compatibility when upgrading, AsEnumerable is not provided by default even for versions prior to .NET 9. Since ValueEnumerable&lt;T&gt; is not an IEnumerable&lt;T&gt;, it cannot be passed to methods that require IEnumerable&lt;T&gt;. It's also difficult to pass it to other methods due to the complex type signatures required by generics (implementation is explained in the Custom Extensions section). Using ToArray() is one solution, but this can cause unnecessary allocations in some cases. For temporary use, you can call ToArrayPool to pass to methods that require IEnumerable&lt;T&gt; without allocations. However, be careful that this IEnumerable&lt;T&gt; will be returned within the using scope, so you must ensure it doesn't leak outside the scope (storing it in a field is not allowed). String.Join has overloads for both IEnumerable&lt;string&gt; and params object[]. Passing ValueEnumerable&lt;T&gt; directly will select the object[] overload, which may not give the desired result. In this case, use the JoinToString operator instead. ValueEnumerable&lt;T&gt; is a struct, and its size increases slightly with each method chain. With many chained methods, copy costs can become significant. When iterating over small collections, these copy costs can outweigh the benefits, causing performance to be worse than standard LINQ. However, this is only an issue with extremely long method chains and small iteration counts, so it's rarely a practical concern. ValueEnumerable&lt;T&gt; is ref struct in .NET 9 or above, this means that it cannot span across yield or await. Using yield or await inside foreach also fails and shows compilation errors. If enumeration is needed, please materialize the data using methods like ToArrayPool. Each chain operation returns a different type, so you cannot reassign to the same variable. For example, code that continuously reassigns Concat in a for loop cannot be implemented. In .NET 8 and above, the Sum and Average methods for double use SIMD processing, which performs parallel processing based on SIMD width. This results in calculation errors that differ from normal ones due to the different order of addition. Drop-in replacement​ When introducing ZLinq.DropInGenerator, you can automatically use ZLinq for all LINQ methods without calling AsValueEnumerable(). dotnet add package ZLinq.DropInGenerator It works by using a Source Generator to add extension methods for each type that take priority, making ZLinq methods be selected instead of System.Linq when the same name and arguments are used. After installing the package, you need to configure it with an assembly attribute. [assembly: ZLinq.ZLinqDropInAttribute(&quot;ZLinq&quot;, ZLinq.DropInGenerateTypes.Array)] generateNamespace is the namespace for the generated code, and DropInGenerateTypes selects the target types.DropInGenerateTypes allows you to choose from Array, Span (Span/ReadOnlySpan), Memory (Memory/ReadOnlyMemory), List, and Enumerable (IEnumerable). These are Flags, so you can combine them, such as DropInGenerateTypes.Array | DropInGenerateTypes.Span. There are also predefined combinations: Collection = Array | Span | Memory | List and Everything = Array | Span | Memory | List | Enumerable. When using DropInGenerateTypes.Enumerable, which generates extension methods for IEnumerable&lt;T&gt;, you need to make generateNamespace global as a namespace priority. For example: [assembly: ZLinq.ZLinqDropInAttribute(&quot;&quot;, ZLinq.DropInGenerateTypes.Everything)] This is the most aggressive configuration, causing all LINQ methods to be processed by ZLinq, and making it impossible to use normal LINQ methods (if Enumerable is not included, you can call AsEnumerable() to execute with System.Linq). It's better to use application's default namespace rather than globally, as this allows you to switch between normal LINQ using namespaces. This approach is recommended when you need to target Enumerable. using ZLinq; [assembly: ZLinqDropInAttribute(&quot;MyApp&quot;, DropInGenerateTypes.Everything)] // namespace under MyApp namespace MyApp.Foo { public class Bar { public static void Foo(IEnumerable&lt;int&gt; source) { // ZLinq ValueEnumerable&lt;T&gt; var seq = source.Select(x =&gt; x * 2).Shuffle(); using var e = seq.Enumerator; while (e.TryGetNext(out var current)) { Console.WriteLine(current); } } } } // not under MyApp namespace namespace NotMyApp { public class Baz { public static void Foo(IEnumerable&lt;int&gt; source) { // IEnumerable&lt;T&gt; var seq = source.Select(x =&gt; x * 2); // .Shuffle(); using var e = seq.GetEnumerator(); while (e.MoveNext()) { Console.WriteLine(e.Current); } } } } ZLinq is powerful and in many cases it performs better than regular LINQ, but it also has its limitations. For more information, please refer to Difference and Limitation. When you are not familiar with it, we recommend that you use DropInGenerateTypes.Collection instead of DropInGenerateTypes.Everything. Other options for ZLinqDropInAttribute include GenerateAsPublic, ConditionalCompilationSymbols, and DisableEmitSource. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)] public sealed class ZLinqDropInAttribute : Attribute { /// &lt;summary&gt; /// Gets the namespace where the generated LINQ implementations will be placed. /// If empty, the implementations will be generated in the global namespace. /// &lt;/summary&gt; public string GenerateNamespace { get; } /// &lt;summary&gt; /// Gets the types of collections for which LINQ implementations should be generated. /// &lt;/summary&gt; public DropInGenerateTypes DropInGenerateTypes { get; } /// &lt;summary&gt; /// Gets whether the generated LINQ implementations should be public. /// When true, the implementations will be generated with public visibility. /// When false (default), the implementations will be generated with internal visibility. /// &lt;/summary&gt; public bool GenerateAsPublic { get; set; } /// &lt;summary&gt; /// Gets or sets the conditional compilation symbols to wrap the generated code with #if directives. /// If specified, the generated code will be wrapped in #if/#endif directives using these symbols. /// &lt;/summary&gt; public string? ConditionalCompilationSymbols { get; set; } /// &lt;summary&gt; /// Gets or sets whether to disable source generation in emitted code. /// When true, the source code comments will not be included in the generated code. /// When false (default), source code comments will be included in the generated code. /// &lt;/summary&gt; public bool DisableEmitSource { get; set; } /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref=&quot;ZLinqDropInAttribute&quot;/&gt; class. /// &lt;/summary&gt; /// &lt;param name=&quot;generateNamespace&quot;&gt;The namespace where the generated LINQ implementations will be placed. If empty, place to global.&lt;/param&gt; /// &lt;param name=&quot;dropInGenerateTypes&quot;&gt;The types of collections for which LINQ implementations should be generated.&lt;/param&gt; public ZLinqDropInAttribute(string generateNamespace, DropInGenerateTypes dropInGenerateTypes) { GenerateNamespace = generateNamespace; DropInGenerateTypes = dropInGenerateTypes; } } To support DropIn types other than DropInGenerateTypes, you can use ZLinqDropInExternalExtensionAttribute. This attribute allows you to generate DropIn for any type by specifying its fully qualified name. For example, to add support for IReadOnlyCollection&lt;T&gt; and IReadOnlyList&lt;T&gt;, write: // T must be written as `1 (metadata-name). For nested types, connect with + [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;System.Collections.Generic.IReadOnlyCollection`1&quot;)] [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;System.Collections.Generic.IReadOnlyList`1&quot;)] For types that support IValueEnumerator&lt;T&gt; through AsValueEnumerable(), specify the ValueEnumerator type name as the second argument. For example, with ImmutableArray&lt;T&gt;: [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;System.Collections.Immutable.ImmutableArray`1&quot;, &quot;ZLinq.Linq.FromImmutableArray`1&quot;)] This allows all operators to be processed by ZLinq using an optimized type. If you want to make your custom collection types DropIn compatible, you can embed them in your assembly using [ZLinqDropInExtension]. [ZLinqDropInExtension] public class AddOnlyIntList : IEnumerable&lt;int&gt; { List&lt;int&gt; list = new List&lt;int&gt;(); public void Add(int x) =&gt; list.Add(x); public IEnumerator&lt;int&gt; GetEnumerator() =&gt; list.GetEnumerator(); IEnumerator IEnumerable.GetEnumerator() =&gt; list.GetEnumerator(); } This generates a public static partial class AddOnlyIntListZLinqDropInExtensions in the same namespace, overriding all LINQ operators with ZLinq. This works with generic types as well: [ZLinqDropInExtension] public class AddOnlyList&lt;T&gt; : IEnumerable&lt;T&gt; While [ZLinqDropInExtension] works with classes implementing IEnumerable&lt;T&gt;, implementing IValueEnumerable&lt;TEnumerator, T&gt; provides zero-allocation optimization for ZLinq: [ZLinqDropInExtension] public class AddOnlyIntList2 : IValueEnumerable&lt;AddOnlyIntList2.Enumerator, int&gt; { List&lt;int&gt; list = new List&lt;int&gt;(); public void Add(int x) =&gt; list.Add(x); public ValueEnumerable&lt;FromValueEnumerable&lt;Enumerator, int&gt;, int&gt; AsValueEnumerable() { // you need to write new(new(new())) magic. return new(new(new(list))); } // `public` struct enumerator public struct Enumerator(List&lt;int&gt; source) : IValueEnumerator&lt;int&gt; { int index; public bool TryGetNonEnumeratedCount(out int count) { count = source.Count; return true; } public bool TryGetSpan(out ReadOnlySpan&lt;int&gt; span) { span = CollectionsMarshal.AsSpan(source); return true; } public bool TryCopyTo(scoped Span&lt;int&gt; destination, Index offset) { // Optional path: if you can not write this, always return false is ok. ReadOnlySpan&lt;int&gt; span = CollectionsMarshal.AsSpan(source); if (ZLinq.Internal.EnumeratorHelper.TryGetSlice(span, offset, destination.Length, out var slice)) { slice.CopyTo(destination); return true; } return false; } public bool TryGetNext(out int current) { if (index &lt; source.Count) { current = source[index]; index++; return true; } current = default; return false; } public void Dispose() { } } } In this case, implementing IEnumerable&lt;T&gt; is not necessary. If a collection implements both IEnumerable&lt;T&gt; and IValueEnumerable&lt;TEnumerator, T&gt;, the latter takes precedence. LINQ to Tree​ LINQ to XML introduced the concept of querying around axes to C#. Even if you don't use XML, similar APIs are incorporated into Roslyn and effectively used for exploring SyntaxTrees. ZLinq extends this concept to make it applicable to anything that can be considered a Tree, allowing Ancestors, Children, Descendants, BeforeSelf, and AfterSelf to be applied. Specifically, by defining a struct that implements the following interface, it becomes iterable: public interface ITraverser&lt;TTraverser, T&gt; : IDisposable where TTraverser : struct, ITraverser&lt;TTraverser, T&gt; // self { T Origin { get; } TTraverser ConvertToTraverser(T next); // for Descendants bool TryGetHasChild(out bool hasChild); // optional: optimize use for Descendants bool TryGetChildCount(out int count); // optional: optimize use for Children bool TryGetParent(out T parent); // for Ancestors bool TryGetNextChild(out T child); // for Children | Descendants bool TryGetNextSibling(out T next); // for AfterSelf bool TryGetPreviousSibling(out T previous); // BeforeSelf } Standard packages are available for FileSystemInfo and JsonNode. For Unity, it's applicable to GameObject and Transform. FileSystem​ dotnet add package ZLinq.FileSystem using ZLinq; var root = new DirectoryInfo(&quot;C:\\\\Program Files (x86)\\\\Steam&quot;); // FileSystemInfo(FileInfo/DirectoryInfo) can call `Ancestors`, `Children`, `Descendants`, `BeforeSelf`, `AfterSelf` var allDlls = root .Descendants() .OfType&lt;FileInfo&gt;() .Where(x =&gt; x.Extension == &quot;.dll&quot;); var grouped = allDlls .GroupBy(x =&gt; x.Name) .Select(x =&gt; new { FileName = x.Key, Count = x.Count() }) .OrderByDescending(x =&gt; x.Count); foreach (var item in grouped) { Console.WriteLine(item); } JSON(System.Text.Json)​ dotnet add package ZLinq.Json using ZLinq; // System.Text.Json's JsonNode is the target of LINQ to JSON(not JsonDocument/JsonElement). var json = JsonNode.Parse(&quot;&quot;&quot; { &quot;nesting&quot;: { &quot;level1&quot;: { &quot;description&quot;: &quot;First level of nesting&quot;, &quot;value&quot;: 100, &quot;level2&quot;: { &quot;description&quot;: &quot;Second level of nesting&quot;, &quot;flags&quot;: [true, false, true], &quot;level3&quot;: { &quot;description&quot;: &quot;Third level of nesting&quot;, &quot;coordinates&quot;: { &quot;x&quot;: 10.5, &quot;y&quot;: 20.75, &quot;z&quot;: -5.0 }, &quot;level4&quot;: { &quot;description&quot;: &quot;Fourth level of nesting&quot;, &quot;metadata&quot;: { &quot;created&quot;: &quot;2025-02-15T14:30:00Z&quot;, &quot;modified&quot;: null, &quot;version&quot;: 2.1 }, &quot;level5&quot;: { &quot;description&quot;: &quot;Fifth level of nesting&quot;, &quot;settings&quot;: { &quot;enabled&quot;: true, &quot;threshold&quot;: 0.85, &quot;options&quot;: [&quot;fast&quot;, &quot;accurate&quot;, &quot;balanced&quot;], &quot;config&quot;: { &quot;timeout&quot;: 30000, &quot;retries&quot;: 3, &quot;deepSetting&quot;: { &quot;algorithm&quot;: &quot;advanced&quot;, &quot;parameters&quot;: [1, 1, 2, 3, 5, 8, 13] } } } } } } } } } } &quot;&quot;&quot;); // JsonNode var origin = json![&quot;nesting&quot;]![&quot;level1&quot;]![&quot;level2&quot;]!; // JsonNode axis, Children, Descendants, Anestors, BeforeSelf, AfterSelf and ***Self. foreach (var item in origin.Descendants().Select(x =&gt; x.Node).OfType&lt;JsonArray&gt;()) { // [true, false, true], [&quot;fast&quot;, &quot;accurate&quot;, &quot;balanced&quot;], [1, 1, 2, 3, 5, 8, 13] Console.WriteLine(item.ToJsonString(JsonSerializerOptions.Web)); } GameObject/Transform(Unity)​ see: unity section. LINQ to SIMD​ In .NET 8 and above, there are operators that apply SIMD when ValueEnumerable&lt;T&gt;.TryGetSpan returns true. The scope of application is wider than in regular System.Linq. Range to ToArray/ToList/CopyTo/etc...Repeat for unmanaged struct and size is power of 2 to ToArray/ToList/CopyTo/etc...Sum for sbyte, short, int, long, byte, ushort, uint, ulong, doubleSumUnchecked for sbyte, short, int, long, byte, ushort, uint, ulong, doubleAverage for sbyte, short, int, long, byte, ushort, uint, ulong, doubleMax for byte, sbyte, short, ushort, int, uint, long, ulong, nint, nuint, Int128, UInt128Min for byte, sbyte, short, ushort, int, uint, long, ulong, nint, nuint, Int128, UInt128Contains for byte, sbyte, short, ushort, int, uint, long, ulong, bool, char, nint, nuintSequenceEqual for byte, sbyte, short, ushort, int, uint, long, ulong, bool, char, nint, nuint Sum performs calculations as checked, but if you don't need to worry about overflow, using SumUnchecked is faster. Method\tN\tMean\tAllocatedForLoop\t16384\t25,198.556 ns\t- SystemLinqSum\t16384\t1,402.259 ns\t- ZLinqSum\t16384\t1,351.449 ns\t- ZLinqSumUnchecked\t16384\t721.832 ns\t- By using ZLinq.Simd in your using statements, you can call .AsVectorizable() on T[] or Span&lt;T&gt; or ReadOnlySpan&lt;T&gt;, which allows you to use Sum, SumUnchecked, Average, Max, Min, Contains, and SequenceEqual. This explicitly indicates execution with SIMD regardless of the LINQ chain state (though type checking is ambiguous so processing might occur in a normal loop, and if Vector.IsHardwareAccelerated &amp;&amp; Vector&lt;T&gt;.IsSupported is false, normal loop processing will be used). From int[] or Span&lt;int&gt;, you can call VectorizedFillRange. This is equivalent to ValueEunmerable.Range().CopyTo() and allows you to quickly generate sequential numbers through SIMD processing. Method\tMean\tAllocatedRange\t540.0 ns\t- For\t6,228.9 ns\t- VectorizedUpdate​ In ZLinq, you can perform relatively flexible vectorized loop processing using Func. With T[] and Span&lt;T&gt;, you can use the VectorizedUpdate method. By writing two lambda expressions - Func&lt;Vector&lt;T&gt;, Vector&lt;T&gt;&gt; vectorFunc for vector operations and Func&lt;T, T&gt; func for handling remainder elements - you can perform loop update processing at SIMD width. using ZLinq.Simd; // needs using int[] source = Enumerable.Range(0, 10000).ToArray(); [Benchmark] public void For() { for (int i = 0; i &lt; source.Length; i++) { source[i] = source[i] * 10; } } [Benchmark] public void VectorizedUpdate() { // arg1: Vector&lt;int&gt; =&gt; Vector&lt;int&gt; // arg2: int =&gt; int source.VectorizedUpdate(static x =&gt; x * 10, static x =&gt; x * 10); } Method\tN\tMean\tError\tStdDev\tAllocatedFor\t10000\t4,560.5 ns\t67.24 ns\t3.69 ns\t- VectorizedUpdate\t10000\t558.9 ns\t6.42 ns\t0.35 ns\t- There is delegate overhead when compared to writing everything inline, but processing can be faster than using for-loops. However, this varies case by case, so please take measurements in advance based on your data volume and method content. Of course, if you're seeking the best possible performance, you should write code inline. Vectorizable Methods​ You can convert from T[] or Span&lt;T&gt; or ReadOnlySpan&lt;T&gt; to Vectorizable&lt;T&gt; using AsVectorizable(), which allows you to use Aggregate, All, Any, Count, Select, and Zip methods that accept a Func as an argument. Aggregate source.AsVectorizable().Aggregate((x, y) =&gt; Vector.Min(x, y), (x, y) =&gt; Math.Min(x, y)) All source.AsVectorizable().All(x =&gt; Vector.GreaterThanAll(x, new(5000)), x =&gt; x &gt; 5000); Any source.AsVectorizable().Any(x =&gt; Vector.LessThanAll(x, new(5000)), x =&gt; x &lt; 5000); Count source.AsVectorizable().Count(x =&gt; Vector.GreaterThan(x, new(5000)), x =&gt; x &gt; 5000); Method\tMean\tError\tStdDev\tAllocatedVectorizableCount\t1,048.4 ns\t39.39 ns\t2.16 ns\t- LinqCount\t10,909.3 ns\t54.79 ns\t3.00 ns\t- Select -&gt; ToArray or CopyTo source.AsVectorizable().Select(x =&gt; x * 3, x =&gt; x * 3).ToArray(); source.AsVectorizable().Select(x =&gt; x * 3, x =&gt; x * 3).CopyTo(destination); Zip -&gt; ToArray or CopyTo // Zip2 array1.AsVectorizable().Zip(array2, (x, y) =&gt; x + y, (x, y) =&gt; x + y).CopyTo(destination); array1.AsVectorizable().Zip(array2, (x, y) =&gt; x + y, (x, y) =&gt; x + y).ToArray(); // Zip3 array1.AsVectorizable().Zip(array2, array3, (x, y, z) =&gt; x + y + z, (x, y, z) =&gt; x + y + z).CopyTo(destination); array1.AsVectorizable().Zip(array2, array3, (x, y, z) =&gt; x + y + z, (x, y, z) =&gt; x + y + z).ToArray(); Method\tMeanZLinqVectorizableZipCopyTo\t24.17 μs ZLinqVectorizableZip3CopyTo\t29.26 μs ZLinqZipCopyTo\t329.43 μs ZLinqZip3CopyTo\t584.69 μs Unity​ There are two installation steps required to use it in Unity. Install ZLinq from NuGet using NuGetForUnityOpen Window from NuGet -&gt; Manage NuGet Packages, Search &quot;ZLinq&quot; and Press Install. Install the ZLinq.Unity package by referencing the git URL https://github.com/Cysharp/ZLinq.git?path=src/ZLinq.Unity/Assets/ZLinq.Unity With the help of the Unity package, in addition to the standard ZLinq, LINQ to GameObject functionality becomes available for exploring GameObject/Transform. using ZLinq; public class SampleScript : MonoBehaviour { public Transform Origin; void Start() { Debug.Log(&quot;Ancestors--------------&quot;); // Container, Root foreach (var item in Origin.Ancestors()) Debug.Log(item.name); Debug.Log(&quot;Children--------------&quot;); // Sphere_A, Sphere_B, Group, Sphere_A, Sphere_B foreach (var item in Origin.Children()) Debug.Log(item.name); Debug.Log(&quot;Descendants--------------&quot;); // Sphere_A, Sphere_B, Group, P1, Group, Sphere_B, P2, Sphere_A, Sphere_B foreach (var item in Origin.Descendants()) Debug.Log(item.name); Debug.Log(&quot;BeforeSelf--------------&quot;); // C1, C2 foreach (var item in Origin.BeforeSelf()) Debug.Log(item.name); Debug.Log(&quot;AfterSelf--------------&quot;); // C3, C4 foreach (var item in Origin.AfterSelf()) Debug.Log(item.name); } } You can chain query(LINQ to Objects). Also, you can filter by component using the OfComponent&lt;T&gt; helper. // all filtered(tag == &quot;foobar&quot;) objects var foobars = root.Descendants().Where(x =&gt; x.tag == &quot;foobar&quot;); // get FooScript under self childer objects and self var fooScripts = root.ChildrenAndSelf().OfComponent&lt;FooScript&gt;(); UI Toolkit VisualElements are also supported allowing more advanced queries public class SampleScript : MonoBehaviour { private UIDocument Document; private void Start() { var noTextButtons = Document .rootVisualElement .Descendants() .OfType&lt;Button&gt;() .Where(btn =&gt; string.IsNullOrEmpty(btn.text)); foreach (var btn in noTextButtons) Debug.Log(btn.name); } } NOTE: In Unity, since .NET Standard 2.1 is referenced, SIMD is not utilized. In .NET 9, ValueEnumerable is a ref struct, so it cannot be converted to IEnumerable&lt;T&gt;. However, in Unity it's a regular struct, making it possible to convert to IEnumerable&lt;T&gt;. You can improve interoperability by preparing an extension method like this: public static class ZLinqExtensions { public static IEnumerable&lt;T&gt; AsEnumerable&lt;TEnumerator, T&gt;(this ValueEnumerable&lt;TEnumerator, T&gt; valueEnumerable) where TEnumerator : struct, IValueEnumerator&lt;T&gt; { using (var e = valueEnumerable.Enumerator) { while (e.TryGetNext(out var current)) { yield return current; } } } } In Unity, you can convert NativeArray, NativeSlice using AsEnumerable() to write queries with ZLinq. If Unity Collections(com.unity.collections) package version is 2.1.1 or above, NativeQueue, NativeHashSet, NativeText, FixedList32Bytes, FixedList64Bytes, FixedList128Bytes, FixedList512Bytes, FixedList4096Bytes, FixedString32Bytes, FixedString64Bytes, FixedString128Bytes, FixedString512Bytes, and FixedString4096Bytes support AsValueEnumerable(). You can also use drop-in replacement. Add ZLinq.DropInGenerator from NuGetForUnity. If you want to use DropInGenerator, the minimum supported Unity version will be 2022.3.12f1, as it is necessary to support C# Incremental Source Generator(Compiler Version, 4.3.0). Assembly attributes need to be set for each asmdef. For example, place a .cs file like the following in each asmdef. The DropInGenerator is defined in the assembly attributes. // AssemblyAttributes.cs using ZLinq; [assembly: ZLinqDropIn(&quot;MyApp&quot;, DropInGenerateTypes.Array | DropInGenerateTypes.List)] For more details about DropInGenerator, please refer to the Drop-in replacement section. To support Native Collections in addition to regular DropIn types, you can use ZLinqDropInExternalExtension as follows: [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;Unity.Collections.NativeArray`1&quot;, &quot;ZLinq.Linq.FromNativeArray`1&quot;)] [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;Unity.Collections.NativeArray`1+ReadOnly&quot;, &quot;ZLinq.Linq.FromNativeArray`1&quot;)] [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;Unity.Collections.NativeSlice`1&quot;, &quot;ZLinq.Linq.FromNativeSlice`1&quot;)] [assembly: ZLinqDropInExternalExtension(&quot;ZLinq&quot;, &quot;Unity.Collections.NativeList`1&quot;, &quot;ZLinq.Linq.FromNativeList`1&quot;)] This is not just about Unity, but using AsValueEnumerable() even if only for foreach on IEnumerable&lt;T&gt; can sometimes reduce allocations. If the actual implementation of IEnumerable&lt;T&gt; is a T[] or List&lt;T&gt;, ZLinq will process it appropriately without allocations. void IterateNormal(IEnumerable&lt;int&gt; source) { // Normally there's an allocation when getting IEnumerator&lt;T&gt;. foreach (var item in source) { } } void IterateZLinq(IEnumerable&lt;int&gt; source) { // Adding AsValueEnumerable results in 0 allocation. // However, zero alloc only works when the actual implementation of IEnumerable&lt;T&gt; is an array [] or List&lt;T&gt; foreach (var item in source.AsValueEnumerable()) { } } Godot​ The minimum supported Godot version will be 4.0.0. You can install ZLinq.Godot package via NuGet. dotnet add package ZLinq.Godot In addition to the standard ZLinq, LINQ to Node functionality is available. using Godot; using ZLinq; public partial class SampleScript : Node2D { public override void _Ready() { var origin = GetNode&lt;Node2D&gt;(&quot;Container/Origin&quot;); GD.Print(&quot;Ancestors--------------&quot;); // Container, Root, root (Root Window) foreach (var item in origin.Ancestors()) GD.Print(item.Name); GD.Print(&quot;Children--------------&quot;); // Sphere_A, Sphere_B, Group, Sphere_A, Sphere_B foreach (var item in origin.Children()) GD.Print(item.Name); GD.Print(&quot;Descendants--------------&quot;); // Sphere_A, Sphere_B, Group, P1, Group, Sphere_B, P2, Sphere_A, Sphere_B foreach (var item in origin.Descendants()) GD.Print(item.Name); GD.Print(&quot;BeforeSelf--------------&quot;); // C1, C2 foreach (var item in origin.BeforeSelf()) GD.Print(item.Name); GD.Print(&quot;AfterSelf--------------&quot;); // C3, C4 foreach (var item in origin.AfterSelf()) GD.Print(item.Name); } } You can chain query(LINQ to Objects). Also, you can filter by node type using the OfType(). // get ancestors under a Window var ancestors = root.Ancestors().TakeWhile(x =&gt; x is not Window); // get FooScript under self childer objects and self var fooScripts = root.ChildrenAndSelf().OfType&lt;FooScript&gt;(); Custom Extensions​ Implementing extension methods for IEnumerable&lt;T&gt; is common. There are two types of operators: consuming operators like Count and Sum, and chainable operators like Select and Where. This section explains how to implement them. Consume Operator​ The method signature is slightly more complex compared to IEnumerable&lt;T&gt;, requiring constraints on TEnumerator. For .NET 9 or later, allows ref struct is also needed. public static class MyExtensions { public static void Consume&lt;TEnumerator, TSource&gt;(this ValueEnumerable&lt;TEnumerator, TSource&gt; source) where TEnumerator : struct, IValueEnumerator&lt;TSource&gt; #if NET9_0_OR_GREATER , allows ref struct #endif { using var e = source.Enumerator; // using Enumerator while (e.TryGetNext(out var current)) // MoveNext + Current { } } } Instead of GetEnumerator(), use Enumerator, and instead of MoveNext + Current, use TryGetNext(out) to consume the iterator. The Enumerator must be used with using. Consumers can call the Enumerator's optimization methods: TryGetNonEnumeratedCount, TryGetSpan, and TryCopyTo. For example, getting a Span like this is faster than normal iteration with TryGetNext: public static class MyExtensions { public static void ForEach&lt;TEnumerator, TSource&gt;(this ValueEnumerable&lt;TEnumerator, TSource&gt; source, Action&lt;TSource&gt; action) where TEnumerator : struct, IValueEnumerator&lt;TSource&gt; #if NET9_0_OR_GREATER , allows ref struct #endif { using var e = source.Enumerator; if (e.TryGetSpan(out var span)) { // faster iteration foreach (var item in span) { action(item); } } else { while (e.TryGetNext(out var item)) { action(item); } } } public static ImmutableArray&lt;T&gt; ToImmutableArray&lt;TEnumerator, T&gt;(this ValueEnumerable&lt;TEnumerator, T&gt; source) where TEnumerator : struct, IValueEnumerator&lt;T&gt; #if NET9_0_OR_GREATER , allows ref struct #endif { using var e = source.Enumerator; if (e.TryGetSpan(out var span)) { return ImmutableArray.Create(span); } else { if (e.TryGetNonEnumeratedCount(out var count)) { var array = GC.AllocateUninitializedArray&lt;TSource&gt;(count); if (e.TryCopyTo(array, offset: 0)) { return ImmutableCollectionsMarshal.AsImmutableArray(array); } else { var i = 0; while (e.TryGetNext(out var current)) { array[i] = current; i++; } return ImmutableCollectionsMarshal.AsImmutableArray(array); } } else { var builder = ImmutableArray.CreateBuilder&lt;TSource&gt;(); while (e.TryGetNext(out var current)) { builder.Add(current); } return builder.ToImmutable(); } } } } Since the enumerator's state changes, you cannot call other methods after calling TryGetNext. Also, you cannot call TryGetNext after TryCopyTo or TryGetSpan returns true. Custom Operator​ Unlike IEnumerable&lt;T&gt;, you can't use yield return, so everything must be implemented by hand, making it more difficult than Consume operators. A simple Select implementation looks like this. For .NET 9 or later, IValueEnumerator&lt;T&gt; must be implemented as a ref struct. Also, the accessibility must be public or internal. public static class MyExtensions { public static ValueEnumerable&lt;SimpleSelect&lt;TEnumerator, TSource, TResult&gt;, TResult&gt; SimpleSelect&lt;TEnumerator, TSource, TResult&gt;(this ValueEnumerable&lt;TEnumerator, TSource&gt; source, Func&lt;TSource, TResult&gt; selector) where TEnumerator : struct, IValueEnumerator&lt;TSource&gt; #if NET9_0_OR_GREATER , allows ref struct #endif { // ValueEnumerable is only a wrapper so unwrapping to enumerator immediately is ok. // `new(new())` is `new ValueEnumerable(new SimpleSelect())`, wrap enumerator to ValueEnumerable. return new(new(source.Enumerator, selector)); } } #if NET9_0_OR_GREATER public ref struct #else public struct #endif SimpleSelect&lt;TEnumerator, TSource, TResult&gt;(TEnumerator source, Func&lt;TSource, TResult&gt; selector) : IValueEnumerator&lt;TResult&gt; where TEnumerator : struct, IValueEnumerator&lt;TSource&gt; #if NET9_0_OR_GREATER , allows ref struct #endif { TEnumerator source = source; // need to store source enumerator in field explicitly (ref struct limitation) // Having fields is allowed, but reference types must be null during initialization. // For example, if you hold a reference type in the constructor, it will be shared with other Enumerators and will not work correctly. public bool TryGetNonEnumeratedCount(out int count) { // If source count is not changed, return count. // Select count is same as source. return source.TryGetNonEnumeratedCount(out count); } public bool TryGetSpan(out ReadOnlySpan&lt;TResult&gt; span) { // For example, Take or Skip could return a Slice span = default; return false; } public bool TryCopyTo(scoped Span&lt;TResult&gt; destination, Index offset) { // TryCopyTo implementation needs to consider Index calculations, so it's quite complex. // Also, destination can be smaller than the source size. // Helper methods for calculations are available in ZLinq.Internal.EnumeratorHelper, // such as TryGetSliceRange, TryGetSlice, TryGetSliceRange, TryConsumeGetAt, etc. return false; } // This is the main body of the normal processing public bool TryGetNext(out TResult current) { while (source.TryGetNext(out var value)) { current = selector(value); return true; } current = default!; return false; } public void Dispose() { // Always dispose the source source.Dispose(); } } For TryGetNonEnumeratedCount, TryGetSpan, and TryCopyTo, it's fine to return false if implementation is difficult. If state is needed (for example, Take needs to keep track of the number of calls), place it in a field, but note that you should not initialize reference types or structs containing reference types in the constructor. This is because in method chains, Enumerators are passed by copy, so reference types would share references. If you need to hold reference types, they must be initialized when TryGetNext is first called. Acknowledgement​ Since the preview version release, we have received multiple ideas for fundamental interface revisions leading to performance improvements from @Akeit0, and test and benchmark infrastructure from @filzrev. We are grateful for their many contributions. License​ This library is under MIT License.  ","version":"Next","tagName":"h3"},{"title":"About​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#about","content":" note zero allocations for LINQ operations, high performance, functional programming  ","version":"Next","tagName":"h3"},{"title":"How to use​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#how-to-use","content":" ","version":"Next","tagName":"h2"},{"title":"Example (source csproj, source files)​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#example-source-csproj-source-files","content":" CSharp ProjectProgram.cs This is the CSharp Project that references zlinq &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ZLinq&quot; Version=&quot;1.4.8&quot; /&gt; &lt;PackageReference Include=&quot;ZLinq.DropInGenerator&quot; Version=&quot;1.4.8&quot;&gt; &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt; &lt;CompilerGeneratedFilesOutputPath&gt;$(BaseIntermediateOutputPath)\\GX&lt;/CompilerGeneratedFilesOutputPath&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt;   ","version":"Next","tagName":"h3"},{"title":"Generated Files​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#generated-files","content":" Those are taken from $(BaseIntermediateOutputPath)\\GX  ","version":"Next","tagName":"h3"},{"title":"Useful​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#useful","content":" ","version":"Next","tagName":"h2"},{"title":"Download Example (.NET C#)​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#download-example-net--c","content":" tip Download Example project zlinq   ","version":"Next","tagName":"h3"},{"title":"Share zlinq​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#share-zlinq","content":" Share on FacebookShare in TwitterShare on RedditShare on Linkedin  https://ignatandrei.github.io/RSCG_Examples/v2/docs/zlinq  aaa  ","version":"Next","tagName":"h3"},{"title":"Category \"Linq\" has the following generators:​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#category-linq-has-the-following-generators","content":" 1 zlinq  ","version":"Next","tagName":"h3"},{"title":"See category​","type":1,"pageTitle":"zlinq by Cysharp - subsidiary of Cygames","url":"/RSCG_Examples/v2/docs/zlinq#see-category","content":" Linq ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}