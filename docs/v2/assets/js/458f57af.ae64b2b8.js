"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2469],{669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>m,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>y});var a=n(7462),s=(n(7294),n(4137)),i=n(3992),l=n(425),o=n(8839);const r={sidebar_position:720,title:"72 - Meziantou.Polyfill",description:"Generating polyfills that you can see source without de-compiling",slug:"/Meziantou.Polyfill"},m="Meziantou.Polyfill  by G\xe9rald Barr\xe9",u={unversionedId:"RSCG-Examples/Meziantou.Polyfill",id:"RSCG-Examples/Meziantou.Polyfill",title:"72 - Meziantou.Polyfill",description:"Generating polyfills that you can see source without de-compiling",source:"@site/docs/RSCG-Examples/Meziantou.Polyfill.md",sourceDirName:"RSCG-Examples",slug:"/Meziantou.Polyfill",permalink:"/RSCG_Examples/v2/docs/Meziantou.Polyfill",draft:!1,tags:[],version:"current",sidebarPosition:720,frontMatter:{sidebar_position:720,title:"72 - Meziantou.Polyfill",description:"Generating polyfills that you can see source without de-compiling",slug:"/Meziantou.Polyfill"},sidebar:"tutorialSidebar",previous:{title:"71 - DisposableHelpers",permalink:"/RSCG_Examples/v2/docs/DisposableHelpers"},next:{title:"73 - IDisposableGenerator",permalink:"/RSCG_Examples/v2/docs/IDisposableGenerator"}},c={},y=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Meziantou.Polyfill",id:"share-meziantoupolyfill",level:3},{value:"In the same category (EnhancementClass)",id:"in-the-same-category-enhancementclass",level:2},{value:"ApparatusAOT",id:"apparatusaot",level:3},{value:"BuilderGenerator",id:"buildergenerator",level:3},{value:"FastGenericNew",id:"fastgenericnew",level:3},{value:"GeneratorEquals",id:"generatorequals",level:3},{value:"Immutype",id:"immutype",level:3},{value:"Lombok.NET",id:"lomboknet",level:3},{value:"M31.FluentAPI",id:"m31fluentapi",level:3},{value:"MemoryPack",id:"memorypack",level:3},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:3},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:3},{value:"Roozie.AutoInterface",id:"roozieautointerface",level:3},{value:"RSCG_Decorator",id:"rscg_decorator",level:3},{value:"RSCG_Static",id:"rscg_static",level:3},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:3},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:3},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:3}],p={toc:y},S="wrapper";function d(e){let{components:t,...r}=e;return(0,s.kt)(S,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"meziantoupolyfill--by-g\xe9rald-barr\xe9"},"Meziantou.Polyfill  by G\xe9rald Barr\xe9"),(0,s.kt)(o.Z,{toc:y,mdxType:"TOCInline"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Meziantou.Polyfill/"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Meziantou.Polyfill?label=Meziantou.Polyfill",alt:"Nuget"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/meziantou/Meziantou.Polyfill"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/meziantou/Meziantou.Polyfill?label=updated",alt:"GitHub last commit"})),"\n",(0,s.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/meziantou/Meziantou.Polyfill?style=social",alt:"GitHub Repo stars"})),(0,s.kt)("h2",{id:"details"},"Details"),(0,s.kt)("h3",{id:"info"},"Info"),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Name: ",(0,s.kt)("strong",{parentName:"p"},"Meziantou.Polyfill")),(0,s.kt)("p",{parentName:"admonition"},"Source Generator to help multi-targeting projects."),(0,s.kt)("p",{parentName:"admonition"},"Author: G\xe9rald Barr\xe9"),(0,s.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,s.kt)("em",{parentName:"p"},(0,s.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Meziantou.Polyfill/"},"https://www.nuget.org/packages/Meziantou.Polyfill/")),"   "),(0,s.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,s.kt)("a",{parentName:"p",href:"https://www.meziantou.net/polyfills-in-dotnet-to-ease-multi-targeting.htm"},"https://www.meziantou.net/polyfills-in-dotnet-to-ease-multi-targeting.htm")),(0,s.kt)("p",{parentName:"admonition"},"Source : ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/meziantou/Meziantou.Polyfill"},"https://github.com/meziantou/Meziantou.Polyfill"))),(0,s.kt)("h3",{id:"original-readme"},"Original Readme"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("h1",{parentName:"admonition",id:"meziantoupolyfill"},"Meziantou.Polyfill"),(0,s.kt)("p",{parentName:"admonition"},"Source Generator that adds polyfill methods and types. This helps working with multi-targeted projects."),(0,s.kt)("p",{parentName:"admonition"},"You can use the following MSBuild properties to configure which polyfills are generated:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<PropertyGroup>\n  \x3c!-- semi-column separated list of name prefix --\x3e\n  \x3c!-- Tip: The name of the generated polyfills are available in the generated "Debug.g.cs" file --\x3e\n  <MeziantouPolyfill_IncludedPolyfills>T:Type1|T:Type2|M:Member1</MeziantouPolyfill_IncludedPolyfills>\n  <MeziantouPolyfill_ExcludedPolyfills>M:System.Diagnostics.</MeziantouPolyfill_ExcludedPolyfills>\n\n  \x3c!-- Optional: Output the generated files to the obj\\GeneratedFiles folder  --\x3e\n  <EmitCompilerGeneratedFiles>True</EmitCompilerGeneratedFiles>\n  <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GeneratedFiles</CompilerGeneratedFilesOutputPath>\n</PropertyGroup>\n')),(0,s.kt)("h2",{parentName:"admonition",id:"how-to-add-a-new-polyfill"},"How to add a new polyfill"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Create a new file named ",(0,s.kt)("inlineCode",{parentName:"li"},"<xml documentation id>.cs")," in the project ",(0,s.kt)("inlineCode",{parentName:"li"},"Meziantou.Polyfill.Editor")),(0,s.kt)("li",{parentName:"ul"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"Meziantou.Polyfill.Generator"))),(0,s.kt)("p",{parentName:"admonition"},"Notes:"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"All files must be self contained. Use a ",(0,s.kt)("inlineCode",{parentName:"li"},"file class")," if needed."),(0,s.kt)("li",{parentName:"ul"},"If you need to generate a file only when another polyfill is generated, add ",(0,s.kt)("inlineCode",{parentName:"li"},"// when <xml documentation id>")," in the file"))),(0,s.kt)("h3",{id:"about"},"About"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Generating polyfills that you can see source without de-compiling ")),(0,s.kt)("h2",{id:"how-to-use"},"How to use"),(0,s.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,s.kt)("p",null,"This is the CSharp Project that references ",(0,s.kt)("strong",{parentName:"p"},"Meziantou.Polyfill")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {10}",showLineNumbers:!0,"{10}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFrameworks>net7.0;netstandard2.0</TargetFrameworks>\n      <LangVersion>latest</LangVersion>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Meziantou.Polyfill" Version="1.0.28">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n  </ItemGroup>\n\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,s.kt)(l.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Poly\\src\\Dm\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,s.kt)("p",null,"  This is the use of ",(0,s.kt)("strong",{parentName:"p"},"Meziantou.Polyfill")," in ",(0,s.kt)("em",{parentName:"p"},"Program.cs")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nSystem.Console.WriteLine("Hello, World!");\n\n'))),(0,s.kt)(l.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Poly\\src\\Dm\\StartProcess.cs",label:"StartProcess.cs",mdxType:"TabItem"},(0,s.kt)("p",null,"  This is the use of ",(0,s.kt)("strong",{parentName:"p"},"Meziantou.Polyfill")," in ",(0,s.kt)("em",{parentName:"p"},"StartProcess.cs")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using System.Diagnostics;\nusing System.Threading.Tasks;\n\nnamespace Meziantou.PolyfillDemo\n{\n\n    internal class StartProcess\n    {\n        static async Task StartNotepad()\n        {\n            await Task.Delay(1000);\n            var process = Process.Start("notepad.exe");\n\n#if NET6_0_OR_GREATER\n           await process.WaitForExitAsync();\n#else\n            process.WaitForExit();\n#endif\n            \n        }\n        static async Task StartNotepadPolyFill()\n        {\n            await Task.Delay(1000);\n            var process = Process.Start("notepad.exe");\n            //do remove nuget Meziantou.Polyfill - this line will not be ok.\n            await process.WaitForExitAsync();\n\n        }\n\n    }\n}\n')))),(0,s.kt)("h3",{id:"generated-files"},"Generated Files"),(0,s.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Poly\\src\\Dm\\obj\\GX\\Meziantou.Polyfill\\Meziantou.Polyfill.PolyfillGenerator\\Debug.g.cs",label:"Debug.g.cs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// IncludedMembers: <null>\n// ExcludedMembers: <null>\n// System.Collections.Immutable.ImmutableArray`1: True\n// System.Memory`1: True\n// System.Net.Http.HttpContent: True\n// System.ReadOnlyMemory`1: True\n// System.ReadOnlySpan`1: True\n// System.Span`1: True\n// System.Threading.Tasks.ValueTask: True\n// System.Threading.Tasks.ValueTask`1: True\n//\n// M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0): False\n// M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0): False\n// M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1): False\n// M:System.Collections.Generic.KeyValuePair`2.Deconstruct(`0@,`1@): False\n// M:System.Collections.Generic.Queue`1.TryDequeue(`0@): False\n// M:System.Collections.Immutable.ImmutableArray`1.AsSpan(System.Int32,System.Int32): False\n// M:System.Collections.Immutable.ImmutableArray`1.AsSpan(System.Range): False\n// M:System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken): False\n// M:System.IO.Stream.Read(System.Span{System.Byte}): False\n// M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken): False\n// M:System.IO.Stream.ReadAtLeast(System.Span{System.Byte},System.Int32,System.Boolean): False\n// M:System.IO.Stream.ReadAtLeastAsync(System.Memory{System.Byte},System.Int32,System.Boolean,System.Threading.CancellationToken): False\n// M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte}): False\n// M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken): False\n// M:System.IO.StreamReader.ReadLineAsync(): False\n// M:System.IO.StreamReader.ReadLineAsync(System.Threading.CancellationToken): False\n// M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken): False\n// M:System.IO.TextReader.ReadToEndAsync(System.Threading.CancellationToken): False\n// M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken): False\n// M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}): False\n// M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1}): False\n// M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}): False\n// M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1}): False\n// M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}): False\n// M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1}): False\n// M:System.Linq.Enumerable.OrderDescending``1(System.Collections.Generic.IEnumerable{``0}): False\n// M:System.Linq.Enumerable.OrderDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0}): False\n// M:System.Linq.Enumerable.Order``1(System.Collections.Generic.IEnumerable{``0}): False\n// M:System.Linq.Enumerable.Order``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0}): False\n// M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0}): False\n// M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0}): False\n// M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}): False\n// M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32): False\n// M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0): False\n// M:System.MemoryExtensions.Contains``1(System.Span{``0},``0): False\n// M:System.Net.Http.HttpContent.CopyTo(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken): False\n// M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream): False\n// M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext): False\n// M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken): False\n// M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken): False\n// M:System.Net.Http.HttpContent.ReadAsStream(System.Threading.CancellationToken): False\n// M:System.Net.Http.HttpContent.ReadAsStream: False\n// M:System.String.Contains(System.Char): False\n// M:System.String.Contains(System.Char,System.StringComparison): False\n// M:System.String.Contains(System.String,System.StringComparison): False\n// M:System.String.CopyTo(System.Span{System.Char}): False\n// M:System.String.EndsWith(System.Char): False\n// M:System.String.GetHashCode(System.StringComparison): False\n// M:System.String.IndexOf(System.Char,System.StringComparison): False\n// M:System.String.Replace(System.String,System.String,System.StringComparison): False\n// M:System.String.ReplaceLineEndings(System.String): False\n// M:System.String.ReplaceLineEndings: False\n// M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions): False\n// M:System.String.Split(System.Char,System.StringSplitOptions): False\n// M:System.String.StartsWith(System.Char): False\n// M:System.String.TryCopyTo(System.Span{System.Char}): False\n// M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte}): False\n// M:System.Text.StringBuilder.Append(System.ReadOnlyMemory{System.Char}): False\n// M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char}): False\n// M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[]): False\n// M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[]): False\n// M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[]): False\n// M:System.Text.StringBuilder.AppendJoin(System.String,System.String[]): False\n// M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0}): False\n// M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0}): False\n// M:System.Threading.CancellationTokenSource.CancelAsync: True\n// M:System.Threading.Tasks.Task.WaitAsync(System.Threading.CancellationToken): False\n// T:System.Collections.Generic.PriorityQueue`2: False\n// T:System.Collections.Generic.ReferenceEqualityComparer: False\n// T:System.Diagnostics.CodeAnalysis.AllowNullAttribute: False\n// T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute: False\n// T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute: False\n// T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute: False\n// T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute: False\n// T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes: False\n// T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute: False\n// T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute: False\n// T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute: False\n// T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute: False\n// T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute: False\n// T:System.Diagnostics.CodeAnalysis.NotNullAttribute: False\n// T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute: False\n// T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute: False\n// T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute: False\n// T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute: False\n// T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute: False\n// T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute: False\n// T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute: False\n// T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute: False\n// T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute: False\n// T:System.Diagnostics.StackTraceHiddenAttribute: False\n// T:System.HashCode: False\n// T:System.Index: False\n// T:System.Net.Http.ReadOnlyMemoryContent: False\n// T:System.Range: False\n// T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute: False\n// T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute: False\n// T:System.Runtime.CompilerServices.CollectionBuilderAttribute: True\n// T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute: False\n// T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute: False\n// T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute: False\n// T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute: False\n// T:System.Runtime.CompilerServices.IsExternalInit: False\n// T:System.Runtime.CompilerServices.ModuleInitializerAttribute: False\n// T:System.Runtime.CompilerServices.RequiredMemberAttribute: False\n// T:System.Runtime.CompilerServices.SkipLocalsInitAttribute: False\n// T:System.Runtime.CompilerServices.TupleElementNamesAttribute: False\n// T:System.Runtime.InteropServices.SuppressGCTransitionAttribute: False\n// T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute: False\n// T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute: False\n// T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute: False\n// T:System.Runtime.Versioning.SupportedOSPlatformAttribute: False\n// T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute: False\n// T:System.Runtime.Versioning.TargetPlatformAttribute: False\n// T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute: False\n// T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute: False\n// T:System.Threading.Tasks.TaskToAsyncResult: True\n// T:System.ValueTuple: False\n// T:System.ValueTuple`1: False\n// T:System.ValueTuple`2: False\n// T:System.ValueTuple`3: False\n// T:System.ValueTuple`4: False\n// T:System.ValueTuple`5: False\n// T:System.ValueTuple`6: False\n// T:System.ValueTuple`7: False\n// T:System.ValueTuple`8: False\n// T:System.ITupleInternal: False\n\n"))),(0,s.kt)(l.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Poly\\src\\Dm\\obj\\GX\\Meziantou.Polyfill\\Meziantou.Polyfill.PolyfillGenerator\\M_System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken).g.cs",label:"M_System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken).g.cs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\nusing System.Threading.Tasks;\nusing System.Threading;\nusing System.Diagnostics;\nusing System;\n\nstatic partial class PolyfillExtensions\n{\n    public static async Task WaitForExitAsync(this Process target, CancellationToken cancellationToken = default)\n    {\n        // https://source.dot.net/#System.Diagnostics.Process/System/Diagnostics/Process.cs,b6a5b00714a61f06\n        // Because the process has already started by the time this method is called,\n        // we're in a race against the process to set up our exit handlers before the process\n        // exits. As a result, there are several different flows that must be handled:\n        //\n        // CASE 1: WE ENABLE EVENTS\n        // This is the \"happy path\". In this case we enable events.\n        //\n        // CASE 1.1: PROCESS EXITS OR IS CANCELED AFTER REGISTERING HANDLER\n        // This case continues the \"happy path\". The process exits or waiting is canceled after\n        // registering the handler and no special cases are needed.\n        //\n        // CASE 1.2: PROCESS EXITS BEFORE REGISTERING HANDLER\n        // It's possible that the process can exit after we enable events but before we reigster\n        // the handler. In that case we must check for exit after registering the handler.\n        //\n        //\n        // CASE 2: PROCESS EXITS BEFORE ENABLING EVENTS\n        // The process may exit before we attempt to enable events. In that case EnableRaisingEvents\n        // will throw an exception like this:\n        //     System.InvalidOperationException : Cannot process request because the process (42) has exited.\n        // In this case we catch the InvalidOperationException. If the process has exited, our work\n        // is done and we return. If for any reason (now or in the future) enabling events fails\n        // and the process has not exited, bubble the exception up to the user.\n        //\n        //\n        // CASE 3: USER ALREADY ENABLED EVENTS\n        // In this case the user has already enabled raising events. Re-enabling events is a no-op\n        // as the value hasn't changed. However, no-op also means that if the process has already\n        // exited, EnableRaisingEvents won't throw an exception.\n        //\n        // CASE 3.1: PROCESS EXITS OR IS CANCELED AFTER REGISTERING HANDLER\n        // (See CASE 1.1)\n        //\n        // CASE 3.2: PROCESS EXITS BEFORE REGISTERING HANDLER\n        // (See CASE 1.2)\n        if (!target.HasExited)\n        {\n            // Early out for cancellation before doing more expensive work\n            cancellationToken.ThrowIfCancellationRequested();\n        }\n        try\n        {\n            // CASE 1: We enable events\n            // CASE 2: Process exits before enabling events (and throws an exception)\n            // CASE 3: User already enabled events (no-op)\n            target.EnableRaisingEvents = true;\n        }\n        catch (InvalidOperationException)\n        {\n            // CASE 2: If the process has exited, our work is done, otherwise bubble the\n            // exception up to the user\n            if (target.HasExited)\n            {\n                return;\n            }\n            throw;\n        }\n        var tcs = new TaskCompletionSourceWithCancellation<bool>();\n        void Handler(object? s, EventArgs e) => tcs.TrySetResult(true);\n        target.Exited += Handler;\n        try\n        {\n            if (target.HasExited)\n            {\n                // CASE 1.2 & CASE 3.2: Handle race where the process exits before registering the handler\n                return;\n            }\n            // CASE 1.1 & CASE 3.1: Process exits or is canceled here\n            await tcs.WaitWithCancellationAsync(cancellationToken).ConfigureAwait(false);\n        }\n        finally\n        {\n            target.Exited -= Handler;\n        }\n\n        target.WaitForExit();\n    }\n\n    private sealed class TaskCompletionSourceWithCancellation<T> : TaskCompletionSource<T>\n    {\n        private CancellationToken _cancellationToken;\n        public TaskCompletionSourceWithCancellation() : base(TaskCreationOptions.RunContinuationsAsynchronously)\n        {\n        }\n        private void OnCancellation()\n        {\n            TrySetCanceled(_cancellationToken);\n        }\n#if NETCOREAPP3_1_OR_GREATER\n        public async ValueTask<T> WaitWithCancellationAsync(CancellationToken cancellationToken)\n        {\n            _cancellationToken = cancellationToken;\n            await using (cancellationToken.UnsafeRegister(s => ((TaskCompletionSourceWithCancellation<T>)s!).OnCancellation(), this))\n            {\n                return await Task.ConfigureAwait(false);\n            }\n        }\n#else\n        public async Task<T> WaitWithCancellationAsync(CancellationToken cancellationToken)\n        {\n            _cancellationToken = cancellationToken;\n            using (cancellationToken.Register(s => ((TaskCompletionSourceWithCancellation<T>)s!).OnCancellation(), this))\n            {\n                return await Task.ConfigureAwait(false);\n            }\n        }\n#endif\n    }\n}\n")))),(0,s.kt)("h2",{id:"usefull"},"Usefull"),(0,s.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{target:"_blank",href:n(382).Z},"Download Example project Meziantou.Polyfill "))),(0,s.kt)("h3",{id:"share-meziantoupolyfill"},"Share Meziantou.Polyfill"),(0,s.kt)("ul",null,(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMeziantou.Polyfill&quote=Meziantou.Polyfill",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMeziantou.Polyfill&text=Meziantou.Polyfill:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMeziantou.Polyfill",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMeziantou.Polyfill&title=Meziantou.Polyfill",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMeziantou.Polyfill&title=Meziantou.Polyfill&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMeziantou.Polyfill",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Meziantou.Polyfill"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Meziantou.Polyfill")),(0,s.kt)("h2",{id:"in-the-same-category-enhancementclass"},"In the same category (EnhancementClass)"),(0,s.kt)("h3",{id:"apparatusaot"},(0,s.kt)("a",{parentName:"h3",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,s.kt)("h3",{id:"buildergenerator"},(0,s.kt)("a",{parentName:"h3",href:"/docs/BuilderGenerator"},"BuilderGenerator")),(0,s.kt)("h3",{id:"fastgenericnew"},(0,s.kt)("a",{parentName:"h3",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,s.kt)("h3",{id:"generatorequals"},(0,s.kt)("a",{parentName:"h3",href:"/docs/GeneratorEquals"},"GeneratorEquals")),(0,s.kt)("h3",{id:"immutype"},(0,s.kt)("a",{parentName:"h3",href:"/docs/Immutype"},"Immutype")),(0,s.kt)("h3",{id:"lomboknet"},(0,s.kt)("a",{parentName:"h3",href:"/docs/Lombok.NET"},"Lombok.NET")),(0,s.kt)("h3",{id:"m31fluentapi"},(0,s.kt)("a",{parentName:"h3",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,s.kt)("h3",{id:"memorypack"},(0,s.kt)("a",{parentName:"h3",href:"/docs/MemoryPack"},"MemoryPack")),(0,s.kt)("h3",{id:"microsoftextensionslogging"},(0,s.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,s.kt)("h3",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,s.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,s.kt)("h3",{id:"roozieautointerface"},(0,s.kt)("a",{parentName:"h3",href:"/docs/Roozie.AutoInterface"},"Roozie.AutoInterface")),(0,s.kt)("h3",{id:"rscg_decorator"},(0,s.kt)("a",{parentName:"h3",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,s.kt)("h3",{id:"rscg_static"},(0,s.kt)("a",{parentName:"h3",href:"/docs/RSCG_Static"},"RSCG_Static")),(0,s.kt)("h3",{id:"syncmethodgenerator"},(0,s.kt)("a",{parentName:"h3",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,s.kt)("h3",{id:"systemruntimeinteropservices"},(0,s.kt)("a",{parentName:"h3",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,s.kt)("h3",{id:"systemtextregularexpressions"},(0,s.kt)("a",{parentName:"h3",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")))}d.isMDXComponent=!0},382:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/Meziantou.Polyfill-9ac3173b65e163a20425ba0fb1e04faf.zip"}}]);