"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3410],{95245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=t(87462),i=(t(67294),t(3905)),r=t(73992),o=t(18679),s=t(68839);const l={sidebar_position:980,title:"98 - Funcky.DiscriminatedUnion",description:"Generating discriminated unions for C# 9.0 and above.",slug:"/Funcky.DiscriminatedUnion"},c="Funcky.DiscriminatedUnion  by Polyadic",d={unversionedId:"RSCG-Examples/Funcky.DiscriminatedUnion",id:"RSCG-Examples/Funcky.DiscriminatedUnion",title:"98 - Funcky.DiscriminatedUnion",description:"Generating discriminated unions for C# 9.0 and above.",source:"@site/docs/RSCG-Examples/Funcky.DiscriminatedUnion.md",sourceDirName:"RSCG-Examples",slug:"/Funcky.DiscriminatedUnion",permalink:"/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion",draft:!1,tags:[],version:"current",sidebarPosition:980,frontMatter:{sidebar_position:980,title:"98 - Funcky.DiscriminatedUnion",description:"Generating discriminated unions for C# 9.0 and above.",slug:"/Funcky.DiscriminatedUnion"},sidebar:"tutorialSidebar",previous:{title:"97 - DomainPrimitives",permalink:"/RSCG_Examples/v2/docs/DomainPrimitives"},next:{title:"99 - MakeInterface.Generator",permalink:"/RSCG_Examples/v2/docs/MakeInterface.Generator"}},m={},u=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Funcky.DiscriminatedUnion",id:"share-funckydiscriminatedunion",level:3},{value:"In the same category (FunctionalProgramming)",id:"in-the-same-category-functionalprogramming",level:2},{value:"dunet",id:"dunet",level:3},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:3},{value:"OneOf",id:"oneof",level:3},{value:"PartiallyApplied",id:"partiallyapplied",level:3},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:3}],p={toc:u},k="wrapper";function h(e){let{components:n,...l}=e;return(0,i.kt)(k,(0,a.Z)({},p,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"funckydiscriminatedunion--by-polyadic"},"Funcky.DiscriminatedUnion  by Polyadic"),(0,i.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Funcky.DiscriminatedUnion/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Funcky.DiscriminatedUnion?label=Funcky.DiscriminatedUnion",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polyadic/funcky-discriminated-union"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/polyadic/funcky-discriminated-union?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/polyadic/funcky-discriminated-union?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"Funcky.DiscriminatedUnion")),(0,i.kt)("p",{parentName:"admonition"},"A source generator that generates ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," methods for all your discriminated unions needs. \u2728"),(0,i.kt)("p",{parentName:"admonition"},"Author: Polyadic"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Funcky.DiscriminatedUnion/"},"https://www.nuget.org/packages/Funcky.DiscriminatedUnion/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polyadic/funcky-discriminated-union"},"https://github.com/polyadic/funcky-discriminated-union")),(0,i.kt)("p",{parentName:"admonition"},"Source : ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polyadic/funcky-discriminated-union"},"https://github.com/polyadic/funcky-discriminated-union"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h1",{parentName:"admonition",id:"funcky-discriminated-unions"},"Funcky Discriminated Unions"),(0,i.kt)("p",{parentName:"admonition"},"A source generator that generates ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," methods for all your discriminated unions needs. \u2728"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Funcky.DiscriminatedUnion"},(0,i.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/Funcky.DiscriminatedUnion",alt:"NuGet package"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polyadic/funcky-discriminated-union/actions?query=workflow%3ABuild"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/polyadic/funcky-discriminated-union/workflows/Build/badge.svg",alt:"Build"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/polyadic/funcky-discriminated-union/main/license-mit.txt"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/licence-MIT-green",alt:"Licence: MIT"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/polyadic/funcky-discriminated-union/main/license-apache.txt"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/licence-Apache-green",alt:"Licence: Apache"}))),(0,i.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,i.kt)("p",{parentName:"admonition"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},'<ProjectReference Include="Funcky.DiscriminatedUnion" Version="..." PrivateAssets="all" />')," to your project file."),(0,i.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,i.kt)("p",{parentName:"admonition"},"Apply the ",(0,i.kt)("inlineCode",{parentName:"p"},"[DiscriminatedUnion]")," to an abstract class (or record) with nested types representing the variants."),(0,i.kt)("h2",{parentName:"admonition",id:"example"},"Example"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using Funcky;\n\nvar result = Result<int>.Ok(42);\nvar resultOrFallback = result.Match(ok: ok => ok.Value, error: _ => 0);\n\n[DiscriminatedUnion]\npublic abstract partial record Result<T>\n    where T : notnull\n{\n    public sealed partial record Ok(T Value) : Result<T>;\n\n    public sealed partial record Error(Exception Exception) : Result<T>;\n}\n")),(0,i.kt)("h2",{parentName:"admonition",id:"minimum-required-versions"},"Minimum Required Versions"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Visual Studio 2022"),(0,i.kt)("li",{parentName:"ul"},"Roslyn 4.0.0"),(0,i.kt)("li",{parentName:"ul"},".NET 6")),(0,i.kt)("h2",{parentName:"admonition",id:"settings"},"Settings"),(0,i.kt)("p",{parentName:"admonition"},"The attribute allows configuration of some aspects of source generation."),(0,i.kt)("h3",{parentName:"admonition",id:"nonexhaustive"},(0,i.kt)("inlineCode",{parentName:"h3"},"NonExhaustive")),(0,i.kt)("p",{parentName:"admonition"},"The auto-generated ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Switch")," methods are public by default.\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"NonExhaustive")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", these methods are generated with ",(0,i.kt)("inlineCode",{parentName:"p"},"internal")," visibility instead."),(0,i.kt)("h3",{parentName:"admonition",id:"matchresulttypename"},(0,i.kt)("inlineCode",{parentName:"h3"},"MatchResultTypeName")),(0,i.kt)("p",{parentName:"admonition"},"The auto-generated ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," method uses a generic type for the result. This type is named ",(0,i.kt)("inlineCode",{parentName:"p"},"TResult")," by default.\nThis can cause conflict with generic types on the discriminated union itself. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"MatchResultTypeName")," to set a custom name for this type."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'using Funcky;\n\n[DiscriminatedUnion(MatchResultTypeName = "TMatchResult")]\npublic abstract partial record Result<TResult> { ... }\n\n// Generated code\npartial record Result<TResult>\n{\n    public abstract TMatchResult Match<TMatchResult>(...);\n\n    ...\n}\n')),(0,i.kt)("h3",{parentName:"admonition",id:"flatten"},(0,i.kt)("inlineCode",{parentName:"h3"},"Flatten")),(0,i.kt)("p",{parentName:"admonition"},"The auto-generated ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Switch")," methods only accept one level of inheritance by default.\nSet ",(0,i.kt)("inlineCode",{parentName:"p"},"Flatten")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to include arbitrarily deep inherited types in these methods."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using Funcky;\n\nSyntaxNode node = ...;\nvar nodeAsString = node.Match(\n    keyword: keyword => keyword.Value,\n    integer: integer => integer.Value.ToString(),\n    double: @double => @double.Value.ToString());\n\n[DiscriminatedUnion(Flatten = true)]\npublic abstract partial record SyntaxNode\n{\n    public sealed partial record Keyword(string Value) : SyntaxNode;\n\n    public abstract partial record Literal : SyntaxNode;\n\n    public abstract partial record Number : Literal;\n\n    public sealed partial record Integer(int Value) : Number;\n\n    public sealed partial record Double(double Value) : Number;\n}\n")),(0,i.kt)("h3",{parentName:"admonition",id:"jsonpolymorphic"},(0,i.kt)("inlineCode",{parentName:"h3"},"[JsonPolymorphic]")),(0,i.kt)("p",{parentName:"admonition"},"System.Text.Json adds support for ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/polymorphism"},"serializing derived classes")," starting with .NET 7.\nThis generator supports this feature by generating the required ",(0,i.kt)("inlineCode",{parentName:"p"},"[JsonDerivedType]")," attributes for you."),(0,i.kt)("p",{parentName:"admonition"},"All missing ",(0,i.kt)("inlineCode",{parentName:"p"},"[JsonDerivedType]")," attributes are generated if at least one ",(0,i.kt)("inlineCode",{parentName:"p"},"[JsonDerivedType]")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"[JsonPolymorphic]"),"\nattribute is specified."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using Funcky;\nusing System.Text.Serialization;\n\n[DiscriminatedUnion]\n[JsonPolymorphic]\npublic abstract partial record Shape\n{\n    public sealed partial record Rectangle(double Width, double Length) : Shape;\n\n    public sealed partial record Circle(double Radius) : Shape;\n\n    public sealed partial record EquilateralTriangle(double SideLength) : Shape;\n}\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Generated code"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using System.Text.Serialization;\n\n[JsonDerivedType(typeof(Rectangle), typeDiscriminator: nameof(Rectangle))]\n[JsonDerivedType(typeof(Circle), typeDiscriminator: nameof(Circle))]\n[JsonDerivedType(typeof(EquilateralTriangle), typeDiscriminator: nameof(EquilateralTriangle))]\npartial record Shape\n{\n    // ...\n}\n")))),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Generating discriminated unions for C# 9.0 and above.")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"Funcky.DiscriminatedUnion")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Funcky.DiscriminatedUnion" Version="1.1.0"  />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FUD\\src\\Union\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Funcky.DiscriminatedUnion")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Union;\n\nConsole.WriteLine("Save or not");\nvar data = SaveToDatabase.Save(0);\n\nConsole.WriteLine(data.Match(ok => true, error => false));\ndata = SaveToDatabase.Save(1);\nConsole.WriteLine(data.Match(ok => true, error => false));\n\n'))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FUD\\src\\Union\\ResultSave.cs",label:"ResultSave.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Funcky.DiscriminatedUnion")," in ",(0,i.kt)("em",{parentName:"p"},"ResultSave.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace Union;\n\n[Funcky.DiscriminatedUnion]\npublic abstract partial record ResultSave\n{\n    public partial record Success(int Value): ResultSave;\n    public partial record ValidationError(string Message):ResultSave;\n\n    //public sealed partial record Ok(T Value) : ResultSave<T>;\n\n    //public sealed partial record Error(Exception Exception) : ResultSave<T>;\n}\n"))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FUD\\src\\Union\\SaveToDatabase.cs",label:"SaveToDatabase.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Funcky.DiscriminatedUnion")," in ",(0,i.kt)("em",{parentName:"p"},"SaveToDatabase.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Union;\ninternal class SaveToDatabase\n{\n    public static ResultSave Save(int i)\n    {\n        if (i == 0)\n        {\n            return new ResultSave.ValidationError(" cannot save 0");\n        }\n        return new ResultSave.Success(i);\n    }\n}\n\n')))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FUD\\src\\Union\\obj\\GX\\Funcky.DiscriminatedUnion.SourceGeneration\\Funcky.DiscriminatedUnion.SourceGeneration.DiscriminatedUnionGenerator\\DiscriminatedUnionAttribute.g.cs",label:"DiscriminatedUnionAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#nullable enable\n\nnamespace Funcky\n{\n    [global::System.Diagnostics.Conditional("Funcky_DiscriminatedUnion")]\n    [global::System.AttributeUsage(global::System.AttributeTargets.Class)]\n    internal sealed class DiscriminatedUnionAttribute : global::System.Attribute\n    {\n        /// <summary>Allow only consumers in the same assembly to use the exhaustive <c>Match</c> and <c>Switch</c> methods.</summary>\n        public bool NonExhaustive { get; set; }\n\n        /// <summary>Generates exhaustive <c>Match</c> and <c>Switch</c> methods for the entire type hierarchy.</summary>\n        public bool Flatten { get; set; }\n\n        /// <summary>Customized the generic type name used for the result in the generated <c>Match</c> methods. Defaults to <c>TResult</c>.</summary>\n        public string? MatchResultTypeName { get; set; }\n    }\n}\n\n'))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FUD\\src\\Union\\obj\\GX\\Funcky.DiscriminatedUnion.SourceGeneration\\Funcky.DiscriminatedUnion.SourceGeneration.DiscriminatedUnionGenerator\\DiscriminatedUnionGenerator.g.cs",label:"DiscriminatedUnionGenerator.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#nullable enable\n\nnamespace Union\n{\n    partial record ResultSave\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.1.0.0")]\n        public abstract TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<ValidationError, TResult> validationError);\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.1.0.0")]\n        public abstract void Switch(global::System.Action<Success> success, global::System.Action<ValidationError> validationError);\n        \n        partial record Success\n        {\n            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.1.0.0")]\n            public override TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<ValidationError, TResult> validationError) => success(this);\n            \n            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.1.0.0")]\n            public override void Switch(global::System.Action<Success> success, global::System.Action<ValidationError> validationError) => success(this);\n        }\n        \n        partial record ValidationError\n        {\n            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.1.0.0")]\n            public override TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<ValidationError, TResult> validationError) => validationError(this);\n            \n            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.1.0.0")]\n            public override void Switch(global::System.Action<Success> success, global::System.Action<ValidationError> validationError) => validationError(this);\n        }\n    }\n}\n\n')))),(0,i.kt)("h2",{id:"usefull"},"Usefull"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:t(24413).Z},"Download Example project Funcky.DiscriminatedUnion "))),(0,i.kt)("h3",{id:"share-funckydiscriminatedunion"},"Share Funcky.DiscriminatedUnion"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFuncky.DiscriminatedUnion&quote=Funcky.DiscriminatedUnion",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFuncky.DiscriminatedUnion&text=Funcky.DiscriminatedUnion:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFuncky.DiscriminatedUnion",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFuncky.DiscriminatedUnion&title=Funcky.DiscriminatedUnion",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFuncky.DiscriminatedUnion&title=Funcky.DiscriminatedUnion&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFuncky.DiscriminatedUnion",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Funcky.DiscriminatedUnion")),(0,i.kt)("h2",{id:"in-the-same-category-functionalprogramming"},"In the same category (FunctionalProgramming)"),(0,i.kt)("h3",{id:"dunet"},(0,i.kt)("a",{parentName:"h3",href:"/docs/dunet"},"dunet")),(0,i.kt)("h3",{id:"nsourcegeneratorsuniontypes"},(0,i.kt)("a",{parentName:"h3",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,i.kt)("h3",{id:"oneof"},(0,i.kt)("a",{parentName:"h3",href:"/docs/OneOf"},"OneOf")),(0,i.kt)("h3",{id:"partiallyapplied"},(0,i.kt)("a",{parentName:"h3",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,i.kt)("h3",{id:"rscg_utils_memo"},(0,i.kt)("a",{parentName:"h3",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")))}h.isMDXComponent=!0},24413:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/Funcky.DiscriminatedUnion-780c2d737c5bc052c1539a0418faeb55.zip"}}]);