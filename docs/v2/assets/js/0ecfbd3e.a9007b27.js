"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[1535],{8577:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/files/ActorSrcGen-41638134040391845f32725d6827be68.zip"},68563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"RSCG-Examples/ActorSrcGen","title":"141 - ActorSrcGen","description":"Generating source code for actors in C#.","source":"@site/docs/RSCG-Examples/ActorSrcGen.md","sourceDirName":"RSCG-Examples","slug":"/ActorSrcGen","permalink":"/RSCG_Examples/v2/docs/ActorSrcGen","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/ActorSrcGen.md","tags":[],"version":"current","sidebarPosition":1410,"frontMatter":{"sidebar_position":1410,"title":"141 - ActorSrcGen","description":"Generating source code for actors in C#.","slug":"/ActorSrcGen"},"sidebar":"tutorialSidebar","previous":{"title":"140 - Minerals.AutoMixins","permalink":"/RSCG_Examples/v2/docs/Minerals.AutoMixins"},"next":{"title":"142 - TableStorage","permalink":"/RSCG_Examples/v2/docs/TableStorage"}}');var o=t(74848),s=t(28453),r=t(11470),i=t(19365),l=t(14252);const c={sidebar_position:1410,title:"141 - ActorSrcGen",description:"Generating source code for actors in C#.",slug:"/ActorSrcGen"},d="ActorSrcGen  by Andrew Matthews",h={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"How Do You Use It?",id:"how-do-you-use-it",level:2},{value:"What It Does",id:"what-it-does",level:2},{value:"Why Bother?",id:"why-bother",level:2},{value:"The Actor Model",id:"the-actor-model",level:3},{value:"TPL Dataflow",id:"tpl-dataflow",level:3},{value:"Acknowledgements",id:"acknowledgements",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share ActorSrcGen",id:"share-actorsrcgen",level:3},{value:"In the same category (Actor) - 0 other generators",id:"in-the-same-category-actor---0-other-generators",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"actorsrcgen--by-andrew-matthews",children:"ActorSrcGen  by Andrew Matthews"})}),"\n",(0,o.jsx)(l.A,{toc:u}),"\n",(0,o.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.nuget.org/packages/ActorSrcGen/",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/ActorSrcGen?label=ActorSrcGen",alt:"Nuget"})}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/aabs/ActorSrcGen",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/aabs/ActorSrcGen?label=updated",alt:"GitHub last commit"})}),"\n",(0,o.jsx)(n.img,{src:"https://img.shields.io/github/stars/aabs/ActorSrcGen?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,o.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,o.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:["Name: ",(0,o.jsx)(n.strong,{children:"ActorSrcGen"})]}),(0,o.jsx)(n.p,{children:"A C# Source Generator to adapt a simple class to allow it to use TPL Dataflow for robust high performance computation"}),(0,o.jsx)(n.p,{children:"Author: Andrew Matthews"}),(0,o.jsxs)(n.p,{children:["NuGet:\n",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.a,{href:"https://www.nuget.org/packages/ActorSrcGen/",children:"https://www.nuget.org/packages/ActorSrcGen/"})})]}),(0,o.jsxs)(n.p,{children:["You can find more details at ",(0,o.jsx)(n.a,{href:"https://github.com/aabs/ActorSrcGen",children:"https://github.com/aabs/ActorSrcGen"})]}),(0,o.jsxs)(n.p,{children:["Source: ",(0,o.jsx)(n.a,{href:"https://github.com/aabs/ActorSrcGen",children:"https://github.com/aabs/ActorSrcGen"})]})]}),"\n",(0,o.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.h1,{id:"welcome-to-actorsrcgen",children:"Welcome To ActorSrcGen"}),(0,o.jsx)(n.p,{children:"ActorSrcGen is a C# Source Generator allowing the conversion of simple C#\nclasses into Dataflow compatible pipelines supporting the actor model."}),(0,o.jsx)(n.p,{children:"ActorSrcGen is currently a solo effort to create a useful and powerful source\ncode generator to simplify the creation of high performance pipeline code\nconforming to the actor model.  We welcome any feedback, suggestions, and\ncontributions from the community."}),(0,o.jsx)(n.p,{children:"If you encounter any issues or have any questions, please don't hesitate to\nsubmit an issue report.  This helps me understand any problems or limitations of\nthe project and allows me to address them promptly."}),(0,o.jsx)(n.p,{children:"If you have an idea for a new feature or enhancement, I encourage you to submit\na feature request.  Your input will shape the future direction of ActorSrcGen\nand help make it even better."}),(0,o.jsx)(n.p,{children:"If you have any code changes or improvements you'd like to contribute, I welcome\npull requests (PRs).  Please follow the guidelines provided in our project's\ncontribution guidelines and README file.  I will review your changes and\nprovide feedback, helping you ensure a smooth integration process."}),(0,o.jsx)(n.h2,{id:"how-do-you-use-it",children:"How Do You Use It?"}),(0,o.jsx)(n.p,{children:"It's really easy to use ActorSrcGen to inject pipeline processing code into your project."}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install the Nuget Package into your project"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"dotnet add package ActorSrcGen --version 1.0.2\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Adorn your actor class with the Actor Attribute"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"[Actor]\npublic class MyActor{ . . . }\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Define the initial starting step of your pipeline, being sure to indicate what step comes next"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'[FirstStep("SomeName")]\n[NextStep(nameof(DecodeMsg))]\n[NextStep(nameof(LogMsg))]\npublic string ReceiveMsgFromSomewhere(string x){ . . . }\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add a sequence of intermediate steps"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"[Step, NextStep(nameof(ProcessMsg))]\npublic Request DecodeMsg(string x){ . . . }\n\n[Step]\npublic void LogMsg(string x){ . . . }\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Finish up with the last step"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"[LastStep]\npublic void ProcessMsg(Request req){ . . . }\n"})}),"\n"]}),"\n"]}),(0,o.jsxs)(n.p,{children:["Behind the scenes, the source generator will generate the wiring for your actor,\nso that all you then need to do is invoke the actor with a call to ",(0,o.jsx)(n.code,{children:"Call"})," or\n",(0,o.jsx)(n.code,{children:"Cast"})," depending on whether you want the invocation to be blocking or not."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var a = new MyActor();\na.Call("hello world!");\n'})}),(0,o.jsx)(n.p,{children:"Naturally there are various other details related to DataflowEx and TPL dataflow\nthat you can take advantage of, but the gist is to make the actor as simple as\nthat to write.  The generator will create the wiring.  You just need to\nimplement the steps of the pipeline itself."}),(0,o.jsx)(n.h2,{id:"what-it-does",children:"What It Does"}),(0,o.jsx)(n.p,{children:"The source generator in the provided code is a tool that automatically generates\nadditional code based on a simple C# class.  Its purpose is to simplify the\nusage of TPL Dataflow, a library that helps with writing robust and performant\nasynchronous and concurrent code in .NET.  In this specific case, the source\ngenerator takes a regular C# class and extends it by generating the necessary\nboilerplate code to use TPL Dataflow.  The generated code creates a pipeline of\ndataflow components that support the actor model."}),(0,o.jsx)(n.p,{children:"The generated code includes the following components"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TransformManyBlock"}),": This block transforms input data and produces multiple\noutput data items."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ActionBlock"}),": This block performs an action on the input data without producing\nany output."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"DataflowLinkOptions"}),": This class specifies options for linking dataflow blocks\ntogether."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ExecutionDataflowBlockOptions"}),": This class specifies options for configuring\nthe execution behavior of dataflow blocks."]}),"\n"]}),(0,o.jsx)(n.p,{children:"The generated code also includes the necessary wiring to connect the methods of\nthe original class together using the TPL Dataflow components.  This allows the\nmethods to be executed in a coordinated and concurrent manner."}),(0,o.jsx)(n.p,{children:"Overall, the source generator simplifies the process of using TPL Dataflow by\nautomatically generating the code that would otherwise need to be written\nmanually.  It saves developers from writing a lot of boilerplate code and allows\nthem to focus on the core logic of their application."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'[Actor]\npublic partial class MyActor\n{\n    public List<int> Results { get; set; } = [];\n    public int Counter { get; set; }\n\n    [FirstStep("blah")]\n    [Receiver]\n    [NextStep(nameof(DoTask2))]\n    [NextStep(nameof(LogMessage))]\n    public Task<string> DoTask1(int x)\n    {\n        Console.WriteLine("DoTask1");\n\n        return Task.FromResult(x.ToString());\n    }\n\n    protected async partial Task<int> ReceiveDoTask1(CancellationToken ct)\n    {\n        await Task.Delay(1000, ct);\n\n        return Counter++;\n    }\n\n\n    [Step]\n    [NextStep(nameof(DoTask3))]\n    public Task<string> DoTask2(string x)\n    {\n        Console.WriteLine("DoTask2");\n\n        return Task.FromResult($"100{x}");\n    }\n\n    [LastStep]\n    public async Task<int> DoTask3(string input)\n    {\n        await Console.Out.WriteLineAsync("DoTask3");\n        var result = int.Parse(input);\n        Results.Add(result);\n\n        return result;\n    }\n\n    [LastStep]\n    public void LogMessage(string x)\n    {\n        Console.WriteLine("Incoming Message: " + x);\n    }\n}\n'})}),(0,o.jsx)(n.p,{children:"And the source generator will extend it, adding the boilerplate TPL Dataflow\ncode to wire the methods together in a clean way:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"// Generated on 2024-05-08\n#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.\n#pragma warning disable CS0108 // hides inherited member.\n\nnamespace ActorSrcGen.Abstractions.Playground;\nusing System.Threading.Tasks.Dataflow;\nusing Gridsum.DataflowEx;\npublic partial class MyActor : Dataflow<Int32, Int32>, IActor<Int32>\n{\n    public MyActor() : base(DataflowOptions.Default)\n    {\n        _LogMessage = new ActionBlock<String>(        (String x) => {\n            try\n            {\n                LogMessage(x);\n            }catch{}\n        },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_LogMessage);\n        _DoTask3 = new TransformManyBlock<String,Int32>(       async (String x) => {\n           var result = new List<Int32>();\n           try\n           {\n               var newValue = await DoTask3(x);\n               result.Add(newValue);\n           }catch{}\n           return result;\n       },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_DoTask3);\n        _DoTask2 = new TransformManyBlock<String,String>(       async (String x) => {\n           var result = new List<String>();\n           try\n           {\n               var newValue = await DoTask2(x);\n               result.Add(newValue);\n           }catch{}\n           return result;\n       },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_DoTask2);\n        _DoTask1 = new TransformManyBlock<Int32,String>(       async (Int32 x) => {\n           var result = new List<String>();\n           try\n           {\n               var newValue = await DoTask1(x);\n               result.Add(newValue);\n           }catch{}\n           return result;\n       },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_DoTask1);\n        _DoTask1BC = new BroadcastBlock<String>(    (String x) => x,\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_DoTask1BC);\n        _DoTask2.LinkTo(_DoTask3, new DataflowLinkOptions { PropagateCompletion = true });\n        _DoTask1.LinkTo(_DoTask1BC, new DataflowLinkOptions { PropagateCompletion = true });\n        _DoTask1BC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true });\n        _DoTask1BC.LinkTo(_DoTask2, new DataflowLinkOptions { PropagateCompletion = true });\n    }\n\n    ActionBlock<String> _LogMessage;\n\n    TransformManyBlock<String,Int32> _DoTask3;\n\n    TransformManyBlock<String,String> _DoTask2;\n\n    TransformManyBlock<Int32,String> _DoTask1;\n\n    BroadcastBlock<String> _DoTask1BC;\n    protected partial Task<Int32> ReceiveDoTask1(CancellationToken cancellationToken);\n    public async Task ListenForReceiveDoTask1(CancellationToken cancellationToken)\n    {\n        while (!cancellationToken.IsCancellationRequested)\n        {\n            Int32 incomingValue = await ReceiveDoTask1(cancellationToken);\n            Call(incomingValue);\n        }\n    }\n    public override ITargetBlock<Int32> InputBlock { get => _DoTask1; }\n    public override ISourceBlock<Int32> OutputBlock { get => _DoTask3; }\n    public bool Call(Int32 input)\n        => InputBlock.Post(input);\n\n    public async Task<bool> Cast(Int32 input)\n        => await InputBlock.SendAsync(input);\n    public async Task<Int32> AcceptAsync(CancellationToken cancellationToken)\n    {\n        try\n        {\n            var result = await _DoTask3.ReceiveAsync(cancellationToken);\n            return result;\n        }\n        catch (OperationCanceledException operationCanceledException)\n        {\n            return Task.FromCanceled<int>(cancellationToken);        \n        }\n    }\n}\n"})}),(0,o.jsx)(n.p,{children:"Use of your class is a straightforward call to send a message to the actor:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var actor = new MyActor();\n\ntry\n{\n    if (actor.Call(10))\n        Console.WriteLine("Called Synchronously");\n\n    var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));\n\n    var t = Task.Run(async () => await actor.ListenForReceiveDoTask1(cts.Token), cts.Token);\n\n    while (!cts.Token.IsCancellationRequested)\n    {\n        var result = await actor.AcceptAsync(cts.Token);\n        Console.WriteLine($"Result: {result}");\n    }\n\n    await actor.SignalAndWaitForCompletionAsync();\n}\ncatch (OperationCanceledException operationCanceledException)\n{\n    Console.WriteLine("All Done!");\n}\n\n'})}),(0,o.jsx)(n.p,{children:"Which produces what you would expect:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Called Synchronously\nDoTask1\nIncoming Message: 10\nDoTask2\nDoTask3\nResult: 10010\nDoTask1\nIncoming Message: 0\nDoTask2\nDoTask3\nResult: 1000\nDoTask1\nDoTask2\nIncoming Message: 1\nDoTask3\nResult: 1001\nDoTask1\nDoTask2\nIncoming Message: 2\nDoTask3\nResult: 1002\nDoTask1\nDoTask2\nDoTask3\nResult: 1003\nIncoming Message: 3\nAll Done!\n"})}),(0,o.jsx)(n.h2,{id:"why-bother",children:"Why Bother?"}),(0,o.jsx)(n.p,{children:"You might be wondering what the architectural benefits of using a model like\nthis might be."}),(0,o.jsxs)(n.p,{children:['Writing robust and performant asynchronous and concurrent code in .NET is a\nlaborious process.  TPL Dataflow makes it easier - it "',(0,o.jsx)(n.em,{children:"provides dataflow\ncomponents to help increase the robustness of concurrency-enabled applications.\nThis dataflow model promotes actor-based programming by providing in-process\nmessage passing for coarse-grained dataflow and pipelining tasks"}),'" (see\n',(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library",children:"docs"}),")."]}),(0,o.jsx)(n.p,{children:"ActorSrcGen allows you to take advantage of that model without needing to write\na lot of the necessary boilerplate code."}),(0,o.jsx)(n.h3,{id:"the-actor-model",children:"The Actor Model"}),(0,o.jsx)(n.p,{children:"The Actor Model is a programming paradigm that is based on the concept of\nactors, which are autonomous units of computation.  It has several benefits in\nprogramming:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Concurrency"}),": Actors can be executed concurrently, allowing for efficient\nuse of multiple CPU cores.  This can lead to significant performance\nimprovements in systems that require concurrent execution."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fault tolerance"}),": Actors can be designed to be fault-tolerant, meaning\nthat if an actor fails or crashes, it can be restarted without affecting the\nrest of the system.  This can improve the reliability and availability of the\nsystem."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Encapsulation"}),": Actors encapsulate their state and behavior, making it\neasier to reason about and test the code.  This can lead to better code\nquality and maintainability."]}),"\n"]}),(0,o.jsx)(n.h3,{id:"tpl-dataflow",children:"TPL Dataflow"}),(0,o.jsx)(n.p,{children:"The Task Parallel Library (TPL) Dataflow in .NET provides a powerful framework\nfor building high-throughput systems.  Here are some benefits of using TPL\nDataflow for high-throughput systems:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Efficiency"}),": TPL Dataflow is designed to optimize the execution of tasks\nand dataflows.  It automatically manages the execution of tasks based on\navailable resources, reducing unnecessary overhead and maximizing throughput."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scalability"}),": TPL Dataflow allows you to easily scale your system by\nadding or removing processing blocks.  You can dynamically adjust the number\nof processing blocks based on the workload, ensuring that your system can\nhandle varying levels of throughput."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flexibility"}),": TPL Dataflow provides a variety of processing blocks, such\nas buffers, transform blocks, and action blocks, which can be combined and\ncustomized to fit your specific requirements.  This flexibility allows you to\nbuild complex dataflows that can handle different types of data and\nprocessing logic."]}),"\n"]}),(0,o.jsx)(n.h2,{id:"acknowledgements",children:"Acknowledgements"}),(0,o.jsxs)(n.p,{children:["The generated source builds atop\n",(0,o.jsx)(n.a,{href:"https://github.com/gridsum/DataflowEx",children:"DataflowEx"})," for a clean stateful\nobject-oriented wrapper around your pipeline."]}),(0,o.jsx)(n.p,{children:"With thanks to:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Gridsum ",(0,o.jsx)(n.a,{href:"https://github.com/gridsum/DataflowEx",children:"DataflowEx"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/bnayae/Bnaya.SourceGenerator.Template",children:"Bnaya.SourceGenerator.Template"})," (see ",(0,o.jsx)(n.a,{href:"https://blog.stackademic.com/source-code-generators-diy-f04229c59e1a",children:"article"}),")"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Generating source code for actors in C#."})}),"\n",(0,o.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,o.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,o.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,o.jsx)(n.strong,{children:"ActorSrcGen"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="ActorSrcGen" Version="1.1.2" />\n    <PackageReference Include="ActorSrcGen.Abstractions" Version="1.1.2" />\n    <PackageReference Include="Gridsum.DataflowEx" Version="2.0.0" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,o.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ActorSrcGen\\src\\ActorDemo\\Program.cs",label:"Program.cs",children:[(0,o.jsxs)(n.p,{children:["This is the use of ",(0,o.jsx)(n.strong,{children:"ActorSrcGen"})," in ",(0,o.jsx)(n.em,{children:"Program.cs"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing ActorDemo;\nusing Gridsum.DataflowEx;\n\nPerson person = new Person { Name = "Andrei Ignat" };\n\nDayWorkflow dayAndreiIgnat = new ();\nvar input = dayAndreiIgnat.InputBlock;\n//async\nawait dayAndreiIgnat.SendAsync(person);\n//sync\nwhile (dayAndreiIgnat.Call(person))\n{\n    await Task.Delay(100);\n}\n\nConsole.WriteLine("Done");\nConsole.ReadLine();\n'})})]}),(0,o.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ActorSrcGen\\src\\ActorDemo\\DayWorkflow.cs",label:"DayWorkflow.cs",children:[(0,o.jsxs)(n.p,{children:["This is the use of ",(0,o.jsx)(n.strong,{children:"ActorSrcGen"})," in ",(0,o.jsx)(n.em,{children:"DayWorkflow.cs"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using ActorSrcGen;\nusing System.Diagnostics.Metrics;\n\nnamespace ActorDemo;\n[Actor]\npartial class DayWorkflow\n{\n    [FirstStep("StartDay")]\n    //[Receiver]\n    [NextStep(nameof(WashFace))]\n    [NextStep(nameof(LogMessage))]\n    public async Task<Person> StartDay(Person p)\n    {\n        await Task.Delay(1000 );\n        return p;\n    }\n\n    \n\n    [Step]\n    [NextStep(nameof(LogMessage))]\n    [NextStep(nameof(Eat))]\n    public async Task<Person> WashFace(Person p)\n    {\n        await Task.Delay(1000);\n        return p;\n    }\n    \n\n\n    [Step]\n    [NextStep(nameof(LogMessage))]\n    [NextStep(nameof(Sleep))]\n    public async Task<Person> Eat(Person p)\n    {\n        await Task.Delay(1000);\n        return p;\n    }\n    \n\n    [NextStep(nameof(LogMessage))]\n    public async Task<int> Sleep(Person p)\n    {\n        await Task.Delay(1000);\n        return p.Name.Length;\n    }\n\n    [LastStep]\n    public void LogMessage(Person x)\n    {\n        Console.WriteLine("Incoming Message: " + x?.Name);\n    }\n\n\n}\n\n'})})]}),(0,o.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ActorSrcGen\\src\\ActorDemo\\Person.cs",label:"Person.cs",children:[(0,o.jsxs)(n.p,{children:["This is the use of ",(0,o.jsx)(n.strong,{children:"ActorSrcGen"})," in ",(0,o.jsx)(n.em,{children:"Person.cs"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nnamespace ActorDemo;\npublic class Person\n{\n    public string Name { get; set; }\n}\n\n"})})]})]}),"\n",(0,o.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,o.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ActorSrcGen\\src\\ActorDemo\\obj\\GX\\ActorSrcGen\\ActorSrcGen.Generator\\DayWorkflow.generated.cs",label:"DayWorkflow.generated.cs",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// Generated on 2025-07-24\n#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.\n#pragma warning disable CS0108 // hides inherited member.\n\nusing ActorSrcGen;\nusing System.Diagnostics.Metrics;\nnamespace ActorDemo;\nusing System.Threading.Tasks.Dataflow;\nusing Gridsum.DataflowEx;\npublic partial class DayWorkflow : Dataflow<Person>, IActor<Person>\n{\n    public DayWorkflow() : base(DataflowOptions.Default)\n    {\n        _LogMessage = new ActionBlock<Person>(        (Person x) => {\n            try\n            {\n                LogMessage(x);\n            }catch{}\n        },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_LogMessage);\n        _Eat = new TransformManyBlock<Person,Person>(       async (Person x) => {\n           var result = new List<Person>();\n           try\n           {\n               var newValue = await Eat(x);\n               result.Add(newValue);\n           }catch{}\n           return result;\n       },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_Eat);\n        _EatBC = new BroadcastBlock<Person>(    (Person x) => x,\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_EatBC);\n        _WashFace = new TransformManyBlock<Person,Person>(       async (Person x) => {\n           var result = new List<Person>();\n           try\n           {\n               var newValue = await WashFace(x);\n               result.Add(newValue);\n           }catch{}\n           return result;\n       },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_WashFace);\n        _WashFaceBC = new BroadcastBlock<Person>(    (Person x) => x,\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_WashFaceBC);\n        _StartDay = new TransformManyBlock<Person,Person>(       async (Person x) => {\n           var result = new List<Person>();\n           try\n           {\n               var newValue = await StartDay(x);\n               result.Add(newValue);\n           }catch{}\n           return result;\n       },\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_StartDay);\n        _StartDayBC = new BroadcastBlock<Person>(    (Person x) => x,\n            new ExecutionDataflowBlockOptions() {\n                BoundedCapacity = 5,\n                MaxDegreeOfParallelism = 8\n        });\n        RegisterChild(_StartDayBC);\n        _Eat.LinkTo(_EatBC, new DataflowLinkOptions { PropagateCompletion = true });\n        _EatBC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true });\n        _WashFace.LinkTo(_WashFaceBC, new DataflowLinkOptions { PropagateCompletion = true });\n        _WashFaceBC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true });\n        _WashFaceBC.LinkTo(_Eat, new DataflowLinkOptions { PropagateCompletion = true });\n        _StartDay.LinkTo(_StartDayBC, new DataflowLinkOptions { PropagateCompletion = true });\n        _StartDayBC.LinkTo(_LogMessage, new DataflowLinkOptions { PropagateCompletion = true });\n        _StartDayBC.LinkTo(_WashFace, new DataflowLinkOptions { PropagateCompletion = true });\n    }\n\n    ActionBlock<Person> _LogMessage;\n\n    TransformManyBlock<Person,Person> _Eat;\n\n    BroadcastBlock<Person> _EatBC;\n\n    TransformManyBlock<Person,Person> _WashFace;\n\n    BroadcastBlock<Person> _WashFaceBC;\n\n    TransformManyBlock<Person,Person> _StartDay;\n\n    BroadcastBlock<Person> _StartDayBC;\n    public override ITargetBlock<Person> InputBlock { get => _StartDay; }\n    public bool Call(Person input)\n        => InputBlock.Post(input);\n\n    public async Task<bool> Cast(Person input)\n        => await InputBlock.SendAsync(input);\n}\n\n"})})})}),"\n",(0,o.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,o.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(8577).A+"",children:"Download Example project ActorSrcGen "})})}),"\n",(0,o.jsx)(n.h3,{id:"share-actorsrcgen",children:"Share ActorSrcGen"}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FActorSrcGen&quote=ActorSrcGen",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FActorSrcGen&text=ActorSrcGen:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FActorSrcGen",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FActorSrcGen&title=ActorSrcGen",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FActorSrcGen&title=ActorSrcGen&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FActorSrcGen",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ActorSrcGen",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ActorSrcGen"})}),"\n",(0,o.jsx)(n.h3,{id:"in-the-same-category-actor---0-other-generators",children:"In the same category (Actor) - 0 other generators"})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);