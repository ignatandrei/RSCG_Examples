"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9876],{46705:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>p,metadata:()=>m,toc:()=>c});var a=i(87462),n=(i(67294),i(3905)),s=i(73992),r=i(18679),l=i(68839);const p={sidebar_position:1270,title:"127 - TypeUtilities",description:"Pick/Omit for classes ( also have some mapping )",slug:"/TypeUtilities"},o="TypeUtilities  by Yevhenii Serdiuk",m={unversionedId:"RSCG-Examples/TypeUtilities",id:"RSCG-Examples/TypeUtilities",title:"127 - TypeUtilities",description:"Pick/Omit for classes ( also have some mapping )",source:"@site/docs/RSCG-Examples/TypeUtilities.md",sourceDirName:"RSCG-Examples",slug:"/TypeUtilities",permalink:"/RSCG_Examples/v2/docs/TypeUtilities",draft:!1,tags:[],version:"current",sidebarPosition:1270,frontMatter:{sidebar_position:1270,title:"127 - TypeUtilities",description:"Pick/Omit for classes ( also have some mapping )",slug:"/TypeUtilities"},sidebar:"tutorialSidebar",previous:{title:"126 - LinqGen.Generator",permalink:"/RSCG_Examples/v2/docs/LinqGen.Generator"},next:{title:"128 - Farskeptic.AutoCompose",permalink:"/RSCG_Examples/v2/docs/Farskeptic.AutoCompose"}},u={},c=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share TypeUtilities",id:"share-typeutilities",level:3},{value:"In the same category (FunctionalProgramming) - 13 other generators",id:"in-the-same-category-functionalprogramming---13-other-generators",level:3},{value:"cachesourcegenerator",id:"cachesourcegenerator",level:4},{value:"dunet",id:"dunet",level:4},{value:"Dusharp",id:"dusharp",level:4},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:4},{value:"FunicularSwitch",id:"funicularswitch",level:4},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:4},{value:"OneOf",id:"oneof",level:4},{value:"PartiallyApplied",id:"partiallyapplied",level:4},{value:"rscg_queryables",id:"rscg_queryables",level:4},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:4},{value:"Sera.Union",id:"seraunion",level:4},{value:"UnionGen",id:"uniongen",level:4},{value:"UnionsGenerator",id:"unionsgenerator",level:4}],d={toc:c},g="wrapper";function h(e){let{components:t,...p}=e;return(0,n.kt)(g,(0,a.Z)({},d,p,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"typeutilities--by-yevhenii-serdiuk"},"TypeUtilities  by Yevhenii Serdiuk"),(0,n.kt)(l.Z,{toc:c,mdxType:"TOCInline"}),(0,n.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/TypeUtilities/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/TypeUtilities?label=TypeUtilities",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/DragonsLord/TypeUtilities"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/DragonsLord/TypeUtilities?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/DragonsLord/TypeUtilities?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"TypeUtilities")),(0,n.kt)("p",{parentName:"admonition"},"A set of type utilities to transform types.\nInclude utils like:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre"},"            - Pick\n            - Omit\n")),(0,n.kt)("p",{parentName:"admonition"},"Author: Yevhenii Serdiuk"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/TypeUtilities/"},"https://www.nuget.org/packages/TypeUtilities/")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/DragonsLord/TypeUtilities"},"https://github.com/DragonsLord/TypeUtilities")),(0,n.kt)("p",{parentName:"admonition"},"Source : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/DragonsLord/TypeUtilities"},"https://github.com/DragonsLord/TypeUtilities"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("h1",{parentName:"admonition",id:"typeutilities"},"TypeUtilities"),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/DragonsLord/TypeUtilities/actions/workflows/build.yml"},(0,n.kt)("img",{parentName:"a",src:"https://github.com/DragonsLord/TypeUtilities/actions/workflows/build.yml/badge.svg",alt:"Build"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/TypeUtilities/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/TypeUtilities.svg",alt:"NuGet"}))),(0,n.kt)("p",{parentName:"admonition"},"Type Utilities provides a source generators to create/transform one type into another."),(0,n.kt)("p",{parentName:"admonition"},"This project was inspired by the ",(0,n.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html"},"TypeScript Utility Types")," and was ment to bring similar functionality to the C# via source generators"),(0,n.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,n.kt)("p",{parentName:"admonition"},"To use the the TypeUtilities, install the ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/TypeUtilities"},"TypeUtilities package")," into your project."),(0,n.kt)("p",{parentName:"admonition"},"To install the packages, add the references to your ",(0,n.kt)("em",{parentName:"p"},"csproj")," file, for example by running"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package TypeUtilities\n")),(0,n.kt)("p",{parentName:"admonition"},"This adds a ",(0,n.kt)("inlineCode",{parentName:"p"},"<PackageReference>")," to your project."),(0,n.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,n.kt)("p",{parentName:"admonition"},"TypeUtilities provides several attributes:"),(0,n.kt)("h3",{parentName:"admonition",id:"map"},"Map"),(0,n.kt)("p",{parentName:"admonition"},"Map Attribute simply maps memebers of the source type to the target type using specified format."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'using TypeUtilities;\nusing TypeUtilities.Abstractions;\n\npublic class SourceType\n{\n    public Guid Id { get; }\n    public int Value { get; set; }\n    public DateTime Created { get; set; }\n}\n\n[Map(typeof(SourceType))]\npublic partial class SimpleMap\n{\n}\n\n// Generated result\n//----- SimpleMap.map.SourceType.g.cs\npublic partial class SimpleMap\n{\n    public System.Guid Id { get; }\n    public int Value { get; set; }\n    public System.DateTime Created { get; set; }\n}\n// --------------------\n\n[Map(typeof(SourceType),\n      MemberDeclarationFormat = $"{Tokens.Accessibility} string Mapped{Tokens.Name}{Tokens.Accessors}",\n      MemberKindSelection = MemberKindFlags.ReadonlyProperty\n    )]\npublic partial class AdvancedMap\n{\n}\n\n// Generated result\n//----- AdvancedMap.map.SourceType.g.cs\npublic partial class AdvancedMap\n{\n    public string MappedId { get; }\n}\n// --------------------\n')),(0,n.kt)("p",{parentName:"admonition"},"More detailed description for Map is provided ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/DragonsLord/TypeUtilities/docs/Map.md"},"here")),(0,n.kt)("h3",{parentName:"admonition",id:"omit"},"Omit"),(0,n.kt)("p",{parentName:"admonition"},"Omit Attribute is similar to Map but also accepts an explicit list of members that should be exluded"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'using TypeUtilities;\n\npublic class SourceType\n{\n    public Guid Id { get; }\n    public int Value { get; set; }\n    public DateTime Created { get; set; }\n}\n\n[Omit(typeof(SourceType), "Value")]\npublic partial class TargetType\n{\n  public int MyValue { get; set; }\n}\n\n// Generated result\n//----- TargetType.omit.SourceType.g.cs\npublic partial class TargetType\n{\n    public Guid Id { get; }\n    public DateTime Created { get; set; }\n}\n')),(0,n.kt)("h3",{parentName:"admonition",id:"pick"},"Pick"),(0,n.kt)("p",{parentName:"admonition"},"Pick Attribute is similar to Map but also requires to explicitly specify all members that should be included"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'using TypeUtilities;\n\npublic class SourceType\n{\n    public Guid Id { get; }\n    public int Value { get; set; }\n    public DateTime Created { get; set; }\n}\n\n[Pick(typeof(SourceType), "Id", nameof(SourceType.Value))]\npublic partial class TargetType\n{\n}\n\n// Generated result\n//----- TargetType.omit.SourceType.g.cs\npublic partial class TargetType\n{\n    public Guid Id { get; }\n    public int Value { get; set; }\n}\n'))),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Pick/Omit for classes ( also have some mapping )")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"TypeUtilities")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    <ItemGroup>\n      <PackageReference Include="TypeUtilities" Version="0.0.1" />\n    </ItemGroup>\n</Project>\n\n'))),(0,n.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypeUtilities\\src\\UtilDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"TypeUtilities")," in ",(0,n.kt)("em",{parentName:"p"},"Program.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using UtilDemo;\n\nvar p=new PersonFull();\np.FirstName="Andrei";\np.LastName="Ignat";\n//Person1 p1=(Person1)p ;\n//Person2 p2=(Person2)p ;\nPerson1 p1 = new();\np1.FirstName = p.FirstName;\n\nPerson2 p2=new();\np2.LastName = p.LastName;\n\n\nConsole.WriteLine(p1.FirstName);\nConsole.WriteLine(p2.LastName);\n'))),(0,n.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypeUtilities\\src\\UtilDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"TypeUtilities")," in ",(0,n.kt)("em",{parentName:"p"},"Person.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using TypeUtilities;\nusing static TypeUtilities.Abstractions.MemberDeclarationFormats;\nusing TypeUtilities.Abstractions;\n\nnamespace UtilDemo;\npublic class PersonFull\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public int Salary { get; set; }\n\n}\n\n[Map(typeof(PersonFull),\n      MemberDeclarationFormat = $"{Tokens.Accessibility} string Mapped{Tokens.Name}{Tokens.Accessors}",\n      MemberKindSelection = MemberKindFlags.AnyProperty\n    )]\n[Omit(typeof(PersonFull), nameof(PersonFull.Salary))]\npublic partial class Person2\n{\n    \n}\n\n[Pick(typeof(PersonFull), nameof(PersonFull.FirstName), nameof(PersonFull.LastName))]\npublic partial class Person1\n{\n    \n}\n\n\n')))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypeUtilities\\src\\UtilDemo\\obj\\GX\\TypeUtilities.SourceGenerators\\TypeUtilities.SourceGenerators.TypeUtilitiesSourceGenerator\\Person1.pick.PersonFull.g.cs",label:"Person1.pick.PersonFull.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace UtilDemo;\n\npublic partial class Person1\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n\n"))),(0,n.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypeUtilities\\src\\UtilDemo\\obj\\GX\\TypeUtilities.SourceGenerators\\TypeUtilities.SourceGenerators.TypeUtilitiesSourceGenerator\\Person2.map.PersonFull.g.cs",label:"Person2.map.PersonFull.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace UtilDemo;\n\npublic partial class Person2\n{\n    public string MappedFirstName { get; set; }\n    public string MappedLastName { get; set; }\n    public string MappedSalary { get; set; }\n}\n\n"))),(0,n.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypeUtilities\\src\\UtilDemo\\obj\\GX\\TypeUtilities.SourceGenerators\\TypeUtilities.SourceGenerators.TypeUtilitiesSourceGenerator\\Person2.omit.PersonFull.g.cs",label:"Person2.omit.PersonFull.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace UtilDemo;\n\npublic partial class Person2\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n\n")))),(0,n.kt)("h2",{id:"usefull"},"Usefull"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:i(71048).Z},"Download Example project TypeUtilities "))),(0,n.kt)("h3",{id:"share-typeutilities"},"Share TypeUtilities"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypeUtilities&quote=TypeUtilities",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypeUtilities&text=TypeUtilities:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypeUtilities",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypeUtilities&title=TypeUtilities",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypeUtilities&title=TypeUtilities&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypeUtilities",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TypeUtilities"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TypeUtilities")),(0,n.kt)("h3",{id:"in-the-same-category-functionalprogramming---13-other-generators"},"In the same category (FunctionalProgramming) - 13 other generators"),(0,n.kt)("h4",{id:"cachesourcegenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/cachesourcegenerator"},"cachesourcegenerator")),(0,n.kt)("h4",{id:"dunet"},(0,n.kt)("a",{parentName:"h4",href:"/docs/dunet"},"dunet")),(0,n.kt)("h4",{id:"dusharp"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Dusharp"},"Dusharp")),(0,n.kt)("h4",{id:"funckydiscriminatedunion"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Funcky.DiscriminatedUnion"},"Funcky.DiscriminatedUnion")),(0,n.kt)("h4",{id:"funicularswitch"},(0,n.kt)("a",{parentName:"h4",href:"/docs/FunicularSwitch"},"FunicularSwitch")),(0,n.kt)("h4",{id:"nsourcegeneratorsuniontypes"},(0,n.kt)("a",{parentName:"h4",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,n.kt)("h4",{id:"oneof"},(0,n.kt)("a",{parentName:"h4",href:"/docs/OneOf"},"OneOf")),(0,n.kt)("h4",{id:"partiallyapplied"},(0,n.kt)("a",{parentName:"h4",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,n.kt)("h4",{id:"rscg_queryables"},(0,n.kt)("a",{parentName:"h4",href:"/docs/rscg_queryables"},"rscg_queryables")),(0,n.kt)("h4",{id:"rscg_utils_memo"},(0,n.kt)("a",{parentName:"h4",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")),(0,n.kt)("h4",{id:"seraunion"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Sera.Union"},"Sera.Union")),(0,n.kt)("h4",{id:"uniongen"},(0,n.kt)("a",{parentName:"h4",href:"/docs/UnionGen"},"UnionGen")),(0,n.kt)("h4",{id:"unionsgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/UnionsGenerator"},"UnionsGenerator")))}h.isMDXComponent=!0},71048:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/files/TypeUtilities-22d1e482603030dea56bfeef88f20d07.zip"}}]);