"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[8796],{14043:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(87462),i=(n(67294),n(3905)),r=n(73992),o=n(18679),s=n(68839);const l={sidebar_position:370,title:"37 - AutoRegisterInject",description:"Generating class DI registration from attributes",slug:"/AutoRegisterInject"},c="AutoRegisterInject  by Patrick Klaeren",p={unversionedId:"RSCG-Examples/AutoRegisterInject",id:"RSCG-Examples/AutoRegisterInject",title:"37 - AutoRegisterInject",description:"Generating class DI registration from attributes",source:"@site/docs/RSCG-Examples/AutoRegisterInject.md",sourceDirName:"RSCG-Examples",slug:"/AutoRegisterInject",permalink:"/RSCG_Examples/v2/docs/AutoRegisterInject",draft:!1,tags:[],version:"current",sidebarPosition:370,frontMatter:{sidebar_position:370,title:"37 - AutoRegisterInject",description:"Generating class DI registration from attributes",slug:"/AutoRegisterInject"},sidebar:"tutorialSidebar",previous:{title:"36 - ProxyGen",permalink:"/RSCG_Examples/v2/docs/ProxyGen"},next:{title:"38 - EnumClass",permalink:"/RSCG_Examples/v2/docs/EnumClass"}},m={},u=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share AutoRegisterInject",id:"share-autoregisterinject",level:3},{value:"In the same category (DependencyInjection) - 3 other generators",id:"in-the-same-category-dependencyinjection---3-other-generators",level:3},{value:"FactoryGenerator",id:"factorygenerator",level:4},{value:"Injectio",id:"injectio",level:4},{value:"jab",id:"jab",level:4}],d={toc:u},g="wrapper";function k(e){let{components:t,...l}=e;return(0,i.kt)(g,(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"autoregisterinject--by-patrick-klaeren"},"AutoRegisterInject  by Patrick Klaeren"),(0,i.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/AutoRegisterInject/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/AutoRegisterInject?label=AutoRegisterInject",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patrickklaeren/AutoRegisterInject"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/patrickklaeren/AutoRegisterInject?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/patrickklaeren/AutoRegisterInject?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"AutoRegisterInject")),(0,i.kt)("p",{parentName:"admonition"},"C# Source Generator to automatically register dependencies in Microsoft Dependency Injection Service Collection"),(0,i.kt)("p",{parentName:"admonition"},"Author: Patrick Klaeren"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/AutoRegisterInject/"},"https://www.nuget.org/packages/AutoRegisterInject/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patrickklaeren/AutoRegisterInject"},"https://github.com/patrickklaeren/AutoRegisterInject")),(0,i.kt)("p",{parentName:"admonition"},"Source : ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/patrickklaeren/AutoRegisterInject"},"https://github.com/patrickklaeren/AutoRegisterInject"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h1",{parentName:"admonition",id:"autoregisterinject"},"AutoRegisterInject"),(0,i.kt)("p",{parentName:"admonition"},"AutoRegisterInject, also referred to as ARI, is a C# source generator that will automatically create Microsoft.Extensions.DependencyInjection registrations for types marked with attributes."),(0,i.kt)("p",{parentName:"admonition"},"This is a compile time alternative to reflection/assembly scanning for your injections or manually adding to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceCollection")," every time a new type needs to be registered."),(0,i.kt)("p",{parentName:"admonition"},"For example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"namespace MyProject;\n\n[RegisterScoped]\npublic class Foo { }\n")),(0,i.kt)("p",{parentName:"admonition"},"will automatically generate an extension method called ",(0,i.kt)("inlineCode",{parentName:"p"},"AutoRegister()")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"IServiceProvider"),", that registers ",(0,i.kt)("inlineCode",{parentName:"p"},"Foo"),", as scoped."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"internal IServiceCollection AutoRegister(this IServiceCollection serviceCollection)\n{\n    serviceCollection.AddScoped<Foo>();\n    return serviceCollection;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"In larger projects, dependency injection registration becomes tedious and in team situations can lead to merge conflicts which can be easily avoided."),(0,i.kt)("p",{parentName:"admonition"},"AutoRegisterInject moves the responsibility of service registration to the owning type rather than external service collection configuration, giving control and oversight of the type that is going to be registered with the container."),(0,i.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,i.kt)("p",{parentName:"admonition"},"Install the ",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/AutoRegisterInject"},"Nuget")," package, and start decorating classes with ARI attributes."),(0,i.kt)("p",{parentName:"admonition"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"dotnet add package AutoRegisterInject")," or add a package reference manually:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<PackageReference Include="AutoRegisterInject" />\n')),(0,i.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,i.kt)("p",{parentName:"admonition"},"Classes should be decorated with one of four attributes:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterScoped]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterSingleton]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterTransient]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterHostedService]"))),(0,i.kt)("p",{parentName:"admonition"},"Register a class:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[RegisterScoped]\nclass Foo;\n")),(0,i.kt)("p",{parentName:"admonition"},"and get the following output:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"serviceCollection.AddScoped<Foo>();\n")),(0,i.kt)("p",{parentName:"admonition"},"Update the service collection by invoking:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"var serviceCollection = new ServiceCollection();\nserviceCollection.AutoRegister();\nserviceCollection.BuildServiceProvider();\n")),(0,i.kt)("p",{parentName:"admonition"},"You can now inject ",(0,i.kt)("inlineCode",{parentName:"p"},"Foo")," as a dependency and have this resolved as scoped."),(0,i.kt)("p",{parentName:"admonition"},"Alternatively, you can register hosted services by:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[RegisterHostedService]\nclass Foo;\n")),(0,i.kt)("p",{parentName:"admonition"},"and get:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"serviceCollection.AddHostedService<Foo>();\n")),(0,i.kt)("h3",{parentName:"admonition",id:"register-as-interface"},"Register as interface"),(0,i.kt)("p",{parentName:"admonition"},"Implement one or many interfaces on your target class:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[RegisterTransient]\nclass Bar : IBar;\n")),(0,i.kt)("p",{parentName:"admonition"},"and get the following output:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"serviceCollection.AddTransient<IBar, Bar>();\n")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Important note:")," AutoRegisterInject is opinionated and ",(0,i.kt)("inlineCode",{parentName:"p"},"Bar")," will only be registered with its implemented interface. ARI will ",(0,i.kt)("strong",{parentName:"p"},"not")," register ",(0,i.kt)("inlineCode",{parentName:"p"},"Bar"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Bar")," will always need to be resolved from ",(0,i.kt)("inlineCode",{parentName:"p"},"IBar")," in your code."),(0,i.kt)("p",{parentName:"admonition"},"Implementing multiple interfaces will have the implementing type be registered for each distinct interface."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[RegisterTransient]\nclass Bar : IBar, IFoo, IBaz;\n")),(0,i.kt)("p",{parentName:"admonition"},"will output the following:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"serviceCollection.AddTransient<IBar, Bar>();\nserviceCollection.AddTransient<IFoo, Bar>();\nserviceCollection.AddTransient<IBaz, Bar>();\n")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Important note:")," AutoRegisterInject is opinionated and ",(0,i.kt)("inlineCode",{parentName:"p"},"Bar")," will only be registered with its implemented interfaces. ARI will ",(0,i.kt)("strong",{parentName:"p"},"not")," register ",(0,i.kt)("inlineCode",{parentName:"p"},"Bar"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Bar")," will always need to be resolved from ",(0,i.kt)("inlineCode",{parentName:"p"},"IBar"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"IFoo")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"IBaz")," in your code."),(0,i.kt)("h3",{parentName:"admonition",id:"multiple-assemblies"},"Multiple assemblies"),(0,i.kt)("p",{parentName:"admonition"},"In addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"AutoRegister")," extension method, every assembly that AutoRegisterInject is a part of, a ",(0,i.kt)("inlineCode",{parentName:"p"},"AutoRegisterFromAssemblyName")," will be generated. This allows you to configure your service collection from one, main, executing assembly."),(0,i.kt)("p",{parentName:"admonition"},"Given 3 assemblies, ",(0,i.kt)("inlineCode",{parentName:"p"},"MyProject.Main"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MyProject.Services"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MyProject.Data"),", you can configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceCollection")," as such:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"var serviceCollection = new ServiceCollection();\nserviceCollection.AutoRegisterFromMyProjectMain();\nserviceCollection.AutoRegisterFromMyProjectServices();\nserviceCollection.AutoRegisterFromMyProjectData();\nserviceCollection.BuildServiceProvider();\n")),(0,i.kt)("p",{parentName:"admonition"},"AutoRegisterInject will remove illegal characters from assembly names in order to generate legal C# method names. ",(0,i.kt)("inlineCode",{parentName:"p"},","),", ",(0,i.kt)("inlineCode",{parentName:"p"},".")," and ",(0,i.kt)("inlineCode",{parentName:"p"}," ")," will be removed."),(0,i.kt)("h2",{parentName:"admonition",id:"license"},"License"),(0,i.kt)("p",{parentName:"admonition"},"AutoRegisterInject is MIT licensed. Do with it what you please under the terms of MIT.")),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Generating class DI registration from attributes")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"AutoRegisterInject")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="AutoRegisterInject" Version="1.2.1" />\n    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="7.0.0" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\AutoRegisterInject\\src\\AutoRegisterInjectDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"AutoRegisterInject")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing AutoRegisterInjectDemo;\nusing Microsoft.Extensions.DependencyInjection;\n\nConsole.WriteLine("Hello, World!");\nServiceCollection sc = new();\nsc.AutoRegisterFromAutoRegisterInjectDemo();\nvar b=sc.BuildServiceProvider();\nvar con = b.GetRequiredService<DatabaseCon>();\nvar db=b.GetRequiredService<IDatabase>();\ndb.Open();\n\n'))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\AutoRegisterInject\\src\\AutoRegisterInjectDemo\\Database.cs",label:"Database.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"AutoRegisterInject")," in ",(0,i.kt)("em",{parentName:"p"},"Database.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'namespace AutoRegisterInjectDemo;\n\n[RegisterScoped]\ninternal class Database : IDatabase\n{\n    private readonly DatabaseCon con;\n\n    public Database(DatabaseCon con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open {con.Connection}");\n    }\n\n}\n\n\n'))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\AutoRegisterInject\\src\\AutoRegisterInjectDemo\\IDatabase.cs",label:"IDatabase.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"AutoRegisterInject")," in ",(0,i.kt)("em",{parentName:"p"},"IDatabase.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace AutoRegisterInjectDemo\n{\n    internal interface IDatabase\n    {\n        void Open();\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\AutoRegisterInject\\src\\AutoRegisterInjectDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"AutoRegisterInject")," in ",(0,i.kt)("em",{parentName:"p"},"DatabaseCon.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace AutoRegisterInjectDemo;\n\n[RegisterSingleton]\ninternal class DatabaseCon\n{\n    public string? Connection { get; set; }\n}\n\n\n")))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\AutoRegisterInject\\src\\AutoRegisterInjectDemo\\obj\\GX\\AutoRegisterInject\\AutoRegisterInject.Generator\\AutoRegisterInject.Attributes.g.cs",label:"AutoRegisterInject.Attributes.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated>\n//     Automatically generated by AutoRegisterInject.\n//     Changes made to this file may be lost and may cause undesirable behaviour.\n// </auto-generated>\n[System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\ninternal sealed class RegisterScopedAttribute : System.Attribute { }\n[System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\ninternal sealed class RegisterSingletonAttribute : System.Attribute { }\n[System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\ninternal sealed class RegisterTransientAttribute : System.Attribute { }\n[System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\ninternal sealed class RegisterHostedServiceAttribute : System.Attribute { }\n"))),(0,i.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\AutoRegisterInject\\src\\AutoRegisterInjectDemo\\obj\\GX\\AutoRegisterInject\\AutoRegisterInject.Generator\\AutoRegisterInject.ServiceCollectionExtension.g.cs",label:"AutoRegisterInject.ServiceCollectionExtension.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated>\n//     Automatically generated by AutoRegisterInject.\n//     Changes made to this file may be lost and may cause undesirable behaviour.\n// </auto-generated>\nusing Microsoft.Extensions.DependencyInjection;\npublic static class AutoRegisterInjectServiceCollectionExtension\n{\n    public static Microsoft.Extensions.DependencyInjection.IServiceCollection AutoRegisterFromAutoRegisterInjectDemo(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)\n    {\n        return AutoRegister(serviceCollection);\n    }\n\n    internal static Microsoft.Extensions.DependencyInjection.IServiceCollection AutoRegister(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)\n    {\n        serviceCollection.AddScoped<AutoRegisterInjectDemo.IDatabase, AutoRegisterInjectDemo.Database>();\nserviceCollection.AddSingleton<AutoRegisterInjectDemo.DatabaseCon>();\n        return serviceCollection;\n    }\n}\n")))),(0,i.kt)("h2",{id:"usefull"},"Usefull"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:n(46258).Z},"Download Example project AutoRegisterInject "))),(0,i.kt)("h3",{id:"share-autoregisterinject"},"Share AutoRegisterInject"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FAutoRegisterInject&quote=AutoRegisterInject",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FAutoRegisterInject&text=AutoRegisterInject:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FAutoRegisterInject",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FAutoRegisterInject&title=AutoRegisterInject",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FAutoRegisterInject&title=AutoRegisterInject&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FAutoRegisterInject",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoRegisterInject"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/AutoRegisterInject")),(0,i.kt)("h3",{id:"in-the-same-category-dependencyinjection---3-other-generators"},"In the same category (DependencyInjection) - 3 other generators"),(0,i.kt)("h4",{id:"factorygenerator"},(0,i.kt)("a",{parentName:"h4",href:"/docs/FactoryGenerator"},"FactoryGenerator")),(0,i.kt)("h4",{id:"injectio"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Injectio"},"Injectio")),(0,i.kt)("h4",{id:"jab"},(0,i.kt)("a",{parentName:"h4",href:"/docs/jab"},"jab")))}k.isMDXComponent=!0},46258:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/AutoRegisterInject-998aaa9a4da68d0084bb265cc29c6d14.zip"}}]);