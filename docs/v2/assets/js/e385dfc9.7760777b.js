"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7764],{66986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>x,frontMatter:()=>h,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"RSCG-Examples/SKPromptGenerator","title":"219 - SKPromptGenerator","description":"Generate typed prompts for Semantic Kernel","source":"@site/docs/RSCG-Examples/SKPromptGenerator.md","sourceDirName":"RSCG-Examples","slug":"/SKPromptGenerator","permalink":"/RSCG_Examples/v2/docs/SKPromptGenerator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2190,"frontMatter":{"sidebar_position":2190,"title":"219 - SKPromptGenerator","description":"Generate typed prompts for Semantic Kernel","slug":"/SKPromptGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"218 - Nino","permalink":"/RSCG_Examples/v2/docs/Nino"},"next":{"title":"v1","permalink":"/RSCG_Examples/v2/docs/v1"}}');var s=n(74848),a=n(28453),i=n(11470),o=n(19365),l=n(14252);function c(e){const t={a:"a",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"category-ai-has-the-following-generators",children:'Category "AI" has the following generators:'}),"\n",(0,s.jsxs)(t.p,{children:["1 ",(0,s.jsx)(t.a,{href:"/docs/SKPromptGenerator",children:"SKPromptGenerator"})]}),"\n",(0,s.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"/docs/Categories/AI",children:"AI"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}const h={sidebar_position:2190,title:"219 - SKPromptGenerator",description:"Generate typed prompts for Semantic Kernel",slug:"/SKPromptGenerator"},d="SKPromptGenerator  by Charlie Chen",m={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Author",id:"author",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Motivation",id:"motivation",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Installing",id:"installing",level:2},{value:"Using",id:"using",level:2},{value:"Typed Parameters",id:"typed-parameters",level:3},{value:"Including History",id:"including-history",level:3},{value:"Custom Base Class",id:"custom-base-class",level:2},{value:"Prompt Execution Settings",id:"prompt-execution-settings",level:2},{value:"Using the Sample App",id:"using-the-sample-app",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share SKPromptGenerator",id:"share-skpromptgenerator",level:3},{value:"Category &quot;AI&quot; has the following generators:",id:"category-ai-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function g(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"skpromptgenerator--by-charlie-chen",children:"SKPromptGenerator  by Charlie Chen"})}),"\n",(0,s.jsx)(l.A,{toc:u}),"\n",(0,s.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/SKPromptGenerator/",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/SKPromptGenerator?label=SKPromptGenerator",alt:"Nuget"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/CharlieDigital/SKPromptGenerator",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/CharlieDigital/SKPromptGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(t.img,{src:"https://img.shields.io/github/stars/CharlieDigital/SKPromptGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["Name: ",(0,s.jsx)(t.strong,{children:"SKPromptGenerator"})]}),(0,s.jsx)(t.p,{children:"A source generator to automatically create classes from string prompts."}),(0,s.jsx)(t.p,{children:"Author: Charlie Chen"}),(0,s.jsxs)(t.p,{children:["NuGet:\n",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/SKPromptGenerator/",children:"https://www.nuget.org/packages/SKPromptGenerator/"})})]}),(0,s.jsxs)(t.p,{children:["You can find more details at ",(0,s.jsx)(t.a,{href:"https://github.com/CharlieDigital/SKPromptGenerator",children:"https://github.com/CharlieDigital/SKPromptGenerator"})]}),(0,s.jsxs)(t.p,{children:["Source: ",(0,s.jsx)(t.a,{href:"https://github.com/CharlieDigital/SKPromptGenerator",children:"https://github.com/CharlieDigital/SKPromptGenerator"})]})]}),"\n",(0,s.jsx)(t.h3,{id:"author",children:"Author"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["Charlie Chen\n",(0,s.jsx)(t.img,{src:"https://github.com/CharlieDigital.png",alt:"Alt text"})]})}),"\n",(0,s.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsx)(t.h1,{id:"semantic-kernel-sk-prompt-generator",children:"Semantic Kernel (SK) Prompt Generator"}),(0,s.jsx)(t.p,{children:"SKPromptGenerator is a C# source generator which automatically creates strongly-typed classes for your string prompt templates."}),(0,s.jsxs)(t.p,{children:["It is intended to be used with ",(0,s.jsx)(t.a,{href:"https://github.com/microsoft/semantic-kernel",children:"Semantic Kernel"}),"."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/user-attachments/assets/a3727ef4-6880-4939-be40-5c5c08948a3e",children:"https://github.com/user-attachments/assets/a3727ef4-6880-4939-be40-5c5c08948a3e"})}),(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\ud83d\udca1 NOTE: As of version 4, the token format is switched from ",(0,s.jsx)(t.code,{children:"{name}"})," to ",(0,s.jsx)(t.code,{children:"{{$name}}"})," to match Semantic Kernel."]}),"\n"]}),(0,s.jsx)(t.h2,{id:"motivation",children:"Motivation"}),(0,s.jsx)(t.p,{children:"When working with prompts, you'll end up doing a lot of string templating and repetitive code."}),(0,s.jsx)(t.p,{children:"Wouldn't it be nice if you could just have a strongly-typed class for each prompt automatically created using the prompt?"}),(0,s.jsx)(t.p,{children:"This library does exactly that."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'public static class Prompts\n{\n  // Define a prompt\n  [PromptTemplate]\n  public const string Capitol = """\n    What is the capitol of {{$state}} {{$country}}?\n    Respond directly in a single line\n    """;\n}\n\n// Execute the prompt passing in a Semantic Kernel instance.\nvar capitol = await new CapitolPrompt(\n  state: "NJ",\n  country: "USA"\n).ExecuteAsync(kernel);\n'})}),(0,s.jsx)(t.p,{children:"The tokens in the prompt string become named parameters on the class constructor \ud83c\udf89"}),(0,s.jsx)(t.h2,{id:"limitations",children:"Limitations"}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Your prompt must be a ",(0,s.jsx)(t.code,{children:"const string"})," because the generator needs to be able to read the string in the source."]}),"\n",(0,s.jsxs)(t.li,{children:["Your prompts must live in some class in a namespace.  If you get the error ",(0,s.jsx)(t.code,{children:"error CS1001: Identifier expected"}),", then you are probably missing a namespace around your prompt."]}),"\n",(0,s.jsxs)(t.li,{children:["You must add a dependency to ",(0,s.jsx)(t.code,{children:"Microsoft.SemanticKernel"})," since the ",(0,s.jsx)(t.code,{children:"ExecuteAsync"})," method requires the ",(0,s.jsx)(t.code,{children:"Kernel"})," instance."]}),"\n",(0,s.jsxs)(t.li,{children:["Currently only targets .NET 8; considering ",(0,s.jsx)(t.code,{children:"netstandard2.0"}),"."]}),"\n"]}),(0,s.jsx)(t.h2,{id:"installing",children:"Installing"}),(0,s.jsx)(t.p,{children:"This generator is built for .NET 8."}),(0,s.jsx)(t.p,{children:"To install:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"dotnet add package SKPromptGenerator\n"})}),(0,s.jsxs)(t.p,{children:["For the latest releases, see: ",(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/SKPromptGenerator",children:"https://www.nuget.org/packages/SKPromptGenerator"})]}),(0,s.jsx)(t.h2,{id:"using",children:"Using"}),(0,s.jsxs)(t.p,{children:["This repository includes a sample project under the ",(0,s.jsx)(t.code,{children:"/app"})," directory."]}),(0,s.jsx)(t.p,{children:"To use, create a new console app:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"mkdir sk-prompt-gen-test\ncd sk-prompt-gen-test\ndotnet new console\ndotnet add package SKPromptGenerator\ndotnet add package Microsoft.SemanticKernel\n"})}),(0,s.jsx)(t.p,{children:"In the project, create a class like so (you can call your class whatever you want):"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'namespace SomeNamespace;\n\npublic static class Prompts\n{\n  [PromptTemplate]\n  public const string Capitol = """\n    What is the capitol of {{$state}} {{$country}}?\n    Respond directly in a single line\n    When writing the state, always write it as the full name\n    Write your output in the format: The capitol of <STATE> is: <CAPITOL>.\n    For example: The capitol of California is: Sacramento.\n    """;\n}\n'})}),(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\ud83d\udca1 Note the usage of a namespace for the class.  The prompt need not be in a standalone class.  It can also be placed in an existing ",(0,s.jsx)(t.code,{children:"Controller"})," (for example)"]}),"\n"]}),(0,s.jsxs)(t.p,{children:["In the code above, we've created a prompt with two tokens: ",(0,s.jsx)(t.code,{children:"{{$state}}"})," and ",(0,s.jsx)(t.code,{children:"{{$country}}"}),"."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"[PromptTemplate]"})," attribute instructs the generator to create a class like so:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'using System;\nusing Microsoft.SemanticKernel.Connectors.OpenAI;\nusing SKPromptGenerator;\n\nnamespace SomeNamespace;\n\npublic partial class CapitolPrompt(\n  string state, string country\n) : PromptTemplateBase\n{\n  public override string Text => $$"""\nWhat is the capitol of {{state}} {{country}}?\nRespond directly in a single line\nWhen writing the state, always write it as the full name\nWrite your output in the format: The capitol of <STATE> is: <CAPITOL>.\nFor example: The capitol of California is: Sacramento.\n""";\n\n  public override OpenAIPromptExecutionSettings Settings => new OpenAIPromptExecutionSettings\n  {\n    MaxTokens = 500,\n    Temperature = 0.5d,\n    TopP = 0d,\n  };\n}\n'})}),(0,s.jsxs)(t.p,{children:["Note the two class parameters ",(0,s.jsx)(t.code,{children:"state"})," and ",(0,s.jsx)(t.code,{children:"country"})," which are extracted from the prompt template are now string literal tokens."]}),(0,s.jsx)(t.p,{children:"Now we can use the prompt like so:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'var capitol = await new CapitolPrompt("NJ", "USA").ExecuteAsync(kernel);\n\nConsole.WriteLine($"{capitol}");\n// The capitol of New Jersey is: Trenton.\n\ncapitol = await new CapitolPrompt("NY", "USA").ExecuteAsync(kernel);\n\nConsole.WriteLine($"{capitol}");\n// The capitol of New York is: Albany.\n'})}),(0,s.jsx)(t.p,{children:"If your prompt returns JSON, we can also deserialize it into an object:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'// Our model that we are serializing to\npublic record CapitolResponse(string Country, string State, string Capitol);\n\n// Use ExecuteWithJsonAsync if we also want the raw JSON\nvar (sacramento, json) = await new CapitolJsonPrompt(\n  "CA",\n  "US"\n).ExecuteWithJsonAsync<CapitolResponse>(kernel);\n'})}),(0,s.jsx)(t.p,{children:"NOTE: The underlying code will strip Markdown fences so if you are expecting your result to contain markdown, it will be stripped."}),(0,s.jsx)(t.h3,{id:"typed-parameters",children:"Typed Parameters"}),(0,s.jsx)(t.p,{children:"If you want to use typed parameters, you can append the type to the parameter token:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[PromptTemplate]\npublic const string Cities = """\n  Write a list of {{$count:int}} cities in {{$region}}, {{$country}}\n  Write each city on a separate line\n  Start you response with: Sure, here are {{$count:int}} cities in {{$region}}, {{$country}}\n  """;\n'})}),(0,s.jsx)(t.p,{children:"This will generate the signature:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"public partial class CitiesPrompt(\n  int count, string region, string country\n) : PromptTemplateBase\n"})}),(0,s.jsx)(t.p,{children:"Which can then be invoked with a typed, integer parameter for count:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'var njCities = await new CitiesPrompt(4, "NJ", "USA").ExecuteAsync(kernel);\n'})}),(0,s.jsx)(t.p,{children:"This will output:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Sure, here are 4 cities in NJ, USA:\n\n1. Newark\n2. Jersey City\n3. Paterson\n4. Elizabeth\n"})}),(0,s.jsxs)(t.p,{children:["Note that if you are using your own types, those types should be added using a global ",(0,s.jsx)(t.code,{children:"using"})," statement or specify the full type name since the generated class does not know about your namespaces."]}),(0,s.jsxs)(t.p,{children:["(See the example in the ",(0,s.jsx)(t.code,{children:"/app"})," directory for usage)"]}),(0,s.jsx)(t.h3,{id:"including-history",children:"Including History"}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ExecuteAsync"})," method takes a ",(0,s.jsx)(t.code,{children:"historyBuilder"})," parameter which will receives a ",(0,s.jsx)(t.code,{children:"ChatHistory"})," instance"]}),(0,s.jsx)(t.p,{children:"The unit tests show how this can be used:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[Fact]\npublic async void History_Builder_Test()\n{\n  var response = await new HistoryTmplPrompt("Spencer").ExecuteAsync(\n    new Kernel(),\n    // \ud83d\udc47 Here we can build the chat history up before adding the new user prompt\n    historyBuilder: (h) =>\n    {\n      h.Add(new ChatMessageContent(AuthorRole.User, "User question"));\n      h.Add(new ChatMessageContent(AuthorRole.System, "System response"));\n    }\n  );\n\n  // Fake test where we are just going to return the history instead\n  Assert.Equal("User question\\nSystem response", response);\n}\n'})}),(0,s.jsxs)(t.p,{children:["You can do the retrieval of the actual history ",(0,s.jsx)(t.em,{children:"before"})," the block and then do the history building in the block."]}),(0,s.jsx)(t.h2,{id:"custom-base-class",children:"Custom Base Class"}),(0,s.jsx)(t.p,{children:"If you want to customize how the prompt is executed, you can specify a custom base class when assigning the attribute."}),(0,s.jsxs)(t.p,{children:["Your base class must inherit from ",(0,s.jsx)(t.code,{children:"PromptTemplateBase"}),":"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'public abstract class CustomBase : PromptTemplateBase\n{\n  public override async Task<string> ExecuteAsync(\n    Kernel kernel,\n    string? serviceId = null,\n    CancellationToken cancellation = default\n  )\n  {\n    return await Task.FromResult("response");\n  }\n}\n'})}),(0,s.jsx)(t.p,{children:"And then you can specify this custom base class as a generic type:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[PromptTemplate<CustomBase>]\npublic const string CapitolCustom = """\n  What is the capitol of {{$state}} {{$country}}?\n  Respond directly in a single line\n  When writing the state, always write it as the full name\n  Write your output in the format: The capitol of <STATE> is: <CAPITOL>.\n  For example: The capitol of California is: Sacramento.\n  """;\n'})}),(0,s.jsx)(t.p,{children:"This allows you to take full control of the execution of the prompt (e.g. add logging, telemetry, etc.)."}),(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\ud83d\udca1 Note: you should use a global ",(0,s.jsx)(t.code,{children:"using"})," statement for the namespace of your custom base class."]}),"\n"]}),(0,s.jsx)(t.h2,{id:"prompt-execution-settings",children:"Prompt Execution Settings"}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"PromptTemplate"})," attribute also allows specification of the prompt execution settings."]}),(0,s.jsx)(t.p,{children:"The three parameters are:"}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameter"}),(0,s.jsx)(t.th,{children:"Details"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"MaxTokens"})}),(0,s.jsx)(t.td,{children:"The maximum number of tokens in the response"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"500"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Temperature"})}),(0,s.jsx)(t.td,{children:"The temperature"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"0.5"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"TopP"})}),(0,s.jsx)(t.td,{children:"The TopP"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"0"})})]})]})]}),(0,s.jsx)(t.p,{children:"For example:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'public static class Prompts\n{\n  [PromptTemplate(10, 0.1)]\n  public const string SampleTmpl1 = """\n    What is the capitol of {{$state}} {{$country}}\n    Respond directly on a single line.\n    """;\n}\n'})}),(0,s.jsxs)(t.p,{children:["(See the ",(0,s.jsx)(t.code,{children:"PromptTmpl"})," class for details)"]}),(0,s.jsx)(t.h2,{id:"using-the-sample-app",children:"Using the Sample App"}),(0,s.jsx)(t.p,{children:"To use the sample app, you'll need to set up user secrets:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:'dotnet user-secrets init\ndotnet user-secrets set "AzureOpenAIKey" "YOUR_AZURE_OPEN_AI_KEY"\ndotnet user-secrets set "AzureOpenAIEndpoint" "YOUR_AZURE_OPEN_AI_ENDPOINT"\n'})}),(0,s.jsx)(t.p,{children:"If you are using OpenAI, feel free to fork this project and simply change the service type and configuration values."})]}),"\n",(0,s.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Generate typed prompts for Semantic Kernel"})}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(t.strong,{children:"SKPromptGenerator"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {12}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.SemanticKernel" Version="1.64.0" />\n    <PackageReference Include="SKPromptGenerator" Version="0.5.1">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,s.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SKPromptGenerator\\src\\DemoAI\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"SKPromptGenerator"})," in ",(0,s.jsx)(t.em,{children:"Program.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nConsole.WriteLine("Hello, World!");\nvar capitol = new DemoAI.WeatherPrompt("Bucuresti");\n\n'})})]}),(0,s.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SKPromptGenerator\\src\\DemoAI\\WeatherCity.cs",label:"WeatherCity.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"SKPromptGenerator"})," in ",(0,s.jsx)(t.em,{children:"WeatherCity.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using SKPromptGenerator; // <-- Add namespace here\n\nnamespace DemoAI\n{\n    public static partial class MyPrompts\n    {\n        [PromptTemplate] // <-- Remove namespace here\n        public const string Weather = """\n            What is the weather in the city {{$city}} ?\n            Respond directly in a single line\n            """;\n    }\n}\n'})})]})]}),"\n",(0,s.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SKPromptGenerator\\src\\DemoAI\\obj\\GX\\SKPromptGenerator\\SKPromptGenerator.PromptGenerator\\WeatherPrompt.g.cs",label:"WeatherPrompt.g.cs",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing Microsoft.SemanticKernel.Connectors.OpenAI;\nusing SKPromptGenerator;\n\nnamespace DemoAI;\n\n/// <summary>\n/// Generated prompt for `Weather`\n/// </summary>\npublic partial class WeatherPrompt(\n  string city\n) : PromptTemplateBase\n{\n  /// <summary>\n  /// The base prompt template string for `Weather`\n  /// </summary>\n  public override string Text => $$"""\nWhat is the weather in the city {{city}} ?\nRespond directly in a single line\n""";\n\n  /// <summary>\n  /// Settings for the prompt `Weather`:\n  ///   MaxTokens = 500\n  ///   Temperature = 0.5d\n  ///   TopP = 0d\n  /// </summary>\n  public override OpenAIPromptExecutionSettings Settings => new OpenAIPromptExecutionSettings\n  {\n    MaxTokens = 500,\n    Temperature = 0.5d,\n    TopP = 0d,\n  };\n}\n'})})}),(0,s.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SKPromptGenerator\\src\\DemoAI\\obj\\GX\\SKPromptGenerator\\SKPromptGenerator.PromptTemplateAttributeGenerator\\PromptTemplateAttribute.g.cs",label:"PromptTemplateAttribute.g.cs",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing System.Reflection;\n\nnamespace SKPromptGenerator;\n\n/// <summary>\n/// Attribute applied to `const string` class fields to generate a prompt class.\n/// Use this when specifying a custom base class for executing the prompt.\n/// </summary>\n/// <param name="maxTokens">The maximum number of tokens; default is 500</param>\n/// <param name="temperature">The temperature; default is 0.5</param>\n/// <param name="topP">The Top P parameter; default is 0</param>\n/// <typeparam name="T">The base type for the template inheriting from `PromptTemplateBase`</typeparam>\n[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, Inherited = false, AllowMultiple = false)]\npublic class PromptTemplateAttribute<T>(\n  int maxTokens = 500,\n  double temperature = 0.5,\n  double topP = 0\n) : Attribute where T : PromptTemplateBase {\n  public int MaxTokens => maxTokens;\n  public double Temperature => temperature;\n  public double TopP => topP;\n}\n\n/// <summary>\n/// Attribute applied to `const string` class fields to generate a prompt class.\n/// </summary>\n/// <param name="maxTokens">The maximum number of tokens; default is 500</param>\n/// <param name="temperature">The temperature; default is 0.5</param>\n/// <param name="topP">The Top P parameter; default is 0</param>\n/// <typeparam name="T">The base type for the template inheriting from `PromptTemplateBase`</typeparam>\n[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, Inherited = false, AllowMultiple = false)]\npublic class PromptTemplateAttribute(\n  int maxTokens = 500,\n  double temperature = 0.5,\n  double topP = 0\n) : PromptTemplateAttribute<PromptTemplateBase>(maxTokens, temperature, topP) {\n\n}\n'})})}),(0,s.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SKPromptGenerator\\src\\DemoAI\\obj\\GX\\SKPromptGenerator\\SKPromptGenerator.PromptTemplateBaseGenerator\\PromptTemplateBase.g.cs",label:"PromptTemplateBase.g.cs",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System.Text.Json;\nusing System.Text.Json.Serialization;\nusing Microsoft.SemanticKernel;\nusing Microsoft.SemanticKernel.ChatCompletion;\nusing Microsoft.SemanticKernel.Connectors.OpenAI;\n\nnamespace SKPromptGenerator;\n\n/// <summary>\n/// Abstract base class for executing the prompt.  Override this class to\n/// provide custom execution of the prompt.\n/// </summary>\npublic abstract class PromptTemplateBase\n{\n  protected static readonly JsonSerializerOptions SerializerOptions = new() {\n    PropertyNameCaseInsensitive = true\n  };\n\n  /// <summary>\n  /// The execution settings for this prompt.\n  /// </summary>\n  public abstract OpenAIPromptExecutionSettings Settings \\{ get; }\n\n  /// <summary>\n  /// The text of this prompt.\n  /// </summary>\n  public abstract string Text \\{ get; }\n\n  /// <summary>\n  /// Executes the prompt using the default execution.  Override this method\n  /// to provide custom execution logic (e.g. logging, telemetry, etc.)\n  /// </summary>\n  /// <param name="kernel">The Semantic Kernel instance.</param>\n  /// <param name="serviceId">An optional service ID to specify for execution.</param>\n  /// <param name="historyBuilder">An optional builder for the chat history.</param>\n  /// <param name="cancellation">An optional cancellation token.</param>\n  /// <returns>A string with the results of execution.</returns>\n  public virtual async Task<string> ExecuteAsync(\n    Kernel kernel,\n    #nullable enable\n    string? serviceId = null,\n    Action<ChatHistory>? historyBuilder = null,\n    #nullable disable\n    CancellationToken cancellation = default\n  )\n  {\n    var chat = kernel.GetRequiredService<IChatCompletionService>(serviceId);\n\n    var history = new ChatHistory();\n\n    if (historyBuilder != null)\n    {\n      historyBuilder(history);\n    }\n\n    history.AddUserMessage(Text);\n\n    var result = await chat.GetChatMessageContentAsync(history, Settings, kernel, cancellation);\n\n    return result.ToString();\n  }\n\n  /// <summary>\n  /// Executes the prompt and expects a JSON response that will be deserialized\n  /// to the type `T`.\n  /// </summary>\n  /// <param name="kernel">The Semantic Kernel instance.</param>\n  /// <param name="serviceId">An optional service ID to specify for execution.</param>\n  /// <param name="historyBuilder">An optional builder for the chat history.</param>\n  /// <param name="cancellation">An optional cancellation token.</param>\n  /// <typeparam name="T">The type `T` of the response object.</typeparam>\n  /// <returns>An instance of type `T` deserialized from the JSON response.</returns>\n  #nullable enable\n  public virtual async Task<T?> ExecuteAsync<T>(\n    Kernel kernel,\n    #nullable enable\n    string? serviceId = null,\n    Action<ChatHistory>? historyBuilder = null,\n    #nullable disable\n    CancellationToken cancellation = default\n  ) {\n    var (result, _) = await ExecuteWithJsonAsync<T>(kernel, serviceId, historyBuilder, cancellation);\n\n    return result;\n  }\n  #nullable disable\n\n  /// <summary>\n  /// Executes the prompt and expects a JSON response that will be deserialized\n  /// to the type `T`.  This call includes the JSON result as part of the tuple.\n  /// This method call will perform trimming of JSON fences if present using\n  /// regular string find/replace.\n  /// </summary>\n  /// <param name="kernel">The Semantic Kernel instance.</param>\n  /// <param name="serviceId">An optional service ID to specify for execution.</param>\n  /// <param name="historyBuilder">An optional builder for the chat history.</param>\n  /// <param name="cancellation">An optional cancellation token.</param>\n  /// <typeparam name="T">The type `T` of the response object.</typeparam>\n  /// <returns>An instance of type `T` deserialized from the JSON response in a tuple with the full JSON response as well..</returns>\n  #nullable enable\n  public virtual async Task<(T? Result, string Json)> ExecuteWithJsonAsync<T>(\n    Kernel kernel,\n    #nullable enable\n    string? serviceId = null,\n    Action<ChatHistory>? historyBuilder = null,\n    #nullable disable\n    CancellationToken cancellation = default\n  ) {\n    var json = await ExecuteAsync(kernel, serviceId, historyBuilder, cancellation);\n\n    json = json.Trim().Replace("```json", "").Replace("```", "");\n\n    return (JsonSerializer.Deserialize<T>(json, SerializerOptions), json);\n  }\n  #nullable disable\n}\n'})})})]}),"\n",(0,s.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(90029).A+"",children:"Download Example project SKPromptGenerator "})})}),"\n",(0,s.jsx)(t.h3,{id:"share-skpromptgenerator",children:"Share SKPromptGenerator"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSKPromptGenerator&quote=SKPromptGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSKPromptGenerator&text=SKPromptGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSKPromptGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSKPromptGenerator&title=SKPromptGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSKPromptGenerator&title=SKPromptGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSKPromptGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/SKPromptGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/SKPromptGenerator"})}),"\n",(0,s.jsx)(t.p,{children:"aaa"}),"\n",(0,s.jsx)(p,{})]})}function x(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},90029:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/files/SKPromptGenerator-a2410a06691d96679ad3ab531d72886f.zip"}}]);