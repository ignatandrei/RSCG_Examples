"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9951],{27228:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/files/DependencyModules.SourceGenerator-8d9993aa98e540fe14cc44723524ce17.zip"},97390:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"RSCG-Examples/DependencyModules.SourceGenerator","title":"185 - DependencyModules.SourceGenerator","description":"Generating service dependencies from attributes.","source":"@site/docs/RSCG-Examples/DependencyModules.SourceGenerator.md","sourceDirName":"RSCG-Examples","slug":"/DependencyModules.SourceGenerator","permalink":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/DependencyModules.SourceGenerator.md","tags":[],"version":"current","sidebarPosition":1850,"frontMatter":{"sidebar_position":1850,"title":"185 - DependencyModules.SourceGenerator","description":"Generating service dependencies from attributes.","slug":"/DependencyModules.SourceGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"184 - MockMe","permalink":"/RSCG_Examples/v2/docs/MockMe"},"next":{"title":"186 - RSCG_CompositeProvider","permalink":"/RSCG_Examples/v2/docs/RSCG_CompositeProvider"}}');var i=s(74848),t=s(28453),o=s(11470),l=s(19365),c=s(14252);const a={sidebar_position:1850,title:"185 - DependencyModules.SourceGenerator",description:"Generating service dependencies from attributes.",slug:"/DependencyModules.SourceGenerator"},d="DependencyModules.SourceGenerator  by Ian Johnson",u={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"Service Attributes",id:"service-attributes",level:2},{value:"Container Instantiation",id:"container-instantiation",level:2},{value:"Module Re-use",id:"module-re-use",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Managing duplicate registration",id:"managing-duplicate-registration",level:2},{value:"Realm",id:"realm",level:2},{value:"Keyed Registration",id:"keyed-registration",level:2},{value:"Unit testing &amp; Mocking",id:"unit-testing--mocking",level:2},{value:"Implementation",id:"implementation",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share DependencyModules.SourceGenerator",id:"share-dependencymodulessourcegenerator",level:3},{value:"In the same category (DependencyInjection) - 7 other generators",id:"in-the-same-category-dependencyinjection---7-other-generators",level:3},{value:"AutoRegisterInject",id:"autoregisterinject",level:4},{value:"depso",id:"depso",level:4},{value:"FactoryGenerator",id:"factorygenerator",level:4},{value:"Injectio",id:"injectio",level:4},{value:"jab",id:"jab",level:4},{value:"Pure.DI",id:"puredi",level:4},{value:"ServiceScan.SourceGenerator",id:"servicescansourcegenerator",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dependencymodulessourcegenerator--by-ian-johnson",children:"DependencyModules.SourceGenerator  by Ian Johnson"})}),"\n",(0,i.jsx)(c.A,{toc:p}),"\n",(0,i.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/DependencyModules.SourceGenerator/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/DependencyModules.SourceGenerator?label=DependencyModules.SourceGenerator",alt:"Nuget"})}),(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/DependencyModules.Runtime/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/DependencyModules.Runtime?label=DependencyModules.Runtime",alt:"Nuget"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/ipjohnson/DependencyModules",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/ipjohnson/DependencyModules?label=updated",alt:"GitHub last commit"})}),"\n",(0,i.jsx)(n.img,{src:"https://img.shields.io/github/stars/ipjohnson/DependencyModules?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,i.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,i.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Name: ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})]}),(0,i.jsx)(n.p,{children:"Package Description"}),(0,i.jsx)(n.p,{children:"Author: Ian Johnson"}),(0,i.jsxs)(n.p,{children:["NuGet:\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/DependencyModules.SourceGenerator/",children:"https://www.nuget.org/packages/DependencyModules.SourceGenerator/"})})]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/DependencyModules.Runtime/",children:"https://www.nuget.org/packages/DependencyModules.Runtime/"})})}),(0,i.jsxs)(n.p,{children:["You can find more details at ",(0,i.jsx)(n.a,{href:"https://github.com/ipjohnson/DependencyModules",children:"https://github.com/ipjohnson/DependencyModules"})]}),(0,i.jsxs)(n.p,{children:["Source: ",(0,i.jsx)(n.a,{href:"https://github.com/ipjohnson/DependencyModules",children:"https://github.com/ipjohnson/DependencyModules"})]})]}),"\n",(0,i.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.h1,{id:"dependencymodules",children:"DependencyModules"}),(0,i.jsx)(n.p,{children:"DependencyModules is a C# source generator package that uses attributes to create\ndependency injection registration modules. These modules can then be used to populate\nan IServiceCollection instance."}),(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"dotnet add package DependencyModules.Runtime\ndotnet add package DependencyModules.SourceGenerator\n"})}),(0,i.jsx)(n.h2,{id:"service-attributes",children:"Service Attributes"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[DependencyModule]"})," - used to attribute class that will become dependency module (must be partial)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[SingletonService]"})," - registers service as ",(0,i.jsx)(n.code,{children:"AddSingleton"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[ScopedService]"})," - registers service as ",(0,i.jsx)(n.code,{children:"AdddScoped"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[TransientService]"})," - registers service as ",(0,i.jsx)(n.code,{children:"AddTransient"})]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Registration example\n[DependencyModule]\npublic partial class MyModule { }\n\n// registers SomeClass implementation for ISomeService\n[SingletonService]\npublic class SomeClass : ISomeService \n{\n  public string SomeProp => "SomeString";\n}\n\n// registers OtherSerice implementation\n[TransientService]\npublic class OtherService\n{\n  public OtherService(ISomeService service)\n  { \n    SomeProp = service.SomeProp;\n  }\n  public string SomeProp { get; }\n}\n'})}),(0,i.jsx)(n.h2,{id:"container-instantiation",children:"Container Instantiation"}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"AddModule"})," - method adds modules to service collection"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var serviceCollection = new ServiceCollection();\n\nserviceCollection.AddModule<MyModule>();\n\nvar provider = serviceCollection.BuildServiceProvider();\n\nvar service = provider.GetService<OtherService>();\n"})}),(0,i.jsx)(n.h2,{id:"module-re-use",children:"Module Re-use"}),(0,i.jsxs)(n.p,{children:["DependencyModules creates an ",(0,i.jsx)(n.code,{children:"Attribute"})," class that can be used to apply sub dependencies."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Modules can be re-used with the generated attributes\n[DependencyModule]\n[MyModule.Attribute]\npublic partial class AnotherModule { }\n"})}),(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),(0,i.jsx)(n.p,{children:"Sometimes you want to provide extra registration for your module.\nThis can be achieved by adding a constructor to your module or optional properties.\nNote these parameters and properties will be correspondingly implemented in the module attribute."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[DependencyModule]\npublic partial class SomeModule : IServiceCollectionConfiguration \n{\n  private bool _someFlag;\n  public SomeModule(bool someFlag = false)\n  {\n    _someFlag = someFlag;\n  }\n  \n  public string OptionalString { get; set; } = "";\n  \n  public void ConfigureServices(IServiceCollection services) \n  {\n    if (_someFlag) \n    {\n      // custom registration\n    } \n  }\n}\n\n[DependencyModule]\n[SomeModule.Attribute(true, OptionalString = "otherString")]\npublic partial class SomeOtherModule \n{\n\n}\n'})}),(0,i.jsx)(n.h2,{id:"managing-duplicate-registration",children:"Managing duplicate registration"}),(0,i.jsxs)(n.p,{children:["By default a module will only be loaded once, assuming attributes are used or the modules are specified in the same ",(0,i.jsx)(n.code,{children:"AddModules"})," call. Seperate calls to ",(0,i.jsx)(n.code,{children:"AddModule"})," will result in modules being loaded multiple times. If a module uses parameters it can be useful to load a module more than once. That can be accompilished by overriding the ",(0,i.jsx)(n.code,{children:"Equals"})," and ",(0,i.jsx)(n.code,{children:"GetHashcode"})," methods to allow for multiple loads."]}),(0,i.jsxs)(n.p,{children:["Services will be registered using an ",(0,i.jsx)(n.code,{children:"Add"})," method by default. This can be overriden using the ",(0,i.jsx)(n.code,{children:"With"})," property on individual service or at the ",(0,i.jsx)(n.code,{children:"DepedencyModule"})," level."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[SingletonService(With = RegistrationType.Try)]\npublic class SomeService { }\n\n[DependencyModule(With = RegistrationType.Try)]\npublic partial class SomeModule { }\n"})}),(0,i.jsx)(n.h2,{id:"realm",children:"Realm"}),(0,i.jsx)(n.p,{children:"By default, all dependencies are registered in all modules within the same assembly.\nThe realm allows the developer to scope down the registration within a given module."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// register only dependencies specifically marked for this realm\n[DependencyModule(OnlyRealm = true)]\npublic partial class AnotherModule { }\n\n[SingletonService(ServiceType = typeof(ISomeInterface), \n  Realm = typeof(AnotherModule))]\npublic class SomeDep : ISomeInterface { }\n"})}),(0,i.jsx)(n.h2,{id:"keyed-registration",children:"Keyed Registration"}),(0,i.jsxs)(n.p,{children:["Registration attributes have a ",(0,i.jsx)(n.code,{children:"Key"})," property that allows for specifying the key at registration time."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[SingletonService(Key = "SomeKey")]\npublic class KeyService : IKeyService { }\n\n// yields this registration line\nservices.AddKeyedSingleton(typeof(IKeyService), "SomeKey", typeof(KeyService));\n'})}),(0,i.jsx)(n.h2,{id:"unit-testing--mocking",children:"Unit testing & Mocking"}),(0,i.jsx)(n.p,{children:"DependencyModules provides an xUnit extension to make testing much easier.\nIt handles the population and construction of a service provider using specified modules."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'> dotnet add package DependencyModules.xUnit\n> dotnet add package DependencyModules.xUnit.NSubstitute\n\n// applies module & nsubstitute support to all tests.\n// test attributes can be applied at the assembly, class, and test method level\n[assemlby: MyModule.Attribute]\n[assembly: NSubstituteSupport]\n\npublic class OtherServiceTests \n{\n  [ModuleTest]\n  public void SomeTest(OtherService test, [Mock]ISomeService service)\n  {\n     service.SomeProp.Returns("some mock value");\n     Assert.Equals("some mock value", test.SomeProp);\n  }\n  \n  public void \n}\n\n'})}),(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),(0,i.jsxs)(n.p,{children:["Behind the scenes the library generates registration code that can be used with any ",(0,i.jsx)(n.code,{children:"IServiceCollection"})," compatible DI container."]}),(0,i.jsxs)(n.p,{children:["Example generated code for ",(0,i.jsx)(n.a,{href:"https://github.com/ipjohnson/DependencyModules/integ-tests/SutProject/SutModule.cs",children:"SutModule.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"    // SutModule.Dependencies.g.cs\n    public partial class SutModule\n    {\n        private static int moduleField = DependencyRegistry<SutModule>.Add(ModuleDependencies);\n\n        private static void ModuleDependencies(IServiceCollection services)\n        {\n            services.AddTransient(typeof(IDependencyOne), typeof(DependencyOne));\n            services.AddSingleton(typeof(IGenericInterface<>), typeof(GenericClass<>));\n            services.AddScoped(typeof(IScopedService), typeof(ScopedService));\n            services.AddSingleton(typeof(ISingletonService), typeof(SingletonService));\n            services.AddSingleton(typeof(IGenericInterface<string>), typeof(StringGeneric));\n        }\n    }\n\n    // SutModule.Modules.g.cs\n    public partial class SutModule : IDependencyModule\n    {\n        static SutModule()\n        {\n        }\n\n        // this method loads all dependencies into IServiceCollection.\n        public void PopulateServiceCollection(IServiceCollection services)\n        {\n            DependencyRegistry<SutModule>.LoadModules(services, this);\n        }\n\n        void IDependencyModule.InternalApplyServices(IServiceCollection services)\n        {\n            DependencyRegistry<SutModule>.ApplyServices(services);\n        }\n\n        public override bool Equals(object? obj)\n        {\n            return obj is SutModule;\n        }\n\n        public override int GetHashCode()\n        {\n            return HashCode.Combine(base.GetHashCode());\n        }\n\n        public class Attribute : System.Attribute, IDependencyModuleProvider\n        {\n            public IDependencyModule GetModule()\n            {\n                var newModule = new SutModule();\n                return newModule;\n            }\n        }\n    }\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"Generating service dependencies from attributes."}),(0,i.jsx)(n.p,{children:"Also,by the author, a more advanced example you will find in the DemoWithTest.zip inside the zip file"})]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,i.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {15}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="DependencyModules.Runtime" Version="1.0.0-RC9074" />\n\t  <PackageReference Include="DependencyModules.SourceGenerator" Version="1.0.0-RC9074" />\n\t <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.2" />\n\n\t</ItemGroup>\n</Project>\n\n'})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\Program.cs",label:"Program.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})," in ",(0,i.jsx)(n.em,{children:"Program.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using DependencyModules.Runtime;\nusing InjectDemo;\nusing Microsoft.Extensions.DependencyInjection;\n\n\nvar serviceCollection = new ServiceCollection();\n\nserviceCollection.AddModule<MyModule>();\n\nvar provider = serviceCollection.BuildServiceProvider();\n\nvar service = provider.GetService<Database>();\n\nif(service == null)\n    throw new Exception("Service not found");\nelse\n    service.Open();\n'})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\MyModule.cs",label:"MyModule.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})," in ",(0,i.jsx)(n.em,{children:"MyModule.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using DependencyModules.Runtime.Attributes;\n\n[DependencyModule]\npublic partial class MyModule \n{ \n\n}\n"})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\IDatabase.cs",label:"IDatabase.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})," in ",(0,i.jsx)(n.em,{children:"IDatabase.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace InjectDemo\n{\n    internal interface IDatabase\n    {\n        public void Open();\n    }\n}\n"})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\Database.cs",label:"Database.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})," in ",(0,i.jsx)(n.em,{children:"Database.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using DependencyModules.Runtime.Attributes;\n\nnamespace InjectDemo;\n[SingletonService(ServiceType = typeof(Database))]\npartial class Database : IDatabase\n{\n    private readonly IDatabase con;\n\n    public Database(IDatabase con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open from database");\n        con.Open();\n    }\n\n}\n\n\n'})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"DependencyModules.SourceGenerator"})," in ",(0,i.jsx)(n.em,{children:"DatabaseCon.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing DependencyModules.Runtime.Attributes;\n\nnamespace InjectDemo;\n[SingletonService]\npublic partial class DatabaseCon:IDatabase\n{\n    public string? Connection { get; set; }\n    public void Open()\n    {\n        Console.WriteLine("open from database con" );\n    }\n}\n\n\n'})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,i.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\obj\\GX\\DependencyModules.SourceGenerator\\DependencyModules.SourceGenerator.SourceGenerator\\MyModule.858.Dependencies.g.cs",label:"MyModule.858.Dependencies.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using DependencyModules.Runtime.Helpers;\nusing InjectDemo;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\n\npublic partial class MyModule\n{\n    private static int moduleField = DependencyRegistry<MyModule>.Add(ModuleDependencies);\n\n    private static void ModuleDependencies(IServiceCollection services)\n    {\n        services.AddSingleton(typeof(Database), typeof(Database));\n        services.AddSingleton(typeof(IDatabase), typeof(DatabaseCon));\n    }\n}\n\n"})})}),(0,i.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\obj\\GX\\DependencyModules.SourceGenerator\\DependencyModules.SourceGenerator.SourceGenerator\\MyModule.858.Module.g.cs",label:"MyModule.858.Module.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using BaseAttribute = System.Attribute;\nusing DependencyModules.Runtime.Helpers;\nusing DependencyModules.Runtime.Interfaces;\nusing Microsoft.Extensions.DependencyInjection;\n\n#nullable enable\npublic partial class MyModule : IDependencyModule\n{\n\n    static MyModule()\n    {\n    }\n\n    public void PopulateServiceCollection(IServiceCollection services)\n    {\n        DependencyRegistry<MyModule>.LoadModules(services, this);\n    }\n\n    void IDependencyModule.InternalApplyServices(IServiceCollection services)\n    {\n        DependencyRegistry<MyModule>.ApplyServices(services);\n    }\n\n    public override bool Equals(object? obj)\n    {\n        return obj is MyModule;\n    }\n\n    public override int GetHashCode()\n    {\n        return HashCode.Combine(base.GetHashCode());\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Assembly | AttributeTargets.Method | AttributeTargets.Parameter, AllowMultiple = true)]\n    public partial class Attribute : BaseAttribute, IDependencyModuleProvider\n    {\n\n        public IDependencyModule GetModule()\n        {\n            var newModule = new MyModule();\n            return newModule;\n        }\n    }\n}\n#nullable disable\n\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,i.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(27228).A+"",children:"Download Example project DependencyModules.SourceGenerator "})})}),"\n",(0,i.jsx)(n.h3,{id:"share-dependencymodulessourcegenerator",children:"Share DependencyModules.SourceGenerator"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&quote=DependencyModules.SourceGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&text=DependencyModules.SourceGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&title=DependencyModules.SourceGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&title=DependencyModules.SourceGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator"})}),"\n",(0,i.jsx)(n.h3,{id:"in-the-same-category-dependencyinjection---7-other-generators",children:"In the same category (DependencyInjection) - 7 other generators"}),"\n",(0,i.jsx)(n.h4,{id:"autoregisterinject",children:(0,i.jsx)(n.a,{href:"/docs/AutoRegisterInject",children:"AutoRegisterInject"})}),"\n",(0,i.jsx)(n.h4,{id:"depso",children:(0,i.jsx)(n.a,{href:"/docs/depso",children:"depso"})}),"\n",(0,i.jsx)(n.h4,{id:"factorygenerator",children:(0,i.jsx)(n.a,{href:"/docs/FactoryGenerator",children:"FactoryGenerator"})}),"\n",(0,i.jsx)(n.h4,{id:"injectio",children:(0,i.jsx)(n.a,{href:"/docs/Injectio",children:"Injectio"})}),"\n",(0,i.jsx)(n.h4,{id:"jab",children:(0,i.jsx)(n.a,{href:"/docs/jab",children:"jab"})}),"\n",(0,i.jsx)(n.h4,{id:"puredi",children:(0,i.jsx)(n.a,{href:"/docs/Pure.DI",children:"Pure.DI"})}),"\n",(0,i.jsx)(n.h4,{id:"servicescansourcegenerator",children:(0,i.jsx)(n.a,{href:"/docs/ServiceScan.SourceGenerator",children:"ServiceScan.SourceGenerator"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);