"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6983],{47790:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>s,metadata:()=>m,toc:()=>d});var r=a(87462),n=(a(67294),a(3905)),o=a(73992),l=a(18679),i=a(68839);const s={sidebar_position:1770,title:"177 - Equatable.Generator",description:"Generating Equals from properties",slug:"/Equatable.Generator"},p="Equatable.Generator  by Eden Prairie",m={unversionedId:"RSCG-Examples/Equatable.Generator",id:"RSCG-Examples/Equatable.Generator",title:"177 - Equatable.Generator",description:"Generating Equals from properties",source:"@site/docs/RSCG-Examples/Equatable.Generator.md",sourceDirName:"RSCG-Examples",slug:"/Equatable.Generator",permalink:"/RSCG_Examples/v2/docs/Equatable.Generator",draft:!1,tags:[],version:"current",sidebarPosition:1770,frontMatter:{sidebar_position:1770,title:"177 - Equatable.Generator",description:"Generating Equals from properties",slug:"/Equatable.Generator"},sidebar:"tutorialSidebar",previous:{title:"176 - Darp.BinaryObjects",permalink:"/RSCG_Examples/v2/docs/Darp.BinaryObjects"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},u={},d=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Equatable.Generator",id:"share-equatablegenerator",level:3},{value:"In the same category (EnhancementClass) - 27 other generators",id:"in-the-same-category-enhancementclass---27-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CommonCodeGenerator",id:"commoncodegenerator",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"Enhanced.GetTypes",id:"enhancedgettypes",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"GeneratorEquals",id:"generatorequals",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"Lombok.NET",id:"lomboknet",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemoryPack",id:"memorypack",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"OptionToStringGenerator",id:"optiontostringgenerator",level:4},{value:"QueryStringGenerator",id:"querystringgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4},{value:"ThisClass",id:"thisclass",level:4}],c={toc:d},h="wrapper";function g(e){let{components:t,...s}=e;return(0,n.kt)(h,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"equatablegenerator--by-eden-prairie"},"Equatable.Generator  by Eden Prairie"),(0,n.kt)(i.Z,{toc:d,mdxType:"TOCInline"}),(0,n.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Equatable.Generator/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Equatable.Generator?label=Equatable.Generator",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Equatable.Generator"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/loresoft/Equatable.Generator?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/loresoft/Equatable.Generator?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"Equatable.Generator")),(0,n.kt)("p",{parentName:"admonition"},"Source generator for Equals and GetHashCode"),(0,n.kt)("p",{parentName:"admonition"},"Author: Eden Prairie"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Equatable.Generator/"},"https://www.nuget.org/packages/Equatable.Generator/")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Equatable.Generator"},"https://github.com/loresoft/Equatable.Generator")),(0,n.kt)("p",{parentName:"admonition"},"Source : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Equatable.Generator"},"https://github.com/loresoft/Equatable.Generator"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("h1",{parentName:"admonition",id:"equatablegenerator"},"Equatable.Generator"),(0,n.kt)("p",{parentName:"admonition"},"Source generator for ",(0,n.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GetHashCode")," with attribute based control of equality implementation"),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Equatable.Generator/actions/workflows/dotnet.yml"},(0,n.kt)("img",{parentName:"a",src:"https://github.com/loresoft/Equatable.Generator/actions/workflows/dotnet.yml/badge.svg",alt:"Build Project"}))),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://coveralls.io/github/loresoft/Equatable.Generator?branch=main"},(0,n.kt)("img",{parentName:"a",src:"https://coveralls.io/repos/github/loresoft/Equatable.Generator/badge.svg?branch=main",alt:"Coverage Status"}))),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Equatable.Generator/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Equatable.Generator.svg",alt:"Equatable.Generator"}))),(0,n.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Override ",(0,n.kt)("inlineCode",{parentName:"li"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"GetHashCode")),(0,n.kt)("li",{parentName:"ul"},"Implement ",(0,n.kt)("inlineCode",{parentName:"li"},"IEquatable<T>")),(0,n.kt)("li",{parentName:"ul"},"Support ",(0,n.kt)("inlineCode",{parentName:"li"},"class"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"record")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"struct")," types"),(0,n.kt)("li",{parentName:"ul"},"Support ",(0,n.kt)("inlineCode",{parentName:"li"},"EqualityComparer")," per property via attribute"),(0,n.kt)("li",{parentName:"ul"},"Attribute based control of equality implementation. "),(0,n.kt)("li",{parentName:"ul"},"Attribute comparers supported: String, Sequence, Dictionary, HashSet, Reference, and Custom"),(0,n.kt)("li",{parentName:"ul"},"No runtime dependencies.  Library is compile time dependence only.  ")),(0,n.kt)("h3",{parentName:"admonition",id:"usage"},"Usage"),(0,n.kt)("h4",{parentName:"admonition",id:"add-package"},"Add package"),(0,n.kt)("p",{parentName:"admonition"},"Add the nuget package to your projects."),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"dotnet add package Equatable.Generator")),(0,n.kt)("p",{parentName:"admonition"},"Prevent including Equatable.Generator as a dependency"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-xml"},'<PackageReference Include="Equatable.Generator" PrivateAssets="all" />\n')),(0,n.kt)("h3",{parentName:"admonition",id:"requirements"},"Requirements"),(0,n.kt)("p",{parentName:"admonition"},"This library requires:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Target framework .NET Standard 2.0 or greater"),(0,n.kt)("li",{parentName:"ul"},"Project C# ",(0,n.kt)("inlineCode",{parentName:"li"},"LangVersion")," 8.0 or higher")),(0,n.kt)("h3",{parentName:"admonition",id:"equatable-attributes"},"Equatable Attributes"),(0,n.kt)("p",{parentName:"admonition"},"Place ",(0,n.kt)("inlineCode",{parentName:"p"},"[Equatable]")," attribute on a ",(0,n.kt)("inlineCode",{parentName:"p"},"class"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"record")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"struct"),".  The source generator will create a partial with overrides for ",(0,n.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GetHashCode")," for all public properties."),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[Equatable]")," Marks the class to generate overrides for ",(0,n.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GetHashCode")),(0,n.kt)("p",{parentName:"li"},"The default comparer used in the implementation of ",(0,n.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GetHashCode")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"EqualityComparer<T>.Default"),".  Customize the comparer used with the following attributes.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[IgnoreEquality]")," Ignore property in ",(0,n.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GetHashCode")," implementations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[StringEquality]")," Use specified ",(0,n.kt)("inlineCode",{parentName:"p"},"StringComparer")," when comparing strings")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[SequenceEquality]")," Use ",(0,n.kt)("inlineCode",{parentName:"p"},"Enumerable.SequenceEqual")," to determine whether enumerables are equal")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[DictionaryEquality]")," Use to determine if dictionaries are equal")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[HashSetEquality]")," Use ",(0,n.kt)("inlineCode",{parentName:"p"},"ISet<T>.SetEquals")," to determine whether enumerables are equal")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[ReferenceEquality]")," Use ",(0,n.kt)("inlineCode",{parentName:"p"},"Object.ReferenceEquals")," to determines whether instances are the same instance")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"[EqualityComparer]")," Use the specified ",(0,n.kt)("inlineCode",{parentName:"p"},"EqualityComparer")))),(0,n.kt)("h3",{parentName:"admonition",id:"example-usage"},"Example Usage"),(0,n.kt)("p",{parentName:"admonition"},"Example of using the attributes to customize the source generation of ",(0,n.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GetHashCode")),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},'[Equatable]\npublic partial class UserImport\n{\n    [StringEquality(StringComparison.OrdinalIgnoreCase)]\n    public string EmailAddress { get; set; } = null!;\n\n    public string? DisplayName { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public DateTimeOffset? LockoutEnd { get; set; }\n\n    public DateTimeOffset? LastLogin { get; set; }\n\n    [IgnoreEquality]\n    public string FullName => $"{FirstName} {LastName}";\n\n    [HashSetEquality]\n    public HashSet<string>? Roles { get; set; }\n\n    [DictionaryEquality]\n    public Dictionary<string, int>? Permissions { get; set; }\n\n    [SequenceEquality]\n    public List<DateTimeOffset>? History { get; set; }\n}\n'))),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Generating Equals from properties")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"Equatable.Generator")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Equatable.Generator" Version="2.0.0" />\n  </ItemGroup>\n</Project>\n\n'))),(0,n.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Equatable.Generator")," in ",(0,n.kt)("em",{parentName:"p"},"Program.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing GeneratorEqualsDemo;\nvar p1 = new Person()\n{\n    ID = 1,\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nvar p2= new Person()\n{\n    ID = 2,\n    FirstName = "aNdrei",\n    LastName = "Ignat"\n};\nConsole.WriteLine(p1==p2);\n\n'))),(0,n.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Equatable.Generator")," in ",(0,n.kt)("em",{parentName:"p"},"Person.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Equatable.Attributes;\n\nnamespace GeneratorEqualsDemo;\n\n[Equatable]\npartial class Person\n{\n    [IgnoreEquality]\n    public int ID { get; set; }\n    [StringEquality(StringComparison.OrdinalIgnoreCase)]\n    public string? FirstName { get; set; }\n    [StringEquality(StringComparison.OrdinalIgnoreCase)]\n\n    public string? LastName { get; set; }\n}\n\n")))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\obj\\GX\\Equatable.SourceGenerator\\Equatable.SourceGenerator.EquatableGenerator\\GeneratorEqualsDemo.Person.Equatable.g.cs",label:"GeneratorEqualsDemo.Person.Equatable.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\n\nnamespace GeneratorEqualsDemo\n{\n    partial class Person : global::System.IEquatable<global::GeneratorEqualsDemo.Person?>\n    {\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public bool Equals(global::GeneratorEqualsDemo.Person? other)\n        {\n            return !(other is null)\n                && global::System.StringComparer.OrdinalIgnoreCase.Equals(FirstName, other.FirstName)\n                && global::System.StringComparer.OrdinalIgnoreCase.Equals(LastName, other.LastName);\n\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public override bool Equals(object? obj)\n        {\n            return Equals(obj as global::GeneratorEqualsDemo.Person);\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public static bool operator ==(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right)\n        {\n            return global::System.Collections.Generic.EqualityComparer<global::GeneratorEqualsDemo.Person?>.Default.Equals(left, right);\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right)\n        {\n            return !(left == right);\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public override int GetHashCode(){\n            int hashCode = 1938039292;\n            hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(FirstName!);\n            hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(LastName!);\n            return hashCode;\n\n        }\n\n    }\n}\n\n'))),(0,n.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\obj\\GX\\Generator.Equals\\Generator.Equals.EqualsGenerator\\GeneratorEqualsDemo.Person.Generator.Equals.g.cs",label:"GeneratorEqualsDemo.Person.Generator.Equals.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\n#nullable enable\n#pragma warning disable CS0612,CS0618\n#pragma warning disable CS0436\n\nnamespace GeneratorEqualsDemo\n{\n    partial class Person : global::System.IEquatable<Person>\n    {\n        /// <summary>\n        /// Indicates whether the object on the left is equal to the object on the right.\n        /// </summary>\n        /// <param name="left">The left object</param>\n        /// <param name="right">The right object</param>\n        /// <returns>true if the objects are equal; otherwise, false.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public static bool operator ==(\n            global::GeneratorEqualsDemo.Person? left,\n            global::GeneratorEqualsDemo.Person? right) =>\n            global::Generator.Equals.DefaultEqualityComparer<global::GeneratorEqualsDemo.Person?>.Default\n                .Equals(left, right);\n        \n        /// <summary>\n        /// Indicates whether the object on the left is not equal to the object on the right.\n        /// </summary>\n        /// <param name="left">The left object</param>\n        /// <param name="right">The right object</param>\n        /// <returns>true if the objects are not equal; otherwise, false.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) =>\n            !(left == right);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public override bool Equals(object? obj) =>\n            Equals(obj as global::GeneratorEqualsDemo.Person);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        bool global::System.IEquatable<global::GeneratorEqualsDemo.Person>.Equals(global::GeneratorEqualsDemo.Person? obj) => Equals((object?) obj);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        protected bool Equals(global::GeneratorEqualsDemo.Person? other)\n        {\n            if (ReferenceEquals(null, other)) return false;\n            if (ReferenceEquals(this, other)) return true;\n            \n            return other.GetType() == this.GetType()\n                && global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default.Equals(this.FirstName!, other.FirstName!)\n                && global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default.Equals(this.LastName!, other.LastName!)\n                ;\n        }\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public override int GetHashCode()\n        {\n            var hashCode = new global::System.HashCode();\n            \n            hashCode.Add(this.GetType());\n            hashCode.Add(\n                this.FirstName!,\n                global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default);\n            hashCode.Add(\n                this.LastName!,\n                global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default);\n            \n            return hashCode.ToHashCode();\n        }\n    }\n}\n\n')))),(0,n.kt)("h2",{id:"usefull"},"Usefull"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:a(23614).Z},"Download Example project Equatable.Generator "))),(0,n.kt)("h3",{id:"share-equatablegenerator"},"Share Equatable.Generator"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&quote=Equatable.Generator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&text=Equatable.Generator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&title=Equatable.Generator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&title=Equatable.Generator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Equatable.Generator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Equatable.Generator")),(0,n.kt)("h3",{id:"in-the-same-category-enhancementclass---27-other-generators"},"In the same category (EnhancementClass) - 27 other generators"),(0,n.kt)("h4",{id:"apparatusaot"},(0,n.kt)("a",{parentName:"h4",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,n.kt)("h4",{id:"aspectgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/AspectGenerator"},"AspectGenerator")),(0,n.kt)("h4",{id:"commoncodegenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/CommonCodeGenerator"},"CommonCodeGenerator")),(0,n.kt)("h4",{id:"dudnet"},(0,n.kt)("a",{parentName:"h4",href:"/docs/DudNet"},"DudNet")),(0,n.kt)("h4",{id:"enhancedgettypes"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Enhanced.GetTypes"},"Enhanced.GetTypes")),(0,n.kt)("h4",{id:"fastgenericnew"},(0,n.kt)("a",{parentName:"h4",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,n.kt)("h4",{id:"generatorequals"},(0,n.kt)("a",{parentName:"h4",href:"/docs/GeneratorEquals"},"GeneratorEquals")),(0,n.kt)("h4",{id:"hsusgsync"},(0,n.kt)("a",{parentName:"h4",href:"/docs/HsuSgSync"},"HsuSgSync")),(0,n.kt)("h4",{id:"immutype"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Immutype"},"Immutype")),(0,n.kt)("h4",{id:"lingaudit"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Ling.Audit"},"Ling.Audit")),(0,n.kt)("h4",{id:"lomboknet"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Lombok.NET"},"Lombok.NET")),(0,n.kt)("h4",{id:"m31fluentapi"},(0,n.kt)("a",{parentName:"h4",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,n.kt)("h4",{id:"memorypack"},(0,n.kt)("a",{parentName:"h4",href:"/docs/MemoryPack"},"MemoryPack")),(0,n.kt)("h4",{id:"meziantoupolyfill"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Meziantou.Polyfill"},"Meziantou.Polyfill")),(0,n.kt)("h4",{id:"microsoftextensionslogging"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,n.kt)("h4",{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"},"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator")),(0,n.kt)("h4",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,n.kt)("h4",{id:"optiontostringgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/OptionToStringGenerator"},"OptionToStringGenerator")),(0,n.kt)("h4",{id:"querystringgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/QueryStringGenerator"},"QueryStringGenerator")),(0,n.kt)("h4",{id:"rscg_decorator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,n.kt)("h4",{id:"rscg_utilitytypes"},(0,n.kt)("a",{parentName:"h4",href:"/docs/RSCG_UtilityTypes"},"RSCG_UtilityTypes")),(0,n.kt)("h4",{id:"staticreflection"},(0,n.kt)("a",{parentName:"h4",href:"/docs/StaticReflection"},"StaticReflection")),(0,n.kt)("h4",{id:"syncmethodgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,n.kt)("h4",{id:"systemruntimeinteropservices"},(0,n.kt)("a",{parentName:"h4",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,n.kt)("h4",{id:"systemtextregularexpressions"},(0,n.kt)("a",{parentName:"h4",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")),(0,n.kt)("h4",{id:"telemetrylogging"},(0,n.kt)("a",{parentName:"h4",href:"/docs/TelemetryLogging"},"TelemetryLogging")),(0,n.kt)("h4",{id:"thisclass"},(0,n.kt)("a",{parentName:"h4",href:"/docs/ThisClass"},"ThisClass")))}g.isMDXComponent=!0},23614:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/files/Equatable.Generator-a894564b88a0c26621dd1c5734eeac13.zip"}}]);