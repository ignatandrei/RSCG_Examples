"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4940],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(t),d=r,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return t?a.createElement(h,l(l({ref:n},p),{},{components:t})):a.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=t(7462),r=(t(7294),t(4137));const i={},l="Immutype",o={unversionedId:"RSCG-Examples/Immutype_readme",id:"RSCG-Examples/Immutype_readme",title:"Immutype",description:"NuGet",source:"@site/docs/RSCG-Examples/Immutype_readme.md",sourceDirName:"RSCG-Examples",slug:"/RSCG-Examples/Immutype_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/Immutype_readme",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GeneratorEquals_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/GeneratorEquals_readme"},next:{title:"Lombok.NET",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/Lombok.NET_readme"}},s={},m=[{value:"NuGet package",id:"nuget-package",level:2},{value:"Development environment requirements",id:"development-environment-requirements",level:2},{value:"Supported frameworks",id:"supported-frameworks",level:2},{value:"Usage Scenarios",id:"usage-scenarios",level:2},{value:"Sample scenario",id:"sample-scenario",level:3},{value:"Array",id:"array",level:3},{value:"Applying defaults",id:"applying-defaults",level:3},{value:"Clearing",id:"clearing",level:3},{value:"Immutable collection",id:"immutable-collection",level:3},{value:"Removing",id:"removing",level:3},{value:"Generic types",id:"generic-types",level:3},{value:"Nullable collection",id:"nullable-collection",level:3},{value:"Set",id:"set",level:3},{value:"Record with constructor",id:"record-with-constructor",level:3},{value:"Explicit constructor choice",id:"explicit-constructor-choice",level:3}],p={toc:m},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"immutype"},"Immutype"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Immutype"},(0,r.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/Immutype",alt:"NuGet"}))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://teamcity.jetbrains.com/viewType.html?buildTypeId=OpenSourceProjects_DevTeam_Immutype_BuildAndTestBuildType&guest=1"},(0,r.kt)("img",{src:"http://teamcity.jetbrains.com/app/rest/builds/buildType:(id:OpenSourceProjects_DevTeam_Immutype_BuildAndTestBuildType)/statusIcon"}))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Immutype")," is ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"},".NET code generator")," creating extension methods for records, structures, and classes marked by the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"[Immutype.Target]")," to efficiently operate with instances of these types like with immutable ones."),(0,r.kt)("p",null,"For instance, for the type Foo for the constructor parameter ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"values"))," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<int>")," following extension methods are generated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithValues(this Foo it, params int[] values)")," - to replace values by the new ones using a method with variable number of arguments"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithValues(this Foo it, IEnumerable<int> values)")," - to replace values by the new ones"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo AddValues(this Foo it, params int[] values)")," - to add values using a method with variable number of arguments"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo AddValues(this Foo it, IEnumerable<int> values)")," - to add values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo RemoveValues(this Foo it, params int[] values)")," - to remove values using a method with variable number of arguments"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo RemoveValues(this Foo it, IEnumerable<int> values)")," - to remove values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo ClearValues(this Foo it)")," - to clear all values")),(0,r.kt)("p",null,"For the type Foo for the constructor parameter ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"value"))," of other types, like ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", with default value ",(0,r.kt)("inlineCode",{parentName:"p"},"99")," following extension methods are generated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithValue(this Foo it, int value)")," - to replace a value by the new one"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithDefaultValue(this Foo it)")," - to replace a value by the default value ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("strong",{parentName:"em"},"99")))),(0,r.kt)("p",null,"The extensions methods above are generating automatically for each ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"internal")," type, like ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Foo"))," marked by the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"[Immutype.Target]")," in the static class named as ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"FooExtensions")),". This generated class ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"FooExtensions"))," is static, has the same accessibility level and the same namespace like a target class ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Foo")),". Each generated static extension method has two attributes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]")," - to improve performance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[Pure]")," - to indicate that this method is pure, that is, it does not make any visible state changes")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Immutype")," supports nullable ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references"},"reference")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types"},"value")," types and the following list of enumerable types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Arrays"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IEnumerable<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyCollection<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ICollection<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HashSet<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ISet<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Queue<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Stack<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyCollection<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlySet<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IImmutableList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableArray<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableQueue<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IImmutableQueue<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableStack<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IImmutableStack<T>"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Immutype")," supports ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.iincrementalgenerator"},"IIncrementalGenerator")," as well as ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isourcegenerator"},"ISourceGenerator")," so it works quite effective."),(0,r.kt)("h2",{id:"nuget-package"},"NuGet package"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Immutype"},(0,r.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/Immutype",alt:"NuGet"}))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Package Manager"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Install-Package Immutype\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},".NET CLI"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"dotnet add package Immutype\n")))),(0,r.kt)("h2",{id:"development-environment-requirements"},"Development environment requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/download/dotnet/5.0"},".NET SDK 5.0.102+")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-40"},"C# v.6 or newer"))),(0,r.kt)("h2",{id:"supported-frameworks"},"Supported frameworks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/core/"},".NET and .NET Core")," 1.0+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/standard/net-standard"},".NET Standard")," 1.0+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/framework/"},".NET Framework")," 3.5+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/windows/uwp/index"},"UWP/XBOX")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/apps/iot"},".NET IoT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/apps/xamarin"},"Xamarin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/maui/"},".NET Multi-platform App UI (MAUI)"))),(0,r.kt)("h2",{id:"usage-scenarios"},"Usage Scenarios"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basics",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sample-scenario"},"Sample scenario")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#array"},"Array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#applying-defaults"},"Applying defaults")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#clearing"},"Clearing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#immutable-collection"},"Immutable collection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#removing"},"Removing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#generic-types"},"Generic types")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nullable-collection"},"Nullable collection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#set"},"Set")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#record-with-constructor"},"Record with constructor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#explicit-constructor-choice"},"Explicit constructor choice"))))),(0,r.kt)("h3",{id:"sample-scenario"},"Sample scenario"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person(\n    string Name,\n    bool HasPassport = true,\n    int Age = 0,\n    ImmutableArray<Person> Friends = default);\n\npublic class SampleScenario\n{\n    public void Run()\n    {\n        var john = new Person("John", false, 15)\n            .AddFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n            \n        john.Friends.Length.ShouldBe(2);\n\n        john = john.WithAge(16).WithDefaultHasPassport();\n        john.Age.ShouldBe(16);\n        john.HasPassport.ShouldBeTrue();\n\n        john = john.AddFriends(\n            new Person("Daniel").WithAge(17),\n            new Person("Sophia").WithAge(18));\n        \n        john.Friends.Length.ShouldBe(4);\n            \n        john = john.RemoveFriends(new Person("David").WithAge(16));\n\n        john.Friends.Length.ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{id:"array"},"Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(string Name, int Age = 0, params Person[] Friends);\n\npublic class Array\n{ \n    public void Run()\n    {\n        var john = new Person("John")\n            .WithAge(15)\n            .AddFriends(new Person("David").WithAge(16))\n            .AddFriends(\n                new Person("James"),\n                new Person("Daniel").WithAge(17));\n        \n        john.Friends.Length.ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{id:"applying-defaults"},"Applying defaults"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(string Name = "John", int Age = 17);\n\npublic class ApplyingDefaults\n{\n    public void Run()\n    {\n        var john = new Person("David", 15)\n            .WithDefaultAge()\n            .WithDefaultName();\n        \n        john.Name.ShouldBe("John");\n        john.Age.ShouldBe(17);\n    }\n}\n')),(0,r.kt)("h3",{id:"clearing"},"Clearing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(\n    string Name,\n    int Age = 0,\n    params Person[] Friends);\n\npublic class Clearing\n{\n    public void Run()\n    {\n        var john = new Person("John",15, new Person("David").WithAge(16))\n            .AddFriends(new Person("James"));\n\n        john = john.ClearFriends();\n        \n        john.Friends.Length.ShouldBe(0);\n    }\n}\n')),(0,r.kt)("h3",{id:"immutable-collection"},"Immutable collection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly struct Person\n{\n    public readonly string Name;\n    public readonly int Age;\n    public readonly IImmutableList<Person> Friends;\n\n    public Person(\n        string name,\n        int age = 0,\n        IImmutableList<Person>? friends = default)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends ?? ImmutableList<Person>.Empty;\n    }\n};\n\npublic class ImmutableCollection\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .WithFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17))\n            .AddFriends(\n                new Person("David").WithAge(22));\n        \n        john.Friends.Count.ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{id:"removing"},"Removing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(\n    string Name,\n    int Age = 0,\n    params Person[] Friends);\n\npublic class Removing\n{\n    public void Run()\n    {\n        var john = new Person("John",15, new Person("David").WithAge(16))\n            .AddFriends(new Person("James"));\n\n        john = john.RemoveFriends(new Person("James"));\n        \n        john.Friends.Length.ShouldBe(1);\n    }\n}\n')),(0,r.kt)("h3",{id:"generic-types"},"Generic types"),(0,r.kt)("p",null,"It is possible to use generic types including any generic constraints."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person<TAge>(string Name, TAge Age = default, IEnumerable<Person<TAge>>? Friends = default) \n    where TAge : struct;\n\npublic class GenericTypes\n{ \n    public void Run()\n    {\n        var john = new Person<int>("John")\n            .WithAge(15)\n            .WithFriends(new Person<int>("David").WithAge(16))\n            .AddFriends(\n                new Person<int>("James"),\n                new Person<int>("Daniel").WithAge(17));\n        \n        john.Friends?.Count().ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{id:"nullable-collection"},"Nullable collection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person(\n    string Name,\n    int? Age = default,\n    ICollection<Person>? Friends = default);\n\npublic class NullableCollection\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .AddFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n        \n        john.Friends?.Count.ShouldBe(2);\n    }\n}\n')),(0,r.kt)("h3",{id:"set"},"Set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person(\n    string Name,\n    int Age = 0,\n    ISet<Person>? Friends = default);\n\npublic class Set\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .AddFriends(\n                new Person("David").WithAge(16),\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n        \n        john.Friends?.Count.ShouldBe(2);\n    }\n}\n')),(0,r.kt)("h3",{id:"record-with-constructor"},"Record with constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person\n{\n    public Person(\n        string name,\n        int? age = default,\n        ICollection<Person>? friends = default)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends;\n    }\n\n    public string Name { get; }\n\n    public int? Age { get; }\n\n    public ICollection<Person>? Friends { get; }\n\n    public void Deconstruct(\n        out string name,\n        out int? age,\n        out ICollection<Person>? friends)\n    {\n        name = Name;\n        age = Age;\n        friends = Friends;\n    }\n}\n\npublic class RecordWithConstructor\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .WithFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n        \n        john.Friends?.Count.ShouldBe(2);\n    }\n}\n')),(0,r.kt)("h3",{id:"explicit-constructor-choice"},"Explicit constructor choice"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly struct Person\n{\n    public readonly string Name;\n    public readonly int Age;\n    public readonly IImmutableList<Person> Friends;\n\n    // You can explicitly select a constructor by marking it with the [Immutype.Target] attribute\n    [Immutype.Target]\n    public Person(\n        string name,\n        int age = 0,\n        IImmutableList<Person>? friends = default)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends ?? ImmutableList<Person>.Empty;\n    }\n    \n    public Person(\n        string name,\n        int age,\n        IImmutableList<Person>? friends,\n        int someArg = 99)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends ?? ImmutableList<Person>.Empty;\n    }\n};\n\npublic class ExplicitConstructorChoice\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .WithFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17))\n            .AddFriends(\n                new Person("David").WithAge(22));\n        \n        john.Friends.Count.ShouldBe(3);\n    }\n}\n')))}c.isMDXComponent=!0}}]);