"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2396],{4700:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>m,toc:()=>u});var n=a(87462),r=(a(67294),a(3905)),o=a(73992),i=a(18679),s=a(68839);const l={sidebar_position:360,title:"36 - ProxyGen",description:"intercepting and duck typing",slug:"/ProxyGen"},p="ProxyGen  by D\xe9nes Solti",m={unversionedId:"RSCG-Examples/ProxyGen",id:"RSCG-Examples/ProxyGen",title:"36 - ProxyGen",description:"intercepting and duck typing",source:"@site/docs/RSCG-Examples/ProxyGen.md",sourceDirName:"RSCG-Examples",slug:"/ProxyGen",permalink:"/RSCG_Examples/v2/docs/ProxyGen",draft:!1,tags:[],version:"current",sidebarPosition:360,frontMatter:{sidebar_position:360,title:"36 - ProxyGen",description:"intercepting and duck typing",slug:"/ProxyGen"},sidebar:"tutorialSidebar",previous:{title:"35 - DeeDee",permalink:"/RSCG_Examples/v2/docs/DeeDee"},next:{title:"37 - AutoRegisterInject",permalink:"/RSCG_Examples/v2/docs/AutoRegisterInject"}},c={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share ProxyGen",id:"share-proxygen",level:3},{value:"In the same category (Interface) - 11 other generators",id:"in-the-same-category-interface---11-other-generators",level:3},{value:"Biwen.AutoClassGen",id:"biwenautoclassgen",level:4},{value:"CopyCat",id:"copycat",level:4},{value:"Farskeptic.AutoCompose",id:"farskepticautocompose",level:4},{value:"MakeInterface.Generator",id:"makeinterfacegenerator",level:4},{value:"Matryoshki",id:"matryoshki",level:4},{value:"Minerals.AutoInterfaces",id:"mineralsautointerfaces",level:4},{value:"NetAutomaticInterface",id:"netautomaticinterface",level:4},{value:"Roozie.AutoInterface",id:"roozieautointerface",level:4},{value:"RSCG_CompositeProvider",id:"rscg_compositeprovider",level:4},{value:"rscg_Interface_to_null_object",id:"rscg_interface_to_null_object",level:4},{value:"RSCG_Static",id:"rscg_static",level:4}],d={toc:u},h="wrapper";function g(e){let{components:t,...l}=e;return(0,r.kt)(h,(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"proxygen--by-d\xe9nes-solti"},"ProxyGen  by D\xe9nes Solti"),(0,r.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/ProxyGen.net/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/ProxyGen.net?label=ProxyGen.net",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/ProxyGen"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/Sholtee/ProxyGen?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/Sholtee/ProxyGen?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"ProxyGen")),(0,r.kt)("p",{parentName:"admonition"},".NET proxy generator powered by Roslyn"),(0,r.kt)("p",{parentName:"admonition"},"Author: D\xe9nes Solti"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/ProxyGen.net/"},"https://www.nuget.org/packages/ProxyGen.net/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/ProxyGen"},"https://github.com/Sholtee/ProxyGen")),(0,r.kt)("p",{parentName:"admonition"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/ProxyGen"},"https://github.com/Sholtee/ProxyGen"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"proxygennet-build-status-appveyor-tests-coverage-status-nuget-with-prereleases-github-last-commit-branch"},"ProxyGen.NET ",(0,r.kt)("a",{parentName:"h1",href:"https://ci.appveyor.com/project/Sholtee/proxygen/branch/master"},(0,r.kt)("img",{parentName:"a",src:"https://ci.appveyor.com/api/projects/status/caw7qqtf5tbaa1fq/branch/master?svg=true",alt:"Build status"}))," ",(0,r.kt)("img",{parentName:"h1",src:"https://img.shields.io/appveyor/tests/sholtee/proxygen/master",alt:"AppVeyor tests"})," ",(0,r.kt)("a",{parentName:"h1",href:"https://coveralls.io/github/Sholtee/proxygen?branch=master"},(0,r.kt)("img",{parentName:"a",src:"https://coveralls.io/repos/github/Sholtee/proxygen/badge.svg?branch=master",alt:"Coverage Status"}))," ",(0,r.kt)("a",{parentName:"h1",href:"https://www.nuget.org/packages/proxygen.net"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/vpre/proxygen.net",alt:"Nuget (with prereleases)"}))," ",(0,r.kt)("img",{parentName:"h1",src:"https://img.shields.io/github/last-commit/sholtee/proxygen/master",alt:"GitHub last commit (branch)"})),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},".NET proxy generator powered by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dotnet/roslyn"},"Roslyn"))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"This documentation refers the version 8.X of the library")),(0,r.kt)("h2",{parentName:"admonition",id:"purposes"},"Purposes"),(0,r.kt)("p",{parentName:"admonition"},"This library currently supports generating ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Proxy_pattern"},"proxies")," for interface interception and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Duck_typing"},"duck typing"),"."),(0,r.kt)("h3",{parentName:"admonition",id:"to-hook-into-interface-method-calls"},"To hook into interface method calls:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the interceptor class (which is an ",(0,r.kt)("a",{parentName:"p",href:"https://sholtee.github.io/proxygen/doc/Solti.Utils.Proxy.InterfaceInterceptor-1.html"},"InterfaceInterceptor")," descendant):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using Solti.Utils.Proxy;\n...\npublic class MyInterceptor: InterfaceInterceptor<IMyInterface>\n{\n  public MyInterceptor(IMyInterface target) : base(target) {}\n\n  public MyInterceptor(IMyInterface target, MyParam myParam) : base(target) {}  // overloaded constructor\n\n  public override object? Invoke(InvocationContext context) // Invoking the generated proxy instance will trigger this method\n  {\n  if (suppressOriginalMethod)\n  {\n    return something;\n      // ref|out parameters can be assigned by setting the corresponding "context.Args[]" item \n  }\n  \n  context.Args[0] = someNewVal; // "someNewVal" will be forwarded to the original method\n  \n  return base.Invoke(context); // Let the original method do its work\n  }  \n}\n// OR\npublic class MyInterceptorTargetingTheImplementation: InterfaceInterceptor<IMyInterface, MyInterfaceImplementation>\n{\n    public MyInterceptor(MyInterfaceImplementation target) : base(target) {}\n\n    public override object? Invoke(InvocationContext context)\n    {\n        MemberInfo\n            ifaceMember  = context.InterfaceMember,  // Will point to the invoked IMyInterface member (e.g.: IMyInterface.Foo())\n            targetMember = context.TargetMember; // Will point to the underlying MyInterfaceImplementation member (e.g. MyInterfaceImplementation.Foo())\n\n        return base.Invoke(context);\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Generate a proxy instance invoking the desired constructor:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\n...\nIMyInterface target = new MyClass();\n...\nIMyInterface proxy;\n\nproxy = ProxyGenerator<IMyInterface, MyInterceptor>.Activate(Tuple.Create(target)); // or ActivateAsync()\nproxy = ProxyGenerator<IMyInterface, MyInterceptor>.Activate(Tuple.Create(target, new MyParam()));\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enjoy"))),(0,r.kt)("p",{parentName:"admonition"},"Note that the ",(0,r.kt)("em",{parentName:"p"},"target")," can access its most outer enclosing proxy. To achieve this it just has to implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"IProxyAccess<IMyInterface>")," interface:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Solti.Utils.Proxy;\n\npublic class MyClass : IMyInterface, IProxyAccess<IMyInterface>\n{\n    ...\n    public IMyInterface Proxy { get; set; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"For further usage examples see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/proxygen/blob/master/TEST/ProxyGen.Tests/Generators/ProxyGenerator.cs"},"this")," or ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/injector#decorating-services"},"that"),"."),(0,r.kt)("h3",{parentName:"admonition",id:"to-create-ducks"},"To create ducks:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Declare an interface that covers all the desired members of the target class:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class TargetClass // does not implement IDuck\n{\n  public void Foo(){...}\n}\n...\npublic interface IDuck \n{\n  void Foo();\n}\n"))),(0,r.kt)("li",{parentName:"ol"},"Generate the duck instance:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Solti.Utils.Proxy.Generators;\n...\nTargetClass target = ...;\nIDuck duck = DuckGenerator<IDuck, TargetClass>.Activate(Tuple.Create(target)); // or ActivateAsync()\n"))),(0,r.kt)("li",{parentName:"ol"},"Quack")),(0,r.kt)("p",{parentName:"admonition"},"Related tests can be seen ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/proxygen/blob/master/TEST/ProxyGen.Tests/Generators/DuckGenerator.cs"},"here"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"caching-the-generated-assembly"},"Caching the generated assembly"),(0,r.kt)("p",{parentName:"admonition"},"By setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"ProxyGen.AssemblyCacheDir")," property in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/core/run-time-config/"},"YourApp.runtimeconfig.json")," you can make the system cache the generated assembly, so next time your app starts and requests the proxy there won't be time consuming emitting operation."),(0,r.kt)("p",{parentName:"admonition"},"You can do it easily by creating a template file named ",(0,r.kt)("inlineCode",{parentName:"p"},"runtimeconfig.template.json")," in your project folder:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "configProperties": {\n    "ProxyGen.AssemblyCacheDir": "GeneratedAssemblies"\n  }\n}\n')),(0,r.kt)("h2",{parentName:"admonition",id:"embedding-the-generated-type"},"Embedding the generated type"),(0,r.kt)("p",{parentName:"admonition"},"This library can be used as a ",(0,r.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"},"source generator")," so you can embed the generated proxy type into the assembly that uses it. This is simply done by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Solti.Utils.Proxy.Attributes.EmbedGeneratedTypeAttribute"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[assembly: EmbedGeneratedType(typeof(ProxyGenerator<IMyInterface, MyInterceptor<IMyInterface>>))]\n[assembly: EmbedGeneratedType(typeof(DuckGenerator<IMyInterface, MyClass>))]\n\n")),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"xXxGenerator.GetGeneratedType()")," method returns the embedded type if it is present in the assembly in which the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetGeneratedType()")," was called. Since all the time consumig operations already happened in compile time, requesting embedded types can singificantly improve the performance."),(0,r.kt)("p",{parentName:"admonition"},"Note that:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Open generics are not supported."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/coveralls.io/"},"coveralls.io")," (and other coverage reporters) may crash if your project was augmented by a source generator. To work this issue around:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ignore the generated sources in your coverage app (e.g.: in ",(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/OpenCover/"},"OpenCover")," use the ",(0,r.kt)("inlineCode",{parentName:"li"},"-filter:-[*]Proxies.GeneratedClass_*")," switch)"),(0,r.kt)("li",{parentName:"ul"},"Create an empty file for each generated class (e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},"YourProject\\Solti.Utils.Proxy\\Solti.Utils.Proxy.Internals.ProxyEmbedder\\Proxies.GeneratedClass_XxX.cs"),")"),(0,r.kt)("li",{parentName:"ul"},"Exclude these files from your project:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n  <Compile Remove="Solti.Utils.Proxy\\**" />\n  <EmbeddedResource Remove="Solti.Utils.Proxy\\**" />\n  <None Remove="Solti.Utils.Proxy\\**" />\n</ItemGroup>\n')))),(0,r.kt)("h2",{parentName:"admonition",id:"inspecting-the-generated-code"},"Inspecting the generated code"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"ProxyGen")," is able to dump the generated sources. Due to performance considerations it is disabled by default. To enable "),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In runtime:"),(0,r.kt)("p",{parentName:"li"},"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"ProxyGen.SourceDump")," property (in the same way you could see ",(0,r.kt)("a",{parentName:"p",href:"#caching-the-generated-assembly"},"above"),") to the desired directory (note that environment variables are supported):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "configProperties": {\n    "ProxyGen.SourceDump": "%TEMP%"\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In compile time (source generator):"),(0,r.kt)("p",{parentName:"li"},"Extend your ",(0,r.kt)("inlineCode",{parentName:"p"},".csproj")," with the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<PropertyGroup>\n  <ProxyGen_SourceDump>$(OutputPath)Logs</ProxyGen_SourceDump>\n</PropertyGroup>\n")))),(0,r.kt)("p",{parentName:"admonition"},"The output should look like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sholtee/proxygen/blob/master/TEST/ProxyGen.Tests/ClsSrcUnit.txt"},"this"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"migrating-from-version"},"Migrating from version"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"2.X",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Delete all the cached assemblies (if the ",(0,r.kt)("inlineCode",{parentName:"li"},"[Proxy|Duck]Generator.CacheDirectory")," is set somewhere)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InterfaceInterceptor.Invoke()")," returns the result of the original method (instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"CALL_TARGET"),") so in the override you may never need to invoke the ",(0,r.kt)("inlineCode",{parentName:"li"},"method")," parameter directly."))),(0,r.kt)("li",{parentName:"ul"},"3.X",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[Proxy|Duck]Generator.GeneratedType[Async]")," property has been removed. To get the generated proxy type call the ",(0,r.kt)("inlineCode",{parentName:"li"},"[Proxy|Duck]Generator.GetGeneratedType[Async]()")," method."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[Proxy|Duck]Generator.CacheDirectory")," property has been removed. To set the cache directory tweak the ",(0,r.kt)("a",{parentName:"li",href:"#caching-the-generated-assembly"},"runtimeconfig.json")," file."))),(0,r.kt)("li",{parentName:"ul"},"4.X",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The layout of the ",(0,r.kt)("inlineCode",{parentName:"li"},"InterfaceInterceptor<>.Invoke()")," has been changed. Invocation parameters can be grabbed from the ",(0,r.kt)("inlineCode",{parentName:"li"},"InvocationContext")," passed to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Invoke()")," method."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"ConcurrentInterfaceInterceptor<>")," class has been dropped since the ",(0,r.kt)("inlineCode",{parentName:"li"},"InterfaceInterceptor<>")," class was rewritten in a thread safe manner."))),(0,r.kt)("li",{parentName:"ul"},"5.X",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"You don't need to manually activate the generated proxy type, instead you may use the built-in ",(0,r.kt)("inlineCode",{parentName:"li"},"Generator.Activate()")," method."))),(0,r.kt)("li",{parentName:"ul"},"6.X",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"InvocationContext.InvokeTarget")," property has been removed but you should not be affected by it"),(0,r.kt)("li",{parentName:"ul"},"As proxy embedder has been reimplemented using the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md"},"v2")," Source Generator API, this feature now requires VS 2022"))),(0,r.kt)("li",{parentName:"ul"},"7.X",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InterfaceInterceptor<TInterface>.Member|Method")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"li"},"InterfaceMember|InterfaceMethod"))))),(0,r.kt)("h2",{parentName:"admonition",id:"resources"},"Resources"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://sholtee.github.io/proxygen"},"API Docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://sholtee.github.io/proxygen/perf"},"Benchmark Results")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Sholtee/proxygen/blob/master/history.md"},"Version History"))),(0,r.kt)("h2",{parentName:"admonition",id:"supported-frameworks"},"Supported frameworks"),(0,r.kt)("p",{parentName:"admonition"},"This project currently targets ",(0,r.kt)("em",{parentName:"p"},".NET Standard")," 2.0 and 2.1.")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"intercepting and duck typing")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"ProxyGen")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include="ProxyGen.NET" Version="8.2.1" />\n  </ItemGroup>\n\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ProxyGen\\src\\ProxyGenDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"ProxyGen")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'Person person = new ();\nperson.FirstName= "Andrei";\nperson.LastName = "Ignat";\nIPerson duck = DuckGenerator<IPerson, Person>.Activate(Tuple.Create(person));\nConsole.WriteLine(duck.FullName());\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ProxyGen\\src\\ProxyGenDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"ProxyGen")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nnamespace ProxyGenDemo;\n\npublic class Person \n{\n    public int ID { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public string FullName()\n    {\n        return $"{FirstName} {LastName}";\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ProxyGen\\src\\ProxyGenDemo\\IPerson.cs",label:"IPerson.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"ProxyGen")," in ",(0,r.kt)("em",{parentName:"p"},"IPerson.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace ProxyGenDemo;\n\npublic interface IPerson\n{\n    string? FirstName { get; set; }\n    string? LastName { get; set; }\n\n    string FullName();\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ProxyGen\\src\\ProxyGenDemo\\globals.cs",label:"globals.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"ProxyGen")," in ",(0,r.kt)("em",{parentName:"p"},"globals.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"global using ProxyGenDemo;\nglobal using Solti.Utils.Proxy.Generators;\nglobal using Solti.Utils.Proxy.Attributes;\n\n//[assembly: EmbedGeneratedType(typeof(ProxyGenerator<IMyInterface, MyInterceptor<IMyInterface>>))]\n[assembly: EmbedGeneratedType(typeof(DuckGenerator<IPerson, Person>))]\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ProxyGen\\src\\ProxyGenDemo\\obj\\GX\\Solti.Utils.Proxy\\Solti.Utils.Proxy.Internals.ProxyEmbedder\\Duck_BB1E45629CF5010E4068E5BFBB7EF53B.cs",label:"Duck_BB1E45629CF5010E4068E5BFBB7EF53B.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'#pragma warning disable\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProxyGen.NET", "8.2.1.0"), global::System.Diagnostics.DebuggerNonUserCodeAttribute, global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]\ninternal sealed class Duck_BB1E45629CF5010E4068E5BFBB7EF53B : global::Solti.Utils.Proxy.Internals.DuckBase<global::ProxyGenDemo.Person>, global::ProxyGenDemo.IPerson\n{\n    public Duck_BB1E45629CF5010E4068E5BFBB7EF53B(global::ProxyGenDemo.Person target) : base(target)\n    {\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    global::System.String global::ProxyGenDemo.IPerson.FullName() => this.Target.FullName();\n    global::System.String global::ProxyGenDemo.IPerson.FirstName {[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this.Target.FirstName; [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set => this.Target.FirstName = value; }\n\n    global::System.String global::ProxyGenDemo.IPerson.LastName {[global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this.Target.LastName; [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set => this.Target.LastName = value; }\n\n    public static readonly global::System.Func<global::System.Object, global::System.Object> __Activator = tuple =>\n    {\n        switch (tuple)\n        {\n            case global::System.Tuple<global::ProxyGenDemo.Person> t0:\n                return new global::Duck_BB1E45629CF5010E4068E5BFBB7EF53B(t0.Item1);\n            default:\n                throw new global::System.MissingMethodException("Constructor with the given layout cannot be found.");\n        }\n    };\n    [global::System.Runtime.CompilerServices.ModuleInitializerAttribute]\n    public static void Initialize() => global::Solti.Utils.Proxy.Internals.LoadedTypes.Register(typeof(global::Duck_BB1E45629CF5010E4068E5BFBB7EF53B));\n}\n')))),(0,r.kt)("h2",{id:"useful"},"Useful"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(15330).Z},"Download Example project ProxyGen "))),(0,r.kt)("h3",{id:"share-proxygen"},"Share ProxyGen"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FProxyGen&quote=ProxyGen",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FProxyGen&text=ProxyGen:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FProxyGen",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FProxyGen&title=ProxyGen",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FProxyGen&title=ProxyGen&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FProxyGen",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ProxyGen"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ProxyGen")),(0,r.kt)("h3",{id:"in-the-same-category-interface---11-other-generators"},"In the same category (Interface) - 11 other generators"),(0,r.kt)("h4",{id:"biwenautoclassgen"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Biwen.AutoClassGen"},"Biwen.AutoClassGen")),(0,r.kt)("h4",{id:"copycat"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CopyCat"},"CopyCat")),(0,r.kt)("h4",{id:"farskepticautocompose"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Farskeptic.AutoCompose"},"Farskeptic.AutoCompose")),(0,r.kt)("h4",{id:"makeinterfacegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/MakeInterface.Generator"},"MakeInterface.Generator")),(0,r.kt)("h4",{id:"matryoshki"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Matryoshki"},"Matryoshki")),(0,r.kt)("h4",{id:"mineralsautointerfaces"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Minerals.AutoInterfaces"},"Minerals.AutoInterfaces")),(0,r.kt)("h4",{id:"netautomaticinterface"},(0,r.kt)("a",{parentName:"h4",href:"/docs/NetAutomaticInterface"},"NetAutomaticInterface")),(0,r.kt)("h4",{id:"roozieautointerface"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Roozie.AutoInterface"},"Roozie.AutoInterface")),(0,r.kt)("h4",{id:"rscg_compositeprovider"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_CompositeProvider"},"RSCG_CompositeProvider")),(0,r.kt)("h4",{id:"rscg_interface_to_null_object"},(0,r.kt)("a",{parentName:"h4",href:"/docs/rscg_Interface_to_null_object"},"rscg_Interface_to_null_object")),(0,r.kt)("h4",{id:"rscg_static"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_Static"},"RSCG_Static")))}g.isMDXComponent=!0},15330:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/ProxyGen-45300c91786a6983e4736a6063254ddd.zip"}}]);