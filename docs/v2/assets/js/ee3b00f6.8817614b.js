"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[5513],{72623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>d,metadata:()=>l,toc:()=>m});var r=n(87462),o=(n(67294),n(3905)),a=n(73992),i=n(18679),s=n(68839);const d={sidebar_position:1340,title:"134 - StronglyTypedUid",description:"Transforming a record into a GUID",slug:"/StronglyTypedUid"},p="StronglyTypedUid  by Victor S\xe1nchez",l={unversionedId:"RSCG-Examples/StronglyTypedUid",id:"RSCG-Examples/StronglyTypedUid",title:"134 - StronglyTypedUid",description:"Transforming a record into a GUID",source:"@site/docs/RSCG-Examples/StronglyTypedUid.md",sourceDirName:"RSCG-Examples",slug:"/StronglyTypedUid",permalink:"/RSCG_Examples/v2/docs/StronglyTypedUid",draft:!1,tags:[],version:"current",sidebarPosition:1340,frontMatter:{sidebar_position:1340,title:"134 - StronglyTypedUid",description:"Transforming a record into a GUID",slug:"/StronglyTypedUid"},sidebar:"tutorialSidebar",previous:{title:"133 - FusionReactor",permalink:"/RSCG_Examples/v2/docs/FusionReactor"},next:{title:"135 - BitsKit",permalink:"/RSCG_Examples/v2/docs/BitsKit"}},u={},m=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share StronglyTypedUid",id:"share-stronglytypeduid",level:3},{value:"In the same category (PrimitiveObsession) - 4 other generators",id:"in-the-same-category-primitiveobsession---4-other-generators",level:3},{value:"DomainPrimitives",id:"domainprimitives",level:4},{value:"Strongly",id:"strongly",level:4},{value:"UnitGenerator",id:"unitgenerator",level:4},{value:"Vogen",id:"vogen",level:4}],c={toc:m},y="wrapper";function g(e){let{components:t,...d}=e;return(0,o.kt)(y,(0,r.Z)({},c,d,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"stronglytypeduid--by-victor-s\xe1nchez"},"StronglyTypedUid  by Victor S\xe1nchez"),(0,o.kt)(s.Z,{toc:m,mdxType:"TOCInline"}),(0,o.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/StronglyTypedUid/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/StronglyTypedUid?label=StronglyTypedUid",alt:"Nuget"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vicosanz/StronglyTypedUid"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/vicosanz/StronglyTypedUid?label=updated",alt:"GitHub last commit"})),"\n",(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/vicosanz/StronglyTypedUid?style=social",alt:"GitHub Repo stars"})),(0,o.kt)("h2",{id:"details"},"Details"),(0,o.kt)("h3",{id:"info"},"Info"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Name: ",(0,o.kt)("strong",{parentName:"p"},"StronglyTypedUid")),(0,o.kt)("p",{parentName:"admonition"},"Implementation of Strongly Typed Ids."),(0,o.kt)("p",{parentName:"admonition"},"Author: Victor S\xe1nchez"),(0,o.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/StronglyTypedUid/"},"https://www.nuget.org/packages/StronglyTypedUid/")),"   "),(0,o.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vicosanz/StronglyTypedUid"},"https://github.com/vicosanz/StronglyTypedUid")),(0,o.kt)("p",{parentName:"admonition"},"Source : ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vicosanz/StronglyTypedUid"},"https://github.com/vicosanz/StronglyTypedUid"))),(0,o.kt)("h3",{id:"original-readme"},"Original Readme"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("h1",{parentName:"admonition",id:"stronglytypeduid"},"StronglyTypedUid"),(0,o.kt)("p",{parentName:"admonition"},"C# Implementation of Strongly Typed Id made easy."),(0,o.kt)("p",{parentName:"admonition"},"StronglyTypedUid ",(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/StronglyTypedUid/"},(0,o.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/StronglyTypedUid",alt:"NuGet Badge"}))),(0,o.kt)("p",{parentName:"admonition"},"StronglyTypedUid.Generator ",(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/StronglyTypedUid.Generator/"},(0,o.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/StronglyTypedUid.Generator",alt:"NuGet Badge"}))),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/vicosanz/StronglyTypedUid/actions/workflows/main.yml"},(0,o.kt)("img",{parentName:"a",src:"https://github.com/vicosanz/StronglyTypedUid/actions/workflows/main.yml/badge.svg",alt:"publish to nuget"}))),(0,o.kt)("h2",{parentName:"admonition",id:"buy-me-a-coffee"},"Buy me a coffee"),(0,o.kt)("p",{parentName:"admonition"},"If you want to reward my effort, \u2615 ",(0,o.kt)("a",{parentName:"p",href:"https://www.paypal.com/paypalme/vicosanzdev?locale.x=es_XC"},"https://www.paypal.com/paypalme/vicosanzdev?locale.x=es_XC")),(0,o.kt)("p",{parentName:"admonition"},"All strongly typed ids are source generated, you must create a record struct in this ways:"),(0,o.kt)("p",{parentName:"admonition"},"Using attribute decorating a record struct (default Guid version)"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    [StronglyTypedUid] \n    public readonly partial record struct CustomerId { }\n")),(0,o.kt)("p",{parentName:"admonition"},"If you want change to Ulid"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    [StronglyTypedUid(asUlid:true)] \n    public readonly partial record struct CustomerId { }\n")),(0,o.kt)("p",{parentName:"admonition"},"Create additional converters to popular packages like efcore, dapper and newtonsoftjson"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    [StronglyTypedUid(asUlid:true, [EnumAdditionalConverters.EFCore, EnumAdditionalConverters.Dapper, EnumAdditionalConverters.NewtonsoftJson])]\n    public readonly partial record struct CustomerId { }\n")),(0,o.kt)("p",{parentName:"admonition"},"The generator will create a partial record struct of the same name"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// Auto generated code\n[TypeConverter(typeof(CustomerIdTypeConverter))]\n[System.Text.Json.Serialization.JsonConverter(typeof(CustomerIdJsonConverter))]\npublic readonly partial record struct CustomerId(Guid Value) : IStronglyTypedGuid\n{\n    public static CustomerId Empty => new(Guid.Empty);\n\n    public static CustomerId NewCustomerId() => new(Guid.NewGuid());\n\n    public static implicit operator CustomerId(Guid value) => new(value);\n\n    public static explicit operator Guid(CustomerId value) => value.Value;\n\n    public bool IsEmpty => Value == Guid.Empty;\n\n    public override string ToString() => Value.ToString();\n\n    public static CustomerId Parse(string text) => new CustomerId(Guid.Parse(text));\n\n    public static bool TryParse(string text, out CustomerId result)\n    {\n        try\n        {\n            if (Guid.TryParse(text, out Guid uid))\n            {\n                result = uid;\n                return true;\n            }\n        }\n        catch (Exception)\n        {\n        }\n        result = default;\n        return false;\n    }\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"You can add additional logic to your strongly type id."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'    [StronglyTypedUid] \n    public readonly partial record struct CustomerId \n    { \n        public override string ToTaggedString() => $"CID-{Value}";\n\n        public static bool TryParseTagged(string text, out CustomerId customer)\n        {\n            try\n            {\n                if (Guid.TryParse(text[4..], out Guid result))\n                {\n                    customer = result;\n                    return true;\n                }\n            }\n            catch (Exception)\n            {\n            }\n            customer = default;\n            return false;\n        }\n    }\n')),(0,o.kt)("p",{parentName:"admonition"},"The new type is decorated with a TypeConverter and a JsonConverter automatically"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"[TypeConverter(typeof(CustomerIdTypeConverter))]\n[System.Text.Json.Serialization.JsonConverter(typeof(CustomerIdJsonConverter))]\n")),(0,o.kt)("p",{parentName:"admonition"},"You can serialize and deserialize without problems"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public record Customer(CustomerId Id, string Name);\n\n\nvar newcustomer = new Customer(CustomerId.NewCustomerId(), "Jhon");\n\nvar serializeOptions = new JsonSerializerOptions\n{\n    WriteIndented = true\n};\nvar json = JsonSerializer.Serialize(newcustomer, serializeOptions);\n\nvar newcustomer2 = JsonSerializer.Deserialize<Customer>(json);\n\n'))),(0,o.kt)("h3",{id:"about"},"About"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Transforming a record into a GUID")),(0,o.kt)("h2",{id:"how-to-use"},"How to use"),(0,o.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,o.kt)("p",null,"This is the CSharp Project that references ",(0,o.kt)("strong",{parentName:"p"},"StronglyTypedUid")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="StronglyTypedUid" Version="1.0.1" />\n    <PackageReference Include="StronglyTypedUid.Common" Version="1.0.1" />\n    <PackageReference Include="StronglyTypedUid.Generator" Version="1.0.1" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StronglyTypedUid\\src\\RecordToGuid\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"StronglyTypedUid")," in ",(0,o.kt)("em",{parentName:"p"},"Program.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using RecordToGuid;\n\nPersonId personId = PersonId.Empty;\nConsole.WriteLine(personId);\npersonId = PersonId.NewPersonId();\nConsole.WriteLine(personId);\n\n"))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StronglyTypedUid\\src\\RecordToGuid\\PersonId.cs",label:"PersonId.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"StronglyTypedUid")," in ",(0,o.kt)("em",{parentName:"p"},"PersonId.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing StronglyTypedUid;\n\nnamespace RecordToGuid;\n[StronglyTypedUid]\npublic readonly partial record struct PersonId\n{\n}\n\n")))),(0,o.kt)("h3",{id:"generated-files"},"Generated Files"),(0,o.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StronglyTypedUid\\src\\RecordToGuid\\obj\\GX\\StronglyTypedUid.Generator\\StronglyTypedUid.Generator.StronglyTypedUidGenerator\\RecordToGuid.PersonId.g.cs",label:"RecordToGuid.PersonId.g.cs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using System;\nusing System.ComponentModel;\nusing System.Globalization;\nusing System.Text.Json.Serialization;\nusing System.Text.Json;\nusing System.Buffers;\n\nusing StronglyTypedUid;\n\n#nullable enable\n\nnamespace RecordToGuid;\n\n[TypeConverter(typeof(PersonIdTypeConverter))]\n[System.Text.Json.Serialization.JsonConverter(typeof(PersonIdJsonConverter))]\npublic readonly partial record struct PersonId(Guid Value) : IStronglyTypedUid\n{\n    public static PersonId Empty => new(Guid.Empty);\n\n    public static PersonId NewPersonId() => new(Guid.NewGuid());\n\n    public static implicit operator PersonId(Guid value) => new(value);\n\n    public static explicit operator Guid(PersonId value) => value.Value;\n\n    public bool IsEmpty => Value == Guid.Empty;\n\n    public override string ToString() => Value.ToString();\n\n    public static PersonId Parse(string text) => new PersonId(Guid.Parse(text));\n\n    public static bool TryParse(string text, out PersonId result)\n    {\n        try\n        {\n            if (Guid.TryParse(text, out Guid uid))\n            {\n                result = uid;\n                return true;\n            }\n        }\n        catch (Exception)\n        {\n        }\n        result = default;\n        return false;\n    }\n}\n\npublic class PersonIdTypeConverter : TypeConverter\n{\n    private static readonly Type StringType = typeof(string);\n    private static readonly Type UidType = typeof(Guid);\n\n    public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) => \n        sourceType == StringType || sourceType == UidType || base.CanConvertFrom(context, sourceType);\n\n    public override object? ConvertFrom(ITypeDescriptorContext? context,\n        CultureInfo? culture, object value) => value switch\n        {\n            Guid g => new PersonId(g),\n            string stringValue => PersonId.Parse(stringValue),\n            _ => base.ConvertFrom(context, culture, value),\n        };\n\n    public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) =>\n        destinationType == StringType || destinationType == UidType || base.CanConvertTo(context, destinationType);\n\n    public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType)\n    {\n        if (value is PersonId result)\n        {\n            if (destinationType == StringType)\n            {\n                return result.ToString();\n            }\n            if (destinationType == UidType)\n            {\n                return (Guid)result;\n            }\n        }\n        return base.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\npublic class PersonIdJsonConverter : JsonConverter<PersonId>\n{\n    public override PersonId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        try\n        {\n            if (reader.TokenType != JsonTokenType.String) throw new JsonException("Expected string");\n            return new PersonId(new Guid(reader.GetString()));\n        }\n        catch (IndexOutOfRangeException e)\n        {\n            throw new JsonException("PersonId invalid: length must be 36", e);\n        }\n        catch (OverflowException e)\n        {\n            throw new JsonException("PersonId invalid: invalid character", e);\n        }\n    }\n    public override void Write(Utf8JsonWriter writer, PersonId value, JsonSerializerOptions options)\n    {\n        writer.WriteStringValue(value.ToString());\n    }\n}\n\n\n')))),(0,o.kt)("h2",{id:"usefull"},"Usefull"),(0,o.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{target:"_blank",href:n(24151).Z},"Download Example project StronglyTypedUid "))),(0,o.kt)("h3",{id:"share-stronglytypeduid"},"Share StronglyTypedUid"),(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&quote=StronglyTypedUid",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&text=StronglyTypedUid:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&title=StronglyTypedUid",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&title=StronglyTypedUid&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StronglyTypedUid"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StronglyTypedUid")),(0,o.kt)("h3",{id:"in-the-same-category-primitiveobsession---4-other-generators"},"In the same category (PrimitiveObsession) - 4 other generators"),(0,o.kt)("h4",{id:"domainprimitives"},(0,o.kt)("a",{parentName:"h4",href:"/docs/DomainPrimitives"},"DomainPrimitives")),(0,o.kt)("h4",{id:"strongly"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Strongly"},"Strongly")),(0,o.kt)("h4",{id:"unitgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/UnitGenerator"},"UnitGenerator")),(0,o.kt)("h4",{id:"vogen"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Vogen"},"Vogen")))}g.isMDXComponent=!0},24151:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/StronglyTypedUid-7c1e738afaa4eccf1e85ecef0c976001.zip"}}]);