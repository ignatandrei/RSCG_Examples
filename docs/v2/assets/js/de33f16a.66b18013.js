"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[5604],{4484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,frontMatter:()=>p,metadata:()=>d,toc:()=>m});var r=n(7462),a=(n(7294),n(4137)),o=n(3992),s=n(425),i=n(8839);const p={sidebar_position:530,title:"53 - RSCG_WebAPIExports",description:"Generating Excel from WebAPI json array",slug:"/RSCG_WebAPIExports"},l="RSCG_WebAPIExports  by Andrei Ignat",d={unversionedId:"RSCG-Examples/RSCG_WebAPIExports",id:"RSCG-Examples/RSCG_WebAPIExports",title:"53 - RSCG_WebAPIExports",description:"Generating Excel from WebAPI json array",source:"@site/docs/RSCG-Examples/RSCG_WebAPIExports.md",sourceDirName:"RSCG-Examples",slug:"/RSCG_WebAPIExports",permalink:"/RSCG_Examples/v2/docs/RSCG_WebAPIExports",draft:!1,tags:[],version:"current",sidebarPosition:530,frontMatter:{sidebar_position:530,title:"53 - RSCG_WebAPIExports",description:"Generating Excel from WebAPI json array",slug:"/RSCG_WebAPIExports"},sidebar:"tutorialSidebar",previous:{title:"52 - Gobie",permalink:"/RSCG_Examples/v2/docs/Gobie"},next:{title:"54 - AutoDTO",permalink:"/RSCG_Examples/v2/docs/AutoDTO"}},c={},m=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share RSCG_WebAPIExports",id:"share-rscg_webapiexports",level:3}],u={toc:m},x="wrapper";function b(e){let{components:t,...p}=e;return(0,a.kt)(x,(0,r.Z)({},u,p,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rscg_webapiexports--by-andrei-ignat"},"RSCG_WebAPIExports  by Andrei Ignat"),(0,a.kt)(i.Z,{toc:m,mdxType:"TOCInline"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/RSCG_WebAPIExports/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/RSCG_WebAPIExports?label=RSCG_WebAPIExports",alt:"Nuget"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WebAPIExports/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/ignatandrei/RSCG_WebAPIExports?label=updated",alt:"GitHub last commit"})),"\n",(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/ignatandrei/RSCG_WebAPIExports?style=social",alt:"GitHub Repo stars"})),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("h3",{id:"info"},"Info"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Name: ",(0,a.kt)("strong",{parentName:"p"},"RSCG_WebAPIExports")),(0,a.kt)("p",{parentName:"admonition"},"Add Excel export to your WebAPI"),(0,a.kt)("p",{parentName:"admonition"},"Author: Andrei Ignat"),(0,a.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/RSCG_WebAPIExports/"},"https://www.nuget.org/packages/RSCG_WebAPIExports/")),"   "),(0,a.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WebAPIExports/"},"https://github.com/ignatandrei/RSCG_WebAPIExports/")),(0,a.kt)("p",{parentName:"admonition"},"Source : ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WebAPIExports/"},"https://github.com/ignatandrei/RSCG_WebAPIExports/"))),(0,a.kt)("h3",{id:"original-readme"},"Original Readme"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/RSCG_WebAPIExports/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/RSCG_WebAPIExports?label=RSCG_WebAPIExports",alt:"RSCG_WebAPIExports"}))),(0,a.kt)("h1",{parentName:"admonition",id:"rscg_webapiexports"},"RSCG_WebAPIExports"),(0,a.kt)("p",{parentName:"admonition"},"Add exports to file to WebAPI ( for the moment, just Excel / xlsx)"),(0,a.kt)("h2",{parentName:"admonition",id:"how-to-use-in-webapi-project"},"How to use in WebAPI project"),(0,a.kt)("p",{parentName:"admonition"},"Add reference to the package in the .csproj"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<PackageReference Include="RSCG_WebAPIExports" Version="2023.8.16.1255" OutputItemType="Analyzer" ReferenceOutputAssembly="true"  />\n\x3c!--\n<PackageReference Include="RSCG_WebAPIExports" Version="2023.8.16.1255" OutputItemType="Analyzer" ReferenceOutputAssembly="true"  />\n<PackageReference Include="ArrayToExcel" Version="2.2.2" />\n--\x3e\n')),(0,a.kt)("p",{parentName:"admonition"},"Then in the WebAPI add"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"using WebApiExportToFile;\n//code\n// Add services to the container.\n//WebApiExportToFile.AddExport(builder.Services);\nbuilder.Services.AddExport();\nvar app = builder.Build();\napp.UseExport();\n\n")),(0,a.kt)("p",{parentName:"admonition"},"Add to any url : .xlsx ( e.g. for /WeatherForecast put /WeatherForecast.xlsx ) and the excel will be "),(0,a.kt)("p",{parentName:"admonition"},"downloaded")),(0,a.kt)("h3",{id:"about"},"About"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Generating Excel from WebAPI json array")),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,a.kt)("p",null,"This is the CSharp Project that references ",(0,a.kt)("strong",{parentName:"p"},"RSCG_WebAPIExports")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {12}",showLineNumbers:!0,"{12}":!0},'<Project Sdk="Microsoft.NET.Sdk.Web">\n\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.10" />\n    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />\n    <PackageReference Include="RSCG_WebAPIExports" Version="2023.8.16.1255" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />\n    <PackageReference Include="ArrayToExcel" Version="2.2.2" />\n\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    \n</Project>\n\n'))),(0,a.kt)(s.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,a.kt)("p",null,"  This is the use of ",(0,a.kt)("strong",{parentName:"p"},"RSCG_WebAPIExports")," in ",(0,a.kt)("em",{parentName:"p"},"Program.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using RSCG_WebAPIExportsDemo;\nusing WebApiExportToFile;\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddExport();\nvar app = builder.Build();\napp.UseExport();\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(ct =>\n    {\n        ct.DocumentTitle = "try /WeatherForecast.xlsx";\n        ct.HeadContent = "try /WeatherForecast.xlsx";\n    });\n}\n\n//app.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n\n'))),(0,a.kt)(s.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\Controllers\\WeatherForecastController.cs",label:"WeatherForecastController.cs",mdxType:"TabItem"},(0,a.kt)("p",null,"  This is the use of ",(0,a.kt)("strong",{parentName:"p"},"RSCG_WebAPIExports")," in ",(0,a.kt)("em",{parentName:"p"},"WeatherForecastController.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Microsoft.AspNetCore.Mvc;\n\nnamespace RSCG_WebAPIExportsDemo.Controllers\n{\n    [ApiController]\n    [Route("[controller]")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n    };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = "GetWeatherForecast")]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}\n')))),(0,a.kt)("h3",{id:"generated-files"},"Generated Files"),(0,a.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\obj\\GX\\RSCG_APIExport\\RSCG_APIExport.GenerateExportForWebAPI\\Extensions.g.cs",label:"Extensions.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Microsoft.AspNetCore.Rewrite;\nnamespace WebApiExportToFile;\n#nullable enable\npublic static partial class Extensions\n{\n    static partial  void AddReturnTypesFromGenerator();\n    public static IServiceCollection AddExport(this IServiceCollection services, params Type[]? typesReturnedByActions)\n    {\n        AddReturnTypesFromGenerator();\n        //MiddlewareExportToFile.AddReturnType(typeof(Person[]));\n        //MiddlewareExportToFile.AddReturnType(typeof(WeatherForecast[]));\n        MiddlewareExportToFile.AddReturnTypes(typesReturnedByActions);\n\n        return services.AddSingleton<MiddlewareExportToFile>();\n    }\n    public static IApplicationBuilder UseExport(this IApplicationBuilder app)\n    {\n        app.UseMiddleware<MiddlewareExportToFile>();\n        var options = new RewriteOptions().Add(MiddlewareExportToFile.RewriteExtNeeded);\n        app.UseRewriter(options);\n        return app;\n    }\n}\n\n#nullable disable\n"))),(0,a.kt)(s.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\obj\\GX\\RSCG_APIExport\\RSCG_APIExport.GenerateExportForWebAPI\\middlewareExport.methods.g.cs",label:"middlewareExport.methods.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace WebApiExportToFile;\n\npublic static partial class Extensions\n{\n   static partial  void AddReturnTypesFromGenerator(){\n       MiddlewareExportToFile.AddReturnType(typeof(RSCG_WebAPIExportsDemo.WeatherForecast[])); \n   }\n}\n"))),(0,a.kt)(s.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\obj\\GX\\RSCG_APIExport\\RSCG_APIExport.GenerateExportForWebAPI\\MiddlewareExportToFile.g.cs",label:"MiddlewareExportToFile.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using System.IO;\nusing System.Text;\nusing System;\nusing Microsoft.AspNetCore.Rewrite;\nusing System.Text.Json;\nusing ArrayToExcel;\nusing System.Text.Json.Serialization.Metadata;\nusing System.Runtime.CompilerServices;\n#nullable enable\nnamespace WebApiExportToFile;\npublic class MiddlewareExportToFile : IMiddleware\n{\n    private static List<Type> types = new(); \n    static readonly string[] Extensions = new string[1] { ".xlsx" };\n    static string key = "Export";\n    public static void AddReturnTypes(params Type[]? typesReturnedByActions)\n    {\n        if (typesReturnedByActions?.Length > 0)\n        {\n            foreach (var type in typesReturnedByActions)\n            {\n                AddReturnType(type);\n            }\n        }\n    }\n    public static void AddReturnType(Type type)\n    {\n        types.Add(type);\n    }\n    public static void RewriteExtNeeded(RewriteContext context)\n    {\n        var request = context.HttpContext.Request;\n        if (!(context.HttpContext.Items.ContainsKey(key) && context.HttpContext.Items[key]?.ToString() == "1"))\n        {\n            return;\n        }\n        var ext = Path.GetExtension(request.Path.Value);\n        if (string.IsNullOrWhiteSpace(ext)) return;\n        request.Path = request.Path.Value!.Substring(0, request.Path.Value.Length - ext.Length);\n\n    }\n    public bool ShouldIntercept(HttpContext context)\n    {\n        string path = context.Request.Path;\n        var ext = Path.GetExtension(path);\n        if (string.IsNullOrWhiteSpace(ext)) return false;\n        if (!Extensions.Contains(ext, StringComparer.OrdinalIgnoreCase)) return false;\n        return true;\n    }\n    //https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/migrate-from-newtonsoft\n    static void AddMissingMemberHandling(JsonTypeInfo typeInfo)\n    {\n        if (typeInfo.Kind == JsonTypeInfoKind.Object &&\n            typeInfo.Properties.All(prop => !prop.IsExtensionData) &&\n            typeInfo.OnDeserialized is null)\n        {\n            // Dynamically attach dictionaries to deserialized objects.\n            var cwt = new ConditionalWeakTable<object, Dictionary<string, object>>();\n\n            JsonPropertyInfo propertyInfo =\n                typeInfo.CreateJsonPropertyInfo(typeof(Dictionary<string, object>), "__extensionDataAttribute");\n            propertyInfo.Get = obj => cwt.TryGetValue(obj, out Dictionary<string, object>? value) ? value : null;\n            propertyInfo.Set = (obj, value) => cwt.Add(obj, (Dictionary<string, object>)value!);\n            propertyInfo.IsExtensionData = true;\n            typeInfo.Properties.Add(propertyInfo);\n            typeInfo.OnDeserialized = obj =>\n            {\n                if (cwt.TryGetValue(obj, out Dictionary<string, object>? dict))\n                {\n                    cwt.Remove(obj);\n                    throw new JsonException($"JSON properties {String.Join(", ", dict.Keys)} " +\n                        $"could not bind to any members of type {typeInfo.Type}");\n                }\n            };\n        }\n    }\n    public object[]? StrongDeserialize(string responseContent)\n    {\n        if(types.Count() == 0) throw new Exception("please add some types");\n        foreach( var type in types)\n        {\n            try\n            {\n                var data = JsonSerializer.Deserialize(responseContent, type, new JsonSerializerOptions\n                {\n                    PropertyNameCaseInsensitive = true,\n                    TypeInfoResolver = new DefaultJsonTypeInfoResolver\n                    {\n                        Modifiers = { AddMissingMemberHandling }\n                    }\n                }) as object[];\n                return data;\n            }\n            catch(JsonException)\n            {\n                //do nothing \n                \n            }\n            \n        }\n        throw new Exception("no type can deserialize " +responseContent);\n\n    }\n    public async Task InvokeAsync(HttpContext context, RequestDelegate next)\n    {\n        if (!ShouldIntercept(context))\n        {\n            await next(context);\n            return;\n        }\n        var ext=Path.GetExtension(context.Request.Path.Value);\n        var nameFile = context.Request.Path.Value?.Replace("/", "_");\n        context.Items["Export"] = "1";\n        var originalResponseBody = context.Response.Body;\n        using var memoryStream = new MemoryStream();\n        context.Response.Body = memoryStream;\n        context.Response.Headers.Add("Content-Disposition", $"attachment; filename={nameFile}");\n        await next(context);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        var responseContent = await new StreamReader(memoryStream).ReadToEndAsync();\n        context.Response.Body = originalResponseBody;\n\n        var data = StrongDeserialize(responseContent);\n        ArgumentNullException.ThrowIfNull(data);\n        using var excelStream = data.ToExcelStream();\n        await excelStream.CopyToAsync(context.Response.Body);\n\n        // No need to call the next middleware since the generated content has been sent\n        return;\n    }\n    \n}    \n\n#nullable disable\n')))),(0,a.kt)("h2",{id:"usefull"},"Usefull"),(0,a.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{target:"_blank",href:n(2973).Z},"Download Example project RSCG_WebAPIExports "))),(0,a.kt)("h3",{id:"share-rscg_webapiexports"},"Share RSCG_WebAPIExports"),(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&quote=RSCG_WebAPIExports",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&text=RSCG_WebAPIExports:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&title=RSCG_WebAPIExports",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&title=RSCG_WebAPIExports&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_WebAPIExports"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_WebAPIExports")))}b.isMDXComponent=!0},2973:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/RSCG_WebAPIExports-1763fa005e491940715154d969c7f90e.zip"}}]);