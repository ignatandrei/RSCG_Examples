"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[5224],{58739:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/CommandLine-7cfc9ead53f03643b9393f222c467de8.zip"},64581:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"RSCG-Examples/CommandLine","title":"108 - CommandLine","description":"Generating easy command line applications.","source":"@site/docs/RSCG-Examples/CommandLine.md","sourceDirName":"RSCG-Examples","slug":"/CommandLine","permalink":"/RSCG_Examples/v2/docs/CommandLine","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/CommandLine.md","tags":[],"version":"current","sidebarPosition":1080,"frontMatter":{"sidebar_position":1080,"title":"108 - CommandLine","description":"Generating easy command line applications.","slug":"/CommandLine"},"sidebar":"tutorialSidebar","previous":{"title":"107 - NetAutomaticInterface","permalink":"/RSCG_Examples/v2/docs/NetAutomaticInterface"},"next":{"title":"109 - FunicularSwitch","permalink":"/RSCG_Examples/v2/docs/FunicularSwitch"}}');var o=i(74848),s=i(28453),a=i(11470),r=i(19365),l=i(14252);const d={sidebar_position:1080,title:"108 - CommandLine",description:"Generating easy command line applications.",slug:"/CommandLine"},c="CommandLine  by DotMake",m={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Getting started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Usage",id:"usage",level:2},{value:"Delegate-based model",id:"delegate-based-model",level:3},{value:"Summary",id:"summary",level:4},{value:"Class-based model",id:"class-based-model",level:3},{value:"Summary",id:"summary-1",level:4},{value:"Commands",id:"commands",level:2},{value:"Root commands",id:"root-commands",level:3},{value:"Subcommands",id:"subcommands",level:3},{value:"Command Hierarchy",id:"command-hierarchy",level:3},{value:"Command Inheritance",id:"command-inheritance",level:3},{value:"Options",id:"options",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Model binding",id:"model-binding",level:2},{value:"Supported types",id:"supported-types",level:3},{value:"Validation",id:"validation",level:3},{value:"Dependency Injection",id:"dependency-injection",level:2},{value:"Help output",id:"help-output",level:2},{value:"Localization",id:"localization",level:3},{value:"Triggering help",id:"triggering-help",level:3},{value:"Additional documentation",id:"additional-documentation",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share CommandLine",id:"share-commandline",level:3},{value:"In the same category (EnhancementProject) - 17 other generators",id:"in-the-same-category-enhancementproject---17-other-generators",level:3},{value:"AutoInvoke.Generator",id:"autoinvokegenerator",level:4},{value:"AutoSpectre",id:"autospectre",level:4},{value:"BuildInfo",id:"buildinfo",level:4},{value:"Credfeto.Version.Information.Generator",id:"credfetoversioninformationgenerator",level:4},{value:"Larcanum.GitInfo",id:"larcanumgitinfo",level:4},{value:"LinqGen.Generator",id:"linqgengenerator",level:4},{value:"Pekspro.BuildInformationGenerator",id:"peksprobuildinformationgenerator",level:4},{value:"PlantUmlClassDiagramGenerator",id:"plantumlclassdiagramgenerator",level:4},{value:"RSCG_AMS",id:"rscg_ams",level:4},{value:"RSCG_ExportDiagram",id:"rscg_exportdiagram",level:4},{value:"RSCG_FunctionsWithDI",id:"rscg_functionswithdi",level:4},{value:"RSCG_NameGenerator",id:"rscg_namegenerator",level:4},{value:"RSCG_TimeBombComment",id:"rscg_timebombcomment",level:4},{value:"RSCG_Wait",id:"rscg_wait",level:4},{value:"ThisAssembly",id:"thisassembly",level:4},{value:"ThisAssembly.Constants",id:"thisassemblyconstants",level:4},{value:"ThisAssembly.Metadata",id:"thisassemblymetadata",level:4}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"commandline--by-dotmake",children:"CommandLine  by DotMake"})}),"\n",(0,o.jsx)(l.A,{toc:h}),"\n",(0,o.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.nuget.org/packages/DotMake.CommandLine/",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/DotMake.CommandLine?label=DotMake.CommandLine",alt:"Nuget"})}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/dotmake-build/command-line",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/dotmake-build/command-line?label=updated",alt:"GitHub last commit"})}),"\n",(0,o.jsx)(n.img,{src:"https://img.shields.io/github/stars/dotmake-build/command-line?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,o.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,o.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:["Name: ",(0,o.jsx)(n.strong,{children:"CommandLine"})]}),(0,o.jsx)(n.p,{children:"Declarative syntax for System.CommandLine via attributes for easy, fast, strongly-typed (no reflection) usage. Includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments."}),(0,o.jsx)(n.p,{children:"Author: DotMake"}),(0,o.jsxs)(n.p,{children:["NuGet:\n",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.a,{href:"https://www.nuget.org/packages/DotMake.CommandLine/",children:"https://www.nuget.org/packages/DotMake.CommandLine/"})})]}),(0,o.jsxs)(n.p,{children:["You can find more details at ",(0,o.jsx)(n.a,{href:"https://github.com/dotmake-build/command-line",children:"https://github.com/dotmake-build/command-line"})]}),(0,o.jsxs)(n.p,{children:["Source: ",(0,o.jsx)(n.a,{href:"https://github.com/dotmake-build/command-line",children:"https://github.com/dotmake-build/command-line"})]})]}),"\n",(0,o.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://raw.githubusercontent.com/dotmake-build/command-line/master/images/logo-wide.png",alt:"DotMake Command-Line Logo",title:"DotMake Command-Line Logo"})}),(0,o.jsx)(n.h1,{id:"dotmake-command-line",children:"DotMake Command-Line"}),(0,o.jsxs)(n.p,{children:["System.CommandLine is a very good parser but you need a lot of boilerplate code to get going and the API is hard to discover.\nThis becomes complicated to newcomers and also you would have a lot of ugly code in your ",(0,o.jsx)(n.code,{children:"Program.cs"})," to maintain.\nWhat if you had an easy class-based layer combined with a good parser?"]}),(0,o.jsxs)(n.p,{children:["DotMake.CommandLine is a library which provides declarative syntax for\n",(0,o.jsx)(n.a,{href:"https://github.com/dotnet/command-line-api",children:"System.CommandLine"}),"\nvia attributes for easy, fast, strongly-typed (no reflection) usage. The library includes includes a source generator\nwhich automagically converts your classes to CLI commands and properties to CLI options or CLI arguments.\nSupports\n",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trim-self-contained",children:"trimming"}),",\n",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot",children:"AOT compilation"})," and\n",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection",children:"dependency injection"}),"!"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.nuget.org/packages/DotMake.CommandLine",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/nuget/v/DotMake.CommandLine?style=for-the-badge&logo=nuget",alt:"Nuget"})})}),(0,o.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),(0,o.jsxs)(n.p,{children:["Install the library to your console app project with  ",(0,o.jsx)(n.a,{href:"https://www.nuget.org/",children:"NuGet"}),"."]}),(0,o.jsx)(n.p,{children:"In your project directory, via dotnet cli:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"dotnet add package DotMake.CommandLine\n"})}),(0,o.jsx)(n.p,{children:"or in Visual Studio Package Manager Console:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"PM> Install-Package DotMake.CommandLine\n"})}),(0,o.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[".NET 7.0 and later project or .NET Standard 2.0 and later project.",(0,o.jsx)(n.br,{}),"\n","Note that .NET Framework 4.7.2+ or .NET Core 2.0 to NET 6.0 projects can reference our netstandard2.0 target (automatic in nuget).",(0,o.jsx)(n.br,{}),"\n","If your target framework is below net5.0, you also need ",(0,o.jsx)(n.code,{children:"<LangVersion>9.0</LangVersion>"})," tag (minimum) in your .csproj file."]}),"\n",(0,o.jsxs)(n.li,{children:["Visual Studio 2022 v17.3+ or .NET SDK 6.0.407+ (when building via ",(0,o.jsx)(n.code,{children:"dotnet"})," cli).",(0,o.jsx)(n.br,{}),"\n","Our incremental source generator requires performance features added first in these versions."]}),"\n",(0,o.jsx)(n.li,{children:"Usually a console app project but you can also use a class library project which will be consumed later."}),"\n"]}),(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,o.jsx)(n.h3,{id:"delegate-based-model",children:"Delegate-based model"}),(0,o.jsx)(n.p,{children:"Create a CLI App with DotMake.Commandline in seconds!"}),(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"Program.cs"}),", add this simple code:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"using System;\nusing DotMake.CommandLine;\n\nCli.Run(([CliArgument]string arg1, bool opt1) =>\n{\n    Console.WriteLine($@\"Value for {nameof(arg1)} parameter is '{arg1}'\");\n    Console.WriteLine($@\"Value for {nameof(opt1)} parameter is '{opt1}'\");\n});\n"})}),(0,o.jsx)(n.p,{children:"And that's it! You now have a fully working command-line app:"}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://raw.githubusercontent.com/dotmake-build/command-line/master/images/intro.gif",alt:"DotMake Command-Line Intro",title:"DotMake Command-Line Intro"})}),(0,o.jsx)(n.h4,{id:"summary",children:"Summary"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Pass a delegate (a parenthesized lambda expression or a method reference) which has parameters that represent your options and arguments, to ",(0,o.jsx)(n.code,{children:"Cli.Run"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["A parameter is by default considered as a CLI option but you can;","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Mark a parameter with ",(0,o.jsx)(n.code,{children:"CliArgument"})," attribute to make it a CLI argument and specify settings (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliArgumentAttribute.htm",children:"CliArgumentAttribute"})," docs for more info)."]}),"\n",(0,o.jsxs)(n.li,{children:["Mark a parameter with ",(0,o.jsx)(n.code,{children:"CliOption"})," attribute to specify CLI option settings (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliOptionAttribute.htm",children:"CliOptionAttribute"})," docs for more info)."]}),"\n",(0,o.jsxs)(n.li,{children:["Mark the delegate itself with ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute to specify CLI command settings (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliCommandAttribute.htm",children:"CliCommandAttribute"})," docs for more info)."]}),"\n",(0,o.jsxs)(n.li,{children:["Note that for being able to mark a parameter with an attribute in an anonymous lambda function,\nif your target framework is below net6.0, you also need ",(0,o.jsx)(n.code,{children:"<LangVersion>10.0</LangVersion>"})," tag (minimum) in your .csproj file."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Set a default value for a parameter if you want it to be optional (not required to be specified on the command-line)."}),"\n",(0,o.jsxs)(n.li,{children:["Your delegate can be ",(0,o.jsx)(n.code,{children:"async"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Your delegate can have a return type ",(0,o.jsx)(n.code,{children:"void"})," or ",(0,o.jsx)(n.code,{children:"int"})," and if it's async ",(0,o.jsx)(n.code,{children:"Task"})," or ",(0,o.jsx)(n.code,{children:"Task<int>"}),"."]}),"\n"]}),(0,o.jsx)(n.h3,{id:"class-based-model",children:"Class-based model"}),(0,o.jsx)(n.p,{children:"While delegate-based model above is useful for simple apps, for more complex apps, you should use the class-based model\nbecause you can have sub-commands and command inheritance."}),(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"Program.cs"}),", add this simple code:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'using System;\nusing DotMake.CommandLine;\n\n// Add this single line to run you app!\nCli.Run<RootCliCommand>(args);\n\n// Create a simple class like this to define your root command:\n[CliCommand(Description = "A root cli command")]\npublic class RootCliCommand\n{\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n \n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n \n    public void Run()\n    {\n        Console.WriteLine($@"Handler for \'{GetType().FullName}\' is run:");\n        Console.WriteLine($@"Value for {nameof(Option1)} property is \'{Option1}\'");\n        Console.WriteLine($@"Value for {nameof(Argument1)} property is \'{Argument1}\'");\n        Console.WriteLine();\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["And that's it! You now have a fully working command-line app. You just specify the name of your class which represents your root command to ",(0,o.jsx)(n.code,{children:"Cli.Run<>"})," method and everything is wired."]}),(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"args"})," is the string array typically passed to a program. This is usually\nthe special variable ",(0,o.jsx)(n.code,{children:"args"})," available in ",(0,o.jsx)(n.code,{children:"Program.cs"})," (new style with top-level statements)\nor the string array passed to the program's ",(0,o.jsx)(n.code,{children:"Main"})," method (old style).\nWe also have method signatures which does not require ",(0,o.jsx)(n.code,{children:"args"}),",\nfor example you can also call ",(0,o.jsx)(n.code,{children:"Cli.Run<RootCliCommand>()"})," and in that case ",(0,o.jsx)(n.code,{children:"args"})," will be retrieved automatically from the current process via ",(0,o.jsx)(n.code,{children:"Cli.GetArgs()"}),"."]}),"\n"]}),(0,o.jsx)(n.p,{children:"If you want to go async, just use this:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"await Cli.RunAsync<RootCliCommand>(args);\n"})}),(0,o.jsx)(n.p,{children:"To handle exceptions, you just use a try-catch block:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'try\n{\n    Cli.Run<RootCliCommand>(args);\n}\ncatch (Exception e)\n{\n    Console.WriteLine(@"Exception in main: {0}", e.Message);\n}\n'})}),(0,o.jsxs)(n.p,{children:["System.CommandLine, by default overtakes your exceptions that are thrown in command handlers\n(even if you don't set an exception handler explicitly) but DotMake.CommandLine, by default allows\nthe exceptions to pass through. However if you wish, you can easily use the default exception handler\nby passing a ",(0,o.jsx)(n.code,{children:"CliSettings"})," instance like below. Default exception handler prints the exception in red color to console:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"Cli.Run<RootCliCommand>(args, new CliSettings { EnableDefaultExceptionHandler = true });\n"})}),(0,o.jsx)(n.p,{children:"If you need to simply parse the command-line arguments without invocation, use this:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"var parseResult = Cli.Parse<RootCliCommand>(args);\nvar rootCliCommand = parseResult.Bind<RootCliCommand>();\n"})}),(0,o.jsx)(n.p,{children:"If you need to examine the parse result, such as errors:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"var parseResult = Cli.Parse<RootCliCommand>(args);\nif (parseResult.Errors.Count > 0)\n{\n\n}\n"})}),(0,o.jsx)(n.h4,{id:"summary-1",children:"Summary"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Mark the class with ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute to make it a CLI command (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliCommandAttribute.htm",children:"CliCommandAttribute"})," docs for more info)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Mark a property with ",(0,o.jsx)(n.code,{children:"CliOption"})," attribute to make it a CLI option (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliOptionAttribute.htm",children:"CliOptionAttribute"})," docs for more info)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Mark a property with ",(0,o.jsx)(n.code,{children:"CliArgument"})," attribute to make it a CLI argument (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliArgumentAttribute.htm",children:"CliArgumentAttribute"})," docs for more info)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Add a method with name ",(0,o.jsx)(n.code,{children:"Run"})," or ",(0,o.jsx)(n.code,{children:"RunAsync"})," to make it the handler for the CLI command. The method can have one of the following signatures:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"void Run()\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"int Run()\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"async Task RunAsync()\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"async Task<int> RunAsync()\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Optionally the method signature can have a ",(0,o.jsx)(n.code,{children:"CliContext"})," parameter in case you need to access it:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"Run(CliContext context)\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"RunAsync(CliContext context)\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The signatures which return int value, sets the ExitCode of the app.\nIf no handler method is provided, then by default it will show help for the command.\nThis can be also controlled manually by extension method ",(0,o.jsx)(n.code,{children:"ShowHelp"})," in ",(0,o.jsx)(n.code,{children:"CliContext"}),".\nOther extension methods ",(0,o.jsx)(n.code,{children:"IsEmptyCommand"})," and ",(0,o.jsx)(n.code,{children:"ShowValues"})," are also useful."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Call ",(0,o.jsx)(n.code,{children:"Cli.Run<>"})," or",(0,o.jsx)(n.code,{children:"Cli.RunAsync<>"})," method with your class name to run your CLI app (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_Cli.htm",children:"Cli"})," docs for more info)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["For best practice, create a subfolder named ",(0,o.jsx)(n.code,{children:"Commands"})," in your project and put your command classes there\nso that they are easy to locate and maintain in the future."]}),"\n"]}),"\n"]}),(0,o.jsx)(n.h2,{id:"commands",children:"Commands"}),(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.em,{children:"command"})," in command-line input is a token that specifies an action or defines a group of related actions. For example:"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["In ",(0,o.jsx)(n.code,{children:"dotnet run"}),", ",(0,o.jsx)(n.code,{children:"run"})," is a command that specifies an action."]}),"\n",(0,o.jsxs)(n.li,{children:["In ",(0,o.jsx)(n.code,{children:"dotnet tool install"}),", ",(0,o.jsx)(n.code,{children:"install"})," is a command that specifies an action, and ",(0,o.jsx)(n.code,{children:"tool"})," is a command that specifies a group of related commands. There are other tool-related commands, such as ",(0,o.jsx)(n.code,{children:"tool uninstall"}),", ",(0,o.jsx)(n.code,{children:"tool list"}),", and ",(0,o.jsx)(n.code,{children:"tool update"}),"."]}),"\n"]}),(0,o.jsx)(n.h3,{id:"root-commands",children:"Root commands"}),(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.em,{children:"root command"})," is the one that specifies the name of the app's executable. For example, the ",(0,o.jsx)(n.code,{children:"dotnet"})," command specifies the ",(0,o.jsx)(n.em,{children:"dotnet.exe"})," executable."]}),(0,o.jsx)(n.h3,{id:"subcommands",children:"Subcommands"}),(0,o.jsxs)(n.p,{children:["Most command-line apps support ",(0,o.jsx)(n.em,{children:"subcommands"}),", also known as ",(0,o.jsx)(n.em,{children:"verbs"}),". For example, the ",(0,o.jsx)(n.code,{children:"dotnet"})," command has a ",(0,o.jsx)(n.code,{children:"run"})," subcommand that you invoke by entering ",(0,o.jsx)(n.code,{children:"dotnet run"}),"."]}),(0,o.jsxs)(n.p,{children:["Subcommands can have their own subcommands. In ",(0,o.jsx)(n.code,{children:"dotnet tool install"}),", ",(0,o.jsx)(n.code,{children:"install"})," is a subcommand of ",(0,o.jsx)(n.code,{children:"tool"}),"."]}),(0,o.jsx)(n.h3,{id:"command-hierarchy",children:"Command Hierarchy"}),(0,o.jsxs)(n.p,{children:["Defining sub-commands in DotMake.Commandline is very easy. We simply use nested classes to create a hierarchy.\nJust make sure you apply ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute to the nested classes as well.\nCommand hierarchy in below example is:",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"RootWithNestedChildrenCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"Level1SubCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"Level2SubCliCommand"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(Description = "A root cli command with nested children")]\npublic class RootWithNestedChildrenCliCommand\n{\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n\n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n\n    public void Run(CliContext context)\n    {\n        context.ShowValues();\n    }\n\n    [CliCommand(Description = "A nested level 1 sub-command")]\n    public class Level1SubCliCommand\n    {\n        [CliOption(Description = "Description for Option1")]\n        public string Option1 { get; set; } = "DefaultForOption1";\n\n        [CliArgument(Description = "Description for Argument1")]\n        public string Argument1 { get; set; }\n\n        public void Run(CliContext context)\n        {\n            context.ShowValues();\n        }\n\n        [CliCommand(Description = "A nested level 2 sub-command")]\n        public class Level2SubCliCommand\n        {\n            [CliOption(Description = "Description for Option1")]\n            public string Option1 { get; set; } = "DefaultForOption1";\n\n            [CliArgument(Description = "Description for Argument1")]\n            public string Argument1 { get; set; }\n\n            public void Run(CliContext context)\n            {\n                context.ShowValues();\n            }\n        }\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["Another way to create hierarchy between commands, especially if you want to use standalone classes,",(0,o.jsx)(n.br,{}),"\n","is to use ",(0,o.jsx)(n.code,{children:"Parent"})," property of ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute to specify ",(0,o.jsx)(n.code,{children:"typeof"})," parent class.\nConsider you have this root command:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(Description = "A root cli command with external children and one nested child and testing settings inheritance")]\npublic class RootWithExternalChildrenCliCommand\n{\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n\n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n\n    public void Run(CliContext context)\n    {\n        context.ShowValues();\n    }\n\n    [CliCommand(\n        Description = "A nested level 1 sub-command with custom settings, throws test exception",\n        NameCasingConvention = CliNameCasingConvention.SnakeCase,\n        NamePrefixConvention = CliNamePrefixConvention.ForwardSlash,\n        ShortFormPrefixConvention = CliNamePrefixConvention.ForwardSlash\n    )]\n    public class Level1SubCliCommand\n    {\n        [CliOption(Description = "Description for Option1")]\n        public string Option1 { get; set; } = "DefaultForOption1";\n\n        [CliArgument(Description = "Description for Argument1")]\n        public string Argument1 { get; set; }\n\n        public void Run()\n        {\n            throw new Exception("This is a test exception from Level1SubCliCommand");\n        }\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["Command hierarchy in below example is:",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"RootWithExternalChildrenCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"ExternalLevel1SubCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"Level2SubCliCommand"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(\n    Description = "An external level 1 sub-command",\n    Parent = typeof(RootWithExternalChildrenCliCommand)\n)]\npublic class ExternalLevel1SubCliCommand\n{\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n\n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n\n    public void Run(CliContext context)\n    {\n        context.ShowValues();\n    }\n\n    [CliCommand(Description = "A nested level 2 sub-command")]\n    public class Level2SubCliCommand\n    {\n        [CliOption(Description = "Description for Option1")]\n        public string Option1 { get; set; } = "DefaultForOption1";\n\n        [CliArgument(Description = "Description for Argument1")]\n        public string Argument1 { get; set; }\n\n        public void Run(CliContext context)\n        {\n            context.ShowValues();\n        }\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["Command hierarchy in below example is:",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"RootWithExternalChildrenCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"Level1SubCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"ExternalLevel2SubCliCommand"})," -> ",(0,o.jsx)(n.code,{children:"Level3SubCliCommand"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(\n    Description = "An external level 2 sub-command",\n    Parent = typeof(RootWithExternalChildrenCliCommand.Level1SubCliCommand),\n    NameCasingConvention = CliNameCasingConvention.SnakeCase,\n    NamePrefixConvention = CliNamePrefixConvention.ForwardSlash,\n    ShortFormPrefixConvention = CliNamePrefixConvention.ForwardSlash\n)]\npublic class ExternalLevel2SubCliCommand\n{\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n\n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n\n    public void Run(CliContext context)\n    {\n        context.ShowValues();\n    }\n\n    [CliCommand(Description = "A nested level 3 sub-command")]\n    public class Level3SubCliCommand\n    {\n        [CliOption(Description = "Description for Option1")]\n        public string Option1 { get; set; } = "DefaultForOption1";\n\n        [CliArgument(Description = "Description for Argument1")]\n        public string Argument1 { get; set; }\n\n        public void Run(CliContext context)\n        {\n            context.ShowValues();\n        }\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["The class that ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute is applied to,"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["will be a root command if the class is not a nested class and ",(0,o.jsx)(n.code,{children:"Parent"}),"property is not set."]}),"\n",(0,o.jsxs)(n.li,{children:["will be a sub command if the class is a nested class or ",(0,o.jsx)(n.code,{children:"Parent"})," property is set."]}),"\n"]}),(0,o.jsx)(n.h3,{id:"command-inheritance",children:"Command Inheritance"}),(0,o.jsx)(n.p,{children:"When you have repeating/common options and arguments for your commands, you can define them once in a base class and then\nshare them by inheriting that base class in other command classes. Interfaces are also supported !"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand]\npublic class InheritanceCliCommand : CredentialCommandBase, IDepartmentCommand\n{\n    public string Department { get; set; } = "Accounting";\n}\n\npublic abstract class CredentialCommandBase\n{\n    [CliOption(Description = "Username of the identity performing the command")]\n    public string Username { get; set; } = "admin";\n\n    [CliOption(Description = "Password of the identity performing the command")]\n    public string Password { get; set; }\n\n    public void Run()\n    {\n        Console.WriteLine($@"I am {Username}");\n    }\n}\n\npublic interface IDepartmentCommand\n{\n    [CliOption(Description = "Department of the identity performing the command (interface)")]\n    string Department { get; set; }\n}\n'})}),(0,o.jsxs)(n.p,{children:["The property attribute and the property initializer from the most derived class in the hierarchy will be used\n(they will override the base ones). The command handler (Run or RunAsync) will be also inherited.\nSo in the above example, ",(0,o.jsx)(n.code,{children:"InheritanceCliCommand"})," inherits options ",(0,o.jsx)(n.code,{children:"Username"}),", ",(0,o.jsx)(n.code,{children:"Password"})," from a base class and\noption ",(0,o.jsx)(n.code,{children:"Department"})," from an interface. Note that the property initializer for ",(0,o.jsx)(n.code,{children:"Department"})," is in the derived class,\nso that default value will be used."]}),(0,o.jsx)(n.hr,{}),(0,o.jsxs)(n.p,{children:["The properties for ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliCommandAttribute.htm",children:"CliCommandAttribute"})," docs for more info):"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Name"}),"\n",(0,o.jsx)(n.li,{children:"Description"}),"\n",(0,o.jsx)(n.li,{children:"Aliases"}),"\n",(0,o.jsx)(n.li,{children:"Hidden"}),"\n",(0,o.jsx)(n.li,{children:"Parent"}),"\n",(0,o.jsx)(n.li,{children:"TreatUnmatchedTokensAsErrors"}),"\n",(0,o.jsxs)(n.li,{children:["NameCasingConvention ",(0,o.jsx)(n.em,{children:"(inherited by child options, child arguments and subcommands)"})]}),"\n",(0,o.jsxs)(n.li,{children:["NamePrefixConvention ",(0,o.jsx)(n.em,{children:"(inherited by child options and subcommands)"})]}),"\n",(0,o.jsxs)(n.li,{children:["ShortFormPrefixConvention ",(0,o.jsx)(n.em,{children:"(inherited by child options and subcommands)"})]}),"\n",(0,o.jsxs)(n.li,{children:["ShortFormAutoGenerate ",(0,o.jsx)(n.em,{children:"(inherited by child options and subcommands)"})]}),"\n"]}),(0,o.jsx)(n.h2,{id:"options",children:"Options"}),(0,o.jsxs)(n.p,{children:["An option is a named parameter that can be passed to a command. ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/POSIX",children:"POSIX"})," CLIs typically prefix the option name with two hyphens (",(0,o.jsx)(n.code,{children:"--"}),"). The following example shows two options:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dotnetcli",children:"dotnet tool update dotnet-suggest --verbosity quiet --global\n                                  ^---------^       ^------^\n"})}),(0,o.jsxs)(n.p,{children:["As this example illustrates, the value of the option may be explicit (",(0,o.jsx)(n.code,{children:"quiet"})," for ",(0,o.jsx)(n.code,{children:"--verbosity"}),") or implicit (nothing follows ",(0,o.jsx)(n.code,{children:"--global"}),"). Options that have no value specified are typically Boolean parameters that default to ",(0,o.jsx)(n.code,{children:"true"})," if the option is specified on the command line."]}),(0,o.jsxs)(n.p,{children:["For some Windows command-line apps, you identify an option by using a leading slash (",(0,o.jsx)(n.code,{children:"/"}),") with the option name. For example:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"msbuild /version\n        ^------^\n"})}),(0,o.jsxs)(n.p,{children:["Both POSIX and Windows prefix conventions are supported.\nWhen manually setting a name (overriding decorated property's name), you should specify the option name including the prefix (e.g. ",(0,o.jsx)(n.code,{children:"--option"}),", ",(0,o.jsx)(n.code,{children:"-option"})," or ",(0,o.jsx)(n.code,{children:"/option"}),")"]}),(0,o.jsx)(n.hr,{}),(0,o.jsxs)(n.p,{children:["The properties for ",(0,o.jsx)(n.code,{children:"CliOption"})," attribute (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliOptionAttribute.htm",children:"CliOptionAttribute"})," docs for more info):"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Name"}),"\n",(0,o.jsx)(n.li,{children:"Description"}),"\n",(0,o.jsx)(n.li,{children:"Aliases"}),"\n",(0,o.jsx)(n.li,{children:"HelpName"}),"\n",(0,o.jsx)(n.li,{children:"Hidden"}),"\n",(0,o.jsx)(n.li,{children:"Required"}),"\n",(0,o.jsx)(n.li,{children:"Recursive"}),"\n",(0,o.jsx)(n.li,{children:"Arity"}),"\n",(0,o.jsx)(n.li,{children:"AllowedValues"}),"\n",(0,o.jsx)(n.li,{children:"AllowMultipleArgumentsPerToken"}),"\n",(0,o.jsx)(n.li,{children:"ValidationRules"}),"\n",(0,o.jsx)(n.li,{children:"ValidationPattern"}),"\n",(0,o.jsx)(n.li,{children:"ValidationMessage"}),"\n"]}),(0,o.jsx)(n.h2,{id:"arguments",children:"Arguments"}),(0,o.jsxs)(n.p,{children:["An argument is a value passed to an option or a command. The following examples show an argument for the ",(0,o.jsx)(n.code,{children:"verbosity"})," option and an argument for the ",(0,o.jsx)(n.code,{children:"build"})," command."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"dotnet tool update dotnet-suggest --verbosity quiet --global\n                                              ^---^\n"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"dotnet build myapp.csproj\n             ^----------^\n"})}),(0,o.jsxs)(n.p,{children:["Arguments can have default values that apply if no argument is explicitly provided. For example, many options are implicitly Boolean parameters with a default of ",(0,o.jsx)(n.code,{children:"true"})," when the option name is in the command line. The following command-line examples are equivalent:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dotnetcli",children:"dotnet tool update dotnet-suggest --global\n                                  ^------^\n\ndotnet tool update dotnet-suggest --global true\n                                  ^-----------^\n"})}),(0,o.jsxs)(n.p,{children:["Some options have required arguments. For example in the .NET CLI, ",(0,o.jsx)(n.code,{children:"--output"})," requires a folder name argument. If the argument is not provided, the command fails."]}),(0,o.jsxs)(n.p,{children:["Arguments can have expected types, and ",(0,o.jsx)(n.code,{children:"System.CommandLine"})," displays an error message if an argument can't be parsed into the expected type. For example, the following command errors because \"silent\" isn't one of the valid values for ",(0,o.jsx)(n.code,{children:"--verbosity"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dotnetcli",children:"dotnet build --verbosity silent\n"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-output",children:"Cannot parse argument 'silent' for option '-v' as expected type 'Microsoft.DotNet.Cli.VerbosityOptions'. Did you mean one of the following?\nDetailed\nDiagnostic\nMinimal\nNormal\nQuiet\n"})}),(0,o.jsx)(n.hr,{}),(0,o.jsxs)(n.p,{children:["The properties for ",(0,o.jsx)(n.code,{children:"CliArgument"})," attribute (see ",(0,o.jsx)(n.a,{href:"https://dotmake.build/api/html/T_DotMake_CommandLine_CliArgumentAttribute.htm",children:"CliArgumentAttribute"})," docs for more info):"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Name"}),"\n",(0,o.jsx)(n.li,{children:"Description"}),"\n",(0,o.jsx)(n.li,{children:"HelpName"}),"\n",(0,o.jsx)(n.li,{children:"Hidden"}),"\n",(0,o.jsx)(n.li,{children:"Required"}),"\n",(0,o.jsx)(n.li,{children:"Arity"}),"\n",(0,o.jsx)(n.li,{children:"AllowedValues"}),"\n",(0,o.jsx)(n.li,{children:"ValidationRules"}),"\n",(0,o.jsx)(n.li,{children:"ValidationPattern"}),"\n",(0,o.jsx)(n.li,{children:"ValidationMessage"}),"\n"]}),(0,o.jsx)(n.h2,{id:"model-binding",children:"Model binding"}),(0,o.jsx)(n.p,{children:"When the command handler is run, the properties for CLI options and arguments will be already populated\nand bound from values passed in the command-line. If no matching value is passed, the property will have its default value if\nit has one or an error will be displayed if it's a required option/argument and it was not specified on the command-line."}),(0,o.jsx)(n.p,{children:"An option/argument will be considered required when"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["There is no property initializer and the property type is a reference type (e.g. ",(0,o.jsx)(n.code,{children:"public string Arg { get; set; }"}),").\n",(0,o.jsx)(n.code,{children:"string"})," is a reference type which has a null as the default value but ",(0,o.jsx)(n.code,{children:"bool"})," and ",(0,o.jsx)(n.code,{children:"enum"})," are value\ntypes which already have non-null default values. ",(0,o.jsx)(n.code,{children:"Nullable<T>"})," is a reference type, e.g. ",(0,o.jsx)(n.code,{children:"bool?"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["There is a property initializer, but it's initialized with ",(0,o.jsx)(n.code,{children:"null"})," or ",(0,o.jsx)(n.code,{children:"null!"})," (SuppressNullableWarningExpression)\n(e.g. ",(0,o.jsx)(n.code,{children:"public string Arg { get; set; } = null!;"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:["If it's forced via attribute property ",(0,o.jsx)(n.code,{children:"Required"})," (e.g. ",(0,o.jsx)(n.code,{children:"[CliArgument(Required = true)]"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:["If it's forced via ",(0,o.jsx)(n.code,{children:"required"})," modifier (e.g. ",(0,o.jsx)(n.code,{children:"public required string Opt { get; set; }"}),").\nNote that for being able to use ",(0,o.jsx)(n.code,{children:"required"})," modifier, if your target framework is below net7.0,\nyou also need ",(0,o.jsx)(n.code,{children:"<LangVersion>11.0</LangVersion>"})," tag (minimum) in your .csproj file (our source generator supplies the polyfills\nautomatically as long as you set C# language version to 11)."]}),"\n"]}),(0,o.jsx)(n.p,{children:"An option/argument will be considered optional when"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["There is no property initializer (e.g. ",(0,o.jsx)(n.code,{children:"public bool Opt { get; set; }"}),") but the property type is a value type\nwhich already have non-null default value."]}),"\n",(0,o.jsxs)(n.li,{children:["There is a property initializer, and it's not initialized with ",(0,o.jsx)(n.code,{children:"null"})," or ",(0,o.jsx)(n.code,{children:"null!"})," (SuppressNullableWarningExpression)\n(e.g. ",(0,o.jsx)(n.code,{children:'public string Arg { get; set; } = "Default";'}),")."]}),"\n",(0,o.jsxs)(n.li,{children:["If it's forced via attribute property ",(0,o.jsx)(n.code,{children:"Required"})," (e.g. ",(0,o.jsx)(n.code,{children:"[CliArgument(Required = false)]"}),")."]}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.p,{children:"When you run,"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"TestApp.exe NewValueForArgument1\n"})}),(0,o.jsxs)(n.p,{children:["or (note the double hyphen/dash which allows ",(0,o.jsx)(n.code,{children:"dotnet run"})," to pass arguments to our actual application):"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"dotnet run -- NewValueForArgument1\n"})}),(0,o.jsx)(n.p,{children:"You see this result:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"Handler for 'TestApp.Commands.RootCliCommand' is run:\nValue for Option1 property is 'DefaultForOption1'\nValue for Argument1 property is 'NewValueForArgument1'\n"})}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h3,{id:"supported-types",children:"Supported types"}),(0,o.jsxs)(n.p,{children:["Note that you can have a specific type (other than ",(0,o.jsx)(n.code,{children:"string"}),") for a property which a ",(0,o.jsx)(n.code,{children:"CliOption"})," or ",(0,o.jsx)(n.code,{children:"CliArgument"})," attribute is applied to, for example these properties will be parsed and bound/populated automatically:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"[CliCommand]\npublic class WriteFileCommand\n{\n    [CliArgument]\n    public FileInfo OutputFile { get; set; }\n\n    [CliOption]\n    public List<string> Lines { get; set; }\n}\n"})}),(0,o.jsx)(n.p,{children:"The following types for properties are supported:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Booleans (flags) - If ",(0,o.jsx)(n.code,{children:"true"})," or ",(0,o.jsx)(n.code,{children:"false"})," is passed for an option having a ",(0,o.jsx)(n.code,{children:"bool"})," argument, it is parsed and bound as expected.\nBut an option whose argument type is ",(0,o.jsx)(n.code,{children:"bool"})," doesn't require an argument to be specified.\nThe presence of the option token on the command line, with no argument following it, results in a value of ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Enums - The values are bound by name, and the binding is case insensitive"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Common CLR types:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"FileSystemInfo"}),", ",(0,o.jsx)(n.code,{children:"FileInfo"}),", ",(0,o.jsx)(n.code,{children:"DirectoryInfo"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"int"}),", ",(0,o.jsx)(n.code,{children:"long"}),", ",(0,o.jsx)(n.code,{children:"short"}),", ",(0,o.jsx)(n.code,{children:"uint"}),", ",(0,o.jsx)(n.code,{children:"ulong"}),", ",(0,o.jsx)(n.code,{children:"ushort"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"double"}),", ",(0,o.jsx)(n.code,{children:"float"}),", ",(0,o.jsx)(n.code,{children:"decimal"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"byte"}),", ",(0,o.jsx)(n.code,{children:"sbyte"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DateTime"}),", ",(0,o.jsx)(n.code,{children:"DateTimeOffset"}),", ",(0,o.jsx)(n.code,{children:"TimeSpan"}),", ",(0,o.jsx)(n.code,{children:"DateOnly"}),", ",(0,o.jsx)(n.code,{children:"TimeOnly"})]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Guid"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Uri"}),", ",(0,o.jsx)(n.code,{children:"IPAddress"}),", ",(0,o.jsx)(n.code,{children:"IPEndPoint"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Any type with a public constructor or a static ",(0,o.jsx)(n.code,{children:"Parse"})," method with a string parameter (other parameters, if any, should be optional) - These types can be bound/parsed\nautomatically even if they are wrapped with ",(0,o.jsx)(n.code,{children:"Enumerable"})," or ",(0,o.jsx)(n.code,{children:"Nullable"})," type."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"[CliCommand]\npublic class ArgumentConverterCliCommand\n{\n    [CliOption]\n    public ClassWithConstructor Opt { get; set; }\n\n    [CliOption(AllowMultipleArgumentsPerToken = true)]\n    public ClassWithConstructor[] OptArray { get; set; }\n\n    [CliOption]\n    public CustomStruct? OptNullable { get; set; }\n\n    [CliOption]\n    public IEnumerable<ClassWithConstructor> OptEnumerable { get; set; }\n\n    [CliOption]\n    public List<ClassWithConstructor> OptList { get; set; }\n\n    [CliOption]\n    public CustomList<ClassWithConstructor> OptCustomList { get; set; }\n\n    [CliArgument]\n    public IEnumerable<ClassWithParser> Arg { get; set; }\n}\n\npublic class ClassWithConstructor\n{\n    private readonly string value;\n\n    public ClassWithConstructor(string value)\n    {\n        this.value = value;\n    }\n\n    public override string ToString()\n    {\n        return value;\n    }\n}\n\npublic class ClassWithParser\n{\n    private string value;\n\n    public override string ToString()\n    {\n        return value;\n    }\n\n    public static ClassWithParser Parse(string value)\n    {\n        var instance = new ClassWithParser();\n        instance.value = value;\n        return instance;\n    }\n}\n\npublic struct CustomStruct\n{\n    private readonly string value;\n\n    public CustomStruct(string value)\n    {\n        this.value = value;\n    }\n\n    public override string ToString()\n    {\n        return value;\n    }\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Arrays, lists, collections:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Any type that implements ",(0,o.jsx)(n.code,{children:"IEnumerable<T>"})," and has a public constructor with a ",(0,o.jsx)(n.code,{children:"IEnumerable<T>"})," or ",(0,o.jsx)(n.code,{children:"IList<T>"})," parameter\n(other parameters, if any, should be optional). CLR collection types already satisfy this condition."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["If type is generic ",(0,o.jsx)(n.code,{children:"IEnumerable<T>"}),", ",(0,o.jsx)(n.code,{children:"IList<T>"}),", ",(0,o.jsx)(n.code,{children:"ICollection<T>"})," interfaces itself, array ",(0,o.jsx)(n.code,{children:"T[]"})," will be used to create an instance."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["If type is non-generic ",(0,o.jsx)(n.code,{children:"IEnumerable"}),", ",(0,o.jsx)(n.code,{children:"IList"}),", ",(0,o.jsx)(n.code,{children:"ICollection"})," interfaces itself, array ",(0,o.jsx)(n.code,{children:"string[]"})," will be used to create an instance."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"[CliCommand]\npublic class EnumerableCliCommand\n{\n    [CliOption]\n    public IEnumerable<int> OptEnumerable { get; set; }\n\n    [CliOption]\n    public List<string> OptList { get; set; }\n\n    [CliOption(AllowMultipleArgumentsPerToken = true)]\n    public FileAccess[] OptEnumArray { get; set; }\n\n    [CliOption]\n    public Collection<string> OptCollection { get; set; }\n\n    [CliOption]\n    public HashSet<string> OptHashSet { get; set; }\n\n    [CliOption]\n    public Queue<FileInfo> OptQueue { get; set; }\n\n    [CliOption]\n    public CustomList<string> OptCustomList { get; set; }\n\n    [CliArgument]\n    public IList ArgIList { get; set; }\n}\n\npublic class CustomList<T> : List<T>\n{\n    public CustomList(IEnumerable<T> items)\n        : base(items)\n    {\n\n    }\n}\n"})}),"\n"]}),"\n"]}),(0,o.jsx)(n.h3,{id:"validation",children:"Validation"}),(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"[CliOption]"})," and ",(0,o.jsx)(n.code,{children:"[CliArgument]"})," attributes;\n",(0,o.jsx)(n.code,{children:"ValidationRules"})," property allows setting predefined validation rules such as"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.ExistingFile"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.NonExistingFile"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.ExistingDirectory"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.NonExistingDirectory"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.ExistingFileOrDirectory"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.NonExistingFileOrDirectory"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.LegalPath"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.LegalFileName"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.LegalUri"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliValidationRules.LegalUrl"})}),"\n"]}),(0,o.jsxs)(n.p,{children:["Validation rules can be combined via using bitwise 'or' operator(",(0,o.jsx)(n.code,{children:"|"})," in C#)."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ValidationPattern"})," property allows setting a regular expression pattern for custom validation,\nand ",(0,o.jsx)(n.code,{children:"ValidationMessage"})," property allows setting a custom error message to show when ",(0,o.jsx)(n.code,{children:"ValidationPattern"})," does not match."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand]\npublic class ValidationCliCommand\n{\n    [CliOption(Required = false, ValidationRules = CliValidationRules.ExistingFile)]\n    public FileInfo OptFile1 { get; set; }\n\n    [CliOption(Required = false, ValidationRules = CliValidationRules.NonExistingFile | CliValidationRules.LegalPath)]\n    public string OptFile2 { get; set; }\n\n    [CliOption(Required = false, ValidationPattern = @"(?i)^[a-z]+$")]\n    public string OptPattern1 { get; set; }\n\n    [CliOption(Required = false, ValidationPattern = @"(?i)^[a-z]+$", ValidationMessage = "Custom error message")]\n    public string OptPattern2 { get; set; }\n\n    [CliOption(Required = false, ValidationRules = CliValidationRules.LegalUrl)]\n    public string OptUrl { get; set; }\n\n    [CliOption(Required = false, ValidationRules = CliValidationRules.LegalUri)]\n    public string OptUri { get; set; }\n\n    [CliArgument(Required = false, ValidationRules = CliValidationRules.LegalFileName)]\n    public string OptFileName { get; set; }\n\n    public void Run(CliContext context)\n    {\n        context.ShowValues();\n    }\n}\n'})}),(0,o.jsx)(n.h2,{id:"dependency-injection",children:"Dependency Injection"}),(0,o.jsxs)(n.p,{children:["Commands can have injected dependencies, this is supported via ",(0,o.jsx)(n.code,{children:"Microsoft.Extensions.DependencyInjection"})," package (version >= 6.0.0).\nIn your project directory, via dotnet cli:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"dotnet add package Microsoft.Extensions.DependencyInjection\n"})}),(0,o.jsx)(n.p,{children:"or in Visual Studio Package Manager Console:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"PM> Install-Package Microsoft.Extensions.DependencyInjection\n"})}),(0,o.jsxs)(n.p,{children:["When the source generator detects that your project has reference to ",(0,o.jsx)(n.code,{children:"Microsoft.Extensions.DependencyInjection"}),",\nit will generate extension methods for supporting dependency injection.\nFor example, you can now add your services with the extension method ",(0,o.jsx)(n.code,{children:"Cli.Ext.ConfigureServices"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:"using DotMake.CommandLine;\nusing Microsoft.Extensions.DependencyInjection;\n\nCli.Ext.ConfigureServices(services =>\n{\n    services.AddTransient<TransientClass>();\n    services.AddScoped<ScopedClass>();\n    services.AddSingleton<SingletonClass>();\n});\n\nCli.Run<RootCliCommand>();\n"})}),(0,o.jsx)(n.p,{children:"Then let them be injected to your command class automatically by providing a constructor with the required services:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(Description = "A root cli command with dependency injection")]\npublic class RootCliCommand\n{\n    private readonly TransientClass transientDisposable;\n    private readonly ScopedClass scopedDisposable;\n    private readonly SingletonClass singletonDisposable;\n\n    public RootCliCommand(\n        TransientClass transientDisposable,\n        ScopedClass scopedDisposable,\n        SingletonClass singletonDisposable\n    )\n    {\n        this.transientDisposable = transientDisposable;\n        this.scopedDisposable = scopedDisposable;\n        this.singletonDisposable = singletonDisposable;\n    }\n\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n\n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n\n    public void Run()\n    {\n        Console.WriteLine($@"Handler for \'{GetType().FullName}\' is run:");\n        Console.WriteLine($@"Value for {nameof(Option1)} property is \'{Option1}\'");\n        Console.WriteLine($@"Value for {nameof(Argument1)} property is \'{Argument1}\'");\n        Console.WriteLine();\n\n        Console.WriteLine($"Instance for {transientDisposable.Name} is available");\n        Console.WriteLine($"Instance for {scopedDisposable.Name} is available");\n        Console.WriteLine($"Instance for {singletonDisposable.Name} is available");\n        Console.WriteLine();\n    }\n}\n\npublic sealed class TransientClass : IDisposable\n{\n    public string Name => nameof(TransientClass);\n\n    public void Dispose() => Console.WriteLine($"{nameof(TransientClass)}.Dispose()");\n}\n\npublic sealed class ScopedClass : IDisposable\n{\n    public string Name => nameof(ScopedClass);\n\n    public void Dispose() => Console.WriteLine($"{nameof(ScopedClass)}.Dispose()");\n}\n\npublic sealed class SingletonClass : IDisposable\n{\n    public string Name => nameof(SingletonClass);\n\n    public void Dispose() => Console.WriteLine($"{nameof(SingletonClass)}.Dispose()");\n}\n'})}),(0,o.jsx)(n.h2,{id:"help-output",children:"Help output"}),(0,o.jsx)(n.p,{children:"When you run the app via"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"TestApp.exe -?"})," in project output path (e.g. in ",(0,o.jsx)(n.code,{children:"TestApp\\bin\\Debug\\net7.0"}),")"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["or ",(0,o.jsx)(n.code,{children:"dotnet run -- -?"})," in project directory (e.g. in ",(0,o.jsx)(n.code,{children:"TestApp"}),") (note the double hyphen/dash which allows ",(0,o.jsx)(n.code,{children:"dotnet run"})," to pass arguments to our actual application)"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"You see this usage help:"}),"\n"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"DotMake Command-Line TestApp v1.6.0\nCopyright \xa9 2023-2024 DotMake\n\nA root cli command\n\nUsage:\n  TestApp <argument-1> [options]\n\nArguments:\n  <argument-1>  Description for Argument1 [required]\n\nOptions:\n  -o, --option-1 <option-1>  Description for Option1 [default: DefaultForOption1]\n  -v, --version              Show version information\n  -?, -h, --help             Show help and usage information\n"})}),(0,o.jsxs)(n.p,{children:["First line comes from ",(0,o.jsx)(n.code,{children:"AssemblyProductAttribute"})," or ",(0,o.jsx)(n.code,{children:"AssemblyName"}),".\nVersion comes from ",(0,o.jsx)(n.code,{children:"AssemblyInformationalVersionAttribute"})," or ",(0,o.jsx)(n.code,{children:"AssemblyFileVersionAttribute"})," or ",(0,o.jsx)(n.code,{children:"AssemblyVersionAttribute"}),".\nSecond line comes from ",(0,o.jsx)(n.code,{children:"AssemblyCopyrightAttribute"}),".\nThird line comes from ",(0,o.jsx)(n.code,{children:"CliCommand.Description"})," or ",(0,o.jsx)(n.code,{children:"AssemblyDescriptionAttribute"}),"."]}),(0,o.jsx)(n.p,{children:"Note, how command/option/argument names, descriptions and default values are automatically populated."}),(0,o.jsx)(n.p,{children:"By default,  command/option/argument names are generated as follows;"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"First the following suffixes are stripped out from class and property names:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'For commands:\n"RootCliCommand", "RootCommand", "SubCliCommand", "SubCommand", "CliCommand", "Command", "Cli"'}),"\n",(0,o.jsx)(n.li,{children:'For options:\n"RootCommandOption", "SubCliCommandOption", "SubCommandOption", "CliCommandOption", "CommandOption", "CliOption", "Option"'}),"\n",(0,o.jsx)(n.li,{children:'For arguments:\n"RootCliCommandArgument", "RootCommandArgument", "SubCliCommandArgument", "SubCommandArgument", "CliCommandArgument", "CommandArgument", "CliArgument", "Argument"'}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Then the names are converted to ",(0,o.jsx)(n.strong,{children:"kebab-case"}),", this can be changed by setting ",(0,o.jsx)(n.code,{children:"NameCasingConvention"}),"  property of the ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute to one of the following values:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.None"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.LowerCase"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.UpperCase"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.TitleCase"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.PascalCase"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.CamelCase"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.KebabCase"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNameCasingConvention.SnakeCase"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["For options, double hyphen/dash prefix is added to the name (e.g. ",(0,o.jsx)(n.code,{children:"--option"}),"), this can be changed by setting ",(0,o.jsx)(n.code,{children:"NamePrefixConvention"}),"  (default: DoubleHyphen) property of the ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute to one of the following values:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNamePrefixConvention.SingleHyphen"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNamePrefixConvention.DoubleHyphen"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"CliNamePrefixConvention.ForwardSlash"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["For options, short-form alias with first letter (e.g. ",(0,o.jsx)(n.code,{children:"-o"}),") is automatically added. This can be changed by setting ",(0,o.jsx)(n.code,{children:"ShortFormAutoGenerate"})," (default: true) and ",(0,o.jsx)(n.code,{children:"ShortFormPrefixConvention"})," (default: SingleHyphen) properties of the ",(0,o.jsx)(n.code,{children:"CliCommand"})," attribute."]}),"\n"]}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.p,{children:"For example, change the name casing and prefix convention:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'using System;\nusing DotMake.CommandLine;\n \n[CliCommand(\n    Description = "A cli command with snake_case name casing and forward slash prefix conventions",\n    NameCasingConvention = CliNameCasingConvention.SnakeCase,\n    NamePrefixConvention = CliNamePrefixConvention.ForwardSlash,\n    ShortFormPrefixConvention = CliNamePrefixConvention.ForwardSlash\n)]\npublic class RootSnakeSlashCliCommand\n{\n    [CliOption(Description = "Description for Option1")]\n    public string Option1 { get; set; } = "DefaultForOption1";\n \n    [CliArgument(Description = "Description for Argument1")]\n    public string Argument1 { get; set; }\n \n    public void Run()\n    {\n        Console.WriteLine($@"Handler for \'{GetType().FullName}\' is run:");\n        Console.WriteLine($@"Value for {nameof(Option1)} property is \'{Option1}\'");\n        Console.WriteLine($@"Value for {nameof(Argument1)} property is \'{Argument1}\'");\n        Console.WriteLine();\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["When you run the app via ",(0,o.jsx)(n.code,{children:"TestApp.exe -?"})," or ",(0,o.jsx)(n.code,{children:"dotnet run -- -?"}),", you see this usage help:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"DotMake Command-Line TestApp v1.6.0\nCopyright \xa9 2023-2024 DotMake\n\nA cli command with snake_case name casing and forward slash prefix conventions\n\nUsage:\n  TestApp <argument_1> [options]\n\nArguments:\n  <argument_1>  Description for Argument1 [required]\n\nOptions:\n  /o, /option_1 <option_1>  Description for Option1 [default: DefaultForOption1]\n  /v, /version              Show version information\n  -?, -h, /help             Show help and usage information\n"})}),(0,o.jsxs)(n.p,{children:["Note how even the default options ",(0,o.jsx)(n.code,{children:"version"})," and ",(0,o.jsx)(n.code,{children:"help"})," use the new prefix convention ",(0,o.jsx)(n.code,{children:"ForwardSlash"}),". By the way, as ",(0,o.jsx)(n.code,{children:"help"})," is a special option, which allows user to discover your app, we still add short-form aliases with other prefix to prevent confusion."]}),(0,o.jsx)(n.h3,{id:"localization",children:"Localization"}),(0,o.jsxs)(n.p,{children:["Localizing commands, options and arguments is supported.\nYou can specify a ",(0,o.jsx)(n.code,{children:"nameof"})," operator expression with a resource property (generated by resx) in the attribute's argument (for ",(0,o.jsx)(n.code,{children:"string"})," types only)\nand the source generator will smartly use the resource property accessor as the value of the argument so that it can localize at runtime.\nIf the property in the ",(0,o.jsx)(n.code,{children:"nameof"})," operator expression does not point to a resource property, then the name of that property will be used as usual.\nThe reason we use ",(0,o.jsx)(n.code,{children:"nameof"})," operator is that attributes in ",(0,o.jsx)(n.code,{children:".NET"})," only accept compile-time constants and you get ",(0,o.jsx)(n.code,{children:"CS0182"})," error if not,\nso specifying resource property directly is not possible as it's not a compile-time constant but it's a static property access."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(Description = nameof(TestResources.CommandDescription))]\ninternal class LocalizedCliCommand\n{\n    [CliOption(Description = nameof(TestResources.OptionDescription))]\n    public string Option1 { get; set; } = "DefaultForOption1";\n\n    [CliArgument(Description = nameof(TestResources.ArgumentDescription))]\n    public string Argument1 { get; set; }\n\n    public void Run()\n    {\n        Console.WriteLine($@"Handler for \'{GetType().FullName}\' is run:");\n        Console.WriteLine($@"Value for {nameof(Option1)} property is \'{Option1}\'");\n        Console.WriteLine($@"Value for {nameof(Argument1)} property is \'{Argument1}\'");\n        Console.WriteLine();\n    }\n}\n'})}),(0,o.jsx)(n.h3,{id:"triggering-help",children:"Triggering help"}),(0,o.jsxs)(n.p,{children:["If a command represents a group and not an action, you may want to show help.\nIf ",(0,o.jsx)(n.code,{children:"Run"})," or ",(0,o.jsx)(n.code,{children:"RunAsync"})," method is missing in a command class, then by default it will show help.\nYou can also manually trigger help in ",(0,o.jsx)(n.code,{children:"Run"})," or ",(0,o.jsx)(n.code,{children:"RunAsync"})," method of a command class via calling ",(0,o.jsx)(n.code,{children:"CliContext.ShowHelp"}),".\nFor testing a command, other methods ",(0,o.jsx)(n.code,{children:"CliContext.ShowValues"})," and ",(0,o.jsx)(n.code,{children:"CliContext.IsEmptyCommand"})," are also useful.\n",(0,o.jsx)(n.code,{children:"ShowValues"})," shows parsed values for current command and its arguments and options."]}),(0,o.jsx)(n.p,{children:"See below example; root command does not have a handler method so it will always show help\nand sub-command will show help if command is specified without any arguments or option,\nand it will show (dump) values if not:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c#",children:'[CliCommand(Description = "A root cli command")]\npublic class HelpCliCommand\n{\n  [CliOption(Description = "Description for Option1")]\n  public string Option1 { get; set; } = "DefaultForOption1";\n\n  [CliArgument(Description = "Description for Argument1")]\n  public string Argument1 { get; set; } = "DefaultForArgument1";\n\n  [CliCommand(Description = "A sub cli command")]\n  public class SubCliCommand\n  {\n      [CliArgument(Description = "Description for Argument2")]\n      public string Argument2 { get; set; } = "DefaultForArgument2";\n\n      public void Run(CliContext context)\n      {\n          if (context.IsEmptyCommand())\n              context.ShowHelp();\n          else\n              context.ShowValues();\n      }\n  }\n}\n'})}),(0,o.jsx)(n.h2,{id:"additional-documentation",children:"Additional documentation"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://dotmake.build/api/",children:"DotMake Command-Line API docs"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/commandline/syntax",children:"Command-line syntax overview for System.CommandLine"})}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Generating easy command line applications."})}),"\n",(0,o.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,o.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsxs)(r.A,{value:"csproj",label:"CSharp Project",children:[(0,o.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,o.jsx)(n.strong,{children:"CommandLine"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="DotMake.CommandLine" Version="1.8.0" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,o.jsxs)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommandLine\\src\\CmdDemo\\Program.cs",label:"Program.cs",children:[(0,o.jsxs)(n.p,{children:["This is the use of ",(0,o.jsx)(n.strong,{children:"CommandLine"})," in ",(0,o.jsx)(n.em,{children:"Program.cs"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// See https://aka.ms/new-console-template for more information\nusing DotMake.CommandLine;\n\nCli.Run(([CliArgument] string PersonName, int  Age) =>\n{\n    Console.WriteLine($@\"Value for {nameof(PersonName)} parameter is '{PersonName}'\");\n    Console.WriteLine($@\"Value for {nameof(Age)} parameter is '{Age}'\");\n});\n\n\nCli.Run(([CliArgument] int idData) =>\n{\n    Console.WriteLine($@\"Value for {nameof(idData)} parameter is '{idData}'\");\n    \n});\n"})})]})]}),"\n",(0,o.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,o.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommandLine\\src\\CmdDemo\\obj\\GX\\DotMake.CommandLine.SourceGeneration\\DotMake.CommandLine.SourceGeneration.CliCommandGenerator\\CliCommandAsDelegate_1ra93x8.g.cs",label:"CliCommandAsDelegate_1ra93x8.g.cs",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated />\n// Generated by DotMake.CommandLine.SourceGeneration v1.8.0.0\n// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905\n// Generation: 1\n\nnamespace GeneratedCode\n{\n    /// <inheritdoc />\n    [DotMake.CommandLine.CliCommandAttribute]\n    public class CliCommandAsDelegate_1ra93x8 : DotMake.CommandLine.CliCommandAsDelegateDefinition\n    {\n        /// <inheritdoc />\n        [DotMake.CommandLine.CliArgumentAttribute]\n        public int idData { get; set; }\n\n        /// <inheritdoc />\n        public void Run()\n        {\n            InvokeDelegate\n            (\n                "1ra93x8",\n                new object[]\n                {\n                    idData, \n                }\n            );\n        }\n\n        [System.Runtime.CompilerServices.ModuleInitializerAttribute]\n        internal static void Initialize()\n        {\n            // Register this definition class so that it can be found by the command as delegate hash.\n            Register<GeneratedCode.CliCommandAsDelegate_1ra93x8>("1ra93x8");\n        }\n    }\n}\n\n'})})}),(0,o.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommandLine\\src\\CmdDemo\\obj\\GX\\DotMake.CommandLine.SourceGeneration\\DotMake.CommandLine.SourceGeneration.CliCommandGenerator\\CliCommandAsDelegate_1ra93x8Builder-6ke4hy4.g.cs",label:"CliCommandAsDelegate_1ra93x8Builder-6ke4hy4.g.cs",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated />\n// Generated by DotMake.CommandLine.SourceGeneration v1.8.0.0\n// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905\n// Generation: 1\n\nnamespace GeneratedCode\n{\n    /// <inheritdoc />\n    public class CliCommandAsDelegate_1ra93x8Builder : DotMake.CommandLine.CliCommandBuilder\n    {\n        /// <inheritdoc />\n        public CliCommandAsDelegate_1ra93x8Builder()\n        {\n            DefinitionType = typeof(GeneratedCode.CliCommandAsDelegate_1ra93x8);\n            ParentDefinitionType = null;\n            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;\n            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;\n            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;\n            ShortFormAutoGenerate = true;\n        }\n\n        private GeneratedCode.CliCommandAsDelegate_1ra93x8 CreateInstance()\n        {\n            return new GeneratedCode.CliCommandAsDelegate_1ra93x8();\n        }\n\n        /// <inheritdoc />\n        public override System.CommandLine.CliCommand Build()\n        {\n            // Command for 'CliCommandAsDelegate_1ra93x8' class\n            var rootCommand = new System.CommandLine.CliRootCommand()\n            {\n            };\n\n            var defaultClass = CreateInstance();\n\n            // Argument for 'idData' property\n            var argument0 = new System.CommandLine.CliArgument<int>\n            (\n                \"id-data\"\n            )\n            {\n            };\n            argument0.CustomParser = GetParseArgument<int>\n            (\n                null\n            );\n            argument0.DefaultValueFactory = _ => defaultClass.idData;\n            rootCommand.Add(argument0);\n\n            // Add nested or external registered children\n            foreach (var child in Children)\n            {\n                rootCommand.Add(child.Build());\n            }\n\n            BindFunc = (parseResult) =>\n            {\n                var targetClass = CreateInstance();\n\n                //  Set the parsed or default values for the options\n\n                //  Set the parsed or default values for the arguments\n                targetClass.idData = GetValueForArgument(parseResult, argument0);\n\n                return targetClass;\n            };\n\n            rootCommand.SetAction(parseResult =>\n            {\n                var targetClass = (GeneratedCode.CliCommandAsDelegate_1ra93x8) BindFunc(parseResult);\n\n                //  Call the command handler\n                var cliContext = new DotMake.CommandLine.CliContext(parseResult);\n                var exitCode = 0;\n                targetClass.Run();\n                return exitCode;\n            });\n\n            return rootCommand;\n        }\n\n        [System.Runtime.CompilerServices.ModuleInitializerAttribute]\n        internal static void Initialize()\n        {\n            var commandBuilder = new GeneratedCode.CliCommandAsDelegate_1ra93x8Builder();\n\n            // Register this command builder so that it can be found by the definition class\n            // and it can be found by the parent definition class if it's a nested/external child.\n            commandBuilder.Register();\n        }\n    }\n}\n\n"})})}),(0,o.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommandLine\\src\\CmdDemo\\obj\\GX\\DotMake.CommandLine.SourceGeneration\\DotMake.CommandLine.SourceGeneration.CliCommandGenerator\\CliCommandAsDelegate_34pdvjr.g.cs",label:"CliCommandAsDelegate_34pdvjr.g.cs",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated />\n// Generated by DotMake.CommandLine.SourceGeneration v1.8.0.0\n// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905\n// Generation: 1\n\nnamespace GeneratedCode\n{\n    /// <inheritdoc />\n    [DotMake.CommandLine.CliCommandAttribute]\n    public class CliCommandAsDelegate_34pdvjr : DotMake.CommandLine.CliCommandAsDelegateDefinition\n    {\n        /// <inheritdoc />\n        [DotMake.CommandLine.CliArgumentAttribute]\n        public string PersonName { get; set; }\n\n        /// <inheritdoc />\n        [DotMake.CommandLine.CliOptionAttribute]\n        public int Age { get; set; }\n\n        /// <inheritdoc />\n        public void Run()\n        {\n            InvokeDelegate\n            (\n                "34pdvjr",\n                new object[]\n                {\n                    PersonName, \n                    Age, \n                }\n            );\n        }\n\n        [System.Runtime.CompilerServices.ModuleInitializerAttribute]\n        internal static void Initialize()\n        {\n            // Register this definition class so that it can be found by the command as delegate hash.\n            Register<GeneratedCode.CliCommandAsDelegate_34pdvjr>("34pdvjr");\n        }\n    }\n}\n\n'})})}),(0,o.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommandLine\\src\\CmdDemo\\obj\\GX\\DotMake.CommandLine.SourceGeneration\\DotMake.CommandLine.SourceGeneration.CliCommandGenerator\\CliCommandAsDelegate_34pdvjrBuilder-empvmnm.g.cs",label:"CliCommandAsDelegate_34pdvjrBuilder-empvmnm.g.cs",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated />\n// Generated by DotMake.CommandLine.SourceGeneration v1.8.0.0\n// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905\n// Generation: 1\n\nnamespace GeneratedCode\n{\n    /// <inheritdoc />\n    public class CliCommandAsDelegate_34pdvjrBuilder : DotMake.CommandLine.CliCommandBuilder\n    {\n        /// <inheritdoc />\n        public CliCommandAsDelegate_34pdvjrBuilder()\n        {\n            DefinitionType = typeof(GeneratedCode.CliCommandAsDelegate_34pdvjr);\n            ParentDefinitionType = null;\n            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;\n            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;\n            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;\n            ShortFormAutoGenerate = true;\n        }\n\n        private GeneratedCode.CliCommandAsDelegate_34pdvjr CreateInstance()\n        {\n            return new GeneratedCode.CliCommandAsDelegate_34pdvjr();\n        }\n\n        /// <inheritdoc />\n        public override System.CommandLine.CliCommand Build()\n        {\n            // Command for 'CliCommandAsDelegate_34pdvjr' class\n            var rootCommand = new System.CommandLine.CliRootCommand()\n            {\n            };\n\n            var defaultClass = CreateInstance();\n\n            // Option for 'Age' property\n            var option0 = new System.CommandLine.CliOption<int>\n            (\n                \"--age\"\n            )\n            {\n                Required = false,\n            };\n            option0.CustomParser = GetParseArgument<int>\n            (\n                null\n            );\n            option0.DefaultValueFactory = _ => defaultClass.Age;\n            option0.Aliases.Add(\"-a\");\n            rootCommand.Add(option0);\n\n            // Argument for 'PersonName' property\n            var argument0 = new System.CommandLine.CliArgument<string>\n            (\n                \"person-name\"\n            )\n            {\n            };\n            argument0.CustomParser = GetParseArgument<string>\n            (\n                null\n            );\n            rootCommand.Add(argument0);\n\n            // Add nested or external registered children\n            foreach (var child in Children)\n            {\n                rootCommand.Add(child.Build());\n            }\n\n            BindFunc = (parseResult) =>\n            {\n                var targetClass = CreateInstance();\n\n                //  Set the parsed or default values for the options\n                targetClass.Age = GetValueForOption(parseResult, option0);\n\n                //  Set the parsed or default values for the arguments\n                targetClass.PersonName = GetValueForArgument(parseResult, argument0);\n\n                return targetClass;\n            };\n\n            rootCommand.SetAction(parseResult =>\n            {\n                var targetClass = (GeneratedCode.CliCommandAsDelegate_34pdvjr) BindFunc(parseResult);\n\n                //  Call the command handler\n                var cliContext = new DotMake.CommandLine.CliContext(parseResult);\n                var exitCode = 0;\n                targetClass.Run();\n                return exitCode;\n            });\n\n            return rootCommand;\n        }\n\n        [System.Runtime.CompilerServices.ModuleInitializerAttribute]\n        internal static void Initialize()\n        {\n            var commandBuilder = new GeneratedCode.CliCommandAsDelegate_34pdvjrBuilder();\n\n            // Register this command builder so that it can be found by the definition class\n            // and it can be found by the parent definition class if it's a nested/external child.\n            commandBuilder.Register();\n        }\n    }\n}\n\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,o.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(58739).A+"",children:"Download Example project CommandLine "})})}),"\n",(0,o.jsx)(n.h3,{id:"share-commandline",children:"Share CommandLine"}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommandLine&quote=CommandLine",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommandLine&text=CommandLine:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommandLine",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommandLine&title=CommandLine",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommandLine&title=CommandLine&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommandLine",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommandLine",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommandLine"})}),"\n",(0,o.jsx)(n.h3,{id:"in-the-same-category-enhancementproject---17-other-generators",children:"In the same category (EnhancementProject) - 17 other generators"}),"\n",(0,o.jsx)(n.h4,{id:"autoinvokegenerator",children:(0,o.jsx)(n.a,{href:"/docs/AutoInvoke.Generator",children:"AutoInvoke.Generator"})}),"\n",(0,o.jsx)(n.h4,{id:"autospectre",children:(0,o.jsx)(n.a,{href:"/docs/AutoSpectre",children:"AutoSpectre"})}),"\n",(0,o.jsx)(n.h4,{id:"buildinfo",children:(0,o.jsx)(n.a,{href:"/docs/BuildInfo",children:"BuildInfo"})}),"\n",(0,o.jsx)(n.h4,{id:"credfetoversioninformationgenerator",children:(0,o.jsx)(n.a,{href:"/docs/Credfeto.Version.Information.Generator",children:"Credfeto.Version.Information.Generator"})}),"\n",(0,o.jsx)(n.h4,{id:"larcanumgitinfo",children:(0,o.jsx)(n.a,{href:"/docs/Larcanum.GitInfo",children:"Larcanum.GitInfo"})}),"\n",(0,o.jsx)(n.h4,{id:"linqgengenerator",children:(0,o.jsx)(n.a,{href:"/docs/LinqGen.Generator",children:"LinqGen.Generator"})}),"\n",(0,o.jsx)(n.h4,{id:"peksprobuildinformationgenerator",children:(0,o.jsx)(n.a,{href:"/docs/Pekspro.BuildInformationGenerator",children:"Pekspro.BuildInformationGenerator"})}),"\n",(0,o.jsx)(n.h4,{id:"plantumlclassdiagramgenerator",children:(0,o.jsx)(n.a,{href:"/docs/PlantUmlClassDiagramGenerator",children:"PlantUmlClassDiagramGenerator"})}),"\n",(0,o.jsx)(n.h4,{id:"rscg_ams",children:(0,o.jsx)(n.a,{href:"/docs/RSCG_AMS",children:"RSCG_AMS"})}),"\n",(0,o.jsx)(n.h4,{id:"rscg_exportdiagram",children:(0,o.jsx)(n.a,{href:"/docs/RSCG_ExportDiagram",children:"RSCG_ExportDiagram"})}),"\n",(0,o.jsx)(n.h4,{id:"rscg_functionswithdi",children:(0,o.jsx)(n.a,{href:"/docs/RSCG_FunctionsWithDI",children:"RSCG_FunctionsWithDI"})}),"\n",(0,o.jsx)(n.h4,{id:"rscg_namegenerator",children:(0,o.jsx)(n.a,{href:"/docs/RSCG_NameGenerator",children:"RSCG_NameGenerator"})}),"\n",(0,o.jsx)(n.h4,{id:"rscg_timebombcomment",children:(0,o.jsx)(n.a,{href:"/docs/RSCG_TimeBombComment",children:"RSCG_TimeBombComment"})}),"\n",(0,o.jsx)(n.h4,{id:"rscg_wait",children:(0,o.jsx)(n.a,{href:"/docs/RSCG_Wait",children:"RSCG_Wait"})}),"\n",(0,o.jsx)(n.h4,{id:"thisassembly",children:(0,o.jsx)(n.a,{href:"/docs/ThisAssembly",children:"ThisAssembly"})}),"\n",(0,o.jsx)(n.h4,{id:"thisassemblyconstants",children:(0,o.jsx)(n.a,{href:"/docs/ThisAssembly.Constants",children:"ThisAssembly.Constants"})}),"\n",(0,o.jsx)(n.h4,{id:"thisassemblymetadata",children:(0,o.jsx)(n.a,{href:"/docs/ThisAssembly.Metadata",children:"ThisAssembly.Metadata"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);