"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7168],{4137:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>k});var t=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=t.createContext({}),u=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},m=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(a),d=l,k=p["".concat(o,".").concat(d)]||p[d]||c[d]||r;return a?t.createElement(k,s(s({ref:n},m),{},{components:a})):t.createElement(k,s({ref:n},m))}));function k(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[p]="string"==typeof e?e:l,s[1]=i;for(var u=2;u<r;u++)s[u]=a[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2650:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=a(7462),l=(a(7294),a(4137));const r={},s="enum class Generator",i={unversionedId:"RSCG-Examples/EnumClass_readme",id:"RSCG-Examples/EnumClass_readme",title:"enum class Generator",description:"Summary",source:"@site/docs/RSCG-Examples/EnumClass_readme.md",sourceDirName:"RSCG-Examples",slug:"/RSCG-Examples/EnumClass_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/EnumClass_readme",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EmbedResourceCSharp",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/EmbedResourceCSharp_readme"},next:{title:"FastGenericNew_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/FastGenericNew_readme"}},o={},u=[{value:"Summary",id:"summary",level:2},{value:"What is it?",id:"what-is-it",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:2},{value:"Example usage",id:"example-usage",level:3},{value:"ToString()",id:"tostring",level:3},{value:"Cast to enum",id:"cast-to-enum",level:3},{value:"Cast to <code>int</code>",id:"cast-to-int",level:3},{value:"<code>Equals()</code>",id:"equals",level:3},{value:"<code>Switch</code> function",id:"switch-function",level:3},{value:"<code>TryParse</code>",id:"tryparse",level:3},{value:"More",id:"more",level:3},{value:"Features",id:"features",level:2},{value:"Incremental generator",id:"incremental-generator",level:3},{value:"Custom target namespace",id:"custom-target-namespace",level:3},{value:"Generate <code>enum class</code> for enum from another assembly",id:"generate-enum-class-for-enum-from-another-assembly",level:3},{value:"Known limitations",id:"known-limitations",level:2},{value:"Same name of member and enum",id:"same-name-of-member-and-enum",level:3},{value:"Half-baked",id:"half-baked",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Give a star",id:"give-a-star",level:2}],m={toc:u},p="wrapper";function c(e){let{components:n,...a}=e;return(0,l.kt)(p,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"enum-class-generator"},(0,l.kt)("inlineCode",{parentName:"h1"},"enum class")," Generator"),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"Type-safe source-generated alternative to C# ",(0,l.kt)("inlineCode",{parentName:"p"},"enum")," inspired by Kotlin ",(0,l.kt)("inlineCode",{parentName:"p"},"enum class")),(0,l.kt)("h2",{id:"what-is-it"},"What is it?"),(0,l.kt)("p",null,"This library contains source generator that creates ",(0,l.kt)("inlineCode",{parentName:"p"},"class")," for specified ",(0,l.kt)("inlineCode",{parentName:"p"},"enum"),".\nThese classes contain similar functionality as original enum, but behave as ordinal ",(0,l.kt)("inlineCode",{parentName:"p"},"class")),(0,l.kt)("h2",{id:"getting-started"},"Getting started"),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Add reference to Nuget package")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},".NET CLI")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package EnumClass --version 1.2.0\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Package Manager")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Install-Package EnumClass -Version 1.2.0\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"PackageReference")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'<PackageReference Include="EnumClass" Version="1.2.0" />\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Specify ",(0,l.kt)("em",{parentName:"li"},"Analyzer")," property in ",(0,l.kt)("inlineCode",{parentName:"li"},".csproj"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'<PackageReference Include="EnumClass" Version="1.2.0" OutputItemType="Analyzer"/>\n')),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"example-usage"},"Example usage"),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"[EnumClass]")," attribute to enum"),(0,l.kt)("p",null,"That is all!\nCorresponding class will be generated in namespace as your enum, but prefixed with ",(0,l.kt)("strong",{parentName:"p"},"EnumClass")),(0,l.kt)("p",null,"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'using EnumClass.Attributes;\n\nnamespace Domain\n{\n    [EnumClass]\n    public enum PetKind\n    {\n        Cat,\n        Dog\n    }\n    \n    namespace EnumClass\n    {\n        public partial abstract class PetKind\n        {\n            public partial class CatEnumValue\n            {\n                public void SayMeow()\n                {\n                    System.Console.WriteLine("Meow!");\n                }\n            }\n        }\n    }\n}\n')),(0,l.kt)("h3",{id:"tostring"},"ToString()"),(0,l.kt)("p",null,"All ",(0,l.kt)("inlineCode",{parentName:"p"},"ToString()")," are generated at compile time.\nBy default, they equal to name of corresponding member."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'Console.WriteLine(EnumClass.PetKind.Cat.ToString() == "Cat"); \n// Output: true\n')),(0,l.kt)("p",null,"If you want to override default value - use ",(0,l.kt)("inlineCode",{parentName:"p"},'[EnumMemberInfo(StringValue = "")]')," attribute"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace Domain;\n\n[EnumClass]\npublic enum PetKind\n{\n    [EnumMemberInfo(StringValue = "Kitten")]\n    Cat,\n    Dog\n}\n// -------------\n\nConsole.WriteLine(EnumClass.PetKind.Cat.ToString());\n// Output: Kitten\n')),(0,l.kt)("h3",{id:"cast-to-enum"},"Cast to enum"),(0,l.kt)("p",null,"All classes have overriden cast operator to original enum value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"Console.WriteLine(((PetKind)EnumClass.PetKind.Cat) == PetKind.Cat); \n// Output: true\n")),(0,l.kt)("h3",{id:"cast-to-int"},"Cast to ",(0,l.kt)("inlineCode",{parentName:"h3"},"int")),(0,l.kt)("p",null,"All classes have overriden cast to ",(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"Console.WriteLine(((int)EnumClass.PetKind.Cat) == ((int)PetKind.Cat)); \n// Output: true\n")),(0,l.kt)("h3",{id:"equals"},(0,l.kt)("inlineCode",{parentName:"h3"},"Equals()")),(0,l.kt)("p",null,"Generated classes implement ",(0,l.kt)("inlineCode",{parentName:"p"},"IEquatable<>")," both for enum class and original enum.\nThus, has methods ",(0,l.kt)("inlineCode",{parentName:"p"},"Equals(EnumClass)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Equals(OrignalEnum)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"Console.WriteLine(EnumClass.PetKind.Cat.Equals(EnumClass.PetKind.Cat)); // Calls Equals(EnumClass.PetKind)\nConsole.WriteLine(EnumClass.PetKind.Cat.Equals(EnumClass.PetKind.Dog)); // Calls Equals(EnumClass.PetKind)\nConsole.WriteLine(EnumClass.PetKind.Cat.Equals(PetKind.Cat)); // Calls Equals(PetKind)\nConsole.WriteLine(EnumClass.PetKind.Cat.Equals(PetKind.Dog)); // Calls Equals(PetKind)\n// Output: true\n//         false\n//         true\n//         false\n")),(0,l.kt)("p",null,"P.S. and of course ",(0,l.kt)("inlineCode",{parentName:"p"},"Equals(object?)")),(0,l.kt)("h3",{id:"switch-function"},(0,l.kt)("inlineCode",{parentName:"h3"},"Switch")," function"),(0,l.kt)("p",null,"Instead of writing ",(0,l.kt)("inlineCode",{parentName:"p"},"switch")," every time, a fimily\nof switch function is generated.\nThey accepts both ",(0,l.kt)("inlineCode",{parentName:"p"},"Action")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Func")," with enum class at first argument and optional additional arguments."),(0,l.kt)("p",null,"E.g. "),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"Func<int>"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"var cat = EnumClass.PetKind.Cat;\nvar value = cat.Switch(1,\n        (cat, i) => i + 1,\n        (dog, i) => i * 100);\nConsole.WriteLine(value); \n// Output: 2\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"Action"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'var dog = EnumClass.PetKind.Dog;\ndog.Switch(\n    cat => cat.SayMeow(),\n    dog => Console.WriteLine("Oh, it is puppy!")); \n// Output: Oh, it is puppy!\n')),(0,l.kt)("h3",{id:"tryparse"},(0,l.kt)("inlineCode",{parentName:"h3"},"TryParse")),(0,l.kt)("p",null,"There is static function ",(0,l.kt)("inlineCode",{parentName:"p"},"bool EnumClass.TryParse(string value, out EnumClass enumClass)")," for parsing values from raw enums.\nThis function accepts strings with and without enum name: ",(0,l.kt)("strong",{parentName:"p"},"PetKind.Cat")," and ",(0,l.kt)("strong",{parentName:"p"},"Cat")," will be parsed into Cat value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'if (EnumClass.PetKind.TryParse("Cat", out var cat)\n{\n    Console.WriteLine($"This is cat!! {cat}");\n}\nelse\n{\n    Console.WriteLine("This is not cat");\n}\n')),(0,l.kt)("h3",{id:"more"},"More"),(0,l.kt)("p",null,"For more examples checkout ",(0,l.kt)("em",{parentName:"p"},"samples")," folder"),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("h3",{id:"incremental-generator"},"Incremental generator"),(0,l.kt)("p",null,"It uses incremental generator instead of source generator.\nThis implies better performance in comparison"),(0,l.kt)("h3",{id:"custom-target-namespace"},"Custom target namespace"),(0,l.kt)("p",null,'By default generated class contained in the same namespace as original enum + ".EnumClass" suffix.\nYou can manually set target namespace in ',(0,l.kt)("inlineCode",{parentName:"p"},"Namespace")," property of ",(0,l.kt)("inlineCode",{parentName:"p"},"[EnumClass]")," attribute."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'using EnumClass.Attributes;\n\nnamespace Test;\n\n[EnumClass(Namespace = "Domain")]\npublic enum SampleEnum\n{\n    First,\n    Second\n}\n//------------------\nusing Domain;\n\nConsole.WriteLine(SampleEnum.First);\n')),(0,l.kt)("h3",{id:"generate-enum-class-for-enum-from-another-assembly"},"Generate ",(0,l.kt)("inlineCode",{parentName:"h3"},"enum class")," for enum from another assembly"),(0,l.kt)("p",null,"If you do not have access to enum source code directly, you can generate ",(0,l.kt)("inlineCode",{parentName:"p"},"enum class")," for enum in external assembly.\nFor this use ",(0,l.kt)("inlineCode",{parentName:"p"},"[ExternalEnumClass]")," attribute."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// External assembly\nnamespace Logic;\n\npublic enum Word\n{\n    Single,\n    Double,\n    Triple\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// Our assembly\nusing EnumClass.Attributes;\nusing Logic;\n\n[assembly: ExternalEnumClass(typeof(Word), Namespace = "Another")]\nnamespace Another;\n\npublic partial class Word\n{\n    public abstract int WordsCount { get; }\n    \n    public partial class SingleEnumValue\n    {\n        public override int WordsCount => 1;    \n    }\n    \n    \n    public partial class DoubleEnumValue\n    {\n        public override int WordsCount => 2;    \n    }\n    \n    \n    public partial class TripleEnumValue\n    {\n        public override int WordsCount => 3;    \n    }\n}\n')),(0,l.kt)("h2",{id:"known-limitations"},"Known limitations"),(0,l.kt)("h3",{id:"same-name-of-member-and-enum"},"Same name of member and enum"),(0,l.kt)("p",null,"In the current implementation, static enum class field names have the same names as members of the original enum."),(0,l.kt)("p",null,"E.g."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[EnumClass]\npublic enum TokenType\n{\n    TokenType\n}\n")),(0,l.kt)("p",null,"will generate approximately the following code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public class TokenType\n{\n    public static TokenTypeEnumValue TokenType = new();\n}\n")),(0,l.kt)("h3",{id:"half-baked"},"Half-baked"),(0,l.kt)("p",null,"The project at an early stage of life.\nI'm sure there are lots of hidden bugs, so be cautious using it in production.\nIn production may be better for now to use ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardalis/SmartEnum"},"SmartEnum")),(0,l.kt)("h2",{id:"contributing"},"Contributing"),(0,l.kt)("p",null,"If you have an idea on how to improve the project or have found a bug,\ncreate an issue on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ashenBlade/EnumClass/issues"},"GitHub")),(0,l.kt)("h2",{id:"give-a-star"},"Give a star"),(0,l.kt)("p",null,"If you want to see the continuation of the project, give it a star!"))}c.isMDXComponent=!0}}]);