"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6435],{28689:(e,s,n)=>{n.d(s,{Ay:()=>i,RM:()=>t});var r=n(74848),a=n(28453);const t=[{value:"Category &quot;FilesToCode&quot; has the following generators:",id:"category-filestocode-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function l(e){const s={a:"a",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h3,{id:"category-filestocode-has-the-following-generators",children:'Category "FilesToCode" has the following generators:'}),"\n",(0,r.jsxs)(s.p,{children:["1 ",(0,r.jsx)(s.a,{href:"/docs/Chorn.EmbeddedResourceAccessGenerator",children:"Chorn.EmbeddedResourceAccessGenerator"})]}),"\n",(0,r.jsxs)(s.p,{children:["2 ",(0,r.jsx)(s.a,{href:"/docs/corecraft",children:"corecraft"})]}),"\n",(0,r.jsxs)(s.p,{children:["3 ",(0,r.jsx)(s.a,{href:"/docs/Datacute.EmbeddedResourcePropertyGenerator",children:"Datacute.EmbeddedResourcePropertyGenerator"})]}),"\n",(0,r.jsxs)(s.p,{children:["4 ",(0,r.jsx)(s.a,{href:"/docs/DotnetYang",children:"DotnetYang"})]}),"\n",(0,r.jsxs)(s.p,{children:["5 ",(0,r.jsx)(s.a,{href:"/docs/EmbedResourceCSharp",children:"EmbedResourceCSharp"})]}),"\n",(0,r.jsxs)(s.p,{children:["6 ",(0,r.jsx)(s.a,{href:"/docs/kli.Localize",children:"kli.Localize"})]}),"\n",(0,r.jsxs)(s.p,{children:["7 ",(0,r.jsx)(s.a,{href:"/docs/LingoGen",children:"LingoGen"})]}),"\n",(0,r.jsxs)(s.p,{children:["8 ",(0,r.jsx)(s.a,{href:"/docs/NFH.FileEmbed",children:"NFH.FileEmbed"})]}),"\n",(0,r.jsxs)(s.p,{children:["9 ",(0,r.jsx)(s.a,{href:"/docs/NotNotAppSettings",children:"NotNotAppSettings"})]}),"\n",(0,r.jsxs)(s.p,{children:["10 ",(0,r.jsx)(s.a,{href:"/docs/Podimo.ConstEmbed",children:"Podimo.ConstEmbed"})]}),"\n",(0,r.jsxs)(s.p,{children:["11 ",(0,r.jsx)(s.a,{href:"/docs/ResXGenerator",children:"ResXGenerator"})]}),"\n",(0,r.jsxs)(s.p,{children:["12 ",(0,r.jsx)(s.a,{href:"/docs/RSCG_JSON2Class",children:"RSCG_JSON2Class"})]}),"\n",(0,r.jsxs)(s.p,{children:["13 ",(0,r.jsx)(s.a,{href:"/docs/RSCG_Utils",children:"RSCG_Utils"})]}),"\n",(0,r.jsxs)(s.p,{children:["14 ",(0,r.jsx)(s.a,{href:"/docs/Strings.ResourceGenerator",children:"Strings.ResourceGenerator"})]}),"\n",(0,r.jsxs)(s.p,{children:["15 ",(0,r.jsx)(s.a,{href:"/docs/ThisAssembly_Resources",children:"ThisAssembly_Resources"})]}),"\n",(0,r.jsxs)(s.p,{children:["16 ",(0,r.jsx)(s.a,{href:"/docs/ThisAssembly.Strings",children:"ThisAssembly.Strings"})]}),"\n",(0,r.jsxs)(s.p,{children:["17 ",(0,r.jsx)(s.a,{href:"/docs/Weave",children:"Weave"})]}),"\n",(0,r.jsx)(s.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/Categories/FilesToCode",children:"FilesToCode"})})]})}function i(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},53243:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>m,contentTitle:()=>u,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"RSCG-Examples/ResXGenerator","title":"64 - ResXGenerator","description":"Resources as string","source":"@site/docs/RSCG-Examples/ResXGenerator.md","sourceDirName":"RSCG-Examples","slug":"/ResXGenerator","permalink":"/RSCG_Examples/v2/docs/ResXGenerator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":640,"frontMatter":{"sidebar_position":640,"title":"64 - ResXGenerator","description":"Resources as string","slug":"/ResXGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"63 - StringLiteral","permalink":"/RSCG_Examples/v2/docs/StringLiteral"},"next":{"title":"65 - Disposer","permalink":"/RSCG_Examples/v2/docs/Disposer"}}');var a=n(74848),t=n(28453),l=n(11470),i=n(19365),o=n(14252),c=n(28689);const d={sidebar_position:640,title:"64 - ResXGenerator",description:"Resources as string",slug:"/ResXGenerator"},u="ResXGenerator  by Aigamo",m={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Usage",id:"usage",level:2},{value:"New in version 3",id:"new-in-version-3",level:2},{value:"New in version 3.1",id:"new-in-version-31",level:2},{value:"Options",id:"options",level:2},{value:"PublicClass (per file or globally)",id:"publicclass-per-file-or-globally",level:3},{value:"NullForgivingOperators (globally)",id:"nullforgivingoperators-globally",level:3},{value:"Non-static classes (per file or globally)",id:"non-static-classes-per-file-or-globally",level:3},{value:"Partial classes (per file or globally)",id:"partial-classes-per-file-or-globally",level:3},{value:"Static Members (per file or globally)",id:"static-members-per-file-or-globally",level:3},{value:"Postfix class name (per file or globally)",id:"postfix-class-name-per-file-or-globally",level:3},{value:"Inner classes (per file or globally)",id:"inner-classes-per-file-or-globally",level:2},{value:"Inner Class Visibility (per file or globally)",id:"inner-class-visibility-per-file-or-globally",level:3},{value:"Inner Class name (per file or globally)",id:"inner-class-name-per-file-or-globally",level:3},{value:"Inner Class instance name (per file or globally)",id:"inner-class-instance-name-per-file-or-globally",level:3},{value:"Generate Code (per file or globally)",id:"generate-code-per-file-or-globally",level:3},{value:"Resource file namespaces",id:"resource-file-namespaces",level:2},{value:"Excluding resx files",id:"excluding-resx-files",level:2},{value:"References",id:"references",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share ResXGenerator",id:"share-resxgenerator",level:3},...c.RM];function p(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"resxgenerator--by-aigamo",children:"ResXGenerator  by Aigamo"})}),"\n",(0,a.jsx)(o.A,{toc:h}),"\n",(0,a.jsx)(s.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.a,{href:"https://www.nuget.org/packages/Aigamo.ResXGenerator/",children:(0,a.jsx)(s.img,{src:"https://img.shields.io/nuget/dt/Aigamo.ResXGenerator?label=Aigamo.ResXGenerator",alt:"Nuget"})}),"\n",(0,a.jsx)(s.a,{href:"https://github.com/ycanardeau/ResXGenerator",children:(0,a.jsx)(s.img,{src:"https://img.shields.io/github/last-commit/ycanardeau/ResXGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,a.jsx)(s.img,{src:"https://img.shields.io/github/stars/ycanardeau/ResXGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,a.jsx)(s.h2,{id:"details",children:"Details"}),"\n",(0,a.jsx)(s.h3,{id:"info",children:"Info"}),"\n",(0,a.jsxs)(s.admonition,{type:"info",children:[(0,a.jsxs)(s.p,{children:["Name: ",(0,a.jsx)(s.strong,{children:"ResXGenerator"})]}),(0,a.jsx)(s.p,{children:"ResX Designer Source Generator."}),(0,a.jsx)(s.p,{children:"Author: Aigamo"}),(0,a.jsxs)(s.p,{children:["NuGet:\n",(0,a.jsx)(s.em,{children:(0,a.jsx)(s.a,{href:"https://www.nuget.org/packages/Aigamo.ResXGenerator/",children:"https://www.nuget.org/packages/Aigamo.ResXGenerator/"})})]}),(0,a.jsxs)(s.p,{children:["You can find more details at ",(0,a.jsx)(s.a,{href:"https://github.com/ycanardeau/ResXGenerator",children:"https://github.com/ycanardeau/ResXGenerator"})]}),(0,a.jsxs)(s.p,{children:["Source: ",(0,a.jsx)(s.a,{href:"https://github.com/ycanardeau/ResXGenerator",children:"https://github.com/ycanardeau/ResXGenerator"})]})]}),"\n",(0,a.jsx)(s.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,a.jsxs)(s.admonition,{type:"note",children:[(0,a.jsx)(s.h1,{id:"resxgenerator",children:"ResXGenerator"}),(0,a.jsx)(s.p,{children:"ResXGenerator is a C# source generator to generate strongly-typed resource classes for looking up localized strings."}),(0,a.jsx)(s.p,{children:"NOTE: This is an independent fork of VocaDb/ResXFileCodeGenerator."}),(0,a.jsx)(s.h2,{id:"usage",children:"Usage"}),(0,a.jsxs)(s.p,{children:["Install the ",(0,a.jsx)(s.code,{children:"Aigamo.ResXGenerator"})," package:"]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-psl",children:"dotnet add package Aigamo.ResXGenerator\n"})}),(0,a.jsxs)(s.p,{children:["Generated source from ",(0,a.jsx)(s.a,{href:"https://github.com/VocaDB/vocadb/blob/6ac18dd2981f82100c8c99566537e4916920219e/VocaDbWeb.Resources/App_GlobalResources/ActivityEntrySortRuleNames.resx",children:"ActivityEntrySortRuleNames.resx"}),":"]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cs",children:'// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n#nullable enable\nnamespace Resources\n{\n    using System.Globalization;\n    using System.Resources;\n\n    public static class ActivityEntrySortRuleNames\n    {\n        private static ResourceManager? s_resourceManager;\n        public static ResourceManager ResourceManager => s_resourceManager ??= new ResourceManager("VocaDb.Web.App_GlobalResources.ActivityEntrySortRuleNames", typeof(ActivityEntrySortRuleNames).Assembly);\n        public static CultureInfo? CultureInfo { get; set; }\n\n        /// <summary>\n        /// Looks up a localized string similar to Oldest.\n        /// </summary>\n        public static string? CreateDate => ResourceManager.GetString(nameof(CreateDate), CultureInfo);\n\n        /// <summary>\n        /// Looks up a localized string similar to Newest.\n        /// </summary>\n        public static string? CreateDateDescending => ResourceManager.GetString(nameof(CreateDateDescending), CultureInfo);\n    }\n}\n'})}),(0,a.jsx)(s.h2,{id:"new-in-version-3",children:"New in version 3"}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"The generator now utilizes the IIncrementalGenerator API to instantly update the generated code, thus giving you instant intellisense."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Added error handling for multiple members of same name, and members that have same name as class. These are clickable in visual studio to lead you to the source of the error, unlike before where they resulted in broken builds and you had to figure out why."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Namespace naming fixed for resx files in the top level folder."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Resx files can now be named with multiple extensions, e.g. myresources.cshtml.resx and will result in class being called myresources."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Added the ability to generate inner classes, partial outer classes and non-static members. Very useful if you want to ensure that only a particular class can use those resources instead of being spread around the codebase."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Use same 'Link' setting as msbuild uses to determine embedded file name."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Can set a class postfix name"}),"\n"]}),"\n"]}),(0,a.jsx)(s.h2,{id:"new-in-version-31",children:"New in version 3.1"}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"The generator can now generate code to lookup translations instead of using the 20 year old System.Resources.ResourceManager"}),"\n"]}),(0,a.jsx)(s.h2,{id:"options",children:"Options"}),(0,a.jsx)(s.h3,{id:"publicclass-per-file-or-globally",children:"PublicClass (per file or globally)"}),(0,a.jsxs)(s.p,{children:["Use cases: ",(0,a.jsx)(s.a,{href:"https://github.com/VocaDB/ResXFileCodeGenerator/issues/2",children:"https://github.com/VocaDB/ResXFileCodeGenerator/issues/2"}),"."]}),(0,a.jsxs)(s.p,{children:["Since version 2.0.0, ResXGenerator generates internal classes by default. You can change this behavior by setting ",(0,a.jsx)(s.code,{children:"PublicClass"})," to ",(0,a.jsx)(s.code,{children:"true"}),"."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="Resources\\ArtistCategoriesNames.resx">\n    <PublicClass>true</PublicClass>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="Resources\\ArtistCategoriesNames.resx" PublicClass="true" />\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"If you want to apply this globally, use"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_PublicClass>true</ResXGenerator_PublicClass>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.h3,{id:"nullforgivingoperators-globally",children:"NullForgivingOperators (globally)"}),(0,a.jsxs)(s.p,{children:["Use cases: ",(0,a.jsx)(s.a,{href:"https://github.com/VocaDB/ResXFileCodeGenerator/issues/1",children:"https://github.com/VocaDB/ResXFileCodeGenerator/issues/1"}),"."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_NullForgivingOperators>true</ResXGenerator_NullForgivingOperators>\n</PropertyGroup>\n"})}),(0,a.jsxs)(s.p,{children:["By setting ",(0,a.jsx)(s.code,{children:"ResXGenerator_NullForgivingOperators"})," to ",(0,a.jsx)(s.code,{children:"true"}),", ResXGenerator generates"]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cs",children:"public static string CreateDate => ResourceManager.GetString(nameof(CreateDate), CultureInfo)!;\n"})}),(0,a.jsx)(s.p,{children:"instead of"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cs",children:"public static string? CreateDate => ResourceManager.GetString(nameof(CreateDate), CultureInfo);\n"})}),(0,a.jsx)(s.h3,{id:"non-static-classes-per-file-or-globally",children:"Non-static classes (per file or globally)"}),(0,a.jsxs)(s.p,{children:["To use generated resources with ",(0,a.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/core/extensions/localization",children:"Microsoft.Extensions.Localization"})," ",(0,a.jsx)(s.code,{children:"IStringLocalizer<T>"})," and resource manager, the resolved type cannot be a static class. You can disable default behavior per file by setting the value to ",(0,a.jsx)(s.code,{children:"false"}),"."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="Resources\\ArtistCategoriesNames.resx">\n    <StaticClass>false</StaticClass>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_StaticClass>false</ResXGenerator_StaticClass>\n</PropertyGroup>\n"})}),(0,a.jsxs)(s.p,{children:["With global non-static class you can also reset ",(0,a.jsx)(s.code,{children:"StaticClass"})," per file by setting the value to anything but ",(0,a.jsx)(s.code,{children:"false"}),"."]}),(0,a.jsx)(s.h3,{id:"partial-classes-per-file-or-globally",children:"Partial classes (per file or globally)"}),(0,a.jsx)(s.p,{children:"To extend an existing class, you can make your classes partial."}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="Resources\\ArtistCategoriesNames.resx">\n    <PartialClass>true</PartialClass>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_PartialClass>true</ResXGenerator_PartialClass>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.h3,{id:"static-members-per-file-or-globally",children:"Static Members (per file or globally)"}),(0,a.jsx)(s.p,{children:"In some rare cases it might be useful for the members to be non-static."}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="Resources\\ArtistCategoriesNames.resx">\n    <StaticMembers>false</StaticMembers>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_StaticMembers>false</ResXGenerator_StaticMembers>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.h3,{id:"postfix-class-name-per-file-or-globally",children:"Postfix class name (per file or globally)"}),(0,a.jsx)(s.p,{children:"In some cases the it is useful if the name of the generated class doesn't follow the filename."}),(0,a.jsx)(s.p,{children:'A clear example is Razor pages that always generates a class for the code-behind named "-Model".\nThis example configuration allows you to use Resources.MyResource in your model, or @Model.Resources.MyResource in your cshtml file.'}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="**/Pages/*.resx">\n    <ClassNamePostfix>Model</ClassNamePostfix>\n    <StaticMembers>false</StaticMembers>\n    <StaticClass>false</StaticClass>\n    <PartialClass>true</PartialClass>\n    <PublicClass>true</PublicClass>\n    <InnerClassVisibility>public</InnerClassVisibility>\n    <PartialClass>false</PartialClass>\n    <InnerClassInstanceName>Resources</InnerClassInstanceName>\n    <InnerClassName>_Resources</InnerClassName>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or just the postfix globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_ClassNamePostfix>Model</ResXGenerator_ClassNamePostfix>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.h2,{id:"inner-classes-per-file-or-globally",children:"Inner classes (per file or globally)"}),(0,a.jsx)(s.p,{children:"If your resx files are organized along with code files, it can be quite useful to ensure that the resources are not accessible outside the specific class the resx file belong to."}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<ItemGroup>\n    <EmbeddedResource Update=\"**/*.resx\">\n        <DependentUpon>$([System.String]::Copy('%(FileName).cs'))</DependentUpon>\n        <InnerClassName>MyResources</InnerClassName>\n        <InnerClassVisibility>private</InnerClassVisibility>\n        <InnerClassInstanceName>EveryoneLikeMyNaming</InnerClassInstanceName>\n        <StaticMembers>false</StaticMembers>\n        <StaticClass>false</StaticClass>\n        <PartialClass>true</PartialClass>\n    </EmbeddedResource>\n    <EmbeddedResource Update=\"**/*.??.resx;**/*.??-??.resx\">\n        <DependentUpon>$([System.IO.Path]::GetFileNameWithoutExtension('%(FileName)')).resx</DependentUpon>\n    </EmbeddedResource>\n</ItemGroup>\n"})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_InnerClassName>MyResources</ResXGenerator_InnerClassName>\n  <ResXGenerator_InnerClassVisibility>private</ResXGenerator_InnerClassVisibility>\n  <ResXGenerator_InnerClassInstanceName>EveryoneLikeMyNaming</InnerClassInstanceName>\n  <ResXGenerator_StaticMembers>false</ResXGenerator_StaticMembers>\n  <ResXGenerator_StaticClass>false</ResXGenerator_StaticClass>\n  <ResXGenerator_PartialClass>true</ResXGenerator_PartialClass>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.p,{children:"This example would generate files like this:"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cs",children:'// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n#nullable enable\nnamespace Resources\n{\n    using System.Globalization;\n    using System.Resources;\n\n    public partial class ActivityEntryModel\n    {\n        public MyResources EveryoneLikeMyNaming { get; } = new();\n\n        private class MyResources\n        {\n            private static ResourceManager? s_resourceManager;\n            public static ResourceManager ResourceManager => s_resourceManager ??= new ResourceManager("VocaDb.Web.App_GlobalResources.ActivityEntryModel", typeof(ActivityEntryModel).Assembly);\n            public CultureInfo? CultureInfo { get; set; }\n\n            /// <summary>\n            /// Looks up a localized string similar to Oldest.\n            /// </summary>\n            public string? CreateDate => ResourceManager.GetString(nameof(CreateDate), CultureInfo);\n\n            /// <summary>\n            /// Looks up a localized string similar to Newest.\n            /// </summary>\n            public string? CreateDateDescending => ResourceManager.GetString(nameof(CreateDateDescending), CultureInfo);\n        }\n    }\n}\n'})}),(0,a.jsx)(s.h3,{id:"inner-class-visibility-per-file-or-globally",children:"Inner Class Visibility (per file or globally)"}),(0,a.jsx)(s.p,{children:"By default inner classes are not generated, unless this setting is one of the following:"}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Public"}),"\n",(0,a.jsx)(s.li,{children:"Internal"}),"\n",(0,a.jsx)(s.li,{children:"Private"}),"\n",(0,a.jsx)(s.li,{children:"Protected"}),"\n",(0,a.jsx)(s.li,{children:"SameAsOuter"}),"\n"]}),(0,a.jsx)(s.p,{children:'Case is ignored, so you could use "private".'}),(0,a.jsx)(s.p,{children:'It is also possible to use "NotGenerated" to override on a file if the global setting is to generate inner classes.'}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n    <EmbeddedResource Update="**/*.resx">\n        <InnerClassVisibility>private</InnerClassVisibility>\n    </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_InnerClassVisibility>private</ResXGenerator_InnerClassVisibility>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.h3,{id:"inner-class-name-per-file-or-globally",children:"Inner Class name (per file or globally)"}),(0,a.jsx)(s.p,{children:'By default the inner class is named "Resources", which can be overridden with this setting:'}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n    <EmbeddedResource Update="**/*.resx">\n        <InnerClassName>MyResources</InnerClassName>\n    </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_InnerClassName>MyResources</ResXGenerator_InnerClassName>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.h3,{id:"inner-class-instance-name-per-file-or-globally",children:"Inner Class instance name (per file or globally)"}),(0,a.jsx)(s.p,{children:"By default no instance is available of the class, but that can be made available if this setting is given."}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n    <EmbeddedResource Update="**/*.resx">\n        <InnerClassInstanceName>EveryoneLikeMyNaming</InnerClassInstanceName>\n    </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<PropertyGroup>\n  <ResXGenerator_InnerClassInstanceName>EveryoneLikeMyNaming</ResXGenerator_InnerClassInstanceName>\n</PropertyGroup>\n"})}),(0,a.jsx)(s.p,{children:"For brevity, settings to make everything non-static is omitted."}),(0,a.jsx)(s.h3,{id:"generate-code-per-file-or-globally",children:"Generate Code (per file or globally)"}),(0,a.jsxs)(s.p,{children:["By default the ancient ",(0,a.jsx)(s.code,{children:"System.Resources.ResourceManager"})," is used."]}),(0,a.jsxs)(s.p,{children:["Benefits of using ",(0,a.jsx)(s.code,{children:"System.Resources.ResourceManager"}),":"]}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Supports custom ",(0,a.jsx)(s.code,{children:"CultureInfo"})]}),"\n",(0,a.jsx)(s.li,{children:"Languages are only loaded the first time a language is referenced"}),"\n",(0,a.jsx)(s.li,{children:"Only use memory for the languages used"}),"\n",(0,a.jsx)(s.li,{children:"Can ship satellite dlls separately"}),"\n"]}),(0,a.jsxs)(s.p,{children:["Disadvantages of using ",(0,a.jsx)(s.code,{children:"System.Resources.ResourceManager"})]}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"The satellite dlls are always lazy loaded, so cold start penalty is high"}),"\n",(0,a.jsx)(s.li,{children:"Satellite dlls requires that you can scan the dir for which files are available, which can cause issues in some project types"}),"\n",(0,a.jsx)(s.li,{children:"Loading a satellite dll takes way more memory than just loading the respective strings"}),"\n",(0,a.jsx)(s.li,{children:"Build time for .resources -> satellite dll can be quite slow (~150msec per file)"}),"\n",(0,a.jsx)(s.li,{children:"Linker optimization doesn't work, since it cannot know which resources are referenced"}),"\n"]}),(0,a.jsxs)(s.p,{children:["Benefits of using ",(0,a.jsx)(s.code,{children:"GenerateCode"})," code generation:"]}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"All languages are placed in the main dll, no more satellite dlls"}),"\n",(0,a.jsx)(s.li,{children:"Lookup speed is ~600% faster (5ns vs 33ns)"}),"\n",(0,a.jsx)(s.li,{children:"Zero allocations"}),"\n",(0,a.jsxs)(s.li,{children:["Very small code footprint (about 10 bytes per language, instead of including the entire ",(0,a.jsx)(s.code,{children:"System.Resources"}),")"]}),"\n",(0,a.jsx)(s.li,{children:"Very fast build time"}),"\n",(0,a.jsx)(s.li,{children:"Because all code is referencing the strings directly, the linker can see which strings are actually used and which are not."}),"\n",(0,a.jsx)(s.li,{children:"No cold start penalty"}),"\n",(0,a.jsx)(s.li,{children:"Smaller combined size of dll (up to 50%, since it doesn't need to store the keys for every single language)"}),"\n"]}),(0,a.jsxs)(s.p,{children:["Disadvantages of using ",(0,a.jsx)(s.code,{children:"GenerateCode"})," code generation"]}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Since ",(0,a.jsx)(s.code,{children:"CultureInfo"})," are pre-computed, custom ",(0,a.jsx)(s.code,{children:"CultureInfo"})," are not supported (or rather, they always return the default language)"]}),"\n",(0,a.jsx)(s.li,{children:'Cannot lookup "all" keys (unless using reflection)'}),"\n",(0,a.jsx)(s.li,{children:"Main dll size increased since it contains all language strings (sometimes, the compiler can pack code strings much better than resource strings and it doesn't need to store the keys)"}),"\n"]}),(0,a.jsxs)(s.p,{children:["Notice, it is required to set ",(0,a.jsx)(s.code,{children:"GenerateResource"})," to false for all resx files to prevent the built-in resgen.exe from running."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n    <EmbeddedResource Update="**/*.resx">\n        <GenerateCode>true</GenerateCode>\n        <GenerateResource>false</GenerateResource>\n    </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"or globally"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<PropertyGroup>\n  <ResXGenerator_GenerateCode>true</ResXGenerator_GenerateCode>\n</PropertyGroup>\n<ItemGroup>\n    <EmbeddedResource Update="@(EmbeddedResource)">\n        <GenerateResource>false</GenerateResource>\n    </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.p,{children:"If you get build error MSB3030, add this to your csproj to prevent it from trying to copy satellite dlls that no longer exists"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<Target Name="PreventMSB3030" DependsOnTargets="ComputeIntermediateSatelliteAssemblies" BeforeTargets="GenerateSatelliteAssemblies" >\n  <ItemGroup>\n    <IntermediateSatelliteAssembliesWithTargetPath Remove="@(IntermediateSatelliteAssembliesWithTargetPath)"></IntermediateSatelliteAssembliesWithTargetPath>\n  </ItemGroup>\n</Target>\n'})}),(0,a.jsx)(s.h2,{id:"resource-file-namespaces",children:"Resource file namespaces"}),(0,a.jsxs)(s.p,{children:["Linked resources namespace follow ",(0,a.jsx)(s.code,{children:"Link"})," if it is set. The ",(0,a.jsx)(s.code,{children:"Link"})," setting is also used by msbuild built-in 'resgen.exe' to determine the embedded filename."]}),(0,a.jsxs)(s.p,{children:["Use-case: Linking ",(0,a.jsx)(s.code,{children:".resx"}),' files from outside source (e.g. generated in a localization sub-module by translators) and expose them as "Resources" namespace.']}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Include="..\\..\\Another.Project\\Translations\\*.resx">\n    <Link>Resources\\%(FileName)%(Extension)</Link>\n    <PublicClass>true</PublicClass>\n    <StaticClass>false</StaticClass>\n  </EmbeddedResource>\n  <EmbeddedResource Update="..\\..\\Another.Project\\Translations\\*.*.resx">\n    <DependentUpon>$([System.IO.Path]::GetFilenameWithoutExtension([System.String]::Copy(\'%(FileName)\'))).resx</DependentUpon>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsxs)(s.p,{children:["You can also use the ",(0,a.jsx)(s.code,{children:"TargetPath"})," to just overwrite the namespace"]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Include="..\\..\\Another.Project\\Translations\\*.resx">\n    <TargetPath>Resources\\%(FileName)%(Extension)</TargetPath>\n    <PublicClass>true</PublicClass>\n    <StaticClass>false</StaticClass>\n  </EmbeddedResource>\n  <EmbeddedResource Update="..\\..\\Another.Project\\Translations\\*.*.resx">\n    <DependentUpon>$([System.IO.Path]::GetFilenameWithoutExtension([System.String]::Copy(\'%(FileName)\'))).resx</DependentUpon>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsxs)(s.p,{children:["It is also possible to set the namespace using the ",(0,a.jsx)(s.code,{children:"CustomToolNamespace"})," setting. Unlike the ",(0,a.jsx)(s.code,{children:"Link"})," and ",(0,a.jsx)(s.code,{children:"TargetPath"}),", which will prepend the assemblies namespace and includes the filename, the ",(0,a.jsx)(s.code,{children:"CustomToolNamespace"})," is taken verbatim."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n  <EmbeddedResource Update="**\\*.resx">\n    <CustomToolNamespace>MyNamespace.AllMyResourcesAreBelongToYouNamespace</CustomToolNamespace>\n  </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsx)(s.h2,{id:"excluding-resx-files",children:"Excluding resx files"}),(0,a.jsxs)(s.p,{children:["Individual resx files can also be excluded from being processed by setting the ",(0,a.jsx)(s.code,{children:"SkipFile"})," metadata to true."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n    <EmbeddedResource Update="ExcludedFile.resx">\n        <SkipFile>true</SkipFile>\n    </EmbeddedResource>\n</ItemGroup>\n'})}),(0,a.jsxs)(s.p,{children:["Alternatively it can be set with the attribute ",(0,a.jsx)(s.code,{children:'SkipFile="true"'}),"."]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<ItemGroup>\n\t<EmbeddedResource Update="ExcludedFile.resx" SkipFile="true" />\n</ItemGroup>\n'})}),(0,a.jsx)(s.h2,{id:"references",children:"References"}),(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/",children:"Introducing C# Source Generators | .NET Blog"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://github.com/microsoft/cswin32",children:"microsoft/CsWin32: A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project."})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://github.com/kenkendk/mdresxfilecodegenerator",children:"kenkendk/mdresxfilecodegenerator: Resx Designer Generator"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://github.com/dotnet/ResXResourceManager",children:"dotnet/ResXResourceManager: Manage localization of all ResX-Based resources in one central place."})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://github.com/dotnet/roslyn/blob/master/docs/features/source-generators.cookbook.md",children:"roslyn/source-generators.cookbook.md at master \xb7 dotnet/roslyn"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md",children:"roslyn/Using Additional Files.md at master \xb7 dotnet/roslyn"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://www.youtube.com/channel/UCY-z_9mau6X-Vr4gk2aWtMQ",children:"ufcpp - YouTube"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://github.com/amis92/csharp-source-generators",children:"amis92/csharp-source-generators: A list of C# Source Generators (not necessarily awesome) and associated resources: articles, talks, demos."})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://acraven.medium.com/a-nuget-package-workflow-using-github-actions-7da8c6557863",children:"A NuGet package workflow using GitHub Actions | by Andrew Craven | Medium"})}),"\n"]})]}),"\n",(0,a.jsx)(s.h3,{id:"about",children:"About"}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsx)(s.p,{children:"Resources as string"})}),"\n",(0,a.jsx)(s.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(s.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,a.jsxs)(l.A,{children:[(0,a.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,a.jsxs)(s.p,{children:["This is the CSharp Project that references ",(0,a.jsx)(s.strong,{children:"ResXGenerator"})]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n\t<PropertyGroup>\n\t\t<OutputType>Exe</OutputType>\n\t\t<TargetFramework>net7.0</TargetFramework>\n\t\t<ImplicitUsings>enable</ImplicitUsings>\n\t\t<Nullable>enable</Nullable>\n\t</PropertyGroup>\n\n\t<ItemGroup>\n\t\t<PackageReference Include="Aigamo.ResXGenerator" Version="4.2.0">\n\t\t\t<PrivateAssets>all</PrivateAssets>\n\t\t\t<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t\t</PackageReference>\n\t</ItemGroup>\n\n\t<ItemGroup>\n\t\t<Compile Update="GenResources.Designer.cs">\n\t\t  <DesignTime>True</DesignTime>\n\t\t  <AutoGen>True</AutoGen>\n\t\t  <DependentUpon>GenResources.resx</DependentUpon>\n\t\t</Compile>\n\t\t<Compile Update="GenResources.resx">\n\t\t\t<GenerateCode>true</GenerateCode>\t\t\t\t\t\n\t\t\t<GenerateResource>false</GenerateResource>\n\t\t\t<PublicClass>true</PublicClass>\n\t\t</Compile>\n\n\t</ItemGroup>\n\n\t<ItemGroup>\n\t  <EmbeddedResource Update="GenResources.resx">\n\t    <Generator>PublicResXFileCodeGenerator</Generator>\n\t    <LastGenOutput>GenResources.Designer.cs</LastGenOutput>\n\t  </EmbeddedResource>\n\t</ItemGroup>\n\t<PropertyGroup>\n\t\t<ResXGenerator_GenerateCode>true</ResXGenerator_GenerateCode>\n\t\t<ResXGenerator_ClassNamePostfix>Model</ResXGenerator_ClassNamePostfix>\t\t\n\t</PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n</Project>\n\n'})})]}),(0,a.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ResXGenerator\\src\\ResXDemo\\Program.cs",label:"Program.cs",children:[(0,a.jsxs)(s.p,{children:["This is the use of ",(0,a.jsx)(s.strong,{children:"ResXGenerator"})," in ",(0,a.jsx)(s.em,{children:"Program.cs"})]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"Console.WriteLine(ResXDemo.GenResourcesModel.MyName);\nConsole.WriteLine(ResXDemo.GenResources.MyName);\n\n\n"})})]}),(0,a.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ResXGenerator\\src\\ResXDemo\\GenResources.resx",label:"GenResources.resx",children:[(0,a.jsxs)(s.p,{children:["This is the use of ",(0,a.jsx)(s.strong,{children:"ResXGenerator"})," in ",(0,a.jsx)(s.em,{children:"GenResources.resx"})]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'<?xml version="1.0" encoding="utf-8"?>\n<root>\n  \x3c!-- \n    Microsoft ResX Schema \n    \n    Version 2.0\n    \n    The primary goals of this format is to allow a simple XML format \n    that is mostly human readable. The generation and parsing of the \n    various data types are done through the TypeConverter classes \n    associated with the data types.\n    \n    Example:\n    \n    ... ado.net/XML headers & schema ...\n    <resheader name="resmimetype">text/microsoft-resx</resheader>\n    <resheader name="version">2.0</resheader>\n    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>\n    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>\n    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>\n    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>\n    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">\n        <value>[base64 mime encoded serialized .NET Framework object]</value>\n    </data>\n    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">\n        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>\n        <comment>This is a comment</comment>\n    </data>\n                \n    There are any number of "resheader" rows that contain simple \n    name/value pairs.\n    \n    Each data row contains a name, and value. The row also contains a \n    type or mimetype. Type corresponds to a .NET class that support \n    text/value conversion through the TypeConverter architecture. \n    Classes that don\'t support this are serialized and stored with the \n    mimetype set.\n    \n    The mimetype is used for serialized objects, and tells the \n    ResXResourceReader how to depersist the object. This is currently not \n    extensible. For a given mimetype the value must be set accordingly:\n    \n    Note - application/x-microsoft.net.object.binary.base64 is the format \n    that the ResXResourceWriter will generate, however the reader can \n    read any of the formats listed below.\n    \n    mimetype: application/x-microsoft.net.object.binary.base64\n    value   : The object must be serialized with \n            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\n            : and then encoded with base64 encoding.\n    \n    mimetype: application/x-microsoft.net.object.soap.base64\n    value   : The object must be serialized with \n            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter\n            : and then encoded with base64 encoding.\n\n    mimetype: application/x-microsoft.net.object.bytearray.base64\n    value   : The object must be serialized into a byte array \n            : using a System.ComponentModel.TypeConverter\n            : and then encoded with base64 encoding.\n    --\x3e\n  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">\n    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />\n    <xsd:element name="root" msdata:IsDataSet="true">\n      <xsd:complexType>\n        <xsd:choice maxOccurs="unbounded">\n          <xsd:element name="metadata">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name="value" type="xsd:string" minOccurs="0" />\n              </xsd:sequence>\n              <xsd:attribute name="name" use="required" type="xsd:string" />\n              <xsd:attribute name="type" type="xsd:string" />\n              <xsd:attribute name="mimetype" type="xsd:string" />\n              <xsd:attribute ref="xml:space" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name="assembly">\n            <xsd:complexType>\n              <xsd:attribute name="alias" type="xsd:string" />\n              <xsd:attribute name="name" type="xsd:string" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name="data">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />\n                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />\n              </xsd:sequence>\n              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />\n              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />\n              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />\n              <xsd:attribute ref="xml:space" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name="resheader">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />\n              </xsd:sequence>\n              <xsd:attribute name="name" type="xsd:string" use="required" />\n            </xsd:complexType>\n          </xsd:element>\n        </xsd:choice>\n      </xsd:complexType>\n    </xsd:element>\n  </xsd:schema>\n  <resheader name="resmimetype">\n    <value>text/microsoft-resx</value>\n  </resheader>\n  <resheader name="version">\n    <value>2.0</value>\n  </resheader>\n  <resheader name="reader">\n    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n  <resheader name="writer">\n    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n  <data name="MyName" xml:space="preserve">\n    <value>Andrei Ignat {x}</value>\n  </data>\n</root>\n'})})]}),(0,a.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ResXGenerator\\src\\ResXDemo\\GenResources.Designer.cs",label:"GenResources.Designer.cs",children:[(0,a.jsxs)(s.p,{children:["This is the use of ",(0,a.jsx)(s.strong,{children:"ResXGenerator"})," in ",(0,a.jsx)(s.em,{children:"GenResources.Designer.cs"})]}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace ResXDemo {\n    using System;\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    public class GenResources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]\n        internal GenResources() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        public static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ResXDemo.GenResources", typeof(GenResources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   Overrides the current thread\'s CurrentUICulture property for all\n        ///   resource lookups using this strongly typed resource class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        public static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Andrei Ignat {x}.\n        /// </summary>\n        public static string MyName {\n            get {\n                return ResourceManager.GetString("MyName", resourceCulture);\n            }\n        }\n    }\n}\n\n'})})]})]}),"\n",(0,a.jsx)(s.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,a.jsx)(s.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,a.jsxs)(l.A,{children:[(0,a.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ResXGenerator\\src\\ResXDemo\\obj\\GX\\Aigamo.ResXGenerator\\Aigamo.ResXGenerator.SourceGenerator\\Aigamo.ResXGenerator..g.cs",label:"Aigamo.ResXGenerator..g.cs",children:(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n#nullable enable\nnamespace Aigamo.ResXGenerator;\ninternal static partial class Helpers\n{\n    public static string GetString_(string fallback) => System.Globalization.CultureInfo.CurrentUICulture.LCID switch\n    {\n        _ => fallback\n    };\n}\n\n"})})}),(0,a.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ResXGenerator\\src\\ResXDemo\\obj\\GX\\Aigamo.ResXGenerator\\Aigamo.ResXGenerator.SourceGenerator\\ResXDemo.GenResourcesModel.g.cs",label:"ResXDemo.GenResourcesModel.g.cs",children:(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n#nullable enable\nnamespace ResXDemo;\nusing static Aigamo.ResXGenerator.Helpers;\n\ninternal static class GenResourcesModel\n{\n\n    /// <summary>\n    /// Looks up a localized string similar to Andrei Ignat {x}.\n    /// </summary>\n    public static string? MyName => GetString_("Andrei Ignat {x}");\n}\n\n'})})})]}),"\n",(0,a.jsx)(s.h2,{id:"useful",children:"Useful"}),"\n",(0,a.jsx)(s.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,a.jsx)(s.admonition,{type:"tip",children:(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(66923).A+"",children:"Download Example project ResXGenerator "})})}),"\n",(0,a.jsx)(s.h3,{id:"share-resxgenerator",children:"Share ResXGenerator"}),"\n",(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FResXGenerator&quote=ResXGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FResXGenerator&text=ResXGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FResXGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FResXGenerator&title=ResXGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FResXGenerator&title=ResXGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FResXGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ResXGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ResXGenerator"})}),"\n",(0,a.jsx)(s.p,{children:"aaa"}),"\n",(0,a.jsx)(c.Ay,{})]})}function g(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},66923:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/files/ResXGenerator-8959223acae36a19dfebab4d78617b87.zip"}}]);