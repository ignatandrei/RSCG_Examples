"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7265],{27292:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>k,frontMatter:()=>m,metadata:()=>p,toc:()=>c});var a=t(87462),r=(t(67294),t(3905)),i=t(73992),o=t(18679),s=t(68839);const m={sidebar_position:2020,title:"202 - jos.enumeration",description:"Generating enum from static consts",slug:"/jos.enumeration"},l="jos.enumeration  by Josef Ottosson",p={unversionedId:"RSCG-Examples/jos.enumeration",id:"RSCG-Examples/jos.enumeration",title:"202 - jos.enumeration",description:"Generating enum from static consts",source:"@site/docs/RSCG-Examples/jos.enumeration.md",sourceDirName:"RSCG-Examples",slug:"/jos.enumeration",permalink:"/RSCG_Examples/v2/docs/jos.enumeration",draft:!1,tags:[],version:"current",sidebarPosition:2020,frontMatter:{sidebar_position:2020,title:"202 - jos.enumeration",description:"Generating enum from static consts",slug:"/jos.enumeration"},sidebar:"tutorialSidebar",previous:{title:"201 - Strings.ResourceGenerator",permalink:"/RSCG_Examples/v2/docs/Strings.ResourceGenerator"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},u={},c=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share jos.enumeration",id:"share-josenumeration",level:3},{value:"In the same category (Enum) - 6 other generators",id:"in-the-same-category-enum---6-other-generators",level:3},{value:"CredFetoEnum",id:"credfetoenum",level:4},{value:"EnumClass",id:"enumclass",level:4},{value:"EnumUtilities",id:"enumutilities",level:4},{value:"FusionReactor",id:"fusionreactor",level:4},{value:"NetEscapades.EnumGenerators",id:"netescapadesenumgenerators",level:4},{value:"PMart.Enumeration",id:"pmartenumeration",level:4}],d={toc:c},g="wrapper";function k(e){let{components:n,...m}=e;return(0,r.kt)(g,(0,a.Z)({},d,m,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"josenumeration--by-josef-ottosson"},"jos.enumeration  by Josef Ottosson"),(0,r.kt)(s.Z,{toc:c,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/jos.enumeration/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/jos.enumeration?label=jos.enumeration",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/joseftw/jos.enumeration"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/joseftw/jos.enumeration?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/joseftw/jos.enumeration?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"jos.enumeration")),(0,r.kt)("p",{parentName:"admonition"},"Package Description"),(0,r.kt)("p",{parentName:"admonition"},"Author: Josef Ottosson"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/jos.enumeration/"},"https://www.nuget.org/packages/jos.enumeration/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/joseftw/jos.enumeration"},"https://github.com/joseftw/jos.enumeration")),(0,r.kt)("p",{parentName:"admonition"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/joseftw/jos.enumeration"},"https://github.com/joseftw/jos.enumeration"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"josenumeration"},"JOS.Enumeration"),(0,r.kt)("p",{parentName:"admonition"},"Enumeration implementation with source generation support."),(0,r.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,r.kt)("h3",{parentName:"admonition",id:"josenumeration-1"},"JOS.Enumeration"),(0,r.kt)("p",{parentName:"admonition"},"Contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumeration interface")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Text.Json")," JsonConverter.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"JOS.Enumeration.SourceGenerator")," package contains the actual source generator."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Don't forget to install that one as well.")," \ud83d\ude03"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"dotnet add package JOS.Enumeration\ndotnet add package JOS.Enumeration.SourceGenerator\n")),(0,r.kt)("h3",{parentName:"admonition",id:"josenumerationdatabasedapper"},"JOS.Enumeration.Database.Dapper"),(0,r.kt)("p",{parentName:"admonition"},"Contains a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeHandler")," to use with Dapper."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"dotnet add package JOS.Enumeration.Database.Dapper")),(0,r.kt)("h3",{parentName:"admonition",id:"josenumerationdatabaseentityframeworkcore"},"JOS.Enumeration.Database.EntityFrameworkCore"),(0,r.kt)("p",{parentName:"admonition"},"Contains ConfigureEnumeration extension method to allow usage with EntityFramework Core."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"dotnet add package JOS.Enumeration.Database.EntityFrameworkCore")),(0,r.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Create a new ",(0,r.kt)("em",{parentName:"li"},"partial")," ",(0,r.kt)("inlineCode",{parentName:"li"},"record")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"class")),(0,r.kt)("li",{parentName:"ul"},"Implement the ",(0,r.kt)("inlineCode",{parentName:"li"},"IEnumeration<T>")," interface"),(0,r.kt)("li",{parentName:"ul"},"Add your Enumeration items")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial record Hamburger : IEnumeration<Hamburger>\n{\n    public static readonly Hamburger Cheeseburger = new (1, "Cheeseburger");\n    public static readonly Hamburger BigMac = new(2, "Big Mac");\n    public static readonly Hamburger BigTasty = new(3, "Big Tasty");\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"The source generator will implement the following interface:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// Default implementation -> int as Value\npublic interface IEnumeration<T> : IEnumeration<int, T> where T : IEnumeration<T>\n{\n}\n\npublic interface IEnumeration<TValue, TType> where TValue : IConvertible\n{\n    TValue Value { get; }\n    string Description { get; }\n    static abstract IReadOnlySet<TType> GetAll();\n    static abstract IEnumerable<TType> GetEnumerable();\n    static abstract TType FromValue(TValue value);\n    static abstract TType FromDescription(string description);\n    static abstract TType FromDescription(ReadOnlySpan<char> description);\n    static abstract Type ValueType { get; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"The following code will be generated:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[System.Diagnostics.DebuggerDisplay("{Description}")]\n[System.CodeDom.Compiler.GeneratedCode("JOS.Enumeration.SourceGenerator", "4.1.11-beta+afeaa87a52")]\n[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\npublic partial record Hamburger : IComparable<JOS.Enumerations.Hamburger>\n{\n    private static readonly IReadOnlySet<JOS.Enumerations.Hamburger> AllItems;\n    static Hamburger()\n    {\n        AllItems = new HashSet<JOS.Enumerations.Hamburger>(3)\n        {\n            Cheeseburger,\n            BigMac,\n            BigTasty,\n        }.ToFrozenSet();\n    }\n\n    private Hamburger(int value, string description)\n    {\n        Value = value;\n        Description = description ?? throw new ArgumentNullException(nameof(description));\n    }\n\n    public int Value { get; }\n    public string Description { get; }\n\n    public static IReadOnlySet<JOS.Enumerations.Hamburger> GetAll()\n    {\n        return AllItems;\n    }\n\n    public static IEnumerable<JOS.Enumerations.Hamburger> GetEnumerable()\n    {\n        yield return Cheeseburger;\n        yield return BigMac;\n        yield return BigTasty;\n    }\n\n    public static JOS.Enumerations.Hamburger FromValue(int value)\n    {\n        return value switch\n        {\n            1 => Cheeseburger,\n            2 => BigMac,\n            3 => BigTasty,\n            _ => throw new InvalidOperationException($"\'{value}\' is not a valid value in \'JOS.Enumerations.Hamburger\'")};\n    }\n\n    public static JOS.Enumerations.Hamburger FromDescription(string description)\n    {\n        return description switch\n        {\n            "Cheeseburger" => Cheeseburger,\n            "Big Mac" => BigMac,\n            "Big Tasty" => BigTasty,\n            _ => throw new InvalidOperationException($"\'{description}\' is not a valid description in \'JOS.Enumerations.Hamburger\'")};\n    }\n\n    public static JOS.Enumerations.Hamburger FromDescription(ReadOnlySpan<char> description)\n    {\n        return description switch\n        {\n            "Cheeseburger" => Cheeseburger,\n            "Big Mac" => BigMac,\n            "Big Tasty" => BigTasty,\n            _ => throw new InvalidOperationException($"\'{description}\' is not a valid description in \'JOS.Enumerations.Hamburger\'")};\n    }\n\n    public static Type ValueType => typeof(int);\n\n    public int CompareTo(JOS.Enumerations.Hamburger? other) => Value.CompareTo(other!.Value);\n    public static implicit operator int (JOS.Enumerations.Hamburger item) => item.Value;\n    public static implicit operator JOS.Enumerations.Hamburger(int value) => FromValue(value);\n}\n')),(0,r.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Generic value"),(0,r.kt)("li",{parentName:"ul"},"Generated ",(0,r.kt)("inlineCode",{parentName:"li"},"IComparable<T>")," method."),(0,r.kt)("li",{parentName:"ul"},"Generated implicit operators (convert to/from int)."),(0,r.kt)("li",{parentName:"ul"},"Generated optimized ",(0,r.kt)("inlineCode",{parentName:"li"},"GetAll"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"FromValue")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"FromDescription")," methods."),(0,r.kt)("li",{parentName:"ul"},"System.Text.Json support"),(0,r.kt)("li",{parentName:"ul"},"Database support (Dapper and EF Core).")),(0,r.kt)("h3",{parentName:"admonition",id:"generic-value"},"Generic value"),(0,r.kt)("p",{parentName:"admonition"},"It's possible to use a generic value instead of the default ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," value by implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumeration<TValue, TEnumeration>")," interface."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial record Car : IEnumeration<string, Car>\n{\n    public static readonly Car FerrariSpider = new("ferrari-spider", "Ferrari Spider");\n    public static readonly Car TeslaModelY = new("tesla-model-y", "Tesla Model Y");\n}\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"TValue")," has a ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.iconvertible?WT.mc_id=DT-MVP-5004074"},(0,r.kt)("em",{parentName:"a"},"IConvertible"))," constraint."),(0,r.kt)("p",{parentName:"admonition"},"The following types has been tested and are guaranteed to work:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"int (default)"),(0,r.kt)("li",{parentName:"ul"},"bool"),(0,r.kt)("li",{parentName:"ul"},"decimal"),(0,r.kt)("li",{parentName:"ul"},"long"),(0,r.kt)("li",{parentName:"ul"},"string"),(0,r.kt)("li",{parentName:"ul"},"uint"),(0,r.kt)("li",{parentName:"ul"},"ulong")),(0,r.kt)("h3",{parentName:"admonition",id:"json"},"JSON"),(0,r.kt)("p",{parentName:"admonition"},"The package comes with a ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonConverterFactory"),".\nExample:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var jsonSerializerOptions = new JsonSerializerOptions\n{\n    Converters = { new EnumerationJsonConverterFactory() }\n};\n")),(0,r.kt)("p",{parentName:"admonition"},"It supports the following scenarios:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Serializing to ",(0,r.kt)("inlineCode",{parentName:"li"},"TValue")),(0,r.kt)("li",{parentName:"ul"},"Deserializing from ",(0,r.kt)("inlineCode",{parentName:"li"},"TValue"))),(0,r.kt)("p",{parentName:"admonition"},"If you want any other behaviour, just create your own converter and register it."),(0,r.kt)("h3",{parentName:"admonition",id:"database"},"Database"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MyEntity\n{\n    public MyEntity(Guid id, Hamburger hamburger)\n    {\n        Id = id;\n        Hamburger = hamburger;\n    }\n\n    public Guid Id { get; }\n    public Hamburger Hamburger { get; }\n}\n")),(0,r.kt)("h4",{parentName:"admonition",id:"dapper"},"Dapper"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Register the TypeHandler: ",(0,r.kt)("inlineCode",{parentName:"li"},"SqlMapper.AddTypeHandler(new EnumerationTypeHandler<Hamburger>())")),(0,r.kt)("li",{parentName:"ul"},"Query like this:")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var results = (await actConnection.QueryAsync<MyEntity>(\n            "SELECT id, hamburger from my_entities WHERE id = @id", new {id = myEntity.Id})).ToList(); \n')),(0,r.kt)("h4",{parentName:"admonition",id:"ef-core"},"EF Core"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Configure your DB Context")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public DbSet<MyEntity> MyEntities { get; set; } = null!;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.ApplyConfigurationsFromAssembly(typeof(JosEnumerationDbContext).Assembly);\n} \n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MyEntityEntityTypeConfiguration : IEntityTypeConfiguration<MyEntity>\n{\n    public void Configure(EntityTypeBuilder<MyEntity> builder)\n    {\n        builder.HasKey(x => x.Id);\n        builder.Property(x => x.Hamburger).ConfigureEnumeration().IsRequired();\n    }\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Query:")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var result = await myDbContext.MyEntities.FirstAsync(x => x.Id == myEntity.Id); \n")),(0,r.kt)("h3",{parentName:"admonition",id:"primitive-collections"},"Primitive Collections"),(0,r.kt)("p",{parentName:"admonition"},"Support for primitive collections in net8.0 can be configured like this:"),(0,r.kt)("h4",{parentName:"admonition",id:"ef-core-1"},"EF Core"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Configure(EntityTypeBuilder<MyEntity> builder)\n{\n    builder.ConfigureEnumeration<MyEntity, string, Car>(x => x.Cars);\n}\n")),(0,r.kt)("h4",{parentName:"admonition",id:"dapper-1"},"Dapper"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"SqlMapper.AddTypeHandler(new EnumerationArrayTypeHandler<string, Car>());\n"))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Generating enum from static consts ")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"jos.enumeration")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="JOS.Enumeration" Version="4.0.2" />\n    <PackageReference Include="JOS.Enumeration.SourceGenerator" Version="4.0.2" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Jos.Enumeration\\src\\EnumDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"jos.enumeration")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing EnumDemo;\n\nConsole.WriteLine("Hello, World!");\n\nvar cars= CarTypes.GetAll();\nforeach (var car in cars)\n{\n    Console.WriteLine(car.Description + " - " +car.Value);\n}\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Jos.Enumeration\\src\\EnumDemo\\CarTypes.cs",label:"CarTypes.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"jos.enumeration")," in ",(0,r.kt)("em",{parentName:"p"},"CarTypes.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using JOS.Enumeration;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EnumDemo;\n\n\npartial  record CarTypes : IEnumeration<CarTypes>\n{\n    public static readonly CarTypes Dacia = new(1, "Dacia");\n    public static readonly CarTypes Tesla = new(2, "Tesla");\n    public static readonly CarTypes BMW = new(3, "BMW");\n    public static readonly CarTypes Mercedes = new(4, "Mercedes");\n}\n\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Jos.Enumeration\\src\\EnumDemo\\obj\\GX\\JOS.Enumeration.SourceGenerator\\JOS.Enumeration.SourceGenerator.EnumerationSourceGenerator\\CarTypes.Implementation.generated.cs",label:"CarTypes.Implementation.generated.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated>\n//     This code was auto generated by JOS.Enumeration.SourceGenerator\n// </auto-generated>\n#nullable enable\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n#if NET8_0_OR_GREATER\nusing System.Collections.Frozen;\n#endif\nusing JOS.Enumeration;\n\nnamespace EnumDemo;\n[System.Diagnostics.DebuggerDisplay("{Description}")]\n[System.CodeDom.Compiler.GeneratedCode("JOS.Enumeration.SourceGenerator", null)]\npartial record CarTypes : IComparable<EnumDemo.CarTypes>\n{\n    private static readonly IReadOnlySet<EnumDemo.CarTypes> AllItems;\n    static CarTypes()\n    {\n        AllItems = new HashSet<EnumDemo.CarTypes>(4)\n        {\n            Dacia,\n            Tesla,\n            BMW,\n            Mercedes,\n        }.ToFrozenSet();\n    }\n\n    private CarTypes(int value, string description)\n    {\n        Value = value;\n        Description = description ?? throw new ArgumentNullException(nameof(description));\n    }\n\n    public int Value { get; }\n    public string Description { get; }\n\n    public static IReadOnlySet<EnumDemo.CarTypes> GetAll()\n    {\n        return AllItems;\n    }\n\n    public static IEnumerable<EnumDemo.CarTypes> GetEnumerable()\n    {\n        yield return Dacia;\n        yield return Tesla;\n        yield return BMW;\n        yield return Mercedes;\n    }\n\n    public static EnumDemo.CarTypes FromValue(int value)\n    {\n        return value switch\n        {\n            1 => Dacia,\n            2 => Tesla,\n            3 => BMW,\n            4 => Mercedes,\n            _ => throw new InvalidOperationException($"\'{value}\' is not a valid value in \'EnumDemo.CarTypes\'")};\n    }\n\n    public static EnumDemo.CarTypes FromDescription(string description)\n    {\n        return description switch\n        {\n            "Dacia" => Dacia,\n            "Tesla" => Tesla,\n            "BMW" => BMW,\n            "Mercedes" => Mercedes,\n            _ => throw new InvalidOperationException($"\'{description}\' is not a valid description in \'EnumDemo.CarTypes\'")};\n    }\n\n    public static EnumDemo.CarTypes FromDescription(ReadOnlySpan<char> description)\n    {\n        return description switch\n        {\n            "Dacia" => Dacia,\n            "Tesla" => Tesla,\n            "BMW" => BMW,\n            "Mercedes" => Mercedes,\n            _ => throw new InvalidOperationException($"\'{description}\' is not a valid description in \'EnumDemo.CarTypes\'")};\n    }\n\n    public static Type ValueType => typeof(int);\n\n    public int CompareTo(EnumDemo.CarTypes? other) => Value.CompareTo(other!.Value);\n    public static implicit operator int (EnumDemo.CarTypes item) => item.Value;\n    public static implicit operator EnumDemo.CarTypes(int value) => FromValue(value);\n}\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Jos.Enumeration\\src\\EnumDemo\\obj\\GX\\JOS.Enumeration.SourceGenerator\\JOS.Enumeration.SourceGenerator.EnumerationSourceGenerator\\Enumerations.generated.cs",label:"Enumerations.generated.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated>\n//     This code was auto generated by JOS.Enumeration.SourceGenerator\n// </auto-generated>\n#nullable enable\nusing System;\nusing JOS.Enumeration;\n\nnamespace EnumDemo;\n[System.CodeDom.Compiler.GeneratedCode("JOS.Enumeration.SourceGenerator", null)]\npublic static class Enumerations\n{\n    public static class CarTypes\n    {\n        public static class Dacia\n        {\n            public const int Value = 1;\n            public const string Description = "Dacia";\n        }\n\n        public static class Tesla\n        {\n            public const int Value = 2;\n            public const string Description = "Tesla";\n        }\n\n        public static class BMW\n        {\n            public const int Value = 3;\n            public const string Description = "BMW";\n        }\n\n        public static class Mercedes\n        {\n            public const int Value = 4;\n            public const string Description = "Mercedes";\n        }\n    }\n}\n')))),(0,r.kt)("h2",{id:"useful"},"Useful"),(0,r.kt)("h3",{id:"download-example-net--c"},"Download Example (.NET  C#)"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:t(61025).Z},"Download Example project jos.enumeration "))),(0,r.kt)("h3",{id:"share-josenumeration"},"Share jos.enumeration"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjos.enumeration&quote=jos.enumeration",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjos.enumeration&text=jos.enumeration:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjos.enumeration",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjos.enumeration&title=jos.enumeration",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjos.enumeration&title=jos.enumeration&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjos.enumeration",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/jos.enumeration"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/jos.enumeration")),(0,r.kt)("h3",{id:"in-the-same-category-enum---6-other-generators"},"In the same category (Enum) - 6 other generators"),(0,r.kt)("h4",{id:"credfetoenum"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CredFetoEnum"},"CredFetoEnum")),(0,r.kt)("h4",{id:"enumclass"},(0,r.kt)("a",{parentName:"h4",href:"/docs/EnumClass"},"EnumClass")),(0,r.kt)("h4",{id:"enumutilities"},(0,r.kt)("a",{parentName:"h4",href:"/docs/EnumUtilities"},"EnumUtilities")),(0,r.kt)("h4",{id:"fusionreactor"},(0,r.kt)("a",{parentName:"h4",href:"/docs/FusionReactor"},"FusionReactor")),(0,r.kt)("h4",{id:"netescapadesenumgenerators"},(0,r.kt)("a",{parentName:"h4",href:"/docs/NetEscapades.EnumGenerators"},"NetEscapades.EnumGenerators")),(0,r.kt)("h4",{id:"pmartenumeration"},(0,r.kt)("a",{parentName:"h4",href:"/docs/PMart.Enumeration"},"PMart.Enumeration")))}k.isMDXComponent=!0},61025:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/jos.enumeration-0adcb6fd5dd555635b1f81a5637e8cb1.zip"}}]);