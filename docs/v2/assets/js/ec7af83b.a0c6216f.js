"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4958],{42368:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"RSCG-Examples/Strongly","title":"49 - Strongly","description":"Generate and customize strong id structs","source":"@site/docs/RSCG-Examples/Strongly.md","sourceDirName":"RSCG-Examples","slug":"/Strongly","permalink":"/RSCG_Examples/v2/docs/Strongly","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Strongly.md","tags":[],"version":"current","sidebarPosition":490,"frontMatter":{"sidebar_position":490,"title":"49 - Strongly","description":"Generate and customize strong id structs","slug":"/Strongly"},"sidebar":"tutorialSidebar","previous":{"title":"48 - PropertyChangedSourceGenerator","permalink":"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator"},"next":{"title":"50 - Ridge","permalink":"/RSCG_Examples/v2/docs/Ridge"}}');var s=t(74848),o=t(28453),a=t(11470),i=t(19365),l=t(14252);const d={sidebar_position:490,title:"49 - Strongly",description:"Generate and customize strong id structs",slug:"/Strongly"},c="Strongly  by Lucas Teles",u={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installing",id:"installing",level:2},{value:"Usage",id:"usage",level:2},{value:"Customising the converters",id:"customising-the-converters",level:3},{value:"Using different types as a backing fields",id:"using-different-types-as-a-backing-fields",level:3},{value:"Changing the defaults globally",id:"changing-the-defaults-globally",level:2},{value:"EF Core - ValueConverter",id:"ef-core---valueconverter",level:2},{value:"OpenApi/Swagger Specification",id:"openapiswagger-specification",level:2},{value:"Embedding the attributes in your project",id:"embedding-the-attributes-in-your-project",level:2},{value:"Preserving usages of the <code>[Strongly]</code> attribute",id:"preserving-usages-of-the-strongly-attribute",level:2},{value:"Why do I need this library?",id:"why-do-i-need-this-library",level:2},{value:"What code is generated?",id:"what-code-is-generated",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Credits",id:"credits",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Strongly",id:"share-strongly",level:3},{value:"In the same category (PrimitiveObsession) - 4 other generators",id:"in-the-same-category-primitiveobsession---4-other-generators",level:3},{value:"DomainPrimitives",id:"domainprimitives",level:4},{value:"StronglyTypedUid",id:"stronglytypeduid",level:4},{value:"UnitGenerator",id:"unitgenerator",level:4},{value:"Vogen",id:"vogen",level:4}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"strongly--by-lucas-teles",children:"Strongly  by Lucas Teles"})}),"\n",(0,s.jsx)(l.A,{toc:p}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Strongly/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Strongly?label=Strongly",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/lucasteles/Strongly/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/lucasteles/Strongly?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/lucasteles/Strongly?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"Strongly"})]}),(0,s.jsx)(n.p,{children:"A source generator for creating strongly-typed values by decorating with a [Strongly] attribute"}),(0,s.jsx)(n.p,{children:"Author: Lucas Teles"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Strongly/",children:"https://www.nuget.org/packages/Strongly/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/lucasteles/Strongly/",children:"https://github.com/lucasteles/Strongly/"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/lucasteles/Strongly/",children:"https://github.com/lucasteles/Strongly/"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.h1,{id:"strongly",children:"Strongly"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/lucasteles/Strongly/master/logo.png",alt:"Strongly logo"})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{src:"https://github.com/lucasteles/Strongly/actions/workflows/BuildAndPack.yml/badge.svg",alt:"Build status"}),"\n",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Strongly/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Strongly.svg",alt:"NuGet"})})]}),(0,s.jsxs)(n.p,{children:["Strongly makes creating strongly-typed values as easy as adding an attribute! No\nmore ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/#an-example-of-the-problem",children:"accidentally passing arguments in the wrong order to methods"})," -\nStrongly uses .NET 6's compile-time incremental source generators to\ngenerate ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#a-full-example-implementation",children:"the boilerplate"}),"\nrequired to use strongly-typed IDs."]}),(0,s.jsxs)(n.p,{children:["Simply, ",(0,s.jsx)(n.a,{href:"#installing",children:"install the required package"})," add the ",(0,s.jsx)(n.code,{children:"[Strongly]"})," attribute to a ",(0,s.jsx)(n.code,{children:"struct"})," (in the ",(0,s.jsx)(n.code,{children:"Strongly"}),"\nnamespace):"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Strongly;\n \n[Strongly] // <- Add this attribute to auto-generate the rest of the type\npublic partial struct FooId { }\n"})}),(0,s.jsxs)(n.p,{children:["and the source generator magically generates the backing code when you save the file! Use ",(0,s.jsx)(n.em,{children:"Go to Definition"})," to see the\ngenerated code:"]}),(0,s.jsx)("img",{src:"https://raw.githubusercontent.com/andrewlock/Strongly/master/docs/strongly_typed_id.gif",alt:"Generating a strongly-typed ID using the Strongly packages"}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Strongly requires requires ",(0,s.jsx)(n.a,{href:"https://dotnet.microsoft.com/download/dotnet/6.0",children:"the .NET Core SDK v6.0.100 or greater"}),"."]}),"\n"]}),(0,s.jsx)(n.h2,{id:"installing",children:"Installing"}),(0,s.jsxs)(n.p,{children:["To use the the ",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Strongly",children:"Strongly NuGet package"}),", install\nthe ",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Strongly",children:"Strongly"})," package into your project. Depending on which converters you\nimplement, you may need one or more of the following additional packages"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/System.Text.Json/",children:"System.Text.Json"})," (optional, only required\nif ",(0,s.jsxs)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#creating-a-custom-jsonconverter",children:["generating a System.Text ",(0,s.jsx)(n.code,{children:"JsonConverter"})]}),").\nNote that in .NET Core apps, you will likely already reference this project via transitive dependencies."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Newtonsoft.Json/",children:"Newtonsoft.Json"})," (optional, only required\nif ",(0,s.jsxs)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#creating-a-custom-jsonconverter",children:["generating a Newtonsoft ",(0,s.jsx)(n.code,{children:"JsonConverter"})]}),").\nNote that in some ASP.NET Core apps, you will likely already reference this project via transitive dependencies."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Dapper/",children:"Dapper"})," (optional, only required\nif ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-3/#interfacing-with-external-system-using-strongly-typed-ids",children:"generating a type mapper"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore",children:"EF Core"})," (optional, only required\nif ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/strongly-typed-ids-in-ef-core-using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-4/",children:"generating an EF Core ValueConverter"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Swashbuckle.AspNetCore.Annotations",children:"Swagger Annotations"})," (optional, only required\nif ",(0,s.jsx)(n.a,{href:"#openapiswagger-specification",children:"generating an Swagger Schema Filter"})]}),"\n"]}),(0,s.jsxs)(n.p,{children:["To install the packages, add the references to your ",(0,s.jsx)(n.em,{children:"csproj"})," file, for example by running"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package Strongly \n"})}),(0,s.jsxs)(n.p,{children:["This adds a ",(0,s.jsx)(n.code,{children:"<PackageReference>"})," to your project. You can additionally mark the package as ",(0,s.jsx)(n.code,{children:'PrivateAssets="all"'}),"\nand ",(0,s.jsx)(n.code,{children:'ExcludeAssets="runtime"'}),"."]}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Setting ",(0,s.jsx)(n.code,{children:'PrivateAssets="all"'})," means any projects referencing this one will not also get a reference to the ",(0,s.jsx)(n.em,{children:"Strongly"}),"\npackage. Setting ",(0,s.jsx)(n.code,{children:'ExcludeAssets="runtime"'})," ensures the ",(0,s.jsx)(n.em,{children:"Strongly.Attributes.dll"})," file is not copied to your build\noutput (it is not required at runtime)."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'\n<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n    </PropertyGroup>\n\n    \x3c!-- Add the package --\x3e\n    <PackageReference Include="Strongly" Version="1.0.0" PrivateAssets="all" ExcludeAssets="runtime"/>\n    \x3c!-- --\x3e\n\n</Project>\n'})}),(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,s.jsxs)(n.p,{children:["To create a strongly-typed ID, create a ",(0,s.jsx)(n.code,{children:"partial struct"})," with the desired name, and decorate it with the ",(0,s.jsx)(n.code,{children:"[Strongly]"}),"\nattribute, in the ",(0,s.jsx)(n.code,{children:"Strongly"})," namespace:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Strongly;\n\n[Strongly] // Add this attribute to auto-generate the rest of the type\npublic partial struct FooId { }\n"})}),(0,s.jsxs)(n.p,{children:['This generates the "default" strongly-typed ID using a ',(0,s.jsx)(n.code,{children:"Guid"})," backing field, a custom ",(0,s.jsx)(n.code,{children:"TypeConverter"}),", and a\ncustom ",(0,s.jsx)(n.code,{children:"JsonConverter"})," based on System.Text.Json."]}),(0,s.jsx)(n.h3,{id:"customising-the-converters",children:"Customising the converters"}),(0,s.jsxs)(n.p,{children:["You can customise which converters to generate by using flags. For example, to generate a ",(0,s.jsx)(n.code,{children:"TypeConverter"}),",\na ",(0,s.jsx)(n.code,{children:"Newtonsoft.Json"}),", and an EF Core ",(0,s.jsx)(n.code,{children:"ValueConverter"}),", use"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Strongly;\n\n[Strongly(converters: StronglyConverter.TypeConverter | StronglyConverter.SystemTextJson | StronglyConverter.EfValueConverter)] \npublic partial struct SystemTextJsonConverterId { }\n"})}),(0,s.jsx)(n.h3,{id:"using-different-types-as-a-backing-fields",children:"Using different types as a backing fields"}),(0,s.jsxs)(n.p,{children:["The default strongly-typed ID uses a ",(0,s.jsx)(n.code,{children:"Guid"})," backing field:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Strongly;\n\n[Strongly]\npublic partial struct FooId { }\n\nvar id = new FooId(Guid.NewGuid());\n"})}),(0,s.jsxs)(n.p,{children:["You can choose a different type backing field, by passing a value of the ",(0,s.jsx)(n.code,{children:"StronglyBackingType"})," enum in the constructor."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Strongly;\n\n[Strongly(backingType: StronglyBackingType.String)]\npublic partial struct FooId { }\n\nvar id = new FooId("my-id-value");\n'})}),(0,s.jsxs)(n.p,{children:["Currently supported values are ",(0,s.jsx)(n.code,{children:"Guid"})," (the default), ",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"long"}),",",(0,s.jsx)(n.code,{children:"decimal"}),",",(0,s.jsx)(n.code,{children:"BigInteger"}),", ",(0,s.jsx)(n.code,{children:"MassTransit.NewId"}),"\nand ",(0,s.jsx)(n.code,{children:"string"}),"."]}),(0,s.jsx)(n.h2,{id:"changing-the-defaults-globally",children:"Changing the defaults globally"}),(0,s.jsxs)(n.p,{children:["If you wish to change the converters, backing types, or implementations used by default for ",(0,s.jsx)(n.em,{children:"all"})," the ",(0,s.jsx)(n.code,{children:"[Strongly]"}),"\n-decorated types in your project, you can use the assembly attribute ",(0,s.jsx)(n.code,{children:"[StronglyDefaults]"})," to set all of these. For\nexample, the following sets the default converter to a whole project to ",(0,s.jsx)(n.code,{children:"[SystemTextJson]"}),", and changes the default\nbacking-type to an ",(0,s.jsx)(n.code,{children:"int"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Set the defaults for the project\n[assembly:StronglyDefaults(\n    backingType: StronglyType.Int,\n    converters: StronglyConverter.SystemTextJson)]\n\n[Strongly]\npublic partial struct OrderId { }\n\n[Strongly]\npublic partial struct UserId { } \n"})}),(0,s.jsx)(n.p,{children:"This is equivalent to setting these values manually on all the IDs:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Strongly(\n    backingType: StronglyType.Int,\n    converters: StronglyConverter.SystemTextJson)]\npublic partial struct OrderId { }\n\n[Strongly(\n     backingType: StronglyType.Int,\n    converters: StronglyConverter.SystemTextJson)]\npublic partial struct UserId { }\n"})}),(0,s.jsx)(n.h2,{id:"ef-core---valueconverter",children:"EF Core - ValueConverter"}),(0,s.jsxs)(n.p,{children:["When you create a ",(0,s.jsx)(n.code,{children:"Strongly"})," type with EF Converter, the type will have a nested ",(0,s.jsx)(n.code,{children:"ValueConverter"})," class you can use on\nyour entity model definition"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Strongly(StronglyType.String, StronglyConverter.EfValueConverter)]\npublic partial struct PhoneNumber\n{\n}\n\npublic class MyDbContext : DbContext\n{\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        var customer = builder.Entity<Customer>();\n        customer.Property(x => x.Phone).HasConversion<PhoneNumber.EfValueConverter>();\n    }\n}\n\n"})}),(0,s.jsxs)(n.p,{children:["If you have lots of strongly type values you can use the package bellow to automatically set\nthe ",(0,s.jsx)(n.code,{children:"Strongly ValueConverter"})," on all your entities ",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Strongly.EFCore/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Strongly.EFCore.svg",alt:"NuGet"})})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package Strongly.EFCore\n"})}),(0,s.jsxs)(n.p,{children:["After installation you need to set it on yor ",(0,s.jsx)(n.code,{children:"DbContextOptionsBuilder"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"services\n    .AddDbContext<AppDbContext>(options => options\n        .UseStronglyTypeConverters()\n        /* ... */\n        )\n"})}),(0,s.jsx)(n.h2,{id:"openapiswagger-specification",children:"OpenApi/Swagger Specification"}),(0,s.jsx)(n.p,{children:"If you wish to use an ID in your Swagger models and want to have schema and model sample reflecting the value\nbacking-field\ntype you will need:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Install ",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Swashbuckle.AspNetCore.Annotations",children:"Swagger Annotations"})," ",(0,s.jsx)(n.code,{children:">=5.0.0"})]}),"\n",(0,s.jsxs)(n.li,{children:["Enable annotation in swagger gen with ",(0,s.jsx)(n.code,{children:"services.AddSwaggerGen(c => c.EnableAnnotations());"})]}),"\n",(0,s.jsxs)(n.li,{children:["Use the converter flag ",(0,s.jsx)(n.code,{children:"StronglyConverter.SwaggerSchemaFilter"})," on the ID decorator. eg:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Strongly(\n    backingType: StronglyType.Int,\n    converters: StronglyConverter.SwaggerSchemaFilter | StronglyConverter.SystemTextJson)]\npublic partial struct UserId { }\n"})}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"embedding-the-attributes-in-your-project",children:"Embedding the attributes in your project"}),(0,s.jsxs)(n.p,{children:["By default, the ",(0,s.jsx)(n.code,{children:"[Strongly]"})," attributes referenced in your application are contained in an external dll. It is also\npossible to embed the attributes directly in your project, so they appear in the dll when your project is built. If you\nwish to do this, you must do two things:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Define the MSBuild constant ",(0,s.jsx)(n.code,{children:"STRONGLY_TYPED_EMBED_ATTRIBUTES"}),". This ensures the attributes are embedded in your\nproject"]}),"\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"compile"})," to the list of excluded assets in your ",(0,s.jsx)(n.code,{children:"<PackageReference>"})," element. This ensures the attributes in\nyour project are referenced, instead of the ",(0,s.jsx)(n.em,{children:"Strongly.Attributes.dll"})," library."]}),"\n"]}),(0,s.jsx)(n.p,{children:"Your project file should look something like this:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'\n<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        \x3c!--  Define the MSBuild constant    --\x3e\n        <DefineConstants>STRONGLY_TYPED_EMBED_ATTRIBUTES</DefineConstants>\n    </PropertyGroup>\n\n    \x3c!-- Add the package --\x3e\n    <PackageReference Include="Strongly" Version="1.0.0"\n                      PrivateAssets="all"\n                      ExcludeAssets="compile;runtime"/>\n    \x3c!--                               \u261d Add compile to the list of excluded assets. --\x3e\n\n</Project>\n'})}),(0,s.jsxs)(n.h2,{id:"preserving-usages-of-the-strongly-attribute",children:["Preserving usages of the ",(0,s.jsx)(n.code,{children:"[Strongly]"})," attribute"]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"[Strongly]"})," and ",(0,s.jsx)(n.code,{children:"[StronglyDefaults]"})," attributes are decorated with the ",(0,s.jsx)(n.code,{children:"[Conditional]"}),"\nattribute, ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/conditional-compilation-for-ignoring-method-calls-with-the-conditionalattribute/#applying-the-conditional-attribute-to-classes",children:"so their usage will not appear in the build output of your project"}),".\nIf you use reflection at runtime on one of your IDs, you will not find ",(0,s.jsx)(n.code,{children:"[Strongly]"})," in the list of custom attributes."]}),(0,s.jsxs)(n.p,{children:["If you wish to preserve these attributes in the build output, you can define the ",(0,s.jsx)(n.code,{children:"STRONGLY_TYPED_USAGES"})," MSBuild\nvariable. Note that this means your project will have a runtime-dependency on ",(0,s.jsx)(n.em,{children:"Strongly.Attributes.dll"})," so you need to\nensure this is included in your build output."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'\n<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        \x3c!--  Define the MSBuild constant to preserve usages   --\x3e\n        <DefineConstants>STRONGLY_TYPED_USAGES</DefineConstants>\n    </PropertyGroup>\n\n    \x3c!-- Add the package --\x3e\n    <PackageReference Include="Strongly" Version="1.0.0" PrivateAssets="all"/>\n    \x3c!--              \u261d You must not exclude the runtime assets in this case --\x3e\n\n</Project>\n'})}),(0,s.jsx)(n.h2,{id:"why-do-i-need-this-library",children:"Why do I need this library?"}),(0,s.jsxs)(n.p,{children:["Andrew\nhave ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/",children:"written a blog-post series"}),"\non strongly-typed IDs that explains the issues and rational behind this library. For a detailed view, I suggest starting\nthere, but I provide a brief introduction here."]}),(0,s.jsxs)(n.p,{children:["This library is designed to tackle a specific instance of ",(0,s.jsx)(n.a,{href:"https://lostechies.com/jimmybogard/2007/12/03/dealing-with-primitive-obsession/",children:(0,s.jsx)(n.em,{children:"primitive\nobsession"})}),", whereby we use primitive\nobjects (",(0,s.jsx)(n.code,{children:"Guid"}),"/",(0,s.jsx)(n.code,{children:"string"}),"/",(0,s.jsx)(n.code,{children:"int"}),"/",(0,s.jsx)(n.code,{children:"long"}),"/",(0,s.jsx)(n.code,{children:"decimal"})," etc) to represent the IDs or values of\ndomain objects. The problem is that these\ntypes are all\ninterchangeable - an order ID can be assigned to a product ID despite the fact that is likely nonsensical from the\ndomain point of\nview. ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/#an-example-of-the-problem",children:"See here for a more concrete example"}),"."]}),(0,s.jsxs)(n.p,{children:["By using strongly-typed values, we give each of then its own ",(0,s.jsx)(n.code,{children:"Type"})," which ",(0,s.jsx)(n.em,{children:"wraps"})," the underlying primitive value. This\nensures\nyou can only use the value where it makes sense: ",(0,s.jsx)(n.code,{children:"ProductId"}),"s can only be assigned to products, or you can only search\nfor\nproducts using a ",(0,s.jsx)(n.code,{children:"ProductId"}),", not an ",(0,s.jsx)(n.code,{children:"OrderId"}),"."]}),(0,s.jsxs)(n.p,{children:["Unfortunately, taking this approach\nrequires ",(0,s.jsx)(n.a,{href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#a-full-example-implementation",children:"a lot of boilerplate and ceremony"}),"\nto make working with it manageable. This library abstracts all that away from you, by generating the boilerplate at\nbuild-time by using a Roslyn-powered code generator."]}),(0,s.jsx)(n.h2,{id:"what-code-is-generated",children:"What code is generated?"}),(0,s.jsxs)(n.p,{children:["The exact code generated depends on the arguments you provide to the ",(0,s.jsx)(n.code,{children:"Strongly"})," attribute. The code is generated to the\n",(0,s.jsx)(n.em,{children:"obj"})," folder of the project, so you can use ",(0,s.jsx)(n.em,{children:"Go to Definition"})," on your Id to see the ",(0,s.jsx)(n.em,{children:"exact"})," code generated in each\ncase."]}),(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),(0,s.jsx)(n.p,{children:"The Strongly NuGet package is a .NET Standard 2.0 package."}),(0,s.jsx)(n.p,{children:"You must be using the .NET 6+ SDK (though you can compile for other target frameworks like .NET Core 2.1 and .NET\nFramework 4.8)"}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"struct"}),"s you decorate with the ",(0,s.jsx)(n.code,{children:"Strongly"})," attribute must be marked ",(0,s.jsx)(n.code,{children:"partial"}),"."]}),(0,s.jsx)(n.h2,{id:"credits",children:"Credits"}),(0,s.jsxs)(n.p,{children:["This project born as a fork of ",(0,s.jsx)(n.a,{href:"https://github.com/andrewlock/StronglyTypedId",children:"StronglyTypedId"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Generate and customize strong id structs"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example--source-csproj-source-files-",children:"Example ( source csproj, source files )"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"Strongly"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Strongly" Version="1.1.0" OutputItemType="Analyzer" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,s.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Strongly"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// See https://aka.ms/new-console-template for more information\nusing StronglyDemo;\n\nPerson p = new();\n//p.SetBirthDate(1970, 4, 16);\np.SetBirthDate(new YearId(1970) , new MonthId(4),new DayId( 16));\nConsole.WriteLine(p.BirthDate);\n"})})]}),(0,s.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\Person.cs",label:"Person.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Strongly"})," in ",(0,s.jsx)(n.em,{children:"Person.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing Strongly;\n\nnamespace StronglyDemo;\n\n\n[Strongly(backingType: StronglyType.Int)]\npublic partial struct YearId { }\n\n[Strongly(backingType: StronglyType.Int)]\npublic partial struct MonthId { }\n\n[Strongly(backingType: StronglyType.Int)]\npublic partial struct DayId { }\n\ninternal class Person\n{\n    public DateTime BirthDate { get; internal set; }\n    public void SetBirthDate(YearId yearId,MonthId monthId,DayId dayId)\n    {\n        BirthDate = new DateTime(yearId.Value, monthId.Value, dayId.Value);\n    }\n}\n\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyAttribute.g.cs",label:"StronglyAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#if STRONGLY_TYPED_EMBED_ATTRIBUTES\n\nusing System;\n\nnamespace Strongly\n{\n    /// <summary>\n    /// Place on partial structs to make the type a strongly-typed ID\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Struct)]\n    [System.Diagnostics.Conditional("STRONGLY_TYPED_USAGES")]\n    internal sealed class StronglyAttribute : Attribute\n    {\n        /// <summary>\n        /// Make the struct a strongly typed ID\n        /// </summary>\n        /// <param name="backingType">The <see cref="Type"/> to use to store the strongly-typed ID value.\n        /// If not set, uses <see cref="StronglyDefaultsAttribute.BackingType"/>, which defaults to <see cref="StronglyType.Guid"/></param>\n        /// <param name="converters">Converters to create for serializing/deserializing the strongly-typed ID value.\n        /// If not set, uses <see cref="StronglyDefaultsAttribute.Converters"/>, which defaults to <see cref="StronglyConverter.NewtonsoftJson"/>\n        /// and <see cref="StronglyConverter.TypeConverter"/></param>\n        /// <param name="implementations">Interfaces and patterns the strongly typed id should implement\n        /// If not set, uses <see cref="StronglyDefaultsAttribute.Implementations"/>, which defaults to <see cref="StronglyImplementations.IEquatable"/>\n        /// and <see cref="StronglyImplementations.IComparable"/></param>\n        public StronglyAttribute(\n            StronglyType backingType = StronglyType.Default,\n            StronglyConverter converters = StronglyConverter.Default,\n            StronglyImplementations implementations = StronglyImplementations.Default)\n        {\n            BackingType = backingType;\n            Converters = converters;\n            Implementations = implementations;\n        }\n\n        /// <summary>\n        /// The <see cref="Type"/> to use to store the strongly-typed ID value\n        /// </summary>\n        public StronglyType BackingType { get; }\n\n        /// <summary>\n        /// JSON library used to serialize/deserialize strongly-typed ID value\n        /// </summary>\n        public StronglyConverter Converters { get; }\n\n        /// <summary>\n        /// Interfaces and patterns the strongly typed id should implement\n        /// </summary>\n        public StronglyImplementations Implementations { get; }\n    }\n}\n#endif\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyConverter.g.cs",label:"StronglyConverter.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#if STRONGLY_TYPED_EMBED_ATTRIBUTES\n\nusing System;\n\nnamespace Strongly\n{\n    /// <summary>\n    /// Converters used to to serialize/deserialize strongly-typed ID values\n    /// </summary>\n    [Flags]\n    internal enum StronglyConverter\n    {\n        // Used with HasFlag, so needs to be 1, 2, 4 etc\n\n        /// <summary>\n        /// Don\'t create any converters for the strongly typed ID\n        /// </summary>\n        None = 0,\n\n        /// <summary>\n        /// Use the default converters for the strongly typed Id.\n        /// This will be the value provided in the <see cref="StronglyDefaultsAttribute"/>, which falls back to\n        /// <see cref="TypeConverter"/> and <see cref="SystemTextJson"/>\n        /// </summary>\n        Default = 1,\n\n        /// <summary>\n        /// Creates a <see cref="TypeConverter"/> for converting from the strongly typed ID to and from a string\n        /// </summary>\n        TypeConverter = 2,\n\n        /// <summary>\n        /// Creates a Newtonsoft.Json.JsonConverter for serializing the strongly typed id to its primitive value\n        /// </summary>\n        NewtonsoftJson = 4,\n\n        /// <summary>\n        /// Creates a System.Text.Json.Serialization.JsonConverter for serializing the strongly typed id to its primitive value\n        /// </summary>\n        SystemTextJson = 8,\n\n        /// <summary>\n        /// Creates an EF Core Value Converter for extracting the primitive value\n        /// </summary>\n        EfValueConverter = 16,\n\n        /// <summary>\n        /// Creates a Dapper TypeHandler for converting to and from the type\n        /// </summary>\n        DapperTypeHandler = 32,\n\n        /// <summary>\n        /// Creates a Swagger SchemaFilter for OpenApi documentation\n        /// </summary>\n        SwaggerSchemaFilter = 64,\n    }\n}\n#endif\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyDefaultsAttribute.g.cs",label:"StronglyDefaultsAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#if STRONGLY_TYPED_EMBED_ATTRIBUTES\n\nusing System;\n\nnamespace Strongly\n{\n    /// <summary>\n    /// Used to control the default Place on partial structs to make the type a strongly-typed ID\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]\n    [System.Diagnostics.Conditional("STRONGLY_TYPED_USAGES")]\n    internal sealed class StronglyDefaultsAttribute : Attribute\n    {\n        /// <summary>\n        /// Set the default values used for strongly typed ids\n        /// </summary>\n        /// <param name="backingType">The <see cref="Type"/> to use to store the strongly-typed ID value.\n        /// Defaults to <see cref="StronglyType.Guid"/></param>\n        /// <param name="converters">JSON library used to serialize/deserialize strongly-typed ID value.\n        /// Defaults to <see cref="StronglyConverter.SystemTextJson"/> and <see cref="StronglyConverter.TypeConverter"/></param>\n        /// <param name="implementations">Interfaces and patterns the strongly typed id should implement\n        /// Defaults to <see cref="StronglyImplementations.IEquatable"/> and <see cref="StronglyImplementations.IComparable"/></param>\n        public StronglyDefaultsAttribute(\n            StronglyType backingType = StronglyType.Default,\n            StronglyConverter converters = StronglyConverter.Default,\n            StronglyImplementations implementations = StronglyImplementations.Default)\n        {\n            BackingType = backingType;\n            Converters = converters;\n            Implementations = implementations;\n        }\n\n        /// <summary>\n        /// The default <see cref="Type"/> to use to store the strongly-typed ID values.\n        /// </summary>\n        public StronglyType BackingType { get; }\n\n        /// <summary>\n        /// The default converters to create for serializing/deserializing strongly-typed ID values.\n        /// </summary>\n        public StronglyConverter Converters { get; }\n\n        /// <summary>\n        /// Interfaces and patterns the strongly typed id should implement\n        /// </summary>\n        public StronglyImplementations Implementations { get; }\n    }\n}\n#endif\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyDemo.DayId.g.cs",label:"StronglyDemo.DayId.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the Strongly source generator\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n#pragma warning disable 1591 // publicly visible type or member must be documented\n\nnamespace StronglyDemo\n{\n    [System.Text.Json.Serialization.JsonConverter(typeof(DayIdSystemTextJsonConverter))]\n    [System.ComponentModel.TypeConverter(typeof(DayIdTypeConverter))]\nreadonly partial struct DayId : System.IComparable<DayId>, System.IEquatable<DayId>\n{\n    public int Value { get; }\n\n    public DayId(int value)\n    {\n        Value = value;\n    }\n    \n    public static readonly DayId Empty = new DayId(0);\n\n    public bool Equals(DayId other) => this.Value.Equals(other.Value);\n    public override bool Equals(object obj)\n    {\n        if (ReferenceEquals(null, obj)) return false;\n        return obj is DayId other && Equals(other);\n    }\n    public override int GetHashCode() => Value.GetHashCode();\n    public override string ToString() => Value.ToString();\n    public static bool operator ==(DayId a, DayId b) => a.Equals(b);\n    public static bool operator !=(DayId a, DayId b) => !(a == b);\n    public static DayId Parse(string value) => new DayId(int.Parse(value));\n    public static bool TryParse(string value, out DayId result)\n    {\n        if (int.TryParse(value, out int parseResult))\n        {\n            result = new DayId(parseResult);\n            return true;\n        }\n        result = default;\n        return false;\n    }\npublic int CompareTo(DayId other) => Value.CompareTo(other.Value);\n\n\nclass DayIdTypeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)\n    {\n        return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);\n    }\n\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n    {\n        return value switch\n        {\n            int intValue => new DayId(intValue),\n            string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, out var result) => new DayId(result),\n            _ => base.ConvertFrom(context, culture, value),\n        };\n    }\n\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)\n    {\n        return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);\n    }\n\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)\n    {\n        if (value is DayId idValue)\n        {\n            if (destinationType == typeof(int))\n            {\n                return idValue.Value;\n            }\n\n            if (destinationType == typeof(string))\n            {\n                return idValue.Value.ToString();\n            }\n        }\n\n        return base.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\n\nclass DayIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<DayId>\n{\n    public override DayId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)\n    {\n        return new DayId(reader.GetInt32());\n    }\n\n    public override void Write(System.Text.Json.Utf8JsonWriter writer, DayId value, System.Text.Json.JsonSerializerOptions options)\n    {\n        writer.WriteNumberValue(value.Value);\n    }\n}\n\n    }\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyDemo.MonthId.g.cs",label:"StronglyDemo.MonthId.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the Strongly source generator\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n#pragma warning disable 1591 // publicly visible type or member must be documented\n\nnamespace StronglyDemo\n{\n    [System.Text.Json.Serialization.JsonConverter(typeof(MonthIdSystemTextJsonConverter))]\n    [System.ComponentModel.TypeConverter(typeof(MonthIdTypeConverter))]\nreadonly partial struct MonthId : System.IComparable<MonthId>, System.IEquatable<MonthId>\n{\n    public int Value { get; }\n\n    public MonthId(int value)\n    {\n        Value = value;\n    }\n    \n    public static readonly MonthId Empty = new MonthId(0);\n\n    public bool Equals(MonthId other) => this.Value.Equals(other.Value);\n    public override bool Equals(object obj)\n    {\n        if (ReferenceEquals(null, obj)) return false;\n        return obj is MonthId other && Equals(other);\n    }\n    public override int GetHashCode() => Value.GetHashCode();\n    public override string ToString() => Value.ToString();\n    public static bool operator ==(MonthId a, MonthId b) => a.Equals(b);\n    public static bool operator !=(MonthId a, MonthId b) => !(a == b);\n    public static MonthId Parse(string value) => new MonthId(int.Parse(value));\n    public static bool TryParse(string value, out MonthId result)\n    {\n        if (int.TryParse(value, out int parseResult))\n        {\n            result = new MonthId(parseResult);\n            return true;\n        }\n        result = default;\n        return false;\n    }\npublic int CompareTo(MonthId other) => Value.CompareTo(other.Value);\n\n\nclass MonthIdTypeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)\n    {\n        return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);\n    }\n\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n    {\n        return value switch\n        {\n            int intValue => new MonthId(intValue),\n            string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, out var result) => new MonthId(result),\n            _ => base.ConvertFrom(context, culture, value),\n        };\n    }\n\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)\n    {\n        return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);\n    }\n\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)\n    {\n        if (value is MonthId idValue)\n        {\n            if (destinationType == typeof(int))\n            {\n                return idValue.Value;\n            }\n\n            if (destinationType == typeof(string))\n            {\n                return idValue.Value.ToString();\n            }\n        }\n\n        return base.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\n\nclass MonthIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MonthId>\n{\n    public override MonthId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)\n    {\n        return new MonthId(reader.GetInt32());\n    }\n\n    public override void Write(System.Text.Json.Utf8JsonWriter writer, MonthId value, System.Text.Json.JsonSerializerOptions options)\n    {\n        writer.WriteNumberValue(value.Value);\n    }\n}\n\n    }\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyDemo.YearId.g.cs",label:"StronglyDemo.YearId.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the Strongly source generator\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n#pragma warning disable 1591 // publicly visible type or member must be documented\n\nnamespace StronglyDemo\n{\n    [System.Text.Json.Serialization.JsonConverter(typeof(YearIdSystemTextJsonConverter))]\n    [System.ComponentModel.TypeConverter(typeof(YearIdTypeConverter))]\nreadonly partial struct YearId : System.IComparable<YearId>, System.IEquatable<YearId>\n{\n    public int Value { get; }\n\n    public YearId(int value)\n    {\n        Value = value;\n    }\n    \n    public static readonly YearId Empty = new YearId(0);\n\n    public bool Equals(YearId other) => this.Value.Equals(other.Value);\n    public override bool Equals(object obj)\n    {\n        if (ReferenceEquals(null, obj)) return false;\n        return obj is YearId other && Equals(other);\n    }\n    public override int GetHashCode() => Value.GetHashCode();\n    public override string ToString() => Value.ToString();\n    public static bool operator ==(YearId a, YearId b) => a.Equals(b);\n    public static bool operator !=(YearId a, YearId b) => !(a == b);\n    public static YearId Parse(string value) => new YearId(int.Parse(value));\n    public static bool TryParse(string value, out YearId result)\n    {\n        if (int.TryParse(value, out int parseResult))\n        {\n            result = new YearId(parseResult);\n            return true;\n        }\n        result = default;\n        return false;\n    }\npublic int CompareTo(YearId other) => Value.CompareTo(other.Value);\n\n\nclass YearIdTypeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)\n    {\n        return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);\n    }\n\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n    {\n        return value switch\n        {\n            int intValue => new YearId(intValue),\n            string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, out var result) => new YearId(result),\n            _ => base.ConvertFrom(context, culture, value),\n        };\n    }\n\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)\n    {\n        return sourceType == typeof(int) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);\n    }\n\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)\n    {\n        if (value is YearId idValue)\n        {\n            if (destinationType == typeof(int))\n            {\n                return idValue.Value;\n            }\n\n            if (destinationType == typeof(string))\n            {\n                return idValue.Value.ToString();\n            }\n        }\n\n        return base.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\n\nclass YearIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<YearId>\n{\n    public override YearId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)\n    {\n        return new YearId(reader.GetInt32());\n    }\n\n    public override void Write(System.Text.Json.Utf8JsonWriter writer, YearId value, System.Text.Json.JsonSerializerOptions options)\n    {\n        writer.WriteNumberValue(value.Value);\n    }\n}\n\n    }\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyImplementations.g.cs",label:"StronglyImplementations.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#if STRONGLY_TYPED_EMBED_ATTRIBUTES\n\nusing System;\n\nnamespace Strongly\n{\n    /// <summary>\n    /// Interfaces and patterns the strongly typed id should implement\n    /// </summary>\n    [Flags]\n    internal enum StronglyImplementations\n    {\n        // Used with HasFlag, so needs to be 1, 2, 4 etc\n\n        /// <summary>\n        /// Don\'t implement any additional members for the strongly typed ID\n        /// </summary>\n        None = 0,\n\n        /// <summary>\n        /// Use the default implementations for the strongly typed Id.\n        /// This will be the value provided in the <see cref="StronglyDefaultsAttribute"/>, which falls back to\n        /// <see cref="IEquatable"/> and <see cref="IComparable"/>\n        /// </summary>\n        Default = 1,\n\n        // ReSharper disable once InconsistentNaming\n        /// <summary>\n        /// Implement the <see cref="IEquatable{T}"/> interface\n        /// </summary>\n        IEquatable = 2,\n\n        // ReSharper disable once InconsistentNaming\n        /// <summary>\n        /// Implement the <see cref="IComparable{T}"/> interface\n        /// </summary>\n        IComparable = 4,\n    }\n}\n#endif\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Strongly\\src\\StronglyDemo\\obj\\GX\\Strongly\\Strongly.StronglyGenerator\\StronglyType.g.cs",label:"StronglyType.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#if STRONGLY_TYPED_EMBED_ATTRIBUTES\n\nusing System;\n\nnamespace Strongly\n{\n    /// <summary>\n    /// The <see cref="Type"/> to use to store the value of a strongly-typed ID\n    /// </summary>\n    internal enum StronglyType\n    {\n        /// <summary>\n        /// Use the default backing type (either the globally configured default, or Sequential Guid)\n        /// </summary>\n        Default = 0,\n        Guid,\n        SequentialGuid,\n        GuidComb,\n        Int,\n        String,\n        Long,\n        NullableString,\n        MassTransitNewId,\n        BigInteger,\n        Decimal,\n    }\n}\n#endif\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(49860).A+"",children:"Download Example project Strongly "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-strongly",children:"Share Strongly"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStrongly&quote=Strongly",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStrongly&text=Strongly:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStrongly",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStrongly&title=Strongly",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStrongly&title=Strongly&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStrongly",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Strongly",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Strongly"})}),"\n",(0,s.jsx)(n.h3,{id:"in-the-same-category-primitiveobsession---4-other-generators",children:"In the same category (PrimitiveObsession) - 4 other generators"}),"\n",(0,s.jsx)(n.h4,{id:"domainprimitives",children:(0,s.jsx)(n.a,{href:"/docs/DomainPrimitives",children:"DomainPrimitives"})}),"\n",(0,s.jsx)(n.h4,{id:"stronglytypeduid",children:(0,s.jsx)(n.a,{href:"/docs/StronglyTypedUid",children:"StronglyTypedUid"})}),"\n",(0,s.jsx)(n.h4,{id:"unitgenerator",children:(0,s.jsx)(n.a,{href:"/docs/UnitGenerator",children:"UnitGenerator"})}),"\n",(0,s.jsx)(n.h4,{id:"vogen",children:(0,s.jsx)(n.a,{href:"/docs/Vogen",children:"Vogen"})})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},49860:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/Strongly-cdc36e67b534a80fbc68bb74290356a6.zip"}}]);