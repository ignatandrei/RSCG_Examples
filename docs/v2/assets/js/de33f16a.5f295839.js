"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9468],{7881:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/RSCG_WebAPIExports-1763fa005e491940715154d969c7f90e.zip"},85008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>p,metadata:()=>r,toc:()=>x});const r=JSON.parse('{"id":"RSCG-Examples/RSCG_WebAPIExports","title":"53 - RSCG_WebAPIExports","description":"Generating Excel from WebAPI json array","source":"@site/docs/RSCG-Examples/RSCG_WebAPIExports.md","sourceDirName":"RSCG-Examples","slug":"/RSCG_WebAPIExports","permalink":"/RSCG_Examples/v2/docs/RSCG_WebAPIExports","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/RSCG_WebAPIExports.md","tags":[],"version":"current","sidebarPosition":530,"frontMatter":{"sidebar_position":530,"title":"53 - RSCG_WebAPIExports","description":"Generating Excel from WebAPI json array","slug":"/RSCG_WebAPIExports"},"sidebar":"tutorialSidebar","previous":{"title":"52 - Gobie","permalink":"/RSCG_Examples/v2/docs/Gobie"},"next":{"title":"54 - AutoDTO","permalink":"/RSCG_Examples/v2/docs/AutoDTO"}}');var s=t(74848),i=t(28453),o=t(11470),a=t(19365),l=t(14252);const p={sidebar_position:530,title:"53 - RSCG_WebAPIExports",description:"Generating Excel from WebAPI json array",slug:"/RSCG_WebAPIExports"},d="RSCG_WebAPIExports  by Andrei Ignat",c={},x=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"How to use in WebAPI project",id:"how-to-use-in-webapi-project",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share RSCG_WebAPIExports",id:"share-rscg_webapiexports",level:3},{value:"In the same category (API) - 9 other generators",id:"in-the-same-category-api---9-other-generators",level:3},{value:"immediate.apis",id:"immediateapis",level:4},{value:"Microsoft.Extensions.Configuration.Binder",id:"microsoftextensionsconfigurationbinder",level:4},{value:"MinimalApiBuilder",id:"minimalapibuilder",level:4},{value:"MinimalApis.Discovery",id:"minimalapisdiscovery",level:4},{value:"MinimalHelpers.Routing.Analyzers",id:"minimalhelpersroutinganalyzers",level:4},{value:"RDG",id:"rdg",level:4},{value:"Refit",id:"refit",level:4},{value:"SafeRouting",id:"saferouting",level:4},{value:"SkinnyControllersCommon",id:"skinnycontrollerscommon",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rscg_webapiexports--by-andrei-ignat",children:"RSCG_WebAPIExports  by Andrei Ignat"})}),"\n",(0,s.jsx)(l.A,{toc:x}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/RSCG_WebAPIExports/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/RSCG_WebAPIExports?label=RSCG_WebAPIExports",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/ignatandrei/RSCG_WebAPIExports/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/ignatandrei/RSCG_WebAPIExports?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/ignatandrei/RSCG_WebAPIExports?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"RSCG_WebAPIExports"})]}),(0,s.jsx)(n.p,{children:"Add Excel export to your WebAPI"}),(0,s.jsx)(n.p,{children:"Author: Andrei Ignat"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/RSCG_WebAPIExports/",children:"https://www.nuget.org/packages/RSCG_WebAPIExports/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/ignatandrei/RSCG_WebAPIExports/",children:"https://github.com/ignatandrei/RSCG_WebAPIExports/"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/ignatandrei/RSCG_WebAPIExports/",children:"https://github.com/ignatandrei/RSCG_WebAPIExports/"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/RSCG_WebAPIExports/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/v/RSCG_WebAPIExports?label=RSCG_WebAPIExports",alt:"RSCG_WebAPIExports"})})}),(0,s.jsx)(n.h1,{id:"rscg_webapiexports",children:"RSCG_WebAPIExports"}),(0,s.jsx)(n.p,{children:"Add exports to file to WebAPI ( for the moment, just Excel / xlsx)"}),(0,s.jsx)(n.h2,{id:"how-to-use-in-webapi-project",children:"How to use in WebAPI project"}),(0,s.jsx)(n.p,{children:"Add reference to the package in the .csproj"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="RSCG_WebAPIExports" Version="2023.8.16.1255" OutputItemType="Analyzer" ReferenceOutputAssembly="true"  />\n\x3c!--\n<PackageReference Include="RSCG_WebAPIExports" Version="2023.8.16.1255" OutputItemType="Analyzer" ReferenceOutputAssembly="true"  />\n<PackageReference Include="ArrayToExcel" Version="2.2.2" />\n--\x3e\n'})}),(0,s.jsx)(n.p,{children:"Then in the WebAPI add"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using WebApiExportToFile;\n//code\n// Add services to the container.\n//WebApiExportToFile.AddExport(builder.Services);\nbuilder.Services.AddExport();\nvar app = builder.Build();\napp.UseExport();\n\n"})}),(0,s.jsx)(n.p,{children:"Add to any url : .xlsx ( e.g. for /WeatherForecast put /WeatherForecast.xlsx ) and the excel will be"}),(0,s.jsx)(n.p,{children:"downloaded"})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Generating Excel from WebAPI json array"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"RSCG_WebAPIExports"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {12}",children:'<Project Sdk="Microsoft.NET.Sdk.Web">\n\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.10" />\n    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />\n\t<PackageReference Include="RSCG_WebAPIExports" Version="2023.8.16.1255" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />\n\t<PackageReference Include="ArrayToExcel" Version="2.2.2" />\n\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t\n</Project>\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"RSCG_WebAPIExports"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using RSCG_WebAPIExportsDemo;\nusing WebApiExportToFile;\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddExport();\nvar app = builder.Build();\napp.UseExport();\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(ct =>\n    {\n        ct.DocumentTitle = "try /WeatherForecast.xlsx";\n        ct.HeadContent = "try /WeatherForecast.xlsx";\n    });\n}\n\n//app.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\Controllers\\WeatherForecastController.cs",label:"WeatherForecastController.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"RSCG_WebAPIExports"})," in ",(0,s.jsx)(n.em,{children:"WeatherForecastController.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Microsoft.AspNetCore.Mvc;\n\nnamespace RSCG_WebAPIExportsDemo.Controllers\n{\n    [ApiController]\n    [Route("[controller]")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n    };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = "GetWeatherForecast")]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}\n'})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\obj\\GX\\RSCG_APIExport\\RSCG_APIExport.GenerateExportForWebAPI\\Extensions.g.cs",label:"Extensions.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Microsoft.AspNetCore.Rewrite;\nnamespace WebApiExportToFile;\n#nullable enable\npublic static partial class Extensions\n{\n    static partial  void AddReturnTypesFromGenerator();\n    public static IServiceCollection AddExport(this IServiceCollection services, params Type[]? typesReturnedByActions)\n    {\n        AddReturnTypesFromGenerator();\n        //MiddlewareExportToFile.AddReturnType(typeof(Person[]));\n        //MiddlewareExportToFile.AddReturnType(typeof(WeatherForecast[]));\n        MiddlewareExportToFile.AddReturnTypes(typesReturnedByActions);\n\n        return services.AddSingleton<MiddlewareExportToFile>();\n    }\n    public static IApplicationBuilder UseExport(this IApplicationBuilder app)\n    {\n        app.UseMiddleware<MiddlewareExportToFile>();\n        var options = new RewriteOptions().Add(MiddlewareExportToFile.RewriteExtNeeded);\n        app.UseRewriter(options);\n        return app;\n    }\n}\n\n#nullable disable\n"})})}),(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\obj\\GX\\RSCG_APIExport\\RSCG_APIExport.GenerateExportForWebAPI\\middlewareExport.methods.g.cs",label:"middlewareExport.methods.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace WebApiExportToFile;\n\npublic static partial class Extensions\n{\n   static partial  void AddReturnTypesFromGenerator(){\n       MiddlewareExportToFile.AddReturnType(typeof(RSCG_WebAPIExportsDemo.WeatherForecast[])); \n   }\n}\n"})})}),(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RSCG_WebAPIExports\\src\\RSCG_WebAPIExportsDemo\\obj\\GX\\RSCG_APIExport\\RSCG_APIExport.GenerateExportForWebAPI\\MiddlewareExportToFile.g.cs",label:"MiddlewareExportToFile.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System.IO;\nusing System.Text;\nusing System;\nusing Microsoft.AspNetCore.Rewrite;\nusing System.Text.Json;\nusing ArrayToExcel;\nusing System.Text.Json.Serialization.Metadata;\nusing System.Runtime.CompilerServices;\n#nullable enable\nnamespace WebApiExportToFile;\npublic class MiddlewareExportToFile : IMiddleware\n{\n    private static List<Type> types = new(); \n    static readonly string[] Extensions = new string[1] { ".xlsx" };\n    static string key = "Export";\n    public static void AddReturnTypes(params Type[]? typesReturnedByActions)\n    {\n        if (typesReturnedByActions?.Length > 0)\n        {\n            foreach (var type in typesReturnedByActions)\n            {\n                AddReturnType(type);\n            }\n        }\n    }\n    public static void AddReturnType(Type type)\n    {\n        types.Add(type);\n    }\n    public static void RewriteExtNeeded(RewriteContext context)\n    {\n        var request = context.HttpContext.Request;\n        if (!(context.HttpContext.Items.ContainsKey(key) && context.HttpContext.Items[key]?.ToString() == "1"))\n        {\n            return;\n        }\n        var ext = Path.GetExtension(request.Path.Value);\n        if (string.IsNullOrWhiteSpace(ext)) return;\n        request.Path = request.Path.Value!.Substring(0, request.Path.Value.Length - ext.Length);\n\n    }\n    public bool ShouldIntercept(HttpContext context)\n    {\n        string path = context.Request.Path;\n        var ext = Path.GetExtension(path);\n        if (string.IsNullOrWhiteSpace(ext)) return false;\n        if (!Extensions.Contains(ext, StringComparer.OrdinalIgnoreCase)) return false;\n        return true;\n    }\n    //https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/migrate-from-newtonsoft\n    static void AddMissingMemberHandling(JsonTypeInfo typeInfo)\n    {\n        if (typeInfo.Kind == JsonTypeInfoKind.Object &&\n            typeInfo.Properties.All(prop => !prop.IsExtensionData) &&\n            typeInfo.OnDeserialized is null)\n        {\n            // Dynamically attach dictionaries to deserialized objects.\n            var cwt = new ConditionalWeakTable<object, Dictionary<string, object>>();\n\n            JsonPropertyInfo propertyInfo =\n                typeInfo.CreateJsonPropertyInfo(typeof(Dictionary<string, object>), "__extensionDataAttribute");\n            propertyInfo.Get = obj => cwt.TryGetValue(obj, out Dictionary<string, object>? value) ? value : null;\n            propertyInfo.Set = (obj, value) => cwt.Add(obj, (Dictionary<string, object>)value!);\n            propertyInfo.IsExtensionData = true;\n            typeInfo.Properties.Add(propertyInfo);\n            typeInfo.OnDeserialized = obj =>\n            {\n                if (cwt.TryGetValue(obj, out Dictionary<string, object>? dict))\n                {\n                    cwt.Remove(obj);\n                    throw new JsonException($"JSON properties {String.Join(", ", dict.Keys)} " +\n                        $"could not bind to any members of type {typeInfo.Type}");\n                }\n            };\n        }\n    }\n    public object[]? StrongDeserialize(string responseContent)\n    {\n        if(types.Count() == 0) throw new Exception("please add some types");\n        foreach( var type in types)\n        {\n            try\n            {\n                var data = JsonSerializer.Deserialize(responseContent, type, new JsonSerializerOptions\n                {\n                    PropertyNameCaseInsensitive = true,\n                    TypeInfoResolver = new DefaultJsonTypeInfoResolver\n                    {\n                        Modifiers = { AddMissingMemberHandling }\n                    }\n                }) as object[];\n                return data;\n            }\n            catch(JsonException)\n            {\n                //do nothing \n                \n            }\n            \n        }\n        throw new Exception("no type can deserialize " +responseContent);\n\n    }\n    public async Task InvokeAsync(HttpContext context, RequestDelegate next)\n    {\n        if (!ShouldIntercept(context))\n        {\n            await next(context);\n            return;\n        }\n        var ext=Path.GetExtension(context.Request.Path.Value);\n        var nameFile = context.Request.Path.Value?.Replace("/", "_");\n        context.Items["Export"] = "1";\n        var originalResponseBody = context.Response.Body;\n        using var memoryStream = new MemoryStream();\n        context.Response.Body = memoryStream;\n        context.Response.Headers.Add("Content-Disposition", $"attachment; filename={nameFile}");\n        await next(context);\n        memoryStream.Seek(0, SeekOrigin.Begin);\n        var responseContent = await new StreamReader(memoryStream).ReadToEndAsync();\n        context.Response.Body = originalResponseBody;\n\n        var data = StrongDeserialize(responseContent);\n        ArgumentNullException.ThrowIfNull(data);\n        using var excelStream = data.ToExcelStream();\n        await excelStream.CopyToAsync(context.Response.Body);\n\n        // No need to call the next middleware since the generated content has been sent\n        return;\n    }\n    \n}    \n\n#nullable disable\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(7881).A+"",children:"Download Example project RSCG_WebAPIExports "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-rscg_webapiexports",children:"Share RSCG_WebAPIExports"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&quote=RSCG_WebAPIExports",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&text=RSCG_WebAPIExports:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&title=RSCG_WebAPIExports",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports&title=RSCG_WebAPIExports&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRSCG_WebAPIExports",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_WebAPIExports",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/RSCG_WebAPIExports"})}),"\n",(0,s.jsx)(n.h3,{id:"in-the-same-category-api---9-other-generators",children:"In the same category (API) - 9 other generators"}),"\n",(0,s.jsx)(n.h4,{id:"immediateapis",children:(0,s.jsx)(n.a,{href:"/docs/immediate.apis",children:"immediate.apis"})}),"\n",(0,s.jsx)(n.h4,{id:"microsoftextensionsconfigurationbinder",children:(0,s.jsx)(n.a,{href:"/docs/Microsoft.Extensions.Configuration.Binder",children:"Microsoft.Extensions.Configuration.Binder"})}),"\n",(0,s.jsx)(n.h4,{id:"minimalapibuilder",children:(0,s.jsx)(n.a,{href:"/docs/MinimalApiBuilder",children:"MinimalApiBuilder"})}),"\n",(0,s.jsx)(n.h4,{id:"minimalapisdiscovery",children:(0,s.jsx)(n.a,{href:"/docs/MinimalApis.Discovery",children:"MinimalApis.Discovery"})}),"\n",(0,s.jsx)(n.h4,{id:"minimalhelpersroutinganalyzers",children:(0,s.jsx)(n.a,{href:"/docs/MinimalHelpers.Routing.Analyzers",children:"MinimalHelpers.Routing.Analyzers"})}),"\n",(0,s.jsx)(n.h4,{id:"rdg",children:(0,s.jsx)(n.a,{href:"/docs/RDG",children:"RDG"})}),"\n",(0,s.jsx)(n.h4,{id:"refit",children:(0,s.jsx)(n.a,{href:"/docs/Refit",children:"Refit"})}),"\n",(0,s.jsx)(n.h4,{id:"saferouting",children:(0,s.jsx)(n.a,{href:"/docs/SafeRouting",children:"SafeRouting"})}),"\n",(0,s.jsx)(n.h4,{id:"skinnycontrollerscommon",children:(0,s.jsx)(n.a,{href:"/docs/SkinnyControllersCommon",children:"SkinnyControllersCommon"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);