"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4879],{38965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=n(73992),o=n(18679),s=n(68839);const l={sidebar_position:510,title:"51 - OneOf",description:"Functional discriminated unions",slug:"/OneOf"},m="OneOf  by Harry McIntyre",p={unversionedId:"RSCG-Examples/OneOf",id:"RSCG-Examples/OneOf",title:"51 - OneOf",description:"Functional discriminated unions",source:"@site/docs/RSCG-Examples/OneOf.md",sourceDirName:"RSCG-Examples",slug:"/OneOf",permalink:"/RSCG_Examples/v2/docs/OneOf",draft:!1,tags:[],version:"current",sidebarPosition:510,frontMatter:{sidebar_position:510,title:"51 - OneOf",description:"Functional discriminated unions",slug:"/OneOf"},sidebar:"tutorialSidebar",previous:{title:"50 - Ridge",permalink:"/RSCG_Examples/v2/docs/Ridge"},next:{title:"52 - Gobie",permalink:"/RSCG_Examples/v2/docs/Gobie"}},u={},c=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share OneOf",id:"share-oneof",level:3},{value:"In the same category (FunctionalProgramming)",id:"in-the-same-category-functionalprogramming",level:2},{value:"cachesourcegenerator",id:"cachesourcegenerator",level:3},{value:"dunet",id:"dunet",level:3},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:3},{value:"FunicularSwitch",id:"funicularswitch",level:3},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:3},{value:"PartiallyApplied",id:"partiallyapplied",level:3},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:3},{value:"UnionsGenerator",id:"unionsgenerator",level:3}],d={toc:c},h="wrapper";function g(e){let{components:t,...l}=e;return(0,r.kt)(h,(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"oneof--by-harry-mcintyre"},"OneOf  by Harry McIntyre"),(0,r.kt)(s.Z,{toc:c,mdxType:"TOCInline"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/OneOf.SourceGenerator"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/OneOf.SourceGenerator?label=OneOf.SourceGenerator",alt:"Nuget"})),(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/OneOf/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/OneOf?label=OneOf",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcintyre321/OneOf"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/mcintyre321/OneOf?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/mcintyre321/OneOf?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"OneOf")),(0,r.kt)("p",{parentName:"admonition"},"This source generator automaticly implements OneOfBase hierarchies"),(0,r.kt)("p",{parentName:"admonition"},"Author: Harry McIntyre"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/OneOf.SourceGenerator"},"https://www.nuget.org/packages/OneOf.SourceGenerator")),"   "),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/OneOf/"},"https://www.nuget.org/packages/OneOf/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcintyre321/OneOf"},"https://github.com/mcintyre321/OneOf")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcintyre321/OneOf"},"https://github.com/mcintyre321/OneOf"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"oneof-nuget"},"OneOf ",(0,r.kt)("a",{parentName:"h1",href:"https://www.nuget.org/packages/OneOf/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/OneOf?logo=nuget",alt:"NuGet"}))),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},'"Ah! It\'s like a compile time checked switch statement!" - Mike Giorgaras')),(0,r.kt)("h2",{parentName:"admonition",id:"getting-started"},"Getting Started"),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"install-package OneOf"))),(0,r.kt)("p",{parentName:"admonition"},"This library provides F# style ~discriminated~ unions for C#, using a custom type ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOf<T0, ... Tn>"),". An instance of this type holds a single value, which is one of the types in its generic argument list."),(0,r.kt)("p",{parentName:"admonition"},"I can't encourage you enough to give it a try! Due to exhaustive matching DUs provide an alternative to polymorphism when you want to have a method with guaranteed behaviour-per-type (i.e. adding an abstract method on a base type, and then implementing that method in each type). It's a really powerful tool, ask any f#/Scala dev! :)"),(0,r.kt)("p",{parentName:"admonition"},"PS If you like OneOf, you might want to check out ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcintyre321/valueof"},"ValueOf"),", for one-line Value Object Type definitions."),(0,r.kt)("h2",{parentName:"admonition",id:"use-cases"},"Use cases"),(0,r.kt)("h3",{parentName:"admonition",id:"as-a-method-return-value"},"As a method return value"),(0,r.kt)("p",{parentName:"admonition"},"The most frequent use case is as a return value, when you need to return different results from a method. Here's how you might use it in an MVC controller action:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public OneOf<User, InvalidName, NameTaken> CreateUser(string username)\n{\n    if (!IsValid(username)) return new InvalidName();\n    var user = _repo.FindByUsername(username);\n    if(user != null) return new NameTaken();\n    var user = new User(username);\n    _repo.Save(user);\n    return user;\n}\n\n[HttpPost]\npublic IActionResult Register(string username)\n{\n    OneOf<User, InvalidName, NameTaken> createUserResult = CreateUser(username);\n    return createUserResult.Match(\n        user => new RedirectResult("/dashboard"),\n        invalidName => {\n            ModelState.AddModelError(nameof(username), $"Sorry, that is not a valid username.");\n            return View("Register");\n        },\n        nameTaken => {\n            ModelState.AddModelError(nameof(username), "Sorry, that name is already in use.");\n            return View("Register");\n        }\n    );\n}\n')),(0,r.kt)("h4",{parentName:"admonition",id:"as-an-option-type"},"As an 'Option' Type"),(0,r.kt)("p",{parentName:"admonition"},"It's simple to use OneOf as an ",(0,r.kt)("inlineCode",{parentName:"p"},"Option")," type - just declare a ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOf<Something, None>"),". OneOf comes with a variety of useful Types in the ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOf.Types")," namespace, including  ",(0,r.kt)("inlineCode",{parentName:"p"},"Yes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"No"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Unknown"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"All"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Some"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,r.kt)("h4",{parentName:"admonition",id:"benefits"},"Benefits"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"True strongly typed method signature",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"No need to return a custom result base type e.g ",(0,r.kt)("inlineCode",{parentName:"li"},"IActionResult"),", or even worse, a non-descriptive type (e.g. object)"),(0,r.kt)("li",{parentName:"ul"},"The method signature accurately describes all the potential outcomes, making it easier for consumers to understand the code"),(0,r.kt)("li",{parentName:"ul"},"Method consumer HAS to handle all cases (see 'Matching', below)"))),(0,r.kt)("li",{parentName:"ul"},"You can avoid using ",(0,r.kt)("a",{parentName:"li",href:"http://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why"},'"Exceptions for control flow"')," antipattern by returning custom Typed error objects")),(0,r.kt)("h3",{parentName:"admonition",id:"as-a-method-parameter-value"},"As a method parameter value"),(0,r.kt)("p",{parentName:"admonition"},"You can use also use ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOf")," as a parameter type, allowing a caller to pass different types without requiring additional overloads. This might not seem that useful for a single parameter, but if you have multiple parameters, the number of overloads required increases rapidly."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void SetBackground(OneOf<string, ColorName, Color> backgroundColor) { ... }\n\n//The method above can be called with either a string, a ColorName enum value or a Color instance.\n")),(0,r.kt)("h2",{parentName:"admonition",id:"matching"},"Matching"),(0,r.kt)("p",{parentName:"admonition"},"You use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TOut Match(Func<T0, TOut> f0, ... Func<Tn,TOut> fn)")," method to get a value out. Note how the number of handlers matches the number of generic arguments."),(0,r.kt)("h3",{parentName:"admonition",id:"advantages-over-switch-or-if-or-exception-based-control-flow"},"Advantages over ",(0,r.kt)("inlineCode",{parentName:"h3"},"switch")," or ",(0,r.kt)("inlineCode",{parentName:"h3"},"if")," or ",(0,r.kt)("inlineCode",{parentName:"h3"},"exception")," based control flow:"),(0,r.kt)("p",{parentName:"admonition"},"This has a major advantage over a switch statement, as it"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"requires every parameter to be handled")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"No fallback - if you add another generic parameter, you HAVE to update all the calling code to handle your changes."),(0,r.kt)("p",{parentName:"li"},"  In brown-field code-bases this is incredibly useful, as the default handler is often a runtime ",(0,r.kt)("inlineCode",{parentName:"p"},"throw NotImplementedException"),", or behaviour that wouldn't suit the new result type."))),(0,r.kt)("p",{parentName:"admonition"},"E.g."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"OneOf<string, ColorName, Color> backgroundColor = ...;\nColor c = backgroundColor.Match(\n    str => CssHelper.GetColorFromString(str),\n    name => new Color(name),\n    col => col\n);\n_window.BackgroundColor = c;\n")),(0,r.kt)("p",{parentName:"admonition"},"There is also a .Switch method, for when you aren't returning a value:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"OneOf<string, DateTime> dateValue = ...;\ndateValue.Switch(\n    str => AddEntry(DateTime.Parse(str), foo),\n    int => AddEntry(int, foo)\n);\n")),(0,r.kt)("h3",{parentName:"admonition",id:"trypick\ud835\udc65-method"},"TryPick\ud835\udc65 method"),(0,r.kt)("p",{parentName:"admonition"},"As an alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},".Switch")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".Match")," you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},".TryPick\ud835\udc65")," methods."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"//TryPick\ud835\udc65 methods for OneOf<T0, T1, T2>\npublic bool TryPickT0(out T0 value, out OneOf<T1, T2> remainder) { ... }\npublic bool TryPickT1(out T1 value, out OneOf<T0, T2> remainder) { ... }\npublic bool TryPickT2(out T2 value, out OneOf<T0, T1> remainder) { ... }\n")),(0,r.kt)("p",{parentName:"admonition"},"The return value indicates if the OneOf contains a T\ud835\udc65 or not. If so, then ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," will be set to the inner value from the OneOf. If not, then the remainder will be a OneOf of the remaining generic types. You can use them like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IActionResult Get(string id)\n{\n    OneOf<Thing, NotFound, Error> thingOrNotFoundOrError = GetThingFromDb(string id);\n\n    if (thingOrNotFoundOrError.TryPickT1(out NotFound notFound, out var thingOrError)) //thingOrError is a OneOf<Thing, Error>\n      return StatusCode(404);\n\n    if (thingOrError.TryPickT1(out var error, out var thing)) //note that thing is a Thing rather than a OneOf<Thing>\n    {\n      _logger.LogError(error.Message);\n      return StatusCode(500);\n    }\n\n    return Ok(thing);\n}\n")),(0,r.kt)("h3",{parentName:"admonition",id:"reusable-oneof-types-using-oneofbase"},"Reusable OneOf Types using OneOfBase"),(0,r.kt)("p",{parentName:"admonition"},"You can declare a OneOf as a type, either for reuse of the type, or to provide additional members, by inheriting from ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOfBase"),". The derived class will inherit the ",(0,r.kt)("inlineCode",{parentName:"p"},".Match"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".Switch"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},".TryPick\ud835\udc65")," methods."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class StringOrNumber : OneOfBase<string, int>\n{\n    StringOrNumber(OneOf<string, int> _) : base(_) { }\n\n    // optionally, define implicit conversions\n    // you could also make the constructor public\n    public static implicit operator StringOrNumber(string _) => new StringOrNumber(_);\n    public static implicit operator StringOrNumber(int _) => new StringOrNumber(_);\n\n    public (bool isNumber, int number) TryGetNumber() =>\n        Match(\n            s => (int.TryParse(s, out var n), n),\n            i => (true, i)\n        );\n}\n\nStringOrNumber x = 5;\nConsole.WriteLine(x.TryGetNumber().number);\n// prints 5\n\nx = "5";\nConsole.WriteLine(x.TryGetNumber().number);\n// prints 5\n\nx = "abcd";\nConsole.WriteLine(x.TryGetNumber().isNumber);\n// prints False\n')),(0,r.kt)("h3",{parentName:"admonition",id:"oneofbase-source-generation"},"OneOfBase Source Generation"),(0,r.kt)("p",{parentName:"admonition"},"You can automatically generate ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOfBase")," hierarchies using ",(0,r.kt)("inlineCode",{parentName:"p"},"GenerateOneOfAttribute")," and partial class that extends ",(0,r.kt)("inlineCode",{parentName:"p"},"OneOfBase")," using\na Source Generator (thanks to @romfir for the contribution :D). Install it via"),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"Install-Package OneOf.SourceGenerator")),(0,r.kt)("p",{parentName:"admonition"},"and then define a stub like so:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[GenerateOneOf]\npublic partial class StringOrNumber : OneOfBase<string, int> { }\n")),(0,r.kt)("p",{parentName:"admonition"},"During compilation the source generator will produce a class implementing the OneOfBase boiler plate code for you. e.g."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public partial class StringOrNumber\n{\n    public StringOrNumber(OneOf.OneOf<System.String, System.Int32> _) : base(_) { }\n\n    public static implicit operator StringOrNumber(System.String _) => new StringOrNumber(_);\n    public static explicit operator System.String(StringOrNumber _) => _.AsT0;\n\n    public static implicit operator StringOrNumber(System.Int32 _) => new StringOrNumber(_);\n    public static explicit operator System.Int32(StringOrNumber _) => _.AsT1;\n}\n"))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Functional discriminated unions")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"OneOf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {12}",showLineNumbers:!0,"{12}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="OneOf" Version="3.0.255" />\n    <PackageReference Include="OneOf.SourceGenerator" Version="3.0.255" />\n  </ItemGroup>\n <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OneOf\\src\\OneOfDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"OneOf")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using OneOfDemo;\n\nConsole.WriteLine("Please enter data - string or number");\n\nvar data= Console.ReadLine();\n//you can experiment with\nStringOrNumber nr1 = 5;\nvar nr = new StringOrNumber(data);\nvar dataNumber = nr.TryGetNumber();\nConsole.WriteLine($"{dataNumber.isNumber} {dataNumber.number}");\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OneOf\\src\\OneOfDemo\\StringOrNumber.cs",label:"StringOrNumber.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"OneOf")," in ",(0,r.kt)("em",{parentName:"p"},"StringOrNumber.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using OneOf;\nnamespace OneOfDemo;\n\n[GenerateOneOf]\npublic partial class StringOrNumber : OneOfBase<string, int> {\n    public (bool isNumber, int number) TryGetNumber() =>\n           Match( //this match function is auto generated\n               s => (int.TryParse(s, out var n), n),\n               i => (true, i)\n           );\n}\n\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OneOf\\src\\OneOfDemo\\obj\\GX\\OneOf.SourceGenerator\\OneOf.SourceGenerator.OneOfGenerator\\GenerateOneOfAttribute.g.cs",label:"GenerateOneOfAttribute.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\nusing System;\n\n#pragma warning disable 1591\n\nnamespace OneOf\n{\n    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\n    internal sealed class GenerateOneOfAttribute : Attribute\n    {\n    }\n}\n\n"))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OneOf\\src\\OneOfDemo\\obj\\GX\\OneOf.SourceGenerator\\OneOf.SourceGenerator.OneOfGenerator\\OneOfDemo_StringOrNumber.g.cs",label:"OneOfDemo_StringOrNumber.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\n#pragma warning disable 1591\n\nnamespace OneOfDemo\n{\n    partial class StringOrNumber\n    {\n        public StringOrNumber(OneOf.OneOf<string, int> _) : base(_) { }\n\n        public static implicit operator StringOrNumber(string _) => new StringOrNumber(_);\n        public static explicit operator string(StringOrNumber _) => _.AsT0;\n\n        public static implicit operator StringOrNumber(int _) => new StringOrNumber(_);\n        public static explicit operator int(StringOrNumber _) => _.AsT1;\n    }\n}\n")))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:n(46576).Z},"Download Example project OneOf "))),(0,r.kt)("h3",{id:"share-oneof"},"Share OneOf"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOneOf&quote=OneOf",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOneOf&text=OneOf:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOneOf",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOneOf&title=OneOf",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOneOf&title=OneOf&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOneOf",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/OneOf"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/OneOf")),(0,r.kt)("h2",{id:"in-the-same-category-functionalprogramming"},"In the same category (FunctionalProgramming)"),(0,r.kt)("h3",{id:"cachesourcegenerator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/cachesourcegenerator"},"cachesourcegenerator")),(0,r.kt)("h3",{id:"dunet"},(0,r.kt)("a",{parentName:"h3",href:"/docs/dunet"},"dunet")),(0,r.kt)("h3",{id:"funckydiscriminatedunion"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Funcky.DiscriminatedUnion"},"Funcky.DiscriminatedUnion")),(0,r.kt)("h3",{id:"funicularswitch"},(0,r.kt)("a",{parentName:"h3",href:"/docs/FunicularSwitch"},"FunicularSwitch")),(0,r.kt)("h3",{id:"nsourcegeneratorsuniontypes"},(0,r.kt)("a",{parentName:"h3",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,r.kt)("h3",{id:"partiallyapplied"},(0,r.kt)("a",{parentName:"h3",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,r.kt)("h3",{id:"rscg_utils_memo"},(0,r.kt)("a",{parentName:"h3",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")),(0,r.kt)("h3",{id:"unionsgenerator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/UnionsGenerator"},"UnionsGenerator")))}g.isMDXComponent=!0},46576:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/OneOf-ce5eb665e0c6eed71067e7074691e3b3.zip"}}]);