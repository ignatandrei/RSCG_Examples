"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6379],{8616:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>m,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var n=t(7462),r=(t(7294),t(4137)),l=t(3992),i=t(425),s=t(8839);const o={sidebar_position:170,title:"17 - RazorBlade",description:"Fast templating with Razor syntax",slug:"/RazorBlade"},m="RazorBlade  by Lucas Trzesniewski",p={unversionedId:"RSCG-Examples/RazorBlade",id:"RSCG-Examples/RazorBlade",title:"17 - RazorBlade",description:"Fast templating with Razor syntax",source:"@site/docs/RSCG-Examples/RazorBlade.md",sourceDirName:"RSCG-Examples",slug:"/RazorBlade",permalink:"/RSCG_Examples/v2/docs/RazorBlade",draft:!1,tags:[],version:"current",sidebarPosition:170,frontMatter:{sidebar_position:170,title:"17 - RazorBlade",description:"Fast templating with Razor syntax",slug:"/RazorBlade"},sidebar:"tutorialSidebar",previous:{title:"16 - Vogen",permalink:"/RSCG_Examples/v2/docs/Vogen"},next:{title:"18 - PartiallyApplied",permalink:"/RSCG_Examples/v2/docs/PartiallyApplied"}},d={},u=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Download PDF",id:"download-pdf",level:3},{value:"Share RazorBlade",id:"share-razorblade",level:3}],c={toc:u},h="wrapper";function g(e){let{components:a,...o}=e;return(0,r.kt)(h,(0,n.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"razorblade--by-lucas-trzesniewski"},"RazorBlade  by Lucas Trzesniewski"),(0,r.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/RazorBlade/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/RazorBlade?label=RazorBlade",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ltrzesniewski/RazorBlade"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/ltrzesniewski/RazorBlade?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/ltrzesniewski/RazorBlade?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"RazorBlade")),(0,r.kt)("p",{parentName:"admonition"},"Compile Razor templates at build-time without a dependency on ASP.NET."),(0,r.kt)("p",{parentName:"admonition"},"Author: Lucas Trzesniewski"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/RazorBlade/"},"https://www.nuget.org/packages/RazorBlade/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ltrzesniewski/RazorBlade"},"https://github.com/ltrzesniewski/RazorBlade")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ltrzesniewski/RazorBlade"},"https://github.com/ltrzesniewski/RazorBlade"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"razorblade"},"RazorBlade"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/ltrzesniewski/RazorBlade/actions?query=workflow%3ABuild"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/ltrzesniewski/RazorBlade/workflows/Build/badge.svg",alt:"Build"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/RazorBlade"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/RazorBlade.svg?logo=NuGet",alt:"NuGet package"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ltrzesniewski/RazorBlade/releases"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/release/ltrzesniewski/RazorBlade.svg?logo=GitHub",alt:"GitHub release"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ltrzesniewski/RazorBlade/blob/master/LICENSE"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/license-MIT-blue.svg",alt:"License"}))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"The sharpest part of the razor.")),(0,r.kt)("p",{parentName:"admonition"},"Compile Razor templates at build-time without a dependency on ASP.NET."),(0,r.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,r.kt)("p",{parentName:"admonition"},"This package will generate a template class for every ",(0,r.kt)("inlineCode",{parentName:"p"},".cshtml")," file in your project."),(0,r.kt)("p",{parentName:"admonition"},"The generated classes will inherit from ",(0,r.kt)("inlineCode",{parentName:"p"},"RazorBlade.HtmlTemplate")," by default, though it is advised to specify the base class explicitly to get the best IDE experience:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-Razor"},"@inherits RazorBlade.HtmlTemplate\n")),(0,r.kt)("p",{parentName:"admonition"},"A version with a model is also available for convenience. The following will add a ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," property and a constructor with a ",(0,r.kt)("inlineCode",{parentName:"p"},"TModel")," parameter:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-Razor"},"@inherits RazorBlade.HtmlTemplate<TModel>\n")),(0,r.kt)("p",{parentName:"admonition"},"Further ",(0,r.kt)("a",{parentName:"p",href:"#Documentation"},"documentation")," is provided below."),(0,r.kt)("h2",{parentName:"admonition",id:"example"},"Example"),(0,r.kt)("p",{parentName:"admonition"},"The following template, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"TestTemplate.cshtml")," file:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-Razor"},"@inherits RazorBlade.HtmlTemplate\n\nHello, <i>@Name</i>!\n\n@functions\n{\n    public string? Name { get; set; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Will generate the following class in your project:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"internal partial class TestTemplate : RazorBlade.HtmlTemplate\n{\n    // ...\n    public string? Name { get; set; }\n    // ...\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"That you can use like the following:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'var template = new TestTemplate\n{\n    Name = "World"\n};\n\nvar result = template.Render();\n')),(0,r.kt)("h3",{parentName:"admonition",id:"with-a-model"},"With a model"),(0,r.kt)("p",{parentName:"admonition"},"A similar template with a model would be:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-Razor"},"@using MyApplication.Models\n@inherits RazorBlade.HtmlTemplate<GreetingModel>\n\nHello, <i>@Model.Name</i>!\n")),(0,r.kt)("p",{parentName:"admonition"},"Instantiating the generated class requires a model argument:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'var model = new GreetingModel { Name = "World" };\nvar template = new TestTemplate(model);\nvar result = template.Render();\n')),(0,r.kt)("h2",{parentName:"admonition",id:"documentation"},"Documentation"),(0,r.kt)("h3",{parentName:"admonition",id:"base-template-classes"},"Base template classes"),(0,r.kt)("p",{parentName:"admonition"},"For HTML templates, specify one of the following base classes with an ",(0,r.kt)("inlineCode",{parentName:"p"},"@inherits")," directive:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RazorBlade.HtmlTemplate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RazorBlade.HtmlTemplate<TModel>"))),(0,r.kt)("p",{parentName:"admonition"},"If you'd like to write a plain text template (which never escapes HTML), the following classes are available:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RazorBlade.PlainTextTemplate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RazorBlade.PlainTextTemplate<TModel>"))),(0,r.kt)("p",{parentName:"admonition"},"They all derive from ",(0,r.kt)("inlineCode",{parentName:"p"},"RazorBlade.RazorTemplate"),", which provides the base functionality."),(0,r.kt)("p",{parentName:"admonition"},"You can also write your own base classes. Marking a constructor with ",(0,r.kt)("inlineCode",{parentName:"p"},"[TemplateConstructor]")," will forward it to the generated template class. "),(0,r.kt)("h3",{parentName:"admonition",id:"writing-templates"},"Writing templates"),(0,r.kt)("p",{parentName:"admonition"},"HTML escaping can be avoided by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Html.Raw(value)")," method, just like in ASP.NET. The ",(0,r.kt)("inlineCode",{parentName:"p"},"IEncodedContent")," interface represents content which does not need to be escaped. The ",(0,r.kt)("inlineCode",{parentName:"p"},"HtmlString")," class is a simple implementation of this interface."),(0,r.kt)("p",{parentName:"admonition"},"Templates can be included in other templates by evaluating them, since they implement ",(0,r.kt)("inlineCode",{parentName:"p"},"IEncodedContent"),". For instance, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Footer")," template can be included by writing ",(0,r.kt)("inlineCode",{parentName:"p"},"@(new Footer())"),". Remember to always create a new instance of the template to include, even if it doesn't contain custom code, as templates are stateful and not thread-safe."),(0,r.kt)("p",{parentName:"admonition"},"The namespace of the generated class can be customized with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@namespace")," directive. The default value is deduced from the file location."),(0,r.kt)("h3",{parentName:"admonition",id:"executing-templates"},"Executing templates"),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RazorTemplate")," base class provides ",(0,r.kt)("inlineCode",{parentName:"p"},"Render")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RenderAsync")," methods to execute the template."),(0,r.kt)("p",{parentName:"admonition"},"Templates are stateful and not thread-safe, so it is advised to always create new instances of the templates to render."),(0,r.kt)("h3",{parentName:"admonition",id:"msbuild"},"MSBuild"),(0,r.kt)("p",{parentName:"admonition"},"The source generator will process ",(0,r.kt)("inlineCode",{parentName:"p"},"RazorBlade")," MSBuild items which have the ",(0,r.kt)("inlineCode",{parentName:"p"},".cshtml")," file extension."),(0,r.kt)("p",{parentName:"admonition"},"By default, all ",(0,r.kt)("inlineCode",{parentName:"p"},".cshtml")," files are included, unless one of the ",(0,r.kt)("inlineCode",{parentName:"p"},"EnableDefaultRazorBladeItems")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"EnableDefaultItems")," properties are set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". You can also manually customize this set."),(0,r.kt)("h3",{parentName:"admonition",id:"removing-the-dependency-on-razorblade"},"Removing the dependency on RazorBlade"),(0,r.kt)("p",{parentName:"admonition"},"RazorBlade makes it possible to remove the dependency on its runtime assembly. This could be useful for library projects which should be self-contained, with no dependencies on external packages."),(0,r.kt)("p",{parentName:"admonition"},"This mode is enabled by default when the ",(0,r.kt)("inlineCode",{parentName:"p"},"PackageReference")," of RazorBlade has the ",(0,r.kt)("inlineCode",{parentName:"p"},'PrivateAssets="all"')," attribute. In order to avoid compilation warnings, the assembly reference also needs to be explicitly excluded with ",(0,r.kt)("inlineCode",{parentName:"p"},'ExcludeAssets="compile;runtime"'),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-XML"},'<PackageReference Include="RazorBlade" Version="..." ExcludeAssets="compile;runtime" PrivateAssets="all" />\n')),(0,r.kt)("p",{parentName:"admonition"},"A source generator will then embed an ",(0,r.kt)("inlineCode",{parentName:"p"},"internal")," version of the RazorBlade library in the target project. This behavior can also be controlled by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"RazorBladeEmbeddedLibrary")," MSBuild property to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Fast templating with Razor syntax"),(0,r.kt)("p",{parentName:"admonition"},"Do not forget to put into AdditionalFiles section of csproj file")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"RazorBlade")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {10}",showLineNumbers:!0,"{10}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net7.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n    <ItemGroup>\n        <PackageReference Include="RazorBlade" Version="0.4.3" PrivateAssets="all" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />\n    </ItemGroup>\n    <ItemGroup>\n        <AdditionalFiles Include="PersonDisplay.cshtml" />\n    </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"RazorBlade")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using RazorBladeDemo;\n\nConsole.WriteLine("Hello, World!");\nPerson p = new();\np.FirstName= "Andrei";\np.LastName = "Ignat";\n\n\nvar template = new PersonDisplay(p);\nvar result = template.Render();\nConsole.WriteLine(result);\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"RazorBlade")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'namespace RazorBladeDemo;\n\npublic class Person\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public string FullName()\n    {\n        return FirstName + " "+LastName;\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\PersonDisplay.cshtml",label:"PersonDisplay.cshtml",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"RazorBlade")," in ",(0,r.kt)("em",{parentName:"p"},"PersonDisplay.cshtml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"@using RazorBladeDemo;\n@inherits RazorBlade.HtmlTemplate<Person>;\n\nThis is the @Model.FirstName @Model.LastName\n\n<br />\n\nThis should be full name of @Model.FullName()\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\Attributes.g.cs",label:"Attributes.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System;\n\nnamespace RazorBlade.Support;\n\n/// <summary>\n/// Specifies that this constructor needs to be provided by the generated template class.\n/// </summary>\n[AttributeUsage(AttributeTargets.Constructor)]\ninternal sealed class TemplateConstructorAttribute : Attribute\n{\n}\n\n/// <summary>\n/// Specifies if a method should be used depending on the template being sync or async.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method)]\ninternal sealed class ConditionalOnAsyncAttribute : Attribute\n{\n    /// <summary>\n    /// The message to display.\n    /// </summary>\n    public string? Message { get; set; }\n\n    /// <summary>\n    /// Marks a method as meant to be used in a sync or async template.\n    /// </summary>\n    /// <param name="async">True for methods meant to be used in async templates, and false for methods meant to be used for sync templates.</param>\n    public ConditionalOnAsyncAttribute(bool async)\n    {\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\HtmlHelper.g.cs",label:"HtmlHelper.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Text;\n\nnamespace RazorBlade;\n\n// ReSharper disable once RedundantDisableWarningComment\n#pragma warning disable CA1822\n\n/// <summary>\n/// Utilities for HTML Razor templates.\n/// </summary>\n[SuppressMessage("ReSharper", "MemberCanBeMadeStatic.Global")]\ninternal sealed class HtmlHelper\n{\n    internal static HtmlHelper Instance { get; } = new();\n\n    /// <summary>\n    /// Returns markup that is not HTML encoded.\n    /// </summary>\n    /// <param name="value">The HTML markup.</param>\n    public HtmlString Raw(object? value)\n        => new(value?.ToString());\n\n    /// <summary>\n    /// HTML-encodes the provided value.\n    /// </summary>\n    /// <param name="value">Value to HTML-encode.</param>\n    public string Encode(object? value)\n    {\n        var valueString = value?.ToString();\n        if (valueString is null or "")\n            return string.Empty;\n\n#if NET6_0_OR_GREATER\n        var valueSpan = valueString.AsSpan();\n        var sb = new StringBuilder();\n\n        while (true)\n        {\n            var idx = valueSpan.IndexOfAny("&<>\\"\\\'");\n            if (idx < 0)\n                break;\n\n            if (idx != 0)\n                sb.Append(valueSpan[..idx]);\n\n            sb.Append(valueSpan[idx] switch\n            {\n                \'&\'   => "&amp;",\n                \'<\'   => "&lt;",\n                \'>\'   => "&gt;",\n                \'"\'   => "&quot;",\n                \'\\\'\'  => "&#x27;",\n                var c => c.ToString() // Won\'t happen\n            });\n\n            valueSpan = valueSpan[(idx + 1)..];\n        }\n\n        if (valueSpan.Length != 0)\n            sb.Append(valueSpan);\n\n        return sb.ToString();\n#else\n        return valueString.Replace("&", "&amp;")\n                          .Replace("<", "&lt;")\n                          .Replace(">", "&gt;")\n                          .Replace("\\"", "&quot;")\n                          .Replace("\\\'", "&#x27;");\n#endif\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\HtmlString.g.cs",label:"HtmlString.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System.IO;\n\nnamespace RazorBlade;\n\n/// <summary>\n/// Represents an HTML-encoded string that should not be encoded again.\n/// </summary>\ninternal sealed class HtmlString : IEncodedContent\n{\n    private readonly string _value;\n\n    /// <summary>\n    /// Creates a HTML-encoded string.\n    /// </summary>\n    public HtmlString(string? value)\n        => _value = value ?? string.Empty;\n\n    /// <inheritdoc />\n    public override string ToString()\n        => _value;\n\n    void IEncodedContent.WriteTo(TextWriter textWriter)\n        => textWriter.Write(_value);\n}\n\n"))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\HtmlTemplate.g.cs",label:"HtmlTemplate.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System;\nusing System.Diagnostics.CodeAnalysis;\nusing RazorBlade.Support;\n\nnamespace RazorBlade;\n\n/// <summary>\n/// Base class for HTML templates.\n/// </summary>\n/// <remarks>\n/// Special HTML characters will be escaped.\n/// </remarks>\ninternal abstract class HtmlTemplate : RazorTemplate\n{\n    private AttributeInfo _currentAttribute;\n\n    // ReSharper disable once RedundantDisableWarningComment\n#pragma warning disable CA1822\n\n    /// <inheritdoc cref="HtmlHelper"/>\n    [SuppressMessage("ReSharper", "MemberCanBeMadeStatic.Global")]\n    protected HtmlHelper Html => HtmlHelper.Instance;\n\n    /// <inheritdoc cref="HtmlHelper.Raw"/>\n    [SuppressMessage("ReSharper", "MemberCanBeMadeStatic.Global")]\n    protected HtmlString Raw(object? value)\n        => HtmlHelper.Instance.Raw(value);\n\n#pragma warning restore CA1822\n\n    /// <inheritdoc />\n    protected override void Write(object? value)\n    {\n        if (value is IEncodedContent encodedContent)\n        {\n            encodedContent.WriteTo(Output);\n            return;\n        }\n\n        var valueString = value?.ToString();\n        if (valueString is null or "")\n            return;\n\n#if NET6_0_OR_GREATER\n        var valueSpan = valueString.AsSpan();\n\n        while (true)\n        {\n            var idx = valueSpan.IndexOfAny("&<>\\"\\\'");\n            if (idx < 0)\n                break;\n\n            if (idx != 0)\n                Output.Write(valueSpan[..idx]);\n\n            Output.Write(valueSpan[idx] switch\n            {\n                \'&\'   => "&amp;",\n                \'<\'   => "&lt;",\n                \'>\'   => "&gt;",\n                \'"\'   => "&quot;",\n                \'\\\'\'  => "&#x27;",\n                var c => c.ToString() // Won\'t happen\n            });\n\n            valueSpan = valueSpan[(idx + 1)..];\n        }\n\n        if (valueSpan.Length != 0)\n            Output.Write(valueSpan);\n#else\n        Output.Write(\n            valueString.Replace("&", "&amp;")\n                       .Replace("<", "&lt;")\n                       .Replace(">", "&gt;")\n                       .Replace("\\"", "&quot;")\n                       .Replace("\\\'", "&#x27;")\n        );\n#endif\n    }\n\n    /// <inheritdoc />\n    protected override void BeginWriteAttribute(string name, string prefix, int prefixOffset, string suffix, int suffixOffset, int attributeValuesCount)\n    {\n        _currentAttribute = new(name, prefix, suffix, attributeValuesCount);\n\n        if (_currentAttribute.AttributeValuesCount != 1)\n            WriteLiteral(prefix);\n    }\n\n    /// <inheritdoc />\n    protected override void WriteAttributeValue(string prefix, int prefixOffset, object? value, int valueOffset, int valueLength, bool isLiteral)\n    {\n        // This implements the Razor semantics of ASP.NET (conditional attributes):\n\n        // When an attribute consists of a single value part (without whitespace): foo="@bar"\n        //  - if bar evaluates to false or null, omit the attribute entirely\n        //  - if bar evaluates to true, write the attribute name as the value: foo="foo"\n        //  - otherwise, write the value of bar as usual\n\n        // When an attribute contains multiple value parts: class="foo @bar"\n        //  - if bar evaluates to null, omit it and its whitespace prefix: class="foo"\n        //  - otherwise, write the value of bar as usual (even if it evaluates to a boolean)\n\n        // Note that if an attribute name starts with "data-", these attribute-specific methods are not called,\n        // and Write is used instead, effectively bypassing these rules and always writing the attribute value as-is.\n\n        if (_currentAttribute.AttributeValuesCount == 1)\n        {\n            if (string.IsNullOrEmpty(prefix))\n            {\n                if (value is bool boolValue)\n                    value = boolValue ? _currentAttribute.Name : null;\n\n                if (value is null)\n                {\n                    _currentAttribute.Suppressed = true;\n                    return;\n                }\n            }\n\n            WriteLiteral(_currentAttribute.Prefix);\n        }\n\n        if (value is not null)\n        {\n            WriteLiteral(prefix);\n\n            if (isLiteral)\n                WriteLiteral(value.ToString());\n            else\n                Write(value);\n        }\n    }\n\n    /// <inheritdoc />\n    protected override void EndWriteAttribute()\n    {\n        if (!_currentAttribute.Suppressed)\n            WriteLiteral(_currentAttribute.Suffix);\n    }\n\n    private struct AttributeInfo\n    {\n        public readonly string? Name;\n        public readonly string? Prefix;\n        public readonly string? Suffix;\n        public readonly int AttributeValuesCount;\n        public bool Suppressed;\n\n        public AttributeInfo(string name, string prefix, string suffix, int attributeValuesCount)\n        {\n            Name = name;\n            Prefix = prefix;\n            Suffix = suffix;\n            AttributeValuesCount = attributeValuesCount;\n\n            Suppressed = false;\n        }\n    }\n}\n\n/// <summary>\n/// Base class for HTML templates with a model.\n/// </summary>\n/// <remarks>\n/// Special HTML characters will be escaped.\n/// </remarks>\n/// <typeparam name="TModel">The model type.</typeparam>\ninternal abstract class HtmlTemplate<TModel> : HtmlTemplate\n{\n    /// <summary>\n    /// The model for the template.\n    /// </summary>\n    public TModel Model { get; }\n\n    /// <summary>\n    /// Initializes a new instance of the template.\n    /// </summary>\n    /// <param name="model">The model for the template.</param>\n    [TemplateConstructor]\n    protected HtmlTemplate(TModel model)\n    {\n        Model = model;\n    }\n\n    /// <summary>\n    /// This constructor is provided for the designer only. Do not use.\n    /// </summary>\n    protected HtmlTemplate()\n    {\n        throw new NotSupportedException("Use the constructor overload that takes a model.");\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\IEncodedContent.g.cs",label:"IEncodedContent.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System.IO;\n\nnamespace RazorBlade;\n\n/// <summary>\n/// Encoded content to we written to the output as-is.\n/// </summary>\ninternal interface IEncodedContent\n{\n    /// <summary>\n    /// Writes the content to the provided <see cref="TextWriter"/>.\n    /// </summary>\n    /// <param name="textWriter"><see cref="TextWriter"/> to write the content to.</param>\n    void WriteTo(TextWriter textWriter);\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\PlainTextTemplate.g.cs",label:"PlainTextTemplate.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System;\nusing RazorBlade.Support;\n\nnamespace RazorBlade;\n\n/// <summary>\n/// Base class for plain text templates.\n/// </summary>\n/// <remarks>\n/// Values will be written as-is, without escaping.\n/// </remarks>\ninternal abstract class PlainTextTemplate : RazorTemplate\n{\n    private string? _currentAttributeSuffix;\n\n    /// <inheritdoc />\n    protected override void Write(object? value)\n    {\n        if (value is IEncodedContent encodedContent)\n            encodedContent.WriteTo(Output);\n        else\n            Output.Write(value);\n    }\n\n    /// <inheritdoc />\n    protected override void BeginWriteAttribute(string name, string prefix, int prefixOffset, string suffix, int suffixOffset, int attributeValuesCount)\n    {\n        WriteLiteral(prefix);\n        _currentAttributeSuffix = suffix;\n    }\n\n    /// <inheritdoc />\n    protected override void WriteAttributeValue(string prefix, int prefixOffset, object? value, int valueOffset, int valueLength, bool isLiteral)\n    {\n        WriteLiteral(prefix);\n\n        if (isLiteral)\n            WriteLiteral(value?.ToString());\n        else\n            Write(value);\n    }\n\n    /// <inheritdoc />\n    protected override void EndWriteAttribute()\n    {\n        WriteLiteral(_currentAttributeSuffix);\n        _currentAttributeSuffix = null;\n    }\n}\n\n/// <summary>\n/// Base class for plain text templates with a model.\n/// </summary>\n/// <remarks>\n/// Values will be written as-is, without escaping.\n/// </remarks>\n/// <typeparam name="TModel">The model type.</typeparam>\ninternal abstract class PlainTextTemplate<TModel> : PlainTextTemplate\n{\n    /// <summary>\n    /// The model for the template.\n    /// </summary>\n    public TModel Model { get; }\n\n    /// <summary>\n    /// Initializes a new instance of the template.\n    /// </summary>\n    /// <param name="model">The model for the template.</param>\n    [TemplateConstructor]\n    protected PlainTextTemplate(TModel model)\n    {\n        Model = model;\n    }\n\n    /// <summary>\n    /// This constructor is provided for the designer only. Do not use.\n    /// </summary>\n    protected PlainTextTemplate()\n    {\n        throw new NotSupportedException("Use the constructor overload that takes a model.");\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.EmbeddedLibrarySourceGenerator\\RazorTemplate.g.cs",label:"RazorTemplate.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// This file is part of the RazorBlade library.\n\n#nullable enable\n\nusing System.ComponentModel;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing RazorBlade.Support;\n\nnamespace RazorBlade;\n\n/// <summary>\n/// Base class for Razor templates.\n/// </summary>\ninternal abstract class RazorTemplate : IEncodedContent\n{\n    /// <summary>\n    /// The <see cref="TextWriter"/> which receives the output.\n    /// </summary>\n    protected TextWriter Output { get; set; } = new StreamWriter(Stream.Null);\n\n    /// <summary>\n    /// The cancellation token.\n    /// </summary>\n    protected CancellationToken CancellationToken { get; private set; }\n\n    /// <summary>\n    /// Renders the template synchronously and returns the result as a string.\n    /// </summary>\n    /// <param name="cancellationToken">The cancellation token.</param>\n    /// <remarks>\n    /// Use this only if the template does not use <c>@async</c> directives.\n    /// </remarks>\n    [ConditionalOnAsync(false, Message = $"The generated template is async. Use {nameof(RenderAsync)} instead.")]\n    public string Render(CancellationToken cancellationToken = default)\n    {\n        cancellationToken.ThrowIfCancellationRequested();\n\n        var renderTask = RenderAsync(cancellationToken);\n        if (renderTask.IsCompleted)\n            return renderTask.Result;\n\n        return Task.Run(async () => await renderTask.ConfigureAwait(false), CancellationToken.None).GetAwaiter().GetResult();\n    }\n\n    /// <summary>\n    /// Renders the template synchronously to the given <see cref="TextWriter"/>.\n    /// </summary>\n    /// <param name="textWriter">The <see cref="TextWriter"/> to write to.</param>\n    /// <param name="cancellationToken">The cancellation token.</param>\n    /// <remarks>\n    /// Use this only if the template does not use <c>@async</c> directives.\n    /// </remarks>\n    [ConditionalOnAsync(false, Message = $"The generated template is async. Use {nameof(RenderAsync)} instead.")]\n    public void Render(TextWriter textWriter, CancellationToken cancellationToken = default)\n    {\n        cancellationToken.ThrowIfCancellationRequested();\n\n        var renderTask = RenderAsync(textWriter, cancellationToken);\n        if (renderTask.IsCompleted)\n        {\n            renderTask.GetAwaiter().GetResult();\n            return;\n        }\n\n        Task.Run(async () => await renderTask.ConfigureAwait(false), CancellationToken.None).GetAwaiter().GetResult();\n    }\n\n    /// <summary>\n    /// Renders the template asynchronously and returns the result as a string.\n    /// </summary>\n    /// <param name="cancellationToken">The cancellation token.</param>\n    /// <remarks>\n    /// Use this if the template uses <c>@async</c> directives.\n    /// </remarks>\n    public async Task<string> RenderAsync(CancellationToken cancellationToken = default)\n    {\n        cancellationToken.ThrowIfCancellationRequested();\n\n        var output = new StringWriter();\n        await RenderAsync(output, cancellationToken).ConfigureAwait(false);\n        return output.ToString();\n    }\n\n    /// <summary>\n    /// Renders the template asynchronously to the given <see cref="TextWriter"/>.\n    /// </summary>\n    /// <param name="textWriter">The <see cref="TextWriter"/> to write to.</param>\n    /// <param name="cancellationToken">The cancellation token.</param>\n    /// <remarks>\n    /// Use this if the template uses <c>@async</c> directives.\n    /// </remarks>\n    public async Task RenderAsync(TextWriter textWriter, CancellationToken cancellationToken = default)\n    {\n        cancellationToken.ThrowIfCancellationRequested();\n\n        var previousState = (Output, CancellationToken);\n\n        try\n        {\n            Output = textWriter;\n            CancellationToken = cancellationToken;\n\n            await ExecuteAsync().ConfigureAwait(false);\n        }\n        finally\n        {\n            (Output, CancellationToken) = previousState;\n        }\n    }\n\n    /// <summary>\n    /// Executes the template and appends the result to <see cref="Output"/>.\n    /// </summary>\n    protected virtual Task ExecuteAsync()\n        => Task.CompletedTask; // The IDE complains when this method is abstract :(\n\n    /// <summary>\n    /// Writes a literal value to the output.\n    /// </summary>\n    /// <param name="value">The value to write.</param>\n    protected void WriteLiteral(string? value)\n        => Output.Write(value);\n\n    /// <summary>\n    /// Write a value to the output.\n    /// </summary>\n    /// <param name="value">The value to write.</param>\n    protected abstract void Write(object? value);\n\n    /// <summary>\n    /// Write already encoded content to the output.\n    /// </summary>\n    /// <param name="content">The template to render.</param>\n    protected void Write(IEncodedContent? content)\n        => content?.WriteTo(Output);\n\n    /// <summary>\n    /// Begins writing an attribute.\n    /// </summary>\n    /// <param name="name">The attribute name.</param>\n    /// <param name="prefix">The attribute prefix, which is the text from the whitespace preceding the attribute name to the quote before the attribute value.</param>\n    /// <param name="prefixOffset">The prefix offset in the Razor file.</param>\n    /// <param name="suffix">The suffix, consisting of the end quote.</param>\n    /// <param name="suffixOffset">The suffix offset in the Razor file.</param>\n    /// <param name="attributeValuesCount">The count of attribute value parts, which is the count of subsequent <see cref="WriteAttributeValue"/> calls.</param>\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    protected abstract void BeginWriteAttribute(string name, string prefix, int prefixOffset, string suffix, int suffixOffset, int attributeValuesCount);\n\n    /// <summary>\n    /// Writes part of an attribute value.\n    /// </summary>\n    /// <param name="prefix">The value prefix, consisting of the whitespace preceding the value.</param>\n    /// <param name="prefixOffset">The prefix offset in the Razor file.</param>\n    /// <param name="value">The value to write.</param>\n    /// <param name="valueOffset">The value offset in the Razor file.</param>\n    /// <param name="valueLength">The value length in the Razor file.</param>\n    /// <param name="isLiteral">Whether the value is a literal.</param>\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    protected abstract void WriteAttributeValue(string prefix, int prefixOffset, object? value, int valueOffset, int valueLength, bool isLiteral);\n\n    /// <summary>\n    /// Ends writing an attribute.\n    /// </summary>\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    protected abstract void EndWriteAttribute();\n\n    void IEncodedContent.WriteTo(TextWriter textWriter)\n        => Render(textWriter, CancellationToken.None);\n}\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.RazorBladeSourceGenerator\\RazorBladeDemo.PersonDisplay.Razor.g.cs",label:"RazorBladeDemo.PersonDisplay.Razor.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'#pragma checksum "C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\PersonDisplay.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0ee9a5bcc623252570e9d97efdeb7e3c5a8d6350"\n// <auto-generated/>\n#pragma warning disable 1591\nnamespace RazorBladeDemo\n{\n    #line hidden\n#nullable restore\n#line 1 "C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\PersonDisplay.cshtml"\nusing RazorBladeDemo;\n\n#line default\n#line hidden\n#nullable disable\n    #nullable restore\n    internal partial class PersonDisplay : RazorBlade.HtmlTemplate<Person>\n    #nullable disable\n    {\n        #pragma warning disable 1998\n        protected async override global::System.Threading.Tasks.Task ExecuteAsync()\n        {\n            WriteLiteral("\\r\\nThis is the ");\n#nullable restore\n#line (4,14)-(4,29) 6 "C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\PersonDisplay.cshtml"\nWrite(Model.FirstName);\n\n#line default\n#line hidden\n#nullable disable\n            WriteLiteral(" ");\n#nullable restore\n#line (4,31)-(4,45) 6 "C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\PersonDisplay.cshtml"\nWrite(Model.LastName);\n\n#line default\n#line hidden\n#nullable disable\n            WriteLiteral("\\r\\n\\r\\n<br />\\r\\n\\r\\nThis should be full name of ");\n#nullable restore\n#line (8,30)-(8,46) 6 "C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\PersonDisplay.cshtml"\nWrite(Model.FullName());\n\n#line default\n#line hidden\n#nullable disable\n        }\n        #pragma warning restore 1998\n    }\n}\n#pragma warning restore 1591\n\n'))),(0,r.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\RazorBlade\\src\\RazorBladeDemo\\obj\\GX\\RazorBlade.Analyzers\\RazorBlade.Analyzers.RazorBladeSourceGenerator\\RazorBladeDemo.PersonDisplay.RazorBlade.g.cs",label:"RazorBladeDemo.PersonDisplay.RazorBlade.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n\n#nullable restore\n\nnamespace RazorBladeDemo\n{\n    partial class PersonDisplay\n    {\n        /// <inheritdoc cref="M:RazorBlade.HtmlTemplate`1.#ctor(`0)" />\n        public PersonDisplay(global::RazorBladeDemo.Person model)\n            : base(model)\n        {\n        }\n    }\n}\n\n')))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:t(5148).Z},"Download Example project RazorBlade "))),(0,r.kt)("h3",{id:"download-pdf"},"Download PDF"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:t(9100).Z},"Download PDF RazorBlade ")),(0,r.kt)("h3",{id:"share-razorblade"},"Share RazorBlade"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRazorBlade&quote=RazorBlade",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRazorBlade&text=RazorBlade:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRazorBlade",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRazorBlade&title=RazorBlade",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRazorBlade&title=RazorBlade&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRazorBlade",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/RazorBlade"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/RazorBlade")))}g.isMDXComponent=!0},9100:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/RazorBlade-ae9732c6566c75e35137ff14fee82ef5.pdf"},5148:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/files/RazorBlade-75a74738469163557d8febd09f00495e.zip"}}]);