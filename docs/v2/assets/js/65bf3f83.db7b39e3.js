"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2888],{10717:(e,n,r)=>{r.d(n,{Ay:()=>T,RM:()=>l});var t=r(74848),u=r(28453);const l=[{value:"Category &quot;Enum&quot; has the following generators:",id:"category-enum-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const n={a:"a",h3:"h3",p:"p",...(0,u.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"category-enum-has-the-following-generators",children:'Category "Enum" has the following generators:'}),"\n",(0,t.jsxs)(n.p,{children:["1 ",(0,t.jsx)(n.a,{href:"/docs/CredFetoEnum",children:"CredFetoEnum"})]}),"\n",(0,t.jsxs)(n.p,{children:["2 ",(0,t.jsx)(n.a,{href:"/docs/EnumClass",children:"EnumClass"})]}),"\n",(0,t.jsxs)(n.p,{children:["3 ",(0,t.jsx)(n.a,{href:"/docs/EnumsEnhanced",children:"EnumsEnhanced"})]}),"\n",(0,t.jsxs)(n.p,{children:["4 ",(0,t.jsx)(n.a,{href:"/docs/EnumUtilities",children:"EnumUtilities"})]}),"\n",(0,t.jsxs)(n.p,{children:["5 ",(0,t.jsx)(n.a,{href:"/docs/Flaggen",children:"Flaggen"})]}),"\n",(0,t.jsxs)(n.p,{children:["6 ",(0,t.jsx)(n.a,{href:"/docs/FusionReactor",children:"FusionReactor"})]}),"\n",(0,t.jsxs)(n.p,{children:["7 ",(0,t.jsx)(n.a,{href:"/docs/Genbox.FastEnum",children:"Genbox.FastEnum"})]}),"\n",(0,t.jsxs)(n.p,{children:["8 ",(0,t.jsx)(n.a,{href:"/docs/jos.enumeration",children:"jos.enumeration"})]}),"\n",(0,t.jsxs)(n.p,{children:["9 ",(0,t.jsx)(n.a,{href:"/docs/NetEscapades.EnumGenerators",children:"NetEscapades.EnumGenerators"})]}),"\n",(0,t.jsxs)(n.p,{children:["10 ",(0,t.jsx)(n.a,{href:"/docs/PMart.Enumeration",children:"PMart.Enumeration"})]}),"\n",(0,t.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/Categories/Enum",children:"Enum"})})]})}function T(e={}){const{wrapper:n}={...(0,u.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},19584:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"RSCG-Examples/EnumClass","title":"38 - EnumClass","description":"enum 2 class","source":"@site/docs/RSCG-Examples/EnumClass.md","sourceDirName":"RSCG-Examples","slug":"/EnumClass","permalink":"/RSCG_Examples/v2/docs/EnumClass","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":380,"frontMatter":{"sidebar_position":380,"title":"38 - EnumClass","description":"enum 2 class","slug":"/EnumClass"},"sidebar":"tutorialSidebar","previous":{"title":"37 - AutoRegisterInject","permalink":"/RSCG_Examples/v2/docs/AutoRegisterInject"},"next":{"title":"39 - Breezy","permalink":"/RSCG_Examples/v2/docs/Breezy"}}');var u=r(74848),l=r(28453),a=r(11470),T=r(19365),i=r(14252),s=r(10717);const c={sidebar_position:380,title:"38 - EnumClass",description:"enum 2 class",slug:"/EnumClass"},o="EnumClass  by ashen.Blade",h={},d=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Summary",id:"summary",level:2},{value:"What is it?",id:"what-is-it",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:2},{value:"Example usage",id:"example-usage",level:3},{value:"ToString()",id:"tostring",level:3},{value:"Cast to enum",id:"cast-to-enum",level:3},{value:"Cast to <code>int</code>",id:"cast-to-int",level:3},{value:"<code>Equals()</code>",id:"equals",level:3},{value:"<code>Switch</code> function",id:"switch-function",level:3},{value:"<code>TryParse</code>",id:"tryparse",level:3},{value:"More",id:"more",level:3},{value:"Features",id:"features",level:2},{value:"Incremental generator",id:"incremental-generator",level:3},{value:"Custom target namespace",id:"custom-target-namespace",level:3},{value:"Generate <code>enum class</code> for enum from another assembly",id:"generate-enum-class-for-enum-from-another-assembly",level:3},{value:"Known limitations",id:"known-limitations",level:2},{value:"Same name of member and enum",id:"same-name-of-member-and-enum",level:3},{value:"Half-baked",id:"half-baked",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Give a star",id:"give-a-star",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share EnumClass",id:"share-enumclass",level:3},...s.RM];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(n.header,{children:(0,u.jsx)(n.h1,{id:"enumclass--by-ashenblade",children:"EnumClass  by ashen.Blade"})}),"\n",(0,u.jsx)(i.A,{toc:d}),"\n",(0,u.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,u.jsxs)(n.p,{children:[(0,u.jsx)(n.a,{href:"https://www.nuget.org/packages/EnumClass.Generator/",children:(0,u.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/EnumClass.Generator?label=EnumClass.Generator",alt:"Nuget"})}),"\n",(0,u.jsx)(n.a,{href:"https://github.com/ashenBlade/EnumClass",children:(0,u.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/ashenBlade/EnumClass?label=updated",alt:"GitHub last commit"})}),"\n",(0,u.jsx)(n.img,{src:"https://img.shields.io/github/stars/ashenBlade/EnumClass?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,u.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,u.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,u.jsxs)(n.admonition,{type:"info",children:[(0,u.jsxs)(n.p,{children:["Name: ",(0,u.jsx)(n.strong,{children:"EnumClass"})]}),(0,u.jsx)(n.p,{children:"Inspired by kotlin's enum class, this package provides incremental generator that can create classes from enum declaration.\nAll you have to do is to add [EnumClass] attribute to your enum.\nFeatures:"}),(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsx)(n.li,{children:"Override default ToString"}),"\n",(0,u.jsx)(n.li,{children:"Add specific behaviour (methods) to each member"}),"\n",(0,u.jsx)(n.li,{children:"Polymorphic Switch implementation"}),"\n"]}),(0,u.jsx)(n.p,{children:"Author: ashen.Blade"}),(0,u.jsxs)(n.p,{children:["NuGet:\n",(0,u.jsx)(n.em,{children:(0,u.jsx)(n.a,{href:"https://www.nuget.org/packages/EnumClass.Generator/",children:"https://www.nuget.org/packages/EnumClass.Generator/"})})]}),(0,u.jsxs)(n.p,{children:["You can find more details at ",(0,u.jsx)(n.a,{href:"https://github.com/ashenBlade/EnumClass",children:"https://github.com/ashenBlade/EnumClass"})]}),(0,u.jsxs)(n.p,{children:["Source: ",(0,u.jsx)(n.a,{href:"https://github.com/ashenBlade/EnumClass",children:"https://github.com/ashenBlade/EnumClass"})]})]}),"\n",(0,u.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,u.jsxs)(n.admonition,{type:"note",children:[(0,u.jsxs)(n.h1,{id:"enum-class-generator",children:[(0,u.jsx)(n.code,{children:"enum class"})," Generator"]}),(0,u.jsx)(n.h2,{id:"summary",children:"Summary"}),(0,u.jsxs)(n.p,{children:["Type-safe source-generated alternative to C# ",(0,u.jsx)(n.code,{children:"enum"})," inspired by Kotlin ",(0,u.jsx)(n.code,{children:"enum class"})]}),(0,u.jsx)(n.h2,{id:"what-is-it",children:"What is it?"}),(0,u.jsxs)(n.p,{children:["This library contains source generator that creates ",(0,u.jsx)(n.code,{children:"class"})," for specified ",(0,u.jsx)(n.code,{children:"enum"}),".\nThese classes contain similar functionality as original enum, but behave as ordinal ",(0,u.jsx)(n.code,{children:"class"})]}),(0,u.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),(0,u.jsx)(n.h3,{id:"installation",children:"Installation"}),(0,u.jsxs)(n.ol,{children:["\n",(0,u.jsx)(n.li,{children:"Add reference to Nuget package"}),"\n"]}),(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsx)(n.li,{children:".NET CLI"}),"\n"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-bash",children:"dotnet add package EnumClass --version 1.2.0\n"})}),(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsx)(n.li,{children:"Package Manager"}),"\n"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{children:"Install-Package EnumClass -Version 1.2.0\n"})}),(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsx)(n.li,{children:"PackageReference"}),"\n"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{children:'<PackageReference Include="EnumClass" Version="1.2.0" />\n'})}),(0,u.jsxs)(n.ol,{start:"2",children:["\n",(0,u.jsxs)(n.li,{children:["Specify ",(0,u.jsx)(n.em,{children:"Analyzer"})," property in ",(0,u.jsx)(n.code,{children:".csproj"})]}),"\n"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{children:'<PackageReference Include="EnumClass" Version="1.2.0" OutputItemType="Analyzer"/>\n'})}),(0,u.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,u.jsx)(n.h3,{id:"example-usage",children:"Example usage"}),(0,u.jsxs)(n.p,{children:["Add ",(0,u.jsx)(n.code,{children:"[EnumClass]"})," attribute to enum"]}),(0,u.jsxs)(n.p,{children:["That is all!\nCorresponding class will be generated in namespace as your enum, but prefixed with ",(0,u.jsx)(n.strong,{children:"EnumClass"})]}),(0,u.jsx)(n.p,{children:"Example"}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'using EnumClass.Attributes;\n\nnamespace Domain\n{\n    [EnumClass]\n    public enum PetKind\n    {\n        Cat,\n        Dog\n    }\n    \n    namespace EnumClass\n    {\n        public partial abstract class PetKind\n        {\n            public partial class CatEnumValue\n            {\n                public void SayMeow()\n                {\n                    System.Console.WriteLine("Meow!");\n                }\n            }\n        }\n    }\n}\n'})}),(0,u.jsx)(n.h3,{id:"tostring",children:"ToString()"}),(0,u.jsxs)(n.p,{children:["All ",(0,u.jsx)(n.code,{children:"ToString()"})," are generated at compile time.\nBy default, they equal to name of corresponding member."]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine(EnumClass.PetKind.Cat.ToString() == "Cat"); \n// Output: true\n'})}),(0,u.jsxs)(n.p,{children:["If you want to override default value - use ",(0,u.jsx)(n.code,{children:'[EnumMemberInfo(StringValue = "")]'})," attribute"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'namespace Domain;\n\n[EnumClass]\npublic enum PetKind\n{\n    [EnumMemberInfo(StringValue = "Kitten")]\n    Cat,\n    Dog\n}\n// -------------\n\nConsole.WriteLine(EnumClass.PetKind.Cat.ToString());\n// Output: Kitten\n'})}),(0,u.jsx)(n.h3,{id:"cast-to-enum",children:"Cast to enum"}),(0,u.jsx)(n.p,{children:"All classes have overriden cast operator to original enum value"}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"Console.WriteLine(((PetKind)EnumClass.PetKind.Cat) == PetKind.Cat); \n// Output: true\n"})}),(0,u.jsxs)(n.h3,{id:"cast-to-int",children:["Cast to ",(0,u.jsx)(n.code,{children:"int"})]}),(0,u.jsxs)(n.p,{children:["All classes have overriden cast to ",(0,u.jsx)(n.code,{children:"int"})]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"Console.WriteLine(((int)EnumClass.PetKind.Cat) == ((int)PetKind.Cat)); \n// Output: true\n"})}),(0,u.jsx)(n.h3,{id:"equals",children:(0,u.jsx)(n.code,{children:"Equals()"})}),(0,u.jsxs)(n.p,{children:["Generated classes implement ",(0,u.jsx)(n.code,{children:"IEquatable<>"})," both for enum class and original enum.\nThus, has methods ",(0,u.jsx)(n.code,{children:"Equals(EnumClass)"})," and ",(0,u.jsx)(n.code,{children:"Equals(OrignalEnum)"})]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"Console.WriteLine(EnumClass.PetKind.Cat.Equals(EnumClass.PetKind.Cat)); // Calls Equals(EnumClass.PetKind)\nConsole.WriteLine(EnumClass.PetKind.Cat.Equals(EnumClass.PetKind.Dog)); // Calls Equals(EnumClass.PetKind)\nConsole.WriteLine(EnumClass.PetKind.Cat.Equals(PetKind.Cat)); // Calls Equals(PetKind)\nConsole.WriteLine(EnumClass.PetKind.Cat.Equals(PetKind.Dog)); // Calls Equals(PetKind)\n// Output: true\n//         false\n//         true\n//         false\n"})}),(0,u.jsxs)(n.p,{children:["P.S. and of course ",(0,u.jsx)(n.code,{children:"Equals(object?)"})]}),(0,u.jsxs)(n.h3,{id:"switch-function",children:[(0,u.jsx)(n.code,{children:"Switch"})," function"]}),(0,u.jsxs)(n.p,{children:["Instead of writing ",(0,u.jsx)(n.code,{children:"switch"})," every time, a fimily\nof switch function is generated.\nThey accepts both ",(0,u.jsx)(n.code,{children:"Action"})," and ",(0,u.jsx)(n.code,{children:"Func"})," with enum class at first argument and optional additional arguments."]}),(0,u.jsx)(n.p,{children:"E.g."}),(0,u.jsxs)(n.ol,{children:["\n",(0,u.jsx)(n.li,{children:(0,u.jsx)(n.code,{children:"Func<int>"})}),"\n"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"var cat = EnumClass.PetKind.Cat;\nvar value = cat.Switch(1,\n        (cat, i) => i + 1,\n        (dog, i) => i * 100);\nConsole.WriteLine(value); \n// Output: 2\n"})}),(0,u.jsxs)(n.ol,{start:"2",children:["\n",(0,u.jsx)(n.li,{children:(0,u.jsx)(n.code,{children:"Action"})}),"\n"]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'var dog = EnumClass.PetKind.Dog;\ndog.Switch(\n    cat => cat.SayMeow(),\n    dog => Console.WriteLine("Oh, it is puppy!")); \n// Output: Oh, it is puppy!\n'})}),(0,u.jsx)(n.h3,{id:"tryparse",children:(0,u.jsx)(n.code,{children:"TryParse"})}),(0,u.jsxs)(n.p,{children:["There is static function ",(0,u.jsx)(n.code,{children:"bool EnumClass.TryParse(string value, out EnumClass enumClass)"})," for parsing values from raw enums.\nThis function accepts strings with and without enum name: ",(0,u.jsx)(n.strong,{children:"PetKind.Cat"})," and ",(0,u.jsx)(n.strong,{children:"Cat"})," will be parsed into Cat value."]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'if (EnumClass.PetKind.TryParse("Cat", out var cat)\n{\n    Console.WriteLine($"This is cat!! {cat}");\n}\nelse\n{\n    Console.WriteLine("This is not cat");\n}\n'})}),(0,u.jsx)(n.h3,{id:"more",children:"More"}),(0,u.jsxs)(n.p,{children:["For more examples checkout ",(0,u.jsx)(n.em,{children:"samples"})," folder"]}),(0,u.jsx)(n.h2,{id:"features",children:"Features"}),(0,u.jsx)(n.h3,{id:"incremental-generator",children:"Incremental generator"}),(0,u.jsx)(n.p,{children:"It uses incremental generator instead of source generator.\nThis implies better performance in comparison"}),(0,u.jsx)(n.h3,{id:"custom-target-namespace",children:"Custom target namespace"}),(0,u.jsxs)(n.p,{children:['By default generated class contained in the same namespace as original enum + ".EnumClass" suffix.\nYou can manually set target namespace in ',(0,u.jsx)(n.code,{children:"Namespace"})," property of ",(0,u.jsx)(n.code,{children:"[EnumClass]"})," attribute."]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'using EnumClass.Attributes;\n\nnamespace Test;\n\n[EnumClass(Namespace = "Domain")]\npublic enum SampleEnum\n{\n    First,\n    Second\n}\n//------------------\nusing Domain;\n\nConsole.WriteLine(SampleEnum.First);\n'})}),(0,u.jsxs)(n.h3,{id:"generate-enum-class-for-enum-from-another-assembly",children:["Generate ",(0,u.jsx)(n.code,{children:"enum class"})," for enum from another assembly"]}),(0,u.jsxs)(n.p,{children:["If you do not have access to enum source code directly, you can generate ",(0,u.jsx)(n.code,{children:"enum class"})," for enum in external assembly.\nFor this use ",(0,u.jsx)(n.code,{children:"[ExternalEnumClass]"})," attribute."]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"// External assembly\nnamespace Logic;\n\npublic enum Word\n{\n    Single,\n    Double,\n    Triple\n}\n"})}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:'// Our assembly\nusing EnumClass.Attributes;\nusing Logic;\n\n[assembly: ExternalEnumClass(typeof(Word), Namespace = "Another")]\nnamespace Another;\n\npublic partial class Word\n{\n    public abstract int WordsCount { get; }\n    \n    public partial class SingleEnumValue\n    {\n        public override int WordsCount => 1;    \n    }\n    \n    \n    public partial class DoubleEnumValue\n    {\n        public override int WordsCount => 2;    \n    }\n    \n    \n    public partial class TripleEnumValue\n    {\n        public override int WordsCount => 3;    \n    }\n}\n'})}),(0,u.jsx)(n.h2,{id:"known-limitations",children:"Known limitations"}),(0,u.jsx)(n.h3,{id:"same-name-of-member-and-enum",children:"Same name of member and enum"}),(0,u.jsx)(n.p,{children:"In the current implementation, static enum class field names have the same names as members of the original enum."}),(0,u.jsx)(n.p,{children:"E.g."}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"[EnumClass]\npublic enum TokenType\n{\n    TokenType\n}\n"})}),(0,u.jsx)(n.p,{children:"will generate approximately the following code"}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",children:"public class TokenType\n{\n    public static TokenTypeEnumValue TokenType = new();\n}\n"})}),(0,u.jsx)(n.h3,{id:"half-baked",children:"Half-baked"}),(0,u.jsxs)(n.p,{children:["The project at an early stage of life.\nI'm sure there are lots of hidden bugs, so be cautious using it in production.\nIn production may be better for now to use ",(0,u.jsx)(n.a,{href:"https://github.com/ardalis/SmartEnum",children:"SmartEnum"})]}),(0,u.jsx)(n.h2,{id:"contributing",children:"Contributing"}),(0,u.jsxs)(n.p,{children:["If you have an idea on how to improve the project or have found a bug,\ncreate an issue on ",(0,u.jsx)(n.a,{href:"https://github.com/ashenBlade/EnumClass/issues",children:"GitHub"})]}),(0,u.jsx)(n.h2,{id:"give-a-star",children:"Give a star"}),(0,u.jsx)(n.p,{children:"If you want to see the continuation of the project, give it a star!"})]}),"\n",(0,u.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,u.jsx)(n.admonition,{type:"note",children:(0,u.jsx)(n.p,{children:"enum 2 class"})}),"\n",(0,u.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,u.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,u.jsxs)(a.A,{children:[(0,u.jsxs)(T.A,{value:"csproj",label:"CSharp Project",children:[(0,u.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,u.jsx)(n.strong,{children:"EnumClass"})]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="EnumClass.Generator" Version="1.3.0" OutputItemType="Analyzer" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,u.jsxs)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumClass\\src\\EnumClassDemo\\Program.cs",label:"Program.cs",children:[(0,u.jsxs)(n.p,{children:["This is the use of ",(0,u.jsx)(n.strong,{children:"EnumClass"})," in ",(0,u.jsx)(n.em,{children:"Program.cs"})]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nConsole.WriteLine("Hello, World!");\n\nConsole.WriteLine(EnumClassDemo.EnumClass.Colors.None.ToString());\nConsole.WriteLine(EnumClassDemo.EnumClass.Colors.Red.TestMe());\n\n'})})]}),(0,u.jsxs)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumClass\\src\\EnumClassDemo\\Colors.cs",label:"Colors.cs",children:[(0,u.jsxs)(n.p,{children:["This is the use of ",(0,u.jsx)(n.strong,{children:"EnumClass"})," in ",(0,u.jsx)(n.em,{children:"Colors.cs"})]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using EnumClass.Attributes;\n\nnamespace EnumClassDemo;\n[EnumClass]\npublic enum Colors\n{\n    None=0,\n    Red,\n    Green,\n    Blue,\n}\n\n"})})]}),(0,u.jsxs)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumClass\\src\\EnumClassDemo\\RedEnumValue.cs",label:"RedEnumValue.cs",children:[(0,u.jsxs)(n.p,{children:["This is the use of ",(0,u.jsx)(n.strong,{children:"EnumClass"})," in ",(0,u.jsx)(n.em,{children:"RedEnumValue.cs"})]}),(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace EnumClassDemo.EnumClass;\npublic abstract partial class Colors\n{\n    public partial class RedEnumValue\n    {\n        public string? TestMe()\n        {\n            return ToString();\n        }\n    }\n}\n"})})]})]}),"\n",(0,u.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,u.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,u.jsx)(a.A,{children:(0,u.jsx)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumClass\\src\\EnumClassDemo\\obj\\GX\\EnumClass.Generator\\EnumClass.Generator.EnumClassIncrementalGenerator\\Colors.g.cs",label:"Colors.g.cs",children:(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#nullable enable\n\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\nnamespace EnumClassDemo.EnumClass\n{\n\npublic abstract partial class Colors: IEquatable<Colors>, IEquatable<global::EnumClassDemo.Colors>, IComparable<Colors>, IComparable<global::EnumClassDemo.Colors>, IComparable\n{\n    protected readonly global::EnumClassDemo.Colors _realEnumValue;\n\n    protected Colors(global::EnumClassDemo.Colors enumValue)\n    {\n        this._realEnumValue = enumValue;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static explicit operator global::EnumClassDemo.Colors(Colors value)\n    {\n        return value._realEnumValue;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static implicit operator int(Colors value)\n    {\n        return (int) value._realEnumValue;\n    }\n\n    public bool Equals(Colors? other)\n    {\n        return !ReferenceEquals(other, null) && other._realEnumValue == this._realEnumValue;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public bool Equals(global::EnumClassDemo.Colors other)\n    {\n        return other == this._realEnumValue;\n    }\n\n    public override bool Equals(object? other)\n    {\n        if (ReferenceEquals(other, null)) return false;\n        if (ReferenceEquals(other, this)) return true;\n        if (other is Colors)\n        {\n            return this.Equals((Colors) other);\n        }\n        if (other is global::EnumClassDemo.Colors)\n        {\n            return this.Equals((global::EnumClassDemo.Colors) other);\n        }\n        return false;\n    }\n\n    public static bool operator ==(Colors left, global::EnumClassDemo.Colors right)\n    {\n        return left.Equals(right);\n    }\n\n    public static bool operator !=(Colors left, global::EnumClassDemo.Colors right)\n    {\n        return !left.Equals(right);\n    }\n\n    public static bool operator ==(global::EnumClassDemo.Colors left, Colors right)\n    {\n        return right.Equals(left);\n    }\n\n    public static bool operator !=(global::EnumClassDemo.Colors left, Colors right)\n    {\n        return !right.Equals(left);\n    }\n\n    public static bool operator ==(Colors left, Colors right)\n    {\n        return !ReferenceEquals(left, null) && left.Equals(right);\n    }\n\n    public static bool operator !=(Colors left, Colors right)\n    {\n        return ReferenceEquals(left, null) || !left.Equals(right);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public override int GetHashCode()\n    {\n        return this._realEnumValue.GetHashCode();\n    }\n\n    public static bool TryParse(string value, out Colors? colors)\n    {\n        switch (value)\n        {\n            case "None":\n                colors = None;\n                return true;\n            case "Red":\n                colors = Red;\n                return true;\n            case "Green":\n                colors = Green;\n                return true;\n            case "Blue":\n                colors = Blue;\n                return true;\n            case "Colors.None":\n                colors = None;\n                return true;\n            case "Colors.Red":\n                colors = Red;\n                return true;\n            case "Colors.Green":\n                colors = Green;\n                return true;\n            case "Colors.Blue":\n                colors = Blue;\n                return true;\n        }\n        colors = null;\n        return false;\n    }\n\n\n    public static bool TryParse(int value, out Colors? colors)\n    {\n        switch (value)\n        {\n            case 0:\n                colors = None;\n                return true;\n            case 1:\n                colors = Red;\n                return true;\n            case 2:\n                colors = Green;\n                return true;\n            case 3:\n                colors = Blue;\n                return true;\n        }\n        colors = null;\n        return false;\n    }\n\n\n    public int CompareTo(object? other)\n    {\n        if (ReferenceEquals(this, other)) return 0;\n        if (ReferenceEquals(null, other)) return 1;\n        if (other is Colors)\n        {\n            Colors temp = (Colors) other;\n            int left = ((int)this._realEnumValue);\n            int right = ((int)temp._realEnumValue);\n            return left < right ? -1 : left == right ? 0 : 1;\n        }\n        if (other is global::EnumClassDemo.Colors)\n        {\n            int left = ((int)this._realEnumValue);\n            int right = ((int)other);\n            return left < right ? -1 : left == right ? 0 : 1;\n        }\n        throw new ArgumentException($"Object to compare must be either {typeof(Colors)} or {typeof(global::EnumClassDemo.Colors)}. Given type: {other.GetType()}", "other");\n    }\n\n    public int CompareTo(Colors? other)\n    {\n        if (ReferenceEquals(this, other)) return 0;\n        if (ReferenceEquals(null, other)) return 1;\n            int left = ((int)this._realEnumValue);\n            int right = ((int)other._realEnumValue);\n            return left < right ? -1 : left == right ? 0 : 1;\n    }\n\n    public int CompareTo(global::EnumClassDemo.Colors other)\n    {\n            int left = ((int)this._realEnumValue);\n            int right = ((int)other);\n            return left < right ? -1 : left == right ? 0 : 1;\n    }\n\n    public abstract void Switch(Action<NoneEnumValue> noneSwitch, Action<RedEnumValue> redSwitch, Action<GreenEnumValue> greenSwitch, Action<BlueEnumValue> blueSwitch);\n    public abstract TResult Switch<TResult>(Func<NoneEnumValue, TResult> noneSwitch, Func<RedEnumValue, TResult> redSwitch, Func<GreenEnumValue, TResult> greenSwitch, Func<BlueEnumValue, TResult> blueSwitch);\n    public abstract void Switch<T0>(T0 arg0, Action<NoneEnumValue, T0> noneSwitch, Action<RedEnumValue, T0> redSwitch, Action<GreenEnumValue, T0> greenSwitch, Action<BlueEnumValue, T0> blueSwitch);\n    public abstract TResult Switch<TResult, T0>(T0 arg0, Func<NoneEnumValue, T0, TResult> noneSwitch, Func<RedEnumValue, T0, TResult> redSwitch, Func<GreenEnumValue, T0, TResult> greenSwitch, Func<BlueEnumValue, T0, TResult> blueSwitch);\n    public abstract void Switch<T0, T1>(T0 arg0, T1 arg1, Action<NoneEnumValue, T0, T1> noneSwitch, Action<RedEnumValue, T0, T1> redSwitch, Action<GreenEnumValue, T0, T1> greenSwitch, Action<BlueEnumValue, T0, T1> blueSwitch);\n    public abstract TResult Switch<TResult, T0, T1>(T0 arg0, T1 arg1, Func<NoneEnumValue, T0, T1, TResult> noneSwitch, Func<RedEnumValue, T0, T1, TResult> redSwitch, Func<GreenEnumValue, T0, T1, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, TResult> blueSwitch);\n    public abstract void Switch<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Action<NoneEnumValue, T0, T1, T2> noneSwitch, Action<RedEnumValue, T0, T1, T2> redSwitch, Action<GreenEnumValue, T0, T1, T2> greenSwitch, Action<BlueEnumValue, T0, T1, T2> blueSwitch);\n    public abstract TResult Switch<TResult, T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Func<NoneEnumValue, T0, T1, T2, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, TResult> blueSwitch);\n    public abstract void Switch<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action<NoneEnumValue, T0, T1, T2, T3> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3> blueSwitch);\n    public abstract TResult Switch<TResult, T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func<NoneEnumValue, T0, T1, T2, T3, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, TResult> blueSwitch);\n    public abstract void Switch<T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<NoneEnumValue, T0, T1, T2, T3, T4> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4> blueSwitch);\n    public abstract TResult Switch<TResult, T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<NoneEnumValue, T0, T1, T2, T3, T4, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, TResult> blueSwitch);\n    public abstract void Switch<T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5> blueSwitch);\n    public abstract TResult Switch<TResult, T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult> blueSwitch);\n    public abstract void Switch<T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5, T6> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6> blueSwitch);\n    public abstract TResult Switch<TResult, T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> blueSwitch);\n\n    public static readonly NoneEnumValue None = new NoneEnumValue();\n    public partial class NoneEnumValue: Colors\n    {\n        public NoneEnumValue(): base(global::EnumClassDemo.Colors.None) { }\n        public override string ToString()\n        {\n            return "None";\n        }\n\n        public override void Switch(Action<NoneEnumValue> noneSwitch, Action<RedEnumValue> redSwitch, Action<GreenEnumValue> greenSwitch, Action<BlueEnumValue> blueSwitch)\n        {\n            noneSwitch(this);\n        }\n\n        public override TResult Switch<TResult>(Func<NoneEnumValue, TResult> noneSwitch, Func<RedEnumValue, TResult> redSwitch, Func<GreenEnumValue, TResult> greenSwitch, Func<BlueEnumValue, TResult> blueSwitch)\n        {\n            return noneSwitch(this);\n        }\n\n        public override void Switch<T0>(T0 arg0, Action<NoneEnumValue, T0> noneSwitch, Action<RedEnumValue, T0> redSwitch, Action<GreenEnumValue, T0> greenSwitch, Action<BlueEnumValue, T0> blueSwitch)\n        {\n            noneSwitch(this, arg0);\n        }\n\n        public override TResult Switch<TResult, T0>(T0 arg0, Func<NoneEnumValue, T0, TResult> noneSwitch, Func<RedEnumValue, T0, TResult> redSwitch, Func<GreenEnumValue, T0, TResult> greenSwitch, Func<BlueEnumValue, T0, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0);\n        }\n\n        public override void Switch<T0, T1>(T0 arg0, T1 arg1, Action<NoneEnumValue, T0, T1> noneSwitch, Action<RedEnumValue, T0, T1> redSwitch, Action<GreenEnumValue, T0, T1> greenSwitch, Action<BlueEnumValue, T0, T1> blueSwitch)\n        {\n            noneSwitch(this, arg0, arg1);\n        }\n\n        public override TResult Switch<TResult, T0, T1>(T0 arg0, T1 arg1, Func<NoneEnumValue, T0, T1, TResult> noneSwitch, Func<RedEnumValue, T0, T1, TResult> redSwitch, Func<GreenEnumValue, T0, T1, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0, arg1);\n        }\n\n        public override void Switch<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Action<NoneEnumValue, T0, T1, T2> noneSwitch, Action<RedEnumValue, T0, T1, T2> redSwitch, Action<GreenEnumValue, T0, T1, T2> greenSwitch, Action<BlueEnumValue, T0, T1, T2> blueSwitch)\n        {\n            noneSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Func<NoneEnumValue, T0, T1, T2, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override void Switch<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action<NoneEnumValue, T0, T1, T2, T3> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3> blueSwitch)\n        {\n            noneSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func<NoneEnumValue, T0, T1, T2, T3, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<NoneEnumValue, T0, T1, T2, T3, T4> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4> blueSwitch)\n        {\n            noneSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<NoneEnumValue, T0, T1, T2, T3, T4, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5> blueSwitch)\n        {\n            noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5, T6> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6> blueSwitch)\n        {\n            noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> blueSwitch)\n        {\n            return noneSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public override int GetHashCode()\n        {\n            return 0;\n        }\n    }\n\n    public static readonly RedEnumValue Red = new RedEnumValue();\n    public partial class RedEnumValue: Colors\n    {\n        public RedEnumValue(): base(global::EnumClassDemo.Colors.Red) { }\n        public override string ToString()\n        {\n            return "Red";\n        }\n\n        public override void Switch(Action<NoneEnumValue> noneSwitch, Action<RedEnumValue> redSwitch, Action<GreenEnumValue> greenSwitch, Action<BlueEnumValue> blueSwitch)\n        {\n            redSwitch(this);\n        }\n\n        public override TResult Switch<TResult>(Func<NoneEnumValue, TResult> noneSwitch, Func<RedEnumValue, TResult> redSwitch, Func<GreenEnumValue, TResult> greenSwitch, Func<BlueEnumValue, TResult> blueSwitch)\n        {\n            return redSwitch(this);\n        }\n\n        public override void Switch<T0>(T0 arg0, Action<NoneEnumValue, T0> noneSwitch, Action<RedEnumValue, T0> redSwitch, Action<GreenEnumValue, T0> greenSwitch, Action<BlueEnumValue, T0> blueSwitch)\n        {\n            redSwitch(this, arg0);\n        }\n\n        public override TResult Switch<TResult, T0>(T0 arg0, Func<NoneEnumValue, T0, TResult> noneSwitch, Func<RedEnumValue, T0, TResult> redSwitch, Func<GreenEnumValue, T0, TResult> greenSwitch, Func<BlueEnumValue, T0, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0);\n        }\n\n        public override void Switch<T0, T1>(T0 arg0, T1 arg1, Action<NoneEnumValue, T0, T1> noneSwitch, Action<RedEnumValue, T0, T1> redSwitch, Action<GreenEnumValue, T0, T1> greenSwitch, Action<BlueEnumValue, T0, T1> blueSwitch)\n        {\n            redSwitch(this, arg0, arg1);\n        }\n\n        public override TResult Switch<TResult, T0, T1>(T0 arg0, T1 arg1, Func<NoneEnumValue, T0, T1, TResult> noneSwitch, Func<RedEnumValue, T0, T1, TResult> redSwitch, Func<GreenEnumValue, T0, T1, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0, arg1);\n        }\n\n        public override void Switch<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Action<NoneEnumValue, T0, T1, T2> noneSwitch, Action<RedEnumValue, T0, T1, T2> redSwitch, Action<GreenEnumValue, T0, T1, T2> greenSwitch, Action<BlueEnumValue, T0, T1, T2> blueSwitch)\n        {\n            redSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Func<NoneEnumValue, T0, T1, T2, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override void Switch<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action<NoneEnumValue, T0, T1, T2, T3> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3> blueSwitch)\n        {\n            redSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func<NoneEnumValue, T0, T1, T2, T3, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<NoneEnumValue, T0, T1, T2, T3, T4> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4> blueSwitch)\n        {\n            redSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<NoneEnumValue, T0, T1, T2, T3, T4, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5> blueSwitch)\n        {\n            redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5, T6> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6> blueSwitch)\n        {\n            redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> blueSwitch)\n        {\n            return redSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public override int GetHashCode()\n        {\n            return 1;\n        }\n    }\n\n    public static readonly GreenEnumValue Green = new GreenEnumValue();\n    public partial class GreenEnumValue: Colors\n    {\n        public GreenEnumValue(): base(global::EnumClassDemo.Colors.Green) { }\n        public override string ToString()\n        {\n            return "Green";\n        }\n\n        public override void Switch(Action<NoneEnumValue> noneSwitch, Action<RedEnumValue> redSwitch, Action<GreenEnumValue> greenSwitch, Action<BlueEnumValue> blueSwitch)\n        {\n            greenSwitch(this);\n        }\n\n        public override TResult Switch<TResult>(Func<NoneEnumValue, TResult> noneSwitch, Func<RedEnumValue, TResult> redSwitch, Func<GreenEnumValue, TResult> greenSwitch, Func<BlueEnumValue, TResult> blueSwitch)\n        {\n            return greenSwitch(this);\n        }\n\n        public override void Switch<T0>(T0 arg0, Action<NoneEnumValue, T0> noneSwitch, Action<RedEnumValue, T0> redSwitch, Action<GreenEnumValue, T0> greenSwitch, Action<BlueEnumValue, T0> blueSwitch)\n        {\n            greenSwitch(this, arg0);\n        }\n\n        public override TResult Switch<TResult, T0>(T0 arg0, Func<NoneEnumValue, T0, TResult> noneSwitch, Func<RedEnumValue, T0, TResult> redSwitch, Func<GreenEnumValue, T0, TResult> greenSwitch, Func<BlueEnumValue, T0, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0);\n        }\n\n        public override void Switch<T0, T1>(T0 arg0, T1 arg1, Action<NoneEnumValue, T0, T1> noneSwitch, Action<RedEnumValue, T0, T1> redSwitch, Action<GreenEnumValue, T0, T1> greenSwitch, Action<BlueEnumValue, T0, T1> blueSwitch)\n        {\n            greenSwitch(this, arg0, arg1);\n        }\n\n        public override TResult Switch<TResult, T0, T1>(T0 arg0, T1 arg1, Func<NoneEnumValue, T0, T1, TResult> noneSwitch, Func<RedEnumValue, T0, T1, TResult> redSwitch, Func<GreenEnumValue, T0, T1, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0, arg1);\n        }\n\n        public override void Switch<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Action<NoneEnumValue, T0, T1, T2> noneSwitch, Action<RedEnumValue, T0, T1, T2> redSwitch, Action<GreenEnumValue, T0, T1, T2> greenSwitch, Action<BlueEnumValue, T0, T1, T2> blueSwitch)\n        {\n            greenSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Func<NoneEnumValue, T0, T1, T2, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override void Switch<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action<NoneEnumValue, T0, T1, T2, T3> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3> blueSwitch)\n        {\n            greenSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func<NoneEnumValue, T0, T1, T2, T3, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<NoneEnumValue, T0, T1, T2, T3, T4> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4> blueSwitch)\n        {\n            greenSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<NoneEnumValue, T0, T1, T2, T3, T4, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5> blueSwitch)\n        {\n            greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5, T6> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6> blueSwitch)\n        {\n            greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> blueSwitch)\n        {\n            return greenSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public override int GetHashCode()\n        {\n            return 2;\n        }\n    }\n\n    public static readonly BlueEnumValue Blue = new BlueEnumValue();\n    public partial class BlueEnumValue: Colors\n    {\n        public BlueEnumValue(): base(global::EnumClassDemo.Colors.Blue) { }\n        public override string ToString()\n        {\n            return "Blue";\n        }\n\n        public override void Switch(Action<NoneEnumValue> noneSwitch, Action<RedEnumValue> redSwitch, Action<GreenEnumValue> greenSwitch, Action<BlueEnumValue> blueSwitch)\n        {\n            blueSwitch(this);\n        }\n\n        public override TResult Switch<TResult>(Func<NoneEnumValue, TResult> noneSwitch, Func<RedEnumValue, TResult> redSwitch, Func<GreenEnumValue, TResult> greenSwitch, Func<BlueEnumValue, TResult> blueSwitch)\n        {\n            return blueSwitch(this);\n        }\n\n        public override void Switch<T0>(T0 arg0, Action<NoneEnumValue, T0> noneSwitch, Action<RedEnumValue, T0> redSwitch, Action<GreenEnumValue, T0> greenSwitch, Action<BlueEnumValue, T0> blueSwitch)\n        {\n            blueSwitch(this, arg0);\n        }\n\n        public override TResult Switch<TResult, T0>(T0 arg0, Func<NoneEnumValue, T0, TResult> noneSwitch, Func<RedEnumValue, T0, TResult> redSwitch, Func<GreenEnumValue, T0, TResult> greenSwitch, Func<BlueEnumValue, T0, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0);\n        }\n\n        public override void Switch<T0, T1>(T0 arg0, T1 arg1, Action<NoneEnumValue, T0, T1> noneSwitch, Action<RedEnumValue, T0, T1> redSwitch, Action<GreenEnumValue, T0, T1> greenSwitch, Action<BlueEnumValue, T0, T1> blueSwitch)\n        {\n            blueSwitch(this, arg0, arg1);\n        }\n\n        public override TResult Switch<TResult, T0, T1>(T0 arg0, T1 arg1, Func<NoneEnumValue, T0, T1, TResult> noneSwitch, Func<RedEnumValue, T0, T1, TResult> redSwitch, Func<GreenEnumValue, T0, T1, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0, arg1);\n        }\n\n        public override void Switch<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Action<NoneEnumValue, T0, T1, T2> noneSwitch, Action<RedEnumValue, T0, T1, T2> redSwitch, Action<GreenEnumValue, T0, T1, T2> greenSwitch, Action<BlueEnumValue, T0, T1, T2> blueSwitch)\n        {\n            blueSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2, Func<NoneEnumValue, T0, T1, T2, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0, arg1, arg2);\n        }\n\n        public override void Switch<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Action<NoneEnumValue, T0, T1, T2, T3> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3> blueSwitch)\n        {\n            blueSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, Func<NoneEnumValue, T0, T1, T2, T3, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0, arg1, arg2, arg3);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<NoneEnumValue, T0, T1, T2, T3, T4> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4> blueSwitch)\n        {\n            blueSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<NoneEnumValue, T0, T1, T2, T3, T4, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0, arg1, arg2, arg3, arg4);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5> blueSwitch)\n        {\n            blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5);\n        }\n\n        public override void Switch<T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6> noneSwitch, Action<RedEnumValue, T0, T1, T2, T3, T4, T5, T6> redSwitch, Action<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6> greenSwitch, Action<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6> blueSwitch)\n        {\n            blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        public override TResult Switch<TResult, T0, T1, T2, T3, T4, T5, T6>(T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<NoneEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> noneSwitch, Func<RedEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> redSwitch, Func<GreenEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> greenSwitch, Func<BlueEnumValue, T0, T1, T2, T3, T4, T5, T6, TResult> blueSwitch)\n        {\n            return blueSwitch(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public override int GetHashCode()\n        {\n            return 3;\n        }\n    }\n\n    private static readonly Colors[] _members = new Colors[4] { None, Red, Green, Blue, };\n\n    public static System.Collections.Generic.IReadOnlyCollection<Colors> GetAllMembers()\n    {\n        return _members;\n    }\n}\n}\n\n'})})})}),"\n",(0,u.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,u.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,u.jsx)(n.admonition,{type:"tip",children:(0,u.jsx)(n.p,{children:(0,u.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(27339).A+"",children:"Download Example project EnumClass "})})}),"\n",(0,u.jsx)(n.h3,{id:"share-enumclass",children:"Share EnumClass"}),"\n",(0,u.jsxs)("ul",{children:[(0,u.jsx)("li",{children:(0,u.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumClass&quote=EnumClass",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,u.jsx)("li",{children:(0,u.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumClass&text=EnumClass:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumClass",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,u.jsx)("li",{children:(0,u.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumClass&title=EnumClass",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,u.jsx)("li",{children:(0,u.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumClass&title=EnumClass&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumClass",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,u.jsx)(n.p,{children:(0,u.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/EnumClass",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/EnumClass"})}),"\n",(0,u.jsx)(n.p,{children:"aaa"}),"\n",(0,u.jsx)(s.Ay,{})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,u.jsx)(n,{...e,children:(0,u.jsx)(g,{...e})}):g(e)}},27339:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/files/EnumClass-9c430c165abe0e18685e64d3239730e6.zip"}}]);