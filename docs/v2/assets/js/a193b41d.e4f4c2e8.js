"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4197],{77212:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>m,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(87462),r=(a(67294),a(3905)),o=a(73992),i=a(18679),s=a(68839);const l={sidebar_position:330,title:"33 - Matryoshki",description:"Adding decorators to an implementation of interface",slug:"/Matryoshki"},m="Matryoshki  by Georgy Krasin",p={unversionedId:"RSCG-Examples/Matryoshki",id:"RSCG-Examples/Matryoshki",title:"33 - Matryoshki",description:"Adding decorators to an implementation of interface",source:"@site/docs/RSCG-Examples/Matryoshki.md",sourceDirName:"RSCG-Examples",slug:"/Matryoshki",permalink:"/RSCG_Examples/v2/docs/Matryoshki",draft:!1,tags:[],version:"current",sidebarPosition:330,frontMatter:{sidebar_position:330,title:"33 - Matryoshki",description:"Adding decorators to an implementation of interface",slug:"/Matryoshki"},sidebar:"tutorialSidebar",previous:{title:"32 - Mediator",permalink:"/RSCG_Examples/v2/docs/Mediator"},next:{title:"34 - MemoryPack",permalink:"/RSCG_Examples/v2/docs/MemoryPack"}},c={},d=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Matryoshki",id:"share-matryoshki",level:3},{value:"In the same category (Interface) - 11 other generators",id:"in-the-same-category-interface---11-other-generators",level:3},{value:"Biwen.AutoClassGen",id:"biwenautoclassgen",level:4},{value:"CopyCat",id:"copycat",level:4},{value:"Farskeptic.AutoCompose",id:"farskepticautocompose",level:4},{value:"MakeInterface.Generator",id:"makeinterfacegenerator",level:4},{value:"Minerals.AutoInterfaces",id:"mineralsautointerfaces",level:4},{value:"NetAutomaticInterface",id:"netautomaticinterface",level:4},{value:"ProxyGen",id:"proxygen",level:4},{value:"Roozie.AutoInterface",id:"roozieautointerface",level:4},{value:"RSCG_CompositeProvider",id:"rscg_compositeprovider",level:4},{value:"rscg_Interface_to_null_object",id:"rscg_interface_to_null_object",level:4},{value:"RSCG_Static",id:"rscg_static",level:4}],h={toc:d},u="wrapper";function k(e){let{components:t,...l}=e;return(0,r.kt)(u,(0,n.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"matryoshki--by-georgy-krasin"},"Matryoshki  by Georgy Krasin"),(0,r.kt)(s.Z,{toc:d,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Matryoshki/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Matryoshki?label=Matryoshki",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/krasin-ga/matryoshki/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/krasin-ga/matryoshki?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/krasin-ga/matryoshki?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"Matryoshki")),(0,r.kt)("p",{parentName:"admonition"},"Metaprogramming framework based on C# source generators"),(0,r.kt)("p",{parentName:"admonition"},"Author: Georgy Krasin"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Matryoshki/"},"https://www.nuget.org/packages/Matryoshki/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/krasin-ga/matryoshki/"},"https://github.com/krasin-ga/matryoshki/")),(0,r.kt)("p",{parentName:"admonition"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/krasin-ga/matryoshki/"},"https://github.com/krasin-ga/matryoshki/"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"matryoshki"},"Matryoshki"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Matryoshki/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Matryoshki?color=1E9400&label=Matryoshki&style=flat-square",alt:"Matryoshki Nuget"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Matryoshki.Abstractions/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Matryoshki.Abstractions?color=1E9400&label=Matryoshki.Abstractions&style=flat-square",alt:"Matryoshki.Abstractions Nuget"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Matryoshki.Generators/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Matryoshki.Generators?color=1E9400&label=Matryoshki.Generators&style=flat-square",alt:"Matryoshki.Generators Nuget"}))," "),(0,r.kt)("img",{src:"assets/matryoshki.svg",align:"right"}),' "Matryoshki" (\u041c\u0430\u0442\u0440\u0451\u0448\u043a\u0438, Matryoshkas) is a metaprogramming framework based on C# source generators.',(0,r.kt)("h4",{parentName:"admonition",id:"key-features"},"Key Features"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Define type-agnostic templates and create decorators based on them:\n",(0,r.kt)("inlineCode",{parentName:"li"},"Decorate<IFoo>.With<LoggingAdornment>().Name<FooWithLogging>()"))),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Extract interfaces and automatically generate adapters from classes: ",(0,r.kt)("inlineCode",{parentName:"li"},"From<Bar>.ExtractInterface<IBar>()"),".")),(0,r.kt)("h2",{parentName:"admonition",id:"getting-started"},"Getting Started"),(0,r.kt)("h3",{parentName:"admonition",id:"installation"},"Installation"),(0,r.kt)("p",{parentName:"admonition"},"The first step is to add package to the target project:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package Matryoshki\n")),(0,r.kt)("p",{parentName:"admonition"},"Once the package is installed, you can proceed with creating adornments."),(0,r.kt)("h3",{parentName:"admonition",id:"adornments"},"Adornments"),(0,r.kt)("img",{src:"assets/flower.png",width:"48",align:"left"})," ",(0,r.kt)("p",{parentName:"admonition"},"Adornments act as blueprints for creating type-agnostic decorators. They consist of a method template and can contain arbitrary members. Rather than being instantiated as objects, the code of adornment classes is directly injected into the decorator classes."),(0,r.kt)("p",{parentName:"admonition"},"To create an adornment you need to create a class that implements ",(0,r.kt)("inlineCode",{parentName:"p"},"IAdornment"),". As a simple example, you can create an adornment that outputs the name of the decorated member to the console:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'public class HelloAdornment : IAdornment\n{\n    public TResult MethodTemplate<TResult>(Call<TResult> call)\n    {\n        Console.WriteLine($"Hello, {call.MemberName}!");\n        return call.Forward();\n    }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"When creating a decorated method, ",(0,r.kt)("inlineCode",{parentName:"p"},"call.Forward()")," will be replaced with a call to the implementation. And ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult")," will have the type of the actual return value. For ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," methods, a special type ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing")," will be used."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"A more complex example"),(0,r.kt)("p",{parentName:"admonition"},"An adornment for logging can serve as a slightly closer example to real-world usage:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'public class LoggingAdornment : IAdornment\n{\n    private readonly ILogger<ExceptionLoggingAdornment> _logger;\n\n    public LoggingAdornment(ILogger<ExceptionLoggingAdornment> logger)\n    {\n        _logger = logger;\n    }\n\n    public TResult MethodTemplate<TResult>(Call<TResult> call)\n    {\n        try\n        {\n            if(_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug("Executing {Type}.{Member}", GetType().Name, call.MemberName);\n\n            var result = call.Forward();\n\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug("Successfully executed {Type}.{Member}: {Result}", GetType().Name, call.MemberName, result);\n\n            return result;\n        }\n        catch (Exception exception)\n        {\n            _logger.LogError(\n                exception,\n                "Error executing {Type}.{Member}({Arguments})",\n                GetType().Name,\n                call.MemberName,\n                string.Join(",", call.GetArgumentsOfType<object>()));\n\n            throw;\n        }\n    }\n}\n'))),(0,r.kt)("h4",{parentName:"admonition",id:"asynchronous-method-templates"},"Asynchronous method templates"),(0,r.kt)("p",{parentName:"admonition"},"Asynchronous templates can be defined by implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncMethodTemplate")," method, which will be used to decorate methods that return ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ValueTask"),". "),(0,r.kt)("p",{parentName:"admonition"},"Note that asynchronous templates are optional, and async methods will still be decorated because an ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncMethodTemplate")," will be automatically created from the ",(0,r.kt)("inlineCode",{parentName:"p"},"MethodTemplate")," by awaiting the ",(0,r.kt)("inlineCode",{parentName:"p"},"Forward*")," method invocations."),(0,r.kt)("p",{parentName:"admonition"},"More tips for writing adornments can be found here: tips"),(0,r.kt)("h3",{parentName:"admonition",id:"decoration"},"Decoration"),(0,r.kt)("p",{parentName:"admonition"},"Once we have an adornment, we can create our first matryoshkas."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Suppose we have two interfaces that we would like to apply our HelloAdornment to."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"interface IFoo\n{\n    object Foo(object foo) => foo;\n}\nrecord Foo : IFoo;\n\ninterface IBar\n{\n    Task BarAsync() => Task.Delay(0);\n}\nrecord Bar : IFoo;\n"))),(0,r.kt)("p",{parentName:"admonition"},"To create matryoshkas, you just need to write their specification in any appropriate location:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"Matryoshka<IFoo>\n    .With<HelloAdornment>()\n    .Name<FooMatryoshka>();\n\nDecorate<IBar> // you can use Decorate<> alias if you prefer\n    .With<HelloAdornment>()\n    .Name<BarMatryoshka>();\n")),(0,r.kt)("p",{parentName:"admonition"},"Done! Now we can test the generated classes:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'var fooMatryoshka = new FooMatryoshka(new Foo());\nvar barMatryoshka = new BarMatryoshka(new Bar());\n\nfooMatryoshka.Foo(); // "Hello, Foo!" will be written to console\nbarMatryoshka.Bar(); // "Hello, Bar!" will be written to console\n')),(0,r.kt)("p",{parentName:"admonition"},"In a production environment, you will likely prefer to use DI containers that support decoration (Grace, Autofac, etc.) or libraries like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/khellang/Scrutor"},"Scrutor"),". Here's an example of using matryoshkas together with Scrutor:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"using Scrutor;\nusing Matryoshki.Abstractions;\n\npublic static class MatryoshkaScrutorExtensions\n{\n    public static IServiceCollection DecorateWithMatryoshka(\n        this IServiceCollection services,\n        Expression<Func<MatryoshkaType>> expression)\n    {\n        var matryoshkaType = expression.Compile()();\n\n        services.Decorate(matryoshkaType.Target, matryoshkaType.Type);\n\n        return services;\n    }\n\n    public static IServiceCollection DecorateWithNestedMatryoshkas(\n        this IServiceCollection services,\n        Expression<Func<MatryoshkaTypes>> expression)\n    {\n        var matryoshkaTypes = expression.Compile()();\n\n        foreach (var type in matryoshkaTypes)\n            services.Decorate(matryoshkaTypes.Target, type);\n\n        return services;\n    }\n}\n\ninternal static class Example\n{\n    internal static IServiceCollection DecorateBar(\n        this IServiceCollection services)\n    {\n        return services.DecorateWithMatryoshka(\n            () => Matryoshka<IBar>.With<HelloAdornment>());\n    }\n}\n")),(0,r.kt)("h3",{parentName:"admonition",id:"chains-of-decorations-with-inestingt1--tn"},"Chains of decorations with INesting<T1, ..., TN>"),(0,r.kt)("p",{parentName:"admonition"},"Reusable decoration chains can be described by creating a type that implements ",(0,r.kt)("inlineCode",{parentName:"p"},"INesting<T1, ..., TN>"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"public record ObservabilityNesting : INesting<MetricsAdornment, LoggingAdornment, TracingAdornment>;\n")),(0,r.kt)("p",{parentName:"admonition"},"You can generate the classes using it as follows:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"static IServiceCollection DecorateFoo(IServiceCollection services)\n{\n    //assuming that you are using MatryoshkaScrutorExtensions\n    return services.DecorateWithNestedMatryoshkas(\n        () => Matryoshka<IBar>.WithNesting<ObservabilityNesting>());\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"It is not possible to assign names to the classes when using ",(0,r.kt)("inlineCode",{parentName:"p"},"INesting"),". The generated types will be located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"MatryoshkiGenerated.{NestingName}")," namespace and have names in the format ",(0,r.kt)("strong",{parentName:"p"},"TargetTypeName*"),"With",(0,r.kt)("strong",{parentName:"p"},"*AdornmentName"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"limitations"},"Limitations"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Do not use a variable named ",(0,r.kt)("inlineCode",{parentName:"li"},"value"),", as this can conflict with a property setter."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"call")," parameter should not be passed to other methods."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," cannot be used without specifying a type argument."),(0,r.kt)("li",{parentName:"ul"},"To apply decorations, the members must be abstract or virtual. To surpass this limitation you can generate an interface with expression ",(0,r.kt)("inlineCode",{parentName:"li"},"From<TClass>.ExtractInterface<TInterface>()")," and then decrorate ",(0,r.kt)("inlineCode",{parentName:"li"},"TInterface"),"."),(0,r.kt)("li",{parentName:"ul"},"The decoration expression must be computable at compile time and written with a single statement"),(0,r.kt)("li",{parentName:"ul"},"Pattern matching will not always work")),(0,r.kt)("h2",{parentName:"admonition",id:"license"},"License"),(0,r.kt)("p",{parentName:"admonition"},"This project is licensed under the MIT license."),(0,r.kt)("h2",{parentName:"admonition",id:"quick-links"},"Quick links"),(0,r.kt)("p",{parentName:"admonition"},"Tips")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Adding decorators to an implementation of interface")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"Matryoshki")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    <ItemGroup>\n        <PackageReference Include="Matryoshki" Version="1.1.4" />\n        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="7.0.0" />\n\n    </ItemGroup>\n\n\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Matryoshki")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing Matryoshki.Abstractions;\nDecorate<IPerson> // you can use Decorate<> alias if you prefer\n    .With<AddLog>()\n    .Name<PersonMatryoshka>();\n\nvar services = new ServiceCollection();\n\nservices.AddTransient<IPerson, Person>();\nservices.AddTransient<PersonMatryoshka, PersonMatryoshka>();\nvar serviceProvider = services.BuildServiceProvider();\nvar sp=serviceProvider.GetRequiredService<PersonMatryoshka>();\nsp.FirstName = "Andrei";\nsp.LastName = "Ignat";\nConsole.WriteLine(sp.FullName());\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\AddLog.cs",label:"AddLog.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Matryoshki")," in ",(0,r.kt)("em",{parentName:"p"},"AddLog.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nnamespace MatryoshkiDemo;\n\ninternal class AddLog : IAdornment\n{\n    public TResult MethodTemplate<TResult>(Call<TResult> call)\n    {        \n        Console.WriteLine($"start Calling {call.MemberName}  !");\n        var data    =call.Forward();\n        Console.WriteLine($"end calling {call.MemberName} !");\n        return data;\n\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\IPerson.cs",label:"IPerson.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Matryoshki")," in ",(0,r.kt)("em",{parentName:"p"},"IPerson.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace MatryoshkiDemo;\n\npublic interface IPerson\n{\n    string? FirstName { get; set; }\n    int ID { get; set; }\n    string? LastName { get; set; }\n\n    string FullName();\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Matryoshki")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nnamespace MatryoshkiDemo;\n\npublic class Person : IPerson\n{\n    public int ID { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n\n    public string FullName()\n    {\n        return $"{FirstName} {LastName}";\n    }\n}\n\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\obj\\GX\\Matryoshki.Generators\\Matryoshki.Generators.CompiledAdornmentSourceGenerator\\MatryoshkiDemo_AddLog.Compiled.g.cs",label:"MatryoshkiDemo_AddLog.Compiled.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'[assembly: Matryoshki.Abstractions.CompiledAdornmentAttribute("MatryoshkiDemo.AddLog", "AddLog", "DQpuYW1lc3BhY2UgTWF0cnlvc2hraURlbW87DQoNCmludGVybmFsIGNsYXNzIEFkZExvZyA6IElBZG9ybm1lbnQNCnsNCiAgICBwdWJsaWMgVFJlc3VsdCBNZXRob2RUZW1wbGF0ZTxUUmVzdWx0PihDYWxsPFRSZXN1bHQ+IGNhbGwpDQogICAgeyAgICAgICAgDQogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQic3RhcnQgQ2FsbGluZyB7Y2FsbC5NZW1iZXJOYW1lfSAgISIpOw0KICAgICAgICB2YXIgZGF0YSAgICA9Y2FsbC5Gb3J3YXJkKCk7DQogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiZW5kIGNhbGxpbmcge2NhbGwuTWVtYmVyTmFtZX0gISIpOw0KICAgICAgICByZXR1cm4gZGF0YTsNCg0KICAgIH0NCn0=")]\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\obj\\GX\\Matryoshki.Generators\\Matryoshki.Generators.MatryoshkiSourceGenerator\\.PersonMatryoshka.g.cs",label:".PersonMatryoshka.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using System;\nusing MatryoshkiDemo;\n\n#nullable enable\npublic class PersonMatryoshka : MatryoshkiDemo.IPerson\n{\n    private readonly MatryoshkiDemo.IPerson _inner;\n    public PersonMatryoshka(MatryoshkiDemo.IPerson inner)\n    {\n        _inner = inner;\n    }\n\n    private static readonly string[] MethodParameterNamesForPropertyFirstName = new string[]\n    {\n    };\n    public string? FirstName\n    {\n        get\n        {\n            Console.WriteLine($"start Calling {"FirstName"}  !");\n            var data = _inner.FirstName;\n            Console.WriteLine($"end calling {"FirstName"} !");\n            return data;\n        }\n\n        set\n        {\n            Console.WriteLine($"start Calling {"FirstName"}  !");\n            var data = Matryoshki.Abstractions.Nothing.FromPropertyAction(_inner, value, static (@inner\u0394\u0394\u0394, @value\u0394\u0394\u0394) => @inner\u0394\u0394\u0394.FirstName = @value\u0394\u0394\u0394);\n            Console.WriteLine($"end calling {"FirstName"} !");\n            return;\n        }\n    }\n\n    private static readonly string[] MethodParameterNamesForPropertyID = new string[]\n    {\n    };\n    public int ID\n    {\n        get\n        {\n            Console.WriteLine($"start Calling {"ID"}  !");\n            var data = _inner.ID;\n            Console.WriteLine($"end calling {"ID"} !");\n            return data;\n        }\n\n        set\n        {\n            Console.WriteLine($"start Calling {"ID"}  !");\n            var data = Matryoshki.Abstractions.Nothing.FromPropertyAction(_inner, value, static (@inner\u0394\u0394\u0394, @value\u0394\u0394\u0394) => @inner\u0394\u0394\u0394.ID = @value\u0394\u0394\u0394);\n            Console.WriteLine($"end calling {"ID"} !");\n            return;\n        }\n    }\n\n    private static readonly string[] MethodParameterNamesForPropertyLastName = new string[]\n    {\n    };\n    public string? LastName\n    {\n        get\n        {\n            Console.WriteLine($"start Calling {"LastName"}  !");\n            var data = _inner.LastName;\n            Console.WriteLine($"end calling {"LastName"} !");\n            return data;\n        }\n\n        set\n        {\n            Console.WriteLine($"start Calling {"LastName"}  !");\n            var data = Matryoshki.Abstractions.Nothing.FromPropertyAction(_inner, value, static (@inner\u0394\u0394\u0394, @value\u0394\u0394\u0394) => @inner\u0394\u0394\u0394.LastName = @value\u0394\u0394\u0394);\n            Console.WriteLine($"end calling {"LastName"} !");\n            return;\n        }\n    }\n\n    private static readonly string[] MethodParameterNamesForMethodFullName = new string[]\n    {\n    };\n    public string FullName()\n    {\n        Console.WriteLine($"start Calling {"FullName"}  !");\n        var data = _inner.FullName();\n        Console.WriteLine($"end calling {"FullName"} !");\n        return data;\n    }\n}\n')))),(0,r.kt)("h2",{id:"useful"},"Useful"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(16385).Z},"Download Example project Matryoshki "))),(0,r.kt)("h3",{id:"share-matryoshki"},"Share Matryoshki"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&quote=Matryoshki",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&text=Matryoshki:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&title=Matryoshki",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&title=Matryoshki&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Matryoshki"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Matryoshki")),(0,r.kt)("h3",{id:"in-the-same-category-interface---11-other-generators"},"In the same category (Interface) - 11 other generators"),(0,r.kt)("h4",{id:"biwenautoclassgen"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Biwen.AutoClassGen"},"Biwen.AutoClassGen")),(0,r.kt)("h4",{id:"copycat"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CopyCat"},"CopyCat")),(0,r.kt)("h4",{id:"farskepticautocompose"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Farskeptic.AutoCompose"},"Farskeptic.AutoCompose")),(0,r.kt)("h4",{id:"makeinterfacegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/MakeInterface.Generator"},"MakeInterface.Generator")),(0,r.kt)("h4",{id:"mineralsautointerfaces"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Minerals.AutoInterfaces"},"Minerals.AutoInterfaces")),(0,r.kt)("h4",{id:"netautomaticinterface"},(0,r.kt)("a",{parentName:"h4",href:"/docs/NetAutomaticInterface"},"NetAutomaticInterface")),(0,r.kt)("h4",{id:"proxygen"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ProxyGen"},"ProxyGen")),(0,r.kt)("h4",{id:"roozieautointerface"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Roozie.AutoInterface"},"Roozie.AutoInterface")),(0,r.kt)("h4",{id:"rscg_compositeprovider"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_CompositeProvider"},"RSCG_CompositeProvider")),(0,r.kt)("h4",{id:"rscg_interface_to_null_object"},(0,r.kt)("a",{parentName:"h4",href:"/docs/rscg_Interface_to_null_object"},"rscg_Interface_to_null_object")),(0,r.kt)("h4",{id:"rscg_static"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_Static"},"RSCG_Static")))}k.isMDXComponent=!0},16385:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/Matryoshki-bb7c60a4307c6d2b4bb35519d191f019.zip"}}]);