"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9092],{6992:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=e(7462),t=(e(7294),e(4137));const r={sidebar_position:14805,title:"14805 - Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",description:"Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",slug:"/Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator"},s="Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",a={unversionedId:"Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",id:"Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",title:"14805 - Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",description:"Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",source:"@site/docs/Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator.md",sourceDirName:"Microsoft",slug:"/Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",permalink:"/RSCG_Examples/v2/docs/Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",draft:!1,tags:[],version:"current",sidebarPosition:14805,frontMatter:{sidebar_position:14805,title:"14805 - Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",description:"Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",slug:"/Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator"},sidebar:"tutorialSidebar",previous:{title:"12534 - Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",permalink:"/RSCG_Examples/v2/docs/Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},u={},c=[{value:"Original Code",id:"original-code",level:2},{value:"Generated Code",id:"generated-code",level:2},{value:"More details",id:"more-details",level:2}],p={toc:c},g="wrapper";function d(n){let{components:i,...r}=n;return(0,t.kt)(g,(0,o.Z)({},p,r,{components:i,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"microsoftextensionsconfigurationbindersourcegeneration_microsoftextensionsconfigurationbindersourcegenerationconfigurationbindinggenerator"},"Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator"),(0,t.kt)("h2",{id:"original-code"},"Original Code"),(0,t.kt)("p",null,"The code that will be improved by generation is :"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using ConfigBinderDemo;\nusing Microsoft.Extensions.Options;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n//Generator:BindingExtensions.g.cs\nbuilder.Services.AddOptions<MyAppOptions>()\n            .BindConfiguration(MyAppOptions.ConfigName);\napp.MapGet("/nameApp", (IOptions<MyAppOptions> opt) =>\n{\n    try\n    {\n        var val = opt.Value.AppDisplayName;\n        return val;\n    }\n    catch (OptionsValidationException ex)\n    {\n        var problems = ex.Failures.ToArray();\n        return string.Join(",", problems);\n    }\n\n})\n.WithName("GetWeatherForecast")\n.WithOpenApi();\n\napp.Run();\n\ninternal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n}\n\n')),(0,t.kt)("h2",{id:"generated-code"},"Generated Code"),(0,t.kt)("p",null,"The code that is written is"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#nullable enable\n#pragma warning disable CS0612, CS0618 // Suppress warnings about [Obsolete] member usage in generated code.\n\nnamespace System.Runtime.CompilerServices\n{\n    using System;\n    using System.CodeDom.Compiler;\n\n    [GeneratedCode("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.9.3103")]\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\n    file sealed class InterceptsLocationAttribute : Attribute\n    {\n        public InterceptsLocationAttribute(string filePath, int line, int column)\n        {\n        }\n    }\n}\n\nnamespace Microsoft.Extensions.Configuration.Binder.SourceGeneration\n{\n    using ConfigBinderDemo;\n    using Microsoft.Extensions.Configuration;\n    using Microsoft.Extensions.DependencyInjection;\n    using Microsoft.Extensions.Options;\n    using System;\n    using System.CodeDom.Compiler;\n    using System.Collections.Generic;\n    using System.Globalization;\n    using System.Runtime.CompilerServices;\n\n    [GeneratedCode("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.9.3103")]\n    file static class BindingExtensions\n    {\n        #region OptionsBuilder<TOptions> extensions.\n        /// <summary>Registers the dependency injection container to bind <typeparamref name="TOptions"/> against the <see cref="IConfiguration"/> obtained from the DI service provider.</summary>\n        [InterceptsLocation(@"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Microsoft\\src\\ConfigBinder\\src\\Program.cs", 21, 14)]\n        public static OptionsBuilder<TOptions> BindConfiguration<TOptions>(this OptionsBuilder<TOptions> optionsBuilder, string configSectionPath, Action<BinderOptions>? configureBinder = null) where TOptions : class\n        {\n            if (optionsBuilder is null)\n            {\n                throw new ArgumentNullException(nameof(optionsBuilder));\n            }\n\n            if (configSectionPath is null)\n            {\n                throw new ArgumentNullException(nameof(configSectionPath));\n            }\n\n            optionsBuilder.Configure<IConfiguration>((instance, config) =>\n            {\n                if (config is null)\n                {\n                    throw new ArgumentNullException(nameof(config));\n                }\n\n                IConfiguration section = string.Equals(string.Empty, configSectionPath, StringComparison.OrdinalIgnoreCase) ? config : config.GetSection(configSectionPath);\n                BindCoreMain(section, instance, typeof(TOptions), configureBinder);\n            });\n\n            optionsBuilder.Services.AddSingleton<IOptionsChangeTokenSource<TOptions>, ConfigurationChangeTokenSource<TOptions>>();\n            return optionsBuilder;\n        }\n        #endregion OptionsBuilder<TOptions> extensions.\n\n        #region Core binding extensions.\n        private readonly static Lazy<HashSet<string>> s_configKeys_MyAppOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "AppDisplayName" });\n\n        public static void BindCoreMain(IConfiguration configuration, object instance, Type type, Action<BinderOptions>? configureOptions)\n        {\n            if (instance is null)\n            {\n                return;\n            }\n\n            if (!HasValueOrChildren(configuration))\n            {\n                return;\n            }\n\n            BinderOptions? binderOptions = GetBinderOptions(configureOptions);\n\n            if (type == typeof(MyAppOptions))\n            {\n                var temp = (MyAppOptions)instance;\n                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);\n                return;\n            }\n\n            throw new NotSupportedException($"Unable to bind to type \'{type}\': generator did not detect the type as input.");\n        }\n\n        public static void BindCore(IConfiguration configuration, ref MyAppOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)\n        {\n            ValidateConfigurationKeys(typeof(MyAppOptions), s_configKeys_MyAppOptions, configuration, binderOptions);\n\n            if (configuration["AppDisplayName"] is string value1)\n            {\n                instance.AppDisplayName = value1;\n            }\n        }\n\n\n        /// <summary>If required by the binder options, validates that there are no unknown keys in the input configuration object.</summary>\n        public static void ValidateConfigurationKeys(Type type, Lazy<HashSet<string>> keys, IConfiguration configuration, BinderOptions? binderOptions)\n        {\n            if (binderOptions?.ErrorOnUnknownConfiguration is true)\n            {\n                List<string>? temp = null;\n        \n                foreach (IConfigurationSection section in configuration.GetChildren())\n                {\n                    if (!keys.Value.Contains(section.Key))\n                    {\n                        (temp ??= new List<string>()).Add($"\'{section.Key}\'");\n                    }\n                }\n        \n                if (temp is not null)\n                {\n                    throw new InvalidOperationException($"\'ErrorOnUnknownConfiguration\' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(", ", temp)}");\n                }\n            }\n        }\n\n        public static bool HasValueOrChildren(IConfiguration configuration)\n        {\n            if ((configuration as IConfigurationSection)?.Value is not null)\n            {\n                return true;\n            }\n            return AsConfigWithChildren(configuration) is not null;\n        }\n\n        public static IConfiguration? AsConfigWithChildren(IConfiguration configuration)\n        {\n            foreach (IConfigurationSection _ in configuration.GetChildren())\n            {\n                return configuration;\n            }\n            return null;\n        }\n\n        public static BinderOptions? GetBinderOptions(Action<BinderOptions>? configureOptions)\n        {\n            if (configureOptions is null)\n            {\n                return null;\n            }\n        \n            BinderOptions binderOptions = new();\n            configureOptions(binderOptions);\n        \n            if (binderOptions.BindNonPublicProperties)\n            {\n                throw new NotSupportedException($"The configuration binding source generator does not support \'BinderOptions.BindNonPublicProperties\'.");\n            }\n        \n            return binderOptions;\n        }\n        #endregion Core binding extensions.\n    }\n}\n\n')),(0,t.kt)("h2",{id:"more-details"},"More details"),(0,t.kt)("p",null,"Csharp Project: See ConfigBinderDemo.csproj from ",(0,t.kt)("a",{target:"_blank",href:e(2096).Z},"/sources/Microsoft.zip")),(0,t.kt)("p",null,"You can see the whole list at",(0,t.kt)("a",{target:"_blank",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/List-of-RSCG"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/List-of-RSCG")))}d.isMDXComponent=!0},2096:(n,i,e)=>{e.d(i,{Z:()=>o});const o=e.p+"assets/files/Microsoft-385cd2ffcf8f095f697f6bd3011bc60a.zip"}}]);