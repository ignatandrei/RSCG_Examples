"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7395],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(4137));const i={},s=void 0,o={unversionedId:"RSCG-Examples/Refit_readme",id:"RSCG-Examples/Refit_readme",title:"Refit_readme",description:"Refit: The automatic type-safe REST library for .NET Core, Xamarin and .NET",source:"@site/docs/RSCG-Examples/Refit_readme.md",sourceDirName:"RSCG-Examples",slug:"/RSCG-Examples/Refit_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/Refit_readme",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RazorBlade",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/RazorBlade_readme"},next:{title:"Rocks",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/Rocks_readme"}},l={},p=[{value:"Refit: The automatic type-safe REST library for .NET Core, Xamarin and .NET",id:"refit-the-automatic-type-safe-rest-library-for-net-core-xamarin-and-net",level:2},{value:"Where does this work?",id:"where-does-this-work",level:3},{value:"SDK Requirements",id:"sdk-requirements",level:3},{value:"Breaking changes in 6.x",id:"breaking-changes-in-6x",level:4},{value:"Updates in 6.3",id:"updates-in-63",level:5},{value:"API Attributes",id:"api-attributes",level:3},{value:"Dynamic Querystring Parameters",id:"dynamic-querystring-parameters",level:3},{value:"Collections as Querystring parameters",id:"collections-as-querystring-parameters",level:3},{value:"Unescape Querystring parameters",id:"unescape-querystring-parameters",level:3},{value:"Body content",id:"body-content",level:3},{value:"Buffering and the <code>Content-Length</code> header",id:"buffering-and-the-content-length-header",level:4},{value:"JSON content",id:"json-content",level:4},{value:"JSON source generator",id:"json-source-generator",level:5},{value:"XML Content",id:"xml-content",level:4},{value:'<a name="form-posts"></a>Form posts',id:"form-posts",level:4},{value:"Setting request headers",id:"setting-request-headers",level:3},{value:"Static headers",id:"static-headers",level:4},{value:"Dynamic headers",id:"dynamic-headers",level:4},{value:"Bearer Authentication",id:"bearer-authentication",level:4},{value:"Reducing header boilerplate with DelegatingHandlers (Authorization headers worked example)",id:"reducing-header-boilerplate-with-delegatinghandlers-authorization-headers-worked-example",level:4},{value:"Redefining headers",id:"redefining-headers",level:4},{value:"Removing headers",id:"removing-headers",level:4},{value:"Passing state into DelegatingHandlers",id:"passing-state-into-delegatinghandlers",level:3},{value:"Support for Polly and Polly.Context",id:"support-for-polly-and-pollycontext",level:4},{value:"Target Interface Type and method info",id:"target-interface-type-and-method-info",level:4},{value:"Multipart uploads",id:"multipart-uploads",level:3},{value:"Retrieving the response",id:"retrieving-the-response",level:3},{value:"Using generic interfaces",id:"using-generic-interfaces",level:3},{value:"Interface inheritance",id:"interface-inheritance",level:3},{value:"Headers inheritance",id:"headers-inheritance",level:4},{value:"Default Interface Methods",id:"default-interface-methods",level:3},{value:"Using HttpClientFactory",id:"using-httpclientfactory",level:3},{value:"Providing a custom HttpClient",id:"providing-a-custom-httpclient",level:3},{value:"Handling exceptions",id:"handling-exceptions",level:3},{value:'<a id="when-returning-taskapiresponset"></a>When returning <code>Task&lt;IApiResponse&gt;</code>, <code>Task&lt;IApiResponse&lt;T&gt;&gt;</code>, or <code>Task&lt;ApiResponse&lt;T&gt;&gt;</code>',id:"when-returning-taskiapiresponse-taskiapiresponset-or-taskapiresponset",level:4},{value:"When returning <code>Task&lt;T&gt;</code>",id:"when-returning-taskt",level:4},{value:"Providing a custom <code>ExceptionFactory</code>",id:"providing-a-custom-exceptionfactory",level:4},{value:"<code>ApiException</code> deconstruction with Serilog",id:"apiexception-deconstruction-with-serilog",level:4}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"refit-the-automatic-type-safe-rest-library-for-net-core-xamarin-and-net"},"Refit: The automatic type-safe REST library for .NET Core, Xamarin and .NET"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/reactiveui/refit/actions/workflows/ci-build.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/reactiveui/refit/actions/workflows/ci-build.yml/badge.svg",alt:"Build"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://codecov.io/github/reactiveui/refit"},(0,r.kt)("img",{parentName:"a",src:"https://codecov.io/github/reactiveui/refit/branch/main/graph/badge.svg?token=2guEgHsDU2",alt:"codecov"}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Refit"),(0,r.kt)("th",{parentName:"tr",align:null},"Refit.HttpClientFactory"),(0,r.kt)("th",{parentName:"tr",align:null},"Refit.Newtonsoft.Json"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"NuGet")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/Refit/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Refit.svg",alt:"NuGet"}))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/Refit.HttpClientFactory/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Refit.HttpClientFactory.svg",alt:"NuGet"}))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/Refit.Newtonsoft.Json/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Refit.Newtonsoft.Json.svg",alt:"NuGet"})))))),(0,r.kt)("p",null,"Refit is a library heavily inspired by Square's\n",(0,r.kt)("a",{parentName:"p",href:"http://square.github.io/retrofit"},"Retrofit")," library, and it turns your REST\nAPI into a live interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IGitHubApi\n{\n    [Get("/users/{user}")]\n    Task<User> GetUser(string user);\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RestService")," class generates an implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"IGitHubApi")," that uses\n",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," to make its calls:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var gitHubApi = RestService.For<IGitHubApi>("https://api.github.com");\nvar octocat = await gitHubApi.GetUser("octocat");\n')),(0,r.kt)("p",null,".NET Core supports registering via HttpClientFactory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'services\n    .AddRefitClient<IGitHubApi>()\n    .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.github.com"));\n')),(0,r.kt)("h1",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#where-does-this-work"},"Where does this work?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#breaking-changes-in-6x"},"Breaking changes in 6.x")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#api-attributes"},"API Attributes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dynamic-querystring-parameters"},"Dynamic Querystring Parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#collections-as-querystring-parameters"},"Collections as Querystring parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#unescape-querystring-parameters"},"Unescape Querystring parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#body-content"},"Body content"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#buffering-and-the-content-length-header"},"Buffering and the Content-Length header")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#json-content"},"JSON content")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#xml-content"},"XML Content")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#form-posts"},"Form posts")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setting-request-headers"},"Setting request headers"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#static-headers"},"Static headers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dynamic-headers"},"Dynamic headers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#bearer-authentication"},"Bearer Authentication")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reducing-header-boilerplate-with-delegatinghandlers-authorization-headers-worked-example"},"Reducing header boilerplate with DelegatingHandlers (Authorization headers worked example)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#redefining-headers"},"Redefining headers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#removing-headers"},"Removing headers")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#passing-state-into-delegatinghandlers"},"Passing state into DelegatingHandlers"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#support-for-polly-and-pollycontext"},"Support for Polly and Polly.Context")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#target-interface-type"},"Target Interface type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#methodinfo-of-the-method-on-the-refit-client-interface-that-was-invoked"},"MethodInfo of the method on the Refit client interface that was invoked")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#multipart-uploads"},"Multipart uploads")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#retrieving-the-response"},"Retrieving the response")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-generic-interfaces"},"Using generic interfaces")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#interface-inheritance"},"Interface inheritance"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#headers-inheritance"},"Headers inheritance")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#default-interface-methods"},"Default Interface Methods")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-httpclientfactory"},"Using HttpClientFactory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#providing-a-custom-httpclient"},"Providing a custom HttpClient")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handling-exceptions"},"Handling exceptions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#when-returning-taskiapiresponse-taskiapiresponset-or-taskapiresponset"},"When returning Task","<","IApiResponse",">",", Task","<","IApiResponse","<","T",">",">",", or Task","<","ApiResponse","<","T",">",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#when-returning-taskt"},"When returning Task","<","T",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#providing-a-custom-exceptionfactory"},"Providing a custom ExceptionFactory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#apiexception-deconstruction-with-serilog"},"ApiException deconstruction with Serilog"))))),(0,r.kt)("h3",{id:"where-does-this-work"},"Where does this work?"),(0,r.kt)("p",null,"Refit currently supports the following platforms and any .NET Standard 2.0 target:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"UWP"),(0,r.kt)("li",{parentName:"ul"},"Xamarin.Android"),(0,r.kt)("li",{parentName:"ul"},"Xamarin.Mac"),(0,r.kt)("li",{parentName:"ul"},"Xamarin.iOS"),(0,r.kt)("li",{parentName:"ul"},"Desktop .NET 4.6.1"),(0,r.kt)("li",{parentName:"ul"},".NET 5 / .NET Core"),(0,r.kt)("li",{parentName:"ul"},"Blazor"),(0,r.kt)("li",{parentName:"ul"},"Uno Platform")),(0,r.kt)("h3",{id:"sdk-requirements"},"SDK Requirements"),(0,r.kt)("p",null,"Refit 6 requires Visual Studio 16.8 or higher, or the .NET SDK 5.0.100 or higher. It can target any .NET Standard 2.0 platform."),(0,r.kt)("p",null,"Refit 6 does not support the old ",(0,r.kt)("inlineCode",{parentName:"p"},"packages.config")," format for NuGet references (as they do not support analyzers/source generators). You must\n",(0,r.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/nuget/migrate-packages-config-to-package-reference/"},"migrate to PackageReference")," to use Refit v6 and later."),(0,r.kt)("h4",{id:"breaking-changes-in-6x"},"Breaking changes in 6.x"),(0,r.kt)("p",null,"Refit 6 makes ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview"},"System.Text.Json")," the default JSON serializer. If you'd like to continue to use ",(0,r.kt)("inlineCode",{parentName:"p"},"Newtonsoft.Json"),", add the ",(0,r.kt)("inlineCode",{parentName:"p"},"Refit.Newtonsoft.Json")," NuGet package and set your ",(0,r.kt)("inlineCode",{parentName:"p"},"ContentSerializer")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"NewtonsoftJsonContentSerializer")," on your ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," instance. ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Text.Json")," is faster and uses less memory, though not all features are supported. The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to?pivots=dotnet-5-0"},"migration guide")," contains more details."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IContentSerializer")," was renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"IHttpContentSerializer")," to better reflect its purpose. Additionally, two of its methods were renamed, ",(0,r.kt)("inlineCode",{parentName:"p"},"SerializeAsync<T>")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"ToHttpContent<T>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DeserializeAsync<T>")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"FromHttpContentAsync<T>"),". Any existing implementations of these will need to be updated, though the changes should be minor."),(0,r.kt)("h5",{id:"updates-in-63"},"Updates in 6.3"),(0,r.kt)("p",null,"Refit 6.3 splits out the XML serialization via ",(0,r.kt)("inlineCode",{parentName:"p"},"XmlContentSerializer")," into a separate package, ",(0,r.kt)("inlineCode",{parentName:"p"},"Refit.Xml"),". This\nis to reduce the dependency size when using Refit with Web Assembly (WASM) applications. If you require XML, add a reference\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"Refit.Xml"),"."),(0,r.kt)("h3",{id:"api-attributes"},"API Attributes"),(0,r.kt)("p",null,"Every method must have an HTTP attribute that provides the request method and\nrelative URL. There are six built-in annotations: Get, Post, Put, Delete, Patch and\nHead. The relative URL of the resource is specified in the annotation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/users/list")]\n')),(0,r.kt)("p",null,"You can also specify query parameters in the URL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/users/list?sort=desc")]\n')),(0,r.kt)("p",null,"A request URL can be updated dynamically using replacement blocks and\nparameters on the method. A replacement block is an alphanumeric string\nsurrounded by { and }."),(0,r.kt)("p",null,"If the name of your parameter doesn't match the name in the URL path, use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"AliasAs")," attribute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/group/{id}/users")]\nTask<List<User>> GroupList([AliasAs("id")] int groupId);\n')),(0,r.kt)("p",null,"A request url can also bind replacement blocks to a custom object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/group/{request.groupId}/users/{request.userId}")]\nTask<List<User>> GroupList(UserGroupRequest request);\n\nclass UserGroupRequest{\n    int groupId { get;set; }\n    int userId { get;set; }\n}\n\n')),(0,r.kt)("p",null,"Parameters that are not specified as a URL substitution will automatically be\nused as query parameters. This is different than Retrofit, where all\nparameters must be explicitly specified."),(0,r.kt)("p",null,"The comparison between parameter name and URL parameter is ",(0,r.kt)("em",{parentName:"p"},"not"),"\ncase-sensitive, so it will work correctly if you name your parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"groupId"),"\nin the path ",(0,r.kt)("inlineCode",{parentName:"p"},"/group/{groupid}/show")," for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/group/{id}/users")]\nTask<List<User>> GroupList([AliasAs("id")] int groupId, [AliasAs("sort")] string sortOrder);\n\nGroupList(4, "desc");\n>>> "/group/4/users?sort=desc"\n')),(0,r.kt)("p",null,"Round-tripping route parameter syntax: Forward slashes aren't encoded when using a double-asterisk (","*","*",") catch-all parameter syntax."),(0,r.kt)("p",null,"During link generation, the routing system encodes the value captured in a double-asterisk (","*","*",") catch-all parameter (for example, {**myparametername}) except the forward slashes."),(0,r.kt)("p",null,"The type of round-tripping route parameter must be string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/search/{**page}")]\nTask<List<Page>> Search(string page);\n\nSearch("admin/products");\n>>> "/search/admin/products"\n')),(0,r.kt)("h3",{id:"dynamic-querystring-parameters"},"Dynamic Querystring Parameters"),(0,r.kt)("p",null,"If you specify an ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," as a query parameter, all public properties which are not null are used as query parameters.\nThis previously only applied to GET requests, but has now been expanded to all HTTP request methods, partly thanks to Twitter's hybrid API that insists on non-GET requests with querystring parameters.\nUse the ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," attribute to change the behavior to 'flatten' your query parameter object. If using this Attribute you can specify values for the Delimiter and the Prefix which are used to 'flatten' the object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MyQueryParams\n{\n    [AliasAs("order")]\n    public string SortOrder { get; set; }\n\n    public int Limit { get; set; }\n\n    public KindOptions Kind { get; set; }\n}\n\npublic enum KindOptions\n{\n    Foo,\n\n    [EnumMember(Value = "bar")]\n    Bar\n}\n\n\n[Get("/group/{id}/users")]\nTask<List<User>> GroupList([AliasAs("id")] int groupId, MyQueryParams params);\n\n[Get("/group/{id}/users")]\nTask<List<User>> GroupListWithAttribute([AliasAs("id")] int groupId, [Query(".","search")] MyQueryParams params);\n\n\nparams.SortOrder = "desc";\nparams.Limit = 10;\nparams.Kind = KindOptions.Bar;\n\nGroupList(4, params)\n>>> "/group/4/users?order=desc&Limit=10&Kind=bar"\n\nGroupListWithAttribute(4, params)\n>>> "/group/4/users?search.order=desc&search.Limit=10&search.Kind=bar"\n')),(0,r.kt)("p",null,"A similar behavior exists if using a Dictionary, but without the advantages of the ",(0,r.kt)("inlineCode",{parentName:"p"},"AliasAs")," attributes and of course no intellisense and/or type safety."),(0,r.kt)("p",null,"You can also specify querystring parameters with ","[Query]"," and have them flattened in non-GET requests, similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Post("/statuses/update.json")]\nTask<Tweet> PostTweet([Query]TweetParams params);\n')),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"TweetParams")," is a POCO, and properties will also support ",(0,r.kt)("inlineCode",{parentName:"p"},"[AliasAs]")," attributes."),(0,r.kt)("h3",{id:"collections-as-querystring-parameters"},"Collections as Querystring parameters"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," attribute to specify format in which collections should be formatted in query string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/users/list")]\nTask Search([Query(CollectionFormat.Multi)]int[] ages);\n\nSearch(new [] {10, 20, 30})\n>>> "/users/list?ages=10&ages=20&ages=30"\n\n[Get("/users/list")]\nTask Search([Query(CollectionFormat.Csv)]int[] ages);\n\nSearch(new [] {10, 20, 30})\n>>> "/users/list?ages=10%2C20%2C30"\n')),(0,r.kt)("p",null,"You can also specify collection format in ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings"),", that will be used by default, unless explicitly defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," attribute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var gitHubApi = RestService.For<IGitHubApi>("https://api.github.com",\n    new RefitSettings {\n        CollectionFormat = CollectionFormat.Multi\n    });\n')),(0,r.kt)("h3",{id:"unescape-querystring-parameters"},"Unescape Querystring parameters"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryUriFormat")," attribute to specify if the query parameters should be url escaped"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/query")]\n[QueryUriFormat(UriFormat.Unescaped)]\nTask Query(string q);\n\nQuery("Select+Id,Name+From+Account")\n>>> "/query?q=Select+Id,Name+From+Account"\n')),(0,r.kt)("h3",{id:"body-content"},"Body content"),(0,r.kt)("p",null,"One of the parameters in your method can be used as the body, by using the\nBody attribute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Post("/users/new")]\nTask CreateUser([Body] User user);\n')),(0,r.kt)("p",null,"There are four possibilities for supplying the body data, depending on the\ntype of the parameter:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the type is ",(0,r.kt)("inlineCode",{parentName:"li"},"Stream"),", the content will be streamed via ",(0,r.kt)("inlineCode",{parentName:"li"},"StreamContent")),(0,r.kt)("li",{parentName:"ul"},"If the type is ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),", the string will be used directly as the content unless ",(0,r.kt)("inlineCode",{parentName:"li"},"[Body(BodySerializationMethod.Json)]")," is set which will send it as a ",(0,r.kt)("inlineCode",{parentName:"li"},"StringContent")),(0,r.kt)("li",{parentName:"ul"},"If the parameter has the attribute ",(0,r.kt)("inlineCode",{parentName:"li"},"[Body(BodySerializationMethod.UrlEncoded)]"),",\nthe content will be URL-encoded (see ",(0,r.kt)("a",{parentName:"li",href:"#form-posts"},"form posts")," below)"),(0,r.kt)("li",{parentName:"ul"},"For all other types, the object will be serialized using the content serializer specified in\nRefitSettings (JSON is the default).")),(0,r.kt)("h4",{id:"buffering-and-the-content-length-header"},"Buffering and the ",(0,r.kt)("inlineCode",{parentName:"h4"},"Content-Length")," header"),(0,r.kt)("p",null,"By default, Refit streams the body content without buffering it. This means you can\nstream a file from disk, for example, without incurring the overhead of loading\nthe whole file into memory. The downside of this is that no ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Length")," header\nis set ",(0,r.kt)("em",{parentName:"p"},"on the request"),". If your API needs you to send a ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Length")," header with\nthe request, you can disable this streaming behavior by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"buffered")," argument\nof the ",(0,r.kt)("inlineCode",{parentName:"p"},"[Body]")," attribute to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Task CreateUser([Body(buffered: true)] User user);\n")),(0,r.kt)("h4",{id:"json-content"},"JSON content"),(0,r.kt)("p",null,"JSON requests and responses are serialized/deserialized using an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"IHttpContentSerializer")," interface. Refit provides two implementations out of the box: ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemTextJsonContentSerializer")," (which is the default JSON serializer) and ",(0,r.kt)("inlineCode",{parentName:"p"},"NewtonsoftJsonContentSerializer"),". The first uses ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Text.Json")," APIs and is focused on high performance and low memory usage, while the latter uses the known ",(0,r.kt)("inlineCode",{parentName:"p"},"Newtonsoft.Json")," library and is more versatile and customizable. You can read more about the two serializers and the main differences between the two ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to"},"at this link"),"."),(0,r.kt)("p",null,"For instance, here is how to create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," instance using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Newtonsoft.Json"),"-based serializer (you'll also need to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"PackageReference")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Refit.Newtonsoft.Json"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var settings = new RefitSettings(new NewtonsoftJsonContentSerializer());\n")),(0,r.kt)("p",null,"If you're using ",(0,r.kt)("inlineCode",{parentName:"p"},"Newtonsoft.Json")," APIs, you can customize their behavior by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"Newtonsoft.Json.JsonConvert.DefaultSettings")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'JsonConvert.DefaultSettings =\n    () => new JsonSerializerSettings() {\n        ContractResolver = new CamelCasePropertyNamesContractResolver(),\n        Converters = {new StringEnumConverter()}\n    };\n\n// Serialized as: {"day":"Saturday"}\nawait PostSomeStuff(new { Day = DayOfWeek.Saturday });\n')),(0,r.kt)("p",null,"As these are global settings they will affect your entire application. It\nmight be beneficial to isolate the settings for calls to a particular API.\nWhen creating a Refit generated live interface, you may optionally pass a\n",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," that will allow you to specify what serializer settings you\nwould like. This allows you to have different serializer settings for separate\nAPIs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var gitHubApi = RestService.For<IGitHubApi>("https://api.github.com",\n    new RefitSettings {\n        ContentSerializer = new NewtonsoftJsonContentSerializer(\n            new JsonSerializerSettings {\n                ContractResolver = new SnakeCasePropertyNamesContractResolver()\n        }\n    )});\n\nvar otherApi = RestService.For<IOtherApi>("https://api.example.com",\n    new RefitSettings {\n        ContentSerializer = new NewtonsoftJsonContentSerializer(\n            new JsonSerializerSettings {\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\n        }\n    )});\n')),(0,r.kt)("p",null,"Property serialization/deserialization can be customised using Json.NET's\nJsonProperty attribute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Foo\n{\n    // Works like [AliasAs("b")] would in form posts (see below)\n    [JsonProperty(PropertyName="b")]\n    public string Bar { get; set; }\n}\n')),(0,r.kt)("h5",{id:"json-source-generator"},"JSON source generator"),(0,r.kt)("p",null,"To apply the benefits of the new ",(0,r.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-source-generator/"},"JSON source generator")," for System.Text.Json added in .NET 6, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemTextJsonContentSerializer")," with a custom instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonSerializerOptions"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var options = new JsonSerializerOptions();\noptions.AddContext<MyJsonSerializerContext>();\n\nvar gitHubApi = RestService.For<IGitHubApi>("https://api.github.com",\n    new RefitSettings {\n        ContentSerializer = new SystemTextJsonContentSerializer(options)\n    });\n')),(0,r.kt)("h4",{id:"xml-content"},"XML Content"),(0,r.kt)("p",null,"XML requests and responses are serialized/deserialized using ",(0,r.kt)("em",{parentName:"p"},"System.Xml.Serialization.XmlSerializer"),".\nBy default, Refit will use JSON content serialization, to use XML content configure the ContentSerializer to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"XmlContentSerializer"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var gitHubApi = RestService.For<IXmlApi>("https://www.w3.org/XML",\n    new RefitSettings {\n        ContentSerializer = new XmlContentSerializer()\n    });\n')),(0,r.kt)("p",null,"Property serialization/deserialization can be customised using   attributes found in the ",(0,r.kt)("em",{parentName:"p"},"System.Xml.Serialization")," namespace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    public class Foo\n    {\n        [XmlElement(Namespace = "https://www.w3.org/XML")]\n        public string Bar { get; set; }\n    }\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"System.Xml.Serialization.XmlSerializer")," provides many options for serializing, those options can be set by providing an ",(0,r.kt)("inlineCode",{parentName:"p"},"XmlContentSerializerSettings")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"XmlContentSerializer")," constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var gitHubApi = RestService.For<IXmlApi>("https://www.w3.org/XML",\n    new RefitSettings {\n        ContentSerializer = new XmlContentSerializer(\n            new XmlContentSerializerSettings\n            {\n                XmlReaderWriterSettings = new XmlReaderWriterSettings()\n                {\n                    ReaderSettings = new XmlReaderSettings\n                    {\n                        IgnoreWhitespace = true\n                    }\n                }\n            }\n        )\n    });\n')),(0,r.kt)("h4",{id:"form-posts"},(0,r.kt)("a",{name:"form-posts"}),"Form posts"),(0,r.kt)("p",null,"For APIs that take form posts (i.e. serialized as ",(0,r.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded"),"),\ninitialize the Body attribute with ",(0,r.kt)("inlineCode",{parentName:"p"},"BodySerializationMethod.UrlEncoded"),"."),(0,r.kt)("p",null,"The parameter can be an ",(0,r.kt)("inlineCode",{parentName:"p"},"IDictionary"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IMeasurementProtocolApi\n{\n    [Post("/collect")]\n    Task Collect([Body(BodySerializationMethod.UrlEncoded)] Dictionary<string, object> data);\n}\n\nvar data = new Dictionary<string, object> {\n    {"v", 1},\n    {"tid", "UA-1234-5"},\n    {"cid", new Guid("d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c")},\n    {"t", "event"},\n};\n\n// Serialized as: v=1&tid=UA-1234-5&cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&t=event\nawait api.Collect(data);\n')),(0,r.kt)("p",null,"Or you can just pass any object and all ",(0,r.kt)("em",{parentName:"p"},"public, readable")," properties will\nbe serialized as form fields in the request. This approach allows you to alias\nproperty names using ",(0,r.kt)("inlineCode",{parentName:"p"},'[AliasAs("whatever")]')," which can help if the API has\ncryptic field names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IMeasurementProtocolApi\n{\n    [Post("/collect")]\n    Task Collect([Body(BodySerializationMethod.UrlEncoded)] Measurement measurement);\n}\n\npublic class Measurement\n{\n    // Properties can be read-only and [AliasAs] isn\'t required\n    public int v { get { return 1; } }\n\n    [AliasAs("tid")]\n    public string WebPropertyId { get; set; }\n\n    [AliasAs("cid")]\n    public Guid ClientId { get; set; }\n\n    [AliasAs("t")]\n    public string Type { get; set; }\n\n    public object IgnoreMe { private get; set; }\n}\n\nvar measurement = new Measurement {\n    WebPropertyId = "UA-1234-5",\n    ClientId = new Guid("d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c"),\n    Type = "event"\n};\n\n// Serialized as: v=1&tid=UA-1234-5&cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&t=event\nawait api.Collect(measurement);\n')),(0,r.kt)("p",null,"If you have a type that has ",(0,r.kt)("inlineCode",{parentName:"p"},"[JsonProperty(PropertyName)]")," attributes setting property aliases, Refit will use those too (",(0,r.kt)("inlineCode",{parentName:"p"},"[AliasAs]")," will take precedence where you have both).\nThis means that the following type will serialize as ",(0,r.kt)("inlineCode",{parentName:"p"},"one=value1&two=value2"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'\npublic class SomeObject\n{\n    [JsonProperty(PropertyName = "one")]\n    public string FirstProperty { get; set; }\n\n    [JsonProperty(PropertyName = "notTwo")]\n    [AliasAs("two")]\n    public string SecondProperty { get; set; }\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," This use of ",(0,r.kt)("inlineCode",{parentName:"p"},"AliasAs")," applies to querystring parameters and form body posts, but not to response objects; for aliasing fields on response objects, you'll still need to use ",(0,r.kt)("inlineCode",{parentName:"p"},'[JsonProperty("full-property-name")]'),"."),(0,r.kt)("h3",{id:"setting-request-headers"},"Setting request headers"),(0,r.kt)("h4",{id:"static-headers"},"Static headers"),(0,r.kt)("p",null,"You can set one or more static request headers for a request applying a ",(0,r.kt)("inlineCode",{parentName:"p"},"Headers"),"\nattribute to the method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Headers("User-Agent: Awesome Octocat App")]\n[Get("/users/{user}")]\nTask<User> GetUser(string user);\n')),(0,r.kt)("p",null,"Static headers can also be added to ",(0,r.kt)("em",{parentName:"p"},"every request in the API")," by applying the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Headers")," attribute to the interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Headers("User-Agent: Awesome Octocat App")]\npublic interface IGitHubApi\n{\n    [Get("/users/{user}")]\n    Task<User> GetUser(string user);\n\n    [Post("/users/new")]\n    Task CreateUser([Body] User user);\n}\n')),(0,r.kt)("h4",{id:"dynamic-headers"},"Dynamic headers"),(0,r.kt)("p",null,"If the content of the header needs to be set at runtime, you can add a header\nwith a dynamic value to a request by applying a ",(0,r.kt)("inlineCode",{parentName:"p"},"Header")," attribute to a parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/users/{user}")]\nTask<User> GetUser(string user, [Header("Authorization")] string authorization);\n\n// Will add the header "Authorization: token OAUTH-TOKEN" to the request\nvar user = await GetUser("octocat", "token OAUTH-TOKEN");\n')),(0,r.kt)("p",null,"Adding an ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header is such a common use case that you can add an access token to a request by applying an ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorize")," attribute to a parameter and optionally specifying the scheme:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Get("/users/{user}")]\nTask<User> GetUser(string user, [Authorize("Bearer")] string token);\n\n// Will add the header "Authorization: Bearer OAUTH-TOKEN}" to the request\nvar user = await GetUser("octocat", "OAUTH-TOKEN");\n\n//note: the scheme defaults to Bearer if none provided\n')),(0,r.kt)("p",null,"If you need to set multiple headers at runtime, you can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"IDictionary<string, string>"),"\nand apply a ",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderCollection")," attribute to the parameter and it will inject the headers into the request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'\n[Get("/users/{user}")]\nTask<User> GetUser(string user, [HeaderCollection] IDictionary<string, string> headers);\n\nvar headers = new Dictionary<string, string> {{"Authorization","Bearer tokenGoesHere"}, {"X-Tenant-Id","123"}};\nvar user = await GetUser("octocat", headers);\n')),(0,r.kt)("h4",{id:"bearer-authentication"},"Bearer Authentication"),(0,r.kt)("p",null,"Most APIs need some sort of Authentication. The most common is OAuth Bearer authentication. A header is added to each request of the form: ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization: Bearer <token>"),". Refit makes it easy to insert your logic to get the token however your app needs, so you don't have to pass a token into each method."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},'[Headers("Authorization: Bearer")]')," to the interface or methods which need the token."),(0,r.kt)("li",{parentName:"ol"},"Set ",(0,r.kt)("inlineCode",{parentName:"li"},"AuthorizationHeaderValueGetter")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"RefitSettings")," instance. Refit will call your delegate each time it needs to obtain the token, so it's a good idea for your mechanism to cache the token value for some period within the token lifetime.")),(0,r.kt)("h4",{id:"reducing-header-boilerplate-with-delegatinghandlers-authorization-headers-worked-example"},"Reducing header boilerplate with DelegatingHandlers (Authorization headers worked example)"),(0,r.kt)("p",null,"Although we make provisions for adding dynamic headers at runtime directly in Refit,\nmost use-cases would likely benefit from registering a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatingHandler")," in order to inject the headers as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," middleware pipeline\nthus removing the need to add lots of ",(0,r.kt)("inlineCode",{parentName:"p"},"[Header]")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[HeaderCollection]")," attributes."),(0,r.kt)("p",null,"In the example above we are leveraging a ",(0,r.kt)("inlineCode",{parentName:"p"},"[HeaderCollection]")," parameter to inject an ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Tenant-Id")," header.\nThis is quite a common scenario if you are integrating with a 3rd party that uses OAuth2. While it's ok for the occasional endpoint,\nit would be quite cumbersome if we had to add that boilerplate to every method in our interface."),(0,r.kt)("p",null,"In this example we will assume our application is a multi-tenant application that is able to pull information about a tenant through\nsome interface ",(0,r.kt)("inlineCode",{parentName:"p"},"ITenantProvider")," and has a data store ",(0,r.kt)("inlineCode",{parentName:"p"},"IAuthTokenStore")," that can be used to retrieve an auth token to attach to the outbound request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'\n //Custom delegating handler for adding Auth headers to outbound requests\n class AuthHeaderHandler : DelegatingHandler\n {\n     private readonly ITenantProvider tenantProvider;\n     private readonly IAuthTokenStore authTokenStore;\n\n    public AuthHeaderHandler(ITenantProvider tenantProvider, IAuthTokenStore authTokenStore)\n    {\n         this.tenantProvider = tenantProvider ?? throw new ArgumentNullException(nameof(tenantProvider));\n         this.authTokenStore = authTokenStore ?? throw new ArgumentNullException(nameof(authTokenStore));\n         InnerHandler = new HttpClientHandler();\n    }\n\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        var token = await authTokenStore.GetToken();\n\n        //potentially refresh token here if it has expired etc.\n\n        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);\n        request.Headers.Add("X-Tenant-Id", tenantProvider.GetTenantId());\n\n        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);\n    }\n}\n\n//Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddTransient<ITenantProvider, TenantProvider>();\n    services.AddTransient<IAuthTokenStore, AuthTokenStore>();\n    services.AddTransient<AuthHeaderHandler>();\n\n    //this will add our refit api implementation with an HttpClient\n    //that is configured to add auth headers to all requests\n\n    //note: AddRefitClient<T> requires a reference to Refit.HttpClientFactory\n    //note: the order of delegating handlers is important and they run in the order they are added!\n\n    services.AddRefitClient<ISomeThirdPartyApi>()\n        .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.example.com"))\n        .AddHttpMessageHandler<AuthHeaderHandler>();\n        //you could add Polly here to handle HTTP 429 / HTTP 503 etc\n}\n\n//Your application code\npublic class SomeImportantBusinessLogic\n{\n    private ISomeThirdPartyApi thirdPartyApi;\n\n    public SomeImportantBusinessLogic(ISomeThirdPartyApi thirdPartyApi)\n    {\n        this.thirdPartyApi = thirdPartyApi;\n    }\n\n    public async Task DoStuffWithUser(string username)\n    {\n        var user = await thirdPartyApi.GetUser(username);\n        //do your thing\n    }\n}\n')),(0,r.kt)("p",null,"If you aren't using dependency injection then you could achieve the same thing by doing something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var api = RestService.For<ISomeThirdPartyApi>(new HttpClient(new AuthHeaderHandler(tenantProvider, authTokenStore))\n    {\n        BaseAddress = new Uri("https://api.example.com")\n    }\n);\n\nvar user = await thirdPartyApi.GetUser(username);\n//do your thing\n')),(0,r.kt)("h4",{id:"redefining-headers"},"Redefining headers"),(0,r.kt)("p",null,"Unlike Retrofit, where headers do not overwrite each other and are all added to\nthe request regardless of how many times the same header is defined, Refit takes\na similar approach to the approach ASP.NET MVC takes with action filters ","\u2014","\n",(0,r.kt)("strong",{parentName:"p"},"redefining a header will replace it"),", in the following order of precedence:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Headers")," attribute on the interface ",(0,r.kt)("em",{parentName:"li"},"(lowest priority)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Headers")," attribute on the method"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Header")," attribute or ",(0,r.kt)("inlineCode",{parentName:"li"},"HeaderCollection")," attribute on a method parameter ",(0,r.kt)("em",{parentName:"li"},"(highest priority)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Headers("X-Emoji: :rocket:")]\npublic interface IGitHubApi\n{\n    [Get("/users/list")]\n    Task<List> GetUsers();\n\n    [Get("/users/{user}")]\n    [Headers("X-Emoji: :smile_cat:")]\n    Task<User> GetUser(string user);\n\n    [Post("/users/new")]\n    [Headers("X-Emoji: :metal:")]\n    Task CreateUser([Body] User user, [Header("X-Emoji")] string emoji);\n}\n\n// X-Emoji: :rocket:\nvar users = await GetUsers();\n\n// X-Emoji: :smile_cat:\nvar user = await GetUser("octocat");\n\n// X-Emoji: :trollface:\nawait CreateUser(user, ":trollface:");\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," This redefining behavior only applies to headers ",(0,r.kt)("em",{parentName:"p"},"with the same name"),". Headers with different names are not replaced. The following code will result in all headers being included:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Headers("Header-A: 1")]\npublic interface ISomeApi\n{\n    [Headers("Header-B: 2")]\n    [Post("/post")]\n    Task PostTheThing([Header("Header-C")] int c);\n}\n\n// Header-A: 1\n// Header-B: 2\n// Header-C: 3\nvar user = await api.PostTheThing(3);\n')),(0,r.kt)("h4",{id:"removing-headers"},"Removing headers"),(0,r.kt)("p",null,"Headers defined on an interface or method can be removed by redefining\na static header without a value (i.e. without ",(0,r.kt)("inlineCode",{parentName:"p"},": <value>"),") or passing ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," for\na dynamic header. ",(0,r.kt)("em",{parentName:"p"},"Empty strings will be included as empty headers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Headers("X-Emoji: :rocket:")]\npublic interface IGitHubApi\n{\n    [Get("/users/list")]\n    [Headers("X-Emoji")] // Remove the X-Emoji header\n    Task<List> GetUsers();\n\n    [Get("/users/{user}")]\n    [Headers("X-Emoji:")] // Redefine the X-Emoji header as empty\n    Task<User> GetUser(string user);\n\n    [Post("/users/new")]\n    Task CreateUser([Body] User user, [Header("X-Emoji")] string emoji);\n}\n\n// No X-Emoji header\nvar users = await GetUsers();\n\n// X-Emoji:\nvar user = await GetUser("octocat");\n\n// No X-Emoji header\nawait CreateUser(user, null);\n\n// X-Emoji:\nawait CreateUser(user, "");\n')),(0,r.kt)("h3",{id:"passing-state-into-delegatinghandlers"},"Passing state into DelegatingHandlers"),(0,r.kt)("p",null,"If there is runtime state that you need to pass to a ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatingHandler")," you can add a property with a dynamic value to the underlying ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Properties"),"\nby applying a ",(0,r.kt)("inlineCode",{parentName:"p"},"Property")," attribute to a parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IGitHubApi\n{\n    [Post("/users/new")]\n    Task CreateUser([Body] User user, [Property("SomeKey")] string someValue);\n\n    [Post("/users/new")]\n    Task CreateUser([Body] User user, [Property] string someOtherKey);\n}\n')),(0,r.kt)("p",null,"The attribute constructor optionally takes a string which becomes the key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Properties")," dictionary.\nIf no key is explicitly defined then the name of the parameter becomes the key.\nIf a key is defined multiple times the value in ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Properties")," will be overwritten.\nThe parameter itself can be any ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),". Properties can be accessed inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatingHandler")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'class RequestPropertyHandler : DelegatingHandler\n{\n    public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {}\n\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        // See if the request has a the property\n        if(request.Properties.ContainsKey("SomeKey"))\n        {\n            var someProperty = request.Properties["SomeKey"];\n            //do stuff\n        }\n\n        if(request.Properties.ContainsKey("someOtherKey"))\n        {\n            var someOtherProperty = request.Properties["someOtherKey"];\n            //do stuff\n        }\n\n        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);\n    }\n}\n')),(0,r.kt)("p",null,"Note: in .NET 5 ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Properties")," has been marked ",(0,r.kt)("inlineCode",{parentName:"p"},"Obsolete")," and Refit will instead populate the value into the new ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Options"),"."),(0,r.kt)("h4",{id:"support-for-polly-and-pollycontext"},"Support for Polly and Polly.Context"),(0,r.kt)("p",null,"Because Refit supports ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClientFactory")," it is possible to configure Polly policies on your HttpClient.\nIf your policy makes use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context")," this can be passed via Refit by adding ",(0,r.kt)("inlineCode",{parentName:"p"},'[Property("PolicyExecutionContext")] Polly.Context context'),"\nas behind the scenes ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context")," is simply stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Properties")," under the key ",(0,r.kt)("inlineCode",{parentName:"p"},"PolicyExecutionContext")," and is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context"),". It's only recommended to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context")," this way if your use case requires that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context")," be initialized with dynamic content only known at runtime. If your ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context")," only requires the same content every time (e.g an ",(0,r.kt)("inlineCode",{parentName:"p"},"ILogger")," that you want to use to log from inside your policies) a cleaner approach is to inject the ",(0,r.kt)("inlineCode",{parentName:"p"},"Polly.Context")," via a ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegatingHandler")," as described in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/reactiveui/refit/issues/801#issuecomment-1137318526"},"#801")),(0,r.kt)("h4",{id:"target-interface-type-and-method-info"},"Target Interface Type and method info"),(0,r.kt)("p",null,"There may be times when you want to know what the target interface type is of the Refit instance. An example is where you\nhave a derived interface that implements a common base like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IGetAPI<TEntity>\n{\n    [Get("/{key}")]\n    Task<TEntity> Get(long key);\n}\n\npublic interface IUsersAPI : IGetAPI<User>\n{\n}\n\npublic interface IOrdersAPI : IGetAPI<Order>\n{\n}\n')),(0,r.kt)("p",null,"You can access the concrete type of the interface for use in a handler, such as to alter the URL of the request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'class RequestPropertyHandler : DelegatingHandler\n{\n    public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {}\n\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        // Get the type of the target interface\n        Type interfaceType = (Type)request.Properties[HttpMessageRequestOptions.InterfaceType];\n\n        var builder = new UriBuilder(request.RequestUri);\n        // Alter the Path in some way based on the interface or an attribute on it\n        builder.Path = $"/{interfaceType.Name}{builder.Path}";\n        // Set the new Uri on the outgoing message\n        request.RequestUri = builder.Uri;\n\n        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);\n    }\n}\n')),(0,r.kt)("p",null,"The full method information (",(0,r.kt)("inlineCode",{parentName:"p"},"RestMethodInfo"),") is also always available in the request options. The ",(0,r.kt)("inlineCode",{parentName:"p"},"RestMethodInfo")," contains more information about the method being called such as the full ",(0,r.kt)("inlineCode",{parentName:"p"},"MethodInfo")," when using reflection is needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'class RequestPropertyHandler : DelegatingHandler\n{\n    public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {}\n\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        // Get the method info\n        if (request.Options.TryGetValue(HttpRequestMessageOptions.RestMethodInfoKey, out RestMethodInfo restMethodInfo))\n        {\n            var builder = new UriBuilder(request.RequestUri);\n            // Alter the Path in some way based on the method info or an attribute on it\n            builder.Path = $"/{restMethodInfo.MethodInfo.Name}{builder.Path}";\n            // Set the new Uri on the outgoing message\n            request.RequestUri = builder.Uri;\n        }\n\n        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);\n    }\n}\n')),(0,r.kt)("p",null,"Note: in .NET 5 ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Properties")," has been marked ",(0,r.kt)("inlineCode",{parentName:"p"},"Obsolete")," and Refit will instead populate the value into the new ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessage.Options"),". Refit provides ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessageOptions.InterfaceTypeKey")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpRequestMessageOptions.RestMethodInfoKey")," to respectively access the interface type and REST method info from the options."),(0,r.kt)("h3",{id:"multipart-uploads"},"Multipart uploads"),(0,r.kt)("p",null,"Methods decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"Multipart")," attribute will be submitted with multipart content type.\nAt this time, multipart methods support the following parameter types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"string (parameter name will be used as name and string value as value)"),(0,r.kt)("li",{parentName:"ul"},"byte array"),(0,r.kt)("li",{parentName:"ul"},"Stream"),(0,r.kt)("li",{parentName:"ul"},"FileInfo")),(0,r.kt)("p",null,"Name of the field in the multipart data priority precedence:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"multipartItem.Name if specified and not null (optional); dynamic, allows naming form data part at execution time."),(0,r.kt)("li",{parentName:"ul"},"[AliasAs]"," attribute  (optional) that decorate the streamPart parameter in the method signature (see below); static, defined in code."),(0,r.kt)("li",{parentName:"ul"},"MultipartItem parameter name (default) as defined in the method signature; static, defined in code.")),(0,r.kt)("p",null,"A custom boundary can be specified with an optional string parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Multipart")," attribute. If left empty, this defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"----MyGreatBoundary"),"."),(0,r.kt)("p",null,"To specify the file name and content type for byte array (",(0,r.kt)("inlineCode",{parentName:"p"},"byte[]"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FileInfo")," parameters, use of a wrapper class is required.\nThe wrapper classes for these types are ",(0,r.kt)("inlineCode",{parentName:"p"},"ByteArrayPart"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamPart")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FileInfoPart"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface ISomeApi\n{\n    [Multipart]\n    [Post("/users/{id}/photo")]\n    Task UploadPhoto(int id, [AliasAs("myPhoto")] StreamPart stream);\n}\n')),(0,r.kt)("p",null,"To pass a Stream to this method, construct a StreamPart object like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'someApiInstance.UploadPhoto(id, new StreamPart(myPhotoStream, "photo.jpg", "image/jpeg"));\n')),(0,r.kt)("p",null,"Note: The AttachmentName attribute that was previously described in this section has been deprecated and its use is not recommended."),(0,r.kt)("h3",{id:"retrieving-the-response"},"Retrieving the response"),(0,r.kt)("p",null,"Note that in Refit unlike in Retrofit, there is no option for a synchronous\nnetwork request - all requests must be async, either via ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," or via\n",(0,r.kt)("inlineCode",{parentName:"p"},"IObservable"),". There is also no option to create an async method via a Callback\nparameter unlike Retrofit, because we live in the async/await future."),(0,r.kt)("p",null,"Similarly to how body content changes via the parameter type, the return type\nwill determine the content returned."),(0,r.kt)("p",null,"Returning Task without a type parameter will discard the content and solely\ntell you whether or not the call succeeded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Post("/users/new")]\nTask CreateUser([Body] User user);\n\n// This will throw if the network call fails\nawait CreateUser(someUser);\n')),(0,r.kt)("p",null,"If the type parameter is 'HttpResponseMessage' or 'string', the raw response\nmessage or the content as a string will be returned respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// Returns the content as a string (i.e. the JSON data)\n[Get("/users/{user}")]\nTask<string> GetUser(string user);\n\n// Returns the raw response, as an IObservable that can be used with the\n// Reactive Extensions\n[Get("/users/{user}")]\nIObservable<HttpResponseMessage> GetUser(string user);\n')),(0,r.kt)("p",null,"There is also a generic wrapper class called ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiResponse<T>")," that can be used as a return type. Using this class as a return type allows you to retrieve not just the content as an object, but also any metadata associated with the request/response. This includes information such as response headers, the http status code and reason phrase (e.g. 404 Not Found), the response version, the original request message that was sent and in the case of an error, an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException")," object containing details of the error. Following are some examples of how you can retrieve the response metadata."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'//Returns the content within a wrapper class containing metadata about the request/response\n[Get("/users/{user}")]\nTask<ApiResponse<User>> GetUser(string user);\n\n//Calling the API\nvar response = await gitHubApi.GetUser("octocat");\n\n//Getting the status code (returns a value from the System.Net.HttpStatusCode enumeration)\nvar httpStatus = response.StatusCode;\n\n//Determining if a success status code was received\nif(response.IsSuccessStatusCode)\n{\n    //YAY! Do the thing...\n}\n\n//Retrieving a well-known header value (e.g. "Server" header)\nvar serverHeaderValue = response.Headers.Server != null ? response.Headers.Server.ToString() : string.Empty;\n\n//Retrieving a custom header value\nvar customHeaderValue = string.Join(\',\', response.Headers.GetValues("A-Custom-Header"));\n\n//Looping through all the headers\nforeach(var header in response.Headers)\n{\n    var headerName = header.Key;\n    var headerValue = string.Join(\',\', header.Value);\n}\n\n//Finally, retrieving the content in the response body as a strongly-typed object\nvar user = response.Content;\n')),(0,r.kt)("h3",{id:"using-generic-interfaces"},"Using generic interfaces"),(0,r.kt)("p",null,"When using something like ASP.NET Web API, it's a fairly common pattern to have a whole stack of CRUD REST services. Refit now supports these, allowing you to define a single API interface with a generic type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IReallyExcitingCrudApi<T, in TKey> where T : class\n{\n    [Post("")]\n    Task<T> Create([Body] T payload);\n\n    [Get("")]\n    Task<List<T>> ReadAll();\n\n    [Get("/{key}")]\n    Task<T> ReadOne(TKey key);\n\n    [Put("/{key}")]\n    Task Update(TKey key, [Body]T payload);\n\n    [Delete("/{key}")]\n    Task Delete(TKey key);\n}\n')),(0,r.kt)("p",null,"Which can be used like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// The "/users" part here is kind of important if you want it to work for more\n// than one type (unless you have a different domain for each type)\nvar api = RestService.For<IReallyExcitingCrudApi<User, string>>("http://api.example.com/users");\n')),(0,r.kt)("h3",{id:"interface-inheritance"},"Interface inheritance"),(0,r.kt)("p",null,"When multiple services that need to be kept separate share a number of APIs, it is possible to leverage interface inheritance to avoid having to define the same Refit methods multiple times in different services:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IBaseService\n{\n    [Get("/resources")]\n    Task<Resource> GetResource(string id);\n}\n\npublic interface IDerivedServiceA : IBaseService\n{\n    [Delete("/resources")]\n    Task DeleteResource(string id);\n}\n\npublic interface IDerivedServiceB : IBaseService\n{\n    [Post("/resources")]\n    Task<string> AddResource([Body] Resource resource);\n}\n')),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"IDerivedServiceA")," interface will expose both the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetResource")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DeleteResource")," APIs, while ",(0,r.kt)("inlineCode",{parentName:"p"},"IDerivedServiceB")," will expose ",(0,r.kt)("inlineCode",{parentName:"p"},"GetResource")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AddResource"),"."),(0,r.kt)("h4",{id:"headers-inheritance"},"Headers inheritance"),(0,r.kt)("p",null,"When using inheritance, existing header attributes will be passed along as well, and the inner-most ones will have precedence:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Headers("User-Agent: AAA")]\npublic interface IAmInterfaceA\n{\n    [Get("/get?result=Ping")]\n    Task<string> Ping();\n}\n\n[Headers("User-Agent: BBB")]\npublic interface IAmInterfaceB : IAmInterfaceA\n{\n    [Get("/get?result=Pang")]\n    [Headers("User-Agent: PANG")]\n    Task<string> Pang();\n\n    [Get("/get?result=Foo")]\n    Task<string> Foo();\n}\n')),(0,r.kt)("p",null,"Here, ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceB.Pang()")," will use ",(0,r.kt)("inlineCode",{parentName:"p"},"PANG")," as its user agent, while ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceB.Foo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceB.Ping")," will use ",(0,r.kt)("inlineCode",{parentName:"p"},"BBB"),".\nNote that if ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceB")," didn't have a header attribute, ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo")," would then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"AAA")," value inherited from ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceA"),".\nIf an interface is inheriting more than one interface, the order of precedence is the same as the one in which the inherited interfaces are declared:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IAmInterfaceC : IAmInterfaceA, IAmInterfaceB\n{\n    [Get("/get?result=Foo")]\n    Task<string> Foo();\n}\n')),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceC.Foo")," would use the header attribute inherited from ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceA"),", if present, or the one inherited from ",(0,r.kt)("inlineCode",{parentName:"p"},"IAmInterfaceB"),", and so on for all the declared interfaces."),(0,r.kt)("h3",{id:"default-interface-methods"},"Default Interface Methods"),(0,r.kt)("p",null,"Starting with C# 8.0, default interface methods (a.k.a. DIMs) can be defined on interfaces. Refit interfaces can provide additional logic using DIMs, optionally combined with private and/or static helper methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public interface IApiClient\n{\n    // implemented by Refit but not exposed publicly\n    [Get("/get")]\n    internal Task<string> GetInternal();\n    // Publicly available with added logic applied to the result from the API call\n    public async Task<string> Get()\n        => FormatResponse(await GetInternal());\n    private static String FormatResponse(string response)\n        => $"The response is: {response}";\n}\n')),(0,r.kt)("p",null,"The type generated by Refit will implement the method ",(0,r.kt)("inlineCode",{parentName:"p"},"IApiClient.GetInternal"),". If additional logic is required immediately before or after its invocation, it shouldn't be exposed directly and can thus be hidden from consumers by being marked as ",(0,r.kt)("inlineCode",{parentName:"p"},"internal"),".\nThe default interface method ",(0,r.kt)("inlineCode",{parentName:"p"},"IApiClient.Get")," will be inherited by all types implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"IApiClient"),", including - of course - the type generated by Refit.\nConsumers of the ",(0,r.kt)("inlineCode",{parentName:"p"},"IApiClient")," will call the public ",(0,r.kt)("inlineCode",{parentName:"p"},"Get")," method and profit from the additional logic provided in its implementation (optionally, in this case, with the help of the private static helper ",(0,r.kt)("inlineCode",{parentName:"p"},"FormatResponse"),").\nTo support runtimes without DIM-support (.NET Core 2.x and below or .NET Standard 2.0 and below), two additional types would be required for the same solution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'internal interface IApiClientInternal\n{\n    [Get("/get")]\n    Task<string> Get();\n}\npublic interface IApiClient\n{\n    public Task<string> Get();\n}\ninternal class ApiClient : IApiClient\n{\n    private readonly IApiClientInternal client;\n    public ApiClient(IApiClientInternal client) => this.client = client;\n    public async Task<string> Get()\n        => FormatResponse(await client.Get());\n    private static String FormatResponse(string response)\n        => $"The response is: {response}";\n}\n')),(0,r.kt)("h3",{id:"using-httpclientfactory"},"Using HttpClientFactory"),(0,r.kt)("p",null,"Refit has first class support for the ASP.Net Core 2.1 HttpClientFactory. Add a reference to ",(0,r.kt)("inlineCode",{parentName:"p"},"Refit.HttpClientFactory")," and call\nthe provided extension method in your ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigureServices")," method to configure your Refit interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'services.AddRefitClient<IWebApi>()\n        .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.example.com"));\n        // Add additional IHttpClientBuilder chained methods as required here:\n        // .AddHttpMessageHandler<MyHandler>()\n        // .SetHandlerLifetime(TimeSpan.FromMinutes(2));\n')),(0,r.kt)("p",null,"Optionally, a ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," object can be included:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var settings = new RefitSettings();\n// Configure refit settings here\n\nservices.AddRefitClient<IWebApi>(settings)\n        .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.example.com"));\n        // Add additional IHttpClientBuilder chained methods as required here:\n        // .AddHttpMessageHandler<MyHandler>()\n        // .SetHandlerLifetime(TimeSpan.FromMinutes(2));\n\n// or injected from the container\nservices.AddRefitClient<IWebApi>(provider => new RefitSettings() { /* configure settings */ })\n        .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.example.com"));\n        // Add additional IHttpClientBuilder chained methods as required here:\n        // .AddHttpMessageHandler<MyHandler>()\n        // .SetHandlerLifetime(TimeSpan.FromMinutes(2));\n\n')),(0,r.kt)("p",null,"Note that some of the properties of ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," will be ignored because the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClientHandlers")," will be managed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClientFactory")," instead of Refit."),(0,r.kt)("p",null,"You can then get the api interface using constructor injection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class HomeController : Controller\n{\n    public HomeController(IWebApi webApi)\n    {\n        _webApi = webApi;\n    }\n\n    private readonly IWebApi _webApi;\n\n    public async Task<IActionResult> Index(CancellationToken cancellationToken)\n    {\n        var thing = await _webApi.GetSomethingWeNeed(cancellationToken);\n        return View(thing);\n    }\n}\n")),(0,r.kt)("h3",{id:"providing-a-custom-httpclient"},"Providing a custom HttpClient"),(0,r.kt)("p",null,"You can supply a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," instance by simply passing it as a parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RestService.For<T>")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'RestService.For<ISomeApi>(new HttpClient()\n{\n    BaseAddress = new Uri("https://www.someapi.com/api/")\n});\n')),(0,r.kt)("p",null,"However, when supplying a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," instance the following ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings")," properties will not work:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AuthorizationHeaderValueGetter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HttpMessageHandlerFactory"))),(0,r.kt)("p",null,"If you still want to be able to configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"HtttpClient")," instance that ",(0,r.kt)("inlineCode",{parentName:"p"},"Refit")," provides while still making use of the above settings, simply expose the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," on the API interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'interface ISomeApi\n{\n    // This will automagically be populated by Refit if the property exists\n    HttpClient Client { get; }\n\n    [Headers("Authorization: Bearer")]\n    [Get("/endpoint")]\n    Task<string> SomeApiEndpoint();\n}\n')),(0,r.kt)("p",null,"Then, after creating the REST service, you can set any ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," property you want, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Timeout"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'SomeApi = RestService.For<ISomeApi>("https://www.someapi.com/api/", new RefitSettings()\n{\n    AuthorizationHeaderValueGetter = (rq, ct) => GetTokenAsync()\n});\n\nSomeApi.Client.Timeout = timeout;\n')),(0,r.kt)("h3",{id:"handling-exceptions"},"Handling exceptions"),(0,r.kt)("p",null,"Refit has different exception handling behavior depending on if your Refit interface methods return ",(0,r.kt)("inlineCode",{parentName:"p"},"Task<T>")," or if they return ",(0,r.kt)("inlineCode",{parentName:"p"},"Task<IApiResponse>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Task<IApiResponse<T>>"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"Task<ApiResponse<T>>"),"."),(0,r.kt)("h4",{id:"when-returning-taskiapiresponse-taskiapiresponset-or-taskapiresponset"},(0,r.kt)("a",{id:"when-returning-taskapiresponset"}),"When returning ",(0,r.kt)("inlineCode",{parentName:"h4"},"Task<IApiResponse>"),", ",(0,r.kt)("inlineCode",{parentName:"h4"},"Task<IApiResponse<T>>"),", or ",(0,r.kt)("inlineCode",{parentName:"h4"},"Task<ApiResponse<T>>")),(0,r.kt)("p",null,"Refit traps any ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException")," raised by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExceptionFactory")," when processing the response, and any errors that occur when attempting to deserialize the response to ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiResponse<T>"),", and populates the exception into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," property on ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiResponse<T>")," without throwing the exception."),(0,r.kt)("p",null,"You can then decide what to do like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var response = await _myRefitClient.GetSomeStuff();\nif(response.IsSuccessStatusCode)\n{\n   //do your thing\n}\nelse\n{\n   _logger.LogError(response.Error, response.Error.Content);\n}\n")),(0,r.kt)("h4",{id:"when-returning-taskt"},"When returning ",(0,r.kt)("inlineCode",{parentName:"h4"},"Task<T>")),(0,r.kt)("p",null,"Refit throws any ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException")," raised by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExceptionFactory")," when processing the response and any errors that occur when attempting to deserialize the response to ",(0,r.kt)("inlineCode",{parentName:"p"},"Task<T>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// ...\ntry\n{\n   var result = await awesomeApi.GetFooAsync("bar");\n}\ncatch (ApiException exception)\n{\n   //exception handling\n}\n// ...\n')),(0,r.kt)("p",null,"Refit can also throw ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationApiException")," instead which in addition to the information present on ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException")," also contains ",(0,r.kt)("inlineCode",{parentName:"p"},"ProblemDetails")," when the service implements the ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7807"},"RFC 7807")," specification for problem details and the response content type is ",(0,r.kt)("inlineCode",{parentName:"p"},"application/problem+json")),(0,r.kt)("p",null,"For specific information on the problem details of the validation exception, simply catch ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidationApiException"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// ...\ntry\n{\n   var result = await awesomeApi.GetFooAsync("bar");\n}\ncatch (ValidationApiException validationException)\n{\n   // handle validation here by using validationException.Content,\n   // which is type of ProblemDetails according to RFC 7807\n\n   // If the response contains additional properties on the problem details,\n   // they will be added to the validationException.Content.Extensions collection.\n}\ncatch (ApiException exception)\n{\n   // other exception handling\n}\n// ...\n')),(0,r.kt)("h4",{id:"providing-a-custom-exceptionfactory"},"Providing a custom ",(0,r.kt)("inlineCode",{parentName:"h4"},"ExceptionFactory")),(0,r.kt)("p",null,"You can also override default exceptions behavior that are raised by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExceptionFactory")," when processing the result by providing a custom exception factory in ",(0,r.kt)("inlineCode",{parentName:"p"},"RefitSettings"),". For example, you can suppress all exceptions with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var nullTask = Task.FromResult<Exception>(null);\n\nvar gitHubApi = RestService.For<IGitHubApi>("https://api.github.com",\n    new RefitSettings {\n        ExceptionFactory = httpResponse => nullTask;\n    });\n')),(0,r.kt)("p",null,"Note that exceptions raised when attempting to deserialize the response are not affected by this."),(0,r.kt)("h4",{id:"apiexception-deconstruction-with-serilog"},(0,r.kt)("inlineCode",{parentName:"h4"},"ApiException")," deconstruction with Serilog"),(0,r.kt)("p",null,"For users of ",(0,r.kt)("a",{parentName:"p",href:"https://serilog.net"},"Serilog"),", you can enrich the logging of ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiException")," using the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Serilog.Exceptions.Refit"},"Serilog.Exceptions.Refit")," NuGet package. Details of how to\nintegrate this package into your applications can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/RehanSaeed/Serilog.Exceptions#serilogexceptionsrefit"},"here"),"."))}c.isMDXComponent=!0}}]);