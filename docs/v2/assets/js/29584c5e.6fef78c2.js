"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6796],{7027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:12534,title:"12534 - Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",description:"Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",slug:"/Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator"},s="Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",i={unversionedId:"Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",id:"Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",title:"12534 - Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",description:"Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",source:"@site/docs/Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator.md",sourceDirName:"Microsoft",slug:"/Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",permalink:"/RSCG_Examples/v2/docs/Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",draft:!1,tags:[],version:"current",sidebarPosition:12534,frontMatter:{sidebar_position:12534,title:"12534 - Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",description:"Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator",slug:"/Microsoft/Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator"},sidebar:"tutorialSidebar",previous:{title:"11285 - Microsoft.Extensions.Options.SourceGeneration_Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",permalink:"/RSCG_Examples/v2/docs/Microsoft/Microsoft.Extensions.Options.SourceGeneration_Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"},next:{title:"14805 - Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator",permalink:"/RSCG_Examples/v2/docs/Microsoft/Microsoft.Extensions.Configuration.Binder.SourceGeneration_Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator"}},p={},l=[{value:"Original Code",id:"original-code",level:2},{value:"Generated Code",id:"generated-code",level:2},{value:"More details",id:"more-details",level:2}],u={toc:l},d="wrapper";function c(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"microsoftaspnetcorehttprequestdelegategenerator_microsoftaspnetcorehttprequestdelegategeneratorrequestdelegategenerator"},"Microsoft.AspNetCore.Http.RequestDelegateGenerator_Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator"),(0,o.kt)("h2",{id:"original-code"},"Original Code"),(0,o.kt)("p",null,"The code that will be improved by generation is :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'var builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\nvar summaries = new[]\n{\n    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n};\n//Generator:GeneratedRouteBuilderExtensions.g.cs\napp.MapGet("/weatherforecast", () =>\n{\n    var forecast = Enumerable.Range(1, 5).Select(index =>\n        new WeatherForecast\n        (\n            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            Random.Shared.Next(-20, 55),\n            summaries[Random.Shared.Next(summaries.Length)]\n        ))\n        .ToArray();\n    return forecast;\n})\n.WithName("GetWeatherForecast")\n.WithOpenApi();\n\napp.Run();\n\ninternal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n}\n\n')),(0,o.kt)("h2",{id:"generated-code"},"Generated Code"),(0,o.kt)("p",null,"The code that is written is"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n#nullable enable\n\nnamespace System.Runtime.CompilerServices\n{\n    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60", "8.0.0.0")]\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\n    file sealed class InterceptsLocationAttribute : Attribute\n    {\n        public InterceptsLocationAttribute(string filePath, int line, int column)\n        {\n        }\n    }\n}\n\nnamespace Microsoft.AspNetCore.Http.Generated\n{\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Collections.ObjectModel;\n    using System.Diagnostics;\n    using System.Diagnostics.CodeAnalysis;\n    using System.Globalization;\n    using System.Linq;\n    using System.Reflection;\n    using System.Runtime.CompilerServices;\n    using System.Text.Json;\n    using System.Text.Json.Serialization.Metadata;\n    using System.Threading.Tasks;\n    using System.IO;\n    using Microsoft.AspNetCore.Antiforgery;\n    using Microsoft.AspNetCore.Routing;\n    using Microsoft.AspNetCore.Routing.Patterns;\n    using Microsoft.AspNetCore.Builder;\n    using Microsoft.AspNetCore.Http;\n    using Microsoft.AspNetCore.Http.Json;\n    using Microsoft.AspNetCore.Http.Metadata;\n    using Microsoft.Extensions.DependencyInjection;\n    using Microsoft.Extensions.FileProviders;\n    using Microsoft.Extensions.Logging;\n    using Microsoft.Extensions.Primitives;\n    using Microsoft.Extensions.Options;\n\n    using MetadataPopulator = System.Func<System.Reflection.MethodInfo, Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions?, Microsoft.AspNetCore.Http.RequestDelegateMetadataResult>;\n    using RequestDelegateFactoryFunc = System.Func<System.Delegate, Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions, Microsoft.AspNetCore.Http.RequestDelegateMetadataResult?, Microsoft.AspNetCore.Http.RequestDelegateResult>;\n\n    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60", "8.0.0.0")]\n    file static class GeneratedRouteBuilderExtensionsCore\n    {\n        private static readonly JsonOptions FallbackJsonOptions = new();\n        private static readonly string[] GetVerb = new[] { global::Microsoft.AspNetCore.Http.HttpMethods.Get };\n\n        [InterceptsLocation(@"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Microsoft\\src\\RDG\\Program.cs", 22, 5)]\n        internal static RouteHandlerBuilder MapGet0(\n            this IEndpointRouteBuilder endpoints,\n            [StringSyntax("Route")] string pattern,\n            Delegate handler)\n        {\n            MetadataPopulator populateMetadata = (methodInfo, options) =>\n            {\n                Debug.Assert(options != null, "RequestDelegateFactoryOptions not found.");\n                Debug.Assert(options.EndpointBuilder != null, "EndpointBuilder not found.");\n                options.EndpointBuilder.Metadata.Add(new System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60", "8.0.0.0"));\n                options.EndpointBuilder.Metadata.Add(new ProducesResponseTypeMetadata(statusCode: StatusCodes.Status200OK, type: typeof(global::WeatherForecast[]), contentTypes: GeneratedMetadataConstants.JsonContentType));\n                return new RequestDelegateMetadataResult { EndpointMetadata = options.EndpointBuilder.Metadata.AsReadOnly() };\n            };\n            RequestDelegateFactoryFunc createRequestDelegate = (del, options, inferredMetadataResult) =>\n            {\n                Debug.Assert(options != null, "RequestDelegateFactoryOptions not found.");\n                Debug.Assert(options.EndpointBuilder != null, "EndpointBuilder not found.");\n                Debug.Assert(options.EndpointBuilder.ApplicationServices != null, "ApplicationServices not found.");\n                Debug.Assert(options.EndpointBuilder.FilterFactories != null, "FilterFactories not found.");\n                var handler = Cast(del, global::WeatherForecast[] () => throw null!);\n                EndpointFilterDelegate? filteredInvocation = null;\n                var serviceProvider = options.ServiceProvider ?? options.EndpointBuilder.ApplicationServices;\n                var jsonOptions = serviceProvider?.GetService<IOptions<JsonOptions>>()?.Value ?? FallbackJsonOptions;\n                var jsonSerializerOptions = jsonOptions.SerializerOptions;\n                jsonSerializerOptions.MakeReadOnly();\n                var objectJsonTypeInfo = (JsonTypeInfo<object?>)jsonSerializerOptions.GetTypeInfo(typeof(object));\n                var responseJsonTypeInfo =  (JsonTypeInfo<global::WeatherForecast[]?>)jsonSerializerOptions.GetTypeInfo(typeof(global::WeatherForecast[]));\n\n                if (options.EndpointBuilder.FilterFactories.Count > 0)\n                {\n                    filteredInvocation = GeneratedRouteBuilderExtensionsCore.BuildFilterDelegate(ic =>\n                    {\n                        if (ic.HttpContext.Response.StatusCode == 400)\n                        {\n                            return ValueTask.FromResult<object?>(Results.Empty);\n                        }\n                        return ValueTask.FromResult<object?>(handler());\n                    },\n                    options.EndpointBuilder,\n                    handler.Method);\n                }\n\n                Task RequestHandler(HttpContext httpContext)\n                {\n                    var wasParamCheckFailure = false;\n                    if (wasParamCheckFailure)\n                    {\n                        httpContext.Response.StatusCode = 400;\n                        return Task.CompletedTask;\n                    }\n                    var result = handler();\n                    return GeneratedRouteBuilderExtensionsCore.WriteJsonResponseAsync(httpContext.Response, result, responseJsonTypeInfo);\n                }\n\n                async Task RequestHandlerFiltered(HttpContext httpContext)\n                {\n                    var wasParamCheckFailure = false;\n                    if (wasParamCheckFailure)\n                    {\n                        httpContext.Response.StatusCode = 400;\n                    }\n                    var result = await filteredInvocation(EndpointFilterInvocationContext.Create(httpContext));\n                    if (result is not null)\n                    {\n                        await GeneratedRouteBuilderExtensionsCore.ExecuteReturnAsync(result, httpContext, objectJsonTypeInfo);\n                    }\n                }\n\n                RequestDelegate targetDelegate = filteredInvocation is null ? RequestHandler : RequestHandlerFiltered;\n                var metadata = inferredMetadataResult?.EndpointMetadata ?? ReadOnlyCollection<object>.Empty;\n                return new RequestDelegateResult(targetDelegate, metadata);\n            };\n            return MapCore(\n                endpoints,\n                pattern,\n                handler,\n                GetVerb,\n                populateMetadata,\n                createRequestDelegate);\n        }\n\n\n\n        internal static RouteHandlerBuilder MapCore(\n            this IEndpointRouteBuilder routes,\n            string pattern,\n            Delegate handler,\n            IEnumerable<string>? httpMethods,\n            MetadataPopulator populateMetadata,\n            RequestDelegateFactoryFunc createRequestDelegate)\n        {\n            return RouteHandlerServices.Map(routes, pattern, handler, httpMethods, populateMetadata, createRequestDelegate);\n        }\n\n        private static T Cast<T>(Delegate d, T _) where T : Delegate\n        {\n            return (T)d;\n        }\n\n        private static EndpointFilterDelegate BuildFilterDelegate(EndpointFilterDelegate filteredInvocation, EndpointBuilder builder, MethodInfo mi)\n        {\n            var routeHandlerFilters =  builder.FilterFactories;\n            var context0 = new EndpointFilterFactoryContext\n            {\n                MethodInfo = mi,\n                ApplicationServices = builder.ApplicationServices,\n            };\n            var initialFilteredInvocation = filteredInvocation;\n            for (var i = routeHandlerFilters.Count - 1; i >= 0; i--)\n            {\n                var filterFactory = routeHandlerFilters[i];\n                filteredInvocation = filterFactory(context0, filteredInvocation);\n            }\n            return filteredInvocation;\n        }\n\n        private static Task ExecuteReturnAsync(object? obj, HttpContext httpContext, JsonTypeInfo<object?> jsonTypeInfo)\n        {\n            if (obj is IResult r)\n            {\n                return r.ExecuteAsync(httpContext);\n            }\n            else if (obj is string s)\n            {\n                return httpContext.Response.WriteAsync(s);\n            }\n            else\n            {\n                return WriteJsonResponseAsync(httpContext.Response, obj, jsonTypeInfo);\n            }\n        }\n\n        [UnconditionalSuppressMessage("Trimming", "IL2026:RequiresUnreferencedCode",\n            Justification = "The \'JsonSerializer.IsReflectionEnabledByDefault\' feature switch, which is set to false by default for trimmed ASP.NET apps, ensures the JsonSerializer doesn\'t use Reflection.")]\n        [UnconditionalSuppressMessage("AOT", "IL3050:RequiresDynamicCode", Justification = "See above.")]\n        private static Task WriteJsonResponseAsync<T>(HttpResponse response, T? value, JsonTypeInfo<T?> jsonTypeInfo)\n        {\n            var runtimeType = value?.GetType();\n\n            if (jsonTypeInfo.ShouldUseWith(runtimeType))\n            {\n                return HttpResponseJsonExtensions.WriteAsJsonAsync(response, value, jsonTypeInfo, default);\n            }\n\n            return response.WriteAsJsonAsync<object?>(value, jsonTypeInfo.Options);\n        }\n\n        private static bool HasKnownPolymorphism(this JsonTypeInfo jsonTypeInfo)\n            => jsonTypeInfo.Type.IsSealed || jsonTypeInfo.Type.IsValueType || jsonTypeInfo.PolymorphismOptions is not null;\n\n        private static bool ShouldUseWith(this JsonTypeInfo jsonTypeInfo, [NotNullWhen(false)] Type? runtimeType)\n            => runtimeType is null || jsonTypeInfo.Type == runtimeType || jsonTypeInfo.HasKnownPolymorphism();\n\n\n    }\n\n    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60", "8.0.0.0")]\n    file static class GeneratedMetadataConstants\n    {\n        public static readonly string[] JsonContentType = new [] { "application/json" };\n        public static readonly string[] PlaintextContentType = new [] { "text/plain" };\n        public static readonly string[] FormFileContentType = new[] { "multipart/form-data" };\n        public static readonly string[] FormContentType = new[] { "multipart/form-data", "application/x-www-form-urlencoded" };\n    }\n\n\n    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60", "8.0.0.0")]\n    file sealed class LogOrThrowExceptionHelper\n    {\n        private readonly ILogger? _rdgLogger;\n        private readonly bool _shouldThrow;\n\n        public LogOrThrowExceptionHelper(IServiceProvider? serviceProvider, RequestDelegateFactoryOptions? options)\n        {\n            var loggerFactory = serviceProvider?.GetRequiredService<ILoggerFactory>();\n            _rdgLogger = loggerFactory?.CreateLogger("Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator");\n            _shouldThrow = options?.ThrowOnBadRequest ?? false;\n        }\n\n        public void RequestBodyIOException(IOException exception)\n        {\n            if (_rdgLogger != null)\n            {\n                _requestBodyIOException(_rdgLogger, exception);\n            }\n        }\n\n        private static readonly Action<ILogger, Exception?> _requestBodyIOException =\n            LoggerMessage.Define(LogLevel.Debug, new EventId(1, "RequestBodyIOException"), "Reading the request body failed with an IOException.");\n\n        public void InvalidJsonRequestBody(string parameterTypeName, string parameterName, Exception exception)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Failed to read parameter \\"{0} {1}\\" from the request body as JSON.", parameterTypeName, parameterName);\n                throw new BadHttpRequestException(message, exception);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _invalidJsonRequestBody(_rdgLogger, parameterTypeName, parameterName, exception);\n            }\n        }\n\n        private static readonly Action<ILogger, string, string, Exception?> _invalidJsonRequestBody =\n            LoggerMessage.Define<string, string>(LogLevel.Debug, new EventId(2, "InvalidJsonRequestBody"), "Failed to read parameter \\"{ParameterType} {ParameterName}\\" from the request body as JSON.");\n\n        public void ParameterBindingFailed(string parameterTypeName, string parameterName, string sourceValue)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Failed to bind parameter \\"{0} {1}\\" from \\"{2}\\".", parameterTypeName, parameterName, sourceValue);\n                throw new BadHttpRequestException(message);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _parameterBindingFailed(_rdgLogger, parameterTypeName, parameterName, sourceValue, null);\n            }\n        }\n\n        private static readonly Action<ILogger, string, string, string, Exception?> _parameterBindingFailed =\n            LoggerMessage.Define<string, string, string>(LogLevel.Debug, new EventId(3, "ParameterBindingFailed"), "Failed to bind parameter \\"{ParameterType} {ParameterName}\\" from \\"{SourceValue}\\".");\n\n        public void RequiredParameterNotProvided(string parameterTypeName, string parameterName, string source)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Required parameter \\"{0} {1}\\" was not provided from {2}.", parameterTypeName, parameterName, source);\n                throw new BadHttpRequestException(message);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _requiredParameterNotProvided(_rdgLogger, parameterTypeName, parameterName, source, null);\n            }\n        }\n\n        private static readonly Action<ILogger, string, string, string, Exception?> _requiredParameterNotProvided =\n            LoggerMessage.Define<string, string, string>(LogLevel.Debug, new EventId(4, "RequiredParameterNotProvided"), "Required parameter \\"{ParameterType} {ParameterName}\\" was not provided from {Source}.");\n\n        public void ImplicitBodyNotProvided(string parameterName)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Implicit body inferred for parameter \\"{0}\\" but no body was provided. Did you mean to use a Service instead?", parameterName);\n                throw new BadHttpRequestException(message);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _implicitBodyNotProvided(_rdgLogger, parameterName, null);\n            }\n        }\n\n        private static readonly Action<ILogger, string, Exception?> _implicitBodyNotProvided =\n            LoggerMessage.Define<string>(LogLevel.Debug, new EventId(5, "ImplicitBodyNotProvided"), "Implicit body inferred for parameter \\"{ParameterName}\\" but no body was provided. Did you mean to use a Service instead?");\n\n        public void UnexpectedJsonContentType(string? contentType)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Expected a supported JSON media type but got \\"{0}\\".", contentType);\n                throw new BadHttpRequestException(message, StatusCodes.Status415UnsupportedMediaType);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _unexpectedJsonContentType(_rdgLogger, contentType ?? "(none)", null);\n            }\n        }\n\n        private static readonly Action<ILogger, string, Exception?> _unexpectedJsonContentType =\n            LoggerMessage.Define<string>(LogLevel.Debug, new EventId(6, "UnexpectedContentType"), "Expected a supported JSON media type but got \\"{ContentType}\\".");\n\n        public void UnexpectedNonFormContentType(string? contentType)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Expected a supported form media type but got \\"{0}\\".", contentType);\n                throw new BadHttpRequestException(message, StatusCodes.Status415UnsupportedMediaType);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _unexpectedNonFormContentType(_rdgLogger, contentType ?? "(none)", null);\n            }\n        }\n\n        private static readonly Action<ILogger, string, Exception?> _unexpectedNonFormContentType =\n            LoggerMessage.Define<string>(LogLevel.Debug, new EventId(7, "UnexpectedNonFormContentType"), "Expected a supported form media type but got \\"{ContentType}\\".");\n\n        public void InvalidFormRequestBody(string parameterTypeName, string parameterName, Exception exception)\n        {\n            if (_shouldThrow)\n            {\n                var message = string.Format(CultureInfo.InvariantCulture, "Failed to read parameter \\"{0} {1}\\" from the request body as form.", parameterTypeName, parameterName);\n                throw new BadHttpRequestException(message, exception);\n            }\n\n            if (_rdgLogger != null)\n            {\n                _invalidFormRequestBody(_rdgLogger, parameterTypeName, parameterName, exception);\n            }\n        }\n\n        private static readonly Action<ILogger, string, string, Exception?> _invalidFormRequestBody =\n            LoggerMessage.Define<string, string>(LogLevel.Debug, new EventId(8, "InvalidFormRequestBody"), "Failed to read parameter \\"{ParameterType} {ParameterName}\\" from the request body as form.");\n    }\n}\n')),(0,o.kt)("h2",{id:"more-details"},"More details"),(0,o.kt)("p",null,"Csharp Project: See RDGDemoWebApi.csproj from ",(0,o.kt)("a",{target:"_blank",href:n(2096).Z},"/sources/Microsoft.zip")),(0,o.kt)("p",null,"You can see the whole list at",(0,o.kt)("a",{target:"_blank",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/List-of-RSCG"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/List-of-RSCG")))}c.isMDXComponent=!0},2096:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/Microsoft-385cd2ffcf8f095f697f6bd3011bc60a.zip"}}]);