"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[1044],{15639:(e,a,r)=>{r.d(a,{A:()=>t});const t=r.p+"assets/files/Equatable.Generator-a894564b88a0c26621dd1c5734eeac13.zip"},18731:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>h,contentTitle:()=>u,default:()=>g,frontMatter:()=>c,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"RSCG-Examples/Equatable.Generator","title":"177 - Equatable.Generator","description":"Generating Equals from properties","source":"@site/docs/RSCG-Examples/Equatable.Generator.md","sourceDirName":"RSCG-Examples","slug":"/Equatable.Generator","permalink":"/RSCG_Examples/v2/docs/Equatable.Generator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1770,"frontMatter":{"sidebar_position":1770,"title":"177 - Equatable.Generator","description":"Generating Equals from properties","slug":"/Equatable.Generator"},"sidebar":"tutorialSidebar","previous":{"title":"176 - Darp.BinaryObjects","permalink":"/RSCG_Examples/v2/docs/Darp.BinaryObjects"},"next":{"title":"178 - Valuify","permalink":"/RSCG_Examples/v2/docs/Valuify"}}');var n=r(74848),s=r(28453),l=r(11470),i=r(19365),o=r(14252),d=r(50369);const c={sidebar_position:1770,title:"177 - Equatable.Generator",description:"Generating Equals from properties",slug:"/Equatable.Generator"},u="Equatable.Generator  by Eden Prairie",h={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:3},{value:"Add package",id:"add-package",level:4},{value:"Requirements",id:"requirements",level:3},{value:"Equatable Attributes",id:"equatable-attributes",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Equatable.Generator",id:"share-equatablegenerator",level:3},...d.RM];function m(e){const a={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"equatablegenerator--by-eden-prairie",children:"Equatable.Generator  by Eden Prairie"})}),"\n",(0,n.jsx)(o.A,{toc:p}),"\n",(0,n.jsx)(a.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.a,{href:"https://www.nuget.org/packages/Equatable.Generator/",children:(0,n.jsx)(a.img,{src:"https://img.shields.io/nuget/dt/Equatable.Generator?label=Equatable.Generator",alt:"Nuget"})}),"\n",(0,n.jsx)(a.a,{href:"https://github.com/loresoft/Equatable.Generator",children:(0,n.jsx)(a.img,{src:"https://img.shields.io/github/last-commit/loresoft/Equatable.Generator?label=updated",alt:"GitHub last commit"})}),"\n",(0,n.jsx)(a.img,{src:"https://img.shields.io/github/stars/loresoft/Equatable.Generator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,n.jsx)(a.h2,{id:"details",children:"Details"}),"\n",(0,n.jsx)(a.h3,{id:"info",children:"Info"}),"\n",(0,n.jsxs)(a.admonition,{type:"info",children:[(0,n.jsxs)(a.p,{children:["Name: ",(0,n.jsx)(a.strong,{children:"Equatable.Generator"})]}),(0,n.jsx)(a.p,{children:"Source generator for Equals and GetHashCode"}),(0,n.jsx)(a.p,{children:"Author: Eden Prairie"}),(0,n.jsxs)(a.p,{children:["NuGet:\n",(0,n.jsx)(a.em,{children:(0,n.jsx)(a.a,{href:"https://www.nuget.org/packages/Equatable.Generator/",children:"https://www.nuget.org/packages/Equatable.Generator/"})})]}),(0,n.jsxs)(a.p,{children:["You can find more details at ",(0,n.jsx)(a.a,{href:"https://github.com/loresoft/Equatable.Generator",children:"https://github.com/loresoft/Equatable.Generator"})]}),(0,n.jsxs)(a.p,{children:["Source: ",(0,n.jsx)(a.a,{href:"https://github.com/loresoft/Equatable.Generator",children:"https://github.com/loresoft/Equatable.Generator"})]})]}),"\n",(0,n.jsx)(a.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,n.jsxs)(a.admonition,{type:"note",children:[(0,n.jsx)(a.h1,{id:"equatablegenerator",children:"Equatable.Generator"}),(0,n.jsxs)(a.p,{children:["Source generator for ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})," with attribute based control of equality implementation"]}),(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{href:"https://github.com/loresoft/Equatable.Generator/actions/workflows/dotnet.yml",children:(0,n.jsx)(a.img,{src:"https://github.com/loresoft/Equatable.Generator/actions/workflows/dotnet.yml/badge.svg",alt:"Build Project"})})}),(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{href:"https://coveralls.io/github/loresoft/Equatable.Generator?branch=main",children:(0,n.jsx)(a.img,{src:"https://coveralls.io/repos/github/loresoft/Equatable.Generator/badge.svg?branch=main",alt:"Coverage Status"})})}),(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{href:"https://www.nuget.org/packages/Equatable.Generator/",children:(0,n.jsx)(a.img,{src:"https://img.shields.io/nuget/v/Equatable.Generator.svg",alt:"Equatable.Generator"})})}),(0,n.jsx)(a.h2,{id:"features",children:"Features"}),(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["Override ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})]}),"\n",(0,n.jsxs)(a.li,{children:["Implement ",(0,n.jsx)(a.code,{children:"IEquatable<T>"})]}),"\n",(0,n.jsxs)(a.li,{children:["Support ",(0,n.jsx)(a.code,{children:"class"}),", ",(0,n.jsx)(a.code,{children:"record"})," and ",(0,n.jsx)(a.code,{children:"struct"})," types"]}),"\n",(0,n.jsxs)(a.li,{children:["Support ",(0,n.jsx)(a.code,{children:"EqualityComparer"})," per property via attribute"]}),"\n",(0,n.jsx)(a.li,{children:"Attribute based control of equality implementation."}),"\n",(0,n.jsx)(a.li,{children:"Attribute comparers supported: String, Sequence, Dictionary, HashSet, Reference, and Custom"}),"\n",(0,n.jsx)(a.li,{children:"No runtime dependencies.  Library is compile time dependence only."}),"\n"]}),(0,n.jsx)(a.h3,{id:"usage",children:"Usage"}),(0,n.jsx)(a.h4,{id:"add-package",children:"Add package"}),(0,n.jsx)(a.p,{children:"Add the nuget package to your projects."}),(0,n.jsx)(a.p,{children:(0,n.jsx)(a.code,{children:"dotnet add package Equatable.Generator"})}),(0,n.jsx)(a.p,{children:"Prevent including Equatable.Generator as a dependency"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-xml",children:'<PackageReference Include="Equatable.Generator" PrivateAssets="all" />\n'})}),(0,n.jsx)(a.h3,{id:"requirements",children:"Requirements"}),(0,n.jsx)(a.p,{children:"This library requires:"}),(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Target framework .NET Standard 2.0 or greater"}),"\n",(0,n.jsxs)(a.li,{children:["Project C# ",(0,n.jsx)(a.code,{children:"LangVersion"})," 8.0 or higher"]}),"\n"]}),(0,n.jsx)(a.h3,{id:"equatable-attributes",children:"Equatable Attributes"}),(0,n.jsxs)(a.p,{children:["Place ",(0,n.jsx)(a.code,{children:"[Equatable]"})," attribute on a ",(0,n.jsx)(a.code,{children:"class"}),", ",(0,n.jsx)(a.code,{children:"record"})," or ",(0,n.jsx)(a.code,{children:"struct"}),".  The source generator will create a partial with overrides for ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})," for all public properties."]}),(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[Equatable]"})," Marks the class to generate overrides for ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})]}),"\n"]}),(0,n.jsxs)(a.p,{children:["The default comparer used in the implementation of ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})," is ",(0,n.jsx)(a.code,{children:"EqualityComparer<T>.Default"}),".  Customize the comparer used with the following attributes."]}),(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[IgnoreEquality]"})," Ignore property in ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})," implementations"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[StringEquality]"})," Use specified ",(0,n.jsx)(a.code,{children:"StringComparer"})," when comparing strings"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[SequenceEquality]"})," Use ",(0,n.jsx)(a.code,{children:"Enumerable.SequenceEqual"})," to determine whether enumerables are equal"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[DictionaryEquality]"})," Use to determine if dictionaries are equal"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[HashSetEquality]"})," Use ",(0,n.jsx)(a.code,{children:"ISet<T>.SetEquals"})," to determine whether enumerables are equal"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[ReferenceEquality]"})," Use ",(0,n.jsx)(a.code,{children:"Object.ReferenceEquals"})," to determines whether instances are the same instance"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"[EqualityComparer]"})," Use the specified ",(0,n.jsx)(a.code,{children:"EqualityComparer"})]}),"\n"]}),(0,n.jsx)(a.h3,{id:"example-usage",children:"Example Usage"}),(0,n.jsxs)(a.p,{children:["Example of using the attributes to customize the source generation of ",(0,n.jsx)(a.code,{children:"Equals"})," and ",(0,n.jsx)(a.code,{children:"GetHashCode"})]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-c#",children:'[Equatable]\npublic partial class UserImport\n{\n    [StringEquality(StringComparison.OrdinalIgnoreCase)]\n    public string EmailAddress { get; set; } = null!;\n\n    public string? DisplayName { get; set; }\n\n    public string? FirstName { get; set; }\n\n    public string? LastName { get; set; }\n\n    public DateTimeOffset? LockoutEnd { get; set; }\n\n    public DateTimeOffset? LastLogin { get; set; }\n\n    [IgnoreEquality]\n    public string FullName => $"{FirstName} {LastName}";\n\n    [HashSetEquality]\n    public HashSet<string>? Roles { get; set; }\n\n    [DictionaryEquality]\n    public Dictionary<string, int>? Permissions { get; set; }\n\n    [SequenceEquality]\n    public List<DateTimeOffset>? History { get; set; }\n}\n'})})]}),"\n",(0,n.jsx)(a.h3,{id:"about",children:"About"}),"\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsx)(a.p,{children:"Generating Equals from properties"})}),"\n",(0,n.jsx)(a.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,n.jsx)(a.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,n.jsxs)(l.A,{children:[(0,n.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,n.jsxs)(a.p,{children:["This is the CSharp Project that references ",(0,n.jsx)(a.strong,{children:"Equatable.Generator"})]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Equatable.Generator" Version="2.0.0" />\n  </ItemGroup>\n</Project>\n\n'})})]}),(0,n.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\Program.cs",label:"Program.cs",children:[(0,n.jsxs)(a.p,{children:["This is the use of ",(0,n.jsx)(a.strong,{children:"Equatable.Generator"})," in ",(0,n.jsx)(a.em,{children:"Program.cs"})]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing GeneratorEqualsDemo;\nvar p1 = new Person()\n{\n    ID = 1,\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nvar p2= new Person()\n{\n    ID = 2,\n    FirstName = "aNdrei",\n    LastName = "Ignat"\n};\nConsole.WriteLine(p1==p2);\n\n'})})]}),(0,n.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\Person.cs",label:"Person.cs",children:[(0,n.jsxs)(a.p,{children:["This is the use of ",(0,n.jsx)(a.strong,{children:"Equatable.Generator"})," in ",(0,n.jsx)(a.em,{children:"Person.cs"})]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Equatable.Attributes;\n\nnamespace GeneratorEqualsDemo;\n\n[Equatable]\npartial class Person\n{\n    [IgnoreEquality]\n    public int ID { get; set; }\n    [StringEquality(StringComparison.OrdinalIgnoreCase)]\n    public string? FirstName { get; set; }\n    [StringEquality(StringComparison.OrdinalIgnoreCase)]\n\n    public string? LastName { get; set; }\n}\n\n"})})]})]}),"\n",(0,n.jsx)(a.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,n.jsx)(a.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,n.jsx)(l.A,{children:(0,n.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Equatable.Generator\\src\\GeneratorEqualsDemo\\obj\\GX\\Equatable.SourceGenerator\\Equatable.SourceGenerator.EquatableGenerator\\GeneratorEqualsDemo.Person.Equatable.g.cs",label:"GeneratorEqualsDemo.Person.Equatable.g.cs",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated />\n#nullable enable\n\nnamespace GeneratorEqualsDemo\n{\n    partial class Person : global::System.IEquatable<global::GeneratorEqualsDemo.Person?>\n    {\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public bool Equals(global::GeneratorEqualsDemo.Person? other)\n        {\n            return !(other is null)\n                && global::System.StringComparer.OrdinalIgnoreCase.Equals(FirstName, other.FirstName)\n                && global::System.StringComparer.OrdinalIgnoreCase.Equals(LastName, other.LastName);\n\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public override bool Equals(object? obj)\n        {\n            return Equals(obj as global::GeneratorEqualsDemo.Person);\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public static bool operator ==(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right)\n        {\n            return global::System.Collections.Generic.EqualityComparer<global::GeneratorEqualsDemo.Person?>.Default.Equals(left, right);\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right)\n        {\n            return !(left == right);\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Equatable.SourceGenerator", "2.0.0+10ad4b045a688eb10980afcd11ddb8e64505eda6")]\n        public override int GetHashCode(){\n            int hashCode = 1938039292;\n            hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(FirstName!);\n            hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(LastName!);\n            return hashCode;\n\n        }\n\n    }\n}\n\n'})})})}),"\n",(0,n.jsx)(a.h2,{id:"useful",children:"Useful"}),"\n",(0,n.jsx)(a.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(15639).A+"",children:"Download Example project Equatable.Generator "})})}),"\n",(0,n.jsx)(a.h3,{id:"share-equatablegenerator",children:"Share Equatable.Generator"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&quote=Equatable.Generator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&text=Equatable.Generator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&title=Equatable.Generator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator&title=Equatable.Generator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEquatable.Generator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Equatable.Generator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Equatable.Generator"})}),"\n",(0,n.jsx)(a.p,{children:"aaa"}),"\n",(0,n.jsx)(d.Ay,{})]})}function g(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},50369:(e,a,r)=>{r.d(a,{Ay:()=>i,RM:()=>s});var t=r(74848),n=r(28453);const s=[{value:"Category &quot;Equals&quot; has the following generators:",id:"category-equals-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function l(e){const a={a:"a",h3:"h3",p:"p",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h3,{id:"category-equals-has-the-following-generators",children:'Category "Equals" has the following generators:'}),"\n",(0,t.jsxs)(a.p,{children:["1 ",(0,t.jsx)(a.a,{href:"/docs/Equatable.Generator",children:"Equatable.Generator"})]}),"\n",(0,t.jsxs)(a.p,{children:["2 ",(0,t.jsx)(a.a,{href:"/docs/GeneratorEquals",children:"GeneratorEquals"})]}),"\n",(0,t.jsxs)(a.p,{children:["3 ",(0,t.jsx)(a.a,{href:"/docs/Valuify",children:"Valuify"})]}),"\n",(0,t.jsx)(a.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.a,{href:"/docs/Categories/Equals",children:"Equals"})})]})}function i(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);