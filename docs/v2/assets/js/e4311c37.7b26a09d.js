"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2690],{5393:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/jab-f5cf7f6bdacc39332ca6b97086b024a5.zip"},26146:(e,n,i)=>{i.d(n,{Ay:()=>c,RM:()=>s});var t=i(74848),r=i(28453);const s=[{value:"Category &quot;DependencyInjection&quot; has the following generators:",id:"category-dependencyinjection-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const n={a:"a",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"category-dependencyinjection-has-the-following-generators",children:'Category "DependencyInjection" has the following generators:'}),"\n",(0,t.jsxs)(n.p,{children:["1 ",(0,t.jsx)(n.a,{href:"/docs/AutoRegisterInject",children:"AutoRegisterInject"})]}),"\n",(0,t.jsxs)(n.p,{children:["2 ",(0,t.jsx)(n.a,{href:"/docs/BunnyTailServiceRegistration",children:"BunnyTailServiceRegistration"})]}),"\n",(0,t.jsxs)(n.p,{children:["3 ",(0,t.jsx)(n.a,{href:"/docs/DependencyModules.SourceGenerator",children:"DependencyModules.SourceGenerator"})]}),"\n",(0,t.jsxs)(n.p,{children:["4 ",(0,t.jsx)(n.a,{href:"/docs/depso",children:"depso"})]}),"\n",(0,t.jsxs)(n.p,{children:["5 ",(0,t.jsx)(n.a,{href:"/docs/FactoryGenerator",children:"FactoryGenerator"})]}),"\n",(0,t.jsxs)(n.p,{children:["6 ",(0,t.jsx)(n.a,{href:"/docs/FactoryGenerator.Abstractions",children:"FactoryGenerator.Abstractions"})]}),"\n",(0,t.jsxs)(n.p,{children:["7 ",(0,t.jsx)(n.a,{href:"/docs/Injectio",children:"Injectio"})]}),"\n",(0,t.jsxs)(n.p,{children:["8 ",(0,t.jsx)(n.a,{href:"/docs/jab",children:"jab"})]}),"\n",(0,t.jsxs)(n.p,{children:["9 ",(0,t.jsx)(n.a,{href:"/docs/Pure.DI",children:"Pure.DI"})]}),"\n",(0,t.jsxs)(n.p,{children:["10 ",(0,t.jsx)(n.a,{href:"/docs/ServiceScan.SourceGenerator",children:"ServiceScan.SourceGenerator"})]}),"\n",(0,t.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/Categories/DependencyInjection",children:"DependencyInjection"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},41010:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"RSCG-Examples/jab","title":"110 - jab","description":"generating DI code","source":"@site/docs/RSCG-Examples/jab.md","sourceDirName":"RSCG-Examples","slug":"/jab","permalink":"/RSCG_Examples/v2/docs/jab","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1100,"frontMatter":{"sidebar_position":1100,"title":"110 - jab","description":"generating DI code","slug":"/jab"},"sidebar":"tutorialSidebar","previous":{"title":"109 - FunicularSwitch","permalink":"/RSCG_Examples/v2/docs/FunicularSwitch"},"next":{"title":"111 - cachesourcegenerator","permalink":"/RSCG_Examples/v2/docs/cachesourcegenerator"}}');var r=i(74848),s=i(28453),a=i(11470),c=i(19365),l=i(14252),o=i(26146);const d={sidebar_position:1100,title:"110 - jab",description:"generating DI code",slug:"/jab"},p="jab  by Pavel Krymets",u={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Example",id:"example",level:2},{value:"Features",id:"features",level:2},{value:"Singleton services",id:"singleton-services",level:3},{value:"Singleton Instances",id:"singleton-instances",level:3},{value:"Named services",id:"named-services",level:3},{value:"Factories",id:"factories",level:3},{value:"Scoped Services",id:"scoped-services",level:3},{value:"Generic registration attributes",id:"generic-registration-attributes",level:3},{value:"Modules",id:"modules",level:3},{value:"Root services",id:"root-services",level:2},{value:"Samples",id:"samples",level:2},{value:"Console application",id:"console-application",level:3},{value:"Performance",id:"performance",level:2},{value:"Startup time",id:"startup-time",level:3},{value:"GetService",id:"getservice",level:3},{value:"Unity installation",id:"unity-installation",level:2},{value:"Debugging locally",id:"debugging-locally",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share jab",id:"share-jab",level:3},...o.RM];function b(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"jab--by-pavel-krymets",children:"jab  by Pavel Krymets"})}),"\n",(0,r.jsx)(l.A,{toc:h}),"\n",(0,r.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/jab/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/jab?label=jab",alt:"Nuget"})}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/pakrym/jab",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/pakrym/jab?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(n.img,{src:"https://img.shields.io/github/stars/pakrym/jab?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["Name: ",(0,r.jsx)(n.strong,{children:"jab"})]}),(0,r.jsx)(n.p,{children:"Package Description"}),(0,r.jsx)(n.p,{children:"Author: Pavel Krymets"}),(0,r.jsxs)(n.p,{children:["NuGet:\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/jab/",children:"https://www.nuget.org/packages/jab/"})})]}),(0,r.jsxs)(n.p,{children:["You can find more details at ",(0,r.jsx)(n.a,{href:"https://github.com/pakrym/jab",children:"https://github.com/pakrym/jab"})]}),(0,r.jsxs)(n.p,{children:["Source: ",(0,r.jsx)(n.a,{href:"https://github.com/pakrym/jab",children:"https://github.com/pakrym/jab"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.h1,{id:"jab-compile-time-dependency-injection",children:"Jab Compile Time Dependency Injection"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Jab",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Jab",alt:"Nuget"})})}),(0,r.jsxs)(n.p,{children:["Jab provides a ",(0,r.jsx)(n.a,{href:"https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/",children:"C# Source Generator"})," based dependency injection container implementation."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Fast startup (200x faster than Microsoft.Extensions.DependencyInjection). ",(0,r.jsx)(n.a,{href:"#Startup-Time",children:"Details"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Fast resolution (7x faster than Microsoft.Extensions.DependencyInjection). ",(0,r.jsx)(n.a,{href:"#GetService",children:"Details"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"No runtime dependencies."}),"\n",(0,r.jsx)(n.li,{children:"AOT and linker friendly, all code is generated during project compilation."}),"\n",(0,r.jsxs)(n.li,{children:["Clean stack traces:  ",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/pakrym/jab/main/doc/stacktrace.png",alt:"stacktrace"})]}),"\n",(0,r.jsxs)(n.li,{children:["Readable generated code:  ",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/pakrym/jab/main/doc/generatedcode.png",alt:"generated code"})]}),"\n",(0,r.jsxs)(n.li,{children:["Registration validation. Container configuration issues become compiler errors:  ",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/pakrym/jab/main/doc/errors.png",alt:"generated code"})]}),"\n",(0,r.jsxs)(n.li,{children:["Incremental generation, .NET 5/6/7/8 SDK support, .NET Standard 2.0 support, [Unity support](",(0,r.jsx)(n.a,{href:"https://github.com/pakrym/jab/README.md#Unity-installation",children:"https://github.com/pakrym/jab/README.md#Unity-installation"})]}),"\n"]}),(0,r.jsx)(n.h2,{id:"example",children:"Example"}),(0,r.jsx)(n.p,{children:"Add Jab package reference:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<ItemGroup>\n    <PackageReference Include="Jab" Version="0.10.2" PrivateAssets="all" />\n</ItemGroup>\n'})}),(0,r.jsx)(n.p,{children:"Define a service and implementation:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"internal interface IService\n{\n    void M();\n}\n\ninternal class ServiceImplementation : IService\n{\n    public void M()\n    {\n    }\n}\n"})}),(0,r.jsx)(n.p,{children:"Define a composition root and register services:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Transient(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider { }\n"})}),(0,r.jsx)(n.p,{children:"Use the service provider:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"MyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IService>();\n"})}),(0,r.jsx)(n.h2,{id:"features",children:"Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No runtime dependency, safe to use in libraries"}),"\n",(0,r.jsx)(n.li,{children:"Transient, Singleton, Scoped service registration"}),"\n",(0,r.jsx)(n.li,{children:"Named registrations"}),"\n",(0,r.jsx)(n.li,{children:"Factory registration"}),"\n",(0,r.jsx)(n.li,{children:"Instance registration"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IEnumerable"})," resolution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IDisposable"})," and ",(0,r.jsx)(n.code,{children:"IAsyncDisposable"})," support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IServiceProvider"})," support"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["The plan is to support the minimum feature set Microsoft.Extensions.DependencyInjection.Abstraction requires but ",(0,r.jsx)(n.em,{children:"NOT"})," the ",(0,r.jsx)(n.code,{children:"IServiceCollection"}),"-based registration syntax as it is runtime based."]}),(0,r.jsx)(n.h3,{id:"singleton-services",children:"Singleton services"}),(0,r.jsxs)(n.p,{children:["Singleton services are created once per container lifetime in a thread-safe manner and cached.\nTo register a singleton service use the ",(0,r.jsx)(n.code,{children:"SingletonAttribute"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider { }\n"})}),(0,r.jsx)(n.h3,{id:"singleton-instances",children:"Singleton Instances"}),(0,r.jsxs)(n.p,{children:["If you want to use an existing object as a service define a property in the container declaration and use the ",(0,r.jsx)(n.code,{children:"Instance"})," property of the ",(0,r.jsx)(n.code,{children:"SingletonAttribute"})," to register the service:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Singleton(typeof(IService), Instance = nameof(MyServiceInstance))]\ninternal partial class MyServiceProvider {\n    public IService MyServiceInstance { get;set; }\n}\n"})}),(0,r.jsx)(n.p,{children:"Then initialize the property during the container creation:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"MyServiceProvider c = new MyServiceProvider();\nc.MyServiceInstance = new ServiceImplementation();\n\nIService service = c.GetService<IService>();\n"})}),(0,r.jsx)(n.h3,{id:"named-services",children:"Named services"}),(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"Name"})," property to assign a name to your service registrations and ",(0,r.jsx)(n.code,{children:'[FromNamedServices("...")]'})," attribute to resolve a service using its name."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:'[ServiceProvider]\n[Singleton(typeof(INotificationService), typeof(EmailNotificationService), Name="email")]\n[Singleton(typeof(INotificationService), typeof(SmsNotificationService), Name="sms")]\n[Singleton(typeof(Notifier))]\ninternal partial class MyServiceProvider {}\n\nclass Notifier\n{\n    public Notifier(\n        [FromNamedServices("email")] INotificationService email,\n        [FromNamedServices("sms")] INotificationService sms)\n    {}\n}\n'})}),(0,r.jsxs)(n.p,{children:["NOTE: Jab also recognizes the ",(0,r.jsx)(n.code,{children:"[FromKeyedServices]"})," attribute from ",(0,r.jsx)(n.code,{children:"Microsoft.Extensions.DependencyInjection"}),"."]}),(0,r.jsx)(n.h3,{id:"factories",children:"Factories"}),(0,r.jsxs)(n.p,{children:["Sometimes it's useful to provide a custom way to create a service instance without using the automatic construction selection.\nTo do this define a method in the container declaration and use the ",(0,r.jsx)(n.code,{children:"Factory"})," property of the ",(0,r.jsx)(n.code,{children:"SingletonAttribute"})," or ",(0,r.jsx)(n.code,{children:"TransientAttribute"})," to register the service:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Transient(typeof(IService), Factory = nameof(MyServiceFactory))]\ninternal partial class MyServiceProvider {\n    public IService MyServiceFactory() => new ServiceImplementation();\n}\n\nMyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IService>();\n"})}),(0,r.jsxs)(n.p,{children:["When using with ",(0,r.jsx)(n.code,{children:"TransientAttribute"})," the factory method would be invoked for every service resolution.\nWhen used with ",(0,r.jsx)(n.code,{children:"SingletonAttribute"})," it would only be invoked the first time the service is requested."]}),(0,r.jsx)(n.p,{children:"Similar to constructors, factories support parameter injection:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[ServiceProvider]\n[Transient(typeof(IService), Factory = nameof(MyServiceFactory))]\n[Transient(typeof(SomeOtherService))]\ninternal partial class MyServiceProvider {\n    public IService MyServiceFactory(SomeOtherService other) => new ServiceImplementation(other);\n}\n"})}),(0,r.jsx)(n.h3,{id:"scoped-services",children:"Scoped Services"}),(0,r.jsxs)(n.p,{children:["Scoped services are created once per service provider scope. To create a scope use the ",(0,r.jsx)(n.code,{children:"CreateScope()"})," method of the service provider.\nService are resolved from the scope using the ",(0,r.jsx)(n.code,{children:"GetService<IService>()"})," call."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Scoped(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider { }\n\nMyServiceProvider c = new MyServiceProvider();\nusing MyServiceProvider.Scope scope = c.CreateScope();\nIService service = scope.GetService<IService>();\n"})}),(0,r.jsxs)(n.p,{children:["When the scope is disposed all ",(0,r.jsx)(n.code,{children:"IDisposable"})," and ",(0,r.jsx)(n.code,{children:"IAsyncDisposable"})," services that were resolved from it are disposed as well."]}),(0,r.jsx)(n.h3,{id:"generic-registration-attributes",children:"Generic registration attributes"}),(0,r.jsxs)(n.p,{children:["You can use generic attributes to register services if your project targets ",(0,r.jsx)(n.code,{children:"net7.0"})," or ",(0,r.jsx)(n.code,{children:"net6.0"})," and has ",(0,r.jsx)(n.code,{children:"LangVersion"})," set to preview."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <TargetFrameworks>net7.0</TargetFrameworks>\n  </PropertyGroup>\n\n</Project>\n\n'})}),(0,r.jsxs)(n.p,{children:["Generic attributes allow declaration to be more compact by avoiding the ",(0,r.jsx)(n.code,{children:"typeof"})," calls:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Scoped<IService, ServiceImplementation>]\n[Import<IMyModule>]\ninternal partial class MyServiceProvider { }\n"})}),(0,r.jsx)(n.h3,{id:"modules",children:"Modules"}),(0,r.jsxs)(n.p,{children:["Often, a set of service registrations would represent a distinct set of functionality that can be included into arbitrary\nservice provider. Modules are used to implement registration sharing. To define a module create an interface and mark it with ",(0,r.jsx)(n.code,{children:"ServiceProviderModuleAttribute"}),". Service registrations can be listed in module the same way they are in the service provider."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProviderModule]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\npublic interface IMyModule\n{\n}\n"})}),(0,r.jsxs)(n.p,{children:["To use the module apply the ",(0,r.jsx)(n.code,{children:"Import"})," attribute to the service provider type:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider]\n[Import(typeof(IMyModule))]\ninternal partial class MyServiceProvider\n{\n}\n\nMyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IEnumerable<IService>>();\n"})}),(0,r.jsx)(n.p,{children:"Modules can import other modules as well."}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NOTE"}),": module service and implementation types have to be accessible from the project where service provider is generated."]}),(0,r.jsx)(n.h2,{id:"root-services",children:"Root services"}),(0,r.jsxs)(n.p,{children:["By default, ",(0,r.jsx)(n.code,{children:"IEnumerable<...>"})," service accessors are only generated when requested by other service constructors. If you would like to have a root ",(0,r.jsx)(n.code,{children:"IEnumerable<..>"})," accessor generated use the ",(0,r.jsx)(n.code,{children:"RootService"})," parameter of the ",(0,r.jsx)(n.code,{children:"ServiceProvider"})," attribute. The generator also scans all the ",(0,r.jsx)(n.code,{children:"GetService<...>"})," usages and tries to all collected type arguments as the root service."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"[ServiceProvider(RootServices = new [] {typeof(IEnumerable<IService>)})]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider\n{\n}\n\nMyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IEnumerable<IService>>();\n"})}),(0,r.jsx)(n.h2,{id:"samples",children:"Samples"}),(0,r.jsx)(n.h3,{id:"console-application",children:"Console application"}),(0,r.jsxs)(n.p,{children:["Sample Jab usage in console application can be found in ",(0,r.jsx)(n.a,{href:"https://github.com/pakrym/jab/src/samples/ConsoleSample",children:"src/samples/ConsoleSample"})]}),(0,r.jsx)(n.h2,{id:"performance",children:"Performance"}),(0,r.jsxs)(n.p,{children:["The performance benchmark project is available in ",(0,r.jsx)(n.a,{href:"https://github.com/pakrym/jab/src/Jab.Performance/",children:"src/Jab.Performance/"}),"."]}),(0,r.jsx)(n.h3,{id:"startup-time",children:"Startup time"}),(0,r.jsx)(n.p,{children:"The startup time benchmark measures time between application startup and the first service being resolved."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"| Method |        Mean |     Error |    StdDev |  Ratio | RatioSD |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|------- |------------:|----------:|----------:|-------:|--------:|-------:|-------:|------:|----------:|\n|   MEDI | 2,437.88 ns | 14.565 ns | 12.163 ns | 220.91 |    2.72 | 0.6332 | 0.0114 |     - |    6632 B |\n|    Jab |    11.03 ns |  0.158 ns |  0.123 ns |   1.00 |    0.00 | 0.0046 |      - |     - |      48 B |\n"})}),(0,r.jsx)(n.h3,{id:"getservice",children:"GetService"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"GetService"})," benchmark measures the ",(0,r.jsx)(n.code,{children:"provider.GetService<IService>()"})," call."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"| Method |      Mean |     Error |    StdDev | Ratio | RatioSD |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|------- |----------:|----------:|----------:|------:|--------:|-------:|------:|------:|----------:|\n|   MEDI | 39.340 ns | 0.2419 ns | 0.2263 ns |  7.01 |    0.09 | 0.0023 |     - |     - |      24 B |\n|    Jab |  5.619 ns | 0.0770 ns | 0.0643 ns |  1.00 |    0.00 | 0.0023 |     - |     - |      24 B |\n"})}),(0,r.jsx)(n.h2,{id:"unity-installation",children:"Unity installation"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Navigate to the Packages directory of your project."}),"\n",(0,r.jsxs)(n.li,{children:["Adjust the ",(0,r.jsx)(n.a,{href:"https://docs.unity3d.com/Manual/upm-manifestPrj.html",children:"project manifest file"})," manifest.json in a text editor."]}),"\n",(0,r.jsxs)(n.li,{children:["Ensure ",(0,r.jsx)(n.code,{children:"https://registry.npmjs.org/"})," is part of ",(0,r.jsx)(n.code,{children:"scopedRegistries"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Ensure ",(0,r.jsx)(n.code,{children:"com.pakrym"})," is part of ",(0,r.jsx)(n.code,{children:"scopes"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"com.pakrym.jab"})," to the dependencies, stating the latest version."]}),"\n"]}),(0,r.jsx)(n.p,{children:"A minimal example ends up looking like this:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n  "scopedRegistries": [\n    {\n      "name": "npmjs",\n      "url": "https://registry.npmjs.org/",\n      "scopes": [\n        "com.pakrym"\n      ]\n    }\n  ],\n  "dependencies": {\n    "com.pakrym.jab": "0.10.2",\n    ...\n  }\n}\n'})}),(0,r.jsx)(n.h2,{id:"debugging-locally",children:"Debugging locally"}),(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"dotnet build /t:CreateLaunchSettings"})," in the ",(0,r.jsx)(n.code,{children:"Jab.Tests"})," directory would update the ",(0,r.jsx)(n.code,{children:"Jab\\Properties\\launchSettings.json"})," file to include ",(0,r.jsx)(n.code,{children:"csc"})," invocation that allows F5 debugging of the generator targeting the ",(0,r.jsx)(n.code,{children:"Jab.Tests"})," project."]})]}),"\n",(0,r.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"generating DI code"})}),"\n",(0,r.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsxs)(c.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(n.strong,{children:"jab"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {10}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<ItemGroup>\n\t\t<PackageReference Include="Jab" Version="0.10.2" PrivateAssets="all" />\n\t</ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,r.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\jab\\src\\InjectDemo\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"jab"})," in ",(0,r.jsx)(n.em,{children:"Program.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using InjectDemo;\nusing Jab;\nMyServiceProvider sc = new();\n//var con = sc.GetService<DatabaseCon>();\nvar db = sc.GetService<IDatabase>();\ndb.Open();\n\n\n[ServiceProvider]\n//[Transient(typeof(DatabaseCon), typeof(DatabaseCon))]\n[Transient(typeof(IDatabase), typeof(DatabaseCon))]\ninternal partial class MyServiceProvider { }\n"})})]}),(0,r.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\jab\\src\\InjectDemo\\Database.cs",label:"Database.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"jab"})," in ",(0,r.jsx)(n.em,{children:"Database.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'namespace InjectDemo;\n\ninternal class Database : IDatabase\n{\n    private readonly DatabaseCon con;\n\n    public Database(DatabaseCon con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open {con.Connection}");\n    }\n\n}\n\n\n'})})]}),(0,r.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\jab\\src\\InjectDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"jab"})," in ",(0,r.jsx)(n.em,{children:"DatabaseCon.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nnamespace InjectDemo;\n\ninternal class DatabaseCon: IDatabase\n{\n    public string? Connection { get; set; }\n    public void Open()\n    {\n        Console.WriteLine("open" + Connection);\n    }\n}\n\n\n'})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\jab\\src\\InjectDemo\\obj\\GX\\Jab\\Jab.ContainerGenerator\\Attributes.cs",label:"Attributes.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\n#if !JAB_ATTRIBUTES_REFERENCED || JAB_ATTRIBUTES_PACKAGE\n\nusing System;\nusing System.Threading.Tasks;\n\n#nullable enable\n\nnamespace Jab\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ServiceProviderAttribute: Attribute\n    {\n        public Type[]? RootServices { get; set; }\n    }\n\n    [AttributeUsage(AttributeTargets.Interface, AllowMultiple = false, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ServiceProviderModuleAttribute: Attribute\n    {\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ImportAttribute: Attribute\n    {\n        public Type ModuleType { get; }\n\n        public ImportAttribute(Type moduleType)\n        {\n            ModuleType = moduleType;\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class SingletonAttribute: Attribute\n    {\n        public Type ServiceType { get; }\n\n        public string? Name { get; set; }\n\n        public Type? ImplementationType { get; }\n\n        public string? Instance { get; set; }\n\n        public string? Factory { get; set; }\n\n        public SingletonAttribute(Type serviceType)\n        {\n            ServiceType = serviceType;\n        }\n\n        public SingletonAttribute(Type serviceType, Type implementationType)\n        {\n            ServiceType = serviceType;\n            ImplementationType = implementationType;\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class TransientAttribute : Attribute\n    {\n        public Type ServiceType { get; }\n        public string? Name { get; set; }\n\n        public Type? ImplementationType { get; }\n\n        public string? Factory { get; set; }\n\n        public TransientAttribute(Type serviceType)\n        {\n            ServiceType = serviceType;\n        }\n\n        public TransientAttribute(Type serviceType, Type implementationType)\n        {\n            ServiceType = serviceType;\n            ImplementationType = implementationType;\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ScopedAttribute : Attribute\n    {\n        public Type ServiceType { get; }\n        public string? Name { get; set; }\n\n        public Type? ImplementationType { get; }\n\n        public string? Factory { get; set; }\n\n        public ScopedAttribute(Type serviceType)\n        {\n            ServiceType = serviceType;\n        }\n\n        public ScopedAttribute(Type serviceType, Type implementationType)\n        {\n            ServiceType = serviceType;\n            ImplementationType = implementationType;\n        }\n    }\n\n\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n        class FromNamedServicesAttribute : Attribute\n    {\n        public string? Name { get; set; }\n\n        public FromNamedServicesAttribute(string name)\n        {\n            Name = name;\n        }\n    }\n\n#if GENERIC_ATTRIBUTES\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ImportAttribute<TModule> : ImportAttribute\n    {\n        public ImportAttribute() : base(typeof(TModule))\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class TransientAttribute<TService> : TransientAttribute\n    {\n        public TransientAttribute() : base(typeof(TService))\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class TransientAttribute<TService, TImpl> : TransientAttribute where TImpl: TService\n    {\n        public TransientAttribute() : base(typeof(TService), typeof(TImpl))\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ScopedAttribute<TService> : ScopedAttribute\n    {\n        public ScopedAttribute() : base(typeof(TService))\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class ScopedAttribute<TService, TImpl> : ScopedAttribute where TImpl: TService\n    {\n        public ScopedAttribute() : base(typeof(TService), typeof(TImpl))\n        {\n        }\n    }\n\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class SingletonAttribute<TService> : SingletonAttribute\n    {\n        public SingletonAttribute() : base(typeof(TService))\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    class SingletonAttribute<TService, TImpl> : SingletonAttribute where TImpl: TService\n    {\n        public SingletonAttribute() : base(typeof(TService), typeof(TImpl))\n        {\n        }\n    }\n\n#endif\n\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    interface IServiceProvider<T>\n    {\n        T GetService();\n    }\n\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    interface INamedServiceProvider<T>\n    {\n        T GetService(string name);\n    }\n\n#if JAB_ATTRIBUTES_PACKAGE\n    public\n#else\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", null)]\n    internal\n#endif\n    static class JabHelpers\n    {\n        public static InvalidOperationException CreateServiceNotFoundException<T>(string? name = null) =>\n            CreateServiceNotFoundException(typeof(T), name);\n        public static InvalidOperationException CreateServiceNotFoundException(Type type, string? name = null) =>\n            new InvalidOperationException(\n                name != null ?\n                    $"Service with type {type} and name {name} not registered" :\n                    $"Service with type {type} not registered");\n    }\n}\n\n#endif\n\n'})})}),(0,r.jsx)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\jab\\src\\InjectDemo\\obj\\GX\\Jab\\Jab.ContainerGenerator\\MyServiceProvider.Generated.cs",label:"MyServiceProvider.Generated.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\n#nullable enable\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Threading.Tasks;\nusing Jab;\n\nusing static Jab.JabHelpers;\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Jab", "0.10.2.0")]\ninternal partial class MyServiceProvider : global::System.IDisposable,\n   System.IAsyncDisposable,\n   global::System.IServiceProvider,\n   IServiceProvider<InjectDemo.IDatabase>,\n   IServiceProvider<System.IServiceProvider>\n{\n    private Scope? _rootScope;\n    \n    InjectDemo.IDatabase IServiceProvider<InjectDemo.IDatabase>.GetService()\n    {\n        InjectDemo.DatabaseCon service = new InjectDemo.DatabaseCon();\n        TryAddDisposable(service);\n        return service;\n    }\n    \n    System.IServiceProvider IServiceProvider<System.IServiceProvider>.GetService()\n    {\n        return this;\n    }\n    \n    object? global::System.IServiceProvider.GetService(global::System.Type type){\n        if (type == typeof(InjectDemo.IDatabase)) return this.GetService<InjectDemo.IDatabase>();\n        if (type == typeof(System.IServiceProvider)) return this.GetService<System.IServiceProvider>();\n        return null;\n    }\n    \n    private global::System.Collections.Generic.List<object>? _disposables;\n    \n    private void TryAddDisposable(object? value){\n        if (value is global::System.IDisposable || value is System.IAsyncDisposable)\n        lock (this){\n            (_disposables ??= new global::System.Collections.Generic.List<object>()).Add(value);\n        }\n    }\n    \n    public void Dispose(){\n        void TryDispose(object? value) => (value as IDisposable)?.Dispose();\n        \n        TryDispose(_rootScope);\n        if (_disposables != null){\n            foreach (var service in _disposables){\n                TryDispose(service);\n            }\n        }\n    }\n    \n    public async global::System.Threading.Tasks.ValueTask DisposeAsync(){\n        global::System.Threading.Tasks.ValueTask TryDispose(object? value){\n            if (value is System.IAsyncDisposable asyncDisposable){\n                return asyncDisposable.DisposeAsync();\n            }\n            else if (value is global::System.IDisposable disposable){\n                disposable.Dispose();\n            }\n            return default;\n        }\n        \n        await TryDispose(_rootScope);\n        if (_disposables != null){\n            foreach (var service in _disposables){\n                await TryDispose(service);\n            }\n        }\n    }\n    \n    [DebuggerHidden]\n    public T GetService<T>() => this is IServiceProvider<T> provider ? provider.GetService() : throw CreateServiceNotFoundException<T>();\n    \n    [DebuggerHidden]\n    public T GetService<T>(string name) => this is INamedServiceProvider<T> provider ? provider.GetService(name) : throw CreateServiceNotFoundException<T>(name);\n    \n    public Scope CreateScope() => new Scope(this);\n    \n    public partial class Scope : global::System.IDisposable,\n       System.IAsyncDisposable,\n       global::System.IServiceProvider,\n       IServiceProvider<InjectDemo.IDatabase>,\n       IServiceProvider<System.IServiceProvider>    \n    {\n        \n        private MyServiceProvider _root;\n        \n        public Scope(MyServiceProvider root){\n            _root = root;\n        }\n        \n        [DebuggerHidden]\n        public T GetService<T>() => this is IServiceProvider<T> provider ? provider.GetService() : throw CreateServiceNotFoundException<T>();\n        \n        [DebuggerHidden]\n        public T GetService<T>(string name) => this is INamedServiceProvider<T> provider ? provider.GetService(name) : throw CreateServiceNotFoundException<T>(name);\n        \n        InjectDemo.IDatabase IServiceProvider<InjectDemo.IDatabase>.GetService(){\n            InjectDemo.DatabaseCon service = new InjectDemo.DatabaseCon();\n            TryAddDisposable(service);\n            return service;\n        }\n        \n        System.IServiceProvider IServiceProvider<System.IServiceProvider>.GetService(){\n            return this;\n        }\n        \n        object? global::System.IServiceProvider.GetService(global::System.Type type){\n            if (type == typeof(InjectDemo.IDatabase)) return this.GetService<InjectDemo.IDatabase>();\n            if (type == typeof(System.IServiceProvider)) return this.GetService<System.IServiceProvider>();\n            return null;\n        }\n        \n        private global::System.Collections.Generic.List<object>? _disposables;\n        \n        private void TryAddDisposable(object? value){\n            if (value is global::System.IDisposable || value is System.IAsyncDisposable)\n            lock (this){\n                (_disposables ??= new global::System.Collections.Generic.List<object>()).Add(value);\n            }\n        }\n        \n        public void Dispose(){\n            void TryDispose(object? value) => (value as IDisposable)?.Dispose();\n            \n            if (_disposables != null){\n                foreach (var service in _disposables){\n                    TryDispose(service);\n                }\n            }\n        }\n        \n        public async global::System.Threading.Tasks.ValueTask DisposeAsync(){\n            global::System.Threading.Tasks.ValueTask TryDispose(object? value){\n                if (value is System.IAsyncDisposable asyncDisposable){\n                    return asyncDisposable.DisposeAsync();\n                }\n                else if (value is global::System.IDisposable disposable){\n                    disposable.Dispose();\n                }\n                return default;\n            }\n            \n            if (_disposables != null){\n                foreach (var service in _disposables){\n                    await TryDispose(service);\n                }\n            }\n        }\n        \n    }\n    private Scope GetRootScope(){\n        if (_rootScope == default)\n        lock (this)\n        if (_rootScope == default){\n            _rootScope = CreateScope();\n        }\n        return _rootScope;\n    }\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(5393).A+"",children:"Download Example project jab "})})}),"\n",(0,r.jsx)(n.h3,{id:"share-jab",children:"Share jab"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjab&quote=jab",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjab&text=jab:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjab",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjab&title=jab",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjab&title=jab&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fjab",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/jab",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/jab"})}),"\n",(0,r.jsx)(n.p,{children:"aaa"}),"\n",(0,r.jsx)(o.Ay,{})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}}}]);