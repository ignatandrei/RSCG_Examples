"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[1217],{42945:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/files/Dusharp-52ba0564f54daa82bb0fab159237f092.zip"},73586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>u,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"RSCG-Examples/Dusharp","title":"160 - Dusharp","description":"Generate tagged union","source":"@site/docs/RSCG-Examples/Dusharp.md","sourceDirName":"RSCG-Examples","slug":"/Dusharp","permalink":"/RSCG_Examples/v2/docs/Dusharp","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Dusharp.md","tags":[],"version":"current","sidebarPosition":1600,"frontMatter":{"sidebar_position":1600,"title":"160 - Dusharp","description":"Generate tagged union","slug":"/Dusharp"},"sidebar":"tutorialSidebar","previous":{"title":"159 - LightweightObjectMapper","permalink":"/RSCG_Examples/v2/docs/LightweightObjectMapper"},"next":{"title":"161 - Immediate.Handlers","permalink":"/RSCG_Examples/v2/docs/Immediate.Handlers"}}');var a=n(74848),i=n(28453),r=n(11470),l=n(19365),o=n(14252);const u={sidebar_position:1600,title:"160 - Dusharp",description:"Generate tagged union",slug:"/Dusharp"},c="Dusharp  by Vitali",h={},d=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"1. Define a Union",id:"1-define-a-union",level:3},{value:"2. Define Union Cases",id:"2-define-union-cases",level:3},{value:"3. Match on Union",id:"3-match-on-union",level:3},{value:"4. Compare Unions",id:"4-compare-unions",level:3},{value:"Upcoming Features",id:"upcoming-features",level:2},{value:"License",id:"license",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Dusharp",id:"share-dusharp",level:3},{value:"In the same category (FunctionalProgramming) - 15 other generators",id:"in-the-same-category-functionalprogramming---15-other-generators",level:3},{value:"cachesourcegenerator",id:"cachesourcegenerator",level:4},{value:"dunet",id:"dunet",level:4},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:4},{value:"FunicularSwitch",id:"funicularswitch",level:4},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:4},{value:"OneOf",id:"oneof",level:4},{value:"PartiallyApplied",id:"partiallyapplied",level:4},{value:"polytype",id:"polytype",level:4},{value:"rscg_demeter",id:"rscg_demeter",level:4},{value:"rscg_queryables",id:"rscg_queryables",level:4},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:4},{value:"Sera.Union",id:"seraunion",level:4},{value:"TypeUtilities",id:"typeutilities",level:4},{value:"UnionGen",id:"uniongen",level:4},{value:"UnionsGenerator",id:"unionsgenerator",level:4}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"dusharp--by-vitali",children:"Dusharp  by Vitali"})}),"\n",(0,a.jsx)(o.A,{toc:d}),"\n",(0,a.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/Dusharp/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Dusharp?label=Dusharp",alt:"Nuget"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/kolebynov/Dusharp",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/kolebynov/Dusharp?label=updated",alt:"GitHub last commit"})}),"\n",(0,a.jsx)(t.img,{src:"https://img.shields.io/github/stars/kolebynov/Dusharp?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,a.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,a.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["Name: ",(0,a.jsx)(t.strong,{children:"Dusharp"})]}),(0,a.jsx)(t.p,{children:"Dusharp is a C# source generator for creating discriminated unions."}),(0,a.jsx)(t.p,{children:"Author: Vitali"}),(0,a.jsxs)(t.p,{children:["NuGet:\n",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/Dusharp/",children:"https://www.nuget.org/packages/Dusharp/"})})]}),(0,a.jsxs)(t.p,{children:["You can find more details at ",(0,a.jsx)(t.a,{href:"https://github.com/kolebynov/Dusharp",children:"https://github.com/kolebynov/Dusharp"})]}),(0,a.jsxs)(t.p,{children:["Source: ",(0,a.jsx)(t.a,{href:"https://github.com/kolebynov/Dusharp",children:"https://github.com/kolebynov/Dusharp"})]})]}),"\n",(0,a.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,a.jsxs)(t.admonition,{type:"note",children:[(0,a.jsx)(t.h1,{id:"dusharp",children:"Dusharp"}),(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/Dusharp/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/v/Dusharp",alt:"NuGet"})})}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Dusharp"})," is a C# source generator library for creating ",(0,a.jsx)(t.strong,{children:"discriminated unions"}),". This library allows you to define union types with ease, using attributes and partial methods. It is inspired by functional languages but built for C# developers."]}),(0,a.jsx)(t.h2,{id:"features",children:"Features"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Create unions"}),": Define discriminated unions using attributes."]}),"\n",(0,a.jsxs)(t.li,{children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Match method"}),": Pattern match on union cases in a type-safe way."]}),"\n",(0,a.jsxs)(t.li,{children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Equality"}),": Automatic equality comparison for unions."]}),"\n",(0,a.jsxs)(t.li,{children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Generics"}),": Generics support for union types."]}),"\n",(0,a.jsxs)(t.li,{children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Pretty print"}),": Using overloaded ",(0,a.jsx)(t.code,{children:"ToString()"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["\u274c ",(0,a.jsx)(t.strong,{children:"JSON serialization/deserialization"}),": Support for unions with ",(0,a.jsx)(t.code,{children:"System.Text.Json"})," (coming soon)."]}),"\n",(0,a.jsxs)(t.li,{children:["\u274c ",(0,a.jsx)(t.strong,{children:"Struct unions"}),": With efficient memory layout for unions as structs (coming soon)."]}),"\n"]}),(0,a.jsx)(t.h2,{id:"installation",children:"Installation"}),(0,a.jsx)(t.p,{children:"Dusharp is available as a NuGet package. You can install it using the NuGet package manager:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"dotnet add package Dusharp\n"})}),(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Dusharp"})," uses attributes to generate discriminated unions and case methods. Here's how to get started:"]}),(0,a.jsx)(t.h3,{id:"1-define-a-union",children:"1. Define a Union"}),(0,a.jsxs)(t.p,{children:["To define a union, annotate a class with the ",(0,a.jsx)(t.code,{children:"[Dusharp.UnionAttribute]"})," attribute."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using Dusharp;\n\n[Union]\npublic partial class Shape<T>\n    where T : struct, INumber<T>\n{\n}\n"})}),(0,a.jsx)(t.h3,{id:"2-define-union-cases",children:"2. Define Union Cases"}),(0,a.jsxs)(t.p,{children:["Define union cases by creating public static partial methods and marking them with the ",(0,a.jsx)(t.code,{children:"[Dusharp.UnionCaseAttribute]"})," attribute. The method body will be automatically generated."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using Dusharp;\n\n[Union]\npublic partial class Shape<T>\n    where T : struct, INumber<T>\n{\n    [UnionCase]\n    public static partial Shape<T> Circle(T radius);\n\n    [UnionCase]\n    public static partial Shape<T> Rectangle(T width, T height);\n}\n"})}),(0,a.jsx)(t.h3,{id:"3-match-on-union",children:"3. Match on Union"}),(0,a.jsxs)(t.p,{children:["You can easily perform pattern matching on a union using the ",(0,a.jsx)(t.code,{children:"Match"})," method. The source generator will create the ",(0,a.jsx)(t.code,{children:"Match"})," method based on the defined union cases."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'Shape<double> shape = Shape<double>.Circle(5.0);\n\nstring result = shape.Match(\n    radius => $"Circle with radius {radius}",\n    (width, height) => $"Rectangle with width {width} and height {height}");\n\nConsole.WriteLine(result); // Output: Circle with radius 5.0\n'})}),(0,a.jsx)(t.h3,{id:"4-compare-unions",children:"4. Compare Unions"}),(0,a.jsx)(t.p,{children:"Union cases can be compared for equality using the auto-generated equality methods. This allows for checking if two unions are the same."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"Shape<double> shape1 = Shape<double>.Circle(5.0);\nShape<double> shape2 = Shape<double>.Circle(5.0);\n\nConsole.WriteLine(shape1.Equals(shape2)); // True\nConsole.WriteLine(shape1 == shape2); // True\n"})}),(0,a.jsx)(t.h2,{id:"upcoming-features",children:"Upcoming Features"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"JSON serialization/deserialization"}),": Support for JSON (de)serialization via System.Text.Json."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Struct unions"}),": More efficient unions using structs with effective data layout."]}),"\n"]}),(0,a.jsx)(t.h2,{id:"license",children:"License"}),(0,a.jsx)(t.p,{children:"This project is licensed under the MIT License - see the LICENSE file for details."})]}),"\n",(0,a.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Generate tagged union"})}),"\n",(0,a.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,a.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,a.jsx)(t.strong,{children:"Dusharp"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n\t<ItemGroup>\n\t  <PackageReference Include="Dusharp" Version="0.4.0">\n\t    <PrivateAssets>all</PrivateAssets>\n\t    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t  </PackageReference>\n\t</ItemGroup>\n\n\t\n\n</Project>\n\n'})})]}),(0,a.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\Program.cs",label:"Program.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"Dusharp"})," in ",(0,a.jsx)(t.em,{children:"Program.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using UnionTypesDemo;\n\nConsole.WriteLine("Save or not");\nvar data = SaveToDatabase.Save(0);\ndata.Match(\n    ok => Console.WriteLine(ok),\n    ()=> Console.WriteLine("Not found")\n);\n\ndata = SaveToDatabase.Save(1);\ndata.Match(\n    ok => Console.WriteLine(ok),\n    () => Console.WriteLine("Not found")\n);\n\n'})})]}),(0,a.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\ResultSave.cs",label:"ResultSave.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"Dusharp"})," in ",(0,a.jsx)(t.em,{children:"ResultSave.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Dusharp;\nnamespace UnionTypesDemo;\n\n\n[Union]\npublic partial class ResultSave\n{\n    [UnionCase]\n    public static partial ResultSave Ok(int i);\n    [UnionCase]\n    public static partial ResultSave NotFound();\n    \n}\n\n\n"})})]}),(0,a.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\SaveToDatabase.cs",label:"SaveToDatabase.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"Dusharp"})," in ",(0,a.jsx)(t.em,{children:"SaveToDatabase.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace UnionTypesDemo;\n\npublic class SaveToDatabase\n{\n    public static ResultSave Save(int i)\n    {\n\n        if (i == 0)\n        {\n            return ResultSave.NotFound();\n        }\n        return ResultSave.Ok(i); ;\n    }\n}\n\n\n\n"})})]})]}),"\n",(0,a.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,a.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\Dusharp.EmbeddedCode.ExceptionUtils.cs",label:"Dusharp.EmbeddedCode.ExceptionUtils.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nusing System;\nusing System.Runtime.CompilerServices;\n\nnamespace Dusharp\n{\n\tpublic static class ExceptionUtils\n\t{\n\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]\n\t\tpublic static void ThrowIfNull<T>(this T value, string paramName)\n\t\t\twhere T : class\n\t\t{\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tThrowArgumentNull(paramName);\n\t\t\t}\n\t\t}\n\n\t\t[MethodImpl(MethodImplOptions.NoInlining)]\n\t\tpublic static void ThrowUnionInInvalidState() =>\n\t\t\tthrow new InvalidOperationException("Union in invalid state.");\n\n\t\t[MethodImpl(MethodImplOptions.NoInlining)]\n\t\tprivate static void ThrowArgumentNull(string paramName) => throw new ArgumentNullException(paramName);\n\t}\n}\n'})})}),(0,a.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\Dusharp.EmbeddedCode.UnionAttribute.cs",label:"Dusharp.EmbeddedCode.UnionAttribute.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nusing System;\n\nnamespace Dusharp\n{\n\t[AttributeUsage(AttributeTargets.Class)]\n\tpublic sealed class UnionAttribute : Attribute\n\t{\n\t}\n}\n"})})}),(0,a.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\Dusharp.EmbeddedCode.UnionCaseAttribute.cs",label:"Dusharp.EmbeddedCode.UnionCaseAttribute.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nusing System;\n\nnamespace Dusharp\n{\n\t[AttributeUsage(AttributeTargets.Method)]\n\tpublic sealed class UnionCaseAttribute : Attribute\n\t{\n\t}\n}\n"})})}),(0,a.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\UnionTypesDemo.ResultSave.Dusharp.g.cs",label:"UnionTypesDemo.ResultSave.Dusharp.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nnamespace UnionTypesDemo\n{\n\t[System.Diagnostics.CodeAnalysis.SuppressMessage("", "CA1000", Justification = "For generic unions.")]\n\tabstract partial class ResultSave : System.IEquatable<ResultSave>\n\t{\n\t\tprivate ResultSave() {}\n\n\t\tpublic void Match(System.Action<int> okCase, System.Action notFoundCase)\n\t\t{\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as OkCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { okCase(unionCase.i); return; }\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as NotFoundCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { notFoundCase(); return; }\n\t\t\t}\n\n\t\t\tDusharp.ExceptionUtils.ThrowUnionInInvalidState();\n\t\t}\n\n\t\tpublic TRet Match<TRet>(System.Func<int, TRet> okCase, System.Func<TRet> notFoundCase)\n\t\t{\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as OkCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { return okCase(unionCase.i); }\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as NotFoundCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { return notFoundCase(); }\n\t\t\t}\n\n\t\t\tDusharp.ExceptionUtils.ThrowUnionInInvalidState();\n\t\t\treturn default!;\n\t\t}\n\n\t\tpublic void Match<TState>(TState state, System.Action<TState, int> okCase, System.Action<TState> notFoundCase)\n\t\t{\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as OkCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { okCase(state, unionCase.i); return; }\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as NotFoundCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { notFoundCase(state); return; }\n\t\t\t}\n\n\t\t\tDusharp.ExceptionUtils.ThrowUnionInInvalidState();\n\t\t}\n\n\t\tpublic TRet Match<TState, TRet>(TState state, System.Func<TState, int, TRet> okCase, System.Func<TState, TRet> notFoundCase)\n\t\t{\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n\t\t\tDusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as OkCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { return okCase(state, unionCase.i); }\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tvar unionCase = this as NotFoundCase;\n\t\t\t\tif (!object.ReferenceEquals(unionCase, null)) { return notFoundCase(state); }\n\t\t\t}\n\n\t\t\tDusharp.ExceptionUtils.ThrowUnionInInvalidState();\n\t\t\treturn default!;\n\t\t}\n\n\t\tpublic virtual bool Equals(ResultSave? other) { return object.ReferenceEquals(this, other); }\n\t\tpublic override bool Equals(object? other) { return object.ReferenceEquals(this, other); }\n\t\tpublic override int GetHashCode() { return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); }\n\t\tpublic static bool operator ==(ResultSave? left, ResultSave? right)\n\t\t{\n\t\t\treturn !object.ReferenceEquals(left, null) ? left.Equals(right) : object.ReferenceEquals(left, right);\n\t\t}\n\n\t\tpublic static bool operator !=(ResultSave? left, ResultSave? right)\n\t\t{\n\t\t\treturn !object.ReferenceEquals(left, null) ? !left.Equals(right) : !object.ReferenceEquals(left, right);\n\t\t}\n\n\t\tprivate sealed class OkCase : ResultSave\n\t\t{\n\t\t\tpublic readonly int i;\n\t\t\tpublic OkCase(int i)\n\t\t\t{\n\t\t\t\tthis.i = i;\n\t\t\t}\n\n\t\t\tpublic override string ToString()\n\t\t\t{\n\t\t\t\treturn $"Ok {{ i = {i} }}";\n\t\t\t}\n\n\t\t\tpublic override bool Equals(ResultSave? other)\n\t\t\t{\n\t\t\t\tif (object.ReferenceEquals(this, other)) return true;\n\t\t\t\tvar otherCasted = other as OkCase;\n\t\t\t\tif (object.ReferenceEquals(otherCasted, null)) return false;\n\t\t\t\treturn StructuralEquals(otherCasted);\n\t\t\t}\n\n\t\t\tpublic override bool Equals(object? other)\n\t\t\t{\n\t\t\t\tif (object.ReferenceEquals(this, other)) return true;\n\t\t\t\tvar otherCasted = other as OkCase;\n\t\t\t\tif (object.ReferenceEquals(otherCasted, null)) return false;\n\t\t\t\treturn StructuralEquals(otherCasted);\n\t\t\t}\n\n\t\t\tpublic override int GetHashCode()\n\t\t\t{\n\t\t\t\tunchecked { return System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(i!) * -1521134295 + "Ok".GetHashCode(); }\n\t\t\t}\n\n\t\t\tprivate bool StructuralEquals(OkCase other)\n\t\t\t{\n\t\t\t\treturn System.Collections.Generic.EqualityComparer<int>.Default.Equals(i, other.i);\n\t\t\t}\n\t\t}\n\n\t\tpublic static partial ResultSave Ok(int i)\n\t\t{\n\t\t\treturn new OkCase(i);\n\t\t}\n\n\t\tprivate sealed class NotFoundCase : ResultSave\n\t\t{\n\t\t\tpublic static readonly NotFoundCase Instance = new NotFoundCase();\n\t\t\tpublic NotFoundCase()\n\t\t\t{\n\t\t\t}\n\n\t\t\tpublic override string ToString()\n\t\t\t{\n\t\t\t\treturn "NotFound";\n\t\t\t}\n\t\t}\n\n\t\tpublic static partial ResultSave NotFound()\n\t\t{\n\t\t\treturn NotFoundCase.Instance;\n\t\t}\n\t}\n}\n\n'})})})]}),"\n",(0,a.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,a.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(42945).A+"",children:"Download Example project Dusharp "})})}),"\n",(0,a.jsx)(t.h3,{id:"share-dusharp",children:"Share Dusharp"}),"\n",(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&quote=Dusharp",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&text=Dusharp:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&title=Dusharp",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&title=Dusharp&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dusharp",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dusharp"})}),"\n",(0,a.jsx)(t.h3,{id:"in-the-same-category-functionalprogramming---15-other-generators",children:"In the same category (FunctionalProgramming) - 15 other generators"}),"\n",(0,a.jsx)(t.h4,{id:"cachesourcegenerator",children:(0,a.jsx)(t.a,{href:"/docs/cachesourcegenerator",children:"cachesourcegenerator"})}),"\n",(0,a.jsx)(t.h4,{id:"dunet",children:(0,a.jsx)(t.a,{href:"/docs/dunet",children:"dunet"})}),"\n",(0,a.jsx)(t.h4,{id:"funckydiscriminatedunion",children:(0,a.jsx)(t.a,{href:"/docs/Funcky.DiscriminatedUnion",children:"Funcky.DiscriminatedUnion"})}),"\n",(0,a.jsx)(t.h4,{id:"funicularswitch",children:(0,a.jsx)(t.a,{href:"/docs/FunicularSwitch",children:"FunicularSwitch"})}),"\n",(0,a.jsx)(t.h4,{id:"nsourcegeneratorsuniontypes",children:(0,a.jsx)(t.a,{href:"/docs/N.SourceGenerators.UnionTypes",children:"N.SourceGenerators.UnionTypes"})}),"\n",(0,a.jsx)(t.h4,{id:"oneof",children:(0,a.jsx)(t.a,{href:"/docs/OneOf",children:"OneOf"})}),"\n",(0,a.jsx)(t.h4,{id:"partiallyapplied",children:(0,a.jsx)(t.a,{href:"/docs/PartiallyApplied",children:"PartiallyApplied"})}),"\n",(0,a.jsx)(t.h4,{id:"polytype",children:(0,a.jsx)(t.a,{href:"/docs/polytype",children:"polytype"})}),"\n",(0,a.jsx)(t.h4,{id:"rscg_demeter",children:(0,a.jsx)(t.a,{href:"/docs/rscg_demeter",children:"rscg_demeter"})}),"\n",(0,a.jsx)(t.h4,{id:"rscg_queryables",children:(0,a.jsx)(t.a,{href:"/docs/rscg_queryables",children:"rscg_queryables"})}),"\n",(0,a.jsx)(t.h4,{id:"rscg_utils_memo",children:(0,a.jsx)(t.a,{href:"/docs/RSCG_Utils_Memo",children:"RSCG_Utils_Memo"})}),"\n",(0,a.jsx)(t.h4,{id:"seraunion",children:(0,a.jsx)(t.a,{href:"/docs/Sera.Union",children:"Sera.Union"})}),"\n",(0,a.jsx)(t.h4,{id:"typeutilities",children:(0,a.jsx)(t.a,{href:"/docs/TypeUtilities",children:"TypeUtilities"})}),"\n",(0,a.jsx)(t.h4,{id:"uniongen",children:(0,a.jsx)(t.a,{href:"/docs/UnionGen",children:"UnionGen"})}),"\n",(0,a.jsx)(t.h4,{id:"unionsgenerator",children:(0,a.jsx)(t.a,{href:"/docs/UnionsGenerator",children:"UnionsGenerator"})})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);