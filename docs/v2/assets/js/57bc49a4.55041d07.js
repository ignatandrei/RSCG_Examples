"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[423],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(4137));const o={},i="Strongly",l={unversionedId:"RSCG-Examples/Strongly_readme",id:"RSCG-Examples/Strongly_readme",title:"Strongly",description:"Strongly logo",source:"@site/docs/RSCG-Examples/Strongly_readme.md",sourceDirName:"RSCG-Examples",slug:"/RSCG-Examples/Strongly_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/Strongly_readme",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SkinnyControllersGenerator",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/SkinnyControllersCommon_readme"},next:{title:"Sync Method Generator",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/SyncMethodGenerator_readme"}},s={},p=[{value:"Installing",id:"installing",level:2},{value:"Usage",id:"usage",level:2},{value:"Customising the converters",id:"customising-the-converters",level:3},{value:"Using different types as a backing fields",id:"using-different-types-as-a-backing-fields",level:3},{value:"Changing the defaults globally",id:"changing-the-defaults-globally",level:2},{value:"EF Core - ValueConverter",id:"ef-core---valueconverter",level:2},{value:"OpenApi/Swagger Specification",id:"openapiswagger-specification",level:2},{value:"Embedding the attributes in your project",id:"embedding-the-attributes-in-your-project",level:2},{value:"Preserving usages of the <code>[Strongly]</code> attribute",id:"preserving-usages-of-the-strongly-attribute",level:2},{value:"Why do I need this library?",id:"why-do-i-need-this-library",level:2},{value:"What code is generated?",id:"what-code-is-generated",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Credits",id:"credits",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"strongly"},"Strongly"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/lucasteles/Strongly/master/logo.png",alt:"Strongly logo"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/lucasteles/Strongly/actions/workflows/BuildAndPack.yml/badge.svg",alt:"Build status"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Strongly/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Strongly.svg",alt:"NuGet"}))),(0,r.kt)("p",null,"Strongly makes creating strongly-typed values as easy as adding an attribute! No\nmore ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/#an-example-of-the-problem"},"accidentally passing arguments in the wrong order to methods")," -\nStrongly uses .NET 6's compile-time incremental source generators to\ngenerate ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#a-full-example-implementation"},"the boilerplate"),"\nrequired to use strongly-typed IDs."),(0,r.kt)("p",null,"Simply, ",(0,r.kt)("a",{parentName:"p",href:"#installing"},"install the required package")," add the ",(0,r.kt)("inlineCode",{parentName:"p"},"[Strongly]")," attribute to a ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," (in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Strongly"),"\nnamespace):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Strongly;\n \n[Strongly] // <- Add this attribute to auto-generate the rest of the type\npublic partial struct FooId { }\n")),(0,r.kt)("p",null,"and the source generator magically generates the backing code when you save the file! Use ",(0,r.kt)("em",{parentName:"p"},"Go to Definition")," to see the\ngenerated code:"),(0,r.kt)("img",{src:"https://raw.githubusercontent.com/andrewlock/Strongly/master/docs/strongly_typed_id.gif",alt:"Generating a strongly-typed ID using the Strongly packages"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Strongly requires requires ",(0,r.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet/6.0"},"the .NET Core SDK v6.0.100 or greater"),".")),(0,r.kt)("h2",{id:"installing"},"Installing"),(0,r.kt)("p",null,"To use the the ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Strongly"},"Strongly NuGet package"),", install\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Strongly"},"Strongly")," package into your project. Depending on which converters you\nimplement, you may need one or more of the following additional packages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/System.Text.Json/"},"System.Text.Json")," (optional, only required\nif ",(0,r.kt)("a",{parentName:"li",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#creating-a-custom-jsonconverter"},"generating a System.Text ",(0,r.kt)("inlineCode",{parentName:"a"},"JsonConverter")),").\nNote that in .NET Core apps, you will likely already reference this project via transitive dependencies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Newtonsoft.Json/"},"Newtonsoft.Json")," (optional, only required\nif ",(0,r.kt)("a",{parentName:"li",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#creating-a-custom-jsonconverter"},"generating a Newtonsoft ",(0,r.kt)("inlineCode",{parentName:"a"},"JsonConverter")),").\nNote that in some ASP.NET Core apps, you will likely already reference this project via transitive dependencies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Dapper/"},"Dapper")," (optional, only required\nif ",(0,r.kt)("a",{parentName:"li",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-3/#interfacing-with-external-system-using-strongly-typed-ids"},"generating a type mapper"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore"},"EF Core")," (optional, only required\nif ",(0,r.kt)("a",{parentName:"li",href:"https://andrewlock.net/strongly-typed-ids-in-ef-core-using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-4/"},"generating an EF Core ValueConverter"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Swashbuckle.AspNetCore.Annotations"},"Swagger Annotations")," (optional, only required\nif ",(0,r.kt)("a",{parentName:"li",href:"#openapiswagger-specification"},"generating an Swagger Schema Filter"))),(0,r.kt)("p",null,"To install the packages, add the references to your ",(0,r.kt)("em",{parentName:"p"},"csproj")," file, for example by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package Strongly \n")),(0,r.kt)("p",null,"This adds a ",(0,r.kt)("inlineCode",{parentName:"p"},"<PackageReference>")," to your project. You can additionally mark the package as ",(0,r.kt)("inlineCode",{parentName:"p"},'PrivateAssets="all"'),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},'ExcludeAssets="runtime"'),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},'PrivateAssets="all"')," means any projects referencing this one will not also get a reference to the ",(0,r.kt)("em",{parentName:"p"},"Strongly"),"\npackage. Setting ",(0,r.kt)("inlineCode",{parentName:"p"},'ExcludeAssets="runtime"')," ensures the ",(0,r.kt)("em",{parentName:"p"},"Strongly.Attributes.dll")," file is not copied to your build\noutput (it is not required at runtime).")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'\n<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n    </PropertyGroup>\n\n    \x3c!-- Add the package --\x3e\n    <PackageReference Include="Strongly" Version="1.0.0" PrivateAssets="all" ExcludeAssets="runtime"/>\n    \x3c!-- --\x3e\n\n</Project>\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To create a strongly-typed ID, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"partial struct")," with the desired name, and decorate it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"[Strongly]"),"\nattribute, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Strongly")," namespace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Strongly;\n\n[Strongly] // Add this attribute to auto-generate the rest of the type\npublic partial struct FooId { }\n")),(0,r.kt)("p",null,'This generates the "default" strongly-typed ID using a ',(0,r.kt)("inlineCode",{parentName:"p"},"Guid")," backing field, a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeConverter"),", and a\ncustom ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonConverter")," based on System.Text.Json."),(0,r.kt)("h3",{id:"customising-the-converters"},"Customising the converters"),(0,r.kt)("p",null,"You can customise which converters to generate by using flags. For example, to generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeConverter"),",\na ",(0,r.kt)("inlineCode",{parentName:"p"},"Newtonsoft.Json"),", and an EF Core ",(0,r.kt)("inlineCode",{parentName:"p"},"ValueConverter"),", use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Strongly;\n\n[Strongly(converters: StronglyConverter.TypeConverter | StronglyConverter.SystemTextJson | StronglyConverter.EfValueConverter)] \npublic partial struct SystemTextJsonConverterId { }\n")),(0,r.kt)("h3",{id:"using-different-types-as-a-backing-fields"},"Using different types as a backing fields"),(0,r.kt)("p",null,"The default strongly-typed ID uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"Guid")," backing field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Strongly;\n\n[Strongly]\npublic partial struct FooId { }\n\nvar id = new FooId(Guid.NewGuid());\n")),(0,r.kt)("p",null,"You can choose a different type backing field, by passing a value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"StronglyBackingType")," enum in the constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using Strongly;\n\n[Strongly(backingType: StronglyBackingType.String)]\npublic partial struct FooId { }\n\nvar id = new FooId("my-id-value");\n')),(0,r.kt)("p",null,"Currently supported values are ",(0,r.kt)("inlineCode",{parentName:"p"},"Guid")," (the default), ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"long"),",",(0,r.kt)("inlineCode",{parentName:"p"},"decimal"),",",(0,r.kt)("inlineCode",{parentName:"p"},"BigInteger"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MassTransit.NewId"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("h2",{id:"changing-the-defaults-globally"},"Changing the defaults globally"),(0,r.kt)("p",null,"If you wish to change the converters, backing types, or implementations used by default for ",(0,r.kt)("em",{parentName:"p"},"all")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"[Strongly]"),"\n-decorated types in your project, you can use the assembly attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"[StronglyDefaults]")," to set all of these. For\nexample, the following sets the default converter to a whole project to ",(0,r.kt)("inlineCode",{parentName:"p"},"[SystemTextJson]"),", and changes the default\nbacking-type to an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// Set the defaults for the project\n[assembly:StronglyDefaults(\n    backingType: StronglyType.Int,\n    converters: StronglyConverter.SystemTextJson)]\n\n[Strongly]\npublic partial struct OrderId { }\n\n[Strongly]\npublic partial struct UserId { } \n")),(0,r.kt)("p",null,"This is equivalent to setting these values manually on all the IDs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[Strongly(\n    backingType: StronglyType.Int,\n    converters: StronglyConverter.SystemTextJson)]\npublic partial struct OrderId { }\n\n[Strongly(\n     backingType: StronglyType.Int,\n    converters: StronglyConverter.SystemTextJson)]\npublic partial struct UserId { }\n")),(0,r.kt)("h2",{id:"ef-core---valueconverter"},"EF Core - ValueConverter"),(0,r.kt)("p",null,"When you create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Strongly")," type with EF Converter, the type will have a nested ",(0,r.kt)("inlineCode",{parentName:"p"},"ValueConverter")," class you can use on\nyour entity model definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[Strongly(StronglyType.String, StronglyConverter.EfValueConverter)]\npublic partial struct PhoneNumber\n{\n}\n\npublic class MyDbContext : DbContext\n{\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        var customer = builder.Entity<Customer>();\n        customer.Property(x => x.Phone).HasConversion<PhoneNumber.EfValueConverter>();\n    }\n}\n\n")),(0,r.kt)("p",null,"If you have lots of strongly type values you can use the package bellow to automatically set\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Strongly ValueConverter")," on all your entities ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Strongly.EFCore/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Strongly.EFCore.svg",alt:"NuGet"}))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package Strongly.EFCore\n")),(0,r.kt)("p",null,"After installation you need to set it on yor ",(0,r.kt)("inlineCode",{parentName:"p"},"DbContextOptionsBuilder")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"services\n    .AddDbContext<AppDbContext>(options => options\n        .UseStronglyTypeConverters()\n        /* ... */\n        )\n")),(0,r.kt)("h2",{id:"openapiswagger-specification"},"OpenApi/Swagger Specification"),(0,r.kt)("p",null,"If you wish to use an ID in your Swagger models and want to have schema and model sample reflecting the value\nbacking-field\ntype you will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install ",(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Swashbuckle.AspNetCore.Annotations"},"Swagger Annotations")," ",(0,r.kt)("inlineCode",{parentName:"li"},">=5.0.0")),(0,r.kt)("li",{parentName:"ul"},"Enable annotation in swagger gen with ",(0,r.kt)("inlineCode",{parentName:"li"},"services.AddSwaggerGen(c => c.EnableAnnotations());")),(0,r.kt)("li",{parentName:"ul"},"Use the converter flag ",(0,r.kt)("inlineCode",{parentName:"li"},"StronglyConverter.SwaggerSchemaFilter")," on the ID decorator. eg:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[Strongly(\n    backingType: StronglyType.Int,\n    converters: StronglyConverter.SwaggerSchemaFilter | StronglyConverter.SystemTextJson)]\npublic partial struct UserId { }\n")))),(0,r.kt)("h2",{id:"embedding-the-attributes-in-your-project"},"Embedding the attributes in your project"),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"[Strongly]")," attributes referenced in your application are contained in an external dll. It is also\npossible to embed the attributes directly in your project, so they appear in the dll when your project is built. If you\nwish to do this, you must do two things:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Define the MSBuild constant ",(0,r.kt)("inlineCode",{parentName:"li"},"STRONGLY_TYPED_EMBED_ATTRIBUTES"),". This ensures the attributes are embedded in your\nproject"),(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"compile")," to the list of excluded assets in your ",(0,r.kt)("inlineCode",{parentName:"li"},"<PackageReference>")," element. This ensures the attributes in\nyour project are referenced, instead of the ",(0,r.kt)("em",{parentName:"li"},"Strongly.Attributes.dll")," library.")),(0,r.kt)("p",null,"Your project file should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'\n<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        \x3c!--  Define the MSBuild constant    --\x3e\n        <DefineConstants>STRONGLY_TYPED_EMBED_ATTRIBUTES</DefineConstants>\n    </PropertyGroup>\n\n    \x3c!-- Add the package --\x3e\n    <PackageReference Include="Strongly" Version="1.0.0"\n                      PrivateAssets="all"\n                      ExcludeAssets="compile;runtime"/>\n    \x3c!--                               \u261d Add compile to the list of excluded assets. --\x3e\n\n</Project>\n')),(0,r.kt)("h2",{id:"preserving-usages-of-the-strongly-attribute"},"Preserving usages of the ",(0,r.kt)("inlineCode",{parentName:"h2"},"[Strongly]")," attribute"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"[Strongly]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"[StronglyDefaults]")," attributes are decorated with the ",(0,r.kt)("inlineCode",{parentName:"p"},"[Conditional]"),"\nattribute, ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/conditional-compilation-for-ignoring-method-calls-with-the-conditionalattribute/#applying-the-conditional-attribute-to-classes"},"so their usage will not appear in the build output of your project"),".\nIf you use reflection at runtime on one of your IDs, you will not find ",(0,r.kt)("inlineCode",{parentName:"p"},"[Strongly]")," in the list of custom attributes."),(0,r.kt)("p",null,"If you wish to preserve these attributes in the build output, you can define the ",(0,r.kt)("inlineCode",{parentName:"p"},"STRONGLY_TYPED_USAGES")," MSBuild\nvariable. Note that this means your project will have a runtime-dependency on ",(0,r.kt)("em",{parentName:"p"},"Strongly.Attributes.dll")," so you need to\nensure this is included in your build output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'\n<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n        \x3c!--  Define the MSBuild constant to preserve usages   --\x3e\n        <DefineConstants>STRONGLY_TYPED_USAGES</DefineConstants>\n    </PropertyGroup>\n\n    \x3c!-- Add the package --\x3e\n    <PackageReference Include="Strongly" Version="1.0.0" PrivateAssets="all"/>\n    \x3c!--              \u261d You must not exclude the runtime assets in this case --\x3e\n\n</Project>\n')),(0,r.kt)("h2",{id:"why-do-i-need-this-library"},"Why do I need this library?"),(0,r.kt)("p",null,"Andrew\nhave ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/"},"written a blog-post series"),"\non strongly-typed IDs that explains the issues and rational behind this library. For a detailed view, I suggest starting\nthere, but I provide a brief introduction here."),(0,r.kt)("p",null,"This library is designed to tackle a specific instance of ",(0,r.kt)("a",{parentName:"p",href:"https://lostechies.com/jimmybogard/2007/12/03/dealing-with-primitive-obsession/"},(0,r.kt)("em",{parentName:"a"},"primitive\nobsession")),", whereby we use primitive\nobjects (",(0,r.kt)("inlineCode",{parentName:"p"},"Guid"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"long"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"decimal")," etc) to represent the IDs or values of\ndomain objects. The problem is that these\ntypes are all\ninterchangeable - an order ID can be assigned to a product ID despite the fact that is likely nonsensical from the\ndomain point of\nview. ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/#an-example-of-the-problem"},"See here for a more concrete example"),"."),(0,r.kt)("p",null,"By using strongly-typed values, we give each of then its own ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," which ",(0,r.kt)("em",{parentName:"p"},"wraps")," the underlying primitive value. This\nensures\nyou can only use the value where it makes sense: ",(0,r.kt)("inlineCode",{parentName:"p"},"ProductId"),"s can only be assigned to products, or you can only search\nfor\nproducts using a ",(0,r.kt)("inlineCode",{parentName:"p"},"ProductId"),", not an ",(0,r.kt)("inlineCode",{parentName:"p"},"OrderId"),"."),(0,r.kt)("p",null,"Unfortunately, taking this approach\nrequires ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-2/#a-full-example-implementation"},"a lot of boilerplate and ceremony"),"\nto make working with it manageable. This library abstracts all that away from you, by generating the boilerplate at\nbuild-time by using a Roslyn-powered code generator."),(0,r.kt)("h2",{id:"what-code-is-generated"},"What code is generated?"),(0,r.kt)("p",null,"The exact code generated depends on the arguments you provide to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Strongly")," attribute. The code is generated to the\n",(0,r.kt)("em",{parentName:"p"},"obj")," folder of the project, so you can use ",(0,r.kt)("em",{parentName:"p"},"Go to Definition")," on your Id to see the ",(0,r.kt)("em",{parentName:"p"},"exact")," code generated in each\ncase."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"The Strongly NuGet package is a .NET Standard 2.0 package."),(0,r.kt)("p",null,"You must be using the .NET 6+ SDK (though you can compile for other target frameworks like .NET Core 2.1 and .NET\nFramework 4.8)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),"s you decorate with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Strongly")," attribute must be marked ",(0,r.kt)("inlineCode",{parentName:"p"},"partial"),"."),(0,r.kt)("h2",{id:"credits"},"Credits"),(0,r.kt)("p",null,"This project born as a fork of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/andrewlock/StronglyTypedId"},"StronglyTypedId")))}c.isMDXComponent=!0}}]);