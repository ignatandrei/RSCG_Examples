"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4424],{25955:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"RSCG-Examples/Rocks","title":"24 - Rocks","description":"Creating mocks for testing interfaces/classes","source":"@site/docs/RSCG-Examples/Rocks.md","sourceDirName":"RSCG-Examples","slug":"/Rocks","permalink":"/RSCG_Examples/v2/docs/Rocks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Rocks.md","tags":[],"version":"current","sidebarPosition":240,"frontMatter":{"sidebar_position":240,"title":"24 - Rocks","description":"Creating mocks for testing interfaces/classes","slug":"/Rocks"},"sidebar":"tutorialSidebar","previous":{"title":"23 - Microsoft.NET.Sdk.Razor.SourceGenerators","permalink":"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators"},"next":{"title":"25 - mapperly","permalink":"/RSCG_Examples/v2/docs/mapperly"}}');var o=s(74848),a=s(28453),l=s(11470),c=s(19365),i=s(14252);const r={sidebar_position:240,title:"24 - Rocks",description:"Creating mocks for testing interfaces/classes",slug:"/Rocks"},d="Rocks  by Json Bock",h={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Usage",id:"usage",level:2},{value:"Additional Documentation",id:"additional-documentation",level:2},{value:"Feedback",id:"feedback",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Rocks",id:"share-rocks",level:3},{value:"In the same category (Tests) - 4 other generators",id:"in-the-same-category-tests---4-other-generators",level:3},{value:"mocklis",id:"mocklis",level:4},{value:"MockMe",id:"mockme",level:4},{value:"MSTest",id:"mstest",level:4},{value:"Ridge",id:"ridge",level:4}];function k(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"rocks--by-json-bock",children:"Rocks  by Json Bock"})}),"\n",(0,o.jsx)(i.A,{toc:m}),"\n",(0,o.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://www.nuget.org/packages/Rocks/",children:(0,o.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Rocks?label=Rocks",alt:"Nuget"})}),"\n",(0,o.jsx)(t.a,{href:"https://github.com/JasonBock/Rocks/",children:(0,o.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/JasonBock/Rocks?label=updated",alt:"GitHub last commit"})}),"\n",(0,o.jsx)(t.img,{src:"https://img.shields.io/github/stars/JasonBock/Rocks?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,o.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,o.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsxs)(t.p,{children:["Name: ",(0,o.jsx)(t.strong,{children:"Rocks"})]}),(0,o.jsx)(t.p,{children:"A mocking library based on the Compiler API."}),(0,o.jsx)(t.p,{children:"Author: Json Bock"}),(0,o.jsxs)(t.p,{children:["NuGet:\n",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.a,{href:"https://www.nuget.org/packages/Rocks/",children:"https://www.nuget.org/packages/Rocks/"})})]}),(0,o.jsxs)(t.p,{children:["You can find more details at ",(0,o.jsx)(t.a,{href:"https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md",children:"https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md"})]}),(0,o.jsxs)(t.p,{children:["Source: ",(0,o.jsx)(t.a,{href:"https://github.com/JasonBock/Rocks/",children:"https://github.com/JasonBock/Rocks/"})]})]}),"\n",(0,o.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,o.jsxs)(t.admonition,{type:"note",children:[(0,o.jsx)(t.h1,{id:"rocks",children:"Rocks"}),(0,o.jsx)(t.p,{children:"A mocking library based on the Compiler APIs (Roslyn + Mocks)"}),(0,o.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),(0,o.jsxs)(t.p,{children:["Reference the ",(0,o.jsx)(t.code,{children:"Rocks"})," ",(0,o.jsx)(t.a,{href:"https://www.nuget.org/packages/Rocks",children:"NuGet package"})," - that's it."]}),(0,o.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),(0,o.jsx)(t.p,{children:"The Rocks package targets .NET Standard 2.0 for host flexibility. Note that Rocks looks for, and generates, code that targets .NET 7."}),(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,o.jsx)(t.p,{children:"To make a mock, you take an interface or an unsealed class that has virtual members:"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:"public interface IAmSimple\n{\n  void TargetAction();\n}\n"})}),(0,o.jsx)(t.p,{children:"and you use Rocks to create a mock with expectations, along with verifying its usage:"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:"var expectations = Rock.Create<IAmSimple>();\nexpectations.Methods().TargetAction();\n\nvar mock = expectations.Instance();\nmock.TargetAction();\n\nexpectations.Verify();\n"})}),(0,o.jsxs)(t.p,{children:["More details can be found on the ",(0,o.jsx)(t.a,{href:"https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md",children:"Quickstart page"}),"."]}),(0,o.jsx)(t.h2,{id:"additional-documentation",children:"Additional Documentation"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://discord.com/channels/1035376645864955974/1035376646326321194",children:"Discord Server"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/JasonBock/Rocks/blob/main/changelog.md",children:"Changelog"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices",children:"Unit testing best practices with .NET Core and .NET Standard"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/ecoAPM/BenchmarkMockNet",children:"BenchmarkMockNet"})}),"\n"]}),(0,o.jsx)(t.h2,{id:"feedback",children:"Feedback"}),(0,o.jsxs)(t.p,{children:["If you run into any issues, please add them ",(0,o.jsx)(t.a,{href:"https://github.com/JasonBock/Rocks/issues",children:"here"}),"."]})]}),"\n",(0,o.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"Creating mocks for testing interfaces/classes"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,o.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsxs)(c.A,{value:"csproj",label:"CSharp Project",children:[(0,o.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,o.jsx)(t.strong,{children:"Rocks"})]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {17}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.5.0" />\n    <PackageReference Include="MSTest.TestAdapter" Version="2.2.10" />\n    <PackageReference Include="MSTest.TestFramework" Version="2.2.10" />\n    <PackageReference Include="coverlet.collector" Version="3.2.0" />\n    <PackageReference Include="Rocks" Version="7.1.0" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include="..\\MockRock\\MockRock.csproj" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n</Project>\n\n'})})]}),(0,o.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Rocks\\src\\TestClock\\TestClock.cs",label:"TestClock.cs",children:[(0,o.jsxs)(t.p,{children:["This is the use of ",(0,o.jsx)(t.strong,{children:"Rocks"})," in ",(0,o.jsx)(t.em,{children:"TestClock.cs"})]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nnamespace TestClock;\n\n[TestClass]\npublic class TestClock\n{\n    [TestMethod]\n    public void TestMyClock()\n    {\n        var expectations = Rock.Create<IMyClock>();\n        expectations.Methods().GetNow().Returns(DateTime.Now.AddYears(-1));\n        \n        var mock = expectations.Instance();\n        var data= mock.GetNow();\n        Assert.AreEqual(DateTime.Now.Year -1, data.Year);\n        expectations.Verify();\n    }\n}\n"})})]})]}),"\n",(0,o.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,o.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,o.jsx)(l.A,{children:(0,o.jsx)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Rocks\\src\\TestClock\\obj\\GX\\Rocks\\Rocks.RockCreateGenerator\\IMyClock_Rock_Create.g.cs",label:"IMyClock_Rock_Create.g.cs",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Rocks.Extensions;\nusing System.Collections.Generic;\nusing System.Collections.Immutable;\n#nullable enable\n\nnamespace MockRock\n{\n\tinternal static class CreateExpectationsOfIMyClockExtensions\n\t{\n\t\tinternal static global::Rocks.Expectations.MethodExpectations<global::MockRock.IMyClock> Methods(this global::Rocks.Expectations.Expectations<global::MockRock.IMyClock> @self) =>\n\t\t\tnew(@self);\n\t\t\n\t\tinternal static global::MockRock.IMyClock Instance(this global::Rocks.Expectations.Expectations<global::MockRock.IMyClock> @self)\n\t\t{\n\t\t\tif (!@self.WasInstanceInvoked)\n\t\t\t{\n\t\t\t\t@self.WasInstanceInvoked = true;\n\t\t\t\tvar @mock = new RockIMyClock(@self);\n\t\t\t\t@self.MockType = @mock.GetType();\n\t\t\t\treturn @mock;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate sealed class RockIMyClock\n\t\t\t: global::MockRock.IMyClock\n\t\t{\n\t\t\tprivate readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;\n\t\t\t\n\t\t\tpublic RockIMyClock(global::Rocks.Expectations.Expectations<global::MockRock.IMyClock> @expectations)\n\t\t\t{\n\t\t\t\tthis.handlers = @expectations.Handlers;\n\t\t\t}\n\t\t\t\n\t\t\t[global::Rocks.MemberIdentifier(0, "global::System.DateTime GetNow()")]\n\t\t\tpublic global::System.DateTime GetNow()\n\t\t\t{\n\t\t\t\tif (this.handlers.TryGetValue(0, out var @methodHandlers))\n\t\t\t\t{\n\t\t\t\t\tvar @methodHandler = @methodHandlers[0];\n\t\t\t\t\t@methodHandler.IncrementCallCount();\n\t\t\t\t\tvar @result = @methodHandler.Method is not null ?\n\t\t\t\t\t\t((global::System.Func<global::System.DateTime>)@methodHandler.Method)() :\n\t\t\t\t\t\t((global::Rocks.HandlerInformation<global::System.DateTime>)@methodHandler).ReturnValue;\n\t\t\t\t\treturn @result!;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthrow new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.DateTime GetNow()");\n\t\t\t}\n\t\t\t\n\t\t\t[global::Rocks.MemberIdentifier(1, "global::System.DateTime GetUtcNow()")]\n\t\t\tpublic global::System.DateTime GetUtcNow()\n\t\t\t{\n\t\t\t\tif (this.handlers.TryGetValue(1, out var @methodHandlers))\n\t\t\t\t{\n\t\t\t\t\tvar @methodHandler = @methodHandlers[0];\n\t\t\t\t\t@methodHandler.IncrementCallCount();\n\t\t\t\t\tvar @result = @methodHandler.Method is not null ?\n\t\t\t\t\t\t((global::System.Func<global::System.DateTime>)@methodHandler.Method)() :\n\t\t\t\t\t\t((global::Rocks.HandlerInformation<global::System.DateTime>)@methodHandler).ReturnValue;\n\t\t\t\t\treturn @result!;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthrow new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.DateTime GetUtcNow()");\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\tinternal static class MethodExpectationsOfIMyClockExtensions\n\t{\n\t\tinternal static global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime> GetNow(this global::Rocks.Expectations.MethodExpectations<global::MockRock.IMyClock> @self) =>\n\t\t\tnew global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime>(@self.Add<global::System.DateTime>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));\n\t\tinternal static global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime> GetUtcNow(this global::Rocks.Expectations.MethodExpectations<global::MockRock.IMyClock> @self) =>\n\t\t\tnew global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime>(@self.Add<global::System.DateTime>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));\n\t}\n}\n\n'})})})}),"\n",(0,o.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,o.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(60808).A+"",children:"Download Example project Rocks "})})}),"\n",(0,o.jsx)(t.h3,{id:"share-rocks",children:"Share Rocks"}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&quote=Rocks",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&text=Rocks:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&title=Rocks",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,o.jsx)("li",{children:(0,o.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&title=Rocks&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Rocks",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Rocks"})}),"\n",(0,o.jsx)(t.h3,{id:"in-the-same-category-tests---4-other-generators",children:"In the same category (Tests) - 4 other generators"}),"\n",(0,o.jsx)(t.h4,{id:"mocklis",children:(0,o.jsx)(t.a,{href:"/docs/mocklis",children:"mocklis"})}),"\n",(0,o.jsx)(t.h4,{id:"mockme",children:(0,o.jsx)(t.a,{href:"/docs/MockMe",children:"MockMe"})}),"\n",(0,o.jsx)(t.h4,{id:"mstest",children:(0,o.jsx)(t.a,{href:"/docs/MSTest",children:"MSTest"})}),"\n",(0,o.jsx)(t.h4,{id:"ridge",children:(0,o.jsx)(t.a,{href:"/docs/Ridge",children:"Ridge"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(k,{...e})}):k(e)}},60808:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/files/Rocks-2315b6a748eb57b4c07c91637817273a.zip"}}]);