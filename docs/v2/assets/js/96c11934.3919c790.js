"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7255],{51741:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var t=r(87462),a=(r(67294),r(3905)),i=r(73992),o=r(18679),l=r(68839);const s={sidebar_position:1980,title:"198 - DimonSmart.BuilderGenerator",description:"Generating builder pattern code for classes",slug:"/DimonSmart.BuilderGenerator"},u="DimonSmart.BuilderGenerator  by Dmitry Dorogoy",d={unversionedId:"RSCG-Examples/DimonSmart.BuilderGenerator",id:"RSCG-Examples/DimonSmart.BuilderGenerator",title:"198 - DimonSmart.BuilderGenerator",description:"Generating builder pattern code for classes",source:"@site/docs/RSCG-Examples/DimonSmart.BuilderGenerator.md",sourceDirName:"RSCG-Examples",slug:"/DimonSmart.BuilderGenerator",permalink:"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator",draft:!1,tags:[],version:"current",sidebarPosition:1980,frontMatter:{sidebar_position:1980,title:"198 - DimonSmart.BuilderGenerator",description:"Generating builder pattern code for classes",slug:"/DimonSmart.BuilderGenerator"},sidebar:"tutorialSidebar",previous:{title:"197 - BunnyTailServiceRegistration",permalink:"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration"},next:{title:"199 - SuperFluid",permalink:"/RSCG_Examples/v2/docs/SuperFluid"}},p={},m=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share DimonSmart.BuilderGenerator",id:"share-dimonsmartbuildergenerator",level:3},{value:"In the same category (Builder) - 5 other generators",id:"in-the-same-category-builder---5-other-generators",level:3},{value:"Architect.DomainModeling",id:"architectdomainmodeling",level:4},{value:"BuilderGenerator",id:"buildergenerator-1",level:4},{value:"Fluentify",id:"fluentify",level:4},{value:"Hsu.Sg.FluentMember",id:"hsusgfluentmember",level:4},{value:"StepwiseBuilderGenerator",id:"stepwisebuildergenerator",level:4}],c={toc:m},h="wrapper";function g(e){let{components:n,...s}=e;return(0,a.kt)(h,(0,t.Z)({},c,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dimonsmartbuildergenerator--by-dmitry-dorogoy"},"DimonSmart.BuilderGenerator  by Dmitry Dorogoy"),(0,a.kt)(l.Z,{toc:m,mdxType:"TOCInline"}),(0,a.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/DimonSmart.BuilderGenerator/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/DimonSmart.BuilderGenerator?label=DimonSmart.BuilderGenerator",alt:"Nuget"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/DimonSmart/BuilderGenerator"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/DimonSmart/BuilderGenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/DimonSmart/BuilderGenerator?style=social",alt:"GitHub Repo stars"})),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("h3",{id:"info"},"Info"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Name: ",(0,a.kt)("strong",{parentName:"p"},"DimonSmart.BuilderGenerator")),(0,a.kt)("p",{parentName:"admonition"},"Generate builder classes via source generation. Simplifies object creation with Builder pattern."),(0,a.kt)("p",{parentName:"admonition"},"Author: Dmitry Dorogoy"),(0,a.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/DimonSmart.BuilderGenerator/"},"https://www.nuget.org/packages/DimonSmart.BuilderGenerator/")),"   "),(0,a.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/DimonSmart/BuilderGenerator"},"https://github.com/DimonSmart/BuilderGenerator")),(0,a.kt)("p",{parentName:"admonition"},"Source : ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/DimonSmart/BuilderGenerator"},"https://github.com/DimonSmart/BuilderGenerator"))),(0,a.kt)("h3",{id:"original-readme"},"Original Readme"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("h1",{parentName:"admonition",id:"buildergenerator"},"BuilderGenerator"),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"BuilderGenerator")," is a Roslyn Source Generator that creates Builder classes at compile time. It\ufffds especially helpful for classes with many properties, giving you a clear, explicit way to see what\ufffds being initialized. You can even generate builders for third-party classes, and a simple hierarchy is supported, including links from child objects back to their parent. If you need something more specialized, take the generated code and adapt it to fit your own needs."),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,a.kt)("p",{parentName:"admonition"},"Install via NuGet:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"dotnet add package BuilderGenerator\n")),(0,a.kt)("p",{parentName:"admonition"},"Or use your preferred IDE\ufffds NuGet package manager interface."),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h2",{parentName:"admonition",id:"how-it-works"},"How It Works"),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("strong",{parentName:"p"},"BuilderGenerator")," uses two main approaches to specify which class to generate a builder for:"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Attribute directly on the class."),"  "),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Attribute on a \ufffdcontainer\ufffd class")," where you specify ",(0,a.kt)("inlineCode",{parentName:"li"},"TargetType")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"[GenerateBuilder(TargetType = typeof(YourClass))]"),".")),(0,a.kt)("p",{parentName:"admonition"},"Below are some examples."),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h2",{parentName:"admonition",id:"examples"},"Examples"),(0,a.kt)("h3",{parentName:"admonition",id:"1-simple-scenario-attribute-on-the-class"},"1. Simple Scenario: Attribute on the Class"),(0,a.kt)("p",{parentName:"admonition"},"In this example, we have a ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," class and an ",(0,a.kt)("inlineCode",{parentName:"p"},"Address")," class. We annotate them directly:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"csharp\nusing BuilderGenerator.Runtime;\n\nnamespace BuilderGenerator.Sample\n{\n    public interface IPerson\n    { }\n\n    [GenerateBuilder] // Directly on the Person class\n    public class Person : IPerson\n    {\n        public string? Name { get; set; }\n        public int Age { get; set; }\n        public Address? Address { get; set; }\n    }\n\n    [GenerateBuilder] // Directly on the Address class\n    public class Address\n    {\n        public string? Street { get; set; }\n        public string? City { get; set; }\n        public IPerson? Person { get; set; }\n    }\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"Thanks to these attributes, the Source Generator will create:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PersonBuilder")," (with fluent methods ",(0,a.kt)("inlineCode",{parentName:"li"},"Name(...)"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Age(...)"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Address(...)"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AddressBuilder")," (with fluent methods ",(0,a.kt)("inlineCode",{parentName:"li"},"Street(...)"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"City(...)"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Person(...)"),")")),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Usage")," might look like:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'csharp\nvar person = PersonBuilder.Create()\n    .Name("John")\n    .Age(30)\n    // Here we invoke a nested Address builder\n    .Address(addr => addr\n        .Street("Main St.")\n        .City("Metropolis")\n    )\n    .Build();\n')),(0,a.kt)("p",{parentName:"admonition"},"After building, ",(0,a.kt)("inlineCode",{parentName:"p"},"person")," becomes an instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," class populated with those property values."),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h3",{parentName:"admonition",id:"2-container-approach-attribute-on-another-class"},"2. Container Approach: Attribute on Another Class"),(0,a.kt)("p",{parentName:"admonition"},"Sometimes you might not want to mark the target class directly with ",(0,a.kt)("inlineCode",{parentName:"p"},"[GenerateBuilder]"),".",(0,a.kt)("br",{parentName:"p"}),"\n",'Instead, you can create a separate "container" class (or file) and specify which type it should generate a builder for:'),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"csharp\nusing BuilderGenerator.Runtime;\n\nnamespace BuilderGenerator.OtherSamples\n{\n    [GenerateBuilder(TargetType = typeof(Person))]\n    [GenerateBuilder(TargetType = typeof(Address))]\n    public class PersonBuilderContainer\n    {\n        // Could be empty\n    }\n\n    // Meanwhile, Person and Address themselves have no direct attribute:\n    public class Person\n    {\n        public string? Name { get; set; }\n        public int Age { get; set; }\n        public Address? Address { get; set; }\n    }\n\n    public class Address\n    {\n        public string? Street { get; set; }\n        public string? City { get; set; }\n        public IPerson? Person { get; set; }\n    }\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"The generator will now produce ",(0,a.kt)("inlineCode",{parentName:"p"},"PersonBuilderContainerBuilder.g.cs")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AddressBuilderContainerBuilder.g.cs")," (or very similarly named files) that act as your fluent builder classes."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Usage")," is the same pattern:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'csharp\nvar person = PersonBuilderContainer.Create()\n    .Name("Alice")\n    .Age(25)\n    .Address(addr => addr\n        .Street("Baker St.")\n        .City("London")\n    )\n    .Build();\n')),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h3",{parentName:"admonition",id:"3-hierarchical-builder-example"},"3. Hierarchical Builder Example"),(0,a.kt)("p",{parentName:"admonition"},"The above code already shows how you can nest calls, for example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'csharp\nvar person = PersonBuilder.Create()\n    .Name("Bruce")\n    .Age(42)\n    .Address(a => a\n        .Street("Gotham Rd.")\n        .City("Gotham")\n    )\n    .Build();\n')),(0,a.kt)("p",{parentName:"admonition"},"When ",(0,a.kt)("inlineCode",{parentName:"p"},"Address(...)")," is called, the generator automatically creates a nested builder for ",(0,a.kt)("inlineCode",{parentName:"p"},"Address"),"."),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h3",{parentName:"admonition",id:"4-setting-a-reference-to-the-parent"},"4. Setting a Reference to the Parent"),(0,a.kt)("p",{parentName:"admonition"},"In some scenarios, you may want an object to reference its \ufffdparent.\ufffd For instance, an ",(0,a.kt)("inlineCode",{parentName:"p"},"Address")," might have a property ",(0,a.kt)("inlineCode",{parentName:"p"},"Person Person { get; set; }"),". In your example, ",(0,a.kt)("inlineCode",{parentName:"p"},"IPerson? Person { get; set; }")," is a reference back to the parent. The Source Generator includes a helper method called:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"csharp\npublic TParent BuildAndSetParent<TProperty>(\n    Expression<Func<TheChildClass, TProperty>> parentSelector\n) where TProperty : class\n{\n    // ...\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"This method allows you to set the parent reference in the child builder. Here\ufffds a conceptual usage snippet (the code is somewhat simplified to illustrate the idea):"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'csharp\nvar personBuilder = PersonBuilder.Create();\nvar addressBuilder = AddressBuilder.Create();\n\n// Suppose you want address.Person to be the person you are building\n// and want the final personBuilder to keep track of the newly built Address:\n\naddressBuilder\n    .Street("Parent Av.")\n    .City("Capital City")\n    .BuildAndSetParent(a => a.Person); \n    // "a => a.Person" indicates that the child Person property should refer back to the parent\n')),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h2",{parentName:"admonition",id:"license"},"License"),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"0BSD License"),":",(0,a.kt)("br",{parentName:"p"}),"\n","You\ufffdre free to use, copy, modify, distribute, and do pretty much anything else with BuilderGenerator.",(0,a.kt)("br",{parentName:"p"}),"\n","See the ",(0,a.kt)("a",{parentName:"p",href:"https://opensource.org/licenses/0BSD"},"0BSD text")," for details."),(0,a.kt)("hr",{parentName:"admonition"}),(0,a.kt)("h2",{parentName:"admonition",id:"contributing"},"Contributing"),(0,a.kt)("p",{parentName:"admonition"},"If you encounter bugs or have feature requests, feel free to open an issue or submit a pull request on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/DimonSmart/BuilderGenerator"},"GitHub"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},""))),(0,a.kt)("h3",{id:"about"},"About"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Generating builder pattern code for classes")),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,a.kt)("p",null,"This is the CSharp Project that references ",(0,a.kt)("strong",{parentName:"p"},"DimonSmart.BuilderGenerator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n  </PropertyGroup>\n\n      <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n      <ItemGroup>\n        <PackageReference Include="DimonSmart.BuilderGenerator" Version="1.25310.2229" />\n      </ItemGroup>\n\n      \n</Project>\n\n'))),(0,a.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DimonSmart.BuilderGenerator\\src\\Builder\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,a.kt)("p",null,"  This is the use of ",(0,a.kt)("strong",{parentName:"p"},"DimonSmart.BuilderGenerator")," in ",(0,a.kt)("em",{parentName:"p"},"Program.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Builder;\n\nvar pOld = new Person();\npOld.FirstName = "Andrei";\npOld.LastName = "Ignat";\npOld.MiddleName = "G";\nvar build = new PersonBuilder()\n    .FirstName(pOld.FirstName)\n    .MiddleName("")\n    .LastName(pOld.LastName)\n    ;\n\nvar pNew = build.Build();\nSystem.Console.WriteLine(pNew.FullName());\nSystem.Console.WriteLine(pOld.FullName());\n\n'))),(0,a.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DimonSmart.BuilderGenerator\\src\\Builder\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,a.kt)("p",null,"  This is the use of ",(0,a.kt)("strong",{parentName:"p"},"DimonSmart.BuilderGenerator")," in ",(0,a.kt)("em",{parentName:"p"},"Person.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'namespace Builder;\n[DimonSmart.BuilderGenerator.Runtime.GenerateBuilder]\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string? MiddleName { get; set; }\n    public string LastName { get; set; }\n\n    public string FullName()\n    {\n        return FirstName + " " + MiddleName + " "+LastName;\n    }\n    \n}\n\n')))),(0,a.kt)("h3",{id:"generated-files"},"Generated Files"),(0,a.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DimonSmart.BuilderGenerator\\src\\Builder\\obj\\GX\\DimonSmart.BuilderGenerator.Source\\BuilderGenerator.Source.BuilderIncrementalGenerator\\GenerateBuilderAttribute.g.cs",label:"GenerateBuilderAttribute.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nnamespace DimonSmart.BuilderGenerator.Runtime\n{\n    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\n    public sealed class GenerateBuilderAttribute : Attribute\n    {\n        public Type TargetType { get; set; }\n    }\n}\n\n"))),(0,a.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DimonSmart.BuilderGenerator\\src\\Builder\\obj\\GX\\DimonSmart.BuilderGenerator.Source\\BuilderGenerator.Source.BuilderIncrementalGenerator\\PersonBuilder.g.cs",label:"PersonBuilder.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\nusing System;\nusing System.Reflection;\nusing System.Linq.Expressions;\nnamespace Builder\n{\n    public class PersonBuilder\n    {\n        private readonly Builder.Person _instance = new Builder.Person();\n        public static PersonBuilder Create()\n        {\n            return new PersonBuilder();\n        }\n        public PersonBuilder FirstName(string value)\n        {\n            _instance.FirstName = value;\n            return this;\n        }\n        public PersonBuilder MiddleName(string? value)\n        {\n            _instance.MiddleName = value;\n            return this;\n        }\n        public PersonBuilder LastName(string value)\n        {\n            _instance.LastName = value;\n            return this;\n        }\n        public Builder.Person Build()\n        {\n            return _instance;\n        }\n        public static implicit operator Builder.Person(PersonBuilder builder)\n        {\n            return builder.Build();\n        }\n    }\n    public class PersonBuilder<TParent>\n    {\n        private readonly Builder.Person _instance = new Builder.Person();\n        private readonly TParent _parent;\n        public PersonBuilder(TParent parent)\n        {\n            _parent = parent;\n        }\n        public PersonBuilder<TParent> FirstName(string value)\n        {\n            _instance.FirstName = value;\n            return this;\n        }\n        public PersonBuilder<TParent> MiddleName(string? value)\n        {\n            _instance.MiddleName = value;\n            return this;\n        }\n        public PersonBuilder<TParent> LastName(string value)\n        {\n            _instance.LastName = value;\n            return this;\n        }\n        public TParent BuildAndSetParent<TProperty>(Expression<Func<Builder.Person, TProperty>> parentSelector) where TProperty : class\n        {\n            var memberExpr = (MemberExpression)parentSelector.Body;\n            var propertyInfo = memberExpr.Member as PropertyInfo;\n            if (propertyInfo == null)\n            {\n                var interfaceType = memberExpr.Member.DeclaringType;\n                propertyInfo = interfaceType.GetProperty(memberExpr.Member.Name);\n            }\n            propertyInfo.SetValue(_instance, _parent);\n            return _parent;\n        }\n        public Builder.Person Build()\n        {\n            return _instance;\n        }\n    }\n}\n\n"))),(0,a.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DimonSmart.BuilderGenerator\\src\\Builder\\obj\\GX\\DimonSmart.BuilderGenerator.Source\\BuilderGenerator.Source.BuilderIncrementalGenerator\\PersonBuilderBuilder.g.cs",label:"PersonBuilderBuilder.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\nusing System;\nusing System.Reflection;\nusing System.Linq.Expressions;\nnamespace Builder\n{\n    public class PersonBuilderBuilder\n    {\n        private readonly Builder.Person _instance = new Builder.Person();\n        public static PersonBuilderBuilder Create()\n        {\n            return new PersonBuilderBuilder();\n        }\n        public PersonBuilderBuilder FirstName(string value)\n        {\n            _instance.FirstName = value;\n            return this;\n        }\n        public PersonBuilderBuilder MiddleName(string? value)\n        {\n            _instance.MiddleName = value;\n            return this;\n        }\n        public PersonBuilderBuilder LastName(string value)\n        {\n            _instance.LastName = value;\n            return this;\n        }\n        public Builder.Person Build()\n        {\n            return _instance;\n        }\n        public static implicit operator Builder.Person(PersonBuilderBuilder builder)\n        {\n            return builder.Build();\n        }\n    }\n    public class PersonBuilderBuilder<TParent>\n    {\n        private readonly Builder.Person _instance = new Builder.Person();\n        private readonly TParent _parent;\n        public PersonBuilderBuilder(TParent parent)\n        {\n            _parent = parent;\n        }\n        public PersonBuilderBuilder<TParent> FirstName(string value)\n        {\n            _instance.FirstName = value;\n            return this;\n        }\n        public PersonBuilderBuilder<TParent> MiddleName(string? value)\n        {\n            _instance.MiddleName = value;\n            return this;\n        }\n        public PersonBuilderBuilder<TParent> LastName(string value)\n        {\n            _instance.LastName = value;\n            return this;\n        }\n        public TParent BuildAndSetParent<TProperty>(Expression<Func<Builder.Person, TProperty>> parentSelector) where TProperty : class\n        {\n            var memberExpr = (MemberExpression)parentSelector.Body;\n            var propertyInfo = memberExpr.Member as PropertyInfo;\n            if (propertyInfo == null)\n            {\n                var interfaceType = memberExpr.Member.DeclaringType;\n                propertyInfo = interfaceType.GetProperty(memberExpr.Member.Name);\n            }\n            propertyInfo.SetValue(_instance, _parent);\n            return _parent;\n        }\n        public Builder.Person Build()\n        {\n            return _instance;\n        }\n    }\n}\n\n"))),(0,a.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DimonSmart.BuilderGenerator\\src\\Builder\\obj\\GX\\DimonSmart.BuilderGenerator.Source\\BuilderGenerator.Source.BuilderIncrementalGenerator\\PersonBuilderContainerBuilder.g.cs",label:"PersonBuilderContainerBuilder.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\nusing System;\nusing System.Reflection;\nusing System.Linq.Expressions;\nnamespace Builder\n{\n    public class PersonBuilderContainerBuilder\n    {\n        private readonly Builder.Person _instance = new Builder.Person();\n        public static PersonBuilderContainerBuilder Create()\n        {\n            return new PersonBuilderContainerBuilder();\n        }\n        public PersonBuilderContainerBuilder FirstName(string value)\n        {\n            _instance.FirstName = value;\n            return this;\n        }\n        public PersonBuilderContainerBuilder MiddleName(string? value)\n        {\n            _instance.MiddleName = value;\n            return this;\n        }\n        public PersonBuilderContainerBuilder LastName(string value)\n        {\n            _instance.LastName = value;\n            return this;\n        }\n        public Builder.Person Build()\n        {\n            return _instance;\n        }\n        public static implicit operator Builder.Person(PersonBuilderContainerBuilder builder)\n        {\n            return builder.Build();\n        }\n    }\n    public class PersonBuilderContainerBuilder<TParent>\n    {\n        private readonly Builder.Person _instance = new Builder.Person();\n        private readonly TParent _parent;\n        public PersonBuilderContainerBuilder(TParent parent)\n        {\n            _parent = parent;\n        }\n        public PersonBuilderContainerBuilder<TParent> FirstName(string value)\n        {\n            _instance.FirstName = value;\n            return this;\n        }\n        public PersonBuilderContainerBuilder<TParent> MiddleName(string? value)\n        {\n            _instance.MiddleName = value;\n            return this;\n        }\n        public PersonBuilderContainerBuilder<TParent> LastName(string value)\n        {\n            _instance.LastName = value;\n            return this;\n        }\n        public TParent BuildAndSetParent<TProperty>(Expression<Func<Builder.Person, TProperty>> parentSelector) where TProperty : class\n        {\n            var memberExpr = (MemberExpression)parentSelector.Body;\n            var propertyInfo = memberExpr.Member as PropertyInfo;\n            if (propertyInfo == null)\n            {\n                var interfaceType = memberExpr.Member.DeclaringType;\n                propertyInfo = interfaceType.GetProperty(memberExpr.Member.Name);\n            }\n            propertyInfo.SetValue(_instance, _parent);\n            return _parent;\n        }\n        public Builder.Person Build()\n        {\n            return _instance;\n        }\n    }\n}\n\n")))),(0,a.kt)("h2",{id:"usefull"},"Usefull"),(0,a.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{target:"_blank",href:r(71562).Z},"Download Example project DimonSmart.BuilderGenerator "))),(0,a.kt)("h3",{id:"share-dimonsmartbuildergenerator"},"Share DimonSmart.BuilderGenerator"),(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDimonSmart.BuilderGenerator&quote=DimonSmart.BuilderGenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDimonSmart.BuilderGenerator&text=DimonSmart.BuilderGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDimonSmart.BuilderGenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDimonSmart.BuilderGenerator&title=DimonSmart.BuilderGenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDimonSmart.BuilderGenerator&title=DimonSmart.BuilderGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDimonSmart.BuilderGenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator")),(0,a.kt)("h3",{id:"in-the-same-category-builder---5-other-generators"},"In the same category (Builder) - 5 other generators"),(0,a.kt)("h4",{id:"architectdomainmodeling"},(0,a.kt)("a",{parentName:"h4",href:"/docs/Architect.DomainModeling"},"Architect.DomainModeling")),(0,a.kt)("h4",{id:"buildergenerator-1"},(0,a.kt)("a",{parentName:"h4",href:"/docs/BuilderGenerator"},"BuilderGenerator")),(0,a.kt)("h4",{id:"fluentify"},(0,a.kt)("a",{parentName:"h4",href:"/docs/Fluentify"},"Fluentify")),(0,a.kt)("h4",{id:"hsusgfluentmember"},(0,a.kt)("a",{parentName:"h4",href:"/docs/Hsu.Sg.FluentMember"},"Hsu.Sg.FluentMember")),(0,a.kt)("h4",{id:"stepwisebuildergenerator"},(0,a.kt)("a",{parentName:"h4",href:"/docs/StepwiseBuilderGenerator"},"StepwiseBuilderGenerator")))}g.isMDXComponent=!0},71562:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/files/DimonSmart.BuilderGenerator-b9f4c4d1af861ce4f9fb6f98ecdcf439.zip"}}]);