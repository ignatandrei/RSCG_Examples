"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4103],{18978:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>r});var i=t(74848),s=t(28453);const r=[{value:"Category &quot;FunctionalProgramming&quot; has the following generators:",id:"category-functionalprogramming-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function o(e){const n={a:"a",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"category-functionalprogramming-has-the-following-generators",children:'Category "FunctionalProgramming" has the following generators:'}),"\n",(0,i.jsxs)(n.p,{children:["1 ",(0,i.jsx)(n.a,{href:"/docs/cachesourcegenerator",children:"cachesourcegenerator"})]}),"\n",(0,i.jsxs)(n.p,{children:["2 ",(0,i.jsx)(n.a,{href:"/docs/dunet",children:"dunet"})]}),"\n",(0,i.jsxs)(n.p,{children:["3 ",(0,i.jsx)(n.a,{href:"/docs/Dusharp",children:"Dusharp"})]}),"\n",(0,i.jsxs)(n.p,{children:["4 ",(0,i.jsx)(n.a,{href:"/docs/Funcky.DiscriminatedUnion",children:"Funcky.DiscriminatedUnion"})]}),"\n",(0,i.jsxs)(n.p,{children:["5 ",(0,i.jsx)(n.a,{href:"/docs/FunicularSwitch",children:"FunicularSwitch"})]}),"\n",(0,i.jsxs)(n.p,{children:["6 ",(0,i.jsx)(n.a,{href:"/docs/N.SourceGenerators.UnionTypes",children:"N.SourceGenerators.UnionTypes"})]}),"\n",(0,i.jsxs)(n.p,{children:["7 ",(0,i.jsx)(n.a,{href:"/docs/OneOf",children:"OneOf"})]}),"\n",(0,i.jsxs)(n.p,{children:["8 ",(0,i.jsx)(n.a,{href:"/docs/PartiallyApplied",children:"PartiallyApplied"})]}),"\n",(0,i.jsxs)(n.p,{children:["9 ",(0,i.jsx)(n.a,{href:"/docs/polytype",children:"polytype"})]}),"\n",(0,i.jsxs)(n.p,{children:["10 ",(0,i.jsx)(n.a,{href:"/docs/rscg_demeter",children:"rscg_demeter"})]}),"\n",(0,i.jsxs)(n.p,{children:["11 ",(0,i.jsx)(n.a,{href:"/docs/rscg_queryables",children:"rscg_queryables"})]}),"\n",(0,i.jsxs)(n.p,{children:["12 ",(0,i.jsx)(n.a,{href:"/docs/RSCG_Utils_Memo",children:"RSCG_Utils_Memo"})]}),"\n",(0,i.jsxs)(n.p,{children:["13 ",(0,i.jsx)(n.a,{href:"/docs/Sera.Union",children:"Sera.Union"})]}),"\n",(0,i.jsxs)(n.p,{children:["14 ",(0,i.jsx)(n.a,{href:"/docs/TypeUtilities",children:"TypeUtilities"})]}),"\n",(0,i.jsxs)(n.p,{children:["15 ",(0,i.jsx)(n.a,{href:"/docs/UnionGen",children:"UnionGen"})]}),"\n",(0,i.jsxs)(n.p,{children:["16 ",(0,i.jsx)(n.a,{href:"/docs/UnionsGenerator",children:"UnionsGenerator"})]}),"\n",(0,i.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/docs/Categories/FunctionalProgramming",children:"FunctionalProgramming"})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},43645:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/UnionGen-ed8e3ffac7a7846201cbf1a616dc42df.zip"},58300:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>h,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"RSCG-Examples/UnionGen","title":"132 - UnionGen","description":"Generating unions between types","source":"@site/docs/RSCG-Examples/UnionGen.md","sourceDirName":"RSCG-Examples","slug":"/UnionGen","permalink":"/RSCG_Examples/v2/docs/UnionGen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1320,"frontMatter":{"sidebar_position":1320,"title":"132 - UnionGen","description":"Generating unions between types","slug":"/UnionGen"},"sidebar":"tutorialSidebar","previous":{"title":"131 - EnumUtilities","permalink":"/RSCG_Examples/v2/docs/EnumUtilities"},"next":{"title":"133 - FusionReactor","permalink":"/RSCG_Examples/v2/docs/FusionReactor"}}');var s=t(74848),r=t(28453),o=t(11470),a=t(19365),l=t(14252),c=t(18978);const d={sidebar_position:1320,title:"132 - UnionGen",description:"Generating unions between types",slug:"/UnionGen"},h="UnionGen  by M. Haslinger",u={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Opinionated Naming Scheme",id:"opinionated-naming-scheme",level:2},{value:"Union Object Size",id:"union-object-size",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Quality",id:"quality",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share UnionGen",id:"share-uniongen",level:3},...c.RM];function x(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"uniongen--by-m-haslinger",children:"UnionGen  by M. Haslinger"})}),"\n",(0,s.jsx)(l.A,{toc:p}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/UnionGen/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/UnionGen?label=UnionGen",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/markushaslinger/union_source_generator",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/markushaslinger/union_source_generator?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/markushaslinger/union_source_generator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"UnionGen"})]}),(0,s.jsx)(n.p,{children:"A source generator for creating C# union types via a generic marker attribute."}),(0,s.jsx)(n.p,{children:"Author: M. Haslinger"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/UnionGen/",children:"https://www.nuget.org/packages/UnionGen/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/markushaslinger/union_source_generator",children:"https://github.com/markushaslinger/union_source_generator"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/markushaslinger/union_source_generator",children:"https://github.com/markushaslinger/union_source_generator"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.h1,{id:"union-source-generator",children:"Union Source Generator"}),(0,s.jsxs)(n.p,{children:["Union Source Generator is a C# source generator that generates a union type for a set of types. The generated union type can hold any ",(0,s.jsx)(n.em,{children:"one"})," of the specified types.\nConsuming the type can be done by ",(0,s.jsx)(n.em,{children:"exhaustive"})," pattern matching."]}),(0,s.jsxs)(n.p,{children:["The main component is one ",(0,s.jsx)(n.strong,{children:"generic attribute"}),", ",(0,s.jsx)(n.code,{children:"UnionAttribute"}),", which is used to specify the types that the union can hold, on a ",(0,s.jsx)(n.code,{children:"struct"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Union<Result<int>, NotFound>]\npublic readonly partial struct SimpleObj;\n"})}),(0,s.jsxs)(n.p,{children:["This will result in a generated ",(0,s.jsx)(n.code,{children:"SimpleObj"})," type that can hold any of the specified types, ",(0,s.jsx)(n.strong,{children:"but only one at a time"}),".\nIt also provides compile time checked ",(0,s.jsx)(n.em,{children:"exhaustive"})," ",(0,s.jsx)(n.code,{children:"Switch"})," and ",(0,s.jsx)(n.code,{children:"Match"})," methods to handle the different types.\nImplicit conversions operators are generated as well as equality members."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'SimpleObj simple = CreateSimple();\nsimple.Switch(\n              r =>  Console.WriteLine($"Found: {r}"),\n              _ => Console.WriteLine("not found"));\nint result = simple.Match(r => r.Value * 2,\n                          _ => -1);\n\nSimpleObj CreateSimple() => new NotFound();\n'})}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["While the generator itself has to be a ",(0,s.jsx)(n.code,{children:"netstandard2.0"})," project, the generated code assumes C#12 / .NET 8 at this point."]}),"\n"]}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This project is ",(0,s.jsx)(n.em,{children:"heavily"})," influenced by the great ",(0,s.jsx)(n.a,{href:"https://github.com/mcintyre321/OneOf",children:"OneOf"})," library. All credit for the original concept to its authors!"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"opinionated-naming-scheme",children:"Opinionated Naming Scheme"}),(0,s.jsxs)(n.p,{children:["This library is ",(0,s.jsx)(n.strong,{children:"opinionated"})," as it will try to assign '",(0,s.jsx)(n.em,{children:"readable"}),"' names to the properties based on the specified types:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"SimpleObj simple = new SimpleObj(new Result<int>(12));\nbool found = simple.IsNotFound;\nResult<int> result = simple.AsResultOfInt32();\n"})}),(0,s.jsxs)(n.p,{children:["It even will try to detect collections and assign names like ",(0,s.jsx)(n.code,{children:"ListOfFoo"})," or ",(0,s.jsx)(n.code,{children:"DictionaryOfStringAndInt64"}),"."]}),(0,s.jsxs)(n.p,{children:["The same is true for the lambda parameter names in the ",(0,s.jsx)(n.code,{children:"Match"})," & ",(0,s.jsx)(n.code,{children:"Switch"})," methods.\nFor ",(0,s.jsx)(n.code,{children:"Switch"})," they will get names like ",(0,s.jsx)(n.code,{children:"forString"})," (or ",(0,s.jsx)(n.code,{children:"forNone"}),") and for ",(0,s.jsx)(n.code,{children:"Match"})," ones like ",(0,s.jsx)(n.code,{children:"withString"})," (or ",(0,s.jsx)(n.code,{children:"withNone"}),")."]}),(0,s.jsx)(n.p,{children:"That can work great in many scenarios but will probably lead to bad naming in some cases - that's the trade-off I'm willing to accept."}),(0,s.jsx)(n.h2,{id:"union-object-size",children:"Union Object Size"}),(0,s.jsx)(n.p,{children:"We try to be smart and use as little memory as possible for the union object."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["They are ",(0,s.jsx)(n.code,{children:"readonly struct"}),"s"]}),"\n",(0,s.jsxs)(n.li,{children:["Only those fields actually needed are generated","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"e.g. only a single reference field which is used for all reference types"}),"\n",(0,s.jsx)(n.li,{children:"if there are no reference types, no reference field is generated"}),"\n",(0,s.jsx)(n.li,{children:"if there are no value types, no value field is generated"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["A single ",(0,s.jsx)(n.code,{children:"byte"})," is used for storing the state so that they union object knows ",(0,s.jsx)(n.em,{children:"what"})," it is"]}),"\n"]}),(0,s.jsx)(n.p,{children:"Plus padding for alignment done by the runtime."}),(0,s.jsx)(n.h2,{id:"motivation",children:"Motivation"}),(0,s.jsxs)(n.p,{children:["My main motivation was to finally learn more about writing source generators by creating one myself.\nI haven't found a lot of resources regarding ",(0,s.jsx)(n.em,{children:"generic"})," marker attributes in combination with source generators, so I'm not sure my approach is optimal, but maybe it can serve as a starting point for others."]}),(0,s.jsxs)(n.p,{children:["As a first project I wanted something with a small scope and I was always a little annoyed by the property names (",(0,s.jsx)(n.code,{children:"T0"}),", ",(0,s.jsx)(n.code,{children:"T1"}),", ...) in the ",(0,s.jsx)(n.code,{children:"OneOf"})," library (which they have to use due to the types being generic - even when using their source generator).\nSo this is what I decided to tackle."]}),(0,s.jsx)(n.h2,{id:"quality",children:"Quality"}),(0,s.jsx)(n.p,{children:"This is a two-day toy project without much testing (and no serious automated tests).\nI will probably use it in my own projects in the future to see how far I'll get and fix issues as they arise."}),(0,s.jsx)(n.p,{children:"Feedback (and PRs \ud83d\ude09) to make the implementation more robust, efficient and generally better are welcome, of course!"}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Don't expect production grade reliability here!"}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Generating unions between types"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"UnionGen"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n\t<ItemGroup>\n\t  <PackageReference Include="UnionGen" Version="1.4.0" />\n\t</ItemGroup>\n\n</Project>\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnionGen\\src\\UnionTypesDemo\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"UnionGen"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using UnionTypesDemo;\n\nConsole.WriteLine("Save or not");\nvar data = SaveToDatabase.Save(0);\nConsole.WriteLine(data.IsNotFound);\ndata = SaveToDatabase.Save(1);\nConsole.WriteLine(data.IsResultOfInt32);\n\nConsole.WriteLine(data.AsResultOfInt32());\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnionGen\\src\\UnionTypesDemo\\ResultSave.cs",label:"ResultSave.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"UnionGen"})," in ",(0,s.jsx)(n.em,{children:"ResultSave.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using UnionGen.Types;\nusing UnionGen;\nnamespace UnionTypesDemo;\n\n[Union<Result<int>, NotFound>]\npublic partial struct ResultSave\n{\n}\n\n\n\n"})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnionGen\\src\\UnionTypesDemo\\SaveToDatabase.cs",label:"SaveToDatabase.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"UnionGen"})," in ",(0,s.jsx)(n.em,{children:"SaveToDatabase.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using UnionGen.Types;\n\nnamespace UnionTypesDemo;\n\npublic class SaveToDatabase\n{\n    public static ResultSave Save(int i)\n    {\n        if(i ==0)\n        {\n            return new NotFound();\n        }\n        return new Result<int>(i);\n    }\n}\n\n\n\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnionGen\\src\\UnionTypesDemo\\obj\\GX\\UnionGen.Generator\\UnionGen.UnionSourceGen\\UnionTypesDemo.ResultSave.g.cs",label:"UnionTypesDemo.ResultSave.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated by UnionSourceGen />\n#nullable enable\nusing System;\nnamespace UnionTypesDemo\n{\n\n    public readonly partial struct ResultSave : IEquatable<ResultSave>\n    {\n\t\tprivate readonly UnionGen.Types.Result<int> _value0;\n\t\tprivate readonly UnionGen.Types.NotFound _value1;\n\t\tprivate readonly UnionGen.InternalUtil.StateByte _state;\n\n\t\tprivate ResultSave(int index, int actualTypeIndex)\n\t\t{\n\t\t\t_state = new UnionGen.InternalUtil.StateByte(index, actualTypeIndex);\n\t\t}\n\n\t\tpublic ResultSave(UnionGen.Types.Result<int> value): this(0, 0)\n\t\t{\n\t\t\t_value0 = value;\n\t\t}\n\n\t\tpublic ResultSave(UnionGen.Types.NotFound value): this(1, 1)\n\t\t{\n\t\t\t_value1 = value;\n\t\t}\n\n\t\t[Obsolete(UnionGen.InternalUtil.UnionGenInternalConst.DefaultConstructorWarning, true)]\n\t\tpublic ResultSave(): this(0, 0) {}\n\n\t\tpublic bool IsResultOfInt32 => _state.Index == 0;\n\t\tpublic bool IsNotFound => _state.Index == 1;\n\n\t\tpublic UnionGen.Types.Result<int> AsResultOfInt32() =>\n\t\t\tIsResultOfInt32\n\t\t\t\t? _value0\n\t\t\t\t: throw UnionGen.InternalUtil.ExceptionHelper.ThrowNotOfType(GetTypeName(0), GetTypeName(_state.ActualTypeIndex));\n\t\t\n\t\tpublic UnionGen.Types.NotFound AsNotFound() =>\n\t\t\tIsNotFound\n\t\t\t\t? _value1\n\t\t\t\t: throw UnionGen.InternalUtil.ExceptionHelper.ThrowNotOfType(GetTypeName(1), GetTypeName(_state.ActualTypeIndex));\n\n\t\tpublic static implicit operator ResultSave(UnionGen.Types.Result<int> value) => new ResultSave(value);\n\t\tpublic static implicit operator ResultSave(UnionGen.Types.NotFound value) => new ResultSave(value);\n\t\tpublic static bool operator ==(ResultSave left, ResultSave right) => left.Equals(right);\n\t\tpublic static bool operator !=(ResultSave left, ResultSave right) => !left.Equals(right);\n\n\t\tpublic TResult Match<TResult>(Func<UnionGen.Types.Result<int>, TResult> withResultOfInt32, Func<UnionGen.Types.NotFound, TResult> withNotFound) => \t\t\n\t\t\t_state.ActualTypeIndex switch\n\t\t\t{\n\t\t\t\t0 => withResultOfInt32(_value0),\n\t\t\t\t1 => withNotFound(_value1),\n\t\t\t\t_ => throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(_state.ActualTypeIndex)\n\t\t\t};\n\n\t\tpublic void Switch(Action<UnionGen.Types.Result<int>> forResultOfInt32, Action<UnionGen.Types.NotFound> forNotFound)\t\t\n\t\t{\n\t\t\tswitch (_state.ActualTypeIndex)\n\t\t\t{\n\t\t\t\tcase 0: forResultOfInt32(_value0); break;\n\t\t\t\tcase 1: forNotFound(_value1); break;\n\t\t\t\tdefault: throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(_state.ActualTypeIndex);\n\t\t\t}\n\t\t}\n\n\t\tpublic override string ToString() => \t\t\n\t\t\t_state.Index switch\n\t\t\t{\n\t\t\t\t0 => _value0.ToString()!,\n\t\t\t\t1 => _value1.ToString()!,\n\t\t\t\t_ => throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(_state.Index)\n\t\t\t};\n\n\t\tpublic bool Equals(ResultSave other) => \n\t\t\t_state.Index == other._state.Index\n\t\t\t\t&& _state.Index switch \n\t\t\t\t{\n\t\t\t\t\t0 => _value0.Equals(other._value0),\n\t\t\t\t\t1 => _value1.Equals(other._value1),\n\t\t\t\t\t_ => false\n\t\t\t\t};\n\n\t\tpublic override bool Equals(object? obj)\n\t\t{\n\t\t\tif (ReferenceEquals(null, obj))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn obj is ResultSave other && Equals(other);\n\t\t}\n\n\t\tpublic override int GetHashCode(){\t\t\n\t\t\tunchecked\n\t\t\t{\n\t\t\t\tvar hash = _state.Index switch\n\t\t\t\t{\n\t\t\t\t\t0 => _value0.GetHashCode(),\n\t\t\t\t\t1 => _value1.GetHashCode(),\n\t\t\t\t\t_ => 0\n\t\t\t\t};\n\t\t\t\treturn (hash * 397) ^ _state.Index;\n\t\t\t}\n\t\t}\n\n\t\tpublic string GetTypeName(int index) =>\n\t\t\tindex switch \n\t\t\t{\n\t\t\t\t0 => "UnionGen.Types.Result<int>",\n\t\t\t\t1 => "UnionGen.Types.NotFound",\n\t\t\t\t_ => throw UnionGen.InternalUtil.ExceptionHelper.ThrowUnknownTypeIndex(index)\n\t\t\t};\n\n    }\n\n}\n'})})})}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(43645).A+"",children:"Download Example project UnionGen "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-uniongen",children:"Share UnionGen"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnionGen&quote=UnionGen",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnionGen&text=UnionGen:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnionGen",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnionGen&title=UnionGen",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnionGen&title=UnionGen&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnionGen",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnionGen",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnionGen"})}),"\n",(0,s.jsx)(n.p,{children:"aaa"}),"\n",(0,s.jsx)(c.Ay,{})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}}}]);