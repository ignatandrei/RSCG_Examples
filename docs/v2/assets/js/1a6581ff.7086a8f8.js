"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[8965],{8041:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>m,toc:()=>u});var t=a(87462),r=(a(67294),a(3905)),s=a(73992),o=a(18679),i=a(68839);const l={sidebar_position:390,title:"39 - Breezy",description:"ORM Mapper",slug:"/Breezy"},c="Breezy  by Ludovicdln",m={unversionedId:"RSCG-Examples/Breezy",id:"RSCG-Examples/Breezy",title:"39 - Breezy",description:"ORM Mapper",source:"@site/docs/RSCG-Examples/Breezy.md",sourceDirName:"RSCG-Examples",slug:"/Breezy",permalink:"/RSCG_Examples/v2/docs/Breezy",draft:!1,tags:[],version:"current",sidebarPosition:390,frontMatter:{sidebar_position:390,title:"39 - Breezy",description:"ORM Mapper",slug:"/Breezy"},sidebar:"tutorialSidebar",previous:{title:"38 - EnumClass",permalink:"/RSCG_Examples/v2/docs/EnumClass"},next:{title:"40 - FastGenericNew",permalink:"/RSCG_Examples/v2/docs/FastGenericNew"}},p={},u=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Breezy",id:"share-breezy",level:3},{value:"In the same category (Database) - 1 other generators",id:"in-the-same-category-database---1-other-generators",level:3},{value:"Gedaq",id:"gedaq",level:4}],d={toc:u},y="wrapper";function h(e){let{components:n,...l}=e;return(0,r.kt)(y,(0,t.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"breezy--by-ludovicdln"},"Breezy  by Ludovicdln"),(0,r.kt)(i.Z,{toc:u,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Breezy.SourceGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Breezy.SourceGenerator?label=Breezy.SourceGenerator",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Ludovicdln/Breezy"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/Ludovicdln/Breezy?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/Ludovicdln/Breezy?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"Breezy")),(0,r.kt)("p",{parentName:"admonition"},"Breezy is a lightweight Object-Relational Mapping (ORM) library for mapping objects using Source Generator in C#.It provides seamless asynchronous operations for enhanced performance."),(0,r.kt)("p",{parentName:"admonition"},"Author: Ludovicdln"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Breezy.SourceGenerator/"},"https://www.nuget.org/packages/Breezy.SourceGenerator/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Ludovicdln/Breezy"},"https://github.com/Ludovicdln/Breezy")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Ludovicdln/Breezy"},"https://github.com/Ludovicdln/Breezy"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("div",null,(0,r.kt)("img",{src:"https://zupimages.net/up/23/23/na2b.png",width:"900",height:"300"})),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Breezy.SourceGenerator//1.0.1"},(0,r.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/Breezy.SourceGenerator/",alt:"NuGet Badge"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://opensource.org/licenses/MIT"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"}))),(0,r.kt)("p",{parentName:"admonition"},"Breezy is a lightweight Object-Relational Mapping ",(0,r.kt)("b",null,"(ORM)")," library for mapping objects using ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"},(0,r.kt)("inlineCode",{parentName:"a"},"Source Generator"))," in C#. ",(0,r.kt)("br",null),"It provides seamless asynchronous operations for enhanced performance."),(0,r.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,r.kt)("h5",{parentName:"admonition",id:"nugget-package--httpswwwnugetorgpackagesbreezysourcegenerator"},"Nugget Package : ",(0,r.kt)("a",{parentName:"h5",href:"https://www.nuget.org/packages/Breezy.SourceGenerator/"},"https://www.nuget.org/packages/Breezy.SourceGenerator/")),(0,r.kt)("p",{parentName:"admonition"},"To install Breezy, simply add the package reference to your project using NuGet Package Manager or by adding the following line to your .csproj file:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n<PackageReference Include="Breezy.SourceGenerator" Version="1.0.1" />\n</ItemGroup>\n')),(0,r.kt)("h2",{parentName:"admonition",id:"getting-started"},"Getting Started"),(0,r.kt)("p",{parentName:"admonition"},"Breezy simplifies the mapping of objects and performing database operations. Here's a simple example of querying houses using Breezy's asynchronous operations :"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static async Task<IEnumerable<House>> QueryAsync<T>(this DbConnection connection, string sql, object param, ICacheableQuery<House> cacheableQuery, CancellationToken cancellationToken = default) where T : House\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using Breezy;\n\nvar houses = await connection.QueryAsync<House>("SELECT * FROM house");\n')),(0,r.kt)("p",{parentName:"admonition"},"In the above example, the QueryAsync method executes the provided SQL query and maps the results to a list of House objects asynchronously."),(0,r.kt)("h2",{parentName:"admonition",id:"mapping-objects-with-relations-n-to-n--1-to-n"},"Mapping Objects with Relations (N to N || 1 to N)"),(0,r.kt)("p",{parentName:"admonition"},"Breezy supports mapping objects with relationships. Here's an example of querying posts with tags using Breezy's asynchronous operations :"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using Breezy;\n\nvar posts = await connection.QueryAsync<Post>(\n    @"SELECT * FROM test.post p INNER JOIN posts_tags pt ON p.id = pt.post_id INNER JOIN tag t ON t.id = pt.tag_id");\n')),(0,r.kt)("p",{parentName:"admonition"},"The QueryAsync method executes the provided SQL query and maps the results to a list of Post objects. The Post class is defined as follows :"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Table("post")]\n[SplitOn(3, 4)]\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Body { get; set; }\n    public List<Tag> Tags { get; set; } = new();\n}\n\n[Table("tag")]\npublic class Tag\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public List<Post> Posts { get; set; } = new();\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"In the Post class, the ",(0,r.kt)("b",null,"Table attribute")," specifies the table name, and the ",(0,r.kt)("b",null,"SplitOn attribute")," indicates the column indices to split when mapping the object from the database."),(0,r.kt)("i",null,"Circular reference doesn't throw exception ! "),(0,r.kt)("h4",{parentName:"admonition",id:"vs-dapper"},"Vs Dapper"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var sql = @"SELECT p.id, p.title, p.body, t.id, t.name\n                FROM post p \n                INNER JOIN posts_tags pt ON pt.post_id = p.id\n                INNER JOIN tag t ON t.id = pt.tag_id";\n                \n    var posts = await connection.QueryAsync<Post, Tag, Post>(sql, (post, tag) => {      \n        post.Tags.Add(tag);\n        return post;\n    }, splitOn: "id");\n    \n    var result = posts.GroupBy(p => p.PostId).Select(g =>\n    {\n        var groupedPost = g.First();\n        groupedPost.Tags = g.Select(p => p.Tags.Single()).ToList();\n        return groupedPost;\n    });\n    \n   // Dapper is less user friendly for theses using case\n')),(0,r.kt)("h2",{parentName:"admonition",id:"mapping-objects-with-reference-types"},"Mapping Objects with Reference Type(s)"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class UserReference\n{\n    public int Id { get; set; }\n    public Position Position { get; set; }\n}\n\npublic sealed class Position\n{\n    public string ZipCode { get; set; }\n    public string City { get; set; }\n    public string Address { get; set; }\n}\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var users = await connection.QueryAsync<UserReference>("SELECT u.id, u.zip_code, u.city, u.address FROM user_ref u");\n')),(0,r.kt)("p",{parentName:"admonition"},"The QueryAsync method executes the SQL query and automatically maps the result columns to the corresponding properties of the UserReference entity, including the reference type Position."),(0,r.kt)("h2",{parentName:"admonition",id:"querying-with-anonymous-types"},"Querying with Anonymous Types"),(0,r.kt)("p",{parentName:"admonition"},"Breezy allows you to query using anonymous types as parameters. Here's an example :"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var houses = await connection.QueryAsync<House>("SELECT * FROM house h WHERE h.id = @Id", new {Id = 1});\n')),(0,r.kt)("p",{parentName:"admonition"},"The anonymous type is used to pass the ",(0,r.kt)("b",null,"Id")," parameter."),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"IMPORTANT :"),"\nMake sure that the column index in the SQL query match the property index in any class for the mapping to work correctly."),(0,r.kt)("br",null),(0,r.kt)("b",null,"You need to add any relations at the end of you main object !")),(0,r.kt)("h2",{parentName:"admonition",id:"caching-for-performance-optimization"},"Caching for Performance Optimization"),(0,r.kt)("p",{parentName:"admonition"},"Breezy supports implementing caching mechanisms, such as in-memory or distributed caching, to reduce the memory footprint and improve query execution time. You can implement your own caching strategy based on your specific requirements."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface ICacheableQuery<T> where T : class\n{\n    public Task<IEnumerable<T>> GetCacheableResultsAsync(IdentityQuery identityQuery);\n    \n    public Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable<T> results);\n}   \n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// Check if the query result is already cached\n\nvar identityQuery = new IdentityQuery(sql);\n\nvar cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery);\n\nif (cacheableResults.Any())\n    return cacheableResults;\n    \n// Execute the query    \n\nvar results = new List<T>();\n\nwhile (await reader.ReadAsync(cancellationToken).ConfigureAwait(false)) \n{ \n    // processing...\n}\n\n// Cache the query result for X ms/s\n\nawait cacheableQuery.SetCacheableResultsAsync(identityQuery, results);\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example of implementation (Memory Cache)"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public sealed class MemoryCacheableQuery<T> : ICacheableQuery<T> where T : class\n{\n    private readonly Dictionary<IdentityQuery, Tuple<DateTime, IEnumerable<T>>> _cacheableData = new();\n    \n    public Task<IEnumerable<T>> GetCacheableResultsAsync(IdentityQuery identityQuery)\n    {\n        if (_cacheableData.TryGetValue(identityQuery, out var results))\n        {\n            var (addDate, collection) = results;\n\n            if ((DateTime.Now - addDate) < TimeSpan.FromSeconds(10))\n                return Task.FromResult<IEnumerable<T>>(collection);\n\n            _cacheableData.Remove(identityQuery);\n        }\n\n        return Task.FromResult<IEnumerable<T>>(Array.Empty<T>());\n    }\n\n    public Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable<T> results)\n    {\n        _cacheableData.Add(identityQuery, new Tuple<DateTime, IEnumerable<T>>(DateTime.Now, results));\n\n        return Task.CompletedTask;\n    }\n}\n"))),(0,r.kt)("h2",{parentName:"admonition",id:"execute-a-command-that-return-result"},"Execute a Command that return result"),(0,r.kt)("p",{parentName:"admonition"},"Breezy provides the ExecuteAsync method for executing SQL statements that can return results. Here's an example of using ExecuteAsync to insert data into a table and retrieve the last inserted ID:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static async Task<int> ExecuteAsync(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var lastId = await connection.ExecuteAsync("INSERT INTO myTable (x, y) VALUES (x, y); SELECT LAST_INSERT_ID();");\n')),(0,r.kt)("h2",{parentName:"admonition",id:"execute-a-command-that-return-results-with-transaction"},"Execute a Command that return results with Transaction"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static async Task<int[]> ExecuteAsync(this DbConnection connection, string[] sql, DbTransaction transaction, CancellationToken cancellationToken = default)\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var dbTransaction = await _mySqlConnection.BeginTransactionAsync();\n\nvar results = await connection.ExecuteAsync(new [] { "INSERT INTO myTable (x, y) VALUES (x, y); SELECT LAST_INSERT_ID();" }, { /* ... */ }, dbTransaction);\n')),(0,r.kt)("h2",{parentName:"admonition",id:"performance--10k-rows"},"Performance ~ 10k rows"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19044.2965/21H2/November2021Update)\nAMD Ryzen 5 3500X, 1 CPU, 6 logical and 6 physical cores\n.NET SDK=8.0.100-preview.2.23157.25\n[Host]     : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\nDefaultJob : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n")),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ORM"),(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Return"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean"),(0,r.kt)("th",{parentName:"tr",align:"right"},"StdDev"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Gen0"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Gen1"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Gen2"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Allocated"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Breezy"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryAsync","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"No relation"),(0,r.kt)("td",{parentName:"tr",align:"right"},"491.1 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"4.08 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.0801"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"672 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dapper"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryAsync","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"No relation"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14,005,807.3 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"85,785.13 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"437.5000"),(0,r.kt)("td",{parentName:"tr",align:"right"},"265.6250"),(0,r.kt)("td",{parentName:"tr",align:"right"},"125.0000"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3899691 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Breezy"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryFirstOrDefault","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"No relation"),(0,r.kt)("td",{parentName:"tr",align:"right"},"589.8 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"7.28 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.0935"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"784 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dapper"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryFirstOrDefault","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"No relation"),(0,r.kt)("td",{parentName:"tr",align:"right"},"540,714.1 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"44,717.07 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.9766"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"13081 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Breezy"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryAsync","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"1 To N relations"),(0,r.kt)("td",{parentName:"tr",align:"right"},"588.5 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"9.26 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.0801"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"672 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dapper"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryAsync","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"1 To N relations"),(0,r.kt)("td",{parentName:"tr",align:"right"},"98,695,865.6 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"740,908.87 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2000.0000"),(0,r.kt)("td",{parentName:"tr",align:"right"},"833.3333"),(0,r.kt)("td",{parentName:"tr",align:"right"},"500.0000"),(0,r.kt)("td",{parentName:"tr",align:"right"},"17760052 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Breezy"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryFirstOrDefault","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"1 To N relations"),(0,r.kt)("td",{parentName:"tr",align:"right"},"690.7 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"13.41 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.0935"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"784 B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dapper"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryFirstOrDefault","<","T",">"),(0,r.kt)("td",{parentName:"tr",align:null},"1 To N relations"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14,866,187.7 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"385,888.24 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"30835 B")))),(0,r.kt)("h2",{parentName:"admonition",id:"why-breezy-"},"Why Breezy ?"),(0,r.kt)("p",{parentName:"admonition"},"I wanted to offer similary fonctionalities faster than ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DapperLib/Dapper"},(0,r.kt)("inlineCode",{parentName:"a"},"Dapper"))," with source generator")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"ORM Mapper")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"Breezy")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    <ItemGroup>\n      <PackageReference Include="Breezy.SourceGenerator" Version="1.0.1"  OutputItemType="Analyzer" ReferenceOutputAssembly="false" />\n      <PackageReference Include="Microsoft.Data.SqlClient" Version="5.1.1" />\n    </ItemGroup>\n</Project>\n\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Breezy")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing var connection = new SqlConnection();\n//in the order of the properties in Person.cs\nvar persons = await connection.QueryAsync<Person>("SELECT Id,firstname, lastname FROM person");\n\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Breezy")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'namespace BreezyDemo;\n\n[Table("person")]//this is Breezy.Table\npublic class Person\n{\n    public int ID { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\globals.cs",label:"globals.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Breezy")," in ",(0,r.kt)("em",{parentName:"p"},"globals.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"global using Breezy;\nglobal using Microsoft.Data.SqlClient;\nglobal using BreezyDemo;\n\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\DbConnectionExtensions.g.cs",label:"DbConnectionExtensions.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated /> \nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace DbConnectionExtensions\n{\n    public static class DbConnectionExtensions\n    {\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int> ExecuteAsync(this DbConnection connection, string sql, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            try\n            {\n                return await command.ExecuteNonQueryAsync(cancellationToken);\n            }\n            finally\n            {\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int> ExecuteAsync(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            foreach (var property in param.GetType().GetProperties())\n            {\n                var parameter = command.CreateParameter();\n                parameter.ParameterName = "@" + property.Name;\n                parameter.Value = property.GetValue(param);\n                command.Parameters.Add(parameter);\n            }\n\n            try\n            {\n                return await command.ExecuteNonQueryAsync(cancellationToken);\n            }\n            finally\n            {\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "transaction">The transaction to use for this query.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int[]> ExecuteAsync(this DbConnection connection, string[] sql, DbTransaction transaction, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            var commands = new DbCommand[sql.Length];\n            for (var i = 0; i < sql.Length; i++)\n            {\n                await using var command = connection.CreateCommand();\n                command.CommandText = sql[i];\n                command.Transaction = transaction;\n                commands[i] = command;\n            }\n\n            try\n            {\n                var results = new int[sql.Length];\n                for (var i = 0; i < commands.Length; i++)\n                    results[i] = await commands[i].ExecuteNonQueryAsync(cancellationToken);\n                await transaction.CommitAsync();\n                return results;\n            }\n            catch (DbException e)\n            {\n                await transaction.RollbackAsync();\n                return Array.Empty<int>();\n            }\n            finally\n            {\n                transaction.Dispose();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "transaction">The transaction to use for this query.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int[]> ExecuteAsync(this DbConnection connection, string[] sql, object[] param, DbTransaction transaction, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            var commands = new DbCommand[sql.Length];\n            for (var i = 0; i < sql.Length; i++)\n            {\n                await using var command = connection.CreateCommand();\n                command.CommandText = sql[i];\n                command.Transaction = transaction;\n                var paramt = param[i];\n                foreach (var property in paramt.GetType().GetProperties())\n                {\n                    var parameter = command.CreateParameter();\n                    parameter.ParameterName = "@" + property.Name;\n                    parameter.Value = property.GetValue(paramt);\n                    command.Parameters.Add(parameter);\n                }\n\n                commands[i] = command;\n            }\n\n            try\n            {\n                var results = new int[sql.Length];\n                for (var i = 0; i < commands.Length; i++)\n                    results[i] = await commands[i].ExecuteNonQueryAsync(cancellationToken);\n                await transaction.CommitAsync();\n                return results;\n            }\n            catch (DbException e)\n            {\n                await transaction.RollbackAsync();\n                return Array.Empty<int>();\n            }\n            finally\n            {\n                transaction.Dispose();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\ICacheableQuery.g.cs",label:"ICacheableQuery.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\nusing System;\n\nnamespace Breezy;\n\npublic interface ICacheableQuery<T> where T : class\n{\n    public Task<IEnumerable<T>> GetCacheableResultsAsync(IdentityQuery identityQuery);\n    public Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable<T> results);\n}   \n"))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\IdentityQuery.g.cs",label:"IdentityQuery.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'        // <auto-generated />\n        using System;\n\n        namespace Breezy;\n\n        public class IdentityQuery : IEquatable<IdentityQuery>        \n        {\n            private readonly int _hashCodeSql;\n            private readonly int? _hashCodeParam;\n            public IdentityQuery(string sql, object? param = null) => (_hashCodeSql, _hashCodeParam) = (sql.GetHashCode(), param?.GetHashCode());\n            public bool Equals(IdentityQuery? other)\n            {\n                if (ReferenceEquals(other, this)) return true;\n                return this.GetHashCode() == other?.GetHashCode();\n            }\n            public override string ToString() \n                => $"{_hashCodeSql.ToString()}-{_hashCodeParam?.ToString()}";\n            public override bool Equals(object? obj)      \n                => Equals(obj as IdentityQuery);          \n            public override int GetHashCode()         \n                => HashCode.Combine(_hashCodeSql, _hashCodeParam);    \n        }   \n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\PersonExtensions.g.cs",label:"PersonExtensions.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated /> \nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace BreezyDemo\n{\n    public static class PersonExtensions\n    {\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            foreach (var property in param.GetType().GetProperties())\n            {\n                var parameter = command.CreateParameter();\n                parameter.ParameterName = "@" + property.Name;\n                parameter.Value = property.GetValue(param);\n                command.Parameters.Add(parameter);\n            }\n\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            var identityQuery = new IdentityQuery(sql);\n            var cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery);\n            if (cacheableResults.Any())\n                return cacheableResults;\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                await cacheableQuery.SetCacheableResultsAsync(identityQuery, persons.Values);\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, object param, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            foreach (var property in param.GetType().GetProperties())\n            {\n                var parameter = command.CreateParameter();\n                parameter.ParameterName = "@" + property.Name;\n                parameter.Value = property.GetValue(param);\n                command.Parameters.Add(parameter);\n            }\n\n            var identityQuery = new IdentityQuery(sql);\n            var cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery);\n            if (cacheableResults.Any())\n                return cacheableResults;\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                await cacheableQuery.SetCacheableResultsAsync(identityQuery, persons.Values);\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, cancellationToken)).FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, param, cancellationToken)).FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, cacheableQuery, cancellationToken)).FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, object param, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, param, cacheableQuery, cancellationToken)).FirstOrDefault();\n        }\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\SplitOnAttribute.g.cs",label:"SplitOnAttribute.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\nusing System;\n\nnamespace Breezy;\n\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\npublic sealed class SplitOnAttribute : Attribute\n{\n    public int[] Index { get; init; }\n\n    public SplitOnAttribute(params int[] index) => Index = index ?? throw new ArgumentNullException("index not defined"); \n}\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\TableAttribute.g.cs",label:"TableAttribute.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated />\nusing System;\n\nnamespace Breezy;\n\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\npublic sealed class TableAttribute : Attribute\n{\n    public string Name { get; init; }\n\n    public TableAttribute(string name) => Name = name ?? throw new ArgumentNullException(name); \n}\n")))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(49736).Z},"Download Example project Breezy "))),(0,r.kt)("h3",{id:"share-breezy"},"Share Breezy"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&quote=Breezy",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&text=Breezy:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&title=Breezy",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&title=Breezy&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Breezy"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Breezy")),(0,r.kt)("h3",{id:"in-the-same-category-database---1-other-generators"},"In the same category (Database) - 1 other generators"),(0,r.kt)("h4",{id:"gedaq"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Gedaq"},"Gedaq")))}h.isMDXComponent=!0},49736:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/files/Breezy-2c5174f1f27def0dd9528b8ea9eb6c81.zip"}}]);