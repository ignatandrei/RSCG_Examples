"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6724],{82102:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=a(87462),o=(a(67294),a(3905));const r={sidebar_position:15,title:"Good Practices"},l=void 0,s={unversionedId:"GoodPractices",id:"GoodPractices",title:"Good Practices",description:"Content",source:"@site/docs/GoodPractices.md",sourceDirName:".",slug:"/GoodPractices",permalink:"/RSCG_Examples/v2/docs/GoodPractices",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,title:"Good Practices"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/RSCG_Examples/v2/docs/intro"},next:{title:"About",permalink:"/RSCG_Examples/v2/docs/about"}},i={},d=[{value:"Content",id:"content",level:2},{value:"If you are using a generator",id:"if-you-are-using-a-generator",level:2},{value:"For the Roslyn generator project",id:"for-the-roslyn-generator-project",level:2},{value:"For easy debugging, add IsRoslynComponent",id:"for-easy-debugging-add-isroslyncomponent",level:3},{value:"Aim for ReferenceOutputAssembly=&quot;false&quot;",id:"aim-for-referenceoutputassemblyfalse",level:3},{value:"Add reference to another package when need just for compilation",id:"add-reference-to-another-package-when-need-just-for-compilation",level:3},{value:"For files generated",id:"for-files-generated",level:2},{value:"Add .g.cs extension",id:"add-gcs-extension",level:3},{value:"Add auto-generated comment",id:"add-auto-generated-comment",level:3},{value:"Add a version to the files generated",id:"add-a-version-to-the-files-generated",level:3},{value:"Make the full path of the file generated shorter",id:"make-the-full-path-of-the-file-generated-shorter",level:3},{value:"mark the code as non - code coverage",id:"mark-the-code-as-non---code-coverage",level:3},{value:"Add comments for method / classes  /  properties generated",id:"add-comments-for-method--classes----properties-generated",level:3},{value:"If you&#39;re fond of nullable reference types",id:"if-youre-fond-of-nullable-reference-types",level:3},{value:"For deploy",id:"for-deploy",level:2},{value:"Add source link",id:"add-source-link",level:3},{value:"Ensure in nuget",id:"ensure-in-nuget",level:2},{value:"performance",id:"performance",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"content"},"Content"),(0,o.kt)("p",null,"I am trying here to add good practices , as I see from the community and from my experience.\nThe examples are from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WaitAndOptions"},"https://github.com/ignatandrei/RSCG_WaitAndOptions")," project"),(0,o.kt)("h2",{id:"if-you-are-using-a-generator"},"If you are using a generator"),(0,o.kt)("p",null,"To see the files generated , add the following to the csproj file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<PropertyGroup>\n    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n    <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n</PropertyGroup>\n")),(0,o.kt)("p",null," Then go to the obj/GX folder and inspect the files generated "),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),"If you have downloaded https://github.com/ignatandrei/RSCG_WaitAndOptions , see src\\Console_Wait\\Console_Wait.csproj file",(0,o.kt)("p",null,"also, after compiling, you can see the files generated in the obj/GX folder from the src\\Console_Wait folder")),(0,o.kt)("h2",{id:"for-the-roslyn-generator-project"},"For the Roslyn generator project"),(0,o.kt)("h3",{id:"for-easy-debugging-add-isroslyncomponent"},"For easy debugging, add IsRoslynComponent"),(0,o.kt)("p",null,"You can debug easy the component if you add the following code to the Roslyn csproj file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<PropertyGroup>\n    <IsRoslynComponent>true</IsRoslynComponent>\n</PropertyGroup>\n")),(0,o.kt)("p",null,"Then add a simple console ( or any other project) and reference the Roslyn project.\n( Pay attention to ReferenceOutputAssembly property ,could be false or true)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n    <ProjectReference Include="..\\RSCG_Wait\\RSCG_Wait.csproj" OutputItemType="Analyzer"\n                    ReferenceOutputAssembly="false"  />\n</ItemGroup>\n')),(0,o.kt)("p",null,"Then in the Roslyn project you can add a breakpoint and debug the code ."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),(0,o.kt)("p",null,"If you have downloaded ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WaitAndOptions"},"https://github.com/ignatandrei/RSCG_WaitAndOptions")," ,\nsee src\\RSCG_Wait\\RSCG_Wait.csproj file ")),(0,o.kt)("h3",{id:"aim-for-referenceoutputassemblyfalse"},'Aim for ReferenceOutputAssembly="false"'),(0,o.kt)("p",null,"Generally speaking , the work of a Roslyn generator is to generate code. So, you do not need to reference the assembly generated when publishing the build. "),(0,o.kt)("p",null,'So, you should aim for ReferenceOutputAssembly="false" in the csproj file that reference the Roslyn generator.'),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand")),"### General attributes / code",(0,o.kt)("p",null,"Problem - make internal or have another assembly referenced ( or the opposite)\n",(0,o.kt)("a",{parentName:"p",href:"https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/"},"https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/")),(0,o.kt)("h3",{id:"add-reference-to-another-package-when-need-just-for-compilation"},"Add reference to another package when need just for compilation"),(0,o.kt)("p",null,"TODO: add example"),(0,o.kt)("h2",{id:"for-files-generated"},"For files generated"),(0,o.kt)("h3",{id:"add-gcs-extension"},"Add .g.cs extension"),(0,o.kt)("p",null,"Add a .g.cs generated suffix so some tools consider the file to be generated"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),(0,o.kt)("p",null,"The following code is from the project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WaitAndOptions"},"https://github.com/ignatandrei/RSCG_WaitAndOptions")," "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'private void GenerateData(SourceProductionContext context /*other arguments*/)\n{\n     context.AddSource("WaitGeneratorStart.g", $$"""\n//generated code here\n""");\n}\n'))),(0,o.kt)("h3",{id:"add-auto-generated-comment"},"Add auto-generated comment"),(0,o.kt)("p",null,"As a header of the file generated, add the following comment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version: ...\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),"In the project  https://github.com/ignatandrei/RSCG_WaitAndOptions , this the header",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'static string Header()\n{\n    var version = ThisAssembly.Info.Version;\n    var name = ThisAssembly.Info.Title;\n    var header = $$"""\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool {{name}}.\n//     Runtime Version: {{version}}\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n""";\n    return header;\n}\n'))),(0,o.kt)("h3",{id:"add-a-version-to-the-files-generated"},"Add a version to the files generated"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'[global::System.CodeDom.Compiler.GeneratedCode("GeneratorName", "1.0.0.0")]\n')),(0,o.kt)("p",null,"You could use the version from the generator in order to know what version of the generator was used to generate the code."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),(0,o.kt)("p",null,"You could use AssemblyInfo , as I have done myself into the project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_WaitAndOptions"},"https://github.com/ignatandrei/RSCG_WaitAndOptions")," "),(0,o.kt)("p",null,"In the csproj file , add the following"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n    <PackageReference Include="ThisAssembly.AssemblyInfo" Version="1.4.3" OutputItemType="Analyzer"\n                    ReferenceOutputAssembly="false">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n</ItemGroup>\n\n')),(0,o.kt)("p",null,"And use when generating the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var version=ThisAssembly.Info.Version;\nvar name = ThisAssembly.Info.Title;\nvar data = $$"""\nnamespace RSCG_Wait;\n[global::System.CodeDom.Compiler.GeneratedCode("{{name}}", "{{version}}")]\npublic partial class OptionsFromBuild{\n\n}\n""";\n'))),(0,o.kt)("h3",{id:"make-the-full-path-of-the-file-generated-shorter"},"Make the full path of the file generated shorter"),(0,o.kt)("p",null,"Because of the 260 characters limit for the path, you should the path of the files generated shorter. See more at\n",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell"},"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),(0,o.kt)("p",null,"The files generated for the project src\\Console_Wait\\Console_Wait.csproj "),(0,o.kt)("p",null,"are in the folder"),(0,o.kt)("p",null,"obj\\GX\\RSCG_Wait\\RSCG_Wait.WaitGenerator"),(0,o.kt)("p",null,"i.e obj\\GX\\Name of the Nuget\\Name of the class name that implements IIncrementalGenerator")),(0,o.kt)("h3",{id:"mark-the-code-as-non---code-coverage"},"mark the code as non - code coverage"),(0,o.kt)("p",null,"Add the following attribute to the generated code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),(0,o.kt)("p",null,"In the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var data = $$"""\n{{Header()}}\nnamespace RSCG_Wait;\n[global::System.CodeDom.Compiler.GeneratedCode("{{name}}", "{{version}}")]\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\npartial class OptionsFromBuild\n{\n""";\n'))),(0,o.kt)("h3",{id:"add-comments-for-method--classes----properties-generated"},"Add comments for method / classes  /  properties generated"),(0,o.kt)("p",null,"Add comments to the generated code in order to help the user understand the code generated"),(0,o.kt)("p",null,"Or if not , add "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"//pragma warning disable CS1591\n")),(0,o.kt)("p",null,"to the generated code"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),(0,o.kt)("p",null,"In the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'context.AddSource("WaitGeneratorStart.g", $$"""\n{{Header()}}\nnamespace RSCG_Wait;\n//pragma warning disable CS1591\n[global::System.CodeDom.Compiler.GeneratedCode("{{name}}", "{{version}}")]\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\npartial class MyGeneratedCode\n'))),(0,o.kt)("h3",{id:"if-youre-fond-of-nullable-reference-types"},"If you're fond of nullable reference types"),(0,o.kt)("p",null," Add "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"#nullable enable\n")),(0,o.kt)("p",null," at the start of the file and"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"#nullable restore\n")),(0,o.kt)("p",null,"at the end of the file"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example - click to expand"),"In the mentioned project src\\RSCG_Wait\\RSCG_Wait.csproj",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'context.AddSource("WaitGeneratorStart.g", $$"""\n{{Header()}}\n#nullable enable\nnamespace RSCG_Wait;\n//pragma warning disable CS1591\n[global::System.CodeDom.Compiler.GeneratedCode("{{name}}", "{{version}}")]\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\npartial class MyGeneratedCode\n{\n    public static string DateStart => "{{DateTime.Now.ToString()}}";\n    public static int SecondsToWait={{secondsToWait}};\n}\n#nullable restore\n""");\n'))),(0,o.kt)("h2",{id:"for-deploy"},"For deploy"),(0,o.kt)("h3",{id:"add-source-link"},"Add source link"),(0,o.kt)("p",null,"TODO: add example"),(0,o.kt)("h2",{id:"ensure-in-nuget"},"Ensure in nuget"),(0,o.kt)("p",null,"image addToNuget"),(0,o.kt)("h2",{id:"performance"},"performance"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/"},"https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/")),(0,o.kt)("p",null," ",(0,o.kt)("a",{parentName:"p",href:"https://www.thinktecture.com/net/roslyn-source-generators-high-level-api-forattributewithmetadataname/"},"https://www.thinktecture.com/net/roslyn-source-generators-high-level-api-forattributewithmetadataname/")),(0,o.kt)("p",null," ",(0,o.kt)("a",{parentName:"p",href:"https://papafe.dev/posts/source-generators-tips/"},"https://papafe.dev/posts/source-generators-tips/")))}u.isMDXComponent=!0}}]);