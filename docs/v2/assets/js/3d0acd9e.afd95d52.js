"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4200],{83061:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>y,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var n=a(87462),i=(a(67294),a(3905)),r=a(73992),s=a(18679),o=a(68839);const l={sidebar_position:1760,title:"176 - Darp.BinaryObjects",description:"Serialize bits of data",slug:"/Darp.BinaryObjects"},p="Darp.BinaryObjects  by Ross Light GmbH",m={unversionedId:"RSCG-Examples/Darp.BinaryObjects",id:"RSCG-Examples/Darp.BinaryObjects",title:"176 - Darp.BinaryObjects",description:"Serialize bits of data",source:"@site/docs/RSCG-Examples/Darp.BinaryObjects.md",sourceDirName:"RSCG-Examples",slug:"/Darp.BinaryObjects",permalink:"/RSCG_Examples/v2/docs/Darp.BinaryObjects",draft:!1,tags:[],version:"current",sidebarPosition:1760,frontMatter:{sidebar_position:1760,title:"176 - Darp.BinaryObjects",description:"Serialize bits of data",slug:"/Darp.BinaryObjects"},sidebar:"tutorialSidebar",previous:{title:"175 - Dolly",permalink:"/RSCG_Examples/v2/docs/Dolly"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},d={},c=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Darp.BinaryObjects",id:"share-darpbinaryobjects",level:3},{value:"In the same category (Bitwise) - 1 other generators",id:"in-the-same-category-bitwise---1-other-generators",level:3},{value:"BitsKit",id:"bitskit",level:4}],u={toc:c},b="wrapper";function y(e){let{components:t,...l}=e;return(0,i.kt)(b,(0,n.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"darpbinaryobjects--by-ross-light-gmbh"},"Darp.BinaryObjects  by Ross Light GmbH"),(0,i.kt)(o.Z,{toc:c,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Darp.BinaryObjects/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Darp.BinaryObjects?label=Darp.BinaryObjects",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rosslight/Darp.BinaryObjects"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/rosslight/Darp.BinaryObjects?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/rosslight/Darp.BinaryObjects?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"Darp.BinaryObjects")),(0,i.kt)("p",{parentName:"admonition"},"A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions for binary serialization."),(0,i.kt)("p",{parentName:"admonition"},"Author: Ross Light GmbH"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Darp.BinaryObjects/"},"https://www.nuget.org/packages/Darp.BinaryObjects/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rosslight/Darp.BinaryObjects"},"https://github.com/rosslight/Darp.BinaryObjects")),(0,i.kt)("p",{parentName:"admonition"},"Source : ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rosslight/Darp.BinaryObjects"},"https://github.com/rosslight/Darp.BinaryObjects"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("div",{align:"center"},(0,i.kt)("h1",{parentName:"admonition",id:"darpbinaryobjects"},"Darp.BinaryObjects"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Darp.BinaryObjects"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Darp.BinaryObjects.svg",alt:"NuGet"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Darp.BinaryObjects"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Darp.BinaryObjects",alt:"Downloads"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/dotnet-net8.0%20%7C%20net9.0-blue",alt:"Dotnet Version"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/c%23-11-blue",alt:"Language Version"})),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/rosslight/Darp.BinaryObjects/actions/workflows/test_and_publish.yml"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/rosslight/Darp.BinaryObjects/actions/workflows/test_and_publish.yml/badge.svg",alt:"Tests"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/license/rosslight/Darp.BinaryObjects",alt:"License"})),(0,i.kt)("h3",{parentName:"admonition",id:"a-source-generator-to-generate-tryreadwrite-littlebigendian-methods-for-structclass-definitions"},"A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions."),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"[!IMPORTANT]",(0,i.kt)("br",{parentName:"p"}),"\n","This package is under heavy development. Anything is subject to change."))),"You should use the source generation when you want: - Serialization to a buffer of bytes - Deserialization from a buffer already completely received - Endianness during serialization - Common interfaces for serialization are required which allow to implement more complex scenarios by hand without the generator - Usage of something like BinaryPrimitives but for more complex types - Can work with a minimum c# LanguageVersion of 11 and net8.0 / net9.0",(0,i.kt)("p",{parentName:"admonition"},"If these requirements do not meet your expectations, check out those other wonderful projects"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Several binary serializers. e.g. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Cysharp/MemoryPack"},"MemoryPack"),", ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Sergio0694/BinaryPack"},"BinaryPack"),", ...\nwhich are great if direct binary serialization is not needed"),(0,i.kt)("li",{parentName:"ul"},"Serialization libraries relying on reflection. e.g. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/adam-dot-cohen/HyperSerializer"},"HyperSerializer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/RudolfKurkaMs/StructPacker"},"StructPacker")," - not supporting allocation less packing/unpacking"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jefffhaynes/BinarySerializer?tab=readme-ov-file"},"BinarySerializer")," - Allows for binary serialization with a way larger feature set but more difficult to understand and relying on reflection")),(0,i.kt)("h2",{parentName:"admonition",id:"supported-properties"},"Supported properties"),(0,i.kt)("p",{parentName:"admonition"},"Here is a list of the property types currently supported by the library:"),(0,i.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Unmanaged types: ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sbyte"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"byte"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"short"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ushort"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"uint"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ulong"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"char"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"double")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","BinaryObjects implementing ",(0,i.kt)("inlineCode",{parentName:"li"},"IWritable")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"IReadable")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Blittable types"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Enums"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Other .NET types: ",(0,i.kt)("inlineCode",{parentName:"li"},"BitArray"))),(0,i.kt)("p",{parentName:"admonition"},"For all of these types, it should be possible to define as array types:"),(0,i.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Memory abstractions: ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadOnlyMemory<T>")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Arrays: ",(0,i.kt)("inlineCode",{parentName:"li"},"T[]")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Lists: ",(0,i.kt)("inlineCode",{parentName:"li"},"List<T>")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Collections: ",(0,i.kt)("inlineCode",{parentName:"li"},"IEnumerable<T>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IReadOnlyCollection<T>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ICollection<T>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IReadOnlyList<T>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IList<T>"))),(0,i.kt)("p",{parentName:"admonition"},"To control these types there are attributes"),(0,i.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,i.kt)("inlineCode",{parentName:"li"},"BinaryIgnore"),": Ignore some members"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,i.kt)("inlineCode",{parentName:"li"},"BinaryElementCount"),": Sets the number of elements in an array"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,i.kt)("inlineCode",{parentName:"li"},"BinaryReadRemaining"),": Reads the remaining into an array"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,i.kt)("inlineCode",{parentName:"li"},"BinaryLength"),": Sets the length of a member")),(0,i.kt)("p",{parentName:"admonition"},"Unplanned:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Unmanaged types have no clearly defined length / endianness: ",(0,i.kt)("del",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"del"},"nint")),", ",(0,i.kt)("del",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"del"},"nuint")),", ",(0,i.kt)("del",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"del"},"decimal"))),(0,i.kt)("li",{parentName:"ul"},"Multidimensional arrays (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"T[,]"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T[,,]"),", etc.)"),(0,i.kt)("li",{parentName:"ul"},"Jagged arrays (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"T[][]"),", etc.)"),(0,i.kt)("li",{parentName:"ul"},"Dictionaries: ",(0,i.kt)("inlineCode",{parentName:"li"},"Dictionary<TKey, TValue>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IDictionary<TKey, TValue>")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"IReadOnlyDictionary<TKey, TValue>")),(0,i.kt)("li",{parentName:"ul"},"Nullable value types: ",(0,i.kt)("inlineCode",{parentName:"li"},"Nullable<T>")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"T?"))),(0,i.kt)("h2",{parentName:"admonition",id:"what-is-serialized"},"What is serialized?"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any ",(0,i.kt)("inlineCode",{parentName:"p"},"real"),", user-defined member in a ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," declaration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any ",(0,i.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"auto property")," which is settable or has a parameter with matching type and name in the constructor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If there are multiple constructors defined the one with a ",(0,i.kt)("inlineCode",{parentName:"p"},"BinaryConstructorAttribute")," is being used"))),(0,i.kt)("p",{parentName:"admonition"},"There are warnings if:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"The constructor cannot be resolved"),(0,i.kt)("li",{parentName:"ul"},"There are multiple constructors but none with a ",(0,i.kt)("inlineCode",{parentName:"li"},"BinaryConstructorAttribute")),(0,i.kt)("li",{parentName:"ul"},"A member is readonly and does not have a matching constructor argument or is explicitly ignored")),(0,i.kt)("h2",{parentName:"admonition",id:"how-its-supposed-to-work"},"How it's supposed to work"),(0,i.kt)("p",{parentName:"admonition"},"Let's pretend we have a series of bytes:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"01020003040506\n\nA: 01\nB: 0200\nData: 03040506\n")),(0,i.kt)("p",{parentName:"admonition"},"We now want to read an object from these bytes similar to how we would do with ",(0,i.kt)("inlineCode",{parentName:"p"},"BinaryPrimitives"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"[BinaryObject]\npublic readonly record struct SomeTestStruct(byte A, ushort B, ReadOnlyMemory<byte> Data);\n")),(0,i.kt)("p",{parentName:"admonition"},"Normally, you would have to write serialization methods for yourself. By adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"BinaryObjectAttribute"),", this is done automatically by the source generator."),(0,i.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// Define your object\n[BinaryObject]\npartial record struct YourStruct(ushort A, byte B);\n\n// Read the struct from the buffer using either little or big endian format\nvar buffer = Convert.FromHexString("AABBCC");\nvar success = YourStruct.TryReadLittleEndian(source: buffer, out var value);\nvar success2 = YourStruct.TryReadBigEndian(source: buffer, out var value2, out int bytesRead);\n\n// Get the actual size of the struct\nvar size = value.GetByteCount();\n\n// Write the values back to a buffer\nvar writeBuffer = new byte[size];\nvar success3 = value.TryWriteLittleEndian(destination: writeBuffer);\nvar success4 = value2.TryWriteLittleEndian(destination: writeBuffer, out int bytesWritten);\n')),(0,i.kt)("p",{parentName:"admonition"},"The code generated by the struct will attempt to maximize readability by still maintaining performance and as little allocations as possible."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Generated code"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// <auto-generated/>\n#nullable enable\n\nusing BinaryHelpers = global::Darp.BinaryObjects.BinaryHelpers;\nusing NotNullWhenAttribute = global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute;\n\nnamespace Your.Namespace;\n\n/// <remarks> <list type="table">\n/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>\n/// <item> <term><see cref="A"/></term> <description>2</description> </item>\n/// <item> <term><see cref="B"/></term> <description>1</description> </item>\n/// <item> <term> --- </term> <description>3</description> </item>\n/// </list> </remarks>\npublic partial record struct YourStruct : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable<YourStruct>\n{\n    /// <inheritdoc />\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public int GetByteCount() => 3;\n\n    /// <inheritdoc />\n    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);\n    /// <inheritdoc />\n    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)\n    {\n        bytesWritten = 0;\n\n        if (destination.Length < 3)\n            return false;\n        BinaryHelpers.WriteUInt16LittleEndian(destination[0..], this.A);\n        BinaryHelpers.WriteUInt8(destination[2..], this.B);\n        bytesWritten += 3;\n\n        return true;\n    }\n    /// <inheritdoc />\n    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);\n    /// <inheritdoc />\n    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)\n    {\n        bytesWritten = 0;\n\n        if (destination.Length < 3)\n            return false;\n        BinaryHelpers.WriteUInt16BigEndian(destination[0..], this.A);\n        BinaryHelpers.WriteUInt8(destination[2..], this.B);\n        bytesWritten += 3;\n\n        return true;\n    }\n\n    /// <inheritdoc />\n    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value) => TryReadLittleEndian(source, out value, out _);\n    /// <inheritdoc />\n    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value, out int bytesRead)\n    {\n        bytesRead = 0;\n        value = default;\n\n        if (source.Length < 3)\n            return false;\n        var ___readA = BinaryHelpers.ReadUInt16LittleEndian(source[0..]);\n        var ___readB = BinaryHelpers.ReadUInt8(source[2..]);\n        bytesRead += 3;\n\n        value = new YourStruct(___readA, ___readB);\n        return true;\n    }\n    /// <inheritdoc />\n    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value) => TryReadBigEndian(source, out value, out _);\n    /// <inheritdoc />\n    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value, out int bytesRead)\n    {\n        bytesRead = 0;\n        value = default;\n\n        if (source.Length < 3)\n            return false;\n        var ___readA = BinaryHelpers.ReadUInt16BigEndian(source[0..]);\n        var ___readB = BinaryHelpers.ReadUInt8(source[2..]);\n        bytesRead += 3;\n\n        value = new YourStruct(___readA, ___readB);\n        return true;\n    }\n}\n'))),(0,i.kt)("h2",{parentName:"admonition",id:"development"},"Development"),(0,i.kt)("p",{parentName:"admonition"},"After cloning the repository, you will find the following project structure:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src/Darp.BinaryObjects")," contains public APIs and Attributes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src/Darp.BinaryObjects.Generator")," contains the actual source generator"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test/Darp.BinaryObjects.Tests")," contains unit tests ensuring the generated files actually build and read/write as expected"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test/Darp.BInaryObjects.Generator.Tests")," contains snapshot tests to ensure the source generator generates valid files")),(0,i.kt)("h3",{parentName:"admonition",id:"code-formatting"},"Code formatting"),(0,i.kt)("p",{parentName:"admonition"},"This repository uses ",(0,i.kt)("a",{parentName:"p",href:"https://csharpier.com/"},"CSharpier")," (inspired by prettier) for code formatting.\nCSharpier should be installed automatically when building the solution as a local dotnet tool."),(0,i.kt)("p",{parentName:"admonition"},"To run it, execute"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet csharpier .\n")),(0,i.kt)("p",{parentName:"admonition"},"If you want to format you code on save, check out available ",(0,i.kt)("a",{parentName:"p",href:"https://csharpier.com/docs/Editors"},"Editor integration")," for your IDE."),(0,i.kt)("h3",{parentName:"admonition",id:"testing"},"Testing"),(0,i.kt)("p",{parentName:"admonition"},"Snapshot tests are done using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/VerifyTests/Verify/"},"Verify"),". If you want to optimize running these tests in your local IDE, you might adjust some settings.\nPlease, check your local configuration in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/VerifyTests/Verify/blob/main/docs/wiz/readme.md"},"VerifyDocs"))),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Serialize bits of data")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"Darp.BinaryObjects")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {18}",showLineNumbers:!0,"{18}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  \n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n  \n    <ItemGroup>\n      <PackageReference Include="Darp.BinaryObjects" Version="0.4.0" />\n    </ItemGroup>\n\n</Project>\n\n'))),(0,i.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Darp.BinaryObjects\\src\\BitsDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Darp.BinaryObjects")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using BitsDemo;\nusing Darp.BinaryObjects;\n\nvar z = new zlib_header(0x78, 0x9C);\n\nvar size = z.GetByteCount();\n\n// Write the values back to a buffer\nvar writeBuffer = new byte[size];\nif(z.TryWriteLittleEndian(writeBuffer))\n{\n    Console.WriteLine("writing to buffer" );\n    foreach (var item in writeBuffer)\n    {\n        Console.Write(item+" ");\n    }\n}\n\n'))),(0,i.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Darp.BinaryObjects\\src\\BitsDemo\\BitStruct.cs",label:"BitStruct.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Darp.BinaryObjects")," in ",(0,i.kt)("em",{parentName:"p"},"BitStruct.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Darp.BinaryObjects;\nusing System.IO.Compression;\n\nnamespace BitsDemo;\n\n[BinaryObject]\npartial record zlib_header(byte cmf, byte flg)\n{\n    \n}\n")))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Darp.BinaryObjects\\src\\BitsDemo\\obj\\GX\\Darp.BinaryObjects.Generator\\Darp.BinaryObjects.Generator.BinaryObjectsGenerator\\BinaryObjectsGenerator.g.cs",label:"BinaryObjectsGenerator.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#nullable enable\n\nnamespace BitsDemo\n{\n    /// <remarks> <list type="table">\n    /// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>\n    /// <item> <term><see cref="cmf"/></term> <description>1</description> </item>\n    /// <item> <term><see cref="flg"/></term> <description>1</description> </item>\n    /// <item> <term> --- </term> <description>2</description> </item>\n    /// </list> </remarks>\n    partial record zlib_header : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable<zlib_header>\n    {\n        /// <inheritdoc />\n        [global::System.Diagnostics.Contracts.Pure]\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public int GetByteCount() => 2;\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)\n        {\n            bytesWritten = 0;\n\n            if (destination.Length < 2)\n                return false;\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..], this.cmf);\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..], this.flg);\n            bytesWritten += 2;\n\n            return true;\n        }\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)\n        {\n            bytesWritten = 0;\n\n            if (destination.Length < 2)\n                return false;\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..], this.cmf);\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..], this.flg);\n            bytesWritten += 2;\n\n            return true;\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value) => TryReadLittleEndian(source, out value, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value, out int bytesRead)\n        {\n            bytesRead = 0;\n            value = default;\n\n            if (source.Length < 2)\n                return false;\n            var ___readcmf = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]);\n            var ___readflg = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]);\n            bytesRead += 2;\n\n            value = new zlib_header(___readcmf, ___readflg);\n            return true;\n        }\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value) => TryReadBigEndian(source, out value, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value, out int bytesRead)\n        {\n            bytesRead = 0;\n            value = default;\n\n            if (source.Length < 2)\n                return false;\n            var ___readcmf = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]);\n            var ___readflg = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]);\n            bytesRead += 2;\n\n            value = new zlib_header(___readcmf, ___readflg);\n            return true;\n        }\n    }\n}\n\nnamespace Darp.BinaryObjects.Generated\n{\n    using Darp.BinaryObjects;\n    using System;\n    using System.Buffers.Binary;\n    using System.CodeDom.Compiler;\n    using System.Collections.Generic;\n    using System.Runtime.CompilerServices;\n    using System.Runtime.InteropServices;\n\n    /// <summary>Helper methods used by generated BinaryObjects.</summary>\n    [GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n    file static class Utilities\n    {\n        /// <summary> Writes a <c>byte</c> to the destination </summary>\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void WriteUInt8(Span<byte> destination, byte value)\n        {\n            destination[0] = value;\n        }\n        /// <summary> Reads a <c>byte</c> from the given source </summary>\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte ReadUInt8(ReadOnlySpan<byte> source)\n        {\n            return source[0];\n        }\n    }\n}\n\n')))),(0,i.kt)("h2",{id:"usefull"},"Usefull"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:a(14606).Z},"Download Example project Darp.BinaryObjects "))),(0,i.kt)("h3",{id:"share-darpbinaryobjects"},"Share Darp.BinaryObjects"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&quote=Darp.BinaryObjects",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&text=Darp.BinaryObjects:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&title=Darp.BinaryObjects",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&title=Darp.BinaryObjects&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Darp.BinaryObjects"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Darp.BinaryObjects")),(0,i.kt)("h3",{id:"in-the-same-category-bitwise---1-other-generators"},"In the same category (Bitwise) - 1 other generators"),(0,i.kt)("h4",{id:"bitskit"},(0,i.kt)("a",{parentName:"h4",href:"/docs/BitsKit"},"BitsKit")))}y.isMDXComponent=!0},14606:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/Darp.BinaryObjects-827eac1e7d2192a9005e77afe8f83b97.zip"}}]);