"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[5179],{18978:(e,n,t)=>{t.d(n,{Ay:()=>o,RM:()=>s});var r=t(74848),l=t(28453);const s=[{value:"Category &quot;FunctionalProgramming&quot; has the following generators:",id:"category-functionalprogramming-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const n={a:"a",h3:"h3",p:"p",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"category-functionalprogramming-has-the-following-generators",children:'Category "FunctionalProgramming" has the following generators:'}),"\n",(0,r.jsxs)(n.p,{children:["1 ",(0,r.jsx)(n.a,{href:"/docs/cachesourcegenerator",children:"cachesourcegenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["2 ",(0,r.jsx)(n.a,{href:"/docs/dunet",children:"dunet"})]}),"\n",(0,r.jsxs)(n.p,{children:["3 ",(0,r.jsx)(n.a,{href:"/docs/Dusharp",children:"Dusharp"})]}),"\n",(0,r.jsxs)(n.p,{children:["4 ",(0,r.jsx)(n.a,{href:"/docs/Funcky.DiscriminatedUnion",children:"Funcky.DiscriminatedUnion"})]}),"\n",(0,r.jsxs)(n.p,{children:["5 ",(0,r.jsx)(n.a,{href:"/docs/FunicularSwitch",children:"FunicularSwitch"})]}),"\n",(0,r.jsxs)(n.p,{children:["6 ",(0,r.jsx)(n.a,{href:"/docs/N.SourceGenerators.UnionTypes",children:"N.SourceGenerators.UnionTypes"})]}),"\n",(0,r.jsxs)(n.p,{children:["7 ",(0,r.jsx)(n.a,{href:"/docs/OneOf",children:"OneOf"})]}),"\n",(0,r.jsxs)(n.p,{children:["8 ",(0,r.jsx)(n.a,{href:"/docs/PartiallyApplied",children:"PartiallyApplied"})]}),"\n",(0,r.jsxs)(n.p,{children:["9 ",(0,r.jsx)(n.a,{href:"/docs/polytype",children:"polytype"})]}),"\n",(0,r.jsxs)(n.p,{children:["10 ",(0,r.jsx)(n.a,{href:"/docs/rscg_demeter",children:"rscg_demeter"})]}),"\n",(0,r.jsxs)(n.p,{children:["11 ",(0,r.jsx)(n.a,{href:"/docs/rscg_queryables",children:"rscg_queryables"})]}),"\n",(0,r.jsxs)(n.p,{children:["12 ",(0,r.jsx)(n.a,{href:"/docs/RSCG_Utils_Memo",children:"RSCG_Utils_Memo"})]}),"\n",(0,r.jsxs)(n.p,{children:["13 ",(0,r.jsx)(n.a,{href:"/docs/Sera.Union",children:"Sera.Union"})]}),"\n",(0,r.jsxs)(n.p,{children:["14 ",(0,r.jsx)(n.a,{href:"/docs/TypeUtilities",children:"TypeUtilities"})]}),"\n",(0,r.jsxs)(n.p,{children:["15 ",(0,r.jsx)(n.a,{href:"/docs/UnionGen",children:"UnionGen"})]}),"\n",(0,r.jsxs)(n.p,{children:["16 ",(0,r.jsx)(n.a,{href:"/docs/UnionsGenerator",children:"UnionsGenerator"})]}),"\n",(0,r.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/Categories/FunctionalProgramming",children:"FunctionalProgramming"})})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},72574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>h,default:()=>g,frontMatter:()=>c,metadata:()=>r,toc:()=>y});const r=JSON.parse('{"id":"RSCG-Examples/polytype","title":"167 - polytype","description":"Generating shape like reflection from classes. See PolyType.Examples for more details","source":"@site/docs/RSCG-Examples/polytype.md","sourceDirName":"RSCG-Examples","slug":"/polytype","permalink":"/RSCG_Examples/v2/docs/polytype","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1670,"frontMatter":{"sidebar_position":1670,"title":"167 - polytype","description":"Generating shape like reflection from classes. See PolyType.Examples for more details","slug":"/polytype"},"sidebar":"tutorialSidebar","previous":{"title":"166 - Datacute.EmbeddedResourcePropertyGenerator","permalink":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator"},"next":{"title":"168 - Credfeto.Version.Information.Generator","permalink":"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator"}}');var l=t(74848),s=t(28453),a=t(11470),o=t(19365),i=t(14252),p=t(18978);const c={sidebar_position:1670,title:"167 - polytype",description:"Generating shape like reflection from classes. See PolyType.Examples for more details",slug:"/polytype"},h="polytype  by Eirik Tsarpalis",d={},y=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Case Study: Writing a JSON serializer",id:"case-study-writing-a-json-serializer",level:2},{value:"Performance",id:"performance",level:3},{value:"Serialization",id:"serialization",level:4},{value:"Deserialization",id:"deserialization",level:4},{value:"Known libraries based on PolyType",id:"known-libraries-based-on-polytype",level:2},{value:"Project structure",id:"project-structure",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share polytype",id:"share-polytype",level:3},...p.RM];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"polytype--by-eirik-tsarpalis",children:"polytype  by Eirik Tsarpalis"})}),"\n",(0,l.jsx)(i.A,{toc:y}),"\n",(0,l.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/polytype/",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/polytype?label=polytype",alt:"Nuget"})}),"\n",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/eiriktsarpalis/PolyType?label=updated",alt:"GitHub last commit"})}),"\n",(0,l.jsx)(n.img,{src:"https://img.shields.io/github/stars/eiriktsarpalis/PolyType?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,l.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,l.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsxs)(n.p,{children:["Name: ",(0,l.jsx)(n.strong,{children:"polytype"})]}),(0,l.jsx)(n.p,{children:"Practical Generic Programming for C#"}),(0,l.jsx)(n.p,{children:"Author: Eirik Tsarpalis"}),(0,l.jsxs)(n.p,{children:["NuGet:\n",(0,l.jsx)(n.em,{children:(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/polytype/",children:"https://www.nuget.org/packages/polytype/"})})]}),(0,l.jsxs)(n.p,{children:["You can find more details at ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType",children:"https://github.com/eiriktsarpalis/PolyType"})]}),(0,l.jsxs)(n.p,{children:["Source: ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType",children:"https://github.com/eiriktsarpalis/PolyType"})]})]}),"\n",(0,l.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsxs)(n.h1,{id:"polytype-build--tests-nuget-badge",children:["PolyType ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/actions/workflows/build.yml",children:(0,l.jsx)(n.img,{src:"https://github.com/eiriktsarpalis/PolyType/actions/workflows/build.yml/badge.svg",alt:"Build & Tests"})})," ",(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/PolyType/",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/PolyType",alt:"NuGet Badge"})})]}),(0,l.jsxs)(n.p,{children:["PolyType is a practical datatype-generic programming library for .NET types. It is a direct adaptation of the ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/TypeShape",children:"TypeShape"})," library for F#, adapted to patterns and idioms available in C#. See the ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType",children:"project website"})," for additional background and ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType/api/PolyType.html",children:"API documentation"}),"."]}),(0,l.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),(0,l.jsxs)(n.p,{children:["You can try the library by installing the ",(0,l.jsx)(n.code,{children:"PolyType"})," NuGet package:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ dotnet add package PolyType\n"})}),(0,l.jsx)(n.p,{children:"which includes the core types and source generator for generating type shapes:"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-C#",children:"using PolyType;\n\n[GenerateShape]\npublic partial record Person(string name, int age);\n"})}),(0,l.jsxs)(n.p,{children:["Doing this will augment ",(0,l.jsx)(n.code,{children:"Person"})," with an implementation of the ",(0,l.jsx)(n.code,{children:"IShapeable<Person>"})," interface. This suffices to make ",(0,l.jsx)(n.code,{children:"Person"})," usable with any library that targets the PolyType core abstractions. You can try this out by installing the built-in example libraries:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ dotnet add package PolyType.Examples\n"})}),(0,l.jsx)(n.p,{children:"Here's how the same value can be serialized to three separate formats."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'using PolyType.Examples.JsonSerializer;\nusing PolyType.Examples.CborSerializer;\nusing PolyType.Examples.XmlSerializer;\n\nPerson person = new("Pete", 70);\nJsonSerializerTS.Serialize(person); // {"Name":"Pete","Age":70}\nXmlSerializer.Serialize(person);    // <value><Name>Pete</Name><Age>70</Age></value>\nCborSerializer.EncodeToHex(person); // A2644E616D656450657465634167651846\n'})}),(0,l.jsxs)(n.p,{children:["Since the application uses a source generator to produce the shape for ",(0,l.jsx)(n.code,{children:"Person"}),", it is fully compatible with Native AOT. See the ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType/shape-providers.html",children:"shape providers"})," article for more details on how to use the library with your types."]}),(0,l.jsx)(n.h2,{id:"introduction",children:"Introduction"}),(0,l.jsx)(n.p,{children:"PolyType is a meta-library that facilitates rapid development of high performance datatype-generic programs. It exposes a simplified model for .NET types that makes it easy for library authors to publish production-ready components in just a few lines of code. The built-in source generator ensures that any library built on top of the PolyType abstractions gets Native AOT support for free."}),(0,l.jsxs)(n.p,{children:["As a library author, PolyType lets you write high performance, feature complete generic components that target its ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType/core-abstractions.html",children:"core abstractions"}),". For example, a parser API using PolyType might look as follows:"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-C#",children:"public static class MyFancyParser\n{\n    public static T? Parse<T>(string myFancyFormat) where T : IShapeable<T>;\n}\n"})}),(0,l.jsx)(n.p,{children:"As an end user, PolyType lets you generate shape models for your own types that can be used with one or more supported libraries:"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-C#",children:"Person? person = MyFancyParser.Parse<Person>(format); // Compiles\n\n[GenerateShape] // Generate an IShapeable<TPerson> implementation\npartial record Person(string name, int age, List<Person> children);\n"})}),(0,l.jsx)(n.p,{children:"For more information see:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType/core-abstractions.html",children:"core abstractions"})," document for an overview of the core programming model."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType/shape-providers.html",children:"shape providers"})," document for an overview of the built-in shape providers and their APIs."]}),"\n",(0,l.jsxs)(n.li,{children:["The generated ",(0,l.jsx)(n.a,{href:"https://eiriktsarpalis.github.io/PolyType/api/PolyType.html",children:"API documentation"})," for the project."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Examples",children:(0,l.jsx)(n.code,{children:"PolyType.Examples"})})," project for advanced examples of libraries built on top of PolyType."]}),"\n"]}),(0,l.jsx)(n.h2,{id:"case-study-writing-a-json-serializer",children:"Case Study: Writing a JSON serializer"}),(0,l.jsxs)(n.p,{children:["The repo includes a ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Examples/JsonSerializer",children:"JSON serializer"})," built on top of the ",(0,l.jsx)(n.code,{children:"Utf8JsonWriter"}),"/",(0,l.jsx)(n.code,{children:"Utf8JsonReader"})," primitives provided by System.Text.Json. At the time of writing, the full implementation is just under 1200 lines of code but exceeds STJ's built-in ",(0,l.jsx)(n.code,{children:"JsonSerializer"})," both in terms of ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/blob/main/tests/PolyType.Tests/JsonTests.cs",children:"supported types"})," and performance."]}),(0,l.jsx)(n.h3,{id:"performance",children:"Performance"}),(0,l.jsxs)(n.p,{children:["Here's a ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/blob/main/tests/PolyType.Benchmarks/JsonBenchmark.cs",children:"benchmark"})," comparing ",(0,l.jsx)(n.code,{children:"System.Text.Json"})," with the included PolyType implementation:"]}),(0,l.jsx)(n.h4,{id:"serialization",children:"Serialization"}),(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Method"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Mean"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Ratio"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Allocated"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Alloc Ratio"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Serialize_StjReflection"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"491.9 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1.00"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"312 B"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1.00"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Serialize_StjSourceGen"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"467.0 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.95"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"312 B"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1.00"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Serialize_StjSourceGen_FastPath"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"227.2 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.46"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.00"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Serialize_PolyTypeReflection"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"277.9 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.57"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.00"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Serialize_PolyTypeSourceGen"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"273.6 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.56"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.00"})]})]})]}),(0,l.jsx)(n.h4,{id:"deserialization",children:"Deserialization"}),(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Method"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Mean"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Ratio"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Allocated"}),(0,l.jsx)(n.th,{style:{textAlign:"right"},children:"Alloc Ratio"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Deserialize_StjReflection"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1,593.0 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1.00"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1024 B"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1.00"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Deserialize_StjSourceGen"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1,530.3 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.96"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"1000 B"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.98"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Deserialize_PolyTypeReflection"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"773.1 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.49"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"440 B"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.43"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Deserialize_PolyTypeSourceGen"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"746.7 ns"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.47"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"440 B"}),(0,l.jsx)(n.td,{style:{textAlign:"right"},children:"0.43"})]})]})]}),(0,l.jsx)(n.p,{children:"Even though both serializers target the same underlying reader and writer types, the PolyType implementation is ~75% faster for serialization and ~100% faster for deserialization, when compared with System.Text.Json's metadata serializer. As expected, fast-path serialization is still fastest since its implementation is fully inlined."}),(0,l.jsx)(n.h2,{id:"known-libraries-based-on-polytype",children:"Known libraries based on PolyType"}),(0,l.jsx)(n.p,{children:"The following code bases are based upon PolyType and may be worth checking out."}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://github.com/AArnott/Nerdbank.MessagePack",children:"Nerdbank.MessagePack"})," - a MessagePack library with performance to rival MessagePack-CSharp, and greater simplicity and additional features."]}),"\n"]}),(0,l.jsx)(n.h2,{id:"project-structure",children:"Project structure"}),(0,l.jsx)(n.p,{children:"The repo consists of the following projects:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The core ",(0,l.jsx)(n.code,{children:"PolyType"})," library containing:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType/Abstractions",children:"core abstractions"})," defining the type model."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType/ReflectionProvider",children:"reflection provider"})," implementation."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType/SourceGenModel",children:"model classes"})," used by the source generator."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.SourceGenerator",children:(0,l.jsx)(n.code,{children:"PolyType.SourceGenerator"})})," project contains the built-in source generator implementation."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Roslyn",children:(0,l.jsx)(n.code,{children:"PolyType.Roslyn"})})," library exposes a set of components for extracting data models from Roslyn type symbols. Used as the foundation for the built-in source generator."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Examples",children:(0,l.jsx)(n.code,{children:"PolyType.Examples"})})," containing library examples:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A serializer built on top of System.Text.Json,"}),"\n",(0,l.jsx)(n.li,{children:"A serializer built on top of System.Xml,"}),"\n",(0,l.jsx)(n.li,{children:"A serializer built on top of System.Formats.Cbor,"}),"\n",(0,l.jsxs)(n.li,{children:["A ",(0,l.jsx)(n.code,{children:"ConfigurationBinder"})," like implementation,"]}),"\n",(0,l.jsx)(n.li,{children:"A simple pretty-printer for .NET values,"}),"\n",(0,l.jsxs)(n.li,{children:["A generic random value generator based on ",(0,l.jsx)(n.code,{children:"System.Random"}),","]}),"\n",(0,l.jsx)(n.li,{children:"A JSON schema generator for .NET types,"}),"\n",(0,l.jsx)(n.li,{children:"An object cloning function,"}),"\n",(0,l.jsxs)(n.li,{children:["A structural ",(0,l.jsx)(n.code,{children:"IEqualityComparer<T>"})," generator for POCOs and collections,"]}),"\n",(0,l.jsx)(n.li,{children:"An object validator in the style of System.ComponentModel.DataAnnotations."}),"\n",(0,l.jsx)(n.li,{children:"A simple .NET object mapper."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.a,{href:"https://github.com/eiriktsarpalis/PolyType/tree/main/applications",children:(0,l.jsx)(n.code,{children:"applications"})})," folder contains sample Native AOT console applications."]}),"\n"]})]}),"\n",(0,l.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.p,{children:"Generating shape like reflection from classes. See PolyType.Examples for more details"})}),"\n",(0,l.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,l.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,l.jsxs)(a.A,{children:[(0,l.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,l.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,l.jsx)(n.strong,{children:"polytype"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="PolyType" Version="0.16.1" />\n    <PackageReference Include="PolyType.Examples" Version="0.16.1" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,l.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\Program.cs",label:"Program.cs",children:[(0,l.jsxs)(n.p,{children:["This is the use of ",(0,l.jsx)(n.strong,{children:"polytype"})," in ",(0,l.jsx)(n.em,{children:"Program.cs"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using PolyType.Examples.JsonSerializer;\nusing PolyType.Examples.CborSerializer;\nusing PolyType.Examples.XmlSerializer;\nusing ConsoleApp1;\nusing PolyType.Examples.Cloner;\n\nPerson person = new("Pete", 70);\nConsole.WriteLine(JsonSerializerTS.Serialize(person)); // {"Name":"Pete","Age":70}\nConsole.WriteLine(XmlSerializer.Serialize(person));    // <value><Name>Pete</Name><Age>70</Age></value>\nConsole.WriteLine(CborSerializer.EncodeToHex(person)); // A2644E616D656450657465634167651846\nperson.Childs = [new Person("Andrei", 55)];\n\nperson.Childs[0].ID = 1;\nvar q = Cloner.Clone(person);\nperson.Childs[0].ID = 10;\nConsole.WriteLine(q);\nConsole.WriteLine(person);\nConsole.WriteLine(q.Childs[0]);\nConsole.WriteLine(person.Childs[0]);\n\n'})})]}),(0,l.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\Person.cs",label:"Person.cs",children:[(0,l.jsxs)(n.p,{children:["This is the use of ",(0,l.jsx)(n.strong,{children:"polytype"})," in ",(0,l.jsx)(n.em,{children:"Person.cs"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using PolyType;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp1;\n[GenerateShape]\npublic partial record Person(string name, int age)\n{\n    public Person[] Childs { get; set; } = [];\n\n    public int ID;\n}\n"})})]})]}),"\n",(0,l.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,l.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,l.jsxs)(a.A,{children:[(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\ConsoleApp1.Person.ITypeShapeProviderOfT.g.cs",label:"ConsoleApp1.Person.ITypeShapeProviderOfT.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace ConsoleApp1\n{\n    public partial record Person : global::PolyType.IShapeable<global::ConsoleApp1.Person>\n    {\n        static global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person> global::PolyType.IShapeable<global::ConsoleApp1.Person>.GetShape() \n            => global::PolyType.SourceGenerator.GenerateShapeProvider.Default.Person;\n    }\n}\n\n"})})}),(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.g.cs",label:"GenerateShapeProvider.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        private const global::System.Reflection.BindingFlags InstanceBindingFlags = \n            global::System.Reflection.BindingFlags.Public | \n            global::System.Reflection.BindingFlags.NonPublic | \n            global::System.Reflection.BindingFlags.Instance;\n        \n        /// <summary>Gets the default instance of the <see cref="GenerateShapeProvider"/> class.</summary>\n        public static GenerateShapeProvider Default { get; } = new();\n        \n        /// <summary>Initializes a new instance of the <see cref="GenerateShapeProvider"/> class.</summary>\n        public GenerateShapeProvider() { }\n    }\n}\n\n'})})}),(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.Int32.g.cs",label:"GenerateShapeProvider.Int32.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<int> Int32 => _Int32 ??= Create_Int32();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<int>? _Int32;\n\n        private global::PolyType.Abstractions.ITypeShape<int> Create_Int32()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenObjectTypeShape<int>\n            {\n                Provider = this,\n                IsRecordType = false,\n                IsTupleType = false,\n                CreatePropertiesFunc = null,\n                CreateConstructorFunc = null,\n            };\n        }\n    }\n}\n\n"})})}),(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.ITypeShapeProvider.g.cs",label:"GenerateShapeProvider.ITypeShapeProvider.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider : global::PolyType.ITypeShapeProvider\n    {\n        /// <summary>\n        /// Gets the generated <see cref="global::PolyType.Abstractions.ITypeShape{T}" /> for the specified type.\n        /// </summary>\n        /// <typeparam name="T">The type for which a shape is requested.</typeparam>\n        /// <returns>\n        /// The generated <see cref="global::PolyType.Abstractions.ITypeShape{T}" /> for the specified type.\n        /// </returns>\n        public global::PolyType.Abstractions.ITypeShape<T>? GetShape<T>()\n            => (global::PolyType.Abstractions.ITypeShape<T>?)GetShape(typeof(T));\n        \n        /// <summary>\n        /// Gets the generated <see cref="global::PolyType.Abstractions.ITypeShape" /> for the specified type.\n        /// </summary>\n        /// <param name="type">The type for which a shape is requested.</param>\n        /// <returns>\n        /// The generated <see cref="global::PolyType.Abstractions.ITypeShape" /> for the specified type.\n        /// </returns>\n        public global::PolyType.Abstractions.ITypeShape? GetShape(global::System.Type type)\n        {\n            if (type == typeof(global::ConsoleApp1.Person[]))\n                return Person_Array;\n            \n            if (type == typeof(int))\n                return Int32;\n            \n            if (type == typeof(string))\n                return String;\n            \n            if (type == typeof(global::ConsoleApp1.Person))\n                return Person;\n            \n            return null;\n        }\n    }\n}\n\n'})})}),(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.Person.g.cs",label:"GenerateShapeProvider.Person.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person> Person => _Person ??= Create_Person();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person>? _Person;\n\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person> Create_Person()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenObjectTypeShape<global::ConsoleApp1.Person>\n            {\n                Provider = this,\n                IsRecordType = true,\n                IsTupleType = false,\n                CreatePropertiesFunc = CreateProperties_Person,\n                CreateConstructorFunc = CreateConstructor_Person,\n            };\n        }\n\n        private global::PolyType.Abstractions.IPropertyShape[] CreateProperties_Person() => new global::PolyType.Abstractions.IPropertyShape[]\n        {\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, string>\n            {\n                Name = "name",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = String,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.name,\n                Setter = null,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("name", InstanceBindingFlags, null, typeof(string), [], null),\n                IsField = false,\n                IsGetterPublic = true,\n                IsSetterPublic = false,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = false,\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, int>\n            {\n                Name = "age",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = Int32,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.age,\n                Setter = null,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("age", InstanceBindingFlags, null, typeof(int), [], null),\n                IsField = false,\n                IsGetterPublic = true,\n                IsSetterPublic = false,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = false,\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, global::ConsoleApp1.Person[]>\n            {\n                Name = "Childs",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = Person_Array,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.Childs,\n                Setter = static (ref global::ConsoleApp1.Person obj, global::ConsoleApp1.Person[] value) => obj.Childs = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("Childs", InstanceBindingFlags, null, typeof(global::ConsoleApp1.Person[]), [], null),\n                IsField = false,\n                IsGetterPublic = true,\n                IsSetterPublic = true,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = true,\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, int>\n            {\n                Name = "ID",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = Int32,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.ID,\n                Setter = static (ref global::ConsoleApp1.Person obj, int value) => obj.ID = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetField("ID", InstanceBindingFlags),\n                IsField = true,\n                IsGetterPublic = true,\n                IsSetterPublic = true,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = true,\n            },\n        };\n\n        private global::PolyType.Abstractions.IConstructorShape CreateConstructor_Person()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenConstructorShape<global::ConsoleApp1.Person, (string, int, global::ConsoleApp1.Person[], int, byte Flags)>\n            {\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                ParameterCount = 4,\n                GetParametersFunc = CreateConstructorParameters_Person,\n                DefaultConstructorFunc = null,\n                ArgumentStateConstructorFunc = static () => default((string, int, global::ConsoleApp1.Person[], int, byte Flags)),\n                ParameterizedConstructorFunc = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state) => { var obj = new global::ConsoleApp1.Person(state.Item1, state.Item2);  if ((state.Flags & 1) != 0) obj.Childs = state.Item3; if ((state.Flags & 2) != 0) obj.ID = state.Item4; return obj; },\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetConstructor(InstanceBindingFlags, new[] { typeof(string), typeof(int) }),\n                IsPublic = true,\n            };\n        }\n\n        private global::PolyType.Abstractions.IConstructorParameterShape[] CreateConstructorParameters_Person() => new global::PolyType.Abstractions.IConstructorParameterShape[]\n        {\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), string>\n            {\n                Position = 0,\n                Name = "name",\n                ParameterType = String,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.ConstructorParameter,\n                IsRequired = true,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default!,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, string value) => state.Item1 = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetConstructor(InstanceBindingFlags, new[] { typeof(string), typeof(int) })?.GetParameters()[0],\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), int>\n            {\n                Position = 1,\n                Name = "age",\n                ParameterType = Int32,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.ConstructorParameter,\n                IsRequired = true,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, int value) => state.Item2 = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetConstructor(InstanceBindingFlags, new[] { typeof(string), typeof(int) })?.GetParameters()[1],\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), global::ConsoleApp1.Person[]>\n            {\n                Position = 2,\n                Name = "Childs",\n                ParameterType = Person_Array,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.PropertyInitializer,\n                IsRequired = false,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default!,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, global::ConsoleApp1.Person[] value) => { state.Item3 = value; state.Flags |= 1; },\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("Childs", InstanceBindingFlags, null, typeof(global::ConsoleApp1.Person[]), [], null),\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), int>\n            {\n                Position = 3,\n                Name = "ID",\n                ParameterType = Int32,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.FieldInitializer,\n                IsRequired = false,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, int value) => { state.Item4 = value; state.Flags |= 2; },\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetField("ID", InstanceBindingFlags),\n            },\n        };\n\n        [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_name")]\n        private static extern void Person_name_SetAccessor(global::ConsoleApp1.Person obj, string value);\n\n        [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_age")]\n        private static extern void Person_age_SetAccessor(global::ConsoleApp1.Person obj, int value);\n\n        [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "ID")]\n        private static extern ref int Person_ID_Accessor(global::ConsoleApp1.Person obj);\n    }\n}\n\n'})})}),(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.Person_Array.g.cs",label:"GenerateShapeProvider.Person_Array.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person[]> Person_Array => _Person_Array ??= Create_Person_Array();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person[]>? _Person_Array;\n\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person[]> Create_Person_Array()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenEnumerableTypeShape<global::ConsoleApp1.Person[], global::ConsoleApp1.Person>\n            {\n                ElementType = Person,\n                ConstructionStrategy = global::PolyType.Abstractions.CollectionConstructionStrategy.Span,\n                DefaultConstructorFunc = null,\n                EnumerableConstructorFunc = null,\n                SpanConstructorFunc = static values => values.ToArray(),\n                GetEnumerableFunc = static obj => obj,\n                AddElementFunc = null,\n                Rank = 1,\n                Provider = this,\n           };\n        }\n    }\n}\n\n"})})}),(0,l.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.String.g.cs",label:"GenerateShapeProvider.String.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<string> String => _String ??= Create_String();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<string>? _String;\n\n        private global::PolyType.Abstractions.ITypeShape<string> Create_String()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenObjectTypeShape<string>\n            {\n                Provider = this,\n                IsRecordType = false,\n                IsTupleType = false,\n                CreatePropertiesFunc = null,\n                CreateConstructorFunc = null,\n            };\n        }\n    }\n}\n\n"})})})]}),"\n",(0,l.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,l.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(96262).A+"",children:"Download Example project polytype "})})}),"\n",(0,l.jsx)(n.h3,{id:"share-polytype",children:"Share polytype"}),"\n",(0,l.jsxs)("ul",{children:[(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&quote=polytype",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&text=polytype:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&title=polytype",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&title=polytype&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/polytype",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/polytype"})}),"\n",(0,l.jsx)(n.p,{children:"aaa"}),"\n",(0,l.jsx)(p.Ay,{})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},96262:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/polytype-087c855e9bdd81e7f279f0ce6322ff6c.zip"}}]);