"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2982],{57816:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>g,frontMatter:()=>s,metadata:()=>m,toc:()=>d});var n=a(87462),r=(a(67294),a(3905)),i=a(73992),l=a(18679),o=a(68839);const s={sidebar_position:1690,title:"169 - GenPack",description:"Generating Binary Serialization and properties for class",slug:"/GenPack"},p="GenPack  by dimohy",m={unversionedId:"RSCG-Examples/GenPack",id:"RSCG-Examples/GenPack",title:"169 - GenPack",description:"Generating Binary Serialization and properties for class",source:"@site/docs/RSCG-Examples/GenPack.md",sourceDirName:"RSCG-Examples",slug:"/GenPack",permalink:"/RSCG_Examples/v2/docs/GenPack",draft:!1,tags:[],version:"current",sidebarPosition:1690,frontMatter:{sidebar_position:1690,title:"169 - GenPack",description:"Generating Binary Serialization and properties for class",slug:"/GenPack"},sidebar:"tutorialSidebar",previous:{title:"168 - Credfeto.Version.Information.Generator",permalink:"/RSCG_Examples/v2/docs/Credfeto.Version.Information.Generator"},next:{title:"170 - QueryStringGenerator",permalink:"/RSCG_Examples/v2/docs/QueryStringGenerator"}},c={},d=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share GenPack",id:"share-genpack",level:3},{value:"In the same category (Serializer) - 4 other generators",id:"in-the-same-category-serializer---4-other-generators",level:3},{value:"jsonConverterSourceGenerator",id:"jsonconvertersourcegenerator",level:4},{value:"JsonPolymorphicGenerator",id:"jsonpolymorphicgenerator",level:4},{value:"ProtobufSourceGenerator",id:"protobufsourcegenerator",level:4},{value:"System.Text.Json",id:"systemtextjson",level:4}],k={toc:d},u="wrapper";function g(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,n.Z)({},k,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"genpack--by-dimohy"},"GenPack  by dimohy"),(0,r.kt)(o.Z,{toc:d,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/GenPack/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/GenPack?label=GenPack",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dimohy/GenPack"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/dimohy/GenPack?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/dimohy/GenPack?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"GenPack")),(0,r.kt)("p",{parentName:"admonition"},"Packet generation and serialization/deserialization library using the .NET Source Generator"),(0,r.kt)("p",{parentName:"admonition"},"Author: dimohy"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/GenPack/"},"https://www.nuget.org/packages/GenPack/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dimohy/GenPack"},"https://github.com/dimohy/GenPack")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dimohy/GenPack"},"https://github.com/dimohy/GenPack"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"genpack"},"GenPack"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/GenPack"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/GenPack",alt:"latest version"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/GenPack"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/GenPack",alt:"downloads"}))),(0,r.kt)("p",{parentName:"admonition"},"GenPack is a library that uses the .NET source generator to automatically generate packets as classes once you define a schema for the packets.\nIt's easy to use and the results are useful."),(0,r.kt)("p",{parentName:"admonition"},"GenPack also works well with Native AOT. You can take advantage of the benefits of Native AOT."),(0,r.kt)("h2",{parentName:"admonition",id:"simple-to-use"},"Simple to use"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[GenPackable]\npublic partial record PeoplePacket\n{\n    public readonly static PacketSchema Schema = PacketSchemaBuilder.Create()\n        .@short("Age", "Age description")\n        .@string("Name", "Name description")\n        .Build();\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"The following code is automatically generated by the schema information."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    public partial record PeoplePacket : GenPack.IGenPackable\n    {\n        /// <summary>\n        /// Age description\n        /// </summary>\n        public short Age { get; set; }\n        /// <summary>\n        /// Name description\n        /// </summary>\n        public string Name { get; set; } = string.Empty;\n        public byte[] ToPacket()\n        {\n            using var ms = new System.IO.MemoryStream();\n            ToPacket(ms);\n            return ms.ToArray();\n        }\n        public void ToPacket(System.IO.Stream stream)\n        {\n            System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);\n            writer.Write(Age);\n            writer.Write(Name);\n        }\n        public static PeoplePacket FromPacket(byte[] data)\n        {\n            using var ms = new System.IO.MemoryStream(data);\n            return FromPacket(ms);\n        }\n        public static PeoplePacket FromPacket(System.IO.Stream stream)\n        {\n            PeoplePacket result = new PeoplePacket();\n            System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);\n            int size = 0;\n            byte[] buffer = null;\n            result.Age = reader.ReadInt16();\n            result.Name = reader.ReadString();\n            return result;\n        }\n    }\n")),(0,r.kt)("p",{parentName:"admonition"},"It's simple to use. You can binary serialize with ",(0,r.kt)("inlineCode",{parentName:"p"},"ToPacket()")," and deserialize with ",(0,r.kt)("inlineCode",{parentName:"p"},"FromPacket()"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var p = new PeoplePacket()\n{\n    Age = 10,\n    Name = "John"\n};\nvar data = p.ToPacket();\nvar newP = PeoplePacket.FromPacket(data);\n\nConsole.WriteLine(newP);\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"PeoplePacket { Age = 10, Name = John }\n")),(0,r.kt)("h2",{parentName:"admonition",id:"how-to-create-a-packet-schema"},"How to create a packet schema"),(0,r.kt)("p",{parentName:"admonition"},"Decorate the attribute of ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"record")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"GenPackable"),". At this point, the target must be given ",(0,r.kt)("inlineCode",{parentName:"p"},"partial"),".\nGenPack's packet schema is represented by creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"PacketSchema")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"PacketSchemaBuilder"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[GenPackable]\npublic partial record PeoplePacket\n{\n    public readonly static PacketSchema Schema = PacketSchemaBuilder.Create()\n        .@short("Age", "Age description")\n        .@string("Name", "Name description")\n        .Build();\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"The format beginning with ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," means the schema property to be created. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},'@short("Age", "Age description")')," gives the ",(0,r.kt)("inlineCode",{parentName:"p"},"Age")," property the type ",(0,r.kt)("inlineCode",{parentName:"p"},"short")," and the description ",(0,r.kt)("inlineCode",{parentName:"p"},"Age description"),".\nThis translates to the following,"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"        /// <summary>\n        /// Age description\n        /// </summary>\n        public short Age { get; set; }\n")),(0,r.kt)("p",{parentName:"admonition"},"You can then use the auto-generated properties."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var p = new PeoplePacket()\np.Age = 32;\n")),(0,r.kt)("h3",{parentName:"admonition",id:"schema-properties"},"Schema Properties"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Bits"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@byte"),(0,r.kt)("td",{parentName:"tr",align:null},"byte"),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@sbyte"),(0,r.kt)("td",{parentName:"tr",align:null},"signed byte"),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@short"),(0,r.kt)("td",{parentName:"tr",align:null},"short int"),(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@ushort"),(0,r.kt)("td",{parentName:"tr",align:null},"unsigned short int"),(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@int"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"32"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@uint"),(0,r.kt)("td",{parentName:"tr",align:null},"unsigned int"),(0,r.kt)("td",{parentName:"tr",align:null},"32"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@long"),(0,r.kt)("td",{parentName:"tr",align:null},"long int"),(0,r.kt)("td",{parentName:"tr",align:null},"64"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@ulong"),(0,r.kt)("td",{parentName:"tr",align:null},"unsigned long int"),(0,r.kt)("td",{parentName:"tr",align:null},"64"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@float"),(0,r.kt)("td",{parentName:"tr",align:null},"single float"),(0,r.kt)("td",{parentName:"tr",align:null},"32"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@double"),(0,r.kt)("td",{parentName:"tr",align:null},"double float"),(0,r.kt)("td",{parentName:"tr",align:null},"64"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@string"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@object\\<type",">"),(0,r.kt)("td",{parentName:"tr",align:null},"genpackable object"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@list\\<type",">"),(0,r.kt)("td",{parentName:"tr",align:null},"variable list"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@dict\\<type",">"),(0,r.kt)("td",{parentName:"tr",align:null},"variable dictionary"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"@array\\<type",">"),(0,r.kt)("td",{parentName:"tr",align:null},"fixed array"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"property name, size, description")))),(0,r.kt)("h2",{parentName:"admonition",id:"tasks"},"Tasks"),(0,r.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Support for Endian, string Encoding."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Support for checksums."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Support 8-bit, 16-bit, 32-bit, 64-bit, or variable 7-bit sizes for ",(0,r.kt)("inlineCode",{parentName:"li"},"@list")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"@dict"),"."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add ",(0,r.kt)("inlineCode",{parentName:"li"},"@ver")," property to allow revision control of packets."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Automatically select and deserialize target structures based on packet command(identification code)."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Generate JSON and gRPC schema with ",(0,r.kt)("inlineCode",{parentName:"li"},"PacketSchema"),"."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Process device packets with uncomplicated packet structures."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Process structures with complex packets, such as PLCs."),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Process packets that require speed, such as ",(0,r.kt)("inlineCode",{parentName:"li"},"MemoryPack"),".")),(0,r.kt)("hr",{parentName:"admonition"}),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.flaticon.com/kr/free-icon/blocks_2021305"},"Icon creator: Freepik - Flaticon"))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Generating Binary Serialization and properties for class")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"GenPack")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {10}",showLineNumbers:!0,"{10}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <ItemGroup>\n        <PackageReference Include="GenPack" Version=" 0.9.0-preview1" OutputItemType="Analyzer" ReferenceOutputAssembly="true" />\n    </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GenPack\\src\\Serializer\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"GenPack")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using SerializerDemo;\n\nvar p= new Person() { Name= "Andrei Ignat" };\nvar bytes= p.ToPacket();\nvar entity = Person.FromPacket(bytes);\nConsole.WriteLine("name is "+entity.Name);\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GenPack\\src\\Serializer\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"GenPack")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing GenPack;\n\nnamespace SerializerDemo;\n\n\n[GenPackable]\npublic partial record Person\n{\n\n    public readonly static PacketSchema Schema = PacketSchemaBuilder.Create()\n           .@short("Id", "Age description")\n           .@string("Name", "Name description")\n           .Build();\n}\n\n\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GenPack\\src\\Serializer\\obj\\GX\\GenPack.SourceGenerator\\GenPack.GenPackGenerator\\PersonSchema.g.cs",label:"PersonSchema.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"#pragma warning disable CS0219\nnamespace SerializerDemo\n{\n    public partial record Person : GenPack.IGenPackable\n    {\n        /// <summary>\n        /// Age description\n        /// </summary>\n        public short Id { get; set; }\n        /// <summary>\n        /// Name description\n        /// </summary>\n        public string Name { get; set; } = string.Empty;\n        public byte[] ToPacket()\n        {\n            using var ms = new System.IO.MemoryStream();\n            ToPacket(ms);\n            return ms.ToArray();\n        }\n        public void ToPacket(System.IO.Stream stream)\n        {\n            System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);\n            writer.Write(Id);\n            writer.Write(Name);\n        }\n        public static SerializerDemo.Person FromPacket(byte[] data)\n        {\n            using var ms = new System.IO.MemoryStream(data);\n            return FromPacket(ms);\n        }\n        public static SerializerDemo.Person FromPacket(System.IO.Stream stream)\n        {\n            SerializerDemo.Person result = new SerializerDemo.Person();\n            System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);\n            int size = 0;\n            byte[] buffer = null;\n            result.Id = reader.ReadInt16();\n            result.Name = reader.ReadString();\n            return result;\n        }\n    }\n}\n\n")))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(47423).Z},"Download Example project GenPack "))),(0,r.kt)("h3",{id:"share-genpack"},"Share GenPack"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGenPack&quote=GenPack",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGenPack&text=GenPack:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGenPack",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGenPack&title=GenPack",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGenPack&title=GenPack&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGenPack",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/GenPack"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/GenPack")),(0,r.kt)("h3",{id:"in-the-same-category-serializer---4-other-generators"},"In the same category (Serializer) - 4 other generators"),(0,r.kt)("h4",{id:"jsonconvertersourcegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/jsonConverterSourceGenerator"},"jsonConverterSourceGenerator")),(0,r.kt)("h4",{id:"jsonpolymorphicgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/JsonPolymorphicGenerator"},"JsonPolymorphicGenerator")),(0,r.kt)("h4",{id:"protobufsourcegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ProtobufSourceGenerator"},"ProtobufSourceGenerator")),(0,r.kt)("h4",{id:"systemtextjson"},(0,r.kt)("a",{parentName:"h4",href:"/docs/System.Text.Json"},"System.Text.Json")))}g.isMDXComponent=!0},47423:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/GenPack-1b7171e7e5e939739da56a7c839455a6.zip"}}]);