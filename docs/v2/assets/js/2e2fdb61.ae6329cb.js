"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3723],{6791:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>m,default:()=>S,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var i=t(87462),l=(t(67294),t(3905)),o=t(73992),a=t(18679),s=t(68839);const r={sidebar_position:1570,title:"157 - Sera.Union",description:"Generate tagged union",slug:"/Sera.Union"},m="Sera.Union  by Sera",p={unversionedId:"RSCG-Examples/Sera.Union",id:"RSCG-Examples/Sera.Union",title:"157 - Sera.Union",description:"Generate tagged union",source:"@site/docs/RSCG-Examples/Sera.Union.md",sourceDirName:"RSCG-Examples",slug:"/Sera.Union",permalink:"/RSCG_Examples/v2/docs/Sera.Union",draft:!1,tags:[],version:"current",sidebarPosition:1570,frontMatter:{sidebar_position:1570,title:"157 - Sera.Union",description:"Generate tagged union",slug:"/Sera.Union"},sidebar:"tutorialSidebar",previous:{title:"156 - RSCG_NameGenerator",permalink:"/RSCG_Examples/v2/docs/RSCG_NameGenerator"},next:{title:"158 - Enhanced.GetTypes",permalink:"/RSCG_Examples/v2/docs/Enhanced.GetTypes"}},g={},u=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use-1",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Sera.Union",id:"share-seraunion",level:3},{value:"In the same category (FunctionalProgramming) - 11 other generators",id:"in-the-same-category-functionalprogramming---11-other-generators",level:3},{value:"cachesourcegenerator",id:"cachesourcegenerator",level:4},{value:"dunet",id:"dunet",level:4},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:4},{value:"FunicularSwitch",id:"funicularswitch",level:4},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:4},{value:"OneOf",id:"oneof",level:4},{value:"PartiallyApplied",id:"partiallyapplied",level:4},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:4},{value:"TypeUtilities",id:"typeutilities",level:4},{value:"UnionGen",id:"uniongen",level:4},{value:"UnionsGenerator",id:"unionsgenerator",level:4}],c={toc:u},h="wrapper";function S(e){let{components:n,...r}=e;return(0,l.kt)(h,(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"seraunion--by-sera"},"Sera.Union  by Sera"),(0,l.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,l.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Sera.Union/"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Sera.Union?label=Sera.Union",alt:"Nuget"})),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sera-net/Sera.Union"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/sera-net/Sera.Union?label=updated",alt:"GitHub last commit"})),"\n",(0,l.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/sera-net/Sera.Union?style=social",alt:"GitHub Repo stars"})),(0,l.kt)("h2",{id:"details"},"Details"),(0,l.kt)("h3",{id:"info"},"Info"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Name: ",(0,l.kt)("strong",{parentName:"p"},"Sera.Union")),(0,l.kt)("p",{parentName:"admonition"},"Tagged union for c#"),(0,l.kt)("p",{parentName:"admonition"},"Author: Sera"),(0,l.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,l.kt)("em",{parentName:"p"},(0,l.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Sera.Union/"},"https://www.nuget.org/packages/Sera.Union/")),"   "),(0,l.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sera-net/Sera.Union"},"https://github.com/sera-net/Sera.Union")),(0,l.kt)("p",{parentName:"admonition"},"Source : ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sera-net/Sera.Union"},"https://github.com/sera-net/Sera.Union"))),(0,l.kt)("h3",{id:"original-readme"},"Original Readme"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("h1",{parentName:"admonition",id:"seraunion"},"Sera.Union"),(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/sera-net/Sera.Union/actions/workflows/dotnet.yml"},(0,l.kt)("img",{parentName:"a",src:"https://github.com/sera-net/Sera.Union/actions/workflows/dotnet.yml/badge.svg",alt:".NET"})),"\n",(0,l.kt)("img",{parentName:"p",src:"https://img.shields.io/github/license/sera-net/Sera.Union",alt:"MIT"})),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"Sera.Union",(0,l.kt)("br",{parentName:"li"}),(0,l.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Sera.Union/"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Sera.Union",alt:"Nuget"})),(0,l.kt)("a",{parentName:"li",href:"https://openupm.com/packages/net.sera.union/"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/net.sera.union?label=openupm&registry_uri=https://package.openupm.com",alt:"openupm"}))),(0,l.kt)("li",{parentName:"ul"},"Sera.Union.Utilities",(0,l.kt)("br",{parentName:"li"}),(0,l.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Sera.Union.Utilities/"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Sera.Union.Utilities",alt:"Nuget"})))),(0,l.kt)("p",{parentName:"admonition"},"Generate Tagged Union using source generator"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"All unmanaged types will overlap"),(0,l.kt)("li",{parentName:"ul"},"All classes will overlap"),(0,l.kt)("li",{parentName:"ul"},"Other types will be tiled")),(0,l.kt)("h2",{parentName:"admonition",id:"example"},"Example"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"[Union]\npublic readonly partial struct Union1\n{\n    [UnionTemplate]\n    private interface Template\n    {\n        int A();\n        string B();\n        bool C();\n        (int a, int b) D();\n        void E();\n        List<int>? F();\n        (int a, string b) G();\n    }\n}\n")),(0,l.kt)("p",{parentName:"admonition"},"Generate output:"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Union1.union.g.cs"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\npublic readonly partial struct Union1\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<Union1>\n    , global::System.IComparable<Union1>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<Union1, Union1, bool>\n    , global::System.Numerics.IComparisonOperators<Union1, Union1, bool>\n#endif\n{\n    private readonly __impl_ _impl;\n    private Union1(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        A = 1,\n        B = 2,\n        C = 3,\n        D = 4,\n        E = 5,\n        F = 6,\n        G = 7,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public __class_ _class_;\n        public __unmanaged_ _unmanaged_;\n        public (int a, string b) _0;\n        public readonly Tags _tag;\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __class_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public string _0;\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public List<int>? _1;\n        }\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __unmanaged_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public int _0;\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public bool _1;\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public (int a, int b) _2;\n        }\n\n        public __impl_(Tags _tag)\n        {\n            this._class_ = default;\n            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_);\n            this._0 = default!;\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeA(int value)\n    {\n        var _impl = new __impl_(Tags.A);\n        _impl._unmanaged_._0 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeB(string value)\n    {\n        var _impl = new __impl_(Tags.B);\n        _impl._class_._0 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeC(bool value)\n    {\n        var _impl = new __impl_(Tags.C);\n        _impl._unmanaged_._1 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeD((int a, int b) value)\n    {\n        var _impl = new __impl_(Tags.D);\n        _impl._unmanaged_._2 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeE()\n    {\n        var _impl = new __impl_(Tags.E);\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeF(List<int>? value)\n    {\n        var _impl = new __impl_(Tags.F);\n        _impl._class_._1 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeG((int a, string b) value)\n    {\n        var _impl = new __impl_(Tags.G);\n        _impl._0 = value;\n        return new Union1(_impl);\n    }\n\n    public readonly bool IsA\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.A;\n    }\n    public readonly bool IsB\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.B;\n    }\n    public readonly bool IsC\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.C;\n    }\n    public readonly bool IsD\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.D;\n    }\n    public readonly bool IsE\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.E;\n    }\n    public readonly bool IsF\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.F;\n    }\n    public readonly bool IsG\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.G;\n    }\n\n    public int A\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsA ? default! : this._impl._unmanaged_._0!;\n    }\n    public string B\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsB ? default! : this._impl._class_._0!;\n    }\n    public bool C\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsC ? default! : this._impl._unmanaged_._1!;\n    }\n    public (int a, int b) D\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsD ? default! : this._impl._unmanaged_._2!;\n    }\n    public List<int>? F\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsF ? default! : this._impl._class_._1!;\n    }\n    public (int a, string b) G\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsG ? default! : this._impl._0!;\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(Union1 other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.A => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(this.A, other.A),\n        Tags.B => global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(this.B, other.B),\n        Tags.C => global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(this.C, other.C),\n        Tags.D => global::System.Collections.Generic.EqualityComparer<(int a, int b)>.Default.Equals(this.D, other.D),\n        Tags.F => global::System.Collections.Generic.EqualityComparer<List<int>?>.Default.Equals(this.F, other.F),\n        Tags.G => global::System.Collections.Generic.EqualityComparer<(int a, string b)>.Default.Equals(this.G, other.G),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.A => global::System.HashCode.Combine(this.Tag, this.A),\n        Tags.B => global::System.HashCode.Combine(this.Tag, this.B),\n        Tags.C => global::System.HashCode.Combine(this.Tag, this.C),\n        Tags.D => global::System.HashCode.Combine(this.Tag, this.D),\n        Tags.F => global::System.HashCode.Combine(this.Tag, this.F),\n        Tags.G => global::System.HashCode.Combine(this.Tag, this.G),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is Union1 other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(Union1 left, Union1 right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(Union1 left, Union1 right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(Union1 other) => this.Tag != other.Tag ? Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.A => global::System.Collections.Generic.Comparer<int>.Default.Compare(this.A, other.A),\n        Tags.B => global::System.Collections.Generic.Comparer<string>.Default.Compare(this.B, other.B),\n        Tags.C => global::System.Collections.Generic.Comparer<bool>.Default.Compare(this.C, other.C),\n        Tags.D => global::System.Collections.Generic.Comparer<(int a, int b)>.Default.Compare(this.D, other.D),\n        Tags.F => global::System.Collections.Generic.Comparer<List<int>?>.Default.Compare(this.F, other.F),\n        Tags.G => global::System.Collections.Generic.Comparer<(int a, string b)>.Default.Compare(this.G, other.G),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(Union1 left, Union1 right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(Union1 left, Union1 right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(Union1 left, Union1 right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(Union1 left, Union1 right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.A => $"{nameof(Union1)}.{nameof(Tags.A)} {{ {this.A} }}",\n        Tags.B => $"{nameof(Union1)}.{nameof(Tags.B)} {{ {this.B} }}",\n        Tags.C => $"{nameof(Union1)}.{nameof(Tags.C)} {{ {this.C} }}",\n        Tags.D => $"{nameof(Union1)}.{nameof(Tags.D)} {{ {this.D} }}",\n        Tags.E => $"{nameof(Union1)}.{nameof(Tags.E)}",\n        Tags.F => $"{nameof(Union1)}.{nameof(Tags.F)} {{ {this.F} }}",\n        Tags.G => $"{nameof(Union1)}.{nameof(Tags.G)} {{ {this.G} }}",\n        _ => nameof(Union1),\n    };\n}\n'))),(0,l.kt)("h4",{parentName:"admonition",id:"how-to-use"},"How to use"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"var u = Union1.MakeA(123);\n\nif (u is { Tag: Union1.Tags.A, A: var a }) { }\n\nif (u is { IsA: true, A: var a }) { }\n\nif (u.IsA)\n{\n    var a = u.A;\n}\n")),(0,l.kt)("hr",{parentName:"admonition"}),(0,l.kt)("h3",{parentName:"admonition",id:"support-generics"},"Support generics"),(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("strong",{parentName:"p"},"Generics will not overlap")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"[Union]\npublic partial struct Option<T>\n{\n    [UnionTemplate]\n    private interface Template\n    {\n        T Some();\n        void None();\n    }\n}\n\n[Union]\npublic partial struct Result<T, E>\n{\n    [UnionTemplate]\n    private interface Template\n    {\n        T Ok();\n        E Err();\n    }\n}\n")),(0,l.kt)("p",{parentName:"admonition"},"Generate output:"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Option[T].union.g.cs"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\npublic partial struct Option<T>\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<Option<T>>\n    , global::System.IComparable<Option<T>>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<Option<T>, Option<T>, bool>\n    , global::System.Numerics.IComparisonOperators<Option<T>, Option<T>, bool>\n#endif\n{\n    private __impl_ _impl;\n    private Option(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Some = 1,\n        None = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public T _0;\n        public readonly Tags _tag;\n\n        public __impl_(Tags _tag)\n        {\n            this._0 = default!;\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Option<T> MakeSome(T value)\n    {\n        var _impl = new __impl_(Tags.Some);\n        _impl._0 = value;\n        return new Option<T>(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Option<T> MakeNone()\n    {\n        var _impl = new __impl_(Tags.None);\n        return new Option<T>(_impl);\n    }\n\n    public readonly bool IsSome\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Some;\n    }\n    public readonly bool IsNone\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.None;\n    }\n\n    public T Some\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsSome ? default! : this._impl._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsSome) { this._impl._0 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(Option<T> other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Some => global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(this.Some, other.Some),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Some => global::System.HashCode.Combine(this.Tag, this.Some),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is Option<T> other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(Option<T> left, Option<T> right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(Option<T> left, Option<T> right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(Option<T> other) => this.Tag != other.Tag ? Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Some => global::System.Collections.Generic.Comparer<T>.Default.Compare(this.Some, other.Some),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(Option<T> left, Option<T> right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(Option<T> left, Option<T> right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(Option<T> left, Option<T> right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(Option<T> left, Option<T> right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Some => $"{nameof(Option<T>)}.{nameof(Tags.Some)} {{ {this.Some} }}",\n        Tags.None => $"{nameof(Option<T>)}.{nameof(Tags.None)}",\n        _ => nameof(Option<T>),\n    };\n}\n\n'))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Result[T,E].union.g.cs"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\npublic partial struct Result<T, E>\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<Result<T, E>>\n    , global::System.IComparable<Result<T, E>>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<Result<T, E>, Result<T, E>, bool>\n    , global::System.Numerics.IComparisonOperators<Result<T, E>, Result<T, E>, bool>\n#endif\n{\n    private __impl_ _impl;\n    private Result(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Ok = 1,\n        Err = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public T _0;\n        public E _1;\n        public readonly Tags _tag;\n\n        public __impl_(Tags _tag)\n        {\n            this._0 = default!;\n            this._1 = default!;\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Result<T, E> MakeOk(T value)\n    {\n        var _impl = new __impl_(Tags.Ok);\n        _impl._0 = value;\n        return new Result<T, E>(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Result<T, E> MakeErr(E value)\n    {\n        var _impl = new __impl_(Tags.Err);\n        _impl._1 = value;\n        return new Result<T, E>(_impl);\n    }\n\n    public readonly bool IsOk\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Ok;\n    }\n    public readonly bool IsErr\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Err;\n    }\n\n    public T Ok\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsOk ? default! : this._impl._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsOk) { this._impl._0 = value; } }\n    }\n    public E Err\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsErr ? default! : this._impl._1!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsErr) { this._impl._1 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(Result<T, E> other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(this.Ok, other.Ok),\n        Tags.Err => global::System.Collections.Generic.EqualityComparer<E>.Default.Equals(this.Err, other.Err),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Ok => global::System.HashCode.Combine(this.Tag, this.Ok),\n        Tags.Err => global::System.HashCode.Combine(this.Tag, this.Err),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is Result<T, E> other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(Result<T, E> left, Result<T, E> right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(Result<T, E> left, Result<T, E> right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(Result<T, E> other) => this.Tag != other.Tag ? Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.Comparer<T>.Default.Compare(this.Ok, other.Ok),\n        Tags.Err => global::System.Collections.Generic.Comparer<E>.Default.Compare(this.Err, other.Err),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Ok => $"{nameof(Result<T, E>)}.{nameof(Tags.Ok)} {{ {this.Ok} }}",\n        Tags.Err => $"{nameof(Result<T, E>)}.{nameof(Tags.Err)} {{ {this.Err} }}",\n        _ => nameof(Result<T, E>),\n    };\n}\n\n')))),(0,l.kt)("h3",{id:"about"},"About"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Generate tagged union")),(0,l.kt)("h2",{id:"how-to-use-1"},"How to use"),(0,l.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,l.kt)("p",null,"This is the CSharp Project that references ",(0,l.kt)("strong",{parentName:"p"},"Sera.Union")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n    <ItemGroup>\n      <PackageReference Include="Sera.Union" Version="0.7.0" />\n    </ItemGroup>\n\n</Project>\n\n'))),(0,l.kt)(a.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Sera.Union\\src\\UnionTypesDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,l.kt)("p",null,"  This is the use of ",(0,l.kt)("strong",{parentName:"p"},"Sera.Union")," in ",(0,l.kt)("em",{parentName:"p"},"Program.cs")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using UnionTypesDemo;\n\nConsole.WriteLine("Save or not");\nvar data = SaveToDatabase.Save(0);\nConsole.WriteLine(data.IsNotFound);\ndata = SaveToDatabase.Save(1);\nif(data.IsOk)\n{\n    Console.WriteLine(data.Tag);\n    Console.WriteLine(data.Ok);\n}\n\n')))),(0,l.kt)("h3",{id:"generated-files"},"Generated Files"),(0,l.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Sera.Union\\src\\UnionTypesDemo\\obj\\GX\\Sera.TaggedUnion.Analyzers\\Sera.TaggedUnion.Analyzers.Generators.UnionGenerator\\UnionTypesDemo.ResultSave.union.g.cs",label:"UnionTypesDemo.ResultSave.union.g.cs",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\nnamespace UnionTypesDemo {\n\npublic partial struct ResultSave\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<ResultSave>\n    , global::System.IComparable<ResultSave>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<ResultSave, ResultSave, bool>\n    , global::System.Numerics.IComparisonOperators<ResultSave, ResultSave, bool>\n#endif\n{\n    private __impl_ _impl;\n    private ResultSave(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Ok = 1,\n        NotFound = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public __unmanaged_ _unmanaged_;\n        public readonly Tags _tag;\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __unmanaged_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public int _0;\n        }\n\n        public __impl_(Tags _tag)\n        {\n            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_);\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static ResultSave MakeOk(int value)\n    {\n        var _impl = new __impl_(Tags.Ok);\n        _impl._unmanaged_._0 = value;\n        return new ResultSave(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static ResultSave MakeNotFound()\n    {\n        var _impl = new __impl_(Tags.NotFound);\n        return new ResultSave(_impl);\n    }\n\n    public readonly bool IsOk\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Ok;\n    }\n    public readonly bool IsNotFound\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.NotFound;\n    }\n\n    public int Ok\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsOk ? default! : this._impl._unmanaged_._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsOk) { this._impl._unmanaged_._0 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(ResultSave other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(this.Ok, other.Ok),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Ok => global::System.HashCode.Combine(this.Tag, this.Ok),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is ResultSave other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(ResultSave left, ResultSave right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(ResultSave left, ResultSave right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(ResultSave other) => this.Tag != other.Tag ? global::System.Collections.Generic.Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.Comparer<int>.Default.Compare(this.Ok, other.Ok),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(ResultSave left, ResultSave right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(ResultSave left, ResultSave right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(ResultSave left, ResultSave right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(ResultSave left, ResultSave right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Ok => $"{nameof(ResultSave)}.{nameof(Tags.Ok)} {{ {this.Ok} }}",\n        Tags.NotFound => $"{nameof(ResultSave)}.{nameof(Tags.NotFound)}",\n        _ => nameof(ResultSave),\n    };\n}\n\n} // namespace UnionTypesDemo\n\n')))),(0,l.kt)("h2",{id:"usefull"},"Usefull"),(0,l.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("a",{target:"_blank",href:t(46454).Z},"Download Example project Sera.Union "))),(0,l.kt)("h3",{id:"share-seraunion"},"Share Sera.Union"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&quote=Sera.Union",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&text=Sera.Union:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&title=Sera.Union",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&title=Sera.Union&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Sera.Union"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Sera.Union")),(0,l.kt)("h3",{id:"in-the-same-category-functionalprogramming---11-other-generators"},"In the same category (FunctionalProgramming) - 11 other generators"),(0,l.kt)("h4",{id:"cachesourcegenerator"},(0,l.kt)("a",{parentName:"h4",href:"/docs/cachesourcegenerator"},"cachesourcegenerator")),(0,l.kt)("h4",{id:"dunet"},(0,l.kt)("a",{parentName:"h4",href:"/docs/dunet"},"dunet")),(0,l.kt)("h4",{id:"funckydiscriminatedunion"},(0,l.kt)("a",{parentName:"h4",href:"/docs/Funcky.DiscriminatedUnion"},"Funcky.DiscriminatedUnion")),(0,l.kt)("h4",{id:"funicularswitch"},(0,l.kt)("a",{parentName:"h4",href:"/docs/FunicularSwitch"},"FunicularSwitch")),(0,l.kt)("h4",{id:"nsourcegeneratorsuniontypes"},(0,l.kt)("a",{parentName:"h4",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,l.kt)("h4",{id:"oneof"},(0,l.kt)("a",{parentName:"h4",href:"/docs/OneOf"},"OneOf")),(0,l.kt)("h4",{id:"partiallyapplied"},(0,l.kt)("a",{parentName:"h4",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,l.kt)("h4",{id:"rscg_utils_memo"},(0,l.kt)("a",{parentName:"h4",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")),(0,l.kt)("h4",{id:"typeutilities"},(0,l.kt)("a",{parentName:"h4",href:"/docs/TypeUtilities"},"TypeUtilities")),(0,l.kt)("h4",{id:"uniongen"},(0,l.kt)("a",{parentName:"h4",href:"/docs/UnionGen"},"UnionGen")),(0,l.kt)("h4",{id:"unionsgenerator"},(0,l.kt)("a",{parentName:"h4",href:"/docs/UnionsGenerator"},"UnionsGenerator")))}S.isMDXComponent=!0},46454:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/files/Sera.Union-8a53c5a7c3c42f39539cf44a408e6537.zip"}}]);