"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7228],{2031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>h,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"RSCG-Examples/Ridge","title":"50 - Ridge","description":"Generating test classes for controllers","source":"@site/docs/RSCG-Examples/Ridge.md","sourceDirName":"RSCG-Examples","slug":"/Ridge","permalink":"/RSCG_Examples/v2/docs/Ridge","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":500,"frontMatter":{"sidebar_position":500,"title":"50 - Ridge","description":"Generating test classes for controllers","slug":"/Ridge"},"sidebar":"tutorialSidebar","previous":{"title":"49 - Strongly","permalink":"/RSCG_Examples/v2/docs/Strongly"},"next":{"title":"51 - OneOf","permalink":"/RSCG_Examples/v2/docs/OneOf"}}');var i=t(74848),s=t(28453),a=t(11470),l=t(19365),o=t(14252),c=t(19383);const d={sidebar_position:500,title:"50 - Ridge",description:"Generating test classes for controllers",slug:"/Ridge"},h="Ridge  by Michal Moty\u010dka",p={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Quick links",id:"quick-links",level:2},{value:"Example",id:"example",level:2},{value:"Setup",id:"setup",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"Wiki",id:"wiki",level:2},{value:"Features that are not currently supported",id:"features-that-are-not-currently-supported",level:2},{value:"Mappings that are not supported by default",id:"mappings-that-are-not-supported-by-default",level:3},{value:"Contributions",id:"contributions",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Ridge",id:"share-ridge",level:3},...c.RM];function g(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ridge--by-michal-moty\u010dka",children:"Ridge  by Michal Moty\u010dka"})}),"\n",(0,i.jsx)(o.A,{toc:u}),"\n",(0,i.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/Ridge/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Ridge?label=Ridge",alt:"Nuget"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/Melchy/Ridge?label=updated",alt:"GitHub last commit"})}),"\n",(0,i.jsx)(n.img,{src:"https://img.shields.io/github/stars/Melchy/Ridge?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,i.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,i.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Name: ",(0,i.jsx)(n.strong,{children:"Ridge"})]}),(0,i.jsx)(n.p,{children:"a html, json and xml parsing library."}),(0,i.jsx)(n.p,{children:"Author: Michal Moty\u010dka"}),(0,i.jsxs)(n.p,{children:["NuGet:\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/Ridge/",children:"https://www.nuget.org/packages/Ridge/"})})]}),(0,i.jsxs)(n.p,{children:["You can find more details at ",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge",children:"https://github.com/Melchy/Ridge"})]}),(0,i.jsxs)(n.p,{children:["Source: ",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge",children:"https://github.com/Melchy/Ridge"})]})]}),"\n",(0,i.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge/actions",children:(0,i.jsx)(n.img,{src:"https://github.com/melchy/ridge/actions/workflows/release.yml/badge.svg",alt:"build"})}),"\n",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/RidgeDotNet/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nuget/v/ridgedotnet",alt:""})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge/releases",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/v/release/melchy/ridge?label=latest%20release",alt:""})})]}),(0,i.jsx)(n.h1,{id:"ridge",children:"Ridge"}),(0,i.jsxs)(n.p,{children:["Ridge is a ",(0,i.jsx)(n.strong,{children:"source generator"})," that creates strongly typed HTTP clients for integration tests. HTTP clients generated by Ridge require the\n",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0#basic-tests-with-the-default-webapplicationfactory",children:"WebApplicationFactory"}),".\nThe use of the ",(0,i.jsx)(n.code,{children:"WebApplicationFactory"})," allows Ridge to access internal components of ASP.NET and analyze them.\nThis significantly improves route generation and allows implicit support of areas, routing without attributes, and so on."]}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Ridge supports .NET 6 and newer."}),"\n"]}),(0,i.jsx)(n.h2,{id:"quick-links",children:"Quick links"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/RidgeDotNet/",children:"NuGet package"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge/wiki",children:"Documentation"})}),"\n"]}),(0,i.jsx)(n.h2,{id:"example",children:"Example"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// --------------------------------------------ExampleController.cs-------------------------------------------------\n[GenerateClient] // Notice the attribute\npublic class ExamplesController : Controller\n{\n    [HttpGet("ReturnGivenNumber")]\n    public ActionResult<int> ReturnGivenNumber(\n        [FromQuery] int input)\n    {\n        return input;\n    }\n}\n\n\n// ------------------------------------------Test.cs----------------------------------------------------------------\n[Test]\npublic async Task CallControllerUsingRidge()\n{\n    using var webApplicationFactory = \n        new WebApplicationFactory<Program>()\n            .WithRidge(); // add ridge dependencies to WebApplicationFactory\n    var client = webApplicationFactory.CreateClient();\n    // create instance of client generated by source generator\n    var examplesControllerClient = new ExamplesControllerClient(client, webApplicationFactory.Services); \n\n    var response = await examplesControllerClient.ReturnGivenNumber(10);\n    \n    Assert.True(response.IsSuccessStatusCode);\n    Assert.AreEqual(10, response.Result);\n}\n'})}),(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Mark controller with the ",(0,i.jsx)(n.code,{children:"[GenerateClient]"})," attribute. This attribute tells the source generator to generate\nclass ",(0,i.jsx)(n.code,{children:"*YourControllerName*Client"})," in the assembly which contains the controller."]}),"\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"WithRidge()"})," extension method on ",(0,i.jsx)(n.code,{children:"WebApplicationFactory"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Create instance of ",(0,i.jsx)(n.code,{children:"*YourControllerName*Client"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Create requests using ",(0,i.jsx)(n.code,{children:"*YourControllerName*Client"})," instance."]}),"\n"]}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Hint: Use package ",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/RidgeDotNet.AspNetCore",children:(0,i.jsx)(n.code,{children:"RidgeDotNet.AspNetCore"})})," in your ",(0,i.jsx)(n.code,{children:"AspNetCore"})," project instead of ",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/RidgeDotNet",children:(0,i.jsx)(n.code,{children:"RidgeDotNet"})}),". ",(0,i.jsx)(n.code,{children:"RidgeDotNet.AspNetCore"})," has minimal dependencies, preventing unnecessary test code in your project."]}),"\n"]}),(0,i.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"ActionResult<T>"})," when possible to enable strongly typed response generation."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"[FromRoute]"}),", ",(0,i.jsx)(n.code,{children:"[FromQuery]"}),", ",(0,i.jsx)(n.code,{children:"[FromBody]"}),", and similar attributes when possible to ensure correct parameter\nmapping."]}),"\n",(0,i.jsxs)(n.li,{children:["Add a logger to check generated requests and responses when\nnecessary. More information ",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge/wiki/4.-Request-response-logging",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge/wiki/3.-rethrow-exceptions-instead-of-http-response",children:(0,i.jsx)(n.code,{children:"RethrowExceptionInsteadOfReturningHttpResponse"})}),"\nfor improved test experience."]}),"\n"]}),(0,i.jsx)(n.h2,{id:"wiki",children:"Wiki"}),(0,i.jsxs)(n.p,{children:["Full documentation can be found ",(0,i.jsx)(n.a,{href:"https://github.com/Melchy/Ridge/wiki",children:"in the wiki"}),"."]}),(0,i.jsx)(n.h2,{id:"features-that-are-not-currently-supported",children:"Features that are not currently supported"}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Note that you can always fall back to ",(0,i.jsx)(n.code,{children:"WebApplicationFactory"})," when you need to test something that is not supported by\nRidge."]}),"\n"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Minimal API"}),"\n",(0,i.jsx)(n.li,{children:"Custom request types. JSON is the only request type currently supported."}),"\n",(0,i.jsx)(n.li,{children:"Single action parameter transformations (add parameter to single action or transform parameter in single action)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[FromForm]"})," attributes"]}),"\n",(0,i.jsxs)(n.li,{children:["Actions returning custom implementation of ",(0,i.jsx)(n.code,{children:"IActionResult"}),"."]}),"\n"]}),(0,i.jsx)(n.h3,{id:"mappings-that-are-not-supported-by-default",children:"Mappings that are not supported by default"}),(0,i.jsx)(n.p,{children:"Ridge supports a wide range of parameter mappings, but some special cases are currently not supported by default.\nKnown unsupported mappings are the following:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[FromQuery]"})," with an array of complex arguments"]}),"\n",(0,i.jsxs)(n.li,{children:["Complex types with ",(0,i.jsx)(n.code,{children:"[FromXXX]"})," attributes on properties"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["Example of ",(0,i.jsx)(n.code,{children:"[FromQuery]"})," with an array of complex arguments:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public virtual ActionResult NotSupported([FromQuery] IEnumerable<ComplexArgument> complexArguments)\n{\n   //..\n}\n"})}),(0,i.jsxs)(n.p,{children:["Example of complex types with ",(0,i.jsx)(n.code,{children:"[FromXXX]"})," attributes on properties:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public virtual ActionResult NotSupported(Mixed mixed)\n{\n   //..\n}\n\n\npublic class Mixed\n{\n    [FromBody]\n    public string BodyName { get; set; }\n    [FromHeader]\n    public string HeaderName { get; set; }\n}\n"})}),(0,i.jsxs)(n.p,{children:["If you need to use this feature then consider writing\n",(0,i.jsxs)(n.a,{href:"https://github.com/Melchy/Ridge/wiki/2.-Request-creation#custom-middlewares",children:["custom ",(0,i.jsx)(n.code,{children:"HttpRequestFactoryMiddleware"})]}),"\nor creating an issue."]}),(0,i.jsx)(n.h2,{id:"contributions",children:"Contributions"}),(0,i.jsxs)(n.p,{children:["Icon made by ",(0,i.jsx)(n.a,{href:"https://www.freepik.com",children:"Freepik"})," from ",(0,i.jsx)(n.a,{href:"https://www.flaticon.com/",children:"www.flaticon.com"}),"."]})]}),"\n",(0,i.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Generating test classes for controllers"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,i.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,i.jsx)(n.strong,{children:"Ridge"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk.Web">\n\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.9" />\n    <PackageReference Include="RidgeDotNet.AspNetCore" Version="2.0.1" />\n    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n</Project>\n\n'})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Ridge\\src\\RidgeDemoWebApp\\Program.cs",label:"Program.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"Ridge"})," in ",(0,i.jsx)(n.em,{children:"Program.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"var builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\npublic partial class Program { }\n"})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Ridge\\src\\RidgeDemoWebApp\\Controllers\\WeatherForecastController.cs",label:"WeatherForecastController.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"Ridge"})," in ",(0,i.jsx)(n.em,{children:"WeatherForecastController.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Microsoft.AspNetCore.Mvc;\nusing Ridge.AspNetCore.GeneratorAttributes;\n\nnamespace RidgeDemoWebApp.Controllers\n{\n    [GenerateClient]\n    [ApiController]\n    [Route("[controller]")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n    };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = "GetWeatherForecast")]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}\n'})})]}),(0,i.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Ridge\\src\\TestRidgeApp\\BasicTests.cs",label:"BasicTests.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"Ridge"})," in ",(0,i.jsx)(n.em,{children:"BasicTests.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Microsoft.AspNetCore.Mvc.Testing;\nusing RidgeDemoWebApp.Controllers;\nusing Xunit;\n\nnamespace TestRidgeApp;\n\n[TestClass]\npublic class BasicTests \n{\n\n    \n    [TestMethod]\n    public async Task CallControllerUsingRidge()\n    {\n       \n        using var webApplicationFactory =\n            new WebApplicationFactory<Program>()\n                .WithRidge(); // add ridge dependencies to WebApplicationFactory\n        var client = webApplicationFactory.CreateClient();\n        // create instance of client generated by source generator\n        var examplesControllerClient = new WeatherForecastControllerClient(client, webApplicationFactory.Services);\n\n        var response = await examplesControllerClient.Get();\n\n        Assert.IsTrue(response.IsSuccessStatusCode);\n        Assert.AreEqual(5, response.Result.Count());\n    }\n}\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,i.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Ridge\\src\\RidgeDemoWebApp\\obj\\GX\\RidgeSourceGenerator\\RidgeSourceGenerator.ControllerClientGenerator\\WeatherForecastController_Client.g.cs",label:"WeatherForecastController_Client.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the Ridge source generator\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n#nullable enable\n#pragma warning disable CS0419\nusing Ridge.AspNetCore;\nusing Ridge.AspNetCore.Serialization;\nusing Ridge.AspNetCore.Response;\nusing Ridge.AspNetCore.Parameters;\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace RidgeDemoWebApp.Controllers\n{\n    /// <summary>\n    /// Generated Api client. Calls <see cref="RidgeDemoWebApp.Controllers.WeatherForecastController" />\n    /// </summary>\n    public class WeatherForecastControllerClient\n    {\n        private readonly IApplicationClient _applicationClient;\n        /// <summary>\n        /// Creates client for controller. \n        /// </summary>\n        /// <param name="httpClient">\n        ///     HttpClient which will be used to call application.\n        /// </param>\n        /// <param name="serviceProvider">\n        ///     Application serviceProvider.\n        /// </param>\n        public WeatherForecastControllerClient(HttpClient httpClient, IServiceProvider serviceProvider)\n        {\n            var applicationClientFactory = serviceProvider.GetService<IApplicationClientFactory>();\n            if(applicationClientFactory == null)\n            {\n                throw new InvalidOperationException("\'IApplicationClientFactory\' could not be resolved. Did you forget to call WithRidge()?.");\n            }\n            else\n            {\n                _applicationClient = applicationClientFactory.CreateClient(serviceProvider, httpClient);\n            }\n        }\n                /// <summary>\n        ///     Calls <see cref="RidgeDemoWebApp.Controllers.WeatherForecastController.Get" />. \n        /// </summary> \n        public async Task<HttpCallResponse<System.Collections.Generic.IEnumerable<RidgeDemoWebApp.WeatherForecast>>> Get(params AdditionalParameter[] additionalParameters)\n        {\n            var methodName = nameof(RidgeDemoWebApp.Controllers.WeatherForecastController.Get);\n            var actionParameters = new Type[] {\n            };\n            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()\n            { \n            };\n           return await _applicationClient.CallAction<System.Collections.Generic.IEnumerable<RidgeDemoWebApp.WeatherForecast>,RidgeDemoWebApp.Controllers.WeatherForecastController>(methodName, actionParameters, additionalParameters, parametersAndTransformations);\n        }\n\n }\n}\n#pragma warning restore CS0419\n#nullable restore\n'})})})}),"\n",(0,i.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,i.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(73059).A+"",children:"Download Example project Ridge "})})}),"\n",(0,i.jsx)(n.h3,{id:"share-ridge",children:"Share Ridge"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRidge&quote=Ridge",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRidge&text=Ridge:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRidge",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRidge&title=Ridge",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRidge&title=Ridge&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRidge",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Ridge",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Ridge"})}),"\n",(0,i.jsx)(n.p,{children:"aaa"}),"\n",(0,i.jsx)(c.Ay,{})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},19383:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>s});var r=t(74848),i=t(28453);const s=[{value:"Category &quot;Tests&quot; has the following generators:",id:"category-tests-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const n={a:"a",h3:"h3",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"category-tests-has-the-following-generators",children:'Category "Tests" has the following generators:'}),"\n",(0,r.jsxs)(n.p,{children:["1 ",(0,r.jsx)(n.a,{href:"/docs/mocklis",children:"mocklis"})]}),"\n",(0,r.jsxs)(n.p,{children:["2 ",(0,r.jsx)(n.a,{href:"/docs/MockMe",children:"MockMe"})]}),"\n",(0,r.jsxs)(n.p,{children:["3 ",(0,r.jsx)(n.a,{href:"/docs/MSTest",children:"MSTest"})]}),"\n",(0,r.jsxs)(n.p,{children:["4 ",(0,r.jsx)(n.a,{href:"/docs/Ridge",children:"Ridge"})]}),"\n",(0,r.jsxs)(n.p,{children:["5 ",(0,r.jsx)(n.a,{href:"/docs/Rocks",children:"Rocks"})]}),"\n",(0,r.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/Categories/Tests",children:"Tests"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},73059:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/Ridge-e3ce15248f0b7a2367a3053485f97099.zip"}}]);