"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4933],{14583:(e,r,o)=>{o.d(r,{A:()=>t});const t=o.p+"assets/files/Comparison-78f49e8f86a9f176004f4426ad919934.zip"},28907:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>p,contentTitle:()=>m,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"RSCG-Examples/Comparison","title":"195 - Comparison","description":"If you want to generate comparison operators for your classes, startin with IComparable","source":"@site/docs/RSCG-Examples/Comparison.md","sourceDirName":"RSCG-Examples","slug":"/Comparison","permalink":"/RSCG_Examples/v2/docs/Comparison","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1950,"frontMatter":{"sidebar_position":1950,"title":"195 - Comparison","description":"If you want to generate comparison operators for your classes, startin with IComparable","slug":"/Comparison"},"sidebar":"tutorialSidebar","previous":{"title":"194 - zlinq","permalink":"/RSCG_Examples/v2/docs/zlinq"},"next":{"title":"196 - ArgumentParsing","permalink":"/RSCG_Examples/v2/docs/ArgumentParsing"}}');var n=o(74848),s=o(28453),a=o(11470),i=o(19365),l=o(14252);const c={sidebar_position:1950,title:"195 - Comparison",description:"If you want to generate comparison operators for your classes, startin with IComparable",slug:"/Comparison"},m="Comparison  by Fons Sonnemans",p={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Example",id:"example",level:2},{value:"Implement IComparisonOperators&lt;TSelf,TOther,TResult&gt; interface",id:"implement-icomparisonoperatorstselftothertresult-interface",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Comparison",id:"share-comparison",level:3},{value:"In the same category (EnhancementClass) - 27 other generators",id:"in-the-same-category-enhancementclass---27-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CommonCodeGenerator",id:"commoncodegenerator",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"Enhanced.GetTypes",id:"enhancedgettypes",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"Lombok.NET",id:"lomboknet",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemberAccessor",id:"memberaccessor",level:4},{value:"MemoryPack",id:"memorypack",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"OptionToStringGenerator",id:"optiontostringgenerator",level:4},{value:"QueryStringGenerator",id:"querystringgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4},{value:"ThisClass",id:"thisclass",level:4}];function d(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"comparison--by-fons-sonnemans",children:"Comparison  by Fons Sonnemans"})}),"\n",(0,n.jsx)(l.A,{toc:h}),"\n",(0,n.jsx)(r.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/nuget/dt/ReflectionIT.ComparisonOperatorsGenerator?label=ReflectionIT.ComparisonOperatorsGenerator",alt:"Nuget"})}),"\n",(0,n.jsx)(r.a,{href:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/github/last-commit/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,n.jsx)(r.img,{src:"https://img.shields.io/github/stars/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,n.jsx)(r.h2,{id:"details",children:"Details"}),"\n",(0,n.jsx)(r.h3,{id:"info",children:"Info"}),"\n",(0,n.jsxs)(r.admonition,{type:"info",children:[(0,n.jsxs)(r.p,{children:["Name: ",(0,n.jsx)(r.strong,{children:"Comparison"})]}),(0,n.jsxs)(r.p,{children:["A Source Generator package that generates the ",(0,n.jsx)(r.code,{children:">"}),", ",(0,n.jsx)(r.code,{children:">="}),", ",(0,n.jsx)(r.code,{children:"<"}),", ",(0,n.jsx)(r.code,{children:"<="})," operators for a ",(0,n.jsx)(r.code,{children:"partial"})," type (",(0,n.jsx)(r.code,{children:"class"}),", ",(0,n.jsx)(r.code,{children:"struct"})," or ",(0,n.jsx)(r.code,{children:"record"}),") which implements",(0,n.jsx)(r.code,{children:"IComparable<T>"}),"."]}),(0,n.jsx)(r.p,{children:"Author: Fons Sonnemans"}),(0,n.jsxs)(r.p,{children:["NuGet:\n",(0,n.jsx)(r.em,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/",children:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/"})})]}),(0,n.jsxs)(r.p,{children:["You can find more details at ",(0,n.jsx)(r.a,{href:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator",children:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator"})]}),(0,n.jsxs)(r.p,{children:["Source: ",(0,n.jsx)(r.a,{href:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator",children:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator"})]})]}),"\n",(0,n.jsx)(r.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,n.jsxs)(r.admonition,{type:"note",children:[(0,n.jsx)(r.h1,{id:"reflectionitcomparisonoperatorsgenerator",children:"ReflectionIT.ComparisonOperatorsGenerator"}),(0,n.jsxs)(r.p,{children:["A Source Generator package that generates the ",(0,n.jsx)(r.code,{children:">"}),", ",(0,n.jsx)(r.code,{children:">="}),", ",(0,n.jsx)(r.code,{children:"<"}),", ",(0,n.jsx)(r.code,{children:"<="})," operators for a ",(0,n.jsx)(r.code,{children:"partial"})," type (",(0,n.jsx)(r.code,{children:"class"}),", ",(0,n.jsx)(r.code,{children:"struct"})," or ",(0,n.jsx)(r.code,{children:"record"}),") which implements\n",(0,n.jsx)(r.code,{children:"IComparable<T>"}),"."]}),(0,n.jsxs)(r.p,{children:["Generating these additional operators is as simple as adding the ",(0,n.jsx)(r.code,{children:"ComparisonOperators"})," attribute to your type. Make sure this type is ",(0,n.jsx)(r.code,{children:"partial"})," and implements ",(0,n.jsx)(r.code,{children:"System.IComparable<T>"})]}),(0,n.jsx)(r.h1,{id:"nuget-packages",children:"NuGet packages"}),(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Package"}),(0,n.jsx)(r.th,{children:"Version"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"ReflectionIT.ComparisonOperatorsGenerator"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/nuget/v/ReflectionIT.ComparisonOperatorsGenerator",alt:"NuGet"})})})]})})]}),(0,n.jsx)(r.h2,{id:"example",children:"Example"}),(0,n.jsx)(r.p,{children:"Add the NuGet package and write the following code:"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cs",children:'using ReflectionIT.ComparisonOperatorsGenerator.Attributes;\n\n[ComparisonOperators]\npartial class Point : IComparable<Point> {\n\n    public double X { get; }\n    public double Y { get; }\n\n    public Point(double x, double y) {\n        this.X = x;\n        this.Y = y;\n    }\n\n    public void Swap() => new Point(this.Y, this.X);\n\n    public double Dist => Math.Sqrt((X * X) + (Y * Y));\n\n    public override string ToString() => $"({X},{Y})";\n\n    public int CompareTo(Point? other) {\n        return Comparer<double?>.Default.Compare(this.Dist, other?.Dist);\n    }\n}\n'})}),(0,n.jsx)(r.p,{children:"This will generate the following partial class with the 4 comparison operators."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cs",children:"partial class Point : System.Numerics.IComparisonOperators<Point,Point,bool> \n{\n    public static bool operator <(Point left, Point right) => left.CompareTo(right) < 0;\n        \n    public static bool operator <=(Point left, Point right) => left.CompareTo(right) <= 0;\n        \n    public static bool operator >(Point left, Point right) => left.CompareTo(right) > 0;\n        \n    public static bool operator >=(Point left, Point right) => left.CompareTo(right) >= 0;       \n}\n"})}),(0,n.jsx)(r.h2,{id:"implement-icomparisonoperatorstselftothertresult-interface",children:"Implement IComparisonOperators<TSelf,TOther,TResult> interface"}),(0,n.jsxs)(r.p,{children:["You can automatically implement the ",(0,n.jsx)(r.code,{children:"IComparisonOperators<TSelf,TOther,TResult>"})," interface using the ",(0,n.jsx)(r.code,{children:"ImplementIComparisonOperatorsInterface"})," property of the ",(0,n.jsx)(r.code,{children:"ComparisonOperators"})," attribute."]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cs",children:'using ReflectionIT.ComparisonOperatorsGenerator.Attributes;\n\n[ComparisonOperators(ImplementIComparisonOperatorsInterface = true)]\nreadonly partial record struct Time : IComparable<Time> {\n\n    public readonly int TotalMinutes; \n\n    public int Hours => TotalMinutes / 60;\n    public int Minutes => TotalMinutes % 60;\n    public Time(int totalMinutes) {\n        ArgumentOutOfRangeException.ThrowIfNegative(totalMinutes);\n        TotalMinutes = totalMinutes;\n    }\n\n    public Time(int hours, int minutes) : this(hours * 60 + minutes) {\n    }\n\n    public override string ToString() => $"{this.Hours}:{this.Minutes:00}";\n\n    public int CompareTo(Time other) => this.TotalMinutes.CompareTo(other.TotalMinutes);\n}\n'})}),(0,n.jsxs)(r.p,{children:["This will generate the following partial record struct with the 4 comparison operators and the ",(0,n.jsx)(r.code,{children:"IComparisonOperators<TSelf,TOther,TResult>"})," interface implementation"]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cs",children:"partial record struct Time : global::System.Numerics.IComparisonOperators<Time,Time,bool> \n{\n    public static bool operator <(Time left, Time right) => left.CompareTo(right) < 0;\n        \n    public static bool operator <=(Time left, Time right) => left.CompareTo(right) <= 0;\n        \n    public static bool operator >(Time left, Time right) => left.CompareTo(right) > 0;\n        \n    public static bool operator >=(Time left, Time right) => left.CompareTo(right) >= 0;\n        \n}\n"})})]}),"\n",(0,n.jsx)(r.h3,{id:"about",children:"About"}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsx)(r.p,{children:"If you want to generate comparison operators for your classes, startin with IComparable"})}),"\n",(0,n.jsx)(r.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,n.jsx)(r.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,n.jsxs)(a.A,{children:[(0,n.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,n.jsxs)(r.p,{children:["This is the CSharp Project that references ",(0,n.jsx)(r.strong,{children:"Comparison"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<ItemGroup>\n\n\t\t<PackageReference Include="ReflectionIT.ComparisonOperatorsGenerator" Version="0.1.2-preview" />\n\t\t\n\t</ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n</Project>\n\n'})})]}),(0,n.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\Program.cs",label:"Program.cs",children:[(0,n.jsxs)(r.p,{children:["This is the use of ",(0,n.jsx)(r.strong,{children:"Comparison"})," in ",(0,n.jsx)(r.em,{children:"Program.cs"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing ComparisonDemo;\n\nConsole.WriteLine("Hello, World!");\nvar room = new Room\n{\n    Height = 10,\n    Width = 20,\n    Length = 30\n};\nvar room2 = new Room\n{\n    Height = 15,\n    Width = 25,\n    Length = 35\n};\nConsole.WriteLine($"Room Volume: {room.Volume}");\nConsole.WriteLine($"Room Comparison: {room.CompareTo(room2)}");\nConsole.WriteLine($"Room Comparison: {room < room2}");\n\n\n'})})]}),(0,n.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\Room.cs",label:"Room.cs",children:[(0,n.jsxs)(r.p,{children:["This is the use of ",(0,n.jsx)(r.strong,{children:"Comparison"})," in ",(0,n.jsx)(r.em,{children:"Room.cs"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using ReflectionIT.ComparisonOperatorsGenerator.Attributes;\n\n\nnamespace ComparisonDemo;\n//https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator\n[ComparisonOperators]\ninternal partial class Room : IComparable<Room>\n{\n\n    public int Height { get; set; }\n    public int Width { get; set; }\n    public int Length { get; set; }\n    public int Volume => Height * Width * Length;\n\n    public int CompareTo(Room? other)\n    {\n        return other is null ? 1 : Volume.CompareTo(other.Volume);\n    }\n}\n\n"})})]})]}),"\n",(0,n.jsx)(r.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,n.jsx)(r.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,n.jsxs)(a.A,{children:[(0,n.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\obj\\GX\\ReflectionIT.ComparisonOperatorsGenerator\\ReflectionIT.ComparisonOperatorsGenerator.DisposableGenerator\\ComparisonDemo.Room.g.cs",label:"ComparisonDemo.Room.g.cs",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the ReflectionIT.ComparisonOperatorsGenerator source generator\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace ComparisonDemo\n{\n    partial class Room\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is less.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator <(Room left, Room right) => left.CompareTo(right) < 0;\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is less or equal.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator <=(Room left, Room right) => left.CompareTo(right) <= 0;\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is greater.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator >(Room left, Room right) => left.CompareTo(right) > 0;\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is greater or equal.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator >=(Room left, Room right) => left.CompareTo(right) >= 0;\n        \n    }\n    \n}\n\n'})})}),(0,n.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\obj\\GX\\ReflectionIT.ComparisonOperatorsGenerator\\ReflectionIT.ComparisonOperatorsGenerator.DisposableGenerator\\ComparisonOperatorsGenerator.Attributes.g.cs",label:"ComparisonOperatorsGenerator.Attributes.g.cs",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the ReflectionIT.ComparisonOperatorsGenerator source generator\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n#nullable enable\n#if COMPARISON_OPERATORS_GENERATOR_EMBED_ATTRIBUTES\n\n/// <summary>\n/// An attribute to indicate that comparison operators should be generated for the target class, struct or record\n/// <para>\n/// This only works if the <see cref="System.IComparable{T}"/> interface is implemented\n/// </para>\n/// </summary>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]\npublic class ComparisonOperatorsAttribute : Attribute {\n\n    /// <summary>\n    /// Gets or sets a value indicating whether the <see cref="System.Numerics.IComparisonOperators{TSelf,TOther,TResult}" /> interface should be implemented.\n    /// </summary>\n    public bool ImplementIComparisonOperatorsInterface { get; set; }\n}\n#endif\n'})})})]}),"\n",(0,n.jsx)(r.h2,{id:"useful",children:"Useful"}),"\n",(0,n.jsx)(r.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:o(14583).A+"",children:"Download Example project Comparison "})})}),"\n",(0,n.jsx)(r.h3,{id:"share-comparison",children:"Share Comparison"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&quote=Comparison",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&text=Comparison:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&title=Comparison",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&title=Comparison&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Comparison",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Comparison"})}),"\n",(0,n.jsx)(r.h3,{id:"in-the-same-category-enhancementclass---27-other-generators",children:"In the same category (EnhancementClass) - 27 other generators"}),"\n",(0,n.jsx)(r.h4,{id:"apparatusaot",children:(0,n.jsx)(r.a,{href:"/docs/ApparatusAOT",children:"ApparatusAOT"})}),"\n",(0,n.jsx)(r.h4,{id:"aspectgenerator",children:(0,n.jsx)(r.a,{href:"/docs/AspectGenerator",children:"AspectGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"commoncodegenerator",children:(0,n.jsx)(r.a,{href:"/docs/CommonCodeGenerator",children:"CommonCodeGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"dudnet",children:(0,n.jsx)(r.a,{href:"/docs/DudNet",children:"DudNet"})}),"\n",(0,n.jsx)(r.h4,{id:"enhancedgettypes",children:(0,n.jsx)(r.a,{href:"/docs/Enhanced.GetTypes",children:"Enhanced.GetTypes"})}),"\n",(0,n.jsx)(r.h4,{id:"fastgenericnew",children:(0,n.jsx)(r.a,{href:"/docs/FastGenericNew",children:"FastGenericNew"})}),"\n",(0,n.jsx)(r.h4,{id:"hsusgsync",children:(0,n.jsx)(r.a,{href:"/docs/HsuSgSync",children:"HsuSgSync"})}),"\n",(0,n.jsx)(r.h4,{id:"immutype",children:(0,n.jsx)(r.a,{href:"/docs/Immutype",children:"Immutype"})}),"\n",(0,n.jsx)(r.h4,{id:"lingaudit",children:(0,n.jsx)(r.a,{href:"/docs/Ling.Audit",children:"Ling.Audit"})}),"\n",(0,n.jsx)(r.h4,{id:"lomboknet",children:(0,n.jsx)(r.a,{href:"/docs/Lombok.NET",children:"Lombok.NET"})}),"\n",(0,n.jsx)(r.h4,{id:"m31fluentapi",children:(0,n.jsx)(r.a,{href:"/docs/M31.FluentAPI",children:"M31.FluentAPI"})}),"\n",(0,n.jsx)(r.h4,{id:"memberaccessor",children:(0,n.jsx)(r.a,{href:"/docs/MemberAccessor",children:"MemberAccessor"})}),"\n",(0,n.jsx)(r.h4,{id:"memorypack",children:(0,n.jsx)(r.a,{href:"/docs/MemoryPack",children:"MemoryPack"})}),"\n",(0,n.jsx)(r.h4,{id:"meziantoupolyfill",children:(0,n.jsx)(r.a,{href:"/docs/Meziantou.Polyfill",children:"Meziantou.Polyfill"})}),"\n",(0,n.jsx)(r.h4,{id:"microsoftextensionslogging",children:(0,n.jsx)(r.a,{href:"/docs/Microsoft.Extensions.Logging",children:"Microsoft.Extensions.Logging"})}),"\n",(0,n.jsx)(r.h4,{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",children:(0,n.jsx)(r.a,{href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",children:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"microsoftinteropjavascriptjsimportgenerator",children:(0,n.jsx)(r.a,{href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator",children:"Microsoft.Interop.JavaScript.JSImportGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"optiontostringgenerator",children:(0,n.jsx)(r.a,{href:"/docs/OptionToStringGenerator",children:"OptionToStringGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"querystringgenerator",children:(0,n.jsx)(r.a,{href:"/docs/QueryStringGenerator",children:"QueryStringGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"rscg_decorator",children:(0,n.jsx)(r.a,{href:"/docs/RSCG_Decorator",children:"RSCG_Decorator"})}),"\n",(0,n.jsx)(r.h4,{id:"rscg_utilitytypes",children:(0,n.jsx)(r.a,{href:"/docs/RSCG_UtilityTypes",children:"RSCG_UtilityTypes"})}),"\n",(0,n.jsx)(r.h4,{id:"staticreflection",children:(0,n.jsx)(r.a,{href:"/docs/StaticReflection",children:"StaticReflection"})}),"\n",(0,n.jsx)(r.h4,{id:"syncmethodgenerator",children:(0,n.jsx)(r.a,{href:"/docs/SyncMethodGenerator",children:"SyncMethodGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"systemruntimeinteropservices",children:(0,n.jsx)(r.a,{href:"/docs/System.Runtime.InteropServices",children:"System.Runtime.InteropServices"})}),"\n",(0,n.jsx)(r.h4,{id:"systemtextregularexpressions",children:(0,n.jsx)(r.a,{href:"/docs/System.Text.RegularExpressions",children:"System.Text.RegularExpressions"})}),"\n",(0,n.jsx)(r.h4,{id:"telemetrylogging",children:(0,n.jsx)(r.a,{href:"/docs/TelemetryLogging",children:"TelemetryLogging"})}),"\n",(0,n.jsx)(r.h4,{id:"thisclass",children:(0,n.jsx)(r.a,{href:"/docs/ThisClass",children:"ThisClass"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);