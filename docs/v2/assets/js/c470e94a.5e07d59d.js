"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9716],{41565:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>h,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"RSCG-Examples/MemoryPack","title":"34 - MemoryPack","description":"Efficient serializer","source":"@site/docs/RSCG-Examples/MemoryPack.md","sourceDirName":"RSCG-Examples","slug":"/MemoryPack","permalink":"/RSCG_Examples/v2/docs/MemoryPack","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/MemoryPack.md","tags":[],"version":"current","sidebarPosition":340,"frontMatter":{"sidebar_position":340,"title":"34 - MemoryPack","description":"Efficient serializer","slug":"/MemoryPack"},"sidebar":"tutorialSidebar","previous":{"title":"33 - Matryoshki","permalink":"/RSCG_Examples/v2/docs/Matryoshki"},"next":{"title":"35 - DeeDee","permalink":"/RSCG_Examples/v2/docs/DeeDee"}}');var t=n(74848),a=n(28453),s=n(11470),o=n(19365),l=n(14252);const c={sidebar_position:340,title:"34 - MemoryPack",description:"Efficient serializer",slug:"/MemoryPack"},d="MemoryPack  by Cysharp, Inc",h={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Built-in supported types",id:"built-in-supported-types",level:2},{value:"Define <code>[MemoryPackable]</code> <code>class</code> / <code>struct</code> / <code>record</code> / <code>record struct</code>",id:"define-memorypackable-class--struct--record--record-struct",level:2},{value:"Constructor selection",id:"constructor-selection",level:3},{value:"Serialization callbacks",id:"serialization-callbacks",level:3},{value:"Define custom collection",id:"define-custom-collection",level:2},{value:"Polymorphism (Union)",id:"polymorphism-union",level:2},{value:"Serialize API",id:"serialize-api",level:2},{value:"MemoryPackSerializerOptions",id:"memorypackserializeroptions",level:3},{value:"Deserialize API",id:"deserialize-api",level:2},{value:"Overwrite",id:"overwrite",level:2},{value:"Version tolerant",id:"version-tolerant",level:2},{value:"Serialization info",id:"serialization-info",level:2},{value:"Circular Reference",id:"circular-reference",level:2},{value:"CustomFormatter",id:"customformatter",level:2},{value:"Deserialize array pooling",id:"deserialize-array-pooling",level:2},{value:"Performance",id:"performance",level:2},{value:"Payload size and compression",id:"payload-size-and-compression",level:2},{value:"Compression",id:"compression",level:3},{value:"Serialize external types",id:"serialize-external-types",level:2},{value:"Packages",id:"packages",level:2},{value:"TypeScript and ASP.NET Core Formatter",id:"typescript-and-aspnet-core-formatter",level:2},{value:"TypeScript Type Mapping",id:"typescript-type-mapping",level:3},{value:"Configure import file extension and member name casing",id:"configure-import-file-extension-and-member-name-casing",level:3},{value:"Streaming Serialization",id:"streaming-serialization",level:2},{value:"Formatter/Provider API",id:"formatterprovider-api",level:2},{value:"MemoryPackWriter/ReaderOptionalState",id:"memorypackwriterreaderoptionalstate",level:2},{value:"Target framework dependency",id:"target-framework-dependency",level:2},{value:"RPC",id:"rpc",level:2},{value:"Unity",id:"unity",level:2},{value:"Native AOT",id:"native-aot",level:2},{value:"Binary wire format specification",id:"binary-wire-format-specification",level:2},{value:"Unmanaged struct",id:"unmanaged-struct",level:3},{value:"Object",id:"object",level:3},{value:"Version Tolerant Object",id:"version-tolerant-object",level:3},{value:"Circular Reference Object",id:"circular-reference-object",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Collection",id:"collection",level:3},{value:"String",id:"string",level:3},{value:"Union",id:"union",level:3},{value:"License",id:"license",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share MemoryPack",id:"share-memorypack",level:3},{value:"In the same category (EnhancementClass) - 27 other generators",id:"in-the-same-category-enhancementclass---27-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CommonCodeGenerator",id:"commoncodegenerator",level:4},{value:"Comparison",id:"comparison",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"Enhanced.GetTypes",id:"enhancedgettypes",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"Lombok.NET",id:"lomboknet",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemberAccessor",id:"memberaccessor",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"OptionToStringGenerator",id:"optiontostringgenerator",level:4},{value:"QueryStringGenerator",id:"querystringgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4},{value:"ThisClass",id:"thisclass",level:4}];function m(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",del:"del",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"memorypack--by-cysharp-inc",children:"MemoryPack  by Cysharp, Inc"})}),"\n",(0,t.jsx)(l.A,{toc:p}),"\n",(0,t.jsx)(r.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.nuget.org/packages/MemoryPack/",children:(0,t.jsx)(r.img,{src:"https://img.shields.io/nuget/dt/MemoryPack?label=MemoryPack",alt:"Nuget"})}),"\n",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack",children:(0,t.jsx)(r.img,{src:"https://img.shields.io/github/last-commit/Cysharp/MemoryPack?label=updated",alt:"GitHub last commit"})}),"\n",(0,t.jsx)(r.img,{src:"https://img.shields.io/github/stars/Cysharp/MemoryPack?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,t.jsx)(r.h2,{id:"details",children:"Details"}),"\n",(0,t.jsx)(r.h3,{id:"info",children:"Info"}),"\n",(0,t.jsxs)(r.admonition,{type:"info",children:[(0,t.jsxs)(r.p,{children:["Name: ",(0,t.jsx)(r.strong,{children:"MemoryPack"})]}),(0,t.jsx)(r.p,{children:"Package Description"}),(0,t.jsx)(r.p,{children:"Author: Cysharp, Inc"}),(0,t.jsxs)(r.p,{children:["NuGet:\n",(0,t.jsx)(r.em,{children:(0,t.jsx)(r.a,{href:"https://www.nuget.org/packages/MemoryPack/",children:"https://www.nuget.org/packages/MemoryPack/"})})]}),(0,t.jsxs)(r.p,{children:["You can find more details at ",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack",children:"https://github.com/Cysharp/MemoryPack"})]}),(0,t.jsxs)(r.p,{children:["Source: ",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack",children:"https://github.com/Cysharp/MemoryPack"})]})]}),"\n",(0,t.jsx)(r.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsx)(r.h1,{id:"memorypack",children:"MemoryPack"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://www.nuget.org/packages/MemoryPack",children:(0,t.jsx)(r.img,{src:"https://img.shields.io/nuget/v/MemoryPack.svg",alt:"NuGet"})}),"\n",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack/actions",children:(0,t.jsx)(r.img,{src:"https://github.com/Cysharp/MemoryPack/workflows/Build-Debug/badge.svg",alt:"GitHub Actions"})}),"\n",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack/releases",children:(0,t.jsx)(r.img,{src:"https://img.shields.io/github/release/Cysharp/MemoryPack.svg",alt:"Releases"})})]}),(0,t.jsx)(r.p,{children:"Zero encoding extreme performance binary serializer for C# and Unity."}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://user-images.githubusercontent.com/46207/200979655-63ed38ae-dad2-4ca0-bbb7-9e0aa98914af.png",alt:"image"})}),(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Compared with ",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/ja-jp/dotnet/api/system.text.json",children:"System.Text.Json"}),", ",(0,t.jsx)(r.a,{href:"https://github.com/protobuf-net/protobuf-net",children:"protobuf-net"}),", ",(0,t.jsx)(r.a,{href:"https://github.com/neuecc/MessagePack-CSharp",children:"MessagePack for C#"}),", ",(0,t.jsx)(r.a,{href:"https://github.com/dotnet/orleans/",children:"Orleans.Serialization"}),". Measured by .NET 7 / Ryzen 9 5950X machine. These serializers have ",(0,t.jsx)(r.code,{children:"IBufferWriter<byte>"})," method, serialized using ",(0,t.jsx)(r.code,{children:"ArrayBufferWriter<byte>"})," and reused to avoid measure buffer copy."]}),"\n"]}),(0,t.jsx)(r.p,{children:"For standard objects, MemoryPack is x10 faster and x2 ~ x5 faster than other binary serializers. For struct array, MemoryPack is even more powerful, with speeds up to x50 ~ x200 greater than other serializers."}),(0,t.jsxs)(r.p,{children:["MemoryPack is my 4th serializer, previously I've created well known serializers, ",(0,t.jsx)(r.del,{children:(0,t.jsx)(r.a,{href:"https://github.com/neuecc/ZeroFormatter",children:"ZeroFormatter"})}),", ",(0,t.jsx)(r.del,{children:(0,t.jsx)(r.a,{href:"https://github.com/neuecc/Utf8Json",children:"Utf8Json"})}),", ",(0,t.jsx)(r.a,{href:"https://github.com/neuecc/MessagePack-CSharp",children:"MessagePack for C#"}),". The reason for MemoryPack's speed is due to its C#-specific, C#-optimized binary format and a well tuned implementation based on my past experience. It is also a completely new design utilizing .NET 7 and C# 11 and the Incremental Source Generator (.NET Standard 2.1 (.NET 5, 6) and there is also Unity support)."]}),(0,t.jsx)(r.p,{children:"Other serializers perform many encoding operations such as VarInt encoding, tag, string, etc. MemoryPack format uses a zero-encoding design that copies as much C# memory as possible. Zero-encoding is similar to FlatBuffers, but it doesn't need a special type, MemoryPack's serialization target is POCO."}),(0,t.jsx)(r.p,{children:"Other than performance, MemoryPack has these features."}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Support modern I/O APIs (",(0,t.jsx)(r.code,{children:"IBufferWriter<byte>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlySpan<byte>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlySequence<byte>"}),")"]}),"\n",(0,t.jsx)(r.li,{children:"Native AOT friendly Source Generator based code generation, no Dynamic CodeGen (IL.Emit)"}),"\n",(0,t.jsx)(r.li,{children:"Reflectionless non-generics APIs"}),"\n",(0,t.jsx)(r.li,{children:"Deserialize into existing instance"}),"\n",(0,t.jsx)(r.li,{children:"Polymorphism (Union) serialization"}),"\n",(0,t.jsx)(r.li,{children:"Limited version-tolerant (fast/default) and full version-tolerant support"}),"\n",(0,t.jsx)(r.li,{children:"Circular reference serialization"}),"\n",(0,t.jsx)(r.li,{children:"PipeWriter/Reader based streaming serialization"}),"\n",(0,t.jsx)(r.li,{children:"TypeScript code generation and ASP.NET Core Formatter"}),"\n",(0,t.jsx)(r.li,{children:"Unity (2021.3) IL2CPP Support via .NET Source Generator"}),"\n"]}),(0,t.jsx)(r.h2,{id:"installation",children:"Installation"}),(0,t.jsxs)(r.p,{children:["This library is distributed via NuGet. For best performance, recommend to use ",(0,t.jsx)(r.code,{children:".NET 7"}),". Minimum requirement is ",(0,t.jsx)(r.code,{children:".NET Standard 2.1"}),"."]}),(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["PM> Install-Package ",(0,t.jsx)(r.a,{href:"https://www.nuget.org/packages/MemoryPack",children:"MemoryPack"})]}),"\n"]}),(0,t.jsxs)(r.p,{children:["And also a code editor requires Roslyn 4.3.1 support, for example Visual Studio 2022 version 17.3, .NET SDK 6.0.401. For details, see the ",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/visualstudio/extensibility/roslyn-version-support",children:"Roslyn Version Support"})," document."]}),(0,t.jsxs)(r.p,{children:["For Unity, the requirements and installation process are completely different. See the ",(0,t.jsx)(r.a,{href:"#unity",children:"Unity"})," section for details."]}),(0,t.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),(0,t.jsxs)(r.p,{children:["Define a struct or class to be serialized and annotate it with the ",(0,t.jsx)(r.code,{children:"[MemoryPackable]"})," attribute and the ",(0,t.jsx)(r.code,{children:"partial"})," keyword."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"using MemoryPack;\n\n[MemoryPackable]\npublic partial class Person\n{\n    public int Age { get; set; }\n    public string Name { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:["Serialization code is generated by the C# source generator feature which implements the ",(0,t.jsx)(r.code,{children:"IMemoryPackable<T>"})," interface. In Visual Studio you can check a generated code by using a shortcut ",(0,t.jsx)(r.code,{children:"Ctrl+K, R"})," on the class name and select ",(0,t.jsx)(r.code,{children:"*.MemoryPackFormatter.g.cs"}),"."]}),(0,t.jsxs)(r.p,{children:["Call ",(0,t.jsx)(r.code,{children:"MemoryPackSerializer.Serialize<T>/Deserialize<T>"})," to serialize/deserialize an object instance."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'var v = new Person { Age = 40, Name = "John" };\n\nvar bin = MemoryPackSerializer.Serialize(v);\nvar val = MemoryPackSerializer.Deserialize<Person>(bin);\n'})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Serialize"})," method supports a return type of ",(0,t.jsx)(r.code,{children:"byte[]"})," as well as it can serialize to ",(0,t.jsx)(r.code,{children:"IBufferWriter<byte>"})," or ",(0,t.jsx)(r.code,{children:"Stream"}),". ",(0,t.jsx)(r.code,{children:"Deserialize"})," method supports ",(0,t.jsx)(r.code,{children:"ReadOnlySpan<byte>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlySequence<byte>"})," and ",(0,t.jsx)(r.code,{children:"Stream"}),". And there are alse non-generics versions."]}),(0,t.jsx)(r.h2,{id:"built-in-supported-types",children:"Built-in supported types"}),(0,t.jsx)(r.p,{children:"These types can be serialized by default:"}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[".NET primitives (",(0,t.jsx)(r.code,{children:"byte"}),", ",(0,t.jsx)(r.code,{children:"int"}),", ",(0,t.jsx)(r.code,{children:"bool"}),", ",(0,t.jsx)(r.code,{children:"char"}),", ",(0,t.jsx)(r.code,{children:"double"}),", etc.)"]}),"\n",(0,t.jsxs)(r.li,{children:["Unmanaged types (Any ",(0,t.jsx)(r.code,{children:"enum"}),", Any user-defined ",(0,t.jsx)(r.code,{children:"struct"})," which doesn't contain reference types)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"string"}),", ",(0,t.jsx)(r.code,{children:"decimal"}),", ",(0,t.jsx)(r.code,{children:"Half"}),", ",(0,t.jsx)(r.code,{children:"Int128"}),", ",(0,t.jsx)(r.code,{children:"UInt128"}),", ",(0,t.jsx)(r.code,{children:"Guid"}),", ",(0,t.jsx)(r.code,{children:"Rune"}),", ",(0,t.jsx)(r.code,{children:"BigInteger"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"TimeSpan"}),",  ",(0,t.jsx)(r.code,{children:"DateTime"}),", ",(0,t.jsx)(r.code,{children:"DateTimeOffset"}),", ",(0,t.jsx)(r.code,{children:"TimeOnly"}),", ",(0,t.jsx)(r.code,{children:"DateOnly"}),", ",(0,t.jsx)(r.code,{children:"TimeZoneInfo"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Complex"}),", ",(0,t.jsx)(r.code,{children:"Plane"}),", ",(0,t.jsx)(r.code,{children:"Quaternion"})," ",(0,t.jsx)(r.code,{children:"Matrix3x2"}),", ",(0,t.jsx)(r.code,{children:"Matrix4x4"}),", ",(0,t.jsx)(r.code,{children:"Vector2"}),", ",(0,t.jsx)(r.code,{children:"Vector3"}),", ",(0,t.jsx)(r.code,{children:"Vector4"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Uri"}),", ",(0,t.jsx)(r.code,{children:"Version"}),", ",(0,t.jsx)(r.code,{children:"StringBuilder"}),", ",(0,t.jsx)(r.code,{children:"Type"}),", ",(0,t.jsx)(r.code,{children:"BitArray"}),", ",(0,t.jsx)(r.code,{children:"CultureInfo"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"T[]"}),", ",(0,t.jsx)(r.code,{children:"T[,]"}),", ",(0,t.jsx)(r.code,{children:"T[,,]"}),", ",(0,t.jsx)(r.code,{children:"T[,,,]"}),", ",(0,t.jsx)(r.code,{children:"Memory<>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlyMemory<>"}),", ",(0,t.jsx)(r.code,{children:"ArraySegment<>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlySequence<>"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Nullable<>"}),", ",(0,t.jsx)(r.code,{children:"Lazy<>"}),", ",(0,t.jsx)(r.code,{children:"KeyValuePair<,>"}),", ",(0,t.jsx)(r.code,{children:"Tuple<,...>"}),", ",(0,t.jsx)(r.code,{children:"ValueTuple<,...>"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"List<>"}),", ",(0,t.jsx)(r.code,{children:"LinkedList<>"}),", ",(0,t.jsx)(r.code,{children:"Queue<>"}),", ",(0,t.jsx)(r.code,{children:"Stack<>"}),", ",(0,t.jsx)(r.code,{children:"HashSet<>"}),", ",(0,t.jsx)(r.code,{children:"SortedSet<>"}),", ",(0,t.jsx)(r.code,{children:"PriorityQueue<,>"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Dictionary<,>"}),", ",(0,t.jsx)(r.code,{children:"SortedList<,>"}),", ",(0,t.jsx)(r.code,{children:"SortedDictionary<,>"}),",  ",(0,t.jsx)(r.code,{children:"ReadOnlyDictionary<,>"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Collection<>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlyCollection<>"}),", ",(0,t.jsx)(r.code,{children:"ObservableCollection<>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlyObservableCollection<>"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"IEnumerable<>"}),", ",(0,t.jsx)(r.code,{children:"ICollection<>"}),", ",(0,t.jsx)(r.code,{children:"IList<>"}),", ",(0,t.jsx)(r.code,{children:"IReadOnlyCollection<>"}),", ",(0,t.jsx)(r.code,{children:"IReadOnlyList<>"}),", ",(0,t.jsx)(r.code,{children:"ISet<>"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"IDictionary<,>"}),", ",(0,t.jsx)(r.code,{children:"IReadOnlyDictionary<,>"}),", ",(0,t.jsx)(r.code,{children:"ILookup<,>"}),", ",(0,t.jsx)(r.code,{children:"IGrouping<,>"}),","]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"ConcurrentBag<>"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentQueue<>"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentStack<>"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentDictionary<,>"}),", ",(0,t.jsx)(r.code,{children:"BlockingCollection<>"})]}),"\n",(0,t.jsxs)(r.li,{children:["Immutable collections (",(0,t.jsx)(r.code,{children:"ImmutableList<>"}),", etc.) and interfaces (",(0,t.jsx)(r.code,{children:"IImmutableList<>"}),", etc.)"]}),"\n"]}),(0,t.jsxs)(r.h2,{id:"define-memorypackable-class--struct--record--record-struct",children:["Define ",(0,t.jsx)(r.code,{children:"[MemoryPackable]"})," ",(0,t.jsx)(r.code,{children:"class"})," / ",(0,t.jsx)(r.code,{children:"struct"})," / ",(0,t.jsx)(r.code,{children:"record"})," / ",(0,t.jsx)(r.code,{children:"record struct"})]}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"[MemoryPackable]"})," can annotate to any ",(0,t.jsx)(r.code,{children:"class"}),", ",(0,t.jsx)(r.code,{children:"struct"}),", ",(0,t.jsx)(r.code,{children:"record"}),", ",(0,t.jsx)(r.code,{children:"record struct"})," and ",(0,t.jsx)(r.code,{children:"interface"}),". If a type is ",(0,t.jsx)(r.code,{children:"struct"})," or ",(0,t.jsx)(r.code,{children:"record struct"})," which contains no reference types (",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/unmanaged-types",children:"C# Unmanaged types"}),") any additional annotation (ignore, include, constructor, callbacks) is not used, that serialize/deserialize directly from the memory."]}),(0,t.jsxs)(r.p,{children:["Otherwise, by default, ",(0,t.jsx)(r.code,{children:"[MemoryPackable]"})," serializes public instance properties or fields. You can use ",(0,t.jsx)(r.code,{children:"[MemoryPackIgnore]"})," to remove serialization target, ",(0,t.jsx)(r.code,{children:"[MemoryPackInclude]"})," promotes a private member to serialization target."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    // these types are serialized by default\n    public int PublicField;\n    public readonly int PublicReadOnlyField;\n    public int PublicProperty { get; set; }\n    public int PrivateSetPublicProperty { get; private set; }\n    public int ReadOnlyPublicProperty { get; }\n    public int InitProperty { get; init; }\n    public required int RequiredInitProperty { get; init; }\n\n    // these types are not serialized by default\n    int privateProperty { get; set; }\n    int privateField;\n    readonly int privateReadOnlyField;\n\n    // use [MemoryPackIgnore] to remove target of a public member\n    [MemoryPackIgnore]\n    public int PublicProperty2 => PublicProperty + PublicField;\n\n    // use [MemoryPackInclude] to promote a private member to serialization target\n    [MemoryPackInclude]\n    int privateField2;\n    [MemoryPackInclude]\n    int privateProperty2 { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"MemoryPack"}),"'s code generator adds information about what members are serialized to the ",(0,t.jsx)(r.code,{children:"<remarks />"})," section. This can be viewed by hovering over the type with Intellisense."]}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://user-images.githubusercontent.com/46207/192393984-9af01fcb-872e-46fb-b08f-4783e8cef4ae.png",alt:"image"})}),(0,t.jsx)(r.p,{children:"All members must be memorypack-serializable, if not the code generator will emit an error."}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://user-images.githubusercontent.com/46207/192413557-8a47d668-5339-46c5-a3da-a77841666f81.png",alt:"image"})}),(0,t.jsxs)(r.p,{children:["MemoryPack has 35 diagnostics rules (",(0,t.jsx)(r.code,{children:"MEMPACK001"})," to ",(0,t.jsx)(r.code,{children:"MEMPACK035"}),") to be defined comfortably."]}),(0,t.jsxs)(r.p,{children:["If target type is defined MemoryPack serialization externally and registered, use ",(0,t.jsx)(r.code,{children:"[MemoryPackAllowSerialize]"})," to silent diagnostics."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample2\n{\n    [MemoryPackAllowSerialize]\n    public NotSerializableType? NotSerializableProperty { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:["Member order is ",(0,t.jsx)(r.strong,{children:"important"}),", MemoryPack does not serialize the member-name or other information, instead serializing fields in the order they are declared. If a type is inherited, serialization is performed in the order of parent \u2192 child. The order of members can not change for the deserialization. For the schema evolution, see the ",(0,t.jsx)(r.a,{href:"#version-tolerant",children:"Version tolerant"})," section."]}),(0,t.jsxs)(r.p,{children:["The default order is sequential, but you can choose the explicit layout with ",(0,t.jsx)(r.code,{children:"[MemoryPackable(SerializeLayout.Explicit)]"})," and ",(0,t.jsx)(r.code,{children:"[MemoryPackOrder()]"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// serialize Prop0 -> Prop1\n[MemoryPackable(SerializeLayout.Explicit)]\npublic partial class SampleExplicitOrder\n{\n    [MemoryPackOrder(1)]\n    public int Prop1 { get; set; }\n    [MemoryPackOrder(0)]\n    public int Prop0 { get; set; }\n}\n"})}),(0,t.jsx)(r.h3,{id:"constructor-selection",children:"Constructor selection"}),(0,t.jsx)(r.p,{children:"MemoryPack supports both parameterized and parameterless constructors. The selection of the constructor follows these rules. (Applies to classes and structs)."}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["If there is ",(0,t.jsx)(r.code,{children:"[MemoryPackConstructor]"}),", use it."]}),"\n",(0,t.jsx)(r.li,{children:"If there is no explicit constructor (including private), use a parameterless one."}),"\n",(0,t.jsx)(r.li,{children:"If there is one parameterless/parameterized constructor (including private), use it."}),"\n",(0,t.jsxs)(r.li,{children:["If there are multiple constructors, then the ",(0,t.jsx)(r.code,{children:"[MemoryPackConstructor]"})," attribute must be applied to the desired constructor (the generator will not automatically choose one), otherwise the generator will emit an error."]}),"\n",(0,t.jsx)(r.li,{children:"If using a parameterized constructor, all parameter names must match corresponding member names (case-insensitive)."}),"\n"]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Person\n{\n    public readonly int Age;\n    public readonly string Name;\n\n    // You can use a parameterized constructor - parameter names must match corresponding members name (case-insensitive)\n    public Person(int age, string name)\n    {\n        this.Age = age;\n        this.Name = name;\n    }\n}\n\n// also supports record primary constructor\n[MemoryPackable]\npublic partial record Person2(int Age, string Name);\n\npublic partial class Person3\n{\n    public int Age { get; set; }\n    public string Name { get; set; }\n\n    public Person3()\n    {\n    }\n\n    // If there are multiple constructors, then [MemoryPackConstructor] should be used\n    [MemoryPackConstructor]\n    public Person3(int age, string name)\n    {\n        this.Age = age;\n        this.Name = name;\n    }\n}\n"})}),(0,t.jsx)(r.h3,{id:"serialization-callbacks",children:"Serialization callbacks"}),(0,t.jsxs)(r.p,{children:["When serializing/deserializing, MemoryPack can invoke a before/after event using the ",(0,t.jsx)(r.code,{children:"[MemoryPackOnSerializing]"}),", ",(0,t.jsx)(r.code,{children:"[MemoryPackOnSerialized]"}),", ",(0,t.jsx)(r.code,{children:"[MemoryPackOnDeserializing]"}),", ",(0,t.jsx)(r.code,{children:"[MemoryPackOnDeserialized]"})," attributes. It can annotate both static and instance (non-static) methods, and public and private methods."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class MethodCallSample\n{\n    // method call order is static -> instance\n    [MemoryPackOnSerializing]\n    public static void OnSerializing1()\n    {\n        Console.WriteLine(nameof(OnSerializing1));\n    }\n\n    // also allows private method\n    [MemoryPackOnSerializing]\n    void OnSerializing2()\n    {\n        Console.WriteLine(nameof(OnSerializing2));\n    }\n\n    // serializing -> /* serialize */ -> serialized\n    [MemoryPackOnSerialized]\n    static void OnSerialized1()\n    {\n        Console.WriteLine(nameof(OnSerialized1));\n    }\n\n    [MemoryPackOnSerialized]\n    public void OnSerialized2()\n    {\n        Console.WriteLine(nameof(OnSerialized2));\n    }\n\n    [MemoryPackOnDeserializing]\n    public static void OnDeserializing1()\n    {\n        Console.WriteLine(nameof(OnDeserializing1));\n    }\n\n    // Note: instance method with MemoryPackOnDeserializing, that not called if instance is not passed by `ref`\n    [MemoryPackOnDeserializing]\n    public void OnDeserializing2()\n    {\n        Console.WriteLine(nameof(OnDeserializing2));\n    }\n\n    [MemoryPackOnDeserialized]\n    public static void OnDeserialized1()\n    {\n        Console.WriteLine(nameof(OnDeserialized1));\n    }\n\n    [MemoryPackOnDeserialized]\n    public void OnDeserialized2()\n    {\n        Console.WriteLine(nameof(OnDeserialized2));\n    }\n}\n"})}),(0,t.jsxs)(r.p,{children:["Callbacks allows parameterless method and ",(0,t.jsx)(r.code,{children:"ref reader/writer, ref T value"})," method. For example, ref callbacks can write/read custom header before serialization process."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class EmitIdData\n{\n    public int MyProperty { get; set; }\n\n    [MemoryPackOnSerializing]\n    static void WriteId<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref EmitIdData? value)\n        where TBufferWriter : IBufferWriter<byte> // .NET Standard 2.1, use where TBufferWriter : class, IBufferWriter<byte>\n    {\n        writer.WriteUnmanaged(Guid.NewGuid()); // emit GUID in header.\n    }\n\n    [MemoryPackOnDeserializing]\n    static void ReadId(ref MemoryPackReader reader, ref EmitIdData? value)\n    {\n        // read custom header before deserialize\n        var guid = reader.ReadUnmanaged<Guid>();\n        Console.WriteLine(guid);\n    }\n}\n"})}),(0,t.jsxs)(r.p,{children:["If set a value to ",(0,t.jsx)(r.code,{children:"ref value"}),", you can change the value used for serialization/deserialization. For example, instantiate from ServiceProvider."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// before using this formatter, set ServiceProvider\n// var options = MemoryPackSerializerOptions.Default with { ServiceProvider = provider };\n// MemoryPackSerializer.Deserialize(value, options);\n\n[MemoryPackable]\npublic partial class InstantiateFromServiceProvider\n{\n    static IServiceProvider serviceProvider = default!;\n\n    public int MyProperty { get; private set; }\n\n    [MemoryPackOnDeserializing]\n    static void OnDeserializing(ref MemoryPackReader reader, ref InstantiateFromServiceProvider value)\n    {\n        if (value != null) return;\n        value = reader.Options.ServiceProvider!.GetRequiredService<InstantiateFromServiceProvider>();\n    }\n}\n"})}),(0,t.jsx)(r.h2,{id:"define-custom-collection",children:"Define custom collection"}),(0,t.jsxs)(r.p,{children:["By default, annotated ",(0,t.jsx)(r.code,{children:"[MemoryPackObject]"})," type try to serialize its members. However, if a type is a collection (",(0,t.jsx)(r.code,{children:"ICollection<>"}),", ",(0,t.jsx)(r.code,{children:"ISet<>"}),", ",(0,t.jsx)(r.code,{children:"IDictionary<,>"}),"), use ",(0,t.jsx)(r.code,{children:"GenerateType.Collection"})," to serialize it correctly."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable(GenerateType.Collection)]\npublic partial class MyList<T> : List<T>\n{\n}\n\n[MemoryPackable(GenerateType.Collection)]\npublic partial class MyStringDictionary<TValue> : Dictionary<string, TValue>\n{\n\n}\n"})}),(0,t.jsx)(r.h2,{id:"polymorphism-union",children:"Polymorphism (Union)"}),(0,t.jsxs)(r.p,{children:["MemoryPack supports serializing interface and abstract class objects for polymorphism serialization. In MemoryPack this feature is called Union. Only interfaces and abstracts classes are allowed to be annotated with ",(0,t.jsx)(r.code,{children:"[MemoryPackUnion]"})," attributes. Unique union tags are required."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// Annotate [MemoryPackable] and inheritance types with [MemoryPackUnion]\n// Union also supports abstract class\n[MemoryPackable]\n[MemoryPackUnion(0, typeof(FooClass))]\n[MemoryPackUnion(1, typeof(BarClass))]\npublic partial interface IUnionSample\n{\n}\n\n[MemoryPackable]\npublic partial class FooClass : IUnionSample\n{\n    public int XYZ { get; set; }\n}\n\n[MemoryPackable]\npublic partial class BarClass : IUnionSample\n{\n    public string? OPQ { get; set; }\n}\n// ---\n\nIUnionSample data = new FooClass() { XYZ = 999 };\n\n// Serialize as interface type.\nvar bin = MemoryPackSerializer.Serialize(data);\n\n// Deserialize as interface type.\nvar reData = MemoryPackSerializer.Deserialize<IUnionSample>(bin);\n\nswitch (reData)\n{\n    case FooClass x:\n        Console.WriteLine(x.XYZ);\n        break;\n    case BarClass x:\n        Console.WriteLine(x.OPQ);\n        break;\n    default:\n        break;\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"tag"})," allows ",(0,t.jsx)(r.code,{children:"0"})," ~ ",(0,t.jsx)(r.code,{children:"65535"}),", it is especially efficient for less than ",(0,t.jsx)(r.code,{children:"250"}),"."]}),(0,t.jsxs)(r.p,{children:["If an interface and derived types are in different assemblies, you can use ",(0,t.jsx)(r.code,{children:"MemoryPackUnionFormatterAttribute"})," instead. Formatters are generated the way that they are automatically registered via ",(0,t.jsx)(r.code,{children:"ModuleInitializer"})," in C# 9.0 and above."]}),(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Note that ",(0,t.jsx)(r.code,{children:"ModuleInitializer"})," is not supported in Unity, so the formatter must be manually registered. To register your union formatter invoke ",(0,t.jsx)(r.code,{children:"{name of your union formatter}Initializer.RegisterFormatter()"})," manually in Startup. For example ",(0,t.jsx)(r.code,{children:"UnionSampleFormatterInitializer.RegisterFormatter()"}),"."]}),"\n"]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// AssemblyA\n[MemoryPackable(GenerateType.NoGenerate)]\npublic partial interface IUnionSample\n{\n}\n\n// AssemblyB define definition outside of target type\n[MemoryPackUnionFormatter(typeof(IUnionSample))]\n[MemoryPackUnion(0, typeof(FooClass))]\n[MemoryPackUnion(1, typeof(BarClass))]\npublic partial class UnionSampleFormatter\n{\n}\n"})}),(0,t.jsxs)(r.p,{children:["Union can be assembled in code via ",(0,t.jsx)(r.code,{children:"DynamicUnionFormatter<T>"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"var formatter = new DynamicUnionFormatter<IFooBarBaz>(new[]\n{\n    (0, typeof(Foo)),\n    (1, typeof(Bar)),\n    (2, typeof(Baz))\n});\n\nMemoryPackFormatterProvider.Register(formatter);\n"})}),(0,t.jsx)(r.h2,{id:"serialize-api",children:"Serialize API"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Serialize"})," has three overloads."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// Non generic API also available, these version is first argument is Type and value is object?\nbyte[] Serialize<T>(in T? value, MemoryPackSerializerOptions? options = default)\nvoid Serialize<T, TBufferWriter>(in TBufferWriter bufferWriter, in T? value, MemoryPackSerializerOptions? options = default)\nasync ValueTask SerializeAsync<T>(Stream stream, T? value, MemoryPackSerializerOptions? options = default, CancellationToken cancellationToken = default)\n"})}),(0,t.jsxs)(r.p,{children:["For performance, the recommended API uses ",(0,t.jsx)(r.code,{children:"BufferWriter"}),". This serializes directly into the buffer. It can be applied to ",(0,t.jsx)(r.code,{children:"PipeWriter"})," in ",(0,t.jsx)(r.code,{children:"System.IO.Pipelines"}),", ",(0,t.jsx)(r.code,{children:"BodyWriter"})," in ASP .NET Core, etc."]}),(0,t.jsxs)(r.p,{children:["If a ",(0,t.jsx)(r.code,{children:"byte[]"})," is required (e.g. ",(0,t.jsx)(r.code,{children:"RedisValue"})," in ",(0,t.jsx)(r.a,{href:"https://github.com/StackExchange/StackExchange.Redis",children:"StackExchange.Redis"}),"), the return ",(0,t.jsx)(r.code,{children:"byte[]"})," API is simple and almost as fast."]}),(0,t.jsxs)(r.p,{children:["Note that ",(0,t.jsx)(r.code,{children:"SerializeAsync"})," for ",(0,t.jsx)(r.code,{children:"Stream"})," is asynchronous only for Flush; it serializes everything once into MemoryPack's internal pool buffer and then writes using ",(0,t.jsx)(r.code,{children:"WriteAsync"}),". Therefore, the ",(0,t.jsx)(r.code,{children:"BufferWriter"})," overload, which separates and controls buffer and flush, is better."]}),(0,t.jsxs)(r.p,{children:["If you want to do a complete streaming write, see the ",(0,t.jsx)(r.a,{href:"#streaming-serialization",children:"Streaming Serialization"})," section."]}),(0,t.jsx)(r.h3,{id:"memorypackserializeroptions",children:"MemoryPackSerializerOptions"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"MemoryPackSerializerOptions"})," configures whether strings are serialized as UTF16 or UTF8. This can be configured by passing ",(0,t.jsx)(r.code,{children:"MemoryPackSerializerOptions.Utf8"})," for UTF8 encoding, ",(0,t.jsx)(r.code,{children:"MemoryPackSerializerOptions.Utf16"})," for UTF16 encoding or ",(0,t.jsx)(r.code,{children:"MemoryPackSerializerOptions.Default"})," which defaults to UTF8. Passing null or using the default parameter results in UTF8 encoding."]}),(0,t.jsx)(r.p,{children:"Since C#'s internal string representation is UTF16, UTF16 performs better. However, the payload tends to be larger; in UTF8, an ASCII string is one byte, while in UTF16 it is two bytes. Because the difference in size of this payload is so large, UTF8 is set by default."}),(0,t.jsx)(r.p,{children:"If the data is non-ASCII (e.g. Japanese, which can be more than 3 bytes, and UTF8 is larger), or if you have to compress it separately, UTF16 may give better results."}),(0,t.jsx)(r.p,{children:"While UTF8 or UTF16 can be selected during serialization, it is not necessary to specify it during deserialization. It will be automatically detected and deserialized normally."}),(0,t.jsxs)(r.p,{children:["Additionaly you can get/set ",(0,t.jsx)(r.code,{children:"IServiceProvider? ServiceProvider { get; init; }"})," from options. It is useful to get DI object(such as ",(0,t.jsx)(r.code,{children:"ILogger<T>"}),") from serialization process(",(0,t.jsx)(r.code,{children:"MemoryPackReader/MemoryPackWriter"})," has .Options property)."]}),(0,t.jsx)(r.h2,{id:"deserialize-api",children:"Deserialize API"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Deserialize"})," has ",(0,t.jsx)(r.code,{children:"ReadOnlySpan<byte>"})," and ",(0,t.jsx)(r.code,{children:"ReadOnlySequence<byte>"}),", ",(0,t.jsx)(r.code,{children:"Stream"})," overload and ",(0,t.jsx)(r.code,{children:"ref"})," support."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"T? Deserialize<T>(ReadOnlySpan<byte> buffer)\nint Deserialize<T>(ReadOnlySpan<byte> buffer, ref T? value)\nT? Deserialize<T>(in ReadOnlySequence<byte> buffer)\nint Deserialize<T>(in ReadOnlySequence<byte> buffer, ref T? value)\nasync ValueTask<T?> DeserializeAsync<T>(Stream stream)\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"ref"})," overload overwrites an existing instance, for details see the ",(0,t.jsx)(r.a,{href:"#overwrite",children:"Overwrite"})," section."]}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"DeserializeAsync(Stream)"})," is not a complete streaming read operation, first it reads into MemoryPack's internal pool up to the end-of-stream, then it deserializes."]}),(0,t.jsxs)(r.p,{children:["If you want to do a complete streaming read operation, see the ",(0,t.jsx)(r.a,{href:"#streaming-serialization",children:"Streaming Serialization"})," section."]}),(0,t.jsx)(r.h2,{id:"overwrite",children:"Overwrite"}),(0,t.jsxs)(r.p,{children:["To reduce allocations, MemoryPack supports deserializing to an existing instance, overwriting it. This can be used with the ",(0,t.jsx)(r.code,{children:"Deserialize(ref T? value)"})," overload."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"var person = new Person();\nvar bin = MemoryPackSerializer.Serialize(person);\n\n// overwrite data to existing instance.\nMemoryPackSerializer.Deserialize(bin, ref person);\n"})}),(0,t.jsx)(r.p,{children:"MemoryPack will attempt to overwrite as much as possible, but if the following conditions do not match, it will create a new instance (as in normal deserialization)."}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"ref value (includes members in object graph) is null, set new instance"}),"\n",(0,t.jsx)(r.li,{children:"only allows parameterless constructor, if parameterized constructor is used, create new instance"}),"\n",(0,t.jsxs)(r.li,{children:["if value is ",(0,t.jsx)(r.code,{children:"T[]"}),", reuse only if the length is the same, otherwise create new instance"]}),"\n",(0,t.jsxs)(r.li,{children:["if value is collection that has ",(0,t.jsx)(r.code,{children:".Clear()"})," method(",(0,t.jsx)(r.code,{children:"List<>"}),", ",(0,t.jsx)(r.code,{children:"Stack<>"}),", ",(0,t.jsx)(r.code,{children:"Queue<>"}),", ",(0,t.jsx)(r.code,{children:"LinkedList<>"}),", ",(0,t.jsx)(r.code,{children:"HashSet<>"}),", ",(0,t.jsx)(r.code,{children:"PriorityQueue<,>"}),", ",(0,t.jsx)(r.code,{children:"ObservableCollection"}),", ",(0,t.jsx)(r.code,{children:"Collection"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentQueue<>"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentStack<>"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentBag<>"}),", ",(0,t.jsx)(r.code,{children:"Dictionary<,>"}),", ",(0,t.jsx)(r.code,{children:"SortedDictionary<,>"}),", ",(0,t.jsx)(r.code,{children:"SortedList<,>"}),", ",(0,t.jsx)(r.code,{children:"ConcurrentDictionary<,>"}),") call Clear() and reuse it, otherwise create new instance"]}),"\n"]}),(0,t.jsx)(r.h2,{id:"version-tolerant",children:"Version tolerant"}),(0,t.jsxs)(r.p,{children:["In default(",(0,t.jsx)(r.code,{children:"GenerateType.Object"}),"), MemoryPack supports limited schema evolution."]}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"unmanaged struct can't be changed anymore"}),"\n",(0,t.jsx)(r.li,{children:"members can be added, but can not be deleted"}),"\n",(0,t.jsx)(r.li,{children:"can change member name"}),"\n",(0,t.jsx)(r.li,{children:"can't change member order"}),"\n",(0,t.jsx)(r.li,{children:"can't change member type"}),"\n"]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class VersionCheck\n{\n    public int Prop1 { get; set; }\n    public long Prop2 { get; set; }\n}\n\n// Add is OK.\n[MemoryPackable]\npublic partial class VersionCheck\n{\n    public int Prop1 { get; set; }\n    public long Prop2 { get; set; }\n    public int? AddedProp { get; set; }\n}\n\n// Remove is NG.\n[MemoryPackable]\npublic partial class VersionCheck\n{\n    // public int Prop1 { get; set; }\n    public long Prop2 { get; set; }\n}\n\n// Change order is NG.\n[MemoryPackable]\npublic partial class VersionCheck\n{\n    public long Prop2 { get; set; }\n    public int Prop1 { get; set; }\n}\n"})}),(0,t.jsx)(r.p,{children:"In use-case, store old data (to file, to redis, etc...) and read to new schema is always ok. In the RPC scenario, schema exists both on the client and the server side, the client must be updated before the server. An updated client has no problem connecting to the old server but an old client can not connect to a new server."}),(0,t.jsxs)(r.p,{children:["The next ",(0,t.jsx)(r.a,{href:"#serialization-info",children:"Serialization info"})," section shows how to check for schema changes, e.g., by CI, to prevent accidents."]}),(0,t.jsxs)(r.p,{children:["When using ",(0,t.jsx)(r.code,{children:"GenerateType.VersionTolerant"}),", it supports full version-tolerant."]}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"unmanaged struct can't change any more"}),"\n",(0,t.jsxs)(r.li,{children:["all members must add ",(0,t.jsx)(r.code,{children:"[MemoryPackOrder]"})," explicitly(except annotate ",(0,t.jsx)(r.code,{children:"SerializeLayout.Sequential"}),")"]}),"\n",(0,t.jsx)(r.li,{children:"members can add, can delete but not reuse order (can use missing order)"}),"\n",(0,t.jsx)(r.li,{children:"can change member name"}),"\n",(0,t.jsx)(r.li,{children:"can't change member order"}),"\n",(0,t.jsx)(r.li,{children:"can't change member type"}),"\n"]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// Ok to serialize/deserialize both \n// VersionTolerantObject1 -> VersionTolerantObject2 and \n// VersionTolerantObject2 -> VersionTolerantObject1\n\n[MemoryPackable(GenerateType.VersionTolerant)]\npublic partial class VersionTolerantObject1\n{\n    [MemoryPackOrder(0)]\n    public int MyProperty0 { get; set; } = default;\n\n    [MemoryPackOrder(1)]\n    public long MyProperty1 { get; set; } = default;\n\n    [MemoryPackOrder(2)]\n    public short MyProperty2 { get; set; } = default;\n}\n\n[MemoryPackable(GenerateType.VersionTolerant)]\npublic partial class VersionTolerantObject2\n{\n    [MemoryPackOrder(0)]\n    public int MyProperty0 { get; set; } = default;\n\n    // deleted\n    //[MemoryPackOrder(1)]\n    //public long MyProperty1 { get; set; } = default;\n\n    [MemoryPackOrder(2)]\n    public short MyProperty2 { get; set; } = default;\n\n    // added\n    [MemoryPackOrder(3)]\n    public short MyProperty3 { get; set; } = default;\n}\n"})}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// If set SerializeLayout.Sequential explicitly, allows automatically order.\n// But it can not remove any member for versoin-tolerant.\n[MemoryPackable(GenerateType.VersionTolerant, SerializeLayout.Sequential)]\npublic partial class VersionTolerantObject3\n{\n    public int MyProperty0 { get; set; } = default;\n    public long MyProperty1 { get; set; } = default;\n    public short MyProperty2 { get; set; } = default;\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"GenerateType.VersionTolerant"})," is slower than ",(0,t.jsx)(r.code,{children:"GenerateType.Object"})," in serializing. Also, the payload size will be slightly larger."]}),(0,t.jsx)(r.h2,{id:"serialization-info",children:"Serialization info"}),(0,t.jsxs)(r.p,{children:["You can check IntelliSense in type what members are serialized. There is an option to write that information to a file at compile time. Set ",(0,t.jsx)(r.code,{children:"MemoryPackGenerator_SerializationInfoOutputDirectory"})," as follows."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'\x3c!-- output memorypack serialization info to directory --\x3e\n<ItemGroup>\n    <CompilerVisibleProperty Include="MemoryPackGenerator_SerializationInfoOutputDirectory" />\n</ItemGroup>\n<PropertyGroup>\n    <MemoryPackGenerator_SerializationInfoOutputDirectory>$(MSBuildProjectDirectory)\\MemoryPackLogs</MemoryPackGenerator_SerializationInfoOutputDirectory>\n</PropertyGroup>\n'})}),(0,t.jsx)(r.p,{children:"The following info is written to the file."}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://user-images.githubusercontent.com/46207/192460684-c2fd8bcb-375e-41dd-9960-58205d5b1b7a.png",alt:"image"})}),(0,t.jsxs)(r.p,{children:["If the type is unmanaged, showed ",(0,t.jsx)(r.code,{children:"unmanaged"})," before type name."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-txt",children:"unmanaged FooStruct\n---\nint x\nint y\n"})}),(0,t.jsx)(r.p,{children:"By checking the differences in this file, dangerous schema changes can be prevented. For example, you may want to use CI to detect the following rules"}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"modify unmanaged type"}),"\n",(0,t.jsx)(r.li,{children:"member order change"}),"\n",(0,t.jsx)(r.li,{children:"member deletion"}),"\n"]}),(0,t.jsx)(r.h2,{id:"circular-reference",children:"Circular Reference"}),(0,t.jsx)(r.p,{children:"MemoryPack also supports circular reference. This allows the tree objects to be serialized as is."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// to enable circular-reference, use GenerateType.CircularReference\n[MemoryPackable(GenerateType.CircularReference)]\npublic partial class Node\n{\n    [MemoryPackOrder(0)]\n    public Node? Parent { get; set; }\n    [MemoryPackOrder(1)]\n    public Node[]? Children { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:["For example, ",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/preserve-references",children:"System.Text.Json preserve-references"})," code will become like here."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'// https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/preserve-references?pivots=dotnet-7-0\nEmployee tyler = new()\n{\n    Name = "Tyler Stein"\n};\n\nEmployee adrian = new()\n{\n    Name = "Adrian King"\n};\n\ntyler.DirectReports = new List<Employee> { adrian };\nadrian.Manager = tyler;\n\nvar bin = MemoryPackSerializer.Serialize(tyler);\nEmployee? tylerDeserialized = MemoryPackSerializer.Deserialize<Employee>(bin);\n\nConsole.WriteLine(tylerDeserialized?.DirectReports?[0].Manager == tylerDeserialized); // true\n\n[MemoryPackable(GenerateType.CircularReference)]\npublic partial class Employee\n{\n    [MemoryPackOrder(0)]\n    public string? Name { get; set; }\n    [MemoryPackOrder(1)]\n    public Employee? Manager { get; set; }\n    [MemoryPackOrder(2)]\n    public List<Employee>? DirectReports { get; set; }\n}\n'})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"GenerateType.CircularReference"})," has the same characteristics as version-tolerant. However, as an additional constraint, only parameterless constructors are allowed. Also, object reference tracking is only done for objects marked with ",(0,t.jsx)(r.code,{children:"GenerateType.CircularReference"}),". If you want to track any other object, wrap it."]}),(0,t.jsx)(r.h2,{id:"customformatter",children:"CustomFormatter"}),(0,t.jsxs)(r.p,{children:["If implements ",(0,t.jsx)(r.code,{children:"MemoryPackCustomFormatterAttribute<T>"})," or ",(0,t.jsx)(r.code,{children:"MemoryPackCustomFormatterAttribute<TFormatter, T>"}),"(more performant, but complex), you can configure to use custom formatter to MemoryPackObject's member."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false, Inherited = false)]\npublic abstract class MemoryPackCustomFormatterAttribute<T> : Attribute\n{\n    public abstract IMemoryPackFormatter<T> GetFormatter();\n}\n"})}),(0,t.jsxs)(r.p,{children:["MemorySharp provides the following formatting attributes: ",(0,t.jsx)(r.code,{children:"Utf8StringFormatterAttribute"}),", ",(0,t.jsx)(r.code,{children:"Utf16StringFormatterAttribute"}),", ",(0,t.jsx)(r.code,{children:"InternStringFormatterAttribute"}),", ",(0,t.jsx)(r.code,{children:"OrdinalIgnoreCaseStringDictionaryFormatterAttribute<TValue>"}),", ",(0,t.jsx)(r.code,{children:"BitPackFormatterAttribute"}),", ",(0,t.jsx)(r.code,{children:"BrotliFormatter"}),", ",(0,t.jsx)(r.code,{children:"BrotliStringFormatter"}),", ",(0,t.jsx)(r.code,{children:"BrotliFormatter<T>"}),", ",(0,t.jsx)(r.code,{children:"MemoryPoolFormatter<T>"}),", ",(0,t.jsx)(r.code,{children:"ReadOnlyMemoryPoolFormatter<T>"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    // serialize this member as UTF16 String, it is performant than UTF8 but in ASCII, size is larger(but non ASCII, sometimes smaller).\n    [Utf16StringFormatter]\n    public string? Text { get; set; }\n\n    // In deserialize, Dictionary is initialized with StringComparer.OrdinalIgnoreCase.\n    [OrdinalIgnoreCaseStringDictionaryFormatter<int>]\n    public Dictionary<string, int>? Ids { get; set; }\n    \n    // In deserialize time, all string is interned(see: String.Intern). If similar values come repeatedly, it saves memory.\n    [InternStringFormatter]\n    public string? Flag { get; set; }\n}\n"})}),(0,t.jsx)(r.p,{children:"In order to configure a set/dictionary's equality comparer, all built-in formatters have a comparer constructor overload. You can easily create custom equality-comparer formatters."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public sealed class OrdinalIgnoreCaseStringDictionaryFormatter<TValue> : MemoryPackCustomFormatterAttribute<Dictionary<string, TValue?>>\n{\n    static readonly DictionaryFormatter<string, TValue?> formatter = new DictionaryFormatter<string, TValue?>(StringComparer.OrdinalIgnoreCase);\n\n    public override IMemoryPackFormatter<Dictionary<string, TValue?>> GetFormatter()\n    {\n        return formatter;\n    }\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"BitPackFormatter"})," compresses ",(0,t.jsx)(r.code,{children:"bool[]"})," types only. ",(0,t.jsx)(r.code,{children:"bool[]"})," is normally serialized as 1 byte per boolean value, however ``BitPackFormatter",(0,t.jsx)(r.code,{children:"serializes"}),"bool[]",(0,t.jsx)(r.code,{children:"like a"}),"BitArray",(0,t.jsx)(r.code,{children:"storing each bool as 1 bit. Using"}),"BitPackFormatter`, 8 bools become 1 byte where they would normally be 8 bytes, resulting in a 8x smaller size."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    public int Id { get; set; }\n\n    [BitPackFormatter]\n    public bool[]? Data { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"BrotliFormatter"})," is for ",(0,t.jsx)(r.code,{children:"byte[]"}),", for example you can compress large payload by Brotli."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    public int Id { get; set; }\n\n    [BrotliFormatter]\n    public byte[]? Payload { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"BrotliStringFormatter"})," is for ",(0,t.jsx)(r.code,{children:"string"}),", serialize compressed string (UTF16) by Brotli."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    public int Id { get; set; }\n\n    [BrotliStringFormatter]\n    public string? LargeText { get; set; }\n}\n"})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"BrotliFormatter<T>"})," is for any type, serialized data compressed by Brotli. If a type is ",(0,t.jsx)(r.code,{children:"byte[]"})," or ",(0,t.jsx)(r.code,{children:"string"}),", you should use ",(0,t.jsx)(r.code,{children:"BrotliFormatter"})," or ",(0,t.jsx)(r.code,{children:"BrotliStringFormatter"})," for performance."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    public int Id { get; set; }\n\n    [BrotliFormatter<ChildType>]\n    public ChildType? Child { get; set; }\n}\n"})}),(0,t.jsx)(r.h2,{id:"deserialize-array-pooling",children:"Deserialize array pooling"}),(0,t.jsxs)(r.p,{children:["In order to deserialize a large array (any ",(0,t.jsx)(r.code,{children:"T"}),"), MemoryPack offers multiple efficient pooling methods. The most effective way is to use the ",(0,t.jsx)(r.a,{href:"#overwrite",children:"#Overwrite"})," function. In particular ",(0,t.jsx)(r.code,{children:"List<T>"})," is always reused."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class ListBytesSample\n{\n    public int Id { get; set; }\n    public List<byte> Payload { get; set; }\n}\n\n// ----\n\n// List<byte> is reused, no allocation in deserialize.\nMemoryPackSerializer.Deserialize<ListBytesSample>(bin, ref reuseObject);\n\n// for efficient operation, you can get Span<T> by CollectionsMarshal\nvar span = CollectionsMarshal.AsSpan(value.Payload);\n"})}),(0,t.jsxs)(r.p,{children:["A convenient way is to deserialize to an ArrayPool at deserialization time. MemoryPack provides ",(0,t.jsx)(r.code,{children:"MemoryPoolFormatter<T>"})," and ",(0,t.jsx)(r.code,{children:"ReadOnlyMemoryPoolFormatter<T>"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class PoolModelSample : IDisposable\n{\n    public int Id { get; }\n\n    [MemoryPoolFormatter<byte>]\n    public Memory<byte> Payload { get; private set; }\n\n    public PoolModelSample(int id, Memory<byte> payload)\n    {\n        Id = id;\n        Payload = payload;\n    }\n\n    // You must write the return code yourself, here is snippet.\n\n    bool usePool;\n\n    [MemoryPackOnDeserialized]\n    void OnDeserialized()\n    {\n        usePool = true;\n    }\n\n    public void Dispose()\n    {\n        if (!usePool) return;\n\n        Return(Payload); Payload = default;\n    }\n\n    static void Return<T>(Memory<T> memory) => Return((ReadOnlyMemory<T>)memory);\n\n    static void Return<T>(ReadOnlyMemory<T> memory)\n    {\n        if (MemoryMarshal.TryGetArray(memory, out var segment) && segment.Array is { Length: > 0 })\n        {\n            ArrayPool<T>.Shared.Return(segment.Array, clearArray: RuntimeHelpers.IsReferenceOrContainsReferences<T>());\n        }\n    }\n}\n\n// ---\n\nusing(var value = MemoryPackSerializer.Deserialize<PoolModelSample>(bin))\n{\n    // do anything...\n}   // return to ArrayPool\n"})}),(0,t.jsx)(r.h2,{id:"performance",children:"Performance"}),(0,t.jsxs)(r.p,{children:["See the my blog post ",(0,t.jsx)(r.a,{href:"https://medium.com/@neuecc/how-to-make-the-fastest-net-serializer-with-net-7-c-11-case-of-memorypack-ad28c0366516",children:"How to make the fastest .NET Serializer with .NET 7 / C# 11, case of MemoryPack"})]}),(0,t.jsx)(r.h2,{id:"payload-size-and-compression",children:"Payload size and compression"}),(0,t.jsx)(r.p,{children:"Payload size depends on the target value; unlike JSON, there are no keys and it is a binary format, so the payload size is likely to be smaller than JSON."}),(0,t.jsx)(r.p,{children:"For those with varint encoding, such as MessagePack and Protobuf, MemoryPack tends to be larger if ints are used a lot (in MemoryPack, ints are always 4 bytes due to fixed size encoding, while MessagePack is 1~5 bytes)."}),(0,t.jsx)(r.p,{children:"float and double are 4 bytes and 8 bytes in MemoryPack, but 5 bytes and 9 bytes in MessagePack. So MemoryPack is smaller, for example, for Vector3 (float, float, float) arrays."}),(0,t.jsx)(r.p,{children:"String is UTF8 by default, which is similar to other serializers, but if the UTF16 option is chosen, it will be of a different nature."}),(0,t.jsx)(r.p,{children:"In any case, if the payload size is large, compression should be considered. LZ4, ZStandard and Brotli are recommended."}),(0,t.jsx)(r.h3,{id:"compression",children:"Compression"}),(0,t.jsxs)(r.p,{children:["MemoryPack provides an efficient helper for ",(0,t.jsx)(r.a,{href:"https://github.com/google/brotli",children:"Brotli"})," compression via ",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.io.compression.brotliencoder",children:"BrotliEncoder"})," and ",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.io.compression.brotlidecoder",children:"BrotliDecoder"}),". MemoryPack's ",(0,t.jsx)(r.code,{children:"BrotliCompressor"})," and ",(0,t.jsx)(r.code,{children:"BrotliDecompressor"})," provide compression/decompression optimized for MemoryPack's internal behavior."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"using MemoryPack.Compression;\n\n// Compression(require using)\nusing var compressor = new BrotliCompressor();\nMemoryPackSerializer.Serialize(compressor, value);\n\n// Get compressed byte[]\nvar compressedBytes = compressor.ToArray();\n\n// Or write to other IBufferWriter<byte>(for example PipeWriter)\ncompressor.CopyTo(response.BodyWriter);\n"})}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"using MemoryPack.Compression;\n\n// Decompression(require using)\nusing var decompressor = new BrotliDecompressor();\n\n// Get decompressed ReadOnlySequence<byte> from ReadOnlySpan<byte> or ReadOnlySequence<byte>\nvar decompressedBuffer = decompressor.Decompress(buffer);\n\nvar value = MemoryPackSerializer.Deserialize<T>(decompressedBuffer);\n"})}),(0,t.jsxs)(r.p,{children:["Both ",(0,t.jsx)(r.code,{children:"BrotliCompressor"})," and ",(0,t.jsx)(r.code,{children:"BrotliDecompressor"})," are struct, it does not allocate memory on heap. Both store compressed or decompressed data in an internal memory pool for Serialize/Deserialize. Therefore, it is necessary to release the memory pooling, don't forget to use ",(0,t.jsx)(r.code,{children:"using"}),"."]}),(0,t.jsx)(r.p,{children:"Compression level is very important. The default is set to quality-1 (CompressionLevel.Fastest), which is different from the .NET default (CompressionLevel.Optimal, quality-4)."}),(0,t.jsxs)(r.p,{children:["Fastest (quality-1) will be close to the speed of ",(0,t.jsx)(r.a,{href:"https://github.com/lz4/lz4",children:"LZ4"}),", but 4 is much slower. This was determined to be critical in the serializer use scenario. Be careful when using the standard ",(0,t.jsx)(r.code,{children:"BrotliStream"})," (quality-4 is the default). In any case, compression/decompression speeds and sizes will result in very different results for different data. Please prepare the data to be handled by your application and test it yourself."]}),(0,t.jsx)(r.p,{children:"Note that there is a several-fold speed penalty between MemoryPack's uncompressed and Brotli's added compression."}),(0,t.jsxs)(r.p,{children:["Brotli is also suppored in a custom formatter. ",(0,t.jsx)(r.code,{children:"BrotliFormatter"})," can compress a specific member."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\npublic partial class Sample\n{\n    public int Id { get; set; }\n\n    [BrotliFormatter]\n    public byte[]? Payload { get; set; }\n}\n"})}),(0,t.jsx)(r.h2,{id:"serialize-external-types",children:"Serialize external types"}),(0,t.jsxs)(r.p,{children:["If you want to serialize external types, you can make a custom formatter and register it to provider, see ",(0,t.jsx)(r.a,{href:"#formatterprovider-api",children:"Formatter/Provider API"})," for details. However, creating a custom formatter is difficult. Therefore, we recommend making a wrapper type. For example, if you want to serialize an external type called ",(0,t.jsx)(r.code,{children:"AnimationCurve"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// Keyframe: (float time, float inTangent, float outTangent, int tangentMode, int weightedMode, float inWeight, float outWeight)\n[MemoryPackable]\npublic readonly partial struct SerializableAnimationCurve\n{\n    [MemoryPackIgnore]\n    public readonly AnimationCurve AnimationCurve;\n\n    [MemoryPackInclude]\n    WrapMode preWrapMode => AnimationCurve.preWrapMode;\n    [MemoryPackInclude]\n    WrapMode postWrapMode => AnimationCurve.postWrapMode;\n    [MemoryPackInclude]\n    Keyframe[] keys => AnimationCurve.keys;\n\n    [MemoryPackConstructor]\n    SerializableAnimationCurve(WrapMode preWrapMode, WrapMode postWrapMode, Keyframe[] keys)\n    {\n        var curve = new AnimationCurve(keys);\n        curve.preWrapMode = preWrapMode;\n        curve.postWrapMode = postWrapMode;\n        this.AnimationCurve = curve;\n    }\n\n    public SerializableAnimationCurve(AnimationCurve animationCurve)\n    {\n        this.AnimationCurve = animationCurve;\n    }\n}\n"})}),(0,t.jsxs)(r.p,{children:["The type to wrap is public, but excluded from serialization (",(0,t.jsx)(r.code,{children:"MemoryPackIgnore"}),"). The properties you want to serialize are private, but included (",(0,t.jsx)(r.code,{children:"MemoryPackInclude"}),"). Two patterns of constructors should also be prepared. The constructor used by the serializer should be private."]}),(0,t.jsx)(r.p,{children:"As it is, it must be wrapped every time, which is inconvenient. And also strcut wrapper can not represents null. So let's create a custom formatter."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public class AnimationCurveFormatter : MemoryPackFormatter<AnimationCurve>\n{\n    // Unity does not support scoped and TBufferWriter so change signature to `Serialize(ref MemoryPackWriter writer, ref AnimationCurve value)`\n    public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref AnimationCurve? value)\n    {\n        if (value == null)\n        {\n            writer.WriteNullObjectHeader();\n            return;\n        }\n\n        writer.WritePackable(new SerializableAnimationCurve(value));\n    }\n\n    public override void Deserialize(ref MemoryPackReader reader, scoped ref AnimationCurve? value)\n    {\n        if (reader.PeekIsNull())\n        {\n            reader.Advance(1); // skip null block\n            value = null;\n            return;\n        }\n        \n        var wrapped = reader.ReadPackable<SerializableAnimationCurve>();\n        value = wrapped.AnimationCurve;\n    }\n}\n"})}),(0,t.jsx)(r.p,{children:"Finally, register the formatter in startup."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"MemoryPackFormatterProvider.Register<AnimationCurve>(new AnimationCurveFormatter());\n"})}),(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Note: Unity's AnimationCurve can serializable by default so does not needs this custom formatter for AnimationCurve"}),"\n"]}),(0,t.jsx)(r.h2,{id:"packages",children:"Packages"}),(0,t.jsx)(r.p,{children:"MemoryPack has these packages."}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"MemoryPack"}),"\n",(0,t.jsx)(r.li,{children:"MemoryPack.Core"}),"\n",(0,t.jsx)(r.li,{children:"MemoryPack.Generator"}),"\n",(0,t.jsx)(r.li,{children:"MemoryPack.Streaming"}),"\n",(0,t.jsx)(r.li,{children:"MemoryPack.AspNetCoreMvcFormatter"}),"\n",(0,t.jsx)(r.li,{children:"MemoryPack.UnityShims"}),"\n"]}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"MemoryPack"})," is the main library, it provides full support for high performance serialization and deserialization of binary objects. It depends on ",(0,t.jsx)(r.code,{children:"MemoryPack.Core"})," for the core base libraries and ",(0,t.jsx)(r.code,{children:"MemoryPack.Generator"})," for code generation. ",(0,t.jsx)(r.code,{children:"MemoryPack.Streaming"})," adds additional extensions for ",(0,t.jsx)(r.a,{href:"#streaming-serialization",children:"Streaming Serialization"}),".  ",(0,t.jsx)(r.code,{children:"MemoryPack.AspNetCoreMvcFormatter"})," adds input/output formatters for ASP.NET Core. ",(0,t.jsx)(r.code,{children:"MemoryPack.UnityShims"})," adds Unity shim types and formatters for share type between .NET and Unity."]}),(0,t.jsx)(r.h2,{id:"typescript-and-aspnet-core-formatter",children:"TypeScript and ASP.NET Core Formatter"}),(0,t.jsx)(r.p,{children:"MemoryPack supports TypeScript code generation. It generates class and serialization code from C#, In other words, you can share types with the Browser without using OpenAPI, proto, etc."}),(0,t.jsxs)(r.p,{children:["Code generation is integrated with Source Generator, the following options(",(0,t.jsx)(r.code,{children:"MemoryPackGenerator_TypeScriptOutputDirectory"}),") set the output directory for TypeScript code. Runtime code is output at the same time, so no additional dependencies are required."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'\x3c!-- output memorypack TypeScript code to directory --\x3e\n<ItemGroup>\n    <CompilerVisibleProperty Include="MemoryPackGenerator_TypeScriptOutputDirectory" />\n</ItemGroup>\n<PropertyGroup>\n    <MemoryPackGenerator_TypeScriptOutputDirectory>$(MSBuildProjectDirectory)\\wwwroot\\js\\memorypack</MemoryPackGenerator_TypeScriptOutputDirectory>\n</PropertyGroup>\n'})}),(0,t.jsxs)(r.p,{children:["A C# MemoryPackable type must be annotated with ",(0,t.jsx)(r.code,{children:"[GenerateTypeScript]"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"[MemoryPackable]\n[GenerateTypeScript]\npublic partial class Person\n{\n    public required Guid Id { get; init; }\n    public required int Age { get; init; }\n    public required string FirstName { get; init; }\n    public required string LastName { get; init; }\n    public required DateTime DateOfBirth { get; init; }\n    public required Gender Gender { get; init; }\n    public required string[] Emails { get; init; }\n}\n\npublic enum Gender\n{\n    Male, Female, Other\n}\n"})}),(0,t.jsx)(r.p,{children:"Runtime code and TypeScript type will be generated in the target directory."}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://user-images.githubusercontent.com/46207/194916544-1b6bb5ed-966b-43c3-a378-3eac297c2b40.png",alt:"image"})}),(0,t.jsx)(r.p,{children:"The generated code is as follows, with simple fields and static methods for serialize/serializeArray and deserialize/deserializeArray."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'import { MemoryPackWriter } from "./MemoryPackWriter.js";\nimport { MemoryPackReader } from "./MemoryPackReader.js";\nimport { Gender } from "./Gender.js"; \n\nexport class Person {\n    id: string;\n    age: number;\n    firstName: string | null;\n    lastName: string | null;\n    dateOfBirth: Date;\n    gender: Gender;\n    emails: (string | null)[] | null;\n\n    constructor() {\n        // snip...\n    }\n\n    static serialize(value: Person | null): Uint8Array {\n        // snip...\n    }\n\n    static serializeCore(writer: MemoryPackWriter, value: Person | null): void {\n        // snip...\n    }\n\n    static serializeArray(value: (Person | null)[] | null): Uint8Array {\n        // snip...\n    }\n\n    static serializeArrayCore(writer: MemoryPackWriter, value: (Person | null)[] | null): void {\n        // snip...\n    }\n    static deserialize(buffer: ArrayBuffer): Person | null {\n        // snip...\n    }\n\n    static deserializeCore(reader: MemoryPackReader): Person | null {\n        // snip...\n    }\n\n    static deserializeArray(buffer: ArrayBuffer): (Person | null)[] | null {\n        // snip...\n    }\n\n    static deserializeArrayCore(reader: MemoryPackReader): (Person | null)[] | null {\n        // snip...\n    }\n}\n'})}),(0,t.jsx)(r.p,{children:"You can use this type like following."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'let person = new Person();\nperson.id = crypto.randomUUID();\nperson.age = 30;\nperson.firstName = "foo";\nperson.lastName = "bar";\nperson.dateOfBirth = new Date(1999, 12, 31, 0, 0, 0);\nperson.gender = Gender.Other;\nperson.emails = ["foo@bar.com", "zoo@bar.net"];\n\n// serialize to Uint8Array\nlet bin = Person.serialize(person);\n\nlet blob = new Blob([bin.buffer], { type: "application/x-memorypack" })\n\nlet response = await fetch("http://localhost:5260/api",\n    { method: "POST", body: blob, headers: { "Content-Type": "application/x-memorypack" } });\n\nlet buffer = await response.arrayBuffer();\n\n// deserialize from ArrayBuffer \nlet person2 = Person.deserialize(buffer);\n'})}),(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"MemoryPack.AspNetCoreMvcFormatter"})," package adds ",(0,t.jsx)(r.code,{children:"MemoryPack"})," input and output formatters for ASP.NET Core MVC. You can add ",(0,t.jsx)(r.code,{children:"MemoryPackInputFormatter"}),", ",(0,t.jsx)(r.code,{children:"MemoryPackOutputFormatter"})," to ASP.NET Core MVC with the following code."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddRazorPages();\n\nbuilder.Services.AddControllers(options =>\n{\n    options.InputFormatters.Insert(0, new MemoryPackInputFormatter());\n    // If checkContentType: true then can output multiple format(JSON/MemoryPack, etc...). default is false.\n    options.OutputFormatters.Insert(0, new MemoryPackOutputFormatter(checkContentType: false));\n});\n"})}),(0,t.jsxs)(r.p,{children:["If you call from HttpClient, you can set ",(0,t.jsx)(r.code,{children:"application/x-memorypack"})," to content-header."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'var content = new ByteArrayContent(bin)\ncontent.Headers.ContentType = new MediaTypeHeaderValue("application/x-memorypack");\n'})}),(0,t.jsx)(r.h3,{id:"typescript-type-mapping",children:"TypeScript Type Mapping"}),(0,t.jsxs)(r.p,{children:["There are a few restrictions on the types that can be generated. Among the primitives, ",(0,t.jsx)(r.code,{children:"char"})," and ",(0,t.jsx)(r.code,{children:"decimal"})," are not supported. Also, OpenGenerics type cannot be used."]}),(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"C#"}),(0,t.jsx)(r.th,{children:"TypeScript"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"bool"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"boolean"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"byte"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"sbyte"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"int"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"uint"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"short"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ushort"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"long"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"bigint"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ulong"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"bigint"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"float"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"double"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"string"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"string | null"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Guid"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"string"})}),(0,t.jsx)(r.td,{children:"In TypeScript, represents as string but serialize/deserialize as 16byte binary"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"DateTime"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Date"})}),(0,t.jsx)(r.td,{children:"DateTimeKind will be ignored"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"enum"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"const enum"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"long"})," and ",(0,t.jsx)(r.code,{children:"ulong"})," underlying type is not supported"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"T?"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"T | null"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"T[]"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"T[] | null"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"byte[]"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Uint8Array | null"})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:": ICollection<T>"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"T[] | null"})}),(0,t.jsxs)(r.td,{children:["Supports all ",(0,t.jsx)(r.code,{children:"ICollection<T>"})," implemented type like ",(0,t.jsx)(r.code,{children:"List<T>"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:": ISet<T>"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Set<T> | null"})}),(0,t.jsxs)(r.td,{children:["Supports all ",(0,t.jsx)(r.code,{children:"ISet<T>"})," implemented type like ",(0,t.jsx)(r.code,{children:"HashSet<T>"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:": IDictionary<K,V>"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Map<K, V> | null"})}),(0,t.jsxs)(r.td,{children:["Supports all ",(0,t.jsx)(r.code,{children:"IDictionary<K,V>"})," implemented type like ",(0,t.jsx)(r.code,{children:"Dictionary<K,V>"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"[MemoryPackable]"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"class"})}),(0,t.jsx)(r.td,{children:"Supports class only"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"[MemoryPackUnion]"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"abstract class"})}),(0,t.jsx)(r.td,{})]})]})]}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"[GenerateTypeScript]"})," can only be applied to classes and is currently not supported by struct."]}),(0,t.jsx)(r.h3,{id:"configure-import-file-extension-and-member-name-casing",children:"Configure import file extension and member name casing"}),(0,t.jsxs)(r.p,{children:["In default, MemoryPack generates file extension as ",(0,t.jsx)(r.code,{children:".js"})," like ",(0,t.jsx)(r.code,{children:'import { MemoryPackWriter } from "./MemoryPackWriter.js";'}),". If you want to change other extension or empty, use ",(0,t.jsx)(r.code,{children:"MemoryPackGenerator_TypeScriptImportExtension"})," to configure it.\nAlso the member name is automatically converted to camelCase. If you want to use original name, use ",(0,t.jsx)(r.code,{children:"MemoryPackGenerator_TypeScriptConvertPropertyName"})," to ",(0,t.jsx)(r.code,{children:"false"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<ItemGroup>\n    <CompilerVisibleProperty Include="MemoryPackGenerator_TypeScriptOutputDirectory" />\n    <CompilerVisibleProperty Include="MemoryPackGenerator_TypeScriptImportExtension" />\n    <CompilerVisibleProperty Include="MemoryPackGenerator_TypeScriptConvertPropertyName" />\n    <CompilerVisibleProperty Include="MemoryPackGenerator_TypeScriptEnableNullableTypes" />\n</ItemGroup>\n<PropertyGroup>\n    <MemoryPackGenerator_TypeScriptOutputDirectory>$(MSBuildProjectDirectory)\\wwwroot\\js\\memorypack</MemoryPackGenerator_TypeScriptOutputDirectory>\n    \x3c!-- allows empty --\x3e\n    <MemoryPackGenerator_TypeScriptImportExtension></MemoryPackGenerator_TypeScriptImportExtension>\n    \x3c!-- default is true --\x3e\n    <MemoryPackGenerator_TypeScriptConvertPropertyName>false</MemoryPackGenerator_TypeScriptConvertPropertyName>\n    \x3c!-- default is false --\x3e\n    <MemoryPackGenerator_TypeScriptEnableNullableTypes>true</MemoryPackGenerator_TypeScriptEnableNullableTypes>\n</PropertyGroup>\n'})}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"MemoryPackGenerator_TypeScriptEnableNullableTypes"})," allows C# nullable annotations to be reflected in TypeScript code. The default is false, making everything nullable."]}),(0,t.jsx)(r.h2,{id:"streaming-serialization",children:"Streaming Serialization"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"MemoryPack.Streaming"})," provides ",(0,t.jsx)(r.code,{children:"MemoryPackStreamingSerializer"}),", which adds additional support for serializing and deserializing collections with streams."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public static class MemoryPackStreamingSerializer\n{\n    public static async ValueTask SerializeAsync<T>(PipeWriter pipeWriter, int count, IEnumerable<T> source, int flushRate = 4096, CancellationToken cancellationToken = default)\n    public static async ValueTask SerializeAsync<T>(Stream stream, int count, IEnumerable<T> source, int flushRate = 4096, CancellationToken cancellationToken = default)\n    public static async IAsyncEnumerable<T?> DeserializeAsync<T>(PipeReader pipeReader, int bufferAtLeast = 4096, int readMinimumSize = 8192, [EnumeratorCancellation] CancellationToken cancellationToken = default)\n    public static IAsyncEnumerable<T?> DeserializeAsync<T>(Stream stream, int bufferAtLeast = 4096, int readMinimumSize = 8192, CancellationToken cancellationToken = default)\n}\n"})}),(0,t.jsx)(r.h2,{id:"formatterprovider-api",children:"Formatter/Provider API"}),(0,t.jsxs)(r.p,{children:["If you want to implement formatter manually, inherit ",(0,t.jsx)(r.code,{children:"MemoryPackFormatter<T>"})," and override the ",(0,t.jsx)(r.code,{children:"Serialize"})," and ",(0,t.jsx)(r.code,{children:"Deserialize"})," methods."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public class SkeltonFormatter : MemoryPackFormatter<Skelton>\n{\n    public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref Skelton? value)\n    {\n        if (value == null)\n        {\n            writer.WriteNullObjectHeader();\n            return;\n        }\n\n        // use writer method.\n    }\n\n    public override void Deserialize(ref MemoryPackReader reader, scoped ref Skelton? value)\n    {\n        if (!reader.TryReadObjectHeader(out var count))\n        {\n            value = null;\n            return;\n        }\n\n        // use reader method.\n    }\n}\n"})}),(0,t.jsxs)(r.p,{children:["The created formatter is registered with ",(0,t.jsx)(r.code,{children:"MemoryPackFormatterProvider"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"MemoryPackFormatterProvider.Register(new SkeltonFormatter());\n"})}),(0,t.jsxs)(r.p,{children:["Note: ",(0,t.jsx)(r.code,{children:"unmanged struct"}),"(doesn't contain reference types) can not use custom formatter, it always serializes native memory layout."]}),(0,t.jsx)(r.h2,{id:"memorypackwriterreaderoptionalstate",children:"MemoryPackWriter/ReaderOptionalState"}),(0,t.jsxs)(r.p,{children:["Initializing ",(0,t.jsx)(r.code,{children:"MemoryPackWriter"}),"/",(0,t.jsx)(r.code,{children:"MemoryPackReader"})," requires OptionalState. It is wrapper of ",(0,t.jsx)(r.code,{children:"MemoryPackSerializerOptions"}),", it can create form ",(0,t.jsx)(r.code,{children:"MemoryPackWriterOptionalStatePool"}),"."]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// when disposed, OptionalState will return to pool.\nusing(var state = MemoryPackWriterOptionalStatePool.Rent(MemoryPackSerializerOptions.Default))\n{\n    var writer = new MemoryPackWriter<T>(ref t, state);\n}\n\n// for Reader\nusing (var state = MemoryPackReaderOptionalStatePool.Rent(MemoryPackSerializerOptions.Default))\n{\n    var reader = new MemoryPackReader(buffer, state);\n}\n"})}),(0,t.jsx)(r.h2,{id:"target-framework-dependency",children:"Target framework dependency"}),(0,t.jsxs)(r.p,{children:["MemoryPack provides ",(0,t.jsx)(r.code,{children:"netstandard2.1"})," and ",(0,t.jsx)(r.code,{children:"net7.0"})," but both are not compatible. For example, MemoryPackable types under ",(0,t.jsx)(r.code,{children:"netstandard2.1"})," project and use it from ",(0,t.jsx)(r.code,{children:"net7.0"})," project, throws runtime exception like this"]}),(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Unhandled exception. System.TypeLoadException: Virtual static method '",(0,t.jsx)(r.em,{children:"' is not implemented on type '"}),"' from assembly '*'."]}),"\n"]}),(0,t.jsxs)(r.p,{children:["Since net7.0 uses static abstract members (",(0,t.jsx)(r.code,{children:"Virtual static method"}),"), that does not support netstandard2.1, this behavior is a specification."]}),(0,t.jsx)(r.p,{children:".NET 7 project shouldn't use the netstandard 2.1 dll. In other words, if the Application is a .NET 7 Project, all the dependencies that use MemoryPack must support .NET 7. So if a library developer has a dependency on MemoryPack, you need to configure dual target framework."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:"<TargetFrameworks>netstandard2.1;net7.0</TargetFrameworks>\n"})}),(0,t.jsx)(r.h2,{id:"rpc",children:"RPC"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MagicOnion",children:"Cysharp/MagicOnion"})," is a code-first grpc-dotnet framework using MessagePack instead of protobuf. MagicOnion now supports MemoryPack as a serialization layer via ",(0,t.jsx)(r.code,{children:"MagicOnion.Serialization.MemoryPack"})," package(preview). See details: ",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MagicOnion#memorypack-support",children:"MagicOnion#MemoryPack support"})]}),(0,t.jsx)(r.h2,{id:"unity",children:"Unity"}),(0,t.jsxs)(r.p,{children:["Install via UPM git URL package or asset package (MemoryPack.",(0,t.jsx)(r.em,{children:"."}),".*.unitypackage) available in ",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack/releases",children:"MemoryPack/releases"})," page."]}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack.git?path=src/MemoryPack.Unity/Assets/Plugins/MemoryPack",children:"https://github.com/Cysharp/MemoryPack.git?path=src/MemoryPack.Unity/Assets/Plugins/MemoryPack"})}),"\n"]}),(0,t.jsxs)(r.p,{children:["If you want to set a target version, MemoryPack uses the ",(0,t.jsx)(r.code,{children:"*.*.*"})," release tag, so you can specify a version like #1.8.0. For example ",(0,t.jsx)(r.code,{children:"https://github.com/Cysharp/MemoryPack.git?path=src/MemoryPack.Unity/Assets/Plugins/MemoryPack#1.8.0"}),"."]}),(0,t.jsxs)(r.p,{children:["Minimum supported Unity version is ",(0,t.jsx)(r.code,{children:"2021.3"}),". The dependency managed DLL ",(0,t.jsx)(r.code,{children:"System.Runtime.CompilerServices.Unsafe/6.0.0"})," is included with unitypackage. For git references, you will need to add them in another way as they are not included to avoid unnecessary dependencies; either extract the dll from unitypackage or download it from the ",(0,t.jsx)(r.a,{href:"https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/6.0.0",children:"NuGet page"}),"."]}),(0,t.jsxs)(r.p,{children:["As with the .NET version, the code is generated by a code generator (",(0,t.jsx)(r.code,{children:"MemoryPack.Generator.Roslyn3.dll"}),"). Reflection-free implementation also provides the best performance in IL2CPP."]}),(0,t.jsxs)(r.p,{children:["For more information on Unity and Source Generator, please refer to the ",(0,t.jsx)(r.a,{href:"https://docs.unity3d.com/Manual/roslyn-analyzers.html",children:"Unity documentation"}),"."]}),(0,t.jsxs)(r.p,{children:["Source Generator is also used officially by Unity by ",(0,t.jsx)(r.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.0/manual/index.html",children:"com.unity.properties"})," and ",(0,t.jsx)(r.a,{href:"https://docs.unity3d.com/Packages/com.unity.properties@2.0/changelog/CHANGELOG.html",children:"com.unity.entities"}),". In other words, it is the standard for code generation in the next generation of Unity."]}),(0,t.jsx)(r.p,{children:"Unity version does not support CustomFormatter and ImmutableCollections."}),(0,t.jsxs)(r.p,{children:["You can serialize all unmanaged types (such as ",(0,t.jsx)(r.code,{children:"Vector3"}),", ",(0,t.jsx)(r.code,{children:"Rect"}),", etc...) and some classes(",(0,t.jsx)(r.code,{children:"AnimationCurve"}),", ",(0,t.jsx)(r.code,{children:"Gradient"}),", ",(0,t.jsx)(r.code,{children:"RectOffset"}),"). If you want to serialize other Unity-specific types, see ",(0,t.jsx)(r.a,{href:"#serialize-external-types",children:"Serialize external types"})," section."]}),(0,t.jsx)(r.p,{children:"In Unity performance, MemoryPack is x3~x10 faster than JsonUtility."}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://user-images.githubusercontent.com/46207/209254561-79ec18fe-c421-4d8c-9c86-b55276dd1a45.png",alt:"image"})}),(0,t.jsx)(r.p,{children:"Unity version's MemoryPack does not compatible with .NET MemoryPack in NuGet so can't do creating netstandard 2.1 dll in .NET and use in Unity. If you want to share type between .NET and Unity, share source-code, for example place source code in Unity directory and .NET project reference by code link."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<ItemGroup>\n  <Compile Include="..\\ChatApp.Unity\\Assets\\Scripts\\ServerShared\\**\\*.cs" />\n</ItemGroup>\n'})}),(0,t.jsxs)(r.p,{children:["If shared code has Unity's type(",(0,t.jsx)(r.code,{children:"Vector2"}),", etc...), MemoryPack provides ",(0,t.jsx)(r.code,{children:"MemoryPack.UnityShims"})," package in NuGet."]}),(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"MemoryPack.UnityShims"})," package provides shims for Unity's standard structs (",(0,t.jsx)(r.code,{children:"Vector2"}),", ",(0,t.jsx)(r.code,{children:"Vector3"}),", ",(0,t.jsx)(r.code,{children:"Vector4"}),", ",(0,t.jsx)(r.code,{children:"Quaternion"}),", ",(0,t.jsx)(r.code,{children:"Color"}),", ",(0,t.jsx)(r.code,{children:"Bounds"}),", ",(0,t.jsx)(r.code,{children:"Rect"}),", ",(0,t.jsx)(r.code,{children:"Keyframe"}),", ",(0,t.jsx)(r.code,{children:"WrapMode"}),", ",(0,t.jsx)(r.code,{children:"Matrix4x4"}),", ",(0,t.jsx)(r.code,{children:"GradientColorKey"}),", ",(0,t.jsx)(r.code,{children:"GradientAlphaKey"}),", ",(0,t.jsx)(r.code,{children:"GradientMode"}),", ",(0,t.jsx)(r.code,{children:"Color32"}),", ",(0,t.jsx)(r.code,{children:"LayerMask"}),", ",(0,t.jsx)(r.code,{children:"Vector2Int"}),", ",(0,t.jsx)(r.code,{children:"Vector3Int"}),", ",(0,t.jsx)(r.code,{children:"RangeInt"}),", ",(0,t.jsx)(r.code,{children:"RectInt"}),", ",(0,t.jsx)(r.code,{children:"BoundsInt"}),") and some classes(",(0,t.jsx)(r.code,{children:"AnimationCurve"}),", ",(0,t.jsx)(r.code,{children:"Gradient"}),", ",(0,t.jsx)(r.code,{children:"RectOffset"}),")."]}),(0,t.jsx)(r.h2,{id:"native-aot",children:"Native AOT"}),(0,t.jsxs)(r.p,{children:["Unfortunately, .NET 7 Native AOT causes crash (",(0,t.jsx)(r.code,{children:"Generic virtual method pointer lookup failure"}),") when use MemoryPack due to a runtime bug. It\nis going to be fixed in .NET 8. Using ``Microsoft.DotNet.ILCompiler` preview version, will fix it in .NET 7. Please see ",(0,t.jsx)(r.a,{href:"https://github.com/Cysharp/MemoryPack/issues/75#issuecomment-1386884611",children:"issue's comment"})," how setup it."]}),(0,t.jsx)(r.h2,{id:"binary-wire-format-specification",children:"Binary wire format specification"}),(0,t.jsxs)(r.p,{children:["The type of ",(0,t.jsx)(r.code,{children:"T"})," defined in ",(0,t.jsx)(r.code,{children:"Serialize<T>"})," and ",(0,t.jsx)(r.code,{children:"Deserialize<T>"})," is called C# schema. MemoryPack format is not self-described format. Deserialize requires the corresponding C# schema. These types exist as internal representations of binaries, but types cannot be determined without a C# schema."]}),(0,t.jsxs)(r.p,{children:["Endian must be ",(0,t.jsx)(r.code,{children:"Little Endian"}),". However, reference C# implementation does not care about endianness so can not use on big-endian machine. However, modern computers are usually little-endian."]}),(0,t.jsx)(r.p,{children:"There are eight types of format."}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Unmanaged struct"}),"\n",(0,t.jsx)(r.li,{children:"Object"}),"\n",(0,t.jsx)(r.li,{children:"Version Tolerant Object"}),"\n",(0,t.jsx)(r.li,{children:"Circular Reference Object"}),"\n",(0,t.jsx)(r.li,{children:"Tuple"}),"\n",(0,t.jsx)(r.li,{children:"Collection"}),"\n",(0,t.jsx)(r.li,{children:"String"}),"\n",(0,t.jsx)(r.li,{children:"Union"}),"\n"]}),(0,t.jsx)(r.h3,{id:"unmanaged-struct",children:"Unmanaged struct"}),(0,t.jsxs)(r.p,{children:["Unmanaged struct is C# struct that doesn't contain reference types, similar constraint of ",(0,t.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/unmanaged-types",children:"C# Unmanaged types"}),". Serializing struct layout as it is, includes padding."]}),(0,t.jsx)(r.h3,{id:"object",children:"Object"}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"(byte memberCount, [values...])"})}),(0,t.jsxs)(r.p,{children:["Object has 1byte unsigned byte as member count in header. Member count allows ",(0,t.jsx)(r.code,{children:"0"})," to ",(0,t.jsx)(r.code,{children:"249"}),", ",(0,t.jsx)(r.code,{children:"255"})," represents object is ",(0,t.jsx)(r.code,{children:"null"}),". Values store memorypack value for the number of member count."]}),(0,t.jsx)(r.h3,{id:"version-tolerant-object",children:"Version Tolerant Object"}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"(byte memberCount, [varint byte-length-of-values...], [values...])"})}),(0,t.jsx)(r.p,{children:"Version Tolerant Object is similar as Object but has byte length of values in header. varint follows these spec, first sbyte is value or typeCode and next X byte is value. 0 to 127 = unsigned byte value, -1 to -120 = signed byte value, -121 = byte, -122 = sbyte, -123 = ushort, -124 = short, -125 = uint, -126 = int, -127 = ulong, -128 = long."}),(0,t.jsx)(r.h3,{id:"circular-reference-object",children:"Circular Reference Object"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"(byte memberCount, [varint byte-length-of-values...], varint referenceId, [values...])"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.code,{children:"(250, varint referenceId)"})]}),(0,t.jsx)(r.p,{children:"Circular Reference Object is similar as Version Tolerant Object but if memberCount is 250, next varint(unsigned-int32) is referenceId. If not, after byte-length-of-values, varint referenceId is written."}),(0,t.jsx)(r.h3,{id:"tuple",children:"Tuple"}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"(values...)"})}),(0,t.jsxs)(r.p,{children:["Tuple is fixed-size, non-nullable value collection. In .NET, ",(0,t.jsx)(r.code,{children:"KeyValuePair<TKey, TValue>"})," and ",(0,t.jsx)(r.code,{children:"ValueTuple<T,...>"})," are serialized as Tuple."]}),(0,t.jsx)(r.h3,{id:"collection",children:"Collection"}),(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"(int length, [values...])"})}),(0,t.jsxs)(r.p,{children:["Collection has 4 byte signed integer as data count in header, ",(0,t.jsx)(r.code,{children:"-1"})," represents ",(0,t.jsx)(r.code,{children:"null"}),". Values store memorypack value for the number of length."]}),(0,t.jsx)(r.h3,{id:"string",children:"String"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"(int utf16-length, utf16-value)"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.code,{children:"(int ~utf8-byte-count, int utf16-length, utf8-bytes)"})]}),(0,t.jsxs)(r.p,{children:["String has two-forms, UTF16 and UTF8. If first 4byte signed integer is ",(0,t.jsx)(r.code,{children:"-1"}),", represents null. ",(0,t.jsx)(r.code,{children:"0"}),", represents empty. UTF16 is same as collection(serialize as ",(0,t.jsx)(r.code,{children:"ReadOnlySpan\\<char\\>"}),", utf16-value's byte count is utf16-length * 2). If first signed integer <= ",(0,t.jsx)(r.code,{children:"-2"}),", value is encoded by UTF8. utf8-byte-count is encoded in complement, ",(0,t.jsx)(r.code,{children:"~utf8-byte-count"})," to retrieve count of bytes. Next signed integer is utf16-length, it allows ",(0,t.jsx)(r.code,{children:"-1"})," that represents unknown length. utf8-bytes store bytes for the number of utf8-byte-count."]}),(0,t.jsx)(r.h3,{id:"union",children:"Union"}),(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"(byte tag, value)"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.code,{children:"(250, ushort tag, value)"})]}),(0,t.jsxs)(r.p,{children:["First unsigned byte is tag that for discriminated value type or flag, ",(0,t.jsx)(r.code,{children:"0"})," to ",(0,t.jsx)(r.code,{children:"249"})," represents tag, ",(0,t.jsx)(r.code,{children:"250"})," represents next unsigned short is tag, ",(0,t.jsx)(r.code,{children:"255"})," represents union is ",(0,t.jsx)(r.code,{children:"null"}),"."]}),(0,t.jsx)(r.h2,{id:"license",children:"License"}),(0,t.jsx)(r.p,{children:"This library is licensed under the MIT License."})]}),"\n",(0,t.jsx)(r.h3,{id:"about",children:"About"}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsx)(r.p,{children:"Efficient serializer"})}),"\n",(0,t.jsx)(r.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,t.jsx)(r.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,t.jsxs)(r.p,{children:["This is the CSharp Project that references ",(0,t.jsx)(r.strong,{children:"MemoryPack"})]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="MemoryPack" Version="1.9.16" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,t.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MemoryPack\\src\\MemoryPackDemo\\Program.cs",label:"Program.cs",children:[(0,t.jsxs)(r.p,{children:["This is the use of ",(0,t.jsx)(r.strong,{children:"MemoryPack"})," in ",(0,t.jsx)(r.em,{children:"Program.cs"})]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'var v = new Person { Age = 53, Name = "Andrei Ignat" };\n\nvar bin = MemoryPackSerializer.Serialize(v);\nvar val = MemoryPackSerializer.Deserialize<Person>(bin);\nConsole.WriteLine(val.Name);\n'})})]}),(0,t.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MemoryPack\\src\\MemoryPackDemo\\Person.cs",label:"Person.cs",children:[(0,t.jsxs)(r.p,{children:["This is the use of ",(0,t.jsx)(r.strong,{children:"MemoryPack"})," in ",(0,t.jsx)(r.em,{children:"Person.cs"})]}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace MemoryPackDemo;\n\n[MemoryPackable]\npublic partial class Person\n{\n    public int Age { get; set; }\n    public string? Name { get; set; }\n}\n\n"})})]})]}),"\n",(0,t.jsx)(r.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,t.jsx)(r.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,t.jsx)(s.A,{children:(0,t.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MemoryPack\\src\\MemoryPackDemo\\obj\\GX\\MemoryPack.Generator\\MemoryPack.Generator.MemoryPackGenerator\\MemoryPackDemo.Person.MemoryPackFormatter.g.cs",label:"MemoryPackDemo.Person.MemoryPackFormatter.g.cs",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\n// <auto-generated/>\n#nullable enable\n#pragma warning disable CS0108 // hides inherited member\n#pragma warning disable CS0162 // Unreachable code\n#pragma warning disable CS0164 // This label has not been referenced\n#pragma warning disable CS0219 // Variable assigned but never used\n#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.\n#pragma warning disable CS8601 // Possible null reference assignment\n#pragma warning disable CS8602\n#pragma warning disable CS8604 // Possible null reference argument for parameter\n#pragma warning disable CS8619\n#pragma warning disable CS8620\n#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method\n#pragma warning disable CS8765 // Nullability of type of parameter\n#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member\n#pragma warning disable CA1050 // Declare types in namespaces.\n\nusing System;\nusing MemoryPack;\n\nnamespace MemoryPackDemo;\n\n/// <remarks>\n/// MemoryPack GenerateType: Object<br/>\n/// <code>\n/// <b>int</b> Age<br/>\n/// <b>string</b> Name<br/>\n/// </code>\n/// </remarks>\npartial class Person : IMemoryPackable<Person>\n{\n\n\n    static Person()\n    {\n        global::MemoryPack.MemoryPackFormatterProvider.Register<Person>();\n    }\n\n    [global::MemoryPack.Internal.Preserve]\n    static void IMemoryPackFormatterRegister.RegisterFormatter()\n    {\n        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<Person>())\n        {\n            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.MemoryPackableFormatter<Person>());\n        }\n        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<Person[]>())\n        {\n            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<Person>());\n        }\n\n    }\n\n    [global::MemoryPack.Internal.Preserve]\n    static void IMemoryPackable<Person>.Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref Person? value) \n    {\n\n        if (value == null)\n        {\n            writer.WriteNullObjectHeader();\n            goto END;\n        }\n\n        writer.WriteUnmanagedWithObjectHeader(2, value.@Age);\n        writer.WriteString(value.@Name);\n\n    END:\n\n        return;\n    }\n\n    [global::MemoryPack.Internal.Preserve]\n    static void IMemoryPackable<Person>.Deserialize(ref MemoryPackReader reader, scoped ref Person? value)\n    {\n\n        if (!reader.TryReadObjectHeader(out var count))\n        {\n            value = default!;\n            goto END;\n        }\n\n\n        \n        int __Age;\n        string __Name;\n\n        \n        if (count == 2)\n        {\n            if (value == null)\n            {\n                reader.ReadUnmanaged(out __Age);\n                __Name = reader.ReadString();\n\n\n                goto NEW;\n            }\n            else\n            {\n                __Age = value.@Age;\n                __Name = value.@Name;\n\n                reader.ReadUnmanaged(out __Age);\n                __Name = reader.ReadString();\n\n                goto SET;\n            }\n\n        }\n        else if (count > 2)\n        {\n            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(Person), 2, count);\n            goto READ_END;\n        }\n        else\n        {\n            if (value == null)\n            {\n               __Age = default!;\n               __Name = default!;\n            }\n            else\n            {\n               __Age = value.@Age;\n               __Name = value.@Name;\n            }\n\n\n            if (count == 0) goto SKIP_READ;\n            reader.ReadUnmanaged(out __Age); if (count == 1) goto SKIP_READ;\n            __Name = reader.ReadString(); if (count == 2) goto SKIP_READ;\n\n    SKIP_READ:\n            if (value == null)\n            {\n                goto NEW;\n            }\n            else            \n            {\n                goto SET;\n            }\n\n        }\n\n    SET:\n        \n        value.@Age = __Age;\n        value.@Name = __Name;\n        goto READ_END;\n\n    NEW:\n        value = new Person()\n        {\n            @Age = __Age,\n            @Name = __Name\n        };\n    READ_END:\n\n    END:\n\n        return;\n    }\n}\n\n"})})})}),"\n",(0,t.jsx)(r.h2,{id:"useful",children:"Useful"}),"\n",(0,t.jsx)(r.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(54206).A+"",children:"Download Example project MemoryPack "})})}),"\n",(0,t.jsx)(r.h3,{id:"share-memorypack",children:"Share MemoryPack"}),"\n",(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMemoryPack&quote=MemoryPack",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMemoryPack&text=MemoryPack:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMemoryPack",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMemoryPack&title=MemoryPack",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMemoryPack&title=MemoryPack&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMemoryPack",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/MemoryPack",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/MemoryPack"})}),"\n",(0,t.jsx)(r.h3,{id:"in-the-same-category-enhancementclass---27-other-generators",children:"In the same category (EnhancementClass) - 27 other generators"}),"\n",(0,t.jsx)(r.h4,{id:"apparatusaot",children:(0,t.jsx)(r.a,{href:"/docs/ApparatusAOT",children:"ApparatusAOT"})}),"\n",(0,t.jsx)(r.h4,{id:"aspectgenerator",children:(0,t.jsx)(r.a,{href:"/docs/AspectGenerator",children:"AspectGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"commoncodegenerator",children:(0,t.jsx)(r.a,{href:"/docs/CommonCodeGenerator",children:"CommonCodeGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"comparison",children:(0,t.jsx)(r.a,{href:"/docs/Comparison",children:"Comparison"})}),"\n",(0,t.jsx)(r.h4,{id:"dudnet",children:(0,t.jsx)(r.a,{href:"/docs/DudNet",children:"DudNet"})}),"\n",(0,t.jsx)(r.h4,{id:"enhancedgettypes",children:(0,t.jsx)(r.a,{href:"/docs/Enhanced.GetTypes",children:"Enhanced.GetTypes"})}),"\n",(0,t.jsx)(r.h4,{id:"fastgenericnew",children:(0,t.jsx)(r.a,{href:"/docs/FastGenericNew",children:"FastGenericNew"})}),"\n",(0,t.jsx)(r.h4,{id:"hsusgsync",children:(0,t.jsx)(r.a,{href:"/docs/HsuSgSync",children:"HsuSgSync"})}),"\n",(0,t.jsx)(r.h4,{id:"immutype",children:(0,t.jsx)(r.a,{href:"/docs/Immutype",children:"Immutype"})}),"\n",(0,t.jsx)(r.h4,{id:"lingaudit",children:(0,t.jsx)(r.a,{href:"/docs/Ling.Audit",children:"Ling.Audit"})}),"\n",(0,t.jsx)(r.h4,{id:"lomboknet",children:(0,t.jsx)(r.a,{href:"/docs/Lombok.NET",children:"Lombok.NET"})}),"\n",(0,t.jsx)(r.h4,{id:"m31fluentapi",children:(0,t.jsx)(r.a,{href:"/docs/M31.FluentAPI",children:"M31.FluentAPI"})}),"\n",(0,t.jsx)(r.h4,{id:"memberaccessor",children:(0,t.jsx)(r.a,{href:"/docs/MemberAccessor",children:"MemberAccessor"})}),"\n",(0,t.jsx)(r.h4,{id:"meziantoupolyfill",children:(0,t.jsx)(r.a,{href:"/docs/Meziantou.Polyfill",children:"Meziantou.Polyfill"})}),"\n",(0,t.jsx)(r.h4,{id:"microsoftextensionslogging",children:(0,t.jsx)(r.a,{href:"/docs/Microsoft.Extensions.Logging",children:"Microsoft.Extensions.Logging"})}),"\n",(0,t.jsx)(r.h4,{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",children:(0,t.jsx)(r.a,{href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",children:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"microsoftinteropjavascriptjsimportgenerator",children:(0,t.jsx)(r.a,{href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator",children:"Microsoft.Interop.JavaScript.JSImportGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"optiontostringgenerator",children:(0,t.jsx)(r.a,{href:"/docs/OptionToStringGenerator",children:"OptionToStringGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"querystringgenerator",children:(0,t.jsx)(r.a,{href:"/docs/QueryStringGenerator",children:"QueryStringGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"rscg_decorator",children:(0,t.jsx)(r.a,{href:"/docs/RSCG_Decorator",children:"RSCG_Decorator"})}),"\n",(0,t.jsx)(r.h4,{id:"rscg_utilitytypes",children:(0,t.jsx)(r.a,{href:"/docs/RSCG_UtilityTypes",children:"RSCG_UtilityTypes"})}),"\n",(0,t.jsx)(r.h4,{id:"staticreflection",children:(0,t.jsx)(r.a,{href:"/docs/StaticReflection",children:"StaticReflection"})}),"\n",(0,t.jsx)(r.h4,{id:"syncmethodgenerator",children:(0,t.jsx)(r.a,{href:"/docs/SyncMethodGenerator",children:"SyncMethodGenerator"})}),"\n",(0,t.jsx)(r.h4,{id:"systemruntimeinteropservices",children:(0,t.jsx)(r.a,{href:"/docs/System.Runtime.InteropServices",children:"System.Runtime.InteropServices"})}),"\n",(0,t.jsx)(r.h4,{id:"systemtextregularexpressions",children:(0,t.jsx)(r.a,{href:"/docs/System.Text.RegularExpressions",children:"System.Text.RegularExpressions"})}),"\n",(0,t.jsx)(r.h4,{id:"telemetrylogging",children:(0,t.jsx)(r.a,{href:"/docs/TelemetryLogging",children:"TelemetryLogging"})}),"\n",(0,t.jsx)(r.h4,{id:"thisclass",children:(0,t.jsx)(r.a,{href:"/docs/ThisClass",children:"ThisClass"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},54206:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/files/MemoryPack-64031a0c680acec6827daa7bd8505fb8.zip"}}]);