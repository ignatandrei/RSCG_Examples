"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7343],{57631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"RSCG-Examples/Breezy","title":"39 - Breezy","description":"ORM Mapper","source":"@site/docs/RSCG-Examples/Breezy.md","sourceDirName":"RSCG-Examples","slug":"/Breezy","permalink":"/RSCG_Examples/v2/docs/Breezy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Breezy.md","tags":[],"version":"current","sidebarPosition":390,"frontMatter":{"sidebar_position":390,"title":"39 - Breezy","description":"ORM Mapper","slug":"/Breezy"},"sidebar":"tutorialSidebar","previous":{"title":"38 - EnumClass","permalink":"/RSCG_Examples/v2/docs/EnumClass"},"next":{"title":"40 - FastGenericNew","permalink":"/RSCG_Examples/v2/docs/FastGenericNew"}}');var r=t(74848),s=t(28453),i=t(11470),l=t(19365),o=t(14252);const c={sidebar_position:390,title:"39 - Breezy",description:"ORM Mapper",slug:"/Breezy"},d="Breezy  by Ludovicdln",u={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"Nugget Package : https://www.nuget.org/packages/Breezy.SourceGenerator/",id:"nugget-package--httpswwwnugetorgpackagesbreezysourcegenerator",level:5},{value:"Getting Started",id:"getting-started",level:2},{value:"Mapping Objects with Relations (N to N || 1 to N)",id:"mapping-objects-with-relations-n-to-n--1-to-n",level:2},{value:"Vs Dapper",id:"vs-dapper",level:4},{value:"Mapping Objects with Reference Type(s)",id:"mapping-objects-with-reference-types",level:2},{value:"Querying with Anonymous Types",id:"querying-with-anonymous-types",level:2},{value:"Caching for Performance Optimization",id:"caching-for-performance-optimization",level:2},{value:"Execute a Command that return result",id:"execute-a-command-that-return-result",level:2},{value:"Execute a Command that return results with Transaction",id:"execute-a-command-that-return-results-with-transaction",level:2},{value:"Performance ~ 10k rows",id:"performance--10k-rows",level:2},{value:"Why Breezy ?",id:"why-breezy-",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Breezy",id:"share-breezy",level:3},{value:"In the same category (Database) - 4 other generators",id:"in-the-same-category-database---4-other-generators",level:3},{value:"Dapper.AOT",id:"dapperaot",level:4},{value:"EntityLengths.Generator",id:"entitylengthsgenerator",level:4},{value:"Gedaq",id:"gedaq",level:4},{value:"TableStorage",id:"tablestorage",level:4}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"breezy--by-ludovicdln",children:"Breezy  by Ludovicdln"})}),"\n",(0,r.jsx)(o.A,{toc:h}),"\n",(0,r.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Breezy.SourceGenerator/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Breezy.SourceGenerator?label=Breezy.SourceGenerator",alt:"Nuget"})}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/Ludovicdln/Breezy",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/Ludovicdln/Breezy?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(n.img,{src:"https://img.shields.io/github/stars/Ludovicdln/Breezy?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["Name: ",(0,r.jsx)(n.strong,{children:"Breezy"})]}),(0,r.jsx)(n.p,{children:"Breezy is a lightweight Object-Relational Mapping (ORM) library for mapping objects using Source Generator in C#.It provides seamless asynchronous operations for enhanced performance."}),(0,r.jsx)(n.p,{children:"Author: Ludovicdln"}),(0,r.jsxs)(n.p,{children:["NuGet:\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Breezy.SourceGenerator/",children:"https://www.nuget.org/packages/Breezy.SourceGenerator/"})})]}),(0,r.jsxs)(n.p,{children:["You can find more details at ",(0,r.jsx)(n.a,{href:"https://github.com/Ludovicdln/Breezy",children:"https://github.com/Ludovicdln/Breezy"})]}),(0,r.jsxs)(n.p,{children:["Source: ",(0,r.jsx)(n.a,{href:"https://github.com/Ludovicdln/Breezy",children:"https://github.com/Ludovicdln/Breezy"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)("div",{children:(0,r.jsx)("img",{src:"https://zupimages.net/up/23/23/na2b.png",width:"900",height:"300"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Breezy.SourceGenerator//1.0.1",children:(0,r.jsx)(n.img,{src:"https://buildstats.info/nuget/Breezy.SourceGenerator/",alt:"NuGet Badge"})}),"\n",(0,r.jsx)(n.a,{href:"https://opensource.org/licenses/MIT",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"})})]}),(0,r.jsxs)(n.p,{children:["Breezy is a lightweight Object-Relational Mapping ",(0,r.jsx)("b",{children:"(ORM)"})," library for mapping objects using ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview",children:(0,r.jsx)(n.code,{children:"Source Generator"})})," in C#. ",(0,r.jsx)("br",{}),"It provides seamless asynchronous operations for enhanced performance."]}),(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),(0,r.jsxs)(n.h5,{id:"nugget-package--httpswwwnugetorgpackagesbreezysourcegenerator",children:["Nugget Package : ",(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Breezy.SourceGenerator/",children:"https://www.nuget.org/packages/Breezy.SourceGenerator/"})]}),(0,r.jsx)(n.p,{children:"To install Breezy, simply add the package reference to your project using NuGet Package Manager or by adding the following line to your .csproj file:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<ItemGroup>\n<PackageReference Include="Breezy.SourceGenerator" Version="1.0.1" />\n</ItemGroup>\n'})}),(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),(0,r.jsx)(n.p,{children:"Breezy simplifies the mapping of objects and performing database operations. Here's a simple example of querying houses using Breezy's asynchronous operations :"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public static async Task<IEnumerable<House>> QueryAsync<T>(this DbConnection connection, string sql, object param, ICacheableQuery<House> cacheableQuery, CancellationToken cancellationToken = default) where T : House\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Breezy;\n\nvar houses = await connection.QueryAsync<House>("SELECT * FROM house");\n'})}),(0,r.jsx)(n.p,{children:"In the above example, the QueryAsync method executes the provided SQL query and maps the results to a list of House objects asynchronously."}),(0,r.jsx)(n.h2,{id:"mapping-objects-with-relations-n-to-n--1-to-n",children:"Mapping Objects with Relations (N to N || 1 to N)"}),(0,r.jsx)(n.p,{children:"Breezy supports mapping objects with relationships. Here's an example of querying posts with tags using Breezy's asynchronous operations :"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Breezy;\n\nvar posts = await connection.QueryAsync<Post>(\n    @"SELECT * FROM test.post p INNER JOIN posts_tags pt ON p.id = pt.post_id INNER JOIN tag t ON t.id = pt.tag_id");\n'})}),(0,r.jsx)(n.p,{children:"The QueryAsync method executes the provided SQL query and maps the results to a list of Post objects. The Post class is defined as follows :"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[Table("post")]\n[SplitOn(3, 4)]\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Body { get; set; }\n    public List<Tag> Tags { get; set; } = new();\n}\n\n[Table("tag")]\npublic class Tag\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public List<Post> Posts { get; set; } = new();\n}\n'})}),(0,r.jsxs)(n.p,{children:["In the Post class, the ",(0,r.jsx)("b",{children:"Table attribute"})," specifies the table name, and the ",(0,r.jsx)("b",{children:"SplitOn attribute"})," indicates the column indices to split when mapping the object from the database."]}),(0,r.jsx)("i",{children:"Circular reference doesn't throw exception ! "}),(0,r.jsx)(n.h4,{id:"vs-dapper",children:"Vs Dapper"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var sql = @"SELECT p.id, p.title, p.body, t.id, t.name\n                FROM post p \n                INNER JOIN posts_tags pt ON pt.post_id = p.id\n                INNER JOIN tag t ON t.id = pt.tag_id";\n\t\t\t\t\n    var posts = await connection.QueryAsync<Post, Tag, Post>(sql, (post, tag) => {      \n        post.Tags.Add(tag);\n        return post;\n    }, splitOn: "id");\n\t\n    var result = posts.GroupBy(p => p.PostId).Select(g =>\n    {\n        var groupedPost = g.First();\n        groupedPost.Tags = g.Select(p => p.Tags.Single()).ToList();\n        return groupedPost;\n    });\n    \n   // Dapper is less user friendly for theses using case\n'})}),(0,r.jsx)(n.h2,{id:"mapping-objects-with-reference-types",children:"Mapping Objects with Reference Type(s)"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class UserReference\n{\n    public int Id { get; set; }\n    public Position Position { get; set; }\n}\n\npublic sealed class Position\n{\n    public string ZipCode { get; set; }\n    public string City { get; set; }\n    public string Address { get; set; }\n}\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var users = await connection.QueryAsync<UserReference>("SELECT u.id, u.zip_code, u.city, u.address FROM user_ref u");\n'})}),(0,r.jsx)(n.p,{children:"The QueryAsync method executes the SQL query and automatically maps the result columns to the corresponding properties of the UserReference entity, including the reference type Position."}),(0,r.jsx)(n.h2,{id:"querying-with-anonymous-types",children:"Querying with Anonymous Types"}),(0,r.jsx)(n.p,{children:"Breezy allows you to query using anonymous types as parameters. Here's an example :"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var houses = await connection.QueryAsync<House>("SELECT * FROM house h WHERE h.id = @Id", new {Id = 1});\n'})}),(0,r.jsxs)(n.p,{children:["The anonymous type is used to pass the ",(0,r.jsx)("b",{children:"Id"})," parameter."]}),(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"IMPORTANT :"}),"\nMake sure that the column index in the SQL query match the property index in any class for the mapping to work correctly.\n",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"You need to add any relations at the end of you main object !"})]}),"\n"]}),(0,r.jsx)(n.h2,{id:"caching-for-performance-optimization",children:"Caching for Performance Optimization"}),(0,r.jsx)(n.p,{children:"Breezy supports implementing caching mechanisms, such as in-memory or distributed caching, to reduce the memory footprint and improve query execution time. You can implement your own caching strategy based on your specific requirements."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface ICacheableQuery<T> where T : class\n{\n\tpublic Task<IEnumerable<T>> GetCacheableResultsAsync(IdentityQuery identityQuery);\n\t\n\tpublic Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable<T> results);\n}\t\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Check if the query result is already cached\n\nvar identityQuery = new IdentityQuery(sql);\n\nvar cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery);\n\nif (cacheableResults.Any())\n    return cacheableResults;\n    \n// Execute the query    \n\nvar results = new List<T>();\n\nwhile (await reader.ReadAsync(cancellationToken).ConfigureAwait(false)) \n{ \n    // processing...\n}\n\n// Cache the query result for X ms/s\n\nawait cacheableQuery.SetCacheableResultsAsync(identityQuery, results);\n"})}),(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"Example of implementation (Memory Cache)"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public sealed class MemoryCacheableQuery<T> : ICacheableQuery<T> where T : class\n{\n    private readonly Dictionary<IdentityQuery, Tuple<DateTime, IEnumerable<T>>> _cacheableData = new();\n    \n    public Task<IEnumerable<T>> GetCacheableResultsAsync(IdentityQuery identityQuery)\n    {\n        if (_cacheableData.TryGetValue(identityQuery, out var results))\n        {\n            var (addDate, collection) = results;\n\n            if ((DateTime.Now - addDate) < TimeSpan.FromSeconds(10))\n                return Task.FromResult<IEnumerable<T>>(collection);\n\n            _cacheableData.Remove(identityQuery);\n        }\n\n        return Task.FromResult<IEnumerable<T>>(Array.Empty<T>());\n    }\n\n    public Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable<T> results)\n    {\n        _cacheableData.Add(identityQuery, new Tuple<DateTime, IEnumerable<T>>(DateTime.Now, results));\n\n        return Task.CompletedTask;\n    }\n}\n"})})]}),(0,r.jsx)(n.h2,{id:"execute-a-command-that-return-result",children:"Execute a Command that return result"}),(0,r.jsx)(n.p,{children:"Breezy provides the ExecuteAsync method for executing SQL statements that can return results. Here's an example of using ExecuteAsync to insert data into a table and retrieve the last inserted ID:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public static async Task<int> ExecuteAsync(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var lastId = await connection.ExecuteAsync("INSERT INTO myTable (x, y) VALUES (x, y); SELECT LAST_INSERT_ID();");\n'})}),(0,r.jsx)(n.h2,{id:"execute-a-command-that-return-results-with-transaction",children:"Execute a Command that return results with Transaction"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public static async Task<int[]> ExecuteAsync(this DbConnection connection, string[] sql, DbTransaction transaction, CancellationToken cancellationToken = default)\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var dbTransaction = await _mySqlConnection.BeginTransactionAsync();\n\nvar results = await connection.ExecuteAsync(new [] { "INSERT INTO myTable (x, y) VALUES (x, y); SELECT LAST_INSERT_ID();" }, { /* ... */ }, dbTransaction);\n'})}),(0,r.jsx)(n.h2,{id:"performance--10k-rows",children:"Performance ~ 10k rows"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19044.2965/21H2/November2021Update)\nAMD Ryzen 5 3500X, 1 CPU, 6 logical and 6 physical cores\n.NET SDK=8.0.100-preview.2.23157.25\n[Host]     : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\nDefaultJob : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n"})}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"ORM"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Return"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Mean"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"StdDev"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Gen0"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Gen1"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Gen2"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Allocated"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Breezy"}),(0,r.jsx)(n.td,{children:"QueryAsync<T>"}),(0,r.jsx)(n.td,{children:"No relation"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"491.1 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"4.08 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.0801"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"672 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Dapper"}),(0,r.jsx)(n.td,{children:"QueryAsync<T>"}),(0,r.jsx)(n.td,{children:"No relation"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"14,005,807.3 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"85,785.13 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"437.5000"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"265.6250"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"125.0000"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"3899691 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Breezy"}),(0,r.jsx)(n.td,{children:"QueryFirstOrDefault<T>"}),(0,r.jsx)(n.td,{children:"No relation"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"589.8 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"7.28 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.0935"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"784 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Dapper"}),(0,r.jsx)(n.td,{children:"QueryFirstOrDefault<T>"}),(0,r.jsx)(n.td,{children:"No relation"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"540,714.1 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"44,717.07 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.9766"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"13081 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Breezy"}),(0,r.jsx)(n.td,{children:"QueryAsync<T>"}),(0,r.jsx)(n.td,{children:"1 To N relations"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"588.5 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"9.26 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.0801"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"672 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Dapper"}),(0,r.jsx)(n.td,{children:"QueryAsync<T>"}),(0,r.jsx)(n.td,{children:"1 To N relations"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"98,695,865.6 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"740,908.87 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"2000.0000"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"833.3333"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"500.0000"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"17760052 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Breezy"}),(0,r.jsx)(n.td,{children:"QueryFirstOrDefault<T>"}),(0,r.jsx)(n.td,{children:"1 To N relations"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"690.7 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"13.41 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.0935"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"784 B"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Dapper"}),(0,r.jsx)(n.td,{children:"QueryFirstOrDefault<T>"}),(0,r.jsx)(n.td,{children:"1 To N relations"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"14,866,187.7 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"385,888.24 ns"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"-"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"30835 B"})]})]})]}),(0,r.jsx)(n.h2,{id:"why-breezy-",children:"Why Breezy ?"}),(0,r.jsxs)(n.p,{children:["I wanted to offer similary fonctionalities faster than ",(0,r.jsx)(n.a,{href:"https://github.com/DapperLib/Dapper",children:(0,r.jsx)(n.code,{children:"Dapper"})})," with source generator"]})]}),"\n",(0,r.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"ORM Mapper"})}),"\n",(0,r.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(n.strong,{children:"Breezy"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="Breezy.SourceGenerator" Version="1.0.1"  OutputItemType="Analyzer" ReferenceOutputAssembly="false" />\n\t  <PackageReference Include="Microsoft.Data.SqlClient" Version="5.1.1" />\n\t</ItemGroup>\n</Project>\n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Breezy"})," in ",(0,r.jsx)(n.em,{children:"Program.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing var connection = new SqlConnection();\n//in the order of the properties in Person.cs\nvar persons = await connection.QueryAsync<Person>("SELECT Id,firstname, lastname FROM person");\n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\Person.cs",label:"Person.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Breezy"})," in ",(0,r.jsx)(n.em,{children:"Person.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'namespace BreezyDemo;\n\n[Table("person")]//this is Breezy.Table\npublic class Person\n{\n    public int ID { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\globals.cs",label:"globals.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Breezy"})," in ",(0,r.jsx)(n.em,{children:"globals.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"global using Breezy;\nglobal using Microsoft.Data.SqlClient;\nglobal using BreezyDemo;\n\n"})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\DbConnectionExtensions.g.cs",label:"DbConnectionExtensions.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated /> \nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace DbConnectionExtensions\n{\n    public static class DbConnectionExtensions\n    {\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int> ExecuteAsync(this DbConnection connection, string sql, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            try\n            {\n                return await command.ExecuteNonQueryAsync(cancellationToken);\n            }\n            finally\n            {\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int> ExecuteAsync(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            foreach (var property in param.GetType().GetProperties())\n            {\n                var parameter = command.CreateParameter();\n                parameter.ParameterName = "@" + property.Name;\n                parameter.Value = property.GetValue(param);\n                command.Parameters.Add(parameter);\n            }\n\n            try\n            {\n                return await command.ExecuteNonQueryAsync(cancellationToken);\n            }\n            finally\n            {\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "transaction">The transaction to use for this query.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int[]> ExecuteAsync(this DbConnection connection, string[] sql, DbTransaction transaction, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            var commands = new DbCommand[sql.Length];\n            for (var i = 0; i < sql.Length; i++)\n            {\n                await using var command = connection.CreateCommand();\n                command.CommandText = sql[i];\n                command.Transaction = transaction;\n                commands[i] = command;\n            }\n\n            try\n            {\n                var results = new int[sql.Length];\n                for (var i = 0; i < commands.Length; i++)\n                    results[i] = await commands[i].ExecuteNonQueryAsync(cancellationToken);\n                await transaction.CommitAsync();\n                return results;\n            }\n            catch (DbException e)\n            {\n                await transaction.RollbackAsync();\n                return Array.Empty<int>();\n            }\n            finally\n            {\n                transaction.Dispose();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a command asynchronously using Task.\n        /// </summary>       \n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "transaction">The transaction to use for this query.</param>\n        /// <returns>The number of rows affected.</returns>\n        public static async Task<int[]> ExecuteAsync(this DbConnection connection, string[] sql, object[] param, DbTransaction transaction, CancellationToken cancellationToken = default)\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            var commands = new DbCommand[sql.Length];\n            for (var i = 0; i < sql.Length; i++)\n            {\n                await using var command = connection.CreateCommand();\n                command.CommandText = sql[i];\n                command.Transaction = transaction;\n                var paramt = param[i];\n                foreach (var property in paramt.GetType().GetProperties())\n                {\n                    var parameter = command.CreateParameter();\n                    parameter.ParameterName = "@" + property.Name;\n                    parameter.Value = property.GetValue(paramt);\n                    command.Parameters.Add(parameter);\n                }\n\n                commands[i] = command;\n            }\n\n            try\n            {\n                var results = new int[sql.Length];\n                for (var i = 0; i < commands.Length; i++)\n                    results[i] = await commands[i].ExecuteNonQueryAsync(cancellationToken);\n                await transaction.CommitAsync();\n                return results;\n            }\n            catch (DbException e)\n            {\n                await transaction.RollbackAsync();\n                return Array.Empty<int>();\n            }\n            finally\n            {\n                transaction.Dispose();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n    }\n}\n'})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\ICacheableQuery.g.cs",label:"ICacheableQuery.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated />\nusing System;\n\nnamespace Breezy;\n\npublic interface ICacheableQuery<T> where T : class\n{\n\tpublic Task<IEnumerable<T>> GetCacheableResultsAsync(IdentityQuery identityQuery);\n\tpublic Task SetCacheableResultsAsync(IdentityQuery identityQuery, IEnumerable<T> results);\n}\t\n"})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\IdentityQuery.g.cs",label:"IdentityQuery.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\t\t// <auto-generated />\n\t\tusing System;\n\n\t\tnamespace Breezy;\n\n\t\tpublic class IdentityQuery : IEquatable<IdentityQuery>        \n        {\n            private readonly int _hashCodeSql;\n            private readonly int? _hashCodeParam;\n            public IdentityQuery(string sql, object? param = null) => (_hashCodeSql, _hashCodeParam) = (sql.GetHashCode(), param?.GetHashCode());\n            public bool Equals(IdentityQuery? other)\n            {\n                if (ReferenceEquals(other, this)) return true;\n                return this.GetHashCode() == other?.GetHashCode();\n            }\n            public override string ToString() \n                => $"{_hashCodeSql.ToString()}-{_hashCodeParam?.ToString()}";\n            public override bool Equals(object? obj)      \n                => Equals(obj as IdentityQuery);          \n            public override int GetHashCode()         \n                => HashCode.Combine(_hashCodeSql, _hashCodeParam);    \n        }   \n'})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\PersonExtensions.g.cs",label:"PersonExtensions.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated /> \nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace BreezyDemo\n{\n    public static class PersonExtensions\n    {\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            foreach (var property in param.GetType().GetProperties())\n            {\n                var parameter = command.CreateParameter();\n                parameter.ParameterName = "@" + property.Name;\n                parameter.Value = property.GetValue(param);\n                command.Parameters.Add(parameter);\n            }\n\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            var identityQuery = new IdentityQuery(sql);\n            var cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery);\n            if (cacheableResults.Any())\n                return cacheableResults;\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                await cacheableQuery.SetCacheableResultsAsync(identityQuery, persons.Values);\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of results to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<IEnumerable<Person>> QueryAsync<T>(this DbConnection connection, string sql, object param, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            bool wasClosed = connection.State == ConnectionState.Closed;\n            if (wasClosed)\n                await connection.OpenAsync(cancellationToken);\n            await using var command = connection.CreateCommand();\n            command.CommandText = sql;\n            foreach (var property in param.GetType().GetProperties())\n            {\n                var parameter = command.CreateParameter();\n                parameter.ParameterName = "@" + property.Name;\n                parameter.Value = property.GetValue(param);\n                command.Parameters.Add(parameter);\n            }\n\n            var identityQuery = new IdentityQuery(sql);\n            var cacheableResults = await cacheableQuery.GetCacheableResultsAsync(identityQuery);\n            if (cacheableResults.Any())\n                return cacheableResults;\n            await using var reader = await command.ExecuteReaderAsync(cancellationToken: cancellationToken);\n            var persons = new Dictionary<int, Person>();\n            try\n            {\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    Person person = null;\n                    var person1Id = reader.IsDBNull(0) ? default : reader.GetInt32(0);\n                    if (!persons.TryGetValue(person1Id, out person))\n                    {\n                        person = new Person()\n                        {\n                            ID = person1Id,\n                            FirstName = reader.IsDBNull(1) ? default : reader.GetString(1),\n                            LastName = reader.IsDBNull(2) ? default : reader.GetString(2),\n                        };\n                        persons.Add(person1Id, person);\n                    }\n                }\n\n                await cacheableQuery.SetCacheableResultsAsync(identityQuery, persons.Values);\n                return persons.Values;\n            }\n            finally\n            {\n                reader.Close();\n                if (wasClosed)\n                    connection.Close();\n            }\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, cancellationToken)).FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, object param, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, param, cancellationToken)).FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, cacheableQuery, cancellationToken)).FirstOrDefault();\n        }\n\n        /// <summary>\n        /// Execute a single-row query asynchronously using Task.\n        /// </summary>\n        /// <typeparam name = "T">The type of result to return.</typeparam>\n        /// <param name = "sql">The SQL to execute for the query.</param>\n        /// <param name = "param">The parameters to pass, if any.</param>\n        /// <param name = "cacheableQuery">The cache that you need to impl, if you want to be faster.</param>\n        /// <param name = "cancellationToken">The cancellation token for this command.</param>\n        /// <returns>\n        /// A first sequence of data of <typeparamref name = "T"/>;\n        /// </returns>\n        public static async Task<Person?> QueryFirstOrDefaultAsync<T>(this DbConnection connection, string sql, object param, ICacheableQuery<Person> cacheableQuery, CancellationToken cancellationToken = default)\n            where T : Person\n        {\n            return (await connection.QueryAsync<Person>(sql, param, cacheableQuery, cancellationToken)).FirstOrDefault();\n        }\n    }\n}\n'})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\SplitOnAttribute.g.cs",label:"SplitOnAttribute.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated />\nusing System;\n\nnamespace Breezy;\n\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\npublic sealed class SplitOnAttribute : Attribute\n{\n\tpublic int[] Index { get; init; }\n\n\tpublic SplitOnAttribute(params int[] index) => Index = index ?? throw new ArgumentNullException("index not defined"); \n}\n'})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Breezy\\src\\BreezyDemo\\obj\\GX\\Breezy\\Breezy.BreezyGenerator\\TableAttribute.g.cs",label:"TableAttribute.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated />\nusing System;\n\nnamespace Breezy;\n\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\npublic sealed class TableAttribute : Attribute\n{\n\tpublic string Name { get; init; }\n\n\tpublic TableAttribute(string name) => Name = name ?? throw new ArgumentNullException(name); \n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(98353).A+"",children:"Download Example project Breezy "})})}),"\n",(0,r.jsx)(n.h3,{id:"share-breezy",children:"Share Breezy"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&quote=Breezy",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&text=Breezy:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&title=Breezy",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy&title=Breezy&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBreezy",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Breezy",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Breezy"})}),"\n",(0,r.jsx)(n.h3,{id:"in-the-same-category-database---4-other-generators",children:"In the same category (Database) - 4 other generators"}),"\n",(0,r.jsx)(n.h4,{id:"dapperaot",children:(0,r.jsx)(n.a,{href:"/docs/Dapper.AOT",children:"Dapper.AOT"})}),"\n",(0,r.jsx)(n.h4,{id:"entitylengthsgenerator",children:(0,r.jsx)(n.a,{href:"/docs/EntityLengths.Generator",children:"EntityLengths.Generator"})}),"\n",(0,r.jsx)(n.h4,{id:"gedaq",children:(0,r.jsx)(n.a,{href:"/docs/Gedaq",children:"Gedaq"})}),"\n",(0,r.jsx)(n.h4,{id:"tablestorage",children:(0,r.jsx)(n.a,{href:"/docs/TableStorage",children:"TableStorage"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},98353:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/files/Breezy-2c5174f1f27def0dd9528b8ea9eb6c81.zip"}}]);