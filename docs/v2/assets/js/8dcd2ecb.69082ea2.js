"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4127],{74349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>m});var a=n(87462),i=(n(67294),n(3905)),r=n(73992),s=n(18679),l=n(68839);const o={sidebar_position:1880,title:"188 - StepwiseBuilderGenerator",description:"Generating Builder- as steps",slug:"/StepwiseBuilderGenerator"},p="StepwiseBuilderGenerator  by Georgiy Petrov",d={unversionedId:"RSCG-Examples/StepwiseBuilderGenerator",id:"RSCG-Examples/StepwiseBuilderGenerator",title:"188 - StepwiseBuilderGenerator",description:"Generating Builder- as steps",source:"@site/docs/RSCG-Examples/StepwiseBuilderGenerator.md",sourceDirName:"RSCG-Examples",slug:"/StepwiseBuilderGenerator",permalink:"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator",draft:!1,tags:[],version:"current",sidebarPosition:1880,frontMatter:{sidebar_position:1880,title:"188 - StepwiseBuilderGenerator",description:"Generating Builder- as steps",slug:"/StepwiseBuilderGenerator"},sidebar:"tutorialSidebar",previous:{title:"187 - EntityLengths.Generator",permalink:"/RSCG_Examples/v2/docs/EntityLengths.Generator"},next:{title:"189 - MemberAccessor",permalink:"/RSCG_Examples/v2/docs/MemberAccessor"}},u={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share StepwiseBuilderGenerator",id:"share-stepwisebuildergenerator",level:3},{value:"In the same category (Builder) - 4 other generators",id:"in-the-same-category-builder---4-other-generators",level:3},{value:"Architect.DomainModeling",id:"architectdomainmodeling",level:4},{value:"BuilderGenerator",id:"buildergenerator",level:4},{value:"Fluentify",id:"fluentify",level:4},{value:"Hsu.Sg.FluentMember",id:"hsusgfluentmember",level:4}],c={toc:m},h="wrapper";function g(e){let{components:t,...o}=e;return(0,i.kt)(h,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stepwisebuildergenerator--by-georgiy-petrov"},"StepwiseBuilderGenerator  by Georgiy Petrov"),(0,i.kt)(l.Z,{toc:m,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/StepwiseBuilderGenerator/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/StepwiseBuilderGenerator?label=StepwiseBuilderGenerator",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/Georgiy-Petrov/StepwiseBuilderGenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/Georgiy-Petrov/StepwiseBuilderGenerator?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"StepwiseBuilderGenerator")),(0,i.kt)("p",{parentName:"admonition"},"This package provides a Source Generator that creates strongly-typed, stepwise \u201cfluent\u201d builders for your types. You simply annotate a class with ","[StepwiseBuilder]"," and specify the steps you need in the class\u2019s parameterless constructor. The source generator then produces a partial class containing builder interfaces and step methods."),(0,i.kt)("p",{parentName:"admonition"},"Author: Georgiy Petrov"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/StepwiseBuilderGenerator/"},"https://www.nuget.org/packages/StepwiseBuilderGenerator/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator"},"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator")),(0,i.kt)("p",{parentName:"admonition"},"Source: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator"},"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h1",{parentName:"admonition",id:"stepwise-builder-generator"},"Stepwise Builder Generator"),(0,i.kt)("p",{parentName:"admonition"},"This repository provides a ",(0,i.kt)("strong",{parentName:"p"},"Source Generator")," that creates strongly-typed, stepwise \u201cfluent\u201d builders for your types.\nYou simply annotate a class with ",(0,i.kt)("inlineCode",{parentName:"p"},"[StepwiseBuilder]")," and specify the steps you need in the class\u2019s parameterless\nconstructor. The source generator then produces a partial class containing builder interfaces and step methods."),(0,i.kt)("h2",{parentName:"admonition",id:"why-use-stepwise-builders"},"Why Use Stepwise Builders?"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Compile-time safety"),": Each required step is enforced in sequence."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reduced boilerplate"),": No need to handwrite repetitive builder chains."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Readable & maintainable"),": Clean, fluent APIs that guide users step-by-step.")),(0,i.kt)("h2",{parentName:"admonition",id:"how-it-works"},"How It Works"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Annotate a class with ",(0,i.kt)("inlineCode",{parentName:"strong"},"[StepwiseBuilder]"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Inside the parameterless constructor"),", create a chain of methods using ",(0,i.kt)("inlineCode",{parentName:"li"},"GenerateStepwiseBuilder()"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddStep<TArgument>(stepName, fieldName = null)")),": adds a step to capture a value of type ",(0,i.kt)("inlineCode",{parentName:"li"},"TArgument"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},'BranchFrom("BaseBuilderName", "BaseBuilderStep")'))," (optional): indicates an alternate path is offered from the\nstep ",(0,i.kt)("strong",{parentName:"li"},"before")," ",(0,i.kt)("inlineCode",{parentName:"li"},"BaseBuilderStep")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"BaseBuilderName"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CreateBuilderFor<TResult>()")),": defines the final target type being built.")))),(0,i.kt)("p",{parentName:"admonition"},"When you compile, the generator inspects these calls and automatically produces:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"A partial builder class")," that implements interfaces representing each step."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"A chain of interfaces")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"IYourClassFirstStep"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"IYourClassSecondStep"),", \u2026) to enforce the order of steps."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"An optional extension method")," if you used ",(0,i.kt)("inlineCode",{parentName:"li"},"BranchFrom(...)"),", allowing you to jump to a new step at the point *\n*before** a specified step in another builder\u2019s chain.")),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("h2",{parentName:"admonition",id:"quick-start-example"},"Quick Start Example"),(0,i.kt)("h3",{parentName:"admonition",id:"1-create-a-class--decorate-with-stepwisebuilder"},"1. Create a Class & Decorate with ",(0,i.kt)("inlineCode",{parentName:"h3"},"[StepwiseBuilder]")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using StepwiseBuilderGenerator;\n\n[StepwiseBuilder]\npublic partial class MyClass\n{\n    public MyClass() // Parameterless constructor\n    {\n        GenerateStepwiseBuilder()\n            .AddStep<int>("FirstStep", "MyIntField")\n            .AddStep<string>("SecondStep")  // defaults to "SecondStepValue"\n            .AddStep<bool>("ThirdStep")     // further step\n            .CreateBuilderFor<MyTargetType>();\n    }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"When you build your project, the generator produces ",(0,i.kt)("inlineCode",{parentName:"p"},"MyClass.g.cs")," in the same namespace, containing:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"IMyClassFirstStep"))," with ",(0,i.kt)("inlineCode",{parentName:"li"},".FirstStep(int value)"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"IMyClassSecondStep"))," with ",(0,i.kt)("inlineCode",{parentName:"li"},".SecondStep(string value)"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"IMyClassThirdStep"))," with ",(0,i.kt)("inlineCode",{parentName:"li"},".ThirdStep(bool value)"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"IMyClassBuild"))," with ",(0,i.kt)("inlineCode",{parentName:"li"},".Build(Func<MyClass, MyTargetType> buildFunc)"),"."),(0,i.kt)("li",{parentName:"ol"},"A ",(0,i.kt)("strong",{parentName:"li"},"partial ",(0,i.kt)("inlineCode",{parentName:"strong"},"MyClass"))," that implements all the above interfaces, storing step values in fields\nlike ",(0,i.kt)("inlineCode",{parentName:"li"},"public int MyIntField;"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"public string SecondStepValue;"),", etc.")),(0,i.kt)("h3",{parentName:"admonition",id:"2-using-the-generated-builder"},"2. Using the Generated Builder"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var builder = new MyClass();\n\nMyTargetType result = builder\n    .FirstStep(42)\n    .SecondStep("Hello")\n    .ThirdStep(true)\n    .Build(instance =>\n    {\n        return new MyTargetType\n        {\n            SomeIntProperty = instance.MyIntField,\n            SomeStringProperty = instance.SecondStepValue,\n            SomeBoolProperty = instance.ThirdStepValue\n        };\n    });\n')),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("strong",{parentName:"p"},"stepwise")," nature ensures you can\u2019t skip or reorder steps; they must be called in the generated sequence."),(0,i.kt)("h3",{parentName:"admonition",id:"3-branching-from-another-builder"},"3. Branching from Another Builder"),(0,i.kt)("p",{parentName:"admonition"},"Suppose we want an alternative path that branches ",(0,i.kt)("strong",{parentName:"p"},"before")," ",(0,i.kt)("inlineCode",{parentName:"p"},"SecondStep"),". Here\u2019s our original chain in ",(0,i.kt)("inlineCode",{parentName:"p"},"MyClass"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"FirstStep -> SecondStep -> ThirdStep -> Build\n")),(0,i.kt)("p",{parentName:"admonition"},"By writing:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[StepwiseBuilder]\npublic partial class MyOtherClass\n{\n    public MyOtherClass()\n    {\n        GenerateStepwiseBuilder()\n            .BranchFrom("MyClass", "SecondStep")  // offer a path from BEFORE \'SecondStep\'\n            .AddStep<bool>("AlternateStep")\n            .CreateBuilderFor<AnotherType>();\n    }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"We get:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"partial ",(0,i.kt)("inlineCode",{parentName:"strong"},"MyOtherClass"))," with steps for ",(0,i.kt)("inlineCode",{parentName:"li"},".AlternateStep(...)"),"."),(0,i.kt)("li",{parentName:"ul"},"An ",(0,i.kt)("strong",{parentName:"li"},"extension method")," so that ",(0,i.kt)("strong",{parentName:"li"},"right after")," ",(0,i.kt)("inlineCode",{parentName:"li"},"FirstStep(...)")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"MyClass"),", you can ",(0,i.kt)("strong",{parentName:"li"},"choose")," either to\ngo ",(0,i.kt)("inlineCode",{parentName:"li"},".SecondStep(...) -> ThirdStep(...) -> Build")," ",(0,i.kt)("strong",{parentName:"li"},"or")," ",(0,i.kt)("inlineCode",{parentName:"li"},".AlternateStep(...) -> Build"),"."),(0,i.kt)("li",{parentName:"ul"},"Because it\u2019s a ",(0,i.kt)("strong",{parentName:"li"},"separate path"),", once you choose ",(0,i.kt)("inlineCode",{parentName:"li"},".AlternateStep(...)"),", you ",(0,i.kt)("strong",{parentName:"li"},"cannot")," call ",(0,i.kt)("inlineCode",{parentName:"li"},".ThirdStep(...)"),".")),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("h2",{parentName:"admonition",id:"faq"},"FAQ"),(0,i.kt)("h3",{parentName:"admonition",id:"1-what-if-i-have-generics-in-my-class"},"1. What if I have generics in my class?"),(0,i.kt)("p",{parentName:"admonition"},"The generator handles generic type parameters by including them in the generated partial class and interfaces."),(0,i.kt)("h3",{parentName:"admonition",id:"2-what-if-i-have-a-branch-in-a-generic-class"},"2. What if I have a ",(0,i.kt)("strong",{parentName:"h3"},"branch")," in a ",(0,i.kt)("strong",{parentName:"h3"},"generic")," class?"),(0,i.kt)("p",{parentName:"admonition"},"If you have a branch (",(0,i.kt)("inlineCode",{parentName:"p"},"BranchFrom(...)"),"), the ",(0,i.kt)("strong",{parentName:"p"},"branching class")," should have a ",(0,i.kt)("strong",{parentName:"p"},"matching generic signature")," (names,\nconstraints, etc.) so the extension methods can properly link the two builders."),(0,i.kt)("h3",{parentName:"admonition",id:"3-can-i-add-custom-logic-to-steps"},"3. Can I add custom logic to steps?"),(0,i.kt)("p",{parentName:"admonition"},"Yes. Because the generated class is ",(0,i.kt)("inlineCode",{parentName:"p"},"partial"),", you can add your own partial methods or fields. Steps themselves are\nautomatically generated as chainable methods."),(0,i.kt)("h3",{parentName:"admonition",id:"4-what-happens-if-i-omit-a-steps-fieldname-parameter"},"4. What happens if I omit a step\u2019s ",(0,i.kt)("inlineCode",{parentName:"h3"},"fieldName")," parameter?"),(0,i.kt)("p",{parentName:"admonition"},"The generator will default to naming that field as ",(0,i.kt)("inlineCode",{parentName:"p"},'"{StepName}Value"'),". For example, if your step\nis ",(0,i.kt)("inlineCode",{parentName:"p"},'.AddStep<int>("Foo")'),", the field becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"public int FooValue;"),"."),(0,i.kt)("h3",{parentName:"admonition",id:"5-should-i-always-write-the-build-logic-in-build"},"5. Should I always write the build logic in ",(0,i.kt)("inlineCode",{parentName:"h3"},".Build(...)"),"?"),(0,i.kt)("p",{parentName:"admonition"},"Not necessarily. It\u2019s often beneficial to ",(0,i.kt)("strong",{parentName:"p"},"keep the ",(0,i.kt)("inlineCode",{parentName:"strong"},".Build(...)")," method minimal")," and place common or advanced build\nlogic in ",(0,i.kt)("strong",{parentName:"p"},"extension methods"),". For instance, suppose your generated interface is ",(0,i.kt)("inlineCode",{parentName:"p"},"IMyClassBuild"),"; you can do:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class MyClassBuilderExtensions\n{\n    // This extension method extends the build interface directly\n    public static MyTargetType BuildMyTarget(this IMyClassBuild builder)\n    {\n        // Here, we call the underlying Build method, passing in your creation logic.\n        // You have direct access via the 'myClass' parameter in the delegate.\n        return builder.Build(myClass => \n        {\n            return new MyTargetType\n            {\n                SomeIntProperty    = myClass.MyIntField,\n                SomeStringProperty = myClass.SecondStepValue,\n                SomeBoolProperty   = myClass.ThirdStepValue\n            };\n        });\n    }\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"Then in user code, you simply do:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var result = new MyClass()\n    .FirstStep(42)\n    .SecondStep("Hello")\n    .ThirdStep(true)\n    .BuildMyTarget();\n')),(0,i.kt)("p",{parentName:"admonition"},"This keeps your builder usage consistent while consolidating object-creation details elsewhere."),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("h2",{parentName:"admonition",id:"steps-enum"},"Steps Enum"),(0,i.kt)("p",{parentName:"admonition"},"Each generated builder class includes ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"enum Steps"))," listing all steps (excluding the final ",(0,i.kt)("inlineCode",{parentName:"p"},"Build"),") in the order they\nwere declared. You might use this for logging, debugging, or reflection-based logic if desired."),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("h2",{parentName:"admonition",id:"factory-methods-in-stepwisebuilders"},"Factory Methods in StepwiseBuilders"),(0,i.kt)("p",{parentName:"admonition"},"For each generated base builder, the generator also provides a ",(0,i.kt)("strong",{parentName:"p"},"static factory method")," within the ",(0,i.kt)("inlineCode",{parentName:"p"},"StepwiseBuilders")," partial class. These methods allow you to conveniently initialize a builder without directly instantiating the generated partial class."),(0,i.kt)("hr",{parentName:"admonition"})),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Generating Builder- as steps ")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"StepwiseBuilderGenerator")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {15}",showLineNumbers:!0,"{15}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n      <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n      <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n      <ItemGroup>\n        <PackageReference Include="StepwiseBuilderGenerator" Version="1.0.3" />\n      </ItemGroup>\n\n      \n     \n\n</Project>\n\n'))),(0,i.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StepwiseBuilderGenerator\\src\\Builder\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"StepwiseBuilderGenerator")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Builder;\n\nvar pOld = new Person();\npOld.MiddleName = "G";\nvar pNew= pOld\n    .SetFirstNameBld("Andrei")\n    .SetLastNameBuilder("Ignat")\n    .Age(55)\n    .Build(it=>it)\n    ;\n  \n//var build = new PersonBuilder()\n//    .WithFirstName(pOld.FirstName)\n//    //.WithMiddleName("") // it is not into the constructor\n//    .WithLastName(pOld.LastName)\n//    ;\n    \n//var pNew = build.Build();\nSystem.Console.WriteLine(pNew.FullName());\nSystem.Console.WriteLine(pOld.FullName());\n\n'))),(0,i.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StepwiseBuilderGenerator\\src\\Builder\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"StepwiseBuilderGenerator")," in ",(0,i.kt)("em",{parentName:"p"},"Person.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using StepwiseBuilderGenerator;\nusing System;\n\nnamespace Builder;\n[StepwiseBuilder]\npublic partial class Person\n{\n    public Person()\n    {\n        new GenerateStepwiseBuilder()\n           .AddStep<string>("SetFirstNameBld", "FirstName")\n           .AddStep<string>("SetLastNameBuilder", "LastName")\n           .AddStep<int>("Age")  \n           .CreateBuilderFor<Person>();\n    }\n    //public Person(string firstName, string lastName)\n    //{\n    //    FirstName = firstName;\n    //    LastName = lastName;\n    //}\n    //public string FirstName { get; set; }\n    public string? MiddleName { get; set; }\n    //public string LastName { get; set; }\n\n    public string FullName()\n    {\n        return FirstName + " " + MiddleName + " "+LastName;\n    }\n    \n}\n\n')))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StepwiseBuilderGenerator\\src\\Builder\\obj\\GX\\StepwiseBuilderGenerator\\StepwiseBuilderGenerator.StepwiseBuilderGenerator\\Person.g.cs",label:"Person.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using StepwiseBuilderGenerator;\nusing System;\n\nnamespace Builder;\npublic interface IPersonSetFirstNameBld \n{\n    IPersonSetLastNameBuilder SetFirstNameBld(string value);\n}\npublic interface IPersonSetLastNameBuilder \n{\n    IPersonAge SetLastNameBuilder(string value);\n}\npublic interface IPersonAge \n{\n    IPersonBuild Age(int value);\n}\npublic interface IPersonBuild \n{\n    Person Build(Func<Person, Person> buildFunc);\n}\npublic partial class Person : IPersonSetFirstNameBld,IPersonSetLastNameBuilder,IPersonAge,IPersonBuild \n{    public string FirstName;\n    public string LastName;\n    public int AgeValue;\n\n    public IPersonSetLastNameBuilder SetFirstNameBld(string value)\n    {\n        FirstName = value;\n        return this;\n    }\n    public IPersonAge SetLastNameBuilder(string value)\n    {\n        LastName = value;\n        return this;\n    }\n    public IPersonBuild Age(int value)\n    {\n        AgeValue = value;\n        return this;\n    }\n    public Person Build(Func<Person, Person> buildFunc)\n    {\n        return buildFunc(this);\n    }\n\n    public enum Steps\n    {\n        SetFirstNameBld,\n        SetLastNameBuilder,\n        Age,\n    }\n}\npublic static partial class StepwiseBuilders\n{\n    public static IPersonSetFirstNameBld Person() \n    {\n         return new Person();\n    }\n}\n\n")))),(0,i.kt)("h2",{id:"useful"},"Useful"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:n(74134).Z},"Download Example project StepwiseBuilderGenerator "))),(0,i.kt)("h3",{id:"share-stepwisebuildergenerator"},"Share StepwiseBuilderGenerator"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&quote=StepwiseBuilderGenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&text=StepwiseBuilderGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&title=StepwiseBuilderGenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&title=StepwiseBuilderGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StepwiseBuilderGenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StepwiseBuilderGenerator")),(0,i.kt)("h3",{id:"in-the-same-category-builder---4-other-generators"},"In the same category (Builder) - 4 other generators"),(0,i.kt)("h4",{id:"architectdomainmodeling"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Architect.DomainModeling"},"Architect.DomainModeling")),(0,i.kt)("h4",{id:"buildergenerator"},(0,i.kt)("a",{parentName:"h4",href:"/docs/BuilderGenerator"},"BuilderGenerator")),(0,i.kt)("h4",{id:"fluentify"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Fluentify"},"Fluentify")),(0,i.kt)("h4",{id:"hsusgfluentmember"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Hsu.Sg.FluentMember"},"Hsu.Sg.FluentMember")))}g.isMDXComponent=!0},74134:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/StepwiseBuilderGenerator-73bfe027fc978387b0dfa7507e9c1cd0.zip"}}]);