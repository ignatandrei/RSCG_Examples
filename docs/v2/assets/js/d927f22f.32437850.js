"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3907],{24871:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/files/SuperFluid-e7035ab949294269015eabfab2cf2782.zip"},94517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>h,default:()=>x,frontMatter:()=>d,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"RSCG-Examples/SuperFluid","title":"199 - SuperFluid","description":"Generate a state machine from a yaml file","source":"@site/docs/RSCG-Examples/SuperFluid.md","sourceDirName":"RSCG-Examples","slug":"/SuperFluid","permalink":"/RSCG_Examples/v2/docs/SuperFluid","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1990,"frontMatter":{"sidebar_position":1990,"title":"199 - SuperFluid","description":"Generate a state machine from a yaml file","slug":"/SuperFluid"},"sidebar":"tutorialSidebar","previous":{"title":"198 - DimonSmart.BuilderGenerator","permalink":"/RSCG_Examples/v2/docs/DimonSmart.BuilderGenerator"},"next":{"title":"200 - Figgle","permalink":"/RSCG_Examples/v2/docs/Figgle"}}');var r=n(74848),a=n(28453),l=n(11470),s=n(19365),u=n(14252);function o(e){const t={a:"a",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"category-statemachine-has-the-following-generators",children:'Category "StateMachine" has the following generators:'}),"\n",(0,r.jsxs)(t.p,{children:["1 ",(0,r.jsx)(t.a,{href:"/docs/SuperFluid",children:"SuperFluid"})]}),"\n",(0,r.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"/docs/Categories/StateMachine",children:"StateMachine"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}const d={sidebar_position:1990,title:"199 - SuperFluid",description:"Generate a state machine from a yaml file",slug:"/SuperFluid"},h="SuperFluid  by James Hughes",p={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"Defining Your Grammar",id:"defining-your-grammar",level:2},{value:"Registering Your Grammar File with SuperFluid",id:"registering-your-grammar-file-with-superfluid",level:2},{value:"Implementing Your API",id:"implementing-your-api",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use-1",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share SuperFluid",id:"share-superfluid",level:3},{value:"Category &quot;StateMachine&quot; has the following generators:",id:"category-statemachine-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function g(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"superfluid--by-james-hughes",children:"SuperFluid  by James Hughes"})}),"\n",(0,r.jsx)(u.A,{toc:m}),"\n",(0,r.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/SuperFluid/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/SuperFluid?label=SuperFluid",alt:"Nuget"})}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/SuperFluid",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/hughesjs/SuperFluid?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/github/stars/hughesjs/SuperFluid?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["Name: ",(0,r.jsx)(t.strong,{children:"SuperFluid"})]}),(0,r.jsx)(t.p,{children:"An incremental source generator for fluent APIs with grammar"}),(0,r.jsx)(t.p,{children:"Author: James Hughes"}),(0,r.jsxs)(t.p,{children:["NuGet:\n",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/SuperFluid/",children:"https://www.nuget.org/packages/SuperFluid/"})})]}),(0,r.jsxs)(t.p,{children:["You can find more details at ",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/SuperFluid",children:"https://github.com/hughesjs/SuperFluid"})]}),(0,r.jsxs)(t.p,{children:["Source: ",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/SuperFluid",children:"https://github.com/hughesjs/SuperFluid"})]})]}),"\n",(0,r.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/SuperFluid/actions",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/actions/workflow/status/hughesjs/SuperFluid/dotnet-ci.yml?label=BUILD%20CI&style=for-the-badge&branch=master",alt:"GitHub Workflow Status CI"})}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/SuperFluid/actions",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/actions/workflow/status/hughesjs/SuperFluid/dotnet-cd.yml?label=BUILD%20CD&style=for-the-badge&branch=master",alt:"GitHub Workflow Status CD"})}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/github/languages/top/hughesjs/SuperFluid?style=for-the-badge",alt:"GitHub top language"}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/SuperFluid/LICENSE",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/license/hughesjs/SuperFluid?style=for-the-badge",alt:"GitHub"})}),"\n",(0,r.jsx)(t.a,{href:"https://nuget.org/packages/SuperFluid/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/vpre/SuperFluid?style=for-the-badge",alt:"Nuget (with prereleases)"})}),"\n",(0,r.jsx)(t.a,{href:"https://nuget.org/packages/SuperFluid/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/SuperFluid?style=for-the-badge",alt:"Nuget"})}),"\n",(0,r.jsx)(t.img,{src:"https://raw.githubusercontent.com/hughesjs/custom-badges/master/made-in/made-in-scotland.svg",alt:"FTB"})]}),(0,r.jsx)(t.hr,{}),(0,r.jsx)(t.h1,{id:"superfluid",children:"SuperFluid"}),(0,r.jsx)(t.p,{children:"A C# library for generating fluent APIs with grammar."}),(0,r.jsx)(t.h1,{id:"introduction",children:"Introduction"}),(0,r.jsx)(t.p,{children:"It is often desirable to define an API that allows us to express our intentions as an easily readable method chain."}),(0,r.jsx)(t.p,{children:"The most common example of this in C# would probably be LINQ:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"var result = myCollection\n    .Where(item => item.IsActive)\n    .OrderBy(item => item.Name)\n    .Select(item => new { item.Id, item.Name });\n"})}),(0,r.jsxs)(t.p,{children:["The simple case of this is actually quite simple to implement, you just have each of your methods return the type of the declaring object and ",(0,r.jsx)(t.code,{children:"this"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"public class Car\n{\n    public Car Unlock()\n    {\n        // Do something\n        return this;\n    }\n    \n    public Car Enter()\n    {\n        // Do something\n        return this;\n    }\n    \n    public Car Start()\n    {\n        // Do something\n        return this;\n    }\n}\n\n// Which then lets us do\nvar car = new Car().Unlock().Enter().Start();\n"})}),(0,r.jsx)(t.p,{children:"However, in this instance, there's nothing stopping us from starting the car before we've unlocked and entered it."}),(0,r.jsx)(t.p,{children:"Clearly, in cases where we want to enforce a valid state, we have to define a grammar for our API."}),(0,r.jsx)(t.p,{children:"Typically, we accomplish this by designing a state machine for our API and then working out the set of all unique combinations of transitions, and creating interfaces for each of these states.\nWe can then make the return type for each method be the interface that represents the set of transitions that it allows."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"public class Car: ICanEnter, ICanStart\n{\n    public ICanEnter Unlock()\n    {\n        // Do something\n        return this;\n    }\n    \n    public ICanStart Enter()\n    {\n        // Do something\n        return this;\n    }\n    \n    public void Start()\n    {\n        // Do something\n        return this;\n    }\n}\n\n// Which then lets us do\nvar car = new Car().Unlock().Enter().Start();\n\n// But we can't do\nvar car = new Car().Unlock().Start(); // Haven't entered yet\nvar otherCar = new Car().Enter().Start(); // Haven't unlocked yet\n"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://mitesh1612.github.io/blog/2021/08/11/how-to-design-fluent-api",children:"This write up explains how tricky this can be to do by hand."})}),(0,r.jsx)(t.p,{children:"This is where SuperFluid comes in. It lets us define the grammar for your API in a YAML file and then generates the interfaces for you."}),(0,r.jsx)(t.p,{children:"All you then need to do is implement the interfaces and you're good to go."}),(0,r.jsx)(t.h1,{id:"how-to-use",children:"How to Use"}),(0,r.jsx)(t.h2,{id:"installation",children:"Installation"}),(0,r.jsx)(t.p,{children:"You can install SuperFluid from Nuget:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Install-Package SuperFluid\n"})}),(0,r.jsx)(t.h2,{id:"defining-your-grammar",children:"Defining Your Grammar"}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["[!WARNING]\nYour grammar file needs to end with ",(0,r.jsx)(t.code,{children:".fluid.yml"})," to be picked up by SuperFluid."]}),"\n"]}),(0,r.jsx)(t.p,{children:"Your grammar is defined in a YAML file following this data structure."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"record FluidApiDefinition\n{\n    public required string Name { get; init; }\n    public required string Namespace { get; init; }\n    public required FluidApiMethodDefinition InitialState { get; init; }\n    public required List<FluidApiMethodDefinition> Methods { get; init; }\n}\n\nrecord FluidApiMethodDefinition\n{\n\tpublic required string Name { get; init; }\n\tpublic string? ReturnType { get; init; }\n\tpublic List<string> CanTransitionTo { get; init; };\n\tpublic List<FluidApiArgumentDefinition> Arguments { get; init; };\n\tpublic List<FluidGenericArgumentDefinition> GenericArguments { get; init; };\n}\n\nrecord FluidApiArgumentDefinition\n{\n    public required string Type { get; init; }\n    public required string Name { get; init; }\n    public string? DefaultValue { get; init; }\n}\n\nrecord FluidGenericArgumentDefinition\n{\n    public required List<string> Constraints { get; init; }\n    public required string Name { get; init; }\n}\n"})}),(0,r.jsx)(t.p,{children:"Essentially, you do the following:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Define the initial state of your API, the namespaces you want your interfaces to be in, and what you want the main interface to be called."}),"\n",(0,r.jsx)(t.li,{children:"Define each of the methods that you want to be able to call on your API."}),"\n",(0,r.jsx)(t.li,{children:"Define the arguments that each method takes."}),"\n",(0,r.jsx)(t.li,{children:"Define the return type of each method."}),"\n",(0,r.jsx)(t.li,{children:"Define the states that each method can transition to."}),"\n"]}),(0,r.jsx)(t.p,{children:"Then Roslyn will generate the interfaces for you."}),(0,r.jsx)(t.p,{children:"A simple example of this would be:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'Name: "ICarActor"\nNamespace: "SuperFluid.Tests.Cars"\nInitialState:\n  Name: "Initialize"\n  CanTransitionTo: \n    - "Unlock"\nMethods:\n  - Name: "Unlock"\n    CanTransitionTo:\n      - "Lock"\n      - "Enter"\n  - Name: "Lock"\n    CanTransitionTo:\n      - "Unlock"\n  - Name: "Enter"\n    CanTransitionTo:\n      - "Start"\n      - "Exit"\n  - Name: "Exit"\n    CanTransitionTo:\n      - "Lock"\n      - "Enter"\n  - Name: "Start"\n    Arguments:\n      # These are deliberately out of order to test that the parser sticks the defaults to the end of the argument list\n      - Name: "direction"\n        Type: "string"\n        DefaultValue: "\\"Forward\\"" # Note that we need the quotes here\n      - Name: "speed"\n        Type: "int"\n      - Name: "hotwire"\n        Type: "bool"\n        DefaultValue: "false"\n\n    # These constraints are pointless but are here to test the parser\n    GenericArguments:\n      - Name: "T"\n        Constraints:\n          - "class"\n          - "INumber"\n      - Name: "X"\n        Constraints:\n          - "notnull"\n      \n    CanTransitionTo:\n      - "Stop"\n      - "Build"\n  - Name: "Stop"\n    CanTransitionTo:\n      - "Start"\n      - "Exit"\n  - Name: "Build"\n    Arguments:\n      - Name: "color"\n        Type: "string"\n    CanTransitionTo: []\n    ReturnType: "string"\n'})}),(0,r.jsxs)(t.p,{children:["Unfortunately, Roslyn isn't great at giving you feedback for source generation errors. In Rider, you can find them under ",(0,r.jsx)(t.code,{children:"Problems > Toolset, Environment"})," if it's actually run."]}),(0,r.jsx)(t.p,{children:"I plan to add an analyzer to the project that can give actual feedback to you but this might take a while."}),(0,r.jsx)(t.h2,{id:"registering-your-grammar-file-with-superfluid",children:"Registering Your Grammar File with SuperFluid"}),(0,r.jsxs)(t.p,{children:["You need to add your grammar file(s) as ",(0,r.jsx)(t.code,{children:"AdditionalFiles"})," in your csproj file."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'    <ItemGroup>\n      <AdditionalFiles Include="myGrammarFile.fluid.yml" />\n    </ItemGroup>\n'})}),(0,r.jsx)(t.p,{children:"You can have as many files as you want and they don't have to be in the root of your project."}),(0,r.jsx)(t.h2,{id:"implementing-your-api",children:"Implementing Your API"}),(0,r.jsxs)(t.p,{children:["Actually implementing the API is pretty simple. You just implement the root interface that has been generated. In the above example, that would be ",(0,r.jsx)(t.code,{children:"ICarActor"}),"."]}),(0,r.jsx)(t.p,{children:"You then just implement the methods on that interface, and you're good to go."}),(0,r.jsxs)(t.p,{children:["One note, if you use your IDE's feature to generate your method stubs, you might end up with multiple declarations of each method for each explicit interface that has it as a component. In this case, just delete the explicit implementations and implement the method once using the standard ",(0,r.jsx)(t.code,{children:"public type name(args)"})," syntax. This is simply an artefact of the fact that you can arrive at the same method through multiple transitions."]}),(0,r.jsx)(t.h1,{id:"reference-project",children:"Reference Project"}),(0,r.jsxs)(t.p,{children:["Another one of my projects ",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/PgfPlotsSdk",children:"PgfPlotsSdk"})," uses SuperFluid to generate a complicated fluent API for working with LaTex PgfPlots."]}),(0,r.jsxs)(t.p,{children:["The yaml file for this is ",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/PgfPlotsSdk/blob/master/src/PgfPlotsSdk/SuperFluidDefinitions/PgfPlotsBuilder.fluid.yml",children:"here"}),"."]}),(0,r.jsxs)(t.p,{children:["The relevant class is ",(0,r.jsx)(t.a,{href:"https://github.com/hughesjs/PgfPlotsSdk/blob/master/src/PgfPlotsSdk/Public/Builders/PgfPlotBuilder.cs",children:"here"}),"."]})]}),"\n",(0,r.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"Generate a state machine from a yaml file"})}),"\n",(0,r.jsx)(t.h2,{id:"how-to-use-1",children:"How to use"}),"\n",(0,r.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(s.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(t.strong,{children:"SuperFluid"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n    <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <OutputType>Exe</OutputType>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <AdditionalFiles Include="Calculator.fluid.yml" />\n    </ItemGroup>\n\n    <ItemGroup>\n      <PackageReference Include="SuperFluid" Version="1.0.1" OutputItemType="Analyzer" ReferenceOutputAssembly="true" >\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>\n    </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,r.jsxs)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SuperFluid\\src\\StateMachineExample\\Calculator.fluid.yml",label:"Calculator.fluid.yml",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"SuperFluid"})," in ",(0,r.jsx)(t.em,{children:"Calculator.fluid.yml"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'Name: "ICalculator"\nNamespace: "SimpleFluentExample"\nInitialState:\n  Name: "Create"\n  CanTransitionTo: \n    - "Add"\n    - "Subtract"\nMethods:\n  - Name: "Add"\n    Arguments:\n      - Name: "value"\n        Type: "int"\n    CanTransitionTo:\n      - "Add"\n      - "Subtract"\n      - "Calculate"\n  - Name: "Subtract"\n    Arguments:\n      - Name: "value"\n        Type: "int"\n    CanTransitionTo:\n      - "Add"\n      - "Subtract"\n      - "Calculate"\n  - Name: "Calculate"\n    ReturnType: "int"\n    CanTransitionTo: []\n\n'})})]}),(0,r.jsxs)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SuperFluid\\src\\StateMachineExample\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"SuperFluid"})," in ",(0,r.jsx)(t.em,{children:"Program.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using SimpleFluentExample;\n\nConsole.WriteLine("Example Basic calculation state machine");\nvar result1 = CalculatorService.Create()\n    .Add(10)\n    .Subtract(3)\n    .Add(5)\n    .Calculate();\n\nConsole.WriteLine($"Result 1: {result1}"); // Output: 12\nConsole.WriteLine();\n\n// Uncomment these lines to see compilation errors:\n// CalculatorService.Create().Calculate();        // Can\'t calculate without operations  \n// CalculatorService.Create().Add(5).Add(10);     // Missing Calculate() at the end\n\n'})})]}),(0,r.jsxs)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SuperFluid\\src\\StateMachineExample\\CalculatorService.cs",label:"CalculatorService.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"SuperFluid"})," in ",(0,r.jsx)(t.em,{children:"CalculatorService.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'namespace SimpleFluentExample;\n\npublic class CalculatorService : ICalculator\n{\n    private int _currentValue = 0;\n\n    // Static factory method as required by the generated interface\n    public static ICanAddOrSubtract Create()\n    {\n        var calculator = new CalculatorService();\n        Console.WriteLine("\ud83e\uddee Calculator created");\n        return calculator;\n    }\n\n    public ICanAddOrSubtractOrCalculate Add(int value)\n    {\n        _currentValue += value;\n        Console.WriteLine($"\u2795 Added {value}, current value: {_currentValue}");\n        return this;\n    }\n\n    public ICanAddOrSubtractOrCalculate Subtract(int value)\n    {\n        _currentValue -= value;\n        Console.WriteLine($"\u2796 Subtracted {value}, current value: {_currentValue}");\n        return this;\n    }\n\n    public int Calculate()\n    {\n        Console.WriteLine($"\ud83c\udfaf Final result: {_currentValue}");\n        return _currentValue;\n    }\n}\n\n'})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SuperFluid\\src\\StateMachineExample\\obj\\GX\\SuperFluid\\SuperFluid.Internal.SourceGenerators.FluidApiSourceGenerator\\ICalculator.fluid.g.cs",label:"ICalculator.fluid.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace SimpleFluentExample;\n\npublic interface ICalculator: ICanAddOrSubtractOrCalculate,ICanAddOrSubtract\n{\n\tpublic static abstract ICanAddOrSubtract Create();\n}\n"})})}),(0,r.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SuperFluid\\src\\StateMachineExample\\obj\\GX\\SuperFluid\\SuperFluid.Internal.SourceGenerators.FluidApiSourceGenerator\\ICanAddOrSubtract.fluid.g.cs",label:"ICanAddOrSubtract.fluid.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace SimpleFluentExample;\n\npublic interface ICanAddOrSubtract\n{\n\tpublic ICanAddOrSubtractOrCalculate Add(int value);\n\tpublic ICanAddOrSubtractOrCalculate Subtract(int value);\n}\n"})})}),(0,r.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\SuperFluid\\src\\StateMachineExample\\obj\\GX\\SuperFluid\\SuperFluid.Internal.SourceGenerators.FluidApiSourceGenerator\\ICanAddOrSubtractOrCalculate.fluid.g.cs",label:"ICanAddOrSubtractOrCalculate.fluid.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace SimpleFluentExample;\n\npublic interface ICanAddOrSubtractOrCalculate\n{\n\tpublic ICanAddOrSubtractOrCalculate Add(int value);\n\tpublic ICanAddOrSubtractOrCalculate Subtract(int value);\n\tpublic int Calculate();\n}\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(24871).A+"",children:"Download Example project SuperFluid "})})}),"\n",(0,r.jsx)(t.h3,{id:"share-superfluid",children:"Share SuperFluid"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSuperFluid&quote=SuperFluid",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSuperFluid&text=SuperFluid:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSuperFluid",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSuperFluid&title=SuperFluid",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSuperFluid&title=SuperFluid&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSuperFluid",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/SuperFluid",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/SuperFluid"})}),"\n",(0,r.jsx)(t.p,{children:"aaa"}),"\n",(0,r.jsx)(c,{})]})}function x(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);