"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[109],{47563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var a=t(87462),i=(t(67294),t(3905)),s=t(73992),r=t(18679),o=t(68839);const l={sidebar_position:1600,title:"160 - Dusharp",description:"Generate tagged union",slug:"/Dusharp"},u="Dusharp  by Vitali",p={unversionedId:"RSCG-Examples/Dusharp",id:"RSCG-Examples/Dusharp",title:"160 - Dusharp",description:"Generate tagged union",source:"@site/docs/RSCG-Examples/Dusharp.md",sourceDirName:"RSCG-Examples",slug:"/Dusharp",permalink:"/RSCG_Examples/v2/docs/Dusharp",draft:!1,tags:[],version:"current",sidebarPosition:1600,frontMatter:{sidebar_position:1600,title:"160 - Dusharp",description:"Generate tagged union",slug:"/Dusharp"},sidebar:"tutorialSidebar",previous:{title:"159 - LightweightObjectMapper",permalink:"/RSCG_Examples/v2/docs/LightweightObjectMapper"},next:{title:"161 - Immediate.Handlers",permalink:"/RSCG_Examples/v2/docs/Immediate.Handlers"}},m={},h=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Dusharp",id:"share-dusharp",level:3},{value:"In the same category (FunctionalProgramming) - 14 other generators",id:"in-the-same-category-functionalprogramming---14-other-generators",level:3},{value:"cachesourcegenerator",id:"cachesourcegenerator",level:4},{value:"dunet",id:"dunet",level:4},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:4},{value:"FunicularSwitch",id:"funicularswitch",level:4},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:4},{value:"OneOf",id:"oneof",level:4},{value:"PartiallyApplied",id:"partiallyapplied",level:4},{value:"polytype",id:"polytype",level:4},{value:"rscg_queryables",id:"rscg_queryables",level:4},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:4},{value:"Sera.Union",id:"seraunion",level:4},{value:"TypeUtilities",id:"typeutilities",level:4},{value:"UnionGen",id:"uniongen",level:4},{value:"UnionsGenerator",id:"unionsgenerator",level:4}],c={toc:h},d="wrapper";function g(e){let{components:n,...l}=e;return(0,i.kt)(d,(0,a.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dusharp--by-vitali"},"Dusharp  by Vitali"),(0,i.kt)(o.Z,{toc:h,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Dusharp/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Dusharp?label=Dusharp",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kolebynov/Dusharp"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/kolebynov/Dusharp?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/kolebynov/Dusharp?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"Dusharp")),(0,i.kt)("p",{parentName:"admonition"},"Dusharp is a C# source generator for creating discriminated unions."),(0,i.kt)("p",{parentName:"admonition"},"Author: Vitali"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Dusharp/"},"https://www.nuget.org/packages/Dusharp/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kolebynov/Dusharp"},"https://github.com/kolebynov/Dusharp")),(0,i.kt)("p",{parentName:"admonition"},"Source : ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kolebynov/Dusharp"},"https://github.com/kolebynov/Dusharp"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h1",{parentName:"admonition",id:"dusharp"},"Dusharp"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Dusharp/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Dusharp",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Dusharp")," is a C# source generator library for creating ",(0,i.kt)("strong",{parentName:"p"},"discriminated unions"),". This library allows you to define union types with ease, using attributes and partial methods. It is inspired by functional languages but built for C# developers."),(0,i.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("strong",{parentName:"li"},"Create unions"),": Define discriminated unions using attributes."),(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("strong",{parentName:"li"},"Match method"),": Pattern match on union cases in a type-safe way."),(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("strong",{parentName:"li"},"Equality"),": Automatic equality comparison for unions."),(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("strong",{parentName:"li"},"Generics"),": Generics support for union types."),(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("strong",{parentName:"li"},"Pretty print"),": Using overloaded ",(0,i.kt)("inlineCode",{parentName:"li"},"ToString()"),"."),(0,i.kt)("li",{parentName:"ul"},"\u274c ",(0,i.kt)("strong",{parentName:"li"},"JSON serialization/deserialization"),": Support for unions with ",(0,i.kt)("inlineCode",{parentName:"li"},"System.Text.Json")," (coming soon)."),(0,i.kt)("li",{parentName:"ul"},"\u274c ",(0,i.kt)("strong",{parentName:"li"},"Struct unions"),": With efficient memory layout for unions as structs (coming soon).")),(0,i.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,i.kt)("p",{parentName:"admonition"},"Dusharp is available as a NuGet package. You can install it using the NuGet package manager:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package Dusharp\n")),(0,i.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"Dusharp")," uses attributes to generate discriminated unions and case methods. Here's how to get started:"),(0,i.kt)("h3",{parentName:"admonition",id:"1-define-a-union"},"1. Define a Union"),(0,i.kt)("p",{parentName:"admonition"},"To define a union, annotate a class with the ",(0,i.kt)("inlineCode",{parentName:"p"},"[Dusharp.UnionAttribute]")," attribute."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using Dusharp;\n\n[Union]\npublic partial class Shape<T>\n    where T : struct, INumber<T>\n{\n}\n")),(0,i.kt)("h3",{parentName:"admonition",id:"2-define-union-cases"},"2. Define Union Cases"),(0,i.kt)("p",{parentName:"admonition"},"Define union cases by creating public static partial methods and marking them with the ",(0,i.kt)("inlineCode",{parentName:"p"},"[Dusharp.UnionCaseAttribute]")," attribute. The method body will be automatically generated."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using Dusharp;\n\n[Union]\npublic partial class Shape<T>\n    where T : struct, INumber<T>\n{\n    [UnionCase]\n    public static partial Shape<T> Circle(T radius);\n\n    [UnionCase]\n    public static partial Shape<T> Rectangle(T width, T height);\n}\n")),(0,i.kt)("h3",{parentName:"admonition",id:"3-match-on-union"},"3. Match on Union"),(0,i.kt)("p",{parentName:"admonition"},"You can easily perform pattern matching on a union using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," method. The source generator will create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Match")," method based on the defined union cases."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'Shape<double> shape = Shape<double>.Circle(5.0);\n\nstring result = shape.Match(\n    radius => $"Circle with radius {radius}",\n    (width, height) => $"Rectangle with width {width} and height {height}");\n\nConsole.WriteLine(result); // Output: Circle with radius 5.0\n')),(0,i.kt)("h3",{parentName:"admonition",id:"4-compare-unions"},"4. Compare Unions"),(0,i.kt)("p",{parentName:"admonition"},"Union cases can be compared for equality using the auto-generated equality methods. This allows for checking if two unions are the same."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Shape<double> shape1 = Shape<double>.Circle(5.0);\nShape<double> shape2 = Shape<double>.Circle(5.0);\n\nConsole.WriteLine(shape1.Equals(shape2)); // True\nConsole.WriteLine(shape1 == shape2); // True\n")),(0,i.kt)("h2",{parentName:"admonition",id:"upcoming-features"},"Upcoming Features"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"JSON serialization/deserialization"),": Support for JSON (de)serialization via System.Text.Json."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Struct unions"),": More efficient unions using structs with effective data layout.")),(0,i.kt)("h2",{parentName:"admonition",id:"license"},"License"),(0,i.kt)("p",{parentName:"admonition"},"This project is licensed under the MIT License - see the LICENSE file for details.")),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Generate tagged union")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"Dusharp")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n    <ItemGroup>\n      <PackageReference Include="Dusharp" Version="0.4.0">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>\n    </ItemGroup>\n\n    \n\n</Project>\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Dusharp")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using UnionTypesDemo;\n\nConsole.WriteLine("Save or not");\nvar data = SaveToDatabase.Save(0);\ndata.Match(\n    ok => Console.WriteLine(ok),\n    ()=> Console.WriteLine("Not found")\n);\n\ndata = SaveToDatabase.Save(1);\ndata.Match(\n    ok => Console.WriteLine(ok),\n    () => Console.WriteLine("Not found")\n);\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\ResultSave.cs",label:"ResultSave.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Dusharp")," in ",(0,i.kt)("em",{parentName:"p"},"ResultSave.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Dusharp;\nnamespace UnionTypesDemo;\n\n\n[Union]\npublic partial class ResultSave\n{\n    [UnionCase]\n    public static partial ResultSave Ok(int i);\n    [UnionCase]\n    public static partial ResultSave NotFound();\n    \n}\n\n\n"))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\SaveToDatabase.cs",label:"SaveToDatabase.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Dusharp")," in ",(0,i.kt)("em",{parentName:"p"},"SaveToDatabase.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace UnionTypesDemo;\n\npublic class SaveToDatabase\n{\n    public static ResultSave Save(int i)\n    {\n\n        if (i == 0)\n        {\n            return ResultSave.NotFound();\n        }\n        return ResultSave.Ok(i); ;\n    }\n}\n\n\n\n")))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\Dusharp.EmbeddedCode.ExceptionUtils.cs",label:"Dusharp.EmbeddedCode.ExceptionUtils.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nusing System;\nusing System.Runtime.CompilerServices;\n\nnamespace Dusharp\n{\n    public static class ExceptionUtils\n    {\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void ThrowIfNull<T>(this T value, string paramName)\n            where T : class\n        {\n            if (value == null)\n            {\n                ThrowArgumentNull(paramName);\n            }\n        }\n\n        [MethodImpl(MethodImplOptions.NoInlining)]\n        public static void ThrowUnionInInvalidState() =>\n            throw new InvalidOperationException("Union in invalid state.");\n\n        [MethodImpl(MethodImplOptions.NoInlining)]\n        private static void ThrowArgumentNull(string paramName) => throw new ArgumentNullException(paramName);\n    }\n}\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\Dusharp.EmbeddedCode.UnionAttribute.cs",label:"Dusharp.EmbeddedCode.UnionAttribute.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nusing System;\n\nnamespace Dusharp\n{\n    [AttributeUsage(AttributeTargets.Class)]\n    public sealed class UnionAttribute : Attribute\n    {\n    }\n}\n"))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\Dusharp.EmbeddedCode.UnionCaseAttribute.cs",label:"Dusharp.EmbeddedCode.UnionCaseAttribute.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nusing System;\n\nnamespace Dusharp\n{\n    [AttributeUsage(AttributeTargets.Method)]\n    public sealed class UnionCaseAttribute : Attribute\n    {\n    }\n}\n"))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Dusharp\\Dusharp.UnionSourceGenerator\\UnionTypesDemo.ResultSave.Dusharp.g.cs",label:"UnionTypesDemo.ResultSave.Dusharp.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated> This file has been auto generated. </auto-generated>\n#nullable enable\nnamespace UnionTypesDemo\n{\n    [System.Diagnostics.CodeAnalysis.SuppressMessage("", "CA1000", Justification = "For generic unions.")]\n    abstract partial class ResultSave : System.IEquatable<ResultSave>\n    {\n        private ResultSave() {}\n\n        public void Match(System.Action<int> okCase, System.Action notFoundCase)\n        {\n            Dusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n            Dusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n            {\n                var unionCase = this as OkCase;\n                if (!object.ReferenceEquals(unionCase, null)) { okCase(unionCase.i); return; }\n            }\n\n            {\n                var unionCase = this as NotFoundCase;\n                if (!object.ReferenceEquals(unionCase, null)) { notFoundCase(); return; }\n            }\n\n            Dusharp.ExceptionUtils.ThrowUnionInInvalidState();\n        }\n\n        public TRet Match<TRet>(System.Func<int, TRet> okCase, System.Func<TRet> notFoundCase)\n        {\n            Dusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n            Dusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n            {\n                var unionCase = this as OkCase;\n                if (!object.ReferenceEquals(unionCase, null)) { return okCase(unionCase.i); }\n            }\n\n            {\n                var unionCase = this as NotFoundCase;\n                if (!object.ReferenceEquals(unionCase, null)) { return notFoundCase(); }\n            }\n\n            Dusharp.ExceptionUtils.ThrowUnionInInvalidState();\n            return default!;\n        }\n\n        public void Match<TState>(TState state, System.Action<TState, int> okCase, System.Action<TState> notFoundCase)\n        {\n            Dusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n            Dusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n            {\n                var unionCase = this as OkCase;\n                if (!object.ReferenceEquals(unionCase, null)) { okCase(state, unionCase.i); return; }\n            }\n\n            {\n                var unionCase = this as NotFoundCase;\n                if (!object.ReferenceEquals(unionCase, null)) { notFoundCase(state); return; }\n            }\n\n            Dusharp.ExceptionUtils.ThrowUnionInInvalidState();\n        }\n\n        public TRet Match<TState, TRet>(TState state, System.Func<TState, int, TRet> okCase, System.Func<TState, TRet> notFoundCase)\n        {\n            Dusharp.ExceptionUtils.ThrowIfNull(okCase, "okCase");\n            Dusharp.ExceptionUtils.ThrowIfNull(notFoundCase, "notFoundCase");\n\n            {\n                var unionCase = this as OkCase;\n                if (!object.ReferenceEquals(unionCase, null)) { return okCase(state, unionCase.i); }\n            }\n\n            {\n                var unionCase = this as NotFoundCase;\n                if (!object.ReferenceEquals(unionCase, null)) { return notFoundCase(state); }\n            }\n\n            Dusharp.ExceptionUtils.ThrowUnionInInvalidState();\n            return default!;\n        }\n\n        public virtual bool Equals(ResultSave? other) { return object.ReferenceEquals(this, other); }\n        public override bool Equals(object? other) { return object.ReferenceEquals(this, other); }\n        public override int GetHashCode() { return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); }\n        public static bool operator ==(ResultSave? left, ResultSave? right)\n        {\n            return !object.ReferenceEquals(left, null) ? left.Equals(right) : object.ReferenceEquals(left, right);\n        }\n\n        public static bool operator !=(ResultSave? left, ResultSave? right)\n        {\n            return !object.ReferenceEquals(left, null) ? !left.Equals(right) : !object.ReferenceEquals(left, right);\n        }\n\n        private sealed class OkCase : ResultSave\n        {\n            public readonly int i;\n            public OkCase(int i)\n            {\n                this.i = i;\n            }\n\n            public override string ToString()\n            {\n                return $"Ok {{ i = {i} }}";\n            }\n\n            public override bool Equals(ResultSave? other)\n            {\n                if (object.ReferenceEquals(this, other)) return true;\n                var otherCasted = other as OkCase;\n                if (object.ReferenceEquals(otherCasted, null)) return false;\n                return StructuralEquals(otherCasted);\n            }\n\n            public override bool Equals(object? other)\n            {\n                if (object.ReferenceEquals(this, other)) return true;\n                var otherCasted = other as OkCase;\n                if (object.ReferenceEquals(otherCasted, null)) return false;\n                return StructuralEquals(otherCasted);\n            }\n\n            public override int GetHashCode()\n            {\n                unchecked { return System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(i!) * -1521134295 + "Ok".GetHashCode(); }\n            }\n\n            private bool StructuralEquals(OkCase other)\n            {\n                return System.Collections.Generic.EqualityComparer<int>.Default.Equals(i, other.i);\n            }\n        }\n\n        public static partial ResultSave Ok(int i)\n        {\n            return new OkCase(i);\n        }\n\n        private sealed class NotFoundCase : ResultSave\n        {\n            public static readonly NotFoundCase Instance = new NotFoundCase();\n            public NotFoundCase()\n            {\n            }\n\n            public override string ToString()\n            {\n                return "NotFound";\n            }\n        }\n\n        public static partial ResultSave NotFound()\n        {\n            return NotFoundCase.Instance;\n        }\n    }\n}\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dusharp\\src\\UnionTypesDemo\\obj\\GX\\Sera.TaggedUnion.Analyzers\\Sera.TaggedUnion.Analyzers.Generators.UnionGenerator\\UnionTypesDemo.ResultSave.union.g.cs",label:"UnionTypesDemo.ResultSave.union.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\nnamespace UnionTypesDemo {\n\npublic partial struct ResultSave\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<ResultSave>\n    , global::System.IComparable<ResultSave>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<ResultSave, ResultSave, bool>\n    , global::System.Numerics.IComparisonOperators<ResultSave, ResultSave, bool>\n#endif\n{\n    private __impl_ _impl;\n    private ResultSave(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Ok = 1,\n        NotFound = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public __unmanaged_ _unmanaged_;\n        public readonly Tags _tag;\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __unmanaged_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public int _0;\n        }\n\n        public __impl_(Tags _tag)\n        {\n            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_);\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static ResultSave MakeOk(int value)\n    {\n        var _impl = new __impl_(Tags.Ok);\n        _impl._unmanaged_._0 = value;\n        return new ResultSave(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static ResultSave MakeNotFound()\n    {\n        var _impl = new __impl_(Tags.NotFound);\n        return new ResultSave(_impl);\n    }\n\n    public readonly bool IsOk\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Ok;\n    }\n    public readonly bool IsNotFound\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.NotFound;\n    }\n\n    public int Ok\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsOk ? default! : this._impl._unmanaged_._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsOk) { this._impl._unmanaged_._0 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(ResultSave other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(this.Ok, other.Ok),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Ok => global::System.HashCode.Combine(this.Tag, this.Ok),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is ResultSave other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(ResultSave left, ResultSave right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(ResultSave left, ResultSave right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(ResultSave other) => this.Tag != other.Tag ? global::System.Collections.Generic.Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.Comparer<int>.Default.Compare(this.Ok, other.Ok),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(ResultSave left, ResultSave right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(ResultSave left, ResultSave right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(ResultSave left, ResultSave right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(ResultSave left, ResultSave right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Ok => $"{nameof(ResultSave)}.{nameof(Tags.Ok)} {{ {this.Ok} }}",\n        Tags.NotFound => $"{nameof(ResultSave)}.{nameof(Tags.NotFound)}",\n        _ => nameof(ResultSave),\n    };\n}\n\n} // namespace UnionTypesDemo\n\n')))),(0,i.kt)("h2",{id:"usefull"},"Usefull"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:t(96685).Z},"Download Example project Dusharp "))),(0,i.kt)("h3",{id:"share-dusharp"},"Share Dusharp"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&quote=Dusharp",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&text=Dusharp:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&title=Dusharp",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp&title=Dusharp&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDusharp",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dusharp"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dusharp")),(0,i.kt)("h3",{id:"in-the-same-category-functionalprogramming---14-other-generators"},"In the same category (FunctionalProgramming) - 14 other generators"),(0,i.kt)("h4",{id:"cachesourcegenerator"},(0,i.kt)("a",{parentName:"h4",href:"/docs/cachesourcegenerator"},"cachesourcegenerator")),(0,i.kt)("h4",{id:"dunet"},(0,i.kt)("a",{parentName:"h4",href:"/docs/dunet"},"dunet")),(0,i.kt)("h4",{id:"funckydiscriminatedunion"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Funcky.DiscriminatedUnion"},"Funcky.DiscriminatedUnion")),(0,i.kt)("h4",{id:"funicularswitch"},(0,i.kt)("a",{parentName:"h4",href:"/docs/FunicularSwitch"},"FunicularSwitch")),(0,i.kt)("h4",{id:"nsourcegeneratorsuniontypes"},(0,i.kt)("a",{parentName:"h4",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,i.kt)("h4",{id:"oneof"},(0,i.kt)("a",{parentName:"h4",href:"/docs/OneOf"},"OneOf")),(0,i.kt)("h4",{id:"partiallyapplied"},(0,i.kt)("a",{parentName:"h4",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,i.kt)("h4",{id:"polytype"},(0,i.kt)("a",{parentName:"h4",href:"/docs/polytype"},"polytype")),(0,i.kt)("h4",{id:"rscg_queryables"},(0,i.kt)("a",{parentName:"h4",href:"/docs/rscg_queryables"},"rscg_queryables")),(0,i.kt)("h4",{id:"rscg_utils_memo"},(0,i.kt)("a",{parentName:"h4",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")),(0,i.kt)("h4",{id:"seraunion"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Sera.Union"},"Sera.Union")),(0,i.kt)("h4",{id:"typeutilities"},(0,i.kt)("a",{parentName:"h4",href:"/docs/TypeUtilities"},"TypeUtilities")),(0,i.kt)("h4",{id:"uniongen"},(0,i.kt)("a",{parentName:"h4",href:"/docs/UnionGen"},"UnionGen")),(0,i.kt)("h4",{id:"unionsgenerator"},(0,i.kt)("a",{parentName:"h4",href:"/docs/UnionsGenerator"},"UnionsGenerator")))}g.isMDXComponent=!0},96685:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/Dusharp-52ba0564f54daa82bb0fab159237f092.zip"}}]);