"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9732],{37960:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>b,frontMatter:()=>d,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"RSCG-Examples/Blazor.TSRuntime","title":"213 - Blazor.TSRuntime","description":"Generating C# Code for Blazor from javascript files","source":"@site/docs/RSCG-Examples/Blazor.TSRuntime.md","sourceDirName":"RSCG-Examples","slug":"/Blazor.TSRuntime","permalink":"/RSCG_Examples/v2/docs/Blazor.TSRuntime","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2130,"frontMatter":{"sidebar_position":2130,"title":"213 - Blazor.TSRuntime","description":"Generating C# Code for Blazor from javascript files","slug":"/Blazor.TSRuntime"},"sidebar":"tutorialSidebar","previous":{"title":"212 - StackXML","permalink":"/RSCG_Examples/v2/docs/StackXML"},"next":{"title":"214 - Genbox.FastEnum","permalink":"/RSCG_Examples/v2/docs/Genbox.FastEnum"}}');var s=a(74848),r=a(28453),o=a(11470),i=a(19365),l=a(14252),c=a(44562);const d={sidebar_position:2130,title:"213 - Blazor.TSRuntime",description:"Generating C# Code for Blazor from javascript files",slug:"/Blazor.TSRuntime"},u="Blazor.TSRuntime  by Black White Yoshi",m={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Available Methods",id:"available-methods",level:2},{value:"Invoke",id:"invoke",level:3},{value:"Preload",id:"preload",level:3},{value:"Get Started",id:"get-started",level:2},{value:"1. Add NuGet package",id:"1-add-nuget-package",level:3},{value:"2. Add &lt;AdditionalFiles&gt;",id:"2-add-additionalfiles",level:3},{value:"3. Register ITSRuntime",id:"3-register-itsruntime",level:3},{value:"4. Hello World",id:"4-hello-world",level:3},{value:"Optional",id:"optional",level:3},{value:"TypeScript",id:"typescript",level:3},{value:"Config - tsruntime.json",id:"config---tsruntimejson",level:2},{value:"Callback (Function as Parameter)",id:"callback-function-as-parameter",level:2},{value:"Sync/Async Callbacks",id:"syncasync-callbacks",level:3},{value:"Callback Module",id:"callback-module",level:3},{value:"DotNetObjectReference",id:"dotnetobjectreference",level:3},{value:"Nested Functions or Returning a Function",id:"nested-functions-or-returning-a-function",level:3},{value:"Release Notes",id:"release-notes",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Blazor.TSRuntime",id:"share-blazortsruntime",level:3},...c.RM];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"blazortsruntime--by-black-white-yoshi",children:"Blazor.TSRuntime  by Black White Yoshi"})}),"\n",(0,s.jsx)(l.A,{toc:p}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Blazor.TSRuntime/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Blazor.TSRuntime?label=Blazor.TSRuntime",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntime",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/BlackWhiteYoshi/Blazor.TSRuntime?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/BlackWhiteYoshi/Blazor.TSRuntime?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"Blazor.TSRuntime"})]}),(0,s.jsx)(n.p,{children:"TSRuntime is an improved JSRuntime with automatic JS-module loading and caching, compile time errors instead of runtime errors and nice IntelliSense guidance."}),(0,s.jsx)(n.p,{children:"Author: Black White Yoshi"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Blazor.TSRuntime/",children:"https://www.nuget.org/packages/Blazor.TSRuntime/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntime",children:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntime"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntime",children:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntime"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.h1,{id:"blazortsruntime",children:"Blazor.TSRuntime"}),(0,s.jsx)(n.p,{children:"An improved JSRuntime with"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"automatic JS-module loading and caching"}),"\n",(0,s.jsx)(n.li,{children:"compile time errors instead of runtime errors"}),"\n",(0,s.jsx)(n.li,{children:"IntelliSense guidance"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntime/README_IMAGE.png",alt:"InlineComposition Example"})}),(0,s.jsxs)(n.p,{children:["Works with ",(0,s.jsx)(n.a,{href:"#get-started",children:(0,s.jsx)(n.em,{children:"JavaScript JSDoc"})})," and ",(0,s.jsx)(n.a,{href:"#get-started",children:(0,s.jsx)(n.em,{children:"TypeScript"})}),"."]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"available-methods",children:"Available Methods"}),(0,s.jsx)(n.h3,{id:"invoke",children:"Invoke"}),(0,s.jsx)(n.p,{children:'Each "export function" in JavaScript will generate up to 3 C#-methods:'}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Invoke"})," - interops synchronous"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"InvokeTrySync"})," - interops synchronous if possible, otherwise asynchronous"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"InvokeAsync"})," - interops asynchronous"]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// saveNumber(name: string, myNumber: number)\n\nTsRuntime.SaveNumberInvoke("key1", 5); // will invoke sync\nawait TsRuntime.SaveNumberInvokeTrySync("key1", 5); // invokes sync if possible, otherwise async\nawait TsRuntime.SaveNumberInvokeAsync("key1", 5); // invokes async\n'})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),":"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"InvokeTrySync"})," checks if IJSInProcessRuntime is available and if available, executes the call synchronous.\nSo, if the module is already be downloaded and IJSInProcessRuntime is available, this method executes synchronous."]}),"\n",(0,s.jsxs)(n.li,{children:["Asynchronous JavaScript-functions (JS-functions that return a promise) should be called with ",(0,s.jsx)(n.em,{children:"InvokeAsync"})," (not ",(0,s.jsx)(n.em,{children:"Invoke"})," or ",(0,s.jsx)(n.em,{children:"InvokeTrySync"}),"), otherwise the promise will not be awaited."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Invoke"}),"-interop fails with an exception when module is not loaded.\nSo make sure to await the corresponding preload-method beforehand."]}),"\n"]}),(0,s.jsx)(n.h3,{id:"preload",children:"Preload"}),(0,s.jsxs)(n.p,{children:["Each module will generate a method to preload the module.\nAdditionaly, there is a ",(0,s.jsx)(n.em,{children:"PreloadAllModules"})," method, that preloads all modules.\nPreloading will start the download of the JS-module and the task completes when the module is downloaded and cached.",(0,s.jsx)(n.br,{}),"\n",'If a JS-function is called before or while preloading, the download task will first be awaited before executing the function (A sync-call throws an exception).\nTherefore, it is recommended to call this method as "fire and forget".']}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"_ = PreloadExample(); // loads and caches Example module in the background\n_ = PreloadAllModules(); // loads and caches all modules in the background\nawait PreloadAllModules(); // awaits the loading of all modules, recommended when using sync-interop\n"})}),(0,s.jsx)(n.p,{children:"Furthermore you can prefetch your modules on page load, so the Preload-methods will only get a reference to the module."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<head>\n  ...\n  <link rel="modulepreload" href="Page/Example.razor.js" />\n</head>\n'})}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"get-started",children:"Get Started"}),(0,s.jsx)(n.h3,{id:"1-add-nuget-package",children:"1. Add NuGet package"}),(0,s.jsxs)(n.p,{children:["In your .csproj-file put a package reference to ",(0,s.jsx)(n.em,{children:"Blazor.TSRuntime"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<ItemGroup>\n  <PackageReference Include="Blazor.TSRuntime" Version="{latest version}" PrivateAssets="all" />\n</ItemGroup>\n'})}),(0,s.jsx)(n.h3,{id:"2-add-additionalfiles",children:"2. Add <AdditionalFiles>"}),(0,s.jsxs)(n.p,{children:["In your .csproj-file put an <AdditionalFiles> directive to ",(0,s.jsx)(n.em,{children:"tsruntime.json"}),"\nand an <AdditionalFiles> to make all .js-files available to the source-generator."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<ItemGroup>\n  <PackageReference Include="Blazor.TSRuntime" Version="{latest version}" PrivateAssets="all" />\n  <AdditionalFiles Include="tsruntime.json" />\n  <AdditionalFiles Include="**/*.js" Exclude="bin/**;obj/**;Properties/**" />\n</ItemGroup>\n'})}),(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.em,{children:"tsruntime.json"}),"-file in the same folder as your .csproj-file."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "invoke function": {\n    "sync enabled": false,\n    "trysync enabled": true,\n    "async enabled": false,\n    "name pattern": {\n      "pattern": "#function#",\n      "module transform": "first upper case",\n      "function transform": "first upper case",\n      "action transform": "none"\n    },\n    "type map": {\n      "number": {\n        "type": "TNumber",\n        "generic types": {\n          "name": "TNumber",\n          "constraint": "INumber<TNumber>"\n        }\n      },\n      "boolean": "bool",\n      "Uint8Array": "byte[]",\n      "HTMLElement": "ElementReference"\n    }\n  }\n}\n'})}),(0,s.jsx)(n.h3,{id:"3-register-itsruntime",children:"3. Register ITSRuntime"}),(0,s.jsxs)(n.p,{children:["If everything is set up correctly, the generator should already be generating the 2 files ",(0,s.jsx)(n.em,{children:"TSRuntime"}),", ",(0,s.jsx)(n.em,{children:"ITSRuntime"}),".",(0,s.jsx)(n.br,{}),"\n","Register them in your dependency container."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.JSInterop;\n\n// IServiceCollection services\nservices.AddTSRuntime();\n"})}),(0,s.jsx)(n.h3,{id:"4-hello-world",children:"4. Hello World"}),(0,s.jsx)(n.p,{children:'Now you are ready to rumble, to make a "Hello World" test you can create 2 files:'}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Example.razor"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-razor",children:'<button @onclick="InvokeJS">InvokeJS</button>\n\n@code {\n    [Inject]\n    public required ITSRuntime TsRuntime \\{ private get; init; }\n    \n    private async Task InvokeJS() => await TsRuntime.Example();\n}\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Example.razor.js"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export function example() {\n    console.log("Hello World");\n}\n'})}),(0,s.jsx)(n.h3,{id:"optional",children:"Optional"}),(0,s.jsxs)(n.p,{children:["You can add a ",(0,s.jsx)(n.em,{children:"jsconfig.json"})," file and rename ",(0,s.jsx)(n.strong,{children:"tsruntime.json"})," to ",(0,s.jsx)(n.strong,{children:"jsconfig.tsruntime.json"}),".",(0,s.jsx)(n.br,{}),"\n","Here is an example ",(0,s.jsx)(n.em,{children:"jsconfig.json"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "es2022",\n    "checkJs": true,\n    "strictNullChecks": true,\n    "noImplicitAny": true\n  }\n}\n'})}),(0,s.jsx)(n.h3,{id:"typescript",children:"TypeScript"}),(0,s.jsx)(n.p,{children:"For using TypeScript, you only need a few adjustments:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"tsconfig.json"})," instead of ",(0,s.jsx)(n.em,{children:"jsconfig.json"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["rename ",(0,s.jsx)(n.em,{children:"jsconfig.tsruntime.json"})," to ",(0,s.jsx)(n.em,{children:"tsconfig.tsruntime.json"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["change ",(0,s.jsx)(n.em,{children:'<AdditionalFiles Include="**\\*.js"'})," /> to ",(0,s.jsx)(n.em,{children:'<AdditionalFiles Include="**\\*.ts" />'})]}),"\n"]}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.p,{children:["Note:",(0,s.jsx)(n.br,{}),"\n",'To recognize a module, the file must end with ".js", ".ts" or ".d.ts".',(0,s.jsx)(n.br,{}),"\n",'Function definitions inside a module must start with "export function".',(0,s.jsx)(n.br,{}),"\n","Futhermore a function definition must not contain any line breaks."]}),(0,s.jsxs)(n.p,{children:["If using TypeScript types together with JSDoc types, JSDoc takes priority,\nbecause JSDoc is parsed after the function declaration and overwrites the previous type.",(0,s.jsx)(n.br,{}),"\n","But this problem should not exist in the first place as long you do not mix things up, use JS with JSDoc or TS with TSDoc."]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"config---tsruntimejson",children:"Config - tsruntime.json"}),(0,s.jsx)(n.p,{children:"All available config keys with its default value:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "webroot path": "",\n  "input path": {\n    "include": "/",\n    "excludes": [ "/bin", "/obj", "/Properties" ],\n    "module files": true\n  },\n  "using statements": [ "Microsoft.AspNetCore.Components", "System.Numerics" ],\n  "invoke function": {\n    "sync enabled": false,\n    "trysync enabled": true,\n    "async enabled": false,\n    "name pattern": {\n      "pattern": "#function#",\n      "module transform": "first upper case",\n      "function transform": "first upper case",\n      "action transform": "none",\n      "action name": {\n        "sync": "Invoke",\n        "trysync": "InvokeTrySync",\n        "async": "InvokeAsync"\n      }\n    },\n    "promise": {\n      "only async enabled": true,\n      "append async": false\n    },\n    "type map": {\n      "number": {\n        "type": "TNumber",\n        "generic types": {\n          "name": "TNumber",\n          "constraint": "INumber<TNumber>"\n        }\n      },\n      "boolean": "bool",\n      "Uint8Array": "byte[]",\n      "HTMLElement": "ElementReference"\n    }\n  },\n  "preload function": {\n    "name pattern": {\n      "pattern": "Preload#module#",\n      "module transform": "first upper case"\n    },\n    "all modules name": "PreloadAllModules",\n  },\n  "module grouping": {\n    "enabled": false,\n    "interface name pattern": {\n      "pattern": "I#module#Module",\n      "module transform": "first upper case"\n    }\n  },\n  "js runtime": {\n    "sync enabled": false,\n    "trysync enabled": false,\n    "async enabled": false\n  },\n  "service extension": true\n}\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/InputPath.md",children:"[webroot path]"})}),":\nRelative path to the web root (starting folder 'wwwroot' is ignored)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/InputPath.md",children:"[input path]"})}),":\nFolder where to locate the input files. Path relative to [webroot path] and must start with '/'."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/UsingStatements.md",children:"[using statements]"})}),":\nList of generated using statements at the top of ITSRuntime."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#invoke",children:"[invoke function].[sync enabled]"})}),":\nToggles whether sync invoke methods should be generated for modules."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#invoke",children:"[invoke function].[trysync enabled]"})}),":\nToggles whether try-sync invoke methods should be generated for modules."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#invoke",children:"[invoke function].[async enabled]"})}),":\nToggles whether async invoke methods should be generated for modules."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[pattern]"})}),":\nNaming of the generated methods that invoke module functions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[module transform]"})}),":\nLower/Upper case transform for the variable #module#."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[function transform]"})}),":\nLower/Upper case transform for the variable #function#."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[action transform]"})}),":\nLower/Upper case transform for the variable #action#.."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[action name][sync]"})}),":\nNaming of the #action# variable for the invoke module functions name pattern when the action is synchronous."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[action name][trysync]"})}),":\nNaming of the #action# variable for the invoke module functions name pattern when the action is try synchronous."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[invoke function].[name pattern].[action name][async]"})}),":\nNaming of the #action# variable for the invoke module functions name pattern when the action is asynchronous."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/PromiseFunction.md",children:"[invoke function].[promise].[only async enabled]"})}),":\nGenerates only async invoke method when return-type is promise."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/PromiseFunction.md",children:"[invoke function].[promise].[append async]"})}),":\nAppends to the name 'Async' when return-type is promise."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/TypeMap.md",children:"[invoke function].[type map]"})}),":\nMapping of TypeScript-types (key) to C#-types (value). Not listed types are mapped unchanged (Identity function)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[preload function].[name pattern].[pattern]"})}),":\nNaming of the generated methods that preloads a specific module."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[preload function].[name pattern].[module transform]"})}),":\nLower/Upper case transform for the variable #module#."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[preload function].[all modules name]"})}),":\nNaming of the method that preloads all modules."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/ModuleGrouping.md",children:"[module grouping].[enabled]"})}),":\nEach module gets it own interface and the functions of that module are only available in that interface."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[module grouping].[interface name pattern].[pattern]"})}),":\nNaming of the generated module interfaces when ",(0,s.jsx)(n.em,{children:"module grouping"})," is enabled."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/NamePattern.md",children:"[module grouping].[interface name pattern].[module transform]"})}),":\nLower/Upper case transform for the variable #module#."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/JSRuntime.md",children:"[js runtime].[sync enabled]"})}),":\nToggles whether generic JSRuntime sync invoke method should be generated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/JSRuntime.md",children:"[js runtime].[trysync enabled]"})}),":\nToggles whether generic JSRuntime try-sync invoke method should be generated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/JSRuntime.md",children:"[js runtime].[async enabled]"})}),":\nToggles whether generic JSRuntime async invoke method should be generated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/Blazor.TSRuntimeReadme_md/ModuleGrouping.md",children:"[service extension]"})}),":\nA service extension method is generated, which registers ITSRuntime and if enabled, the module interfaces."]}),"\n"]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"callback-function-as-parameter",children:"Callback (Function as Parameter)"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'/**\n * @param {(key: string) => Promise<number>} mapToId\n * @returns {Promise<void>}\n */\nexport async function callbackExample(mapToId) {\n    const id = await mapToId("42");\n    console.log(id);\n}\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// CallbackExample<int>(Func<string, int> mapToId)\nawait TsRuntime.CallbackExample((string key) => ValueTask.FromResult(key.GetHashCode()));\n"})}),(0,s.jsxs)(n.p,{children:["In JavaScript functions are first-class citizens and a variable/parameter can hold a function.\nIn C# the equivalent of that are delegates.\nSuch variables are also called callbacks.\nWhen using a JS-function as parameter, it will be mapped automatically to the corresponding ",(0,s.jsx)(n.em,{children:"Action<>"}),"/",(0,s.jsx)(n.em,{children:"Func<>"})," type.\nHowever, behind the scenes there is a lot going on to make this work and there are a few edge cases you should be aware of."]}),(0,s.jsx)(n.h3,{id:"syncasync-callbacks",children:"Sync/Async Callbacks"}),(0,s.jsxs)(n.p,{children:["To interop from C# to JS you can choose from 3 options: ",(0,s.jsx)(n.em,{children:"Sync"}),"/",(0,s.jsx)(n.em,{children:"TrySync"}),"/",(0,s.jsx)(n.em,{children:"Async"}),".\nYou may expect the same when using interop from JS to C#.\nUnfortunately, it is not implemented that way and you can only choose between ",(0,s.jsx)(n.em,{children:"Sync"})," and ",(0,s.jsx)(n.em,{children:"Async"}),":"]}),(0,s.jsxs)(n.p,{children:["If the return-type is not a ",(0,s.jsx)(n.em,{children:"Promise<T>"}),", it will be a ",(0,s.jsx)(n.em,{children:"Sync"})," call.",(0,s.jsx)(n.br,{}),"\n","If the return-type is a ",(0,s.jsx)(n.em,{children:"Promise<T>"}),", it will be ",(0,s.jsx)(n.em,{children:"Async"})," call."]}),(0,s.jsxs)(n.p,{children:["So, to make sure it works in every environment, your callbacks should always return a ",(0,s.jsx)(n.em,{children:"Promise<T>"}),".\nNote, in that case the return-type of your delegate will be ",(0,s.jsx)(n.em,{children:"ValueTask"}),"/",(0,s.jsx)(n.em,{children:"ValueTask<T>"}),".\nWhen your C# method itself is synchronous, just use ",(0,s.jsx)(n.em,{children:"ValueTask.CompletedTask"}),"/",(0,s.jsx)(n.em,{children:"ValueTask<T>.FromResult()"})," as return value."]}),(0,s.jsx)(n.h3,{id:"callback-module",children:"Callback Module"}),(0,s.jsxs)(n.p,{children:["To make the mapping possible, additional JS functions are needed.\nThese JS functions are located in an additional module, the ",(0,s.jsx)(n.em,{children:"callback"}),"-module.\nThis internal module loads automatically.",(0,s.jsx)(n.br,{}),"\n","For Sync-invoke scenarios, you must ensure that the used modules are loaded.\nThere is no dedicated ",(0,s.jsx)(n.em,{children:"Preload()"}),"-method for the ",(0,s.jsx)(n.em,{children:"callback"}),"-module,\nbut the ",(0,s.jsx)(n.em,{children:"PreloadAll()"}),"-method awaits also the ",(0,s.jsx)(n.em,{children:"callback"}),"-module."]}),(0,s.jsx)(n.h3,{id:"dotnetobjectreference",children:"DotNetObjectReference"}),(0,s.jsxs)(n.p,{children:["For the mapping a ",(0,s.jsx)(n.em,{children:"DotNetObjectReference"})," is created.\nTo make sure there is no memory leak, the ",(0,s.jsx)(n.em,{children:"DotNetObjectReference"}),' is disposed after the JS-call.\nThat means, immediately after the JS-call the callback is no longer available.\nSo, the JS-function must outlast the callback, otherwise a "',(0,s.jsx)(n.em,{children:"System.ArgumentException: There is no tracked object with id ..."}),'" occurs.\nIn sync-calls everything works fine,\nbut when your callback is async, your JS function must also be async and must complete after the callback completes.']}),(0,s.jsx)(n.h3,{id:"nested-functions-or-returning-a-function",children:"Nested Functions or Returning a Function"}),(0,s.jsxs)(n.p,{children:["A callback can have its own parameters and return-type.\nIf you put another callback as parameter or return-type,\nthe generated type will be ",(0,s.jsx)(n.em,{children:"CALLBACK_INSIDE_CALLBACK_NOT_SUPPORTED"})," or ",(0,s.jsx)(n.em,{children:"CALLBACK_RETURN_TYPE_NOT_SUPPORTED"}),", what leads to a compile error.",(0,s.jsx)(n.br,{}),"\n","Only callbacks as parameters without nesting are supported."]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"release-notes",children:"Release Notes"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["0.0.1","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"first version, includes all basic functionalities for generating TSRuntime"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.1","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'improved declaration path: Instead of one include string, an array of objects { "include": string, "excludes": string[], "file module path": string } is now supported'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.2","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"optional parameters and default parameter values are now supported"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.3","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"breaking changes: changed config keys, defaults and properties in Config, changed Config.FromJson(string json) to new Config(string json)"}),"\n",(0,s.jsx)(n.li,{children:'added key "generate on save" and "action name" keys to config'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.4","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"module grouping is now supported"}),"\n",(0,s.jsxs)(n.li,{children:["small breaking change: A namespace that contains IServiceCollection is required when serviceExtension is enabled and namespace ",(0,s.jsx)(n.em,{children:"Microsoft.Extensions.DependencyInjection"})," was added to the defaults"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.5","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"generics in type map are now supported"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.6","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"*** huge Refactoring, many breaking changes ***"}),"\n",(0,s.jsx)(n.li,{children:'renamed the project, repository and NuGet package to "Blazor.TSRuntime" (before it was "TSRuntime")'}),"\n",(0,s.jsxs)(n.li,{children:["dropped ",(0,s.jsx)(n.em,{children:"Programmatically Usage"})," and ",(0,s.jsx)(n.em,{children:"Visual Studio Extension"}),", only ",(0,s.jsx)(n.em,{children:"Source Generator"})," will be continued -> reduced project structure to 2 projects"]}),"\n",(0,s.jsxs)(n.li,{children:["changed ISourceGenerator to IIncrementalGenerator","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"tsconfig.tsruntime.json"})," can now be named ",(0,s.jsx)(n.em,{children:"*.tsruntime.json"})]}),"\n",(0,s.jsxs)(n.li,{children:[".d.ts-files must be added with ",(0,s.jsx)(n.em,{children:'<AdditionalFiles Include="**\\*.d.ts" />'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["added config key ",(0,s.jsx)(n.em,{children:"webroot path"})]}),"\n",(0,s.jsxs)(n.li,{children:["moved config key ",(0,s.jsx)(n.em,{children:"[module grouping].[service extension]"})," to ",(0,s.jsx)(n.em,{children:"[service extension]"})]}),"\n",(0,s.jsx)(n.li,{children:'renamed key "declaration path" to "input path"'}),"\n",(0,s.jsx)(n.li,{children:'renamed key "file module path" to "module path"'}),"\n",(0,s.jsx)(n.li,{children:'renamed key "append Async" to "append async"'}),"\n",(0,s.jsx)(n.li,{children:'Config.InputPath.ModulePath must end with ".js"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.7","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"breaking change: [input path] ('include', 'excludes', 'module path') must start with '/'"}),"\n",(0,s.jsx)(n.li,{children:"generic TS-functions are now supported"}),"\n",(0,s.jsx)(n.li,{children:"TS-function description is mapped to C# method description. Currently supported tags are <summary>, <remarks>, <param>, <returns>"}),"\n",(0,s.jsx)(n.li,{children:"JS-files with JSDocs type annotations are now supported"}),"\n",(0,s.jsx)(n.li,{children:"TS-files are now supported"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["0.8","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"scripts are supported (non-module-files: js-files that are included via <script> tag)"}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["1.0","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["callbacks are supported: Mapping parameters of a function type to the corresponding C# delegate (",(0,s.jsx)(n.em,{children:"Action<>"}),"/",(0,s.jsx)(n.em,{children:"Func<>"}),")"]}),"\n",(0,s.jsx)(n.li,{children:'JSDoc "@typeparam" tag is now supported'}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Generating C# Code for Blazor from javascript files"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"Blazor.TSRuntime"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {10}",children:'<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">\n\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Blazor.TSRuntime" Version="1.0.1">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n\n\t  <AdditionalFiles Include="tsruntime.json" />\n\t  <AdditionalFiles Include="**/*.js" Exclude="bin/**;obj/**;Properties/**" />\n\t  \n\t  \n    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="9.0.8" />\n    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="9.0.8" PrivateAssets="all" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,s.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Blazor.TSRuntime"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using BlazorData;\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.JSInterop;\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>("#app");\nbuilder.RootComponents.Add<HeadOutlet>("head::after");\nbuilder.Services.AddTSRuntime();\nbuilder.Services.AddScoped(sp => new HttpClient \\{ BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\nawait builder.Build().RunAsync();\n\n'})})]}),(0,s.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\tsruntime.json",label:"tsruntime.json",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Blazor.TSRuntime"})," in ",(0,s.jsx)(n.em,{children:"tsruntime.json"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'{\n  "invoke function": {\n    "sync enabled": false,\n    "trysync enabled": true,\n    "async enabled": false,\n    "name pattern": {\n      "pattern": "#function#",\n      "module transform": "first upper case",\n      "function transform": "first upper case",\n      "action transform": "none"\n    },\n    "type map": {\n      "number": {\n        "type": "TNumber",\n        "generic types": {\n          "name": "TNumber",\n          "constraint": "INumber<TNumber>"\n        }\n      },\n      "boolean": "bool",\n      "Uint8Array": "byte[]",\n      "HTMLElement": "ElementReference"\n    }\n  }\n}\n'})})]}),(0,s.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\Pages\\Home.razor",label:"Home.razor",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Blazor.TSRuntime"})," in ",(0,s.jsx)(n.em,{children:"Home.razor"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'@page "/"\n\n<PageTitle>Home</PageTitle>\n\n<h1>Hello, world!</h1>\n<a  onclick="@SayHello">Click</a>\n\n\n@code {\n    [Inject]\n    IJSRuntime JS \\{ get; set; }\n\n    [Inject]\n    public required ITSRuntime TsRuntime \\{ private get; init; }\n\n    public async Task SayHello()\n    {\n        Console.WriteLine("Hello from Blazor");\n        await TsRuntime.SayHello("Andrei");\n    }\n}\n'})})]}),(0,s.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\Pages\\Home.razor.js",label:"Home.razor.js",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Blazor.TSRuntime"})," in ",(0,s.jsx)(n.em,{children:"Home.razor.js"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'/**\n * Displays a greeting alert with the provided name.\n * @param {string} name - The name to include in the greeting.\n */\nexport function SayHello(name) {\n    alert("Hello from JavaScript," + name);\n}\n'})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_bootstrap.g.cs",label:"ITSRuntime_bootstrap.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> GetbootstrapModule();\n\n    /// <summary>\n    /// <para>Loads 'bootstrap' (/wwwroot/lib/bootstrap/dist/js/bootstrap.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadBootstrap() => GetbootstrapModule();\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_bootstrap_bundle.g.cs",label:"ITSRuntime_bootstrap_bundle.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> Getbootstrap_bundleModule();\n\n    /// <summary>\n    /// <para>Loads 'bootstrap_bundle' (/wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadBootstrap_bundle() => Getbootstrap_bundleModule();\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_bootstrap_bundle_min.g.cs",label:"ITSRuntime_bootstrap_bundle_min.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> Getbootstrap_bundle_minModule();\n\n    /// <summary>\n    /// <para>Loads 'bootstrap_bundle_min' (/wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.min.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadBootstrap_bundle_min() => Getbootstrap_bundle_minModule();\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_bootstrap_esm.g.cs",label:"ITSRuntime_bootstrap_esm.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> Getbootstrap_esmModule();\n\n    /// <summary>\n    /// <para>Loads 'bootstrap_esm' (/wwwroot/lib/bootstrap/dist/js/bootstrap.esm.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadBootstrap_esm() => Getbootstrap_esmModule();\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_bootstrap_esm_min.g.cs",label:"ITSRuntime_bootstrap_esm_min.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> Getbootstrap_esm_minModule();\n\n    /// <summary>\n    /// <para>Loads 'bootstrap_esm_min' (/wwwroot/lib/bootstrap/dist/js/bootstrap.esm.min.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadBootstrap_esm_min() => Getbootstrap_esm_minModule();\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_bootstrap_min.g.cs",label:"ITSRuntime_bootstrap_min.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> Getbootstrap_minModule();\n\n    /// <summary>\n    /// <para>Loads 'bootstrap_min' (/wwwroot/lib/bootstrap/dist/js/bootstrap.min.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadBootstrap_min() => Getbootstrap_minModule();\n}\n\n"})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_Core.g.cs",label:"ITSRuntime_Core.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Microsoft.JSInterop;\n\n/// <summary>\n/// <para>Interface for JS-interop.</para>\n/// <para>It contains an invoke-method for every js-function, a preload-method for every module and a method to load all modules.</para>\n/// </summary>\n[System.CodeDom.Compiler.GeneratedCodeAttribute("Blazor.TSRuntime", "1.0.1")]\npublic partial interface ITSRuntime {\n    /// <summary>\n    /// <para>Fetches all modules as javascript-modules.</para>\n    /// <para>If already loading, it doesn\'t trigger a second loading and if any already loaded, these are not loaded again, so if all already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when all module loading Tasks have completed.</returns>\n    public Task PreloadAllModules();\n\n\n\n    /// <summary>\n    /// <para>Invokes the specified JavaScript function synchronously.</para>\n    /// <para>If module is not loaded or synchronous is not supported, it fails with an exception.</para>\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <returns></returns>\n    protected TResult TSInvoke<TResult>(string identifier, object?[]? args);\n\n    /// <summary>\n    /// Invokes the specified JavaScript function synchronously when supported, otherwise asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeTrySync<TResult>(string identifier, object?[]? args, CancellationToken cancellationToken);\n\n    /// <summary>\n    /// Invokes the specified JavaScript function asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeAsync<TResult>(string identifier, object?[]? args, CancellationToken cancellationToken);\n\n\n    /// <summary>\n    /// <para>Invokes the specified JavaScript function in the specified module synchronously.</para>\n    /// <para>If module is not loaded or synchronous is not supported, it fails with an exception.</para>\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <param name="moduleTask">The loading task of a module</param>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <returns></returns>\n    protected TResult TSInvoke<TResult>(Task<IJSObjectReference> moduleTask, string identifier, object?[]? args);\n\n    /// <summary>\n    /// Invokes the specified JavaScript function in the specified module synchronously when supported, otherwise asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <param name="moduleTask">The loading task of a module</param>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeTrySync<TResult>(Task<IJSObjectReference> moduleTask, string identifier, object?[]? args, CancellationToken cancellationToken);\n\n    /// <summary>\n    /// Invokes the specified JavaScript function in the specified module asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <param name="moduleTask">The loading task of a module</param>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeAsync<TResult>(Task<IJSObjectReference> moduleTask, string identifier, object?[]? args, CancellationToken cancellationToken);\n\n\n    /// <summary>\n    /// <para>Invokes the specified JavaScript function synchronously.</para>\n    /// <para>If module is not loaded or synchronous is not supported, it fails with an exception.</para>\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <typeparam name="TCallback"></typeparam>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="dotNetObjectReference">reference to a csharp object with callback functions</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <returns></returns>\n    protected TResult TSInvoke<TResult, TCallback>(string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args) where TCallback : class;\n\n    /// <summary>\n    /// Invokes the specified JavaScript function synchronously when supported, otherwise asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <typeparam name="TCallback"></typeparam>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="dotNetObjectReference">reference to a csharp object with callback functions</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeTrySync<TResult, TCallback>(string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class;\n\n    /// <summary>\n    /// Invokes the specified JavaScript function asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <typeparam name="TCallback"></typeparam>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="dotNetObjectReference">reference to a csharp object with callback functions</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeAsync<TResult, TCallback>(string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class;\n\n\n    /// <summary>\n    /// <para>Invokes the specified JavaScript function in the specified module synchronously.</para>\n    /// <para>If module is not loaded or synchronous is not supported, it fails with an exception.</para>\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <typeparam name="TCallback"></typeparam>\n    /// <param name="moduleTask">The loading task of a module</param>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="dotNetObjectReference">reference to a csharp object with callback functions</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <returns></returns>\n    protected TResult TSInvoke<TResult, TCallback>(Task<IJSObjectReference> moduleTask, string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args) where TCallback : class;\n\n    /// <summary>\n    /// Invokes the specified JavaScript function in the specified module synchronously when supported, otherwise asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <typeparam name="TCallback"></typeparam>\n    /// <param name="moduleTask">The loading task of a module</param>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="dotNetObjectReference">reference to a csharp object with callback functions</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeTrySync<TResult, TCallback>(Task<IJSObjectReference> moduleTask, string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class;\n\n    /// <summary>\n    /// Invokes the specified JavaScript function in the specified module asynchronously.\n    /// </summary>\n    /// <typeparam name="TResult"></typeparam>\n    /// <typeparam name="TCallback"></typeparam>\n    /// <param name="moduleTask">The loading task of a module</param>\n    /// <param name="identifier">name of the javascript function</param>\n    /// <param name="dotNetObjectReference">reference to a csharp object with callback functions</param>\n    /// <param name="args">parameter passing to the JS-function</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns></returns>\n    protected ValueTask<TResult> TSInvokeAsync<TResult, TCallback>(Task<IJSObjectReference> moduleTask, string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class;\n}\n\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\ITSRuntime_Home.g.cs",label:"ITSRuntime_Home.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components;\nusing System.Numerics;\n\nnamespace Microsoft.JSInterop;\n\npublic partial interface ITSRuntime {\n    protected Task<IJSObjectReference> GetHomeModule();\n\n    /// <summary>\n    /// <para>Loads \'Home\' (/Pages/Home.razor.js) as javascript-module.</para>\n    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>\n    /// </summary>\n    /// <returns>A Task that will complete when the module import have completed.</returns>\n    public Task PreloadHome() => GetHomeModule();\n\n\n    /// <summary>\n    /// <para>Displays a greeting alert with the provided name.</para>\n    /// <para>Invokes in module \'Home\' the JS-function \'SayHello\' synchronously when supported, otherwise asynchronously.</para>\n    /// </summary>\n    /// <param name="name">The name to include in the greeting.</param>\n    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>\n    /// <returns>A Task that will complete when the JS-Function have completed.</returns>\n    public async ValueTask SayHello(string name, CancellationToken cancellationToken = default) {\n        await TSInvokeTrySync<Infrastructure.IJSVoidResult>(GetHomeModule(), "SayHello", [name], cancellationToken);\n    }\n}\n\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\TSRuntime.g.cs",label:"TSRuntime.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Microsoft.JSInterop;\n\n/// <summary>\n/// <para>An implementation for <see cref="ITSRuntime"/>.</para>\n/// <para>It manages JS-modules: It loads the modules, caches it in an array and disposing releases all modules.</para>\n/// <para>\n/// There are 7 modules available:<br />\n/// - Home<br />\n/// - bootstrap_bundle<br />\n/// - bootstrap_bundle_min<br />\n/// - bootstrap_esm<br />\n/// - bootstrap_esm_min<br />\n/// - bootstrap<br />\n/// - bootstrap_min\n/// </para>\n/// </summary>\n[System.CodeDom.Compiler.GeneratedCodeAttribute("Blazor.TSRuntime", "1.0.1")]\npublic sealed class TSRuntime(IJSRuntime jsRuntime) : ITSRuntime, IDisposable, IAsyncDisposable {\n    private readonly CancellationTokenSource cancellationTokenSource = new();\n\n    Task<IJSObjectReference> ITSRuntime.GetHomeModule() => GetHomeModule();\n    private Task<IJSObjectReference>? HomeModule;\n    private Task<IJSObjectReference> GetHomeModule()\n        => HomeModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => HomeModule,\n            _ => HomeModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/Pages/Home.razor.js").AsTask()\n        };\n\n    Task<IJSObjectReference> ITSRuntime.Getbootstrap_bundleModule() => Getbootstrap_bundleModule();\n    private Task<IJSObjectReference>? bootstrap_bundleModule;\n    private Task<IJSObjectReference> Getbootstrap_bundleModule()\n        => bootstrap_bundleModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => bootstrap_bundleModule,\n            _ => bootstrap_bundleModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js").AsTask()\n        };\n\n    Task<IJSObjectReference> ITSRuntime.Getbootstrap_bundle_minModule() => Getbootstrap_bundle_minModule();\n    private Task<IJSObjectReference>? bootstrap_bundle_minModule;\n    private Task<IJSObjectReference> Getbootstrap_bundle_minModule()\n        => bootstrap_bundle_minModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => bootstrap_bundle_minModule,\n            _ => bootstrap_bundle_minModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.min.js").AsTask()\n        };\n\n    Task<IJSObjectReference> ITSRuntime.Getbootstrap_esmModule() => Getbootstrap_esmModule();\n    private Task<IJSObjectReference>? bootstrap_esmModule;\n    private Task<IJSObjectReference> Getbootstrap_esmModule()\n        => bootstrap_esmModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => bootstrap_esmModule,\n            _ => bootstrap_esmModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/wwwroot/lib/bootstrap/dist/js/bootstrap.esm.js").AsTask()\n        };\n\n    Task<IJSObjectReference> ITSRuntime.Getbootstrap_esm_minModule() => Getbootstrap_esm_minModule();\n    private Task<IJSObjectReference>? bootstrap_esm_minModule;\n    private Task<IJSObjectReference> Getbootstrap_esm_minModule()\n        => bootstrap_esm_minModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => bootstrap_esm_minModule,\n            _ => bootstrap_esm_minModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/wwwroot/lib/bootstrap/dist/js/bootstrap.esm.min.js").AsTask()\n        };\n\n    Task<IJSObjectReference> ITSRuntime.GetbootstrapModule() => GetbootstrapModule();\n    private Task<IJSObjectReference>? bootstrapModule;\n    private Task<IJSObjectReference> GetbootstrapModule()\n        => bootstrapModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => bootstrapModule,\n            _ => bootstrapModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/wwwroot/lib/bootstrap/dist/js/bootstrap.js").AsTask()\n        };\n\n    Task<IJSObjectReference> ITSRuntime.Getbootstrap_minModule() => Getbootstrap_minModule();\n    private Task<IJSObjectReference>? bootstrap_minModule;\n    private Task<IJSObjectReference> Getbootstrap_minModule()\n        => bootstrap_minModule switch {\n            Task<IJSObjectReference> \\{ IsCompletedSuccessfully: true }\n            or Task<IJSObjectReference> \\{ IsCompleted: false \\} => bootstrap_minModule,\n            _ => bootstrap_minModule = jsRuntime.InvokeAsync<IJSObjectReference>("import", cancellationTokenSource.Token, "/wwwroot/lib/bootstrap/dist/js/bootstrap.min.js").AsTask()\n        };\n\n    public Task PreloadAllModules() {\n        GetHomeModule();\n        Getbootstrap_bundleModule();\n        Getbootstrap_bundle_minModule();\n        Getbootstrap_esmModule();\n        Getbootstrap_esm_minModule();\n        GetbootstrapModule();\n        Getbootstrap_minModule();\n\n        return Task.WhenAll([HomeModule!, bootstrap_bundleModule!, bootstrap_bundle_minModule!, bootstrap_esmModule!, bootstrap_esm_minModule!, bootstrapModule!, bootstrap_minModule!]);\n    }\n\n\n    TResult ITSRuntime.TSInvoke<TResult>(string identifier, object?[]? args) => ((IJSInProcessRuntime)jsRuntime).Invoke<TResult>(identifier, args);\n\n    ValueTask<TResult> ITSRuntime.TSInvokeTrySync<TResult>(string identifier, object?[]? args, CancellationToken cancellationToken) {\n        if (jsRuntime is IJSInProcessRuntime jsInProcessRuntime)\n            return ValueTask.FromResult(jsInProcessRuntime.Invoke<TResult>(identifier, args));\n        else\n            return jsRuntime.InvokeAsync<TResult>(identifier, cancellationToken, args);\n    }\n\n    ValueTask<TResult> ITSRuntime.TSInvokeAsync<TResult>(string identifier, object?[]? args, CancellationToken cancellationToken)\n        => jsRuntime.InvokeAsync<TResult>(identifier, cancellationToken, args);\n\n\n    TResult ITSRuntime.TSInvoke<TResult>(Task<IJSObjectReference> moduleTask, string identifier, object?[]? args) {\n        if (!moduleTask.IsCompletedSuccessfully)\n            throw new JSException("JS-module is not loaded. Use and await the Preload()-method to ensure the module is loaded.");\n\n        return ((IJSInProcessObjectReference)moduleTask.Result).Invoke<TResult>(identifier, args);\n    }\n\n    async ValueTask<TResult> ITSRuntime.TSInvokeTrySync<TResult>(Task<IJSObjectReference> moduleTask, string identifier, object?[]? args, CancellationToken cancellationToken) {\n        IJSObjectReference module = await moduleTask;\n        if (module is IJSInProcessObjectReference inProcessModule)\n            return inProcessModule.Invoke<TResult>(identifier, args);\n        else\n            return await module.InvokeAsync<TResult>(identifier, cancellationToken, args);\n    }\n\n    async ValueTask<TResult> ITSRuntime.TSInvokeAsync<TResult>(Task<IJSObjectReference> moduleTask, string identifier, object?[]? args, CancellationToken cancellationToken) {\n        IJSObjectReference module = await moduleTask;\n        return await module.InvokeAsync<TResult>(identifier, cancellationToken, args);\n    }\n\n\n    TResult ITSRuntime.TSInvoke<TResult, TCallback>(string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args) where TCallback : class => default; // no callbacks are used\n\n    ValueTask<TResult> ITSRuntime.TSInvokeTrySync<TResult, TCallback>(string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class => default; // no callbacks are used\n\n    ValueTask<TResult> ITSRuntime.TSInvokeAsync<TResult, TCallback>(string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class => default; // no callbacks are used\n\n\n    TResult ITSRuntime.TSInvoke<TResult, TCallback>(Task<IJSObjectReference> moduleTask, string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args) where TCallback : class  => default; // no callbacks are used\n\n    ValueTask<TResult> ITSRuntime.TSInvokeTrySync<TResult, TCallback>(Task<IJSObjectReference> moduleTask, string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class  => default; // no callbacks are used\n\n    ValueTask<TResult> ITSRuntime.TSInvokeAsync<TResult, TCallback>(Task<IJSObjectReference> moduleTask, string identifier, DotNetObjectReference<TCallback> dotNetObjectReference, object?[]? args, CancellationToken cancellationToken) where TCallback : class => default; // no callbacks are used\n\n\n\n    /// <summary>\n    /// Releases each module synchronously if possible, otherwise asynchronously per fire and forget.\n    /// </summary>\n    public void Dispose() {\n        if (cancellationTokenSource.IsCancellationRequested)\n            return;\n\n        cancellationTokenSource.Cancel();\n        cancellationTokenSource.Dispose();\n\n        if (HomeModule?.IsCompletedSuccessfully == true)\n            if (HomeModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = HomeModule.Result.DisposeAsync().Preserve();\n        HomeModule = null;\n\n        if (bootstrap_bundleModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_bundleModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = bootstrap_bundleModule.Result.DisposeAsync().Preserve();\n        bootstrap_bundleModule = null;\n\n        if (bootstrap_bundle_minModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_bundle_minModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = bootstrap_bundle_minModule.Result.DisposeAsync().Preserve();\n        bootstrap_bundle_minModule = null;\n\n        if (bootstrap_esmModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_esmModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = bootstrap_esmModule.Result.DisposeAsync().Preserve();\n        bootstrap_esmModule = null;\n\n        if (bootstrap_esm_minModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_esm_minModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = bootstrap_esm_minModule.Result.DisposeAsync().Preserve();\n        bootstrap_esm_minModule = null;\n\n        if (bootstrapModule?.IsCompletedSuccessfully == true)\n            if (bootstrapModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = bootstrapModule.Result.DisposeAsync().Preserve();\n        bootstrapModule = null;\n\n        if (bootstrap_minModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_minModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else\n                _ = bootstrap_minModule.Result.DisposeAsync().Preserve();\n        bootstrap_minModule = null;\n    }\n\n    /// <summary>\n    /// <para>Releases each module synchronously if possible, otherwise asynchronously and returns a task that completes, when all module disposing tasks complete.</para>\n    /// <para>The asynchronous disposing tasks are happening in parallel.</para>\n    /// </summary>\n    /// <returns></returns>\n    public ValueTask DisposeAsync() {\n        if (cancellationTokenSource.IsCancellationRequested)\n            return ValueTask.CompletedTask;\n\n        cancellationTokenSource.Cancel();\n        cancellationTokenSource.Dispose();\n\n        List<Task> taskList = new(7);\n\n        if (HomeModule?.IsCompletedSuccessfully == true)\n            if (HomeModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = HomeModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        HomeModule = null;\n\n        if (bootstrap_bundleModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_bundleModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = bootstrap_bundleModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        bootstrap_bundleModule = null;\n\n        if (bootstrap_bundle_minModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_bundle_minModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = bootstrap_bundle_minModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        bootstrap_bundle_minModule = null;\n\n        if (bootstrap_esmModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_esmModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = bootstrap_esmModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        bootstrap_esmModule = null;\n\n        if (bootstrap_esm_minModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_esm_minModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = bootstrap_esm_minModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        bootstrap_esm_minModule = null;\n\n        if (bootstrapModule?.IsCompletedSuccessfully == true)\n            if (bootstrapModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = bootstrapModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        bootstrapModule = null;\n\n        if (bootstrap_minModule?.IsCompletedSuccessfully == true)\n            if (bootstrap_minModule.Result is IJSInProcessObjectReference inProcessModule)\n                inProcessModule.Dispose();\n            else {\n                ValueTask valueTask = bootstrap_minModule.Result.DisposeAsync();\n                if (!valueTask.IsCompleted)\n                    taskList.Add(valueTask.AsTask());\n            }\n        bootstrap_minModule = null;\n\n        if (taskList.Count == 0)\n            return ValueTask.CompletedTask;\n        else\n            return new ValueTask(Task.WhenAll(taskList));\n    }\n}\n\n'})})}),(0,s.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Blazor.TSRuntime\\src\\BlazorData\\obj\\GX\\Blazor.TSRuntime\\TSRuntime.TSRuntimeGenerator\\TSRuntime_ServiceExtension.g.cs",label:"TSRuntime_ServiceExtension.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Microsoft.JSInterop;\n\n[System.CodeDom.Compiler.GeneratedCodeAttribute("Blazor.TSRuntime", "1.0.1")]\npublic static class TSRuntimeServiceExtension {\n    /// <summary>\n    /// Registers a scoped ITSRuntime with a TSRuntime as implementation and if available, registers the module interfaces with the same TSRuntime-object.\n    /// </summary>\n    /// <param name="services"></param>\n    /// <returns></returns>\n    public static IServiceCollection AddTSRuntime(this IServiceCollection services) {\n        services.AddScoped<ITSRuntime, TSRuntime>();\n\n        return services;\n    }\n}\n\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:a(57727).A+"",children:"Download Example project Blazor.TSRuntime "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-blazortsruntime",children:"Share Blazor.TSRuntime"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBlazor.TSRuntime&quote=Blazor.TSRuntime",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBlazor.TSRuntime&text=Blazor.TSRuntime:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBlazor.TSRuntime",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBlazor.TSRuntime&title=Blazor.TSRuntime",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBlazor.TSRuntime&title=Blazor.TSRuntime&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FBlazor.TSRuntime",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Blazor.TSRuntime",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Blazor.TSRuntime"})}),"\n",(0,s.jsx)(n.p,{children:"aaa"}),"\n",(0,s.jsx)(c.Ay,{})]})}function b(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},44562:(e,n,a)=>{a.d(n,{Ay:()=>i,RM:()=>r});var t=a(74848),s=a(28453);const r=[{value:"Category &quot;Blazor&quot; has the following generators:",id:"category-blazor-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function o(e){const n={a:"a",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"category-blazor-has-the-following-generators",children:'Category "Blazor" has the following generators:'}),"\n",(0,t.jsxs)(n.p,{children:["1 ",(0,t.jsx)(n.a,{href:"/docs/BadIdeas.Icons.FontAwesome",children:"BadIdeas.Icons.FontAwesome"})]}),"\n",(0,t.jsxs)(n.p,{children:["2 ",(0,t.jsx)(n.a,{href:"/docs/Blazor.TSRuntime",children:"Blazor.TSRuntime"})]}),"\n",(0,t.jsxs)(n.p,{children:["3 ",(0,t.jsx)(n.a,{href:"/docs/Blazorators",children:"Blazorators"})]}),"\n",(0,t.jsxs)(n.p,{children:["4 ",(0,t.jsx)(n.a,{href:"/docs/GoLive.Generator.BlazorInterop",children:"GoLive.Generator.BlazorInterop"})]}),"\n",(0,t.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/Categories/Blazor",children:"Blazor"})})]})}function i(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},57727:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/files/Blazor.TSRuntime-3b165853e0257dd876f538fba4d3d958.zip"}}]);