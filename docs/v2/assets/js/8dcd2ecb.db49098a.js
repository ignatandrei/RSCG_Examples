"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2226],{19202:(e,r,i)=>{i.d(r,{A:()=>s});const s=i.p+"assets/files/StepwiseBuilderGenerator-73bfe027fc978387b0dfa7507e9c1cd0.zip"},94344:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"RSCG-Examples/StepwiseBuilderGenerator","title":"188 - StepwiseBuilderGenerator","description":"Generating Builder- as steps","source":"@site/docs/RSCG-Examples/StepwiseBuilderGenerator.md","sourceDirName":"RSCG-Examples","slug":"/StepwiseBuilderGenerator","permalink":"/RSCG_Examples/v2/docs/StepwiseBuilderGenerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/StepwiseBuilderGenerator.md","tags":[],"version":"current","sidebarPosition":1880,"frontMatter":{"sidebar_position":1880,"title":"188 - StepwiseBuilderGenerator","description":"Generating Builder- as steps","slug":"/StepwiseBuilderGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"187 - EntityLengths.Generator","permalink":"/RSCG_Examples/v2/docs/EntityLengths.Generator"},"next":{"title":"189 - MemberAccessor","permalink":"/RSCG_Examples/v2/docs/MemberAccessor"}}');var n=i(74848),t=i(28453),l=i(11470),a=i(19365),d=i(14252);const o={sidebar_position:1880,title:"188 - StepwiseBuilderGenerator",description:"Generating Builder- as steps",slug:"/StepwiseBuilderGenerator"},c="StepwiseBuilderGenerator  by Georgiy Petrov",h={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Why Use Stepwise Builders?",id:"why-use-stepwise-builders",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Quick Start Example",id:"quick-start-example",level:2},{value:"1. Create a Class &amp; Decorate with <code>[StepwiseBuilder]</code>",id:"1-create-a-class--decorate-with-stepwisebuilder",level:3},{value:"2. Using the Generated Builder",id:"2-using-the-generated-builder",level:3},{value:"3. Branching from Another Builder",id:"3-branching-from-another-builder",level:3},{value:"FAQ",id:"faq",level:2},{value:"1. What if I have generics in my class?",id:"1-what-if-i-have-generics-in-my-class",level:3},{value:"2. What if I have a <strong>branch</strong> in a <strong>generic</strong> class?",id:"2-what-if-i-have-a-branch-in-a-generic-class",level:3},{value:"3. Can I add custom logic to steps?",id:"3-can-i-add-custom-logic-to-steps",level:3},{value:"4. What happens if I omit a step\u2019s <code>fieldName</code> parameter?",id:"4-what-happens-if-i-omit-a-steps-fieldname-parameter",level:3},{value:"5. Should I always write the build logic in <code>.Build(...)</code>?",id:"5-should-i-always-write-the-build-logic-in-build",level:3},{value:"Steps Enum",id:"steps-enum",level:2},{value:"Factory Methods in StepwiseBuilders",id:"factory-methods-in-stepwisebuilders",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share StepwiseBuilderGenerator",id:"share-stepwisebuildergenerator",level:3},{value:"In the same category (Builder) - 4 other generators",id:"in-the-same-category-builder---4-other-generators",level:3},{value:"Architect.DomainModeling",id:"architectdomainmodeling",level:4},{value:"BuilderGenerator",id:"buildergenerator",level:4},{value:"Fluentify",id:"fluentify",level:4},{value:"Hsu.Sg.FluentMember",id:"hsusgfluentmember",level:4}];function p(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"stepwisebuildergenerator--by-georgiy-petrov",children:"StepwiseBuilderGenerator  by Georgiy Petrov"})}),"\n",(0,n.jsx)(d.A,{toc:u}),"\n",(0,n.jsx)(r.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/StepwiseBuilderGenerator/",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/nuget/dt/StepwiseBuilderGenerator?label=StepwiseBuilderGenerator",alt:"Nuget"})}),"\n",(0,n.jsx)(r.a,{href:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/github/last-commit/Georgiy-Petrov/StepwiseBuilderGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,n.jsx)(r.img,{src:"https://img.shields.io/github/stars/Georgiy-Petrov/StepwiseBuilderGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,n.jsx)(r.h2,{id:"details",children:"Details"}),"\n",(0,n.jsx)(r.h3,{id:"info",children:"Info"}),"\n",(0,n.jsxs)(r.admonition,{type:"info",children:[(0,n.jsxs)(r.p,{children:["Name: ",(0,n.jsx)(r.strong,{children:"StepwiseBuilderGenerator"})]}),(0,n.jsx)(r.p,{children:"This package provides a Source Generator that creates strongly-typed, stepwise \u201cfluent\u201d builders for your types. You simply annotate a class with [StepwiseBuilder] and specify the steps you need in the class\u2019s parameterless constructor. The source generator then produces a partial class containing builder interfaces and step methods."}),(0,n.jsx)(r.p,{children:"Author: Georgiy Petrov"}),(0,n.jsxs)(r.p,{children:["NuGet:\n",(0,n.jsx)(r.em,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/StepwiseBuilderGenerator/",children:"https://www.nuget.org/packages/StepwiseBuilderGenerator/"})})]}),(0,n.jsxs)(r.p,{children:["You can find more details at ",(0,n.jsx)(r.a,{href:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator",children:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator"})]}),(0,n.jsxs)(r.p,{children:["Source: ",(0,n.jsx)(r.a,{href:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator",children:"https://github.com/Georgiy-Petrov/StepwiseBuilderGenerator"})]})]}),"\n",(0,n.jsx)(r.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,n.jsxs)(r.admonition,{type:"note",children:[(0,n.jsx)(r.h1,{id:"stepwise-builder-generator",children:"Stepwise Builder Generator"}),(0,n.jsxs)(r.p,{children:["This repository provides a ",(0,n.jsx)(r.strong,{children:"Source Generator"})," that creates strongly-typed, stepwise \u201cfluent\u201d builders for your types.\nYou simply annotate a class with ",(0,n.jsx)(r.code,{children:"[StepwiseBuilder]"})," and specify the steps you need in the class\u2019s parameterless\nconstructor. The source generator then produces a partial class containing builder interfaces and step methods."]}),(0,n.jsx)(r.h2,{id:"why-use-stepwise-builders",children:"Why Use Stepwise Builders?"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Compile-time safety"}),": Each required step is enforced in sequence."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Reduced boilerplate"}),": No need to handwrite repetitive builder chains."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Readable & maintainable"}),": Clean, fluent APIs that guide users step-by-step."]}),"\n"]}),(0,n.jsx)(r.h2,{id:"how-it-works",children:"How It Works"}),(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsxs)(r.strong,{children:["Annotate a class with ",(0,n.jsx)(r.code,{children:"[StepwiseBuilder]"}),"."]})}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Inside the parameterless constructor"}),", create a chain of methods using ",(0,n.jsx)(r.code,{children:"GenerateStepwiseBuilder()"}),":","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"AddStep<TArgument>(stepName, fieldName = null)"})}),": adds a step to capture a value of type ",(0,n.jsx)(r.code,{children:"TArgument"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:'BranchFrom("BaseBuilderName", "BaseBuilderStep")'})})," (optional): indicates an alternate path is offered from the\nstep ",(0,n.jsx)(r.strong,{children:"before"})," ",(0,n.jsx)(r.code,{children:"BaseBuilderStep"})," in ",(0,n.jsx)(r.code,{children:"BaseBuilderName"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"CreateBuilderFor<TResult>()"})}),": defines the final target type being built."]}),"\n"]}),"\n"]}),"\n"]}),(0,n.jsx)(r.p,{children:"When you compile, the generator inspects these calls and automatically produces:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"A partial builder class"})," that implements interfaces representing each step."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"A chain of interfaces"})," (e.g., ",(0,n.jsx)(r.code,{children:"IYourClassFirstStep"}),", ",(0,n.jsx)(r.code,{children:"IYourClassSecondStep"}),", \u2026) to enforce the order of steps."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"An optional extension method"})," if you used ",(0,n.jsx)(r.code,{children:"BranchFrom(...)"}),", allowing you to jump to a new step at the point *\n",(0,n.jsx)(r.em,{children:"before"}),"* a specified step in another builder\u2019s chain."]}),"\n"]}),(0,n.jsx)(r.hr,{}),(0,n.jsx)(r.h2,{id:"quick-start-example",children:"Quick Start Example"}),(0,n.jsxs)(r.h3,{id:"1-create-a-class--decorate-with-stepwisebuilder",children:["1. Create a Class & Decorate with ",(0,n.jsx)(r.code,{children:"[StepwiseBuilder]"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'using StepwiseBuilderGenerator;\n\n[StepwiseBuilder]\npublic partial class MyClass\n{\n    public MyClass() // Parameterless constructor\n    {\n        GenerateStepwiseBuilder()\n            .AddStep<int>("FirstStep", "MyIntField")\n            .AddStep<string>("SecondStep")  // defaults to "SecondStepValue"\n            .AddStep<bool>("ThirdStep")     // further step\n            .CreateBuilderFor<MyTargetType>();\n    }\n}\n'})}),(0,n.jsxs)(r.p,{children:["When you build your project, the generator produces ",(0,n.jsx)(r.code,{children:"MyClass.g.cs"})," in the same namespace, containing:"]}),(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"IMyClassFirstStep"})})," with ",(0,n.jsx)(r.code,{children:".FirstStep(int value)"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"IMyClassSecondStep"})})," with ",(0,n.jsx)(r.code,{children:".SecondStep(string value)"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"IMyClassThirdStep"})})," with ",(0,n.jsx)(r.code,{children:".ThirdStep(bool value)"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"IMyClassBuild"})})," with ",(0,n.jsx)(r.code,{children:".Build(Func<MyClass, MyTargetType> buildFunc)"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsxs)(r.strong,{children:["partial ",(0,n.jsx)(r.code,{children:"MyClass"})]})," that implements all the above interfaces, storing step values in fields\nlike ",(0,n.jsx)(r.code,{children:"public int MyIntField;"}),", ",(0,n.jsx)(r.code,{children:"public string SecondStepValue;"}),", etc."]}),"\n"]}),(0,n.jsx)(r.h3,{id:"2-using-the-generated-builder",children:"2. Using the Generated Builder"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'var builder = new MyClass();\n\nMyTargetType result = builder\n    .FirstStep(42)\n    .SecondStep("Hello")\n    .ThirdStep(true)\n    .Build(instance =>\n    {\n        return new MyTargetType\n        {\n            SomeIntProperty = instance.MyIntField,\n            SomeStringProperty = instance.SecondStepValue,\n            SomeBoolProperty = instance.ThirdStepValue\n        };\n    });\n'})}),(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.strong,{children:"stepwise"})," nature ensures you can\u2019t skip or reorder steps; they must be called in the generated sequence."]}),(0,n.jsx)(r.h3,{id:"3-branching-from-another-builder",children:"3. Branching from Another Builder"}),(0,n.jsxs)(r.p,{children:["Suppose we want an alternative path that branches ",(0,n.jsx)(r.strong,{children:"before"})," ",(0,n.jsx)(r.code,{children:"SecondStep"}),". Here\u2019s our original chain in ",(0,n.jsx)(r.code,{children:"MyClass"}),":"]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"FirstStep -> SecondStep -> ThirdStep -> Build\n"})}),(0,n.jsx)(r.p,{children:"By writing:"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'[StepwiseBuilder]\npublic partial class MyOtherClass\n{\n    public MyOtherClass()\n    {\n        GenerateStepwiseBuilder()\n            .BranchFrom("MyClass", "SecondStep")  // offer a path from BEFORE \'SecondStep\'\n            .AddStep<bool>("AlternateStep")\n            .CreateBuilderFor<AnotherType>();\n    }\n}\n'})}),(0,n.jsx)(r.p,{children:"We get:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsxs)(r.strong,{children:["partial ",(0,n.jsx)(r.code,{children:"MyOtherClass"})]})," with steps for ",(0,n.jsx)(r.code,{children:".AlternateStep(...)"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["An ",(0,n.jsx)(r.strong,{children:"extension method"})," so that ",(0,n.jsx)(r.strong,{children:"right after"})," ",(0,n.jsx)(r.code,{children:"FirstStep(...)"})," in ",(0,n.jsx)(r.code,{children:"MyClass"}),", you can ",(0,n.jsx)(r.strong,{children:"choose"})," either to\ngo ",(0,n.jsx)(r.code,{children:".SecondStep(...) -> ThirdStep(...) -> Build"})," ",(0,n.jsx)(r.strong,{children:"or"})," ",(0,n.jsx)(r.code,{children:".AlternateStep(...) -> Build"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["Because it\u2019s a ",(0,n.jsx)(r.strong,{children:"separate path"}),", once you choose ",(0,n.jsx)(r.code,{children:".AlternateStep(...)"}),", you ",(0,n.jsx)(r.strong,{children:"cannot"})," call ",(0,n.jsx)(r.code,{children:".ThirdStep(...)"}),"."]}),"\n"]}),(0,n.jsx)(r.hr,{}),(0,n.jsx)(r.h2,{id:"faq",children:"FAQ"}),(0,n.jsx)(r.h3,{id:"1-what-if-i-have-generics-in-my-class",children:"1. What if I have generics in my class?"}),(0,n.jsx)(r.p,{children:"The generator handles generic type parameters by including them in the generated partial class and interfaces."}),(0,n.jsxs)(r.h3,{id:"2-what-if-i-have-a-branch-in-a-generic-class",children:["2. What if I have a ",(0,n.jsx)(r.strong,{children:"branch"})," in a ",(0,n.jsx)(r.strong,{children:"generic"})," class?"]}),(0,n.jsxs)(r.p,{children:["If you have a branch (",(0,n.jsx)(r.code,{children:"BranchFrom(...)"}),"), the ",(0,n.jsx)(r.strong,{children:"branching class"})," should have a ",(0,n.jsx)(r.strong,{children:"matching generic signature"})," (names,\nconstraints, etc.) so the extension methods can properly link the two builders."]}),(0,n.jsx)(r.h3,{id:"3-can-i-add-custom-logic-to-steps",children:"3. Can I add custom logic to steps?"}),(0,n.jsxs)(r.p,{children:["Yes. Because the generated class is ",(0,n.jsx)(r.code,{children:"partial"}),", you can add your own partial methods or fields. Steps themselves are\nautomatically generated as chainable methods."]}),(0,n.jsxs)(r.h3,{id:"4-what-happens-if-i-omit-a-steps-fieldname-parameter",children:["4. What happens if I omit a step\u2019s ",(0,n.jsx)(r.code,{children:"fieldName"})," parameter?"]}),(0,n.jsxs)(r.p,{children:["The generator will default to naming that field as ",(0,n.jsx)(r.code,{children:'"{StepName}Value"'}),". For example, if your step\nis ",(0,n.jsx)(r.code,{children:'.AddStep<int>("Foo")'}),", the field becomes ",(0,n.jsx)(r.code,{children:"public int FooValue;"}),"."]}),(0,n.jsxs)(r.h3,{id:"5-should-i-always-write-the-build-logic-in-build",children:["5. Should I always write the build logic in ",(0,n.jsx)(r.code,{children:".Build(...)"}),"?"]}),(0,n.jsxs)(r.p,{children:["Not necessarily. It\u2019s often beneficial to ",(0,n.jsxs)(r.strong,{children:["keep the ",(0,n.jsx)(r.code,{children:".Build(...)"})," method minimal"]})," and place common or advanced build\nlogic in ",(0,n.jsx)(r.strong,{children:"extension methods"}),". For instance, suppose your generated interface is ",(0,n.jsx)(r.code,{children:"IMyClassBuild"}),"; you can do:"]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"public static class MyClassBuilderExtensions\n{\n    // This extension method extends the build interface directly\n    public static MyTargetType BuildMyTarget(this IMyClassBuild builder)\n    {\n        // Here, we call the underlying Build method, passing in your creation logic.\n        // You have direct access via the 'myClass' parameter in the delegate.\n        return builder.Build(myClass => \n        {\n            return new MyTargetType\n            {\n                SomeIntProperty    = myClass.MyIntField,\n                SomeStringProperty = myClass.SecondStepValue,\n                SomeBoolProperty   = myClass.ThirdStepValue\n            };\n        });\n    }\n}\n"})}),(0,n.jsx)(r.p,{children:"Then in user code, you simply do:"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'var result = new MyClass()\n    .FirstStep(42)\n    .SecondStep("Hello")\n    .ThirdStep(true)\n    .BuildMyTarget();\n'})}),(0,n.jsx)(r.p,{children:"This keeps your builder usage consistent while consolidating object-creation details elsewhere."}),(0,n.jsx)(r.hr,{}),(0,n.jsx)(r.h2,{id:"steps-enum",children:"Steps Enum"}),(0,n.jsxs)(r.p,{children:["Each generated builder class includes ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"enum Steps"})})," listing all steps (excluding the final ",(0,n.jsx)(r.code,{children:"Build"}),") in the order they\nwere declared. You might use this for logging, debugging, or reflection-based logic if desired."]}),(0,n.jsx)(r.hr,{}),(0,n.jsx)(r.h2,{id:"factory-methods-in-stepwisebuilders",children:"Factory Methods in StepwiseBuilders"}),(0,n.jsxs)(r.p,{children:["For each generated base builder, the generator also provides a ",(0,n.jsx)(r.strong,{children:"static factory method"})," within the ",(0,n.jsx)(r.code,{children:"StepwiseBuilders"})," partial class. These methods allow you to conveniently initialize a builder without directly instantiating the generated partial class."]}),(0,n.jsx)(r.hr,{})]}),"\n",(0,n.jsx)(r.h3,{id:"about",children:"About"}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsx)(r.p,{children:"Generating Builder- as steps"})}),"\n",(0,n.jsx)(r.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,n.jsx)(r.h3,{id:"example--source-csproj-source-files-",children:"Example ( source csproj, source files )"}),"\n",(0,n.jsxs)(l.A,{children:[(0,n.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,n.jsxs)(r.p,{children:["This is the CSharp Project that references ",(0,n.jsx)(r.strong,{children:"StepwiseBuilderGenerator"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",metastring:"showLineNumbers {15}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n\t  <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\t  <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n\t  <ItemGroup>\n\t    <PackageReference Include="StepwiseBuilderGenerator" Version="1.0.3" />\n\t  </ItemGroup>\n\n\t  \n\t \n\n</Project>\n\n'})})]}),(0,n.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StepwiseBuilderGenerator\\src\\Builder\\Program.cs",label:"Program.cs",children:[(0,n.jsxs)(r.p,{children:["This is the use of ",(0,n.jsx)(r.strong,{children:"StepwiseBuilderGenerator"})," in ",(0,n.jsx)(r.em,{children:"Program.cs"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Builder;\n\nvar pOld = new Person();\npOld.MiddleName = "G";\nvar pNew= pOld\n    .SetFirstNameBld("Andrei")\n    .SetLastNameBuilder("Ignat")\n    .Age(55)\n    .Build(it=>it)\n    ;\n  \n//var build = new PersonBuilder()\n//    .WithFirstName(pOld.FirstName)\n//    //.WithMiddleName("") // it is not into the constructor\n//    .WithLastName(pOld.LastName)\n//    ;\n    \n//var pNew = build.Build();\nSystem.Console.WriteLine(pNew.FullName());\nSystem.Console.WriteLine(pOld.FullName());\n\n'})})]}),(0,n.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StepwiseBuilderGenerator\\src\\Builder\\Person.cs",label:"Person.cs",children:[(0,n.jsxs)(r.p,{children:["This is the use of ",(0,n.jsx)(r.strong,{children:"StepwiseBuilderGenerator"})," in ",(0,n.jsx)(r.em,{children:"Person.cs"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using StepwiseBuilderGenerator;\nusing System;\n\nnamespace Builder;\n[StepwiseBuilder]\npublic partial class Person\n{\n    public Person()\n    {\n        new GenerateStepwiseBuilder()\n           .AddStep<string>("SetFirstNameBld", "FirstName")\n           .AddStep<string>("SetLastNameBuilder", "LastName")\n           .AddStep<int>("Age")  \n           .CreateBuilderFor<Person>();\n    }\n    //public Person(string firstName, string lastName)\n    //{\n    //    FirstName = firstName;\n    //    LastName = lastName;\n    //}\n    //public string FirstName { get; set; }\n    public string? MiddleName { get; set; }\n    //public string LastName { get; set; }\n\n    public string FullName()\n    {\n        return FirstName + " " + MiddleName + " "+LastName;\n    }\n    \n}\n\n'})})]})]}),"\n",(0,n.jsx)(r.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,n.jsx)(r.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,n.jsx)(l.A,{children:(0,n.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StepwiseBuilderGenerator\\src\\Builder\\obj\\GX\\StepwiseBuilderGenerator\\StepwiseBuilderGenerator.StepwiseBuilderGenerator\\Person.g.cs",label:"Person.g.cs",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using StepwiseBuilderGenerator;\nusing System;\n\nnamespace Builder;\npublic interface IPersonSetFirstNameBld \n{\n    IPersonSetLastNameBuilder SetFirstNameBld(string value);\n}\npublic interface IPersonSetLastNameBuilder \n{\n    IPersonAge SetLastNameBuilder(string value);\n}\npublic interface IPersonAge \n{\n    IPersonBuild Age(int value);\n}\npublic interface IPersonBuild \n{\n    Person Build(Func<Person, Person> buildFunc);\n}\npublic partial class Person : IPersonSetFirstNameBld,IPersonSetLastNameBuilder,IPersonAge,IPersonBuild \n{    public string FirstName;\n    public string LastName;\n    public int AgeValue;\n\n    public IPersonSetLastNameBuilder SetFirstNameBld(string value)\n    {\n        FirstName = value;\n        return this;\n    }\n    public IPersonAge SetLastNameBuilder(string value)\n    {\n        LastName = value;\n        return this;\n    }\n    public IPersonBuild Age(int value)\n    {\n        AgeValue = value;\n        return this;\n    }\n    public Person Build(Func<Person, Person> buildFunc)\n    {\n        return buildFunc(this);\n    }\n\n    public enum Steps\n    {\n        SetFirstNameBld,\n        SetLastNameBuilder,\n        Age,\n    }\n}\npublic static partial class StepwiseBuilders\n{\n    public static IPersonSetFirstNameBld Person() \n    {\n         return new Person();\n    }\n}\n\n"})})})}),"\n",(0,n.jsx)(r.h2,{id:"useful",children:"Useful"}),"\n",(0,n.jsx)(r.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(19202).A+"",children:"Download Example project StepwiseBuilderGenerator "})})}),"\n",(0,n.jsx)(r.h3,{id:"share-stepwisebuildergenerator",children:"Share StepwiseBuilderGenerator"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&quote=StepwiseBuilderGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&text=StepwiseBuilderGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&title=StepwiseBuilderGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator&title=StepwiseBuilderGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStepwiseBuilderGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StepwiseBuilderGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StepwiseBuilderGenerator"})}),"\n",(0,n.jsx)(r.h3,{id:"in-the-same-category-builder---4-other-generators",children:"In the same category (Builder) - 4 other generators"}),"\n",(0,n.jsx)(r.h4,{id:"architectdomainmodeling",children:(0,n.jsx)(r.a,{href:"/docs/Architect.DomainModeling",children:"Architect.DomainModeling"})}),"\n",(0,n.jsx)(r.h4,{id:"buildergenerator",children:(0,n.jsx)(r.a,{href:"/docs/BuilderGenerator",children:"BuilderGenerator"})}),"\n",(0,n.jsx)(r.h4,{id:"fluentify",children:(0,n.jsx)(r.a,{href:"/docs/Fluentify",children:"Fluentify"})}),"\n",(0,n.jsx)(r.h4,{id:"hsusgfluentmember",children:(0,n.jsx)(r.a,{href:"/docs/Hsu.Sg.FluentMember",children:"Hsu.Sg.FluentMember"})})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);