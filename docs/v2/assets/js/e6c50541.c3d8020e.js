"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6534],{18329:(e,t,n)=>{n.d(t,{Ay:()=>l,RM:()=>s});var a=n(74848),r=n(28453);const s=[{value:"Category &quot;Database&quot; has the following generators:",id:"category-database-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function i(e){const t={a:"a",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h3,{id:"category-database-has-the-following-generators",children:'Category "Database" has the following generators:'}),"\n",(0,a.jsxs)(t.p,{children:["1 ",(0,a.jsx)(t.a,{href:"/docs/Breezy",children:"Breezy"})]}),"\n",(0,a.jsxs)(t.p,{children:["2 ",(0,a.jsx)(t.a,{href:"/docs/Dapper.AOT",children:"Dapper.AOT"})]}),"\n",(0,a.jsxs)(t.p,{children:["3 ",(0,a.jsx)(t.a,{href:"/docs/EntityLengths.Generator",children:"EntityLengths.Generator"})]}),"\n",(0,a.jsxs)(t.p,{children:["4 ",(0,a.jsx)(t.a,{href:"/docs/Finch.Generators",children:"Finch.Generators"})]}),"\n",(0,a.jsxs)(t.p,{children:["5 ",(0,a.jsx)(t.a,{href:"/docs/Gedaq",children:"Gedaq"})]}),"\n",(0,a.jsxs)(t.p,{children:["6 ",(0,a.jsx)(t.a,{href:"/docs/TableStorage",children:"TableStorage"})]}),"\n",(0,a.jsxs)(t.p,{children:["7 ",(0,a.jsx)(t.a,{href:"/docs/Unflat",children:"Unflat"})]}),"\n",(0,a.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"/docs/Categories/Database",children:"Database"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},58614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>p,frontMatter:()=>u,metadata:()=>a,toc:()=>b});const a=JSON.parse('{"id":"RSCG-Examples/TableStorage","title":"142 - TableStorage","description":"Generate resources for accessing Azure Table Storage","source":"@site/docs/RSCG-Examples/TableStorage.md","sourceDirName":"RSCG-Examples","slug":"/TableStorage","permalink":"/RSCG_Examples/v2/docs/TableStorage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1420,"frontMatter":{"sidebar_position":1420,"title":"142 - TableStorage","description":"Generate resources for accessing Azure Table Storage","slug":"/TableStorage"},"sidebar":"tutorialSidebar","previous":{"title":"141 - ActorSrcGen","permalink":"/RSCG_Examples/v2/docs/ActorSrcGen"},"next":{"title":"143 - FactoryGenerator","permalink":"/RSCG_Examples/v2/docs/FactoryGenerator"}}');var r=n(74848),s=n(28453),i=n(11470),l=n(19365),o=n(14252),c=n(18329);const u={sidebar_position:1420,title:"142 - TableStorage",description:"Generate resources for accessing Azure Table Storage",slug:"/TableStorage"},d="TableStorage  by Steven Thuriot",g={},b=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Linq",id:"linq",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share TableStorage",id:"share-tablestorage",level:3},...c.RM];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"tablestorage--by-steven-thuriot",children:"TableStorage  by Steven Thuriot"})}),"\n",(0,r.jsx)(o.A,{toc:b}),"\n",(0,r.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/TableStorage/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/TableStorage?label=TableStorage",alt:"Nuget"})}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/StevenThuriot/TableStorage",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/StevenThuriot/TableStorage?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/github/stars/StevenThuriot/TableStorage?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["Name: ",(0,r.jsx)(t.strong,{children:"TableStorage"})]}),(0,r.jsx)(t.p,{children:"Package Description"}),(0,r.jsx)(t.p,{children:"Author: Steven Thuriot"}),(0,r.jsxs)(t.p,{children:["NuGet:\n",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/TableStorage/",children:"https://www.nuget.org/packages/TableStorage/"})})]}),(0,r.jsxs)(t.p,{children:["You can find more details at ",(0,r.jsx)(t.a,{href:"https://github.com/StevenThuriot/TableStorage",children:"https://github.com/StevenThuriot/TableStorage"})]}),(0,r.jsxs)(t.p,{children:["Source: ",(0,r.jsx)(t.a,{href:"https://github.com/StevenThuriot/TableStorage",children:"https://github.com/StevenThuriot/TableStorage"})]})]}),"\n",(0,r.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsx)(t.h1,{id:"tablestorage",children:"TableStorage"}),(0,r.jsx)(t.p,{children:"Streamlined way of working with Azure Data Tables"}),(0,r.jsx)(t.h2,{id:"installation",children:"Installation"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"dotnet add package TableStorage\n"})}),(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,r.jsxs)(t.p,{children:["Create your own TableContext and mark it with the ",(0,r.jsx)(t.code,{children:"[TableContext]"})," attribute. This class must be partial."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"[TableContext]\npublic partial class MyTableContext;\n"})}),(0,r.jsxs)(t.p,{children:["Create your models, these must be classes and have a parameterless constructor. Mark them with the ",(0,r.jsx)(t.code,{children:"[TableSet]"})," attribute. This class must be partial."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"[TableSet]\npublic partial class Model\n{\n    public string Data { get; set; }\n    public bool Enabled { get; set; }\n}\n"})}),(0,r.jsxs)(t.p,{children:["Properties can also be defined using the ",(0,r.jsx)(t.code,{children:"[TableSetProperty]"})," attribute.\nThis is particularly useful if you are planning on using dotnet 8+'s Native AOT, as the source generation will make sure any breaking reflection calls are avoided by the Azure.Core libraries."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'[TableSet]\n[TableSetProperty(typeof(string), "Data")]\n[TableSetProperty(typeof(bool), "Enabled")]\npublic partial class Model;\n'})}),(0,r.jsxs)(t.p,{children:["Some times it's also nice to have a pretty name for your ",(0,r.jsx)(t.code,{children:"PartitionKey"})," and ",(0,r.jsx)(t.code,{children:"RowKey"})," properties, as the original names might not always make much sense when reading your code, at least not in a functional way.\nYou can use the ",(0,r.jsx)(t.code,{children:"[PartitionKeyAttribute]"})," and ",(0,r.jsx)(t.code,{children:"[RowKeyAttribute]"})," attributes to create a proxy for these two properties."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'[TableSet]\n[PartitionKey("MyPrettyPartitionKey")]\n[RowKey("MyPrettyRowKey")]\npublic partial class Model;\n'})}),(0,r.jsx)(t.p,{children:"Place your tables on your TableContext. The sample below will create 2 tables in table storage, named Models1 and Models2."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"[TableContext]\npublic partial class MyTableContext\n{\n    public TableSet<Model> Models1 { get; set; }\n    public TableSet<Model> Models2 { get; set; }\n}\n"})}),(0,r.jsx)(t.p,{children:"Register your TableContext in your services. An extension method will be available specifically for your context."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'builder.Services.AddMyTableContext(builder.Configuration.GetConnectionString("MyConnectionString"));\n'})}),(0,r.jsxs)(t.p,{children:["Optionally, pass along a ",(0,r.jsx)(t.code,{children:"Configure"})," method to adjust some configuration options."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'builder.Services.AddMyTableContext(builder.Configuration.GetConnectionString("MyConnectionString"), Configure);\n\nstatic void Configure(TableOptions options)\n{\n    options.AutoTimestamps = true;\n    options.TableMode = TableUpdateMode.Merge;\n}\n'})}),(0,r.jsxs)(t.p,{children:["Inject ",(0,r.jsx)(t.code,{children:"MyTableContext"})," into your class and use as needed."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'public class MyService(MyTableContext context)\n{\n    private readonly MyTableContext _context = context;\n\n    public async Task DoSomething(CancellationToken token)\n    {\n        var entity = await _context.Models1.GetEntityOrDefaultAsync("partitionKey", "rowKey", token);\n        if (entity is not null)\n        {\n            //Do more\n        }\n    }\n}\n'})}),(0,r.jsx)(t.p,{children:"For some special cases, your table name might not be known at compile time. To handle those, an extension method has been added:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'var tableSet = context.GetTableSet<Model>("randomname");\n'})}),(0,r.jsx)(t.h2,{id:"linq",children:"Linq"}),(0,r.jsxs)(t.p,{children:["A few simple Linq extension methods have been provided in the ",(0,r.jsx)(t.code,{children:"TableStorage.Linq"})," namespace that optimize some existing LINQ methods specifically for Table Storage."]}),(0,r.jsxs)(t.p,{children:["Since these return an instance that implements ",(0,r.jsx)(t.code,{children:"IAsyncEnumerable"}),", ",(0,r.jsx)(t.code,{children:"System.Linq.Async"})," is an excellent companion to these methods. Do keep in mind that as soon as you start using ",(0,r.jsx)(t.code,{children:"IAsyncEnumerable"}),", any further operations will run client-side."]}),(0,r.jsxs)(t.p,{children:["Note: ",(0,r.jsx)(t.code,{children:"Select"})," will include the actual transformation. If you want the original model, with only the selected fields retrieved, use ",(0,r.jsx)(t.code,{children:"SelectFields"})," instead.\nIf you are using Native AOT, you will need to use ",(0,r.jsx)(t.code,{children:"SelectFields"})," as ",(0,r.jsx)(t.code,{children:"Select"})," will not work."]})]}),"\n",(0,r.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"Generate resources for accessing Azure Table Storage"})}),"\n",(0,r.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(t.strong,{children:"TableStorage"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Azure.Storage.Blobs" Version="12.13.1" />\n    <PackageReference Include="Azure.Storage.Files.Shares" Version="12.1.0" />\n    <PackageReference Include="Azure.Storage.Queues" Version="12.11.1" />\n    <PackageReference Include="Microsoft.Extensions.Azure" Version="1.5.0" />\n    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />\n    <PackageReference Include="TableStorage" Version="4.2.1" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"TableStorage"})," in ",(0,r.jsx)(t.em,{children:"Program.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Microsoft.Extensions.DependencyInjection;\nusing test;\n/*Visual Studio version\tAzurite executable location\nVisual Studio Community 2022\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\nVisual Studio Professional 2022\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\nVisual Studio Enterprise 2022\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\n*/\n\nvar serviceProvider = new ServiceCollection()\n    .AddDatabaseContext("UseDevelopmentStorage=true")\n    .BuildServiceProvider();\n\nDatabaseContext db = serviceProvider.GetRequiredService<DatabaseContext>();\n\nEmployee?  e=new ();\ne.Name = "Andrei Ignat";\ne.PartitionKey = "1";\ne.RowKey = Guid.NewGuid().ToString();\nawait db.Employees.AddEntityAsync(e);\n\ne = await db.Employees.GetEntityAsync(e.PartitionKey, e.RowKey);\nConsole.WriteLine(e?.Name);  \n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\Database.cs",label:"Database.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"TableStorage"})," in ",(0,r.jsx)(t.em,{children:"Database.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using TableStorage;\nnamespace test;\n[TableContext]\npublic partial class DatabaseContext\n{\n    public TableSet<Employee>? Employees { get; set; }\n}\n\n\n[TableSet]\n[TableSetProperty(typeof(bool), "Enabled")]\n[TableSetProperty(typeof(string), "Name")]\npublic partial class Employee\n{\n\n}\n\n'})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableContextGenerator\\TableContextAttribute.g.cs",label:"TableContextAttribute.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing System;\n\nnamespace TableStorage\n{\n    [AttributeUsage(AttributeTargets.Class)]\n    public sealed class TableContextAttribute : Attribute\n    {\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableContextGenerator\\TableContexts.g.cs",label:"TableContexts.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Microsoft.Extensions.DependencyInjection;\nusing TableStorage;\nusing System;\n\n#nullable disable\n\nnamespace test\n{\n    public static class DatabaseContextExtensions\n    {\n        public static IServiceCollection AddDatabaseContext(this IServiceCollection services, string connectionString, Action<TableStorage.TableOptions> configure = null)\n        {\n            DatabaseContext.Register(services, connectionString, configure);\n            return services;\n        }\n    }\n\n    partial class DatabaseContext\n    {\n        private TableStorage.ICreator _creator { get; init; }\n\n        private static class TableSetCache<T>\n                where T : class, Azure.Data.Tables.ITableEntity, new()\n        {\n            private static System.Collections.Concurrent.ConcurrentDictionary<string, TableStorage.TableSet<T>> _unknownTableSets = new System.Collections.Concurrent.ConcurrentDictionary<string, TableStorage.TableSet<T>>();\n            public static TableStorage.TableSet<T> GetTableSet(TableStorage.ICreator creator, string tableName)\n            {\n                return _unknownTableSets.GetOrAdd(tableName, creator.CreateSet<T>);\n            }\n\n        }\n\n        public TableSet<T> GetTableSet<T>(string tableName)\n            where T : class, Azure.Data.Tables.ITableEntity, new()\n        {\n            return TableSetCache<T>.GetTableSet(_creator, tableName);\n        }\n\n        public static void Register(IServiceCollection services, string connectionString, Action<TableStorage.TableOptions> configure = null)\n        {\n            services.AddSingleton(s =>\n                    {\n                        ICreator creator = TableStorage.TableStorageSetup.BuildCreator(connectionString, configure);\n\n                        return new DatabaseContext()\n                        {\n                            _creator = creator,\n                            Employees = creator.CreateSet<test.Employee>("Employees", null, null),\n                        };\n                    });\n        }\n    }\n}\n\n'})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableSetModelGenerator\\TableSetAttributes.g.cs",label:"TableSetAttributes.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing System;\n\nnamespace TableStorage\n{\n    [AttributeUsage(AttributeTargets.Class)]\n    public sealed class TableSetAttribute : Attribute\n    {\n    }\n\n\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\n    public sealed class TableSetPropertyAttribute : Attribute\n    {\n        public TableSetPropertyAttribute(Type type, string name)\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\n    public sealed class PartitionKeyAttribute : Attribute\n    {\n        public PartitionKeyAttribute(string name)\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\n    public sealed class RowKeyAttribute : Attribute\n    {\n        public RowKeyAttribute(string name)\n        {\n        }\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableSetModelGenerator\\TableSets.g.cs",label:"TableSets.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Microsoft.Extensions.DependencyInjection;\nusing TableStorage;\nusing System.Collections.Generic;\nusing System;\n\n#nullable disable\n\nnamespace test\n{\n    [System.Diagnostics.DebuggerDisplay(@"Employee \\{ {PartitionKey}, {RowKey} \\}")]\n    partial class Employee : IDictionary<string, object>, Azure.Data.Tables.ITableEntity\n    {\n        public string PartitionKey { get; set; }\n        public string RowKey { get; set; }\n        public DateTimeOffset? Timestamp { get; set; }\n        public Azure.ETag ETag { get; set; }\n        [System.Runtime.Serialization.IgnoreDataMember] public bool Enabled { get; set; }\n        [System.Runtime.Serialization.IgnoreDataMember] public string Name { get; set; }\n\n        public object this[string key]\n        {\n            get\n            {\n                switch (key)\n                {\n                    case "PartitionKey": return PartitionKey;\n                    case "RowKey": return RowKey;\n                    case "Timestamp": return Timestamp;\n                    case "odata.etag": return ETag.ToString();\n                    case "Enabled": return Enabled;\n                    case "Name": return Name;\n                    default: return null;\n                }\n            }\n\n            set\n            {\n                switch (key)\n                {\n                    case "PartitionKey": PartitionKey = value?.ToString(); break;\n                    case "RowKey": RowKey = value?.ToString(); break;\n                    case "Timestamp": Timestamp = (System.DateTimeOffset?)value; break;\n                    case "odata.etag": ETag = new Azure.ETag(value?.ToString()); break;\n                    case "Enabled": Enabled = (bool) value; break;\n                    case "Name": Name = (string) value; break;\n                }\n            }\n        }\n\n        public ICollection<string> Keys => new string[] { "PartitionKey", "RowKey", "Timestamp", "odata.etag", "Enabled", "Name",  };\n        public ICollection<object> Values => new object[] { PartitionKey, RowKey, Timestamp, ETag.ToString(), Enabled, Name,  };\n        public int Count => 6;\n        public bool IsReadOnly => false;\n\n        public void Add(string key, object value)\n        {\n            this[key] = value;\n        }\n\n        public void Add(KeyValuePair<string, object> item)\n        {\n            this[item.Key] = item.Value;\n        }\n\n        public void Clear()\n        {\n            Enabled = default(bool);\n            Name = default(string);\n        }\n\n        public bool Contains(KeyValuePair<string, object> item)\n        {\n            if (TryGetValue(item.Key, out var value))\n            {\n                return value == item.Value;\n            }\n\n            return false;\n        }\n\n        public bool ContainsKey(string key)\n        {\n            switch (key)\n            {\n                case "PartitionKey":\n                case "RowKey":\n                case "Timestamp":\n                case "odata.etag":\n                case "Enabled": \n                case "Name": \n                    return true;\n            \n                default: return false;\n            }\n        }\n\n        public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)\n        {\n            if (array == null)\n            {\n                throw new System.ArgumentNullException("array");\n            }\n\n            if ((uint)arrayIndex > (uint)array.Length)\n            {\n                throw new System.IndexOutOfRangeException();\n            }\n\n            if (array.Length - arrayIndex < Count)\n            {\n                throw new System.ArgumentException();\n            }\n\n            foreach (var item in this)\n            {\n                array[arrayIndex++] = item;\n            }\n        }\n\n        public IEnumerator<KeyValuePair<string, object>> GetEnumerator()\n        {\n            yield return new KeyValuePair<string, object>("PartitionKey", PartitionKey);\n            yield return new KeyValuePair<string, object>("RowKey", RowKey);\n            yield return new KeyValuePair<string, object>("Timestamp", Timestamp);\n            yield return new KeyValuePair<string, object>("odata.etag", ETag.ToString());\n            yield return new KeyValuePair<string, object>("Enabled", Enabled);\n            yield return new KeyValuePair<string, object>("Name", Name);\n        }\n\n        public bool Remove(string key)\n        {\n            if (ContainsKey(key)) \n            {\n                this[key] = null;\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool Remove(KeyValuePair<string, object> item)\n        {\n            if (Contains(item)) \n            {\n                this[item.Key] = null;\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool TryGetValue(string key, out object value)\n        {\n            switch (key)\n            {\n                case "PartitionKey": value = PartitionKey; return true;\n                case "RowKey": value = RowKey; return true;\n                case "Timestamp": value = Timestamp; return true;\n                case "odata.etag": value = ETag; return true;\n                case "Enabled": value = Enabled; return true;\n                case "Name": value = Name; return true;\n                default: value = null; return false;\n            }\n        }\n\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n        {\n            return this.GetEnumerator();\n        }\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(77351).A+"",children:"Download Example project TableStorage "})})}),"\n",(0,r.jsx)(t.h3,{id:"share-tablestorage",children:"Share TableStorage"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&quote=TableStorage",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&text=TableStorage:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&title=TableStorage",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&title=TableStorage&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TableStorage",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TableStorage"})}),"\n",(0,r.jsx)(t.p,{children:"aaa"}),"\n",(0,r.jsx)(c.Ay,{})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},77351:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/files/TableStorage-5c18f09a0f8bd44c1ca25374d201a335.zip"}}]);