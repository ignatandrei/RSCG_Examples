"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4771],{19652:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>k,toc:()=>M});var o=a(87462),n=(a(67294),a(3905)),r=a(73992),c=a(18679),s=a(68839);const l={sidebar_position:1840,title:"184 - MockMe",description:"Creating mocks for testing classes",slug:"/MockMe"},i="MockMe  by connorivy",k={unversionedId:"RSCG-Examples/MockMe",id:"RSCG-Examples/MockMe",title:"184 - MockMe",description:"Creating mocks for testing classes",source:"@site/docs/RSCG-Examples/MockMe.md",sourceDirName:"RSCG-Examples",slug:"/MockMe",permalink:"/RSCG_Examples/v2/docs/MockMe",draft:!1,tags:[],version:"current",sidebarPosition:1840,frontMatter:{sidebar_position:1840,title:"184 - MockMe",description:"Creating mocks for testing classes",slug:"/MockMe"},sidebar:"tutorialSidebar",previous:{title:"183 - NTypewriter",permalink:"/RSCG_Examples/v2/docs/NTypewriter"},next:{title:"185 - DependencyModules.SourceGenerator",permalink:"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator"}},m={},M=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share MockMe",id:"share-mockme",level:3},{value:"In the same category (Tests) - 4 other generators",id:"in-the-same-category-tests---4-other-generators",level:3},{value:"mocklis",id:"mocklis",level:4},{value:"MSTest",id:"mstest",level:4},{value:"Ridge",id:"ridge",level:4},{value:"Rocks",id:"rocks",level:4}],p={toc:M},u="wrapper";function d(e){let{components:t,...l}=e;return(0,n.kt)(u,(0,o.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"mockme--by-connorivy"},"MockMe  by connorivy"),(0,n.kt)(s.Z,{toc:M,mdxType:"TOCInline"}),(0,n.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/MockMe/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/MockMe?label=MockMe",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/connorivy/MockMe/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/connorivy/MockMe?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/connorivy/MockMe?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"MockMe")),(0,n.kt)("p",{parentName:"admonition"},"The concrete type mocking library for .NET"),(0,n.kt)("p",{parentName:"admonition"},"Author: connorivy"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/MockMe/"},"https://www.nuget.org/packages/MockMe/")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/connorivy/MockMe/"},"https://github.com/connorivy/MockMe/")),(0,n.kt)("p",{parentName:"admonition"},"Source : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/connorivy/MockMe/"},"https://github.com/connorivy/MockMe/"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/user-attachments/assets/43d8b58f-98b0-4469-95c3-7e5ca0683ffc",alt:"MockMeFull"})),(0,n.kt)("hr",{parentName:"admonition"}),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://coveralls.io/github/connorivy/MockMe?branch=main"},(0,n.kt)("img",{parentName:"a",src:"https://coveralls.io/repos/github/connorivy/MockMe/badge.svg?branch=main",alt:"Coverage Status"}))),(0,n.kt)("h2",{parentName:"admonition",id:"what-is-it"},"What is it?"),(0,n.kt)("p",{parentName:"admonition"},"MockMe is a library for mocking dependencies in your unit test projects. Unlike other libraries that can only mock interfaces and virtual methods, MockMe can mock sealed classes and non-virtual methods."),(0,n.kt)("h2",{parentName:"admonition",id:"getting-started"},"Getting Started"),(0,n.kt)("p",{parentName:"admonition"},"Imagine you have the following repository class"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"sealed class MyRepo\n{\n    public int ExpensiveDatabaseCall() => // some code;\n}\n")),(0,n.kt)("p",{parentName:"admonition"},'Download the MockMe NuGet package, then the source generators and the "MockMe.Mock" type will be available in your project.\nThen you can customize the behavior of the repository class as below.'),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"using MockMe;\n\n// use this syntax to trigger the source generator to make a mock of the provided type\n// the 'mock' object will have 3 properties: Setup, Assert, and MockedObject\n// hint: rebuild test project after writing this line or IntelliSense may not work correctly\nvar mock = Mock.Me(default(MyRepo)); \n\n// the mock.Setup object has an identical interface to the original object\n// from there you can configure method behavior with 'Returns', 'Callback', 'Throws', etc\nmock.Setup.ExpensiveDatabaseCall().Returns(99);\n\n// the mock.MockedObject is a special instance of the mocked type which has the modified behavior\n// other instances of the mocked type will have the original behavior\nMyRepo myRepo = mock.MockedObject;\nint result = myRepo.ExpensiveDatabaseCall();\n\nAssert.Equal(99, result);\n\n// the mock.Assert object also has an identical interface to the original object.\n// you can use it to assert certain mock behaviors\nmock.Assert.ExpensiveDatabaseCall().WasCalled();\n\n")),(0,n.kt)("p",{parentName:"admonition"},"Check out the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/connorivy/MockMe/wiki/QuickStart"},"Wiki")," for more examples."),(0,n.kt)("h2",{parentName:"admonition",id:"give-it-a-star"},"Give it a Star"),(0,n.kt)("p",{parentName:"admonition"},"If you like this project, please give it a star!")),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Creating mocks for testing classes")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"MockMe")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.5.0" />\n    <PackageReference Include="MockMe" Version="1.1.2" />\n    <PackageReference Include="MSTest.TestAdapter" Version="2.2.10" />\n    <PackageReference Include="MSTest.TestFramework" Version="2.2.10" />\n    <PackageReference Include="coverlet.collector" Version="3.2.0" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include="..\\MockData\\MockData.csproj" />\n  </ItemGroup>\n\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n</Project>\n\n'))),(0,n.kt)(c.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\TestClock.cs",label:"TestClock.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"MockMe")," in ",(0,n.kt)("em",{parentName:"p"},"TestClock.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing MockMe;\n\nnamespace TestClock;\n\n[TestClass]\npublic class TestClock\n{\n    [TestMethod]\n    public void TestMyClock()\n    {\n        var mock = Mock.Me(default(MyClock));\n        mock.Setup.GetUtcNow().Returns(DateTime.Now.AddYears(-1));\n        mock.Setup.GetNow().Returns(DateTime.Now.AddYears(-1));\n        MyClock clock = mock;\n        Assert.AreEqual(DateTime.Now.AddYears(-1).Year, clock.GetNow().Year);\n    }\n}\n")))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\AssemblyAttributes.g.cs",label:"AssemblyAttributes.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},""))),(0,n.kt)(c.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\Mock.DummyDeclaration.g.cs",label:"Mock.DummyDeclaration.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\n// <auto-generated />\n#pragma warning disable\nusing System;\n\nnamespace MockMe\n{\n    internal static partial class Mock\n    {\n        public static object Me(global::MockMe.DummyClass unusedInstance)\n        {\n            throw new global::System.NotImplementedException();\n        }\n    }\n}\n#pragma warning restore\n"))),(0,n.kt)(c.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\Mock.g.cs",label:"Mock.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\n// <auto-generated />\n#pragma warning disable\n#nullable enable\n\nnamespace MockMe\n{\n    internal static partial class Mock\n    {\n\n\n        [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n        public static global::MockMe.Generated.MockData.MyClockMock Me(global::MockData.MyClock? unusedInstance)\n        {\n            return new();\n        }\n\n    }\n}\n#pragma warning restore\n\n\n'))),(0,n.kt)(c.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\MyClockMock.g.cs",label:"MyClockMock.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\n// <auto-generated />\n#pragma warning disable\n#nullable enable\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing HarmonyLib;\nusing MockMe;\nusing MockMe.Mocks;\nusing MockMe.Mocks.ClassMemberMocks;\nusing MockMe.Mocks.ClassMemberMocks.CallTracker;\n\nnamespace MockMe.Generated.MockData\n{\n    [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n    internal class MyClockMock\n        : global::MockMe.Abstractions.SealedTypeMock<global::MockData.MyClock>\n    {\n        \n        public MyClockMock()\n        {\n            this.Setup = new MyClockMockSetup();\n            this.CallTracker = new MyClockMockSetup.MyClockMockCallTracker(this.Setup);\n            this.Assert = new MyClockMockSetup.MyClockMockCallTracker.MyClockMockAsserter(this.CallTracker);\n            global::MockMe.MockStore<global::MockData.MyClock>.Store.TryAdd(this.MockedObject, this);\n        }\n\n        public MyClockMockSetup Setup { get; }\n        public MyClockMockSetup.MyClockMockCallTracker.MyClockMockAsserter Assert { get; }\n        private MyClockMockSetup.MyClockMockCallTracker CallTracker { get; }\n\n        internal sealed class Patch23f715ba229342e08d6fb11494a17f90\n        {\n            private static bool Prefix(global::MockData.MyClock __instance, ref global::System.DateTime __result)\n            {\n                if (global::MockMe.MockStore<global::MockData.MyClock>.TryGetValue<MyClockMock>(__instance, out var mock))\n                {\n                    __result = mock.CallTracker.GetNow();\n                    return false;\n                }\n\n                return true;\n            }\n        }\n        internal sealed class Patch147ac8e5593f4d678d1855b2e81726e7\n        {\n            private static bool Prefix(global::MockData.MyClock __instance, ref global::System.DateTime __result)\n            {\n                if (global::MockMe.MockStore<global::MockData.MyClock>.TryGetValue<MyClockMock>(__instance, out var mock))\n                {\n                    __result = mock.CallTracker.GetUtcNow();\n                    return false;\n                }\n\n                return true;\n            }\n        }\n        static MyClockMock()\n        {\n            var harmony = new global::HarmonyLib.Harmony("com.mockme.patch");\n\n            var originalPatch23f715ba229342e08d6fb11494a17f90 = typeof(global::MockData.MyClock).GetMethod("GetNow", new Type[] {  } );\n            var Patch23f715ba229342e08d6fb11494a17f90 = typeof(Patch23f715ba229342e08d6fb11494a17f90).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);\n\n            harmony.Patch(originalPatch23f715ba229342e08d6fb11494a17f90, prefix: new HarmonyMethod(Patch23f715ba229342e08d6fb11494a17f90));\n\n            var originalPatch147ac8e5593f4d678d1855b2e81726e7 = typeof(global::MockData.MyClock).GetMethod("GetUtcNow", new Type[] {  } );\n            var Patch147ac8e5593f4d678d1855b2e81726e7 = typeof(Patch147ac8e5593f4d678d1855b2e81726e7).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);\n\n            harmony.Patch(originalPatch147ac8e5593f4d678d1855b2e81726e7, prefix: new HarmonyMethod(Patch147ac8e5593f4d678d1855b2e81726e7));\n\n        }\n\n    }\n\n    [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n    internal class MyClockMockSetup : global::MockMe.Mocks.ClassMemberMocks.Setup.MemberMockSetup\n    {\n\n        private global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime>? GetNow_BagStore;\n        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime> GetNow()\n        {\n\n            return this.GetNow_BagStore ??= new();;\n        }\n        private global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime>? GetUtcNow_BagStore;\n        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime> GetUtcNow()\n        {\n\n            return this.GetUtcNow_BagStore ??= new();;\n        }\n        [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n        internal class MyClockMockCallTracker : MockCallTracker\n        {\n            private readonly MyClockMockSetup setup;\n            public MyClockMockCallTracker(MyClockMockSetup setup)\n            {\n                this.setup = setup;\n            }\n\n            private int GetNow_CallStore;\n\n            public global::System.DateTime GetNow()\n            {\n                this.GetNow_CallStore++;\n                return MockCallTracker.CallMemberMock<global::System.DateTime>(this.setup.GetNow_BagStore);\n            }\n\n            private int GetUtcNow_CallStore;\n\n            public global::System.DateTime GetUtcNow()\n            {\n                this.GetUtcNow_CallStore++;\n                return MockCallTracker.CallMemberMock<global::System.DateTime>(this.setup.GetUtcNow_BagStore);\n            }\n\n            [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n            internal class MyClockMockAsserter : MockAsserter\n            {\n                private readonly MyClockMockSetup.MyClockMockCallTracker tracker;\n                public MyClockMockAsserter(MyClockMockSetup.MyClockMockCallTracker tracker)\n                {\n                    this.tracker = tracker;\n                }\n\n                public global::MockMe.Asserters.MemberAsserter GetNow() =>\n                    new(this.tracker.GetNow_CallStore);\n\n                public global::MockMe.Asserters.MemberAsserter GetUtcNow() =>\n                    new(this.tracker.GetUtcNow_CallStore);\n\n            }\n\n        }\n\n    }\n\n}\n#pragma warning restore\n\n')))),(0,n.kt)("h2",{id:"usefull"},"Usefull"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:a(37888).Z},"Download Example project MockMe "))),(0,n.kt)("h3",{id:"share-mockme"},"Share MockMe"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&quote=MockMe",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&text=MockMe:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&title=MockMe",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&title=MockMe&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/MockMe"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/MockMe")),(0,n.kt)("h3",{id:"in-the-same-category-tests---4-other-generators"},"In the same category (Tests) - 4 other generators"),(0,n.kt)("h4",{id:"mocklis"},(0,n.kt)("a",{parentName:"h4",href:"/docs/mocklis"},"mocklis")),(0,n.kt)("h4",{id:"mstest"},(0,n.kt)("a",{parentName:"h4",href:"/docs/MSTest"},"MSTest")),(0,n.kt)("h4",{id:"ridge"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Ridge"},"Ridge")),(0,n.kt)("h4",{id:"rocks"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Rocks"},"Rocks")))}d.isMDXComponent=!0},37888:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/files/MockMe-a09b4c87e5d3c62da28d41cfbe78946d.zip"}}]);