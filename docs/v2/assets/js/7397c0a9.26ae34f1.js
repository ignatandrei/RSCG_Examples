"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4373],{8589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>k,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var a=t(87462),r=(t(67294),t(3905)),o=t(73992),i=t(18679),s=t(68839);const c={sidebar_position:1430,title:"143 - FactoryGenerator",description:"generating DI code",slug:"/FactoryGenerator"},l="FactoryGenerator  by Westermo Network Technologies",p={unversionedId:"RSCG-Examples/FactoryGenerator",id:"RSCG-Examples/FactoryGenerator",title:"143 - FactoryGenerator",description:"generating DI code",source:"@site/docs/RSCG-Examples/FactoryGenerator.md",sourceDirName:"RSCG-Examples",slug:"/FactoryGenerator",permalink:"/RSCG_Examples/v2/docs/FactoryGenerator",draft:!1,tags:[],version:"current",sidebarPosition:1430,frontMatter:{sidebar_position:1430,title:"143 - FactoryGenerator",description:"generating DI code",slug:"/FactoryGenerator"},sidebar:"tutorialSidebar",previous:{title:"142 - TableStorage",permalink:"/RSCG_Examples/v2/docs/TableStorage"},next:{title:"144 - depso",permalink:"/RSCG_Examples/v2/docs/depso"}},m={},d=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share FactoryGenerator",id:"share-factorygenerator",level:3},{value:"In the same category (DependencyInjection) - 7 other generators",id:"in-the-same-category-dependencyinjection---7-other-generators",level:3},{value:"AutoRegisterInject",id:"autoregisterinject",level:4},{value:"DependencyModules.SourceGenerator",id:"dependencymodulessourcegenerator",level:4},{value:"depso",id:"depso",level:4},{value:"Injectio",id:"injectio",level:4},{value:"jab",id:"jab",level:4},{value:"Pure.DI",id:"puredi",level:4},{value:"ServiceScan.SourceGenerator",id:"servicescansourcegenerator",level:4}],u={toc:d},g="wrapper";function k(e){let{components:n,...c}=e;return(0,r.kt)(g,(0,a.Z)({},u,c,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"factorygenerator--by-westermo-network-technologies"},"FactoryGenerator  by Westermo Network Technologies"),(0,r.kt)(s.Z,{toc:d,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/FactoryGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/FactoryGenerator?label=FactoryGenerator",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/westermo/FactoryGenerator"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/westermo/FactoryGenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/westermo/FactoryGenerator?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"FactoryGenerator")),(0,r.kt)("p",{parentName:"admonition"},"Package Description"),(0,r.kt)("p",{parentName:"admonition"},"Author: Westermo Network Technologies"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/FactoryGenerator/"},"https://www.nuget.org/packages/FactoryGenerator/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/westermo/FactoryGenerator"},"https://github.com/westermo/FactoryGenerator")),(0,r.kt)("p",{parentName:"admonition"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/westermo/FactoryGenerator"},"https://github.com/westermo/FactoryGenerator"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"jab-compile-time-dependency-injection"},"Jab Compile Time Dependency Injection"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Jab"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Jab",alt:"Nuget"}))),(0,r.kt)("p",{parentName:"admonition"},"Jab provides a ",(0,r.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"},"C# Source Generator")," based dependency injection container implementation."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Fast startup (200x faster than Microsoft.Extensions.DependencyInjection). ",(0,r.kt)("a",{parentName:"li",href:"#Startup-Time"},"Details"),"."),(0,r.kt)("li",{parentName:"ul"},"Fast resolution (7x faster than Microsoft.Extensions.DependencyInjection). ",(0,r.kt)("a",{parentName:"li",href:"#GetService"},"Details"),"."),(0,r.kt)("li",{parentName:"ul"},"No runtime dependencies."),(0,r.kt)("li",{parentName:"ul"},"AOT and linker friendly, all code is generated during project compilation."),(0,r.kt)("li",{parentName:"ul"},"Clean stack traces:  ",(0,r.kt)("img",{parentName:"li",src:"https://raw.githubusercontent.com/pakrym/jab/main/doc/stacktrace.png",alt:"stacktrace"})),(0,r.kt)("li",{parentName:"ul"},"Readable generated code:  ",(0,r.kt)("img",{parentName:"li",src:"https://raw.githubusercontent.com/pakrym/jab/main/doc/generatedcode.png",alt:"generated code"})),(0,r.kt)("li",{parentName:"ul"},"Registration validation. Container configuration issues become compiler errors:  ",(0,r.kt)("img",{parentName:"li",src:"https://raw.githubusercontent.com/pakrym/jab/main/doc/errors.png",alt:"generated code"})),(0,r.kt)("li",{parentName:"ul"},"Incremental generation, .NET 5/6/7/8 SDK support, .NET Standard 2.0 support, ","[Unity support]","(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/westermo/FactoryGenerator/README.md#Unity-installation"},"https://github.com/westermo/FactoryGenerator/README.md#Unity-installation"))),(0,r.kt)("h2",{parentName:"admonition",id:"example"},"Example"),(0,r.kt)("p",{parentName:"admonition"},"Add Jab package reference:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n    <PackageReference Include="Jab" Version="0.10.2" PrivateAssets="all" />\n</ItemGroup>\n')),(0,r.kt)("p",{parentName:"admonition"},"Define a service and implementation:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"internal interface IService\n{\n    void M();\n}\n\ninternal class ServiceImplementation : IService\n{\n    public void M()\n    {\n    }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Define a composition root and register services:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Transient(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider { }\n")),(0,r.kt)("p",{parentName:"admonition"},"Use the service provider:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"MyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IService>();\n")),(0,r.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"No runtime dependency, safe to use in libraries"),(0,r.kt)("li",{parentName:"ul"},"Transient, Singleton, Scoped service registration"),(0,r.kt)("li",{parentName:"ul"},"Named registrations"),(0,r.kt)("li",{parentName:"ul"},"Factory registration"),(0,r.kt)("li",{parentName:"ul"},"Instance registration"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IEnumerable")," resolution"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IDisposable")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"IAsyncDisposable")," support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IServiceProvider")," support")),(0,r.kt)("p",{parentName:"admonition"},"The plan is to support the minimum feature set Microsoft.Extensions.DependencyInjection.Abstraction requires but ",(0,r.kt)("em",{parentName:"p"},"NOT")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"IServiceCollection"),"-based registration syntax as it is runtime based."),(0,r.kt)("h3",{parentName:"admonition",id:"singleton-services"},"Singleton services"),(0,r.kt)("p",{parentName:"admonition"},"Singleton services are created once per container lifetime in a thread-safe manner and cached.\nTo register a singleton service use the ",(0,r.kt)("inlineCode",{parentName:"p"},"SingletonAttribute"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider { }\n")),(0,r.kt)("h3",{parentName:"admonition",id:"singleton-instances"},"Singleton Instances"),(0,r.kt)("p",{parentName:"admonition"},"If you want to use an existing object as a service define a property in the container declaration and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Instance")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SingletonAttribute")," to register the service:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Singleton(typeof(IService), Instance = nameof(MyServiceInstance))]\ninternal partial class MyServiceProvider {\n    public IService MyServiceInstance { get;set; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Then initialize the property during the container creation:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"MyServiceProvider c = new MyServiceProvider();\nc.MyServiceInstance = new ServiceImplementation();\n\nIService service = c.GetService<IService>();\n")),(0,r.kt)("h3",{parentName:"admonition",id:"named-services"},"Named services"),(0,r.kt)("p",{parentName:"admonition"},"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Name")," property to assign a name to your service registrations and ",(0,r.kt)("inlineCode",{parentName:"p"},'[FromNamedServices("...")]')," attribute to resolve a service using its name."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},'[ServiceProvider]\n[Singleton(typeof(INotificationService), typeof(EmailNotificationService), Name="email")]\n[Singleton(typeof(INotificationService), typeof(SmsNotificationService), Name="sms")]\n[Singleton(typeof(Notifier))]\ninternal partial class MyServiceProvider {}\n\nclass Notifier\n{\n    public Notifier(\n        [FromNamedServices("email")] INotificationService email,\n        [FromNamedServices("sms")] INotificationService sms)\n    {}\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"NOTE: Jab also recognizes the ",(0,r.kt)("inlineCode",{parentName:"p"},"[FromKeyedServices]")," attribute from ",(0,r.kt)("inlineCode",{parentName:"p"},"Microsoft.Extensions.DependencyInjection"),"."),(0,r.kt)("h3",{parentName:"admonition",id:"factories"},"Factories"),(0,r.kt)("p",{parentName:"admonition"},"Sometimes it's useful to provide a custom way to create a service instance without using the automatic construction selection.\nTo do this define a method in the container declaration and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Factory")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SingletonAttribute")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"TransientAttribute")," to register the service:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Transient(typeof(IService), Factory = nameof(MyServiceFactory))]\ninternal partial class MyServiceProvider {\n    public IService MyServiceFactory() => new ServiceImplementation();\n}\n\nMyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IService>();\n")),(0,r.kt)("p",{parentName:"admonition"},"When using with ",(0,r.kt)("inlineCode",{parentName:"p"},"TransientAttribute")," the factory method would be invoked for every service resolution.\nWhen used with ",(0,r.kt)("inlineCode",{parentName:"p"},"SingletonAttribute")," it would only be invoked the first time the service is requested."),(0,r.kt)("p",{parentName:"admonition"},"Similar to constructors, factories support parameter injection:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"[ServiceProvider]\n[Transient(typeof(IService), Factory = nameof(MyServiceFactory))]\n[Transient(typeof(SomeOtherService))]\ninternal partial class MyServiceProvider {\n    public IService MyServiceFactory(SomeOtherService other) => new ServiceImplementation(other);\n}\n")),(0,r.kt)("h3",{parentName:"admonition",id:"scoped-services"},"Scoped Services"),(0,r.kt)("p",{parentName:"admonition"},"Scoped services are created once per service provider scope. To create a scope use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateScope()")," method of the service provider.\nService are resolved from the scope using the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetService<IService>()")," call."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Scoped(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider { }\n\nMyServiceProvider c = new MyServiceProvider();\nusing MyServiceProvider.Scope scope = c.CreateScope();\nIService service = scope.GetService<IService>();\n")),(0,r.kt)("p",{parentName:"admonition"},"When the scope is disposed all ",(0,r.kt)("inlineCode",{parentName:"p"},"IDisposable")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"IAsyncDisposable")," services that were resolved from it are disposed as well."),(0,r.kt)("h3",{parentName:"admonition",id:"generic-registration-attributes"},"Generic registration attributes"),(0,r.kt)("p",{parentName:"admonition"},"You can use generic attributes to register services if your project targets ",(0,r.kt)("inlineCode",{parentName:"p"},"net7.0")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"net6.0")," and has ",(0,r.kt)("inlineCode",{parentName:"p"},"LangVersion")," set to preview."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <TargetFrameworks>net7.0</TargetFrameworks>\n  </PropertyGroup>\n\n</Project>\n\n')),(0,r.kt)("p",{parentName:"admonition"},"Generic attributes allow declaration to be more compact by avoiding the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeof")," calls:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Scoped<IService, ServiceImplementation>]\n[Import<IMyModule>]\ninternal partial class MyServiceProvider { }\n")),(0,r.kt)("h3",{parentName:"admonition",id:"modules"},"Modules"),(0,r.kt)("p",{parentName:"admonition"},"Often, a set of service registrations would represent a distinct set of functionality that can be included into arbitrary\nservice provider. Modules are used to implement registration sharing. To define a module create an interface and mark it with ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceProviderModuleAttribute"),". Service registrations can be listed in module the same way they are in the service provider."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProviderModule]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\npublic interface IMyModule\n{\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"To use the module apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"Import")," attribute to the service provider type:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider]\n[Import(typeof(IMyModule))]\ninternal partial class MyServiceProvider\n{\n}\n\nMyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IEnumerable<IService>>();\n")),(0,r.kt)("p",{parentName:"admonition"},"Modules can import other modules as well."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"NOTE"),": module service and implementation types have to be accessible from the project where service provider is generated."),(0,r.kt)("h2",{parentName:"admonition",id:"root-services"},"Root services"),(0,r.kt)("p",{parentName:"admonition"},"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<...>")," service accessors are only generated when requested by other service constructors. If you would like to have a root ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<..>")," accessor generated use the ",(0,r.kt)("inlineCode",{parentName:"p"},"RootService")," parameter of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceProvider")," attribute. The generator also scans all the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetService<...>")," usages and tries to all collected type arguments as the root service."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"[ServiceProvider(RootServices = new [] {typeof(IEnumerable<IService>)})]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\n[Singleton(typeof(IService), typeof(ServiceImplementation))]\ninternal partial class MyServiceProvider\n{\n}\n\nMyServiceProvider c = new MyServiceProvider();\nIService service = c.GetService<IEnumerable<IService>>();\n")),(0,r.kt)("h2",{parentName:"admonition",id:"samples"},"Samples"),(0,r.kt)("h3",{parentName:"admonition",id:"console-application"},"Console application"),(0,r.kt)("p",{parentName:"admonition"},"Sample Jab usage in console application can be found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/westermo/FactoryGenerator/src/samples/ConsoleSample"},"src/samples/ConsoleSample")),(0,r.kt)("h2",{parentName:"admonition",id:"performance"},"Performance"),(0,r.kt)("p",{parentName:"admonition"},"The performance benchmark project is available in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/westermo/FactoryGenerator/src/Jab.Performance/"},"src/Jab.Performance/"),"."),(0,r.kt)("h3",{parentName:"admonition",id:"startup-time"},"Startup time"),(0,r.kt)("p",{parentName:"admonition"},"The startup time benchmark measures time between application startup and the first service being resolved."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"| Method |        Mean |     Error |    StdDev |  Ratio | RatioSD |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|------- |------------:|----------:|----------:|-------:|--------:|-------:|-------:|------:|----------:|\n|   MEDI | 2,437.88 ns | 14.565 ns | 12.163 ns | 220.91 |    2.72 | 0.6332 | 0.0114 |     - |    6632 B |\n|    Jab |    11.03 ns |  0.158 ns |  0.123 ns |   1.00 |    0.00 | 0.0046 |      - |     - |      48 B |\n")),(0,r.kt)("h3",{parentName:"admonition",id:"getservice"},"GetService"),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetService")," benchmark measures the ",(0,r.kt)("inlineCode",{parentName:"p"},"provider.GetService<IService>()")," call."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"| Method |      Mean |     Error |    StdDev | Ratio | RatioSD |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|------- |----------:|----------:|----------:|------:|--------:|-------:|------:|------:|----------:|\n|   MEDI | 39.340 ns | 0.2419 ns | 0.2263 ns |  7.01 |    0.09 | 0.0023 |     - |     - |      24 B |\n|    Jab |  5.619 ns | 0.0770 ns | 0.0643 ns |  1.00 |    0.00 | 0.0023 |     - |     - |      24 B |\n")),(0,r.kt)("h2",{parentName:"admonition",id:"unity-installation"},"Unity installation"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Navigate to the Packages directory of your project."),(0,r.kt)("li",{parentName:"ol"},"Adjust the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Manual/upm-manifestPrj.html"},"project manifest file")," manifest.json in a text editor."),(0,r.kt)("li",{parentName:"ol"},"Ensure ",(0,r.kt)("inlineCode",{parentName:"li"},"https://registry.npmjs.org/")," is part of ",(0,r.kt)("inlineCode",{parentName:"li"},"scopedRegistries"),"."),(0,r.kt)("li",{parentName:"ol"},"Ensure ",(0,r.kt)("inlineCode",{parentName:"li"},"com.pakrym")," is part of ",(0,r.kt)("inlineCode",{parentName:"li"},"scopes"),"."),(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"com.pakrym.jab")," to the dependencies, stating the latest version.")),(0,r.kt)("p",{parentName:"admonition"},"A minimal example ends up looking like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'{\n  "scopedRegistries": [\n    {\n      "name": "npmjs",\n      "url": "https://registry.npmjs.org/",\n      "scopes": [\n        "com.pakrym"\n      ]\n    }\n  ],\n  "dependencies": {\n    "com.pakrym.jab": "0.10.2",\n    ...\n  }\n}\n')),(0,r.kt)("h2",{parentName:"admonition",id:"debugging-locally"},"Debugging locally"),(0,r.kt)("p",{parentName:"admonition"},"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet build /t:CreateLaunchSettings")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Jab.Tests")," directory would update the ",(0,r.kt)("inlineCode",{parentName:"p"},"Jab\\Properties\\launchSettings.json")," file to include ",(0,r.kt)("inlineCode",{parentName:"p"},"csc")," invocation that allows F5 debugging of the generator targeting the ",(0,r.kt)("inlineCode",{parentName:"p"},"Jab.Tests")," project.")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"generating DI code")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"FactoryGenerator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {14}",showLineNumbers:!0,"{14}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    <ItemGroup>\n      <PackageReference Include="FactoryGenerator" Version="1.0.11" />\n      <PackageReference Include="FactoryGenerator.Attributes" Version="1.0.11" />\n    </ItemGroup>\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"FactoryGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using InjectDemo;\n\nInjectDemo.Generated.DependencyInjectionContainer sc = new();\nvar db = sc.Resolve<IDatabase>();\ndb.Open();\n\n\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\Database.cs",label:"Database.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"FactoryGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Database.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using FactoryGenerator.Attributes;\n\nnamespace InjectDemo;\n\n[Inject, Scoped]\npublic partial class Database : IDatabase\n{\n    private readonly DatabaseCon con;\n\n    public Database(DatabaseCon con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open {con.Connection}");\n        this.con.Open();\n    }\n\n}\n\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"FactoryGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"DatabaseCon.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing FactoryGenerator.Attributes;\n\nnamespace InjectDemo;\n\n[Inject,Scoped, Self]\npublic partial class DatabaseCon: IDatabase\n{\n    public string? Connection { get; set; }\n    public void Open()\n    {\n        Console.WriteLine("open" + Connection);\n    }\n}\n\n\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\DependencyInjectionContainer.Constructor.g.cs",label:"DependencyInjectionContainer.Constructor.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\npublic partial class DependencyInjectionContainer\n{\n    \n    public DependencyInjectionContainer()\n    {\n        \n        \n        m_lookup = new(2)\n        {\n            { typeof(InjectDemo.IDatabase),InjectDemo_IDatabase },\n            { typeof(InjectDemo.DatabaseCon),InjectDemo_DatabaseCon },\n\n\n\n\n        };\n    }\n\n    \npublic ILifetimeScope BeginLifetimeScope()\n{\n    var scope = new LifetimeScope(this);\n    resolvedInstances.Add(new WeakReference<IDisposable>(scope));\n    return scope;\n}\n\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\DependencyInjectionContainer.Declarations.g.cs",label:"DependencyInjectionContainer.Declarations.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\npublic partial class DependencyInjectionContainer\n{\n    \n    internal InjectDemo.DatabaseCon InjectDemo_DatabaseCon()\n    {\n        if (m_InjectDemo_DatabaseCon != null)\n            return m_InjectDemo_DatabaseCon;\n    \n        lock (m_lock)\n        {\n            if (m_InjectDemo_DatabaseCon != null)\n                return m_InjectDemo_DatabaseCon;\n            return m_InjectDemo_DatabaseCon = new InjectDemo.DatabaseCon();\n        }\n    } \n    internal InjectDemo.DatabaseCon? m_InjectDemo_DatabaseCon;\n    \n    internal InjectDemo.Database InjectDemo_Database()\n    {\n        if (m_InjectDemo_Database != null)\n            return m_InjectDemo_Database;\n    \n        lock (m_lock)\n        {\n            if (m_InjectDemo_Database != null)\n                return m_InjectDemo_Database;\n            return m_InjectDemo_Database = new InjectDemo.Database(InjectDemo_DatabaseCon());\n        }\n    } \n    internal InjectDemo.Database? m_InjectDemo_Database;\n    internal InjectDemo.IDatabase InjectDemo_IDatabase() => InjectDemo_Database();\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\DependencyInjectionContainer.EnumerableDeclarations.g.cs",label:"DependencyInjectionContainer.EnumerableDeclarations.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\npublic partial class DependencyInjectionContainer\n{\n    \n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\DependencyInjectionContainer.Lookup.g.cs",label:"DependencyInjectionContainer.Lookup.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\n[GeneratedCode("FactoryGenerator", "1.0.0")]\n#nullable disable\npublic sealed partial class DependencyInjectionContainer : IContainer\n{\n    private object m_lock = new();\n    private Dictionary<Type,Func<object>> m_lookup;\n    private readonly List<WeakReference<IDisposable>> resolvedInstances = new();\n\n    public T Resolve<T>()\n    {\n        return (T)Resolve(typeof(T));\n    }\n\n    public object Resolve(Type type)\n    {\n        var instance = m_lookup[type]();\n        return instance;\n    }\n\n    public void Dispose()\n    {\n        foreach (var weakReference in resolvedInstances)\n        {\n            if(weakReference.TryGetTarget(out var disposable))\n            {\n                disposable.Dispose();\n            }\n        }\n        resolvedInstances.Clear();\n    }\n\n    public bool TryResolve(Type type, out object resolved)\n    {\n        if(m_lookup.TryGetValue(type, out var factory))\n        {\n            resolved = factory();\n            return true;\n        }\n        resolved = default;\n        return false;\n    }\n\n\n    public bool TryResolve<T>(out T resolved)\n    {\n        if(m_lookup.TryGetValue(typeof(T), out var factory))\n        {\n            var value = factory();\n            if(value is T t)\n            {\n                resolved = t;\n                return true;\n            }\n        }\n        resolved = default;\n        return false;\n    }\n    public bool IsRegistered(Type type)\n    {\n        return m_lookup.ContainsKey(type);\n    }\n    public bool IsRegistered<T>() => IsRegistered(typeof(T));\n}\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\LifetimeScope.Constructor.g.cs",label:"LifetimeScope.Constructor.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\npublic partial class LifetimeScope\n{\n    \n    public LifetimeScope(DependencyInjectionContainer fallback)\n    {\n        m_fallback = fallback;\n        \n        m_lookup = new(2)\n        {\n            { typeof(InjectDemo.IDatabase),InjectDemo_IDatabase },\n            { typeof(InjectDemo.DatabaseCon),InjectDemo_DatabaseCon },\n\n\n\n\n        };\n    }\n\n    \n\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\LifetimeScope.Declarations.g.cs",label:"LifetimeScope.Declarations.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\npublic partial class LifetimeScope\n{\n    \n    internal InjectDemo.DatabaseCon InjectDemo_DatabaseCon()\n    {\n        if (m_InjectDemo_DatabaseCon != null)\n            return m_InjectDemo_DatabaseCon;\n    \n        lock (m_lock)\n        {\n            if (m_InjectDemo_DatabaseCon != null)\n                return m_InjectDemo_DatabaseCon;\n            return m_InjectDemo_DatabaseCon = new InjectDemo.DatabaseCon();\n        }\n    } \n    internal InjectDemo.DatabaseCon? m_InjectDemo_DatabaseCon;\n    \n    internal InjectDemo.Database InjectDemo_Database()\n    {\n        if (m_InjectDemo_Database != null)\n            return m_InjectDemo_Database;\n    \n        lock (m_lock)\n        {\n            if (m_InjectDemo_Database != null)\n                return m_InjectDemo_Database;\n            return m_InjectDemo_Database = new InjectDemo.Database(InjectDemo_DatabaseCon());\n        }\n    } \n    internal InjectDemo.Database? m_InjectDemo_Database;\n    internal InjectDemo.IDatabase InjectDemo_IDatabase() => InjectDemo_Database();\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\LifetimeScope.EnumerableDeclarations.g.cs",label:"LifetimeScope.EnumerableDeclarations.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\npublic partial class LifetimeScope\n{\n    \n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FactoryGenerator\\src\\InjectDemo\\obj\\GX\\FactoryGenerator\\FactoryGenerator.FactoryGenerator\\LifetimeScope.Lookup.g.cs",label:"LifetimeScope.Lookup.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing System;\nusing System.Collections.Generic;\nusing FactoryGenerator;\nusing System.CodeDom.Compiler;\nnamespace InjectDemo.Generated;\n#nullable enable\n[GeneratedCode("FactoryGenerator", "1.0.0")]\n#nullable disable\npublic sealed partial class LifetimeScope : IContainer\n{\n    public ILifetimeScope BeginLifetimeScope()\n    {\n        var scope = m_fallback.BeginLifetimeScope();\n        resolvedInstances.Add(new WeakReference<IDisposable>(scope));\n        return scope;\n    }\n    private object m_lock = new();\n    private DependencyInjectionContainer m_fallback;\n    private Dictionary<Type,Func<object>> m_lookup;\n    private readonly List<WeakReference<IDisposable>> resolvedInstances = new();\n\n   public T Resolve<T>()\n    {\n        return (T)Resolve(typeof(T));\n    }\n\n    public object Resolve(Type type)\n    {\n        var instance = m_lookup[type]();\n        return instance;\n    }\n\n    public void Dispose()\n    {\n        foreach (var weakReference in resolvedInstances)\n        {\n            if(weakReference.TryGetTarget(out var disposable))\n            {\n                disposable.Dispose();\n            }\n        }\n        resolvedInstances.Clear();\n    }\n\n    public bool TryResolve(Type type, out object resolved)\n    {\n        if(m_lookup.TryGetValue(type, out var factory))\n        {\n            resolved = factory();\n            return true;\n        }\n        resolved = default;\n        return false;\n    }\n\n\n    public bool TryResolve<T>(out T resolved)\n    {\n        if(m_lookup.TryGetValue(typeof(T), out var factory))\n        {\n            var value = factory();\n            if(value is T t)\n            {\n                resolved = t;\n                return true;\n            }\n        }\n        resolved = default;\n        return false;\n    }\n    public bool IsRegistered(Type type)\n    {\n        return m_lookup.ContainsKey(type);\n    }\n    public bool IsRegistered<T>() => IsRegistered(typeof(T));\n}\n\n')))),(0,r.kt)("h2",{id:"useful"},"Useful"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:t(71067).Z},"Download Example project FactoryGenerator "))),(0,r.kt)("h3",{id:"share-factorygenerator"},"Share FactoryGenerator"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFactoryGenerator&quote=FactoryGenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFactoryGenerator&text=FactoryGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFactoryGenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFactoryGenerator&title=FactoryGenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFactoryGenerator&title=FactoryGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFactoryGenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/FactoryGenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/FactoryGenerator")),(0,r.kt)("h3",{id:"in-the-same-category-dependencyinjection---7-other-generators"},"In the same category (DependencyInjection) - 7 other generators"),(0,r.kt)("h4",{id:"autoregisterinject"},(0,r.kt)("a",{parentName:"h4",href:"/docs/AutoRegisterInject"},"AutoRegisterInject")),(0,r.kt)("h4",{id:"dependencymodulessourcegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/DependencyModules.SourceGenerator"},"DependencyModules.SourceGenerator")),(0,r.kt)("h4",{id:"depso"},(0,r.kt)("a",{parentName:"h4",href:"/docs/depso"},"depso")),(0,r.kt)("h4",{id:"injectio"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Injectio"},"Injectio")),(0,r.kt)("h4",{id:"jab"},(0,r.kt)("a",{parentName:"h4",href:"/docs/jab"},"jab")),(0,r.kt)("h4",{id:"puredi"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Pure.DI"},"Pure.DI")),(0,r.kt)("h4",{id:"servicescansourcegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ServiceScan.SourceGenerator"},"ServiceScan.SourceGenerator")))}k.isMDXComponent=!0},71067:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/FactoryGenerator-aa9d6c11963d35d55548f269660dae4b.zip"}}]);