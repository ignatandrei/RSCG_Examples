"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6647],{61028:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>u,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"RSCG-Examples/GeneratorEquals","title":"41 - GeneratorEquals","description":"Generating Equals from properties","source":"@site/docs/RSCG-Examples/GeneratorEquals.md","sourceDirName":"RSCG-Examples","slug":"/GeneratorEquals","permalink":"/RSCG_Examples/v2/docs/GeneratorEquals","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/GeneratorEquals.md","tags":[],"version":"current","sidebarPosition":410,"frontMatter":{"sidebar_position":410,"title":"41 - GeneratorEquals","description":"Generating Equals from properties","slug":"/GeneratorEquals"},"sidebar":"tutorialSidebar","previous":{"title":"40 - FastGenericNew","permalink":"/RSCG_Examples/v2/docs/FastGenericNew"},"next":{"title":"42 - Immutype","permalink":"/RSCG_Examples/v2/docs/Immutype"}}');var n=t(74848),s=t(28453),l=t(11470),i=t(19365),o=t(14252);const u={sidebar_position:410,title:"41 - GeneratorEquals",description:"Generating Equals from properties",slug:"/GeneratorEquals"},d="GeneratorEquals  by Diego Frato",c={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Migrating from version 2",id:"migrating-from-version-2",level:2},{value:"Usage",id:"usage",level:2},{value:"Supported Comparers",id:"supported-comparers",level:2},{value:"Default",id:"default",level:3},{value:"IgnoreEquality",id:"ignoreequality",level:3},{value:"OrderedEquality",id:"orderedequality",level:3},{value:"UnorderedEquality",id:"unorderedequality",level:3},{value:"SetEquality",id:"setequality",level:3},{value:"ReferenceEquality",id:"referenceequality",level:3},{value:"CustomEquality",id:"customequality",level:3},{value:"Advanced Options",id:"advanced-options",level:2},{value:"Explicit Mode",id:"explicit-mode",level:3},{value:"Ignore Inherited Members",id:"ignore-inherited-members",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share GeneratorEquals",id:"share-generatorequals",level:3},{value:"In the same category (Equals) - 2 other generators",id:"in-the-same-category-equals---2-other-generators",level:3},{value:"Equatable.Generator",id:"equatablegenerator",level:4},{value:"Valuify",id:"valuify",level:4}];function p(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"generatorequals--by-diego-frato",children:"GeneratorEquals  by Diego Frato"})}),"\n",(0,n.jsx)(o.A,{toc:h}),"\n",(0,n.jsx)(r.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/Generator.Equals/",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/nuget/dt/Generator.Equals?label=Generator.Equals",alt:"Nuget"})}),"\n",(0,n.jsx)(r.a,{href:"https://github.com/diegofrata/Generator.Equals",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/github/last-commit/diegofrata/Generator.Equals?label=updated",alt:"GitHub last commit"})}),"\n",(0,n.jsx)(r.img,{src:"https://img.shields.io/github/stars/diegofrata/Generator.Equals?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,n.jsx)(r.h2,{id:"details",children:"Details"}),"\n",(0,n.jsx)(r.h3,{id:"info",children:"Info"}),"\n",(0,n.jsxs)(r.admonition,{type:"info",children:[(0,n.jsxs)(r.p,{children:["Name: ",(0,n.jsx)(r.strong,{children:"GeneratorEquals"})]}),(0,n.jsx)(r.p,{children:"A source code generator for automatically implementing IEquatable using only attributes."}),(0,n.jsx)(r.p,{children:"Author: Diego Frato"}),(0,n.jsxs)(r.p,{children:["NuGet:\n",(0,n.jsx)(r.em,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/Generator.Equals/",children:"https://www.nuget.org/packages/Generator.Equals/"})})]}),(0,n.jsxs)(r.p,{children:["You can find more details at ",(0,n.jsx)(r.a,{href:"https://github.com/diegofrata/Generator.Equals",children:"https://github.com/diegofrata/Generator.Equals"})]}),(0,n.jsxs)(r.p,{children:["Source: ",(0,n.jsx)(r.a,{href:"https://github.com/diegofrata/Generator.Equals",children:"https://github.com/diegofrata/Generator.Equals"})]})]}),"\n",(0,n.jsx)(r.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,n.jsxs)(r.admonition,{type:"note",children:[(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://www.nuget.org/packages/Generator.Equals/",children:(0,n.jsx)(r.img,{src:"https://img.shields.io/nuget/v/Generator.Equals",alt:"Nuget"})})}),(0,n.jsx)(r.h1,{id:"generatorequals",children:"Generator.Equals"}),(0,n.jsx)(r.p,{children:"A source code generator for automatically implementing IEquatable<T> using only attributes."}),(0,n.jsx)(r.hr,{}),(0,n.jsx)(r.h2,{id:"requirements",children:"Requirements"}),(0,n.jsx)(r.p,{children:"In order to use this library, you must:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Use a target framework that supports .NET Standard >= 2.0"}),"\n",(0,n.jsxs)(r.li,{children:["Set your project's C# ",(0,n.jsx)(r.code,{children:"LangVersion"})," property to 9.0 or higher."]}),"\n"]}),(0,n.jsx)(r.h2,{id:"installation",children:"Installation"}),(0,n.jsxs)(r.p,{children:["Simply add the package ",(0,n.jsx)(r.code,{children:"Generator.Equals"})," to your project. Keep reading to learn how to add the attributes to your types."]}),(0,n.jsx)(r.h2,{id:"migrating-from-version-2",children:"Migrating from version 2"}),(0,n.jsx)(r.p,{children:"Migrating to version 3 is very straightforward."}),(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Ensure projects are targeting C# 9.0 or latter using the MSBuild property ",(0,n.jsx)(r.code,{children:"LangVersion"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:["Be aware that ",(0,n.jsx)(r.code,{children:"IEquatable<T>"})," for classes is now implemented explicitly in order to support deep equality. As a result, the method ",(0,n.jsx)(r.code,{children:"Equals(T)"})," method is no longer marked as public. Most code should still work, requiring only to be recompiled as the ABI has changed."]}),"\n"]}),(0,n.jsxs)(r.p,{children:["If you have an existing project using ",(0,n.jsx)(r.code,{children:"Generator.Equals"})," and don't need any of the new features, you can still use version 2.x. The differences are minimal between both major versions."]}),(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),(0,n.jsx)(r.p,{children:"The below sample shows how to use Generator.Equals to override the default equality implementation for a C# record, enhancing it with the ability to determine the equality between the array contents of the record."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:'using Generator.Equals;\n\n[Equatable]\npartial record MyRecord(\n    [property: OrderedEquality] string[] Fruits\n);\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var record1 = new MyRecord(new[] {"banana", "apple"});\n        var record2 = new MyRecord(new[] {"banana", "apple"});\n\n        Console.WriteLine(record1 == record2);\n    }\n}\n'})}),(0,n.jsx)(r.p,{children:"Need more than records? Generator.Equals supports properties (and fields) also across classes, structs and record structs."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"using Generator.Equals;\n\n[Equatable]\npartial class MyClass\n{\n    [DefaultEquality] \n    private int _secretNumber = 42;\n\n    [OrderedEquality] \n    public string[] Fruits { get; set; }\n}\n\n[Equatable]\npartial struct MyStruct\n{\n    [OrderedEquality] \n    public string[] Fruits { get; set; }\n}\n\n[Equatable]\npartial record struct MyRecordStruct(\n    [property: OrderedEquality] string[] Fruits\n);\n"})}),(0,n.jsx)(r.h2,{id:"supported-comparers",children:"Supported Comparers"}),(0,n.jsx)(r.p,{children:"Below is a list of all supported comparers. Would you like something else added? Let me know by raising an issue or sending a PR!"}),(0,n.jsx)(r.h3,{id:"default",children:"Default"}),(0,n.jsxs)(r.p,{children:["This is the comparer that's used when a property has no attributes indicating otherwise. The generated code will use\n",(0,n.jsx)(r.code,{children:"EqualityComparer<T>.Default"})," for both equals and hashing operation."]}),(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:(0,n.jsxs)(r.em,{children:["Fields are not used in comparison unless explicitly annotated. To enable the default comparison for a field, annotate it with the ",(0,n.jsx)(r.code,{children:"DefaultEquality"})," attribute."]})}),"\n"]}),(0,n.jsx)(r.h3,{id:"ignoreequality",children:"IgnoreEquality"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"[IgnoreEquality] \npublic string Name { get; set; }\n"})}),(0,n.jsx)(r.p,{children:"As the name implies, the property is ignored during Equals and GetHashCode calls!"}),(0,n.jsx)(r.h3,{id:"orderedequality",children:"OrderedEquality"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"[OrderedEquality] \npublic string[] Fruits { get; set; } // Fruits have to be in the same order for the array to be considered equal.\n"})}),(0,n.jsxs)(r.p,{children:["This equality comparer will compare properties as a sequence instead of a reference. This works just like ",(0,n.jsx)(r.code,{children:"Enumerable.SequenceEqual"}),", which assumes both lists are of the same size and same sort."]}),(0,n.jsx)(r.p,{children:"Bear in mind that the property has to implement IEnumerable and the that the items themselves implement equality (you can use Generator.Equals in the items too!)."}),(0,n.jsx)(r.h3,{id:"unorderedequality",children:"UnorderedEquality"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"[UnorderedEquality] \npublic string[] Fruits { get; set; } // Does not care about the order of the fruits!\n\n[UnorderedEquality] \npublic IDictionary<string, object> Properties { get; set; } // Works with dictionaries too!\n"})}),(0,n.jsxs)(r.p,{children:["This equality comparer will compare properties as an unordered sequence instead of a reference. This works just like ",(0,n.jsx)(r.code,{children:"Enumerable.SequenceEqual"}),", but it does not care about the order as long as the all values (including the repetitions) are present."]}),(0,n.jsx)(r.p,{children:"As with OrderedEquality, bear in mind that the property (or key and values if using a dictionary) has to implement IEnumerable and the that the items themselves implement equality (you can use Generator.Equals in the items too!)."}),(0,n.jsx)(r.h3,{id:"setequality",children:"SetEquality"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"[SetEquality] \npublic HashSet<string> Fruits { get; set; } // Fruits can be in any order and it can be repeated\n"})}),(0,n.jsxs)(r.p,{children:["This equality comparer will do a set comparison, using ",(0,n.jsx)(r.code,{children:"SetEquals"})," whenever the underlying collection implements ",(0,n.jsx)(r.code,{children:"ISet<T>"}),", otherwise falling back to  manually comparing both collections, which can be expensive for large collections."]}),(0,n.jsx)(r.p,{children:"Hashing always returns 0 for this type of equality,"}),(0,n.jsx)(r.h3,{id:"referenceequality",children:"ReferenceEquality"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"[ReferenceEquality] \npublic string Name { get; set; } // Will only return true if strings are the same reference (eg. when used with string.Intern)\n"})}),(0,n.jsx)(r.p,{children:"This will ignore whatever equality is implemented for a particular object and compare references instead."}),(0,n.jsx)(r.h3,{id:"customequality",children:"CustomEquality"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-c#",children:"class LengthEqualityComparer : IEqualityComparer<string>\n{\n    public static readonly LengthEqualityComparer Default = new();\n\n    public bool Equals(string? x, string? y) => x?.Length == y?.Length;\n\n    public int GetHashCode(string obj) => obj.Length.GetHashCode();\n}\n\nclass NameEqualityComparer \n{\n    public static readonly IEqualityComparer<string> Default = new SomeCustomComparer();\n}\n\n\n[CustomEquality(typeof(LengthEqualityComparer))] \npublic string Name1 { get; set; } // Will use LengthEqualityComparer to compare the values of Name1.\n\n[CustomEquality(typeof(NameEqualityComparer))] \npublic string Name2 { get; set; } // Will use NameEqualityComparer.Default to compare values of Name2.\n\n[CustomEquality(typeof(StringComparer), nameof(StringComparer.OrdinalIgnoreCase))] \npublic string Name2 { get; set; } // Will use StringComparer.OrdinalIgnoreCase to compare values of Name2.\n"})}),(0,n.jsx)(r.p,{children:"This attribute allows you to specify a custom comparer for a particular property. For it to work, the type passed as an\nargument to CustomEqualityAttribute should fulfill AT LEAST one of the following:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Have a static field/property named Default returning a valid IEqualityComparer instance for the target type;"}),"\n",(0,n.jsx)(r.li,{children:"Have a static field/property with the same name passed to the CustomComparerAttribute returning a valid IEqualityComparer instance for the target type;"}),"\n",(0,n.jsx)(r.li,{children:"Implement IEqualityComparer and expose a parameterless constructor."}),"\n"]}),(0,n.jsx)(r.h2,{id:"advanced-options",children:"Advanced Options"}),(0,n.jsx)(r.h3,{id:"explicit-mode",children:"Explicit Mode"}),(0,n.jsxs)(r.p,{children:["The generator allows you to explicitly specify which properties are used to generate the ",(0,n.jsx)(r.code,{children:"IEquatable"}),"."]}),(0,n.jsxs)(r.p,{children:["To do this, set the ",(0,n.jsx)(r.code,{children:"Explicit"})," property of ",(0,n.jsx)(r.code,{children:"EquatableAttribute"})," to ",(0,n.jsx)(r.code,{children:"true"})," and specify the required properties using ",(0,n.jsx)(r.code,{children:"DefaultEqualityAttribute"})," or other attributes."]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cs",children:'using Generator.Equals;\n\n[Equatable(Explicit = true)]\npartial class MyClass\n{\n    // Only this property will be used for equality!\n    [DefaultEquality] \n    public string Name { get; set; } = "Konstantin"; \n    \n    public string Description { get; set; } = "";\n}\n'})}),(0,n.jsx)(r.h3,{id:"ignore-inherited-members",children:"Ignore Inherited Members"}),(0,n.jsxs)(r.p,{children:["You can also choose to ignore members from parent classes/record by setting ",(0,n.jsx)(r.code,{children:"IgnoreInheritedMembers"})," to true."]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cs",children:"using Generator.Equals;\n\nclass Person \n{\n    public string Name { get; set; }\n}\n\n[Equatable(IgnoreInheritedMembers = true)]\npartial class Doctor : Person\n{\n    // Only members in the Doctor class will be used for comparison.\n    public string Id { get; set; }\n    public string Specialization { get; set; }\n}\n"})})]}),"\n",(0,n.jsx)(r.h3,{id:"about",children:"About"}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsx)(r.p,{children:"Generating Equals from properties"})}),"\n",(0,n.jsx)(r.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,n.jsx)(r.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,n.jsxs)(l.A,{children:[(0,n.jsxs)(i.A,{value:"csproj",label:"CSharp Project",children:[(0,n.jsxs)(r.p,{children:["This is the CSharp Project that references ",(0,n.jsx)(r.strong,{children:"GeneratorEquals"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Generator.Equals" Version="3.0.0" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,n.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GeneratorEquals\\src\\GeneratorEqualsDemo\\Program.cs",label:"Program.cs",children:[(0,n.jsxs)(r.p,{children:["This is the use of ",(0,n.jsx)(r.strong,{children:"GeneratorEquals"})," in ",(0,n.jsx)(r.em,{children:"Program.cs"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing GeneratorEqualsDemo;\nvar p1 = new Person()\n{\n    ID = 1,\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nvar p2= new Person()\n{\n    ID = 2,\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nConsole.WriteLine(p1==p2);\n\n'})})]}),(0,n.jsxs)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GeneratorEquals\\src\\GeneratorEqualsDemo\\Person.cs",label:"Person.cs",children:[(0,n.jsxs)(r.p,{children:["This is the use of ",(0,n.jsx)(r.strong,{children:"GeneratorEquals"})," in ",(0,n.jsx)(r.em,{children:"Person.cs"})]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Generator.Equals;\n\nnamespace GeneratorEqualsDemo;\n\n[Equatable]\npartial class Person\n{\n    [IgnoreEquality]\n    public int ID { get; set; }\n    [DefaultEquality]\n    public string? FirstName { get; set; }\n    [DefaultEquality] \n    public string? LastName { get; set; }\n}\n\n"})})]})]}),"\n",(0,n.jsx)(r.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,n.jsx)(r.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,n.jsx)(l.A,{children:(0,n.jsx)(i.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GeneratorEquals\\src\\GeneratorEqualsDemo\\obj\\GX\\Generator.Equals\\Generator.Equals.EqualsGenerator\\GeneratorEqualsDemo.Person.Generator.Equals.g.cs",label:"GeneratorEqualsDemo.Person.Generator.Equals.g.cs",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\n#nullable enable\n#pragma warning disable CS0612,CS0618\n#pragma warning disable CS0436\n\nnamespace GeneratorEqualsDemo\n{\n    partial class Person : global::System.IEquatable<Person>\n    {\n        /// <summary>\n        /// Indicates whether the object on the left is equal to the object on the right.\n        /// </summary>\n        /// <param name="left">The left object</param>\n        /// <param name="right">The right object</param>\n        /// <returns>true if the objects are equal; otherwise, false.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public static bool operator ==(\n            global::GeneratorEqualsDemo.Person? left,\n            global::GeneratorEqualsDemo.Person? right) =>\n            global::Generator.Equals.DefaultEqualityComparer<global::GeneratorEqualsDemo.Person?>.Default\n                .Equals(left, right);\n        \n        /// <summary>\n        /// Indicates whether the object on the left is not equal to the object on the right.\n        /// </summary>\n        /// <param name="left">The left object</param>\n        /// <param name="right">The right object</param>\n        /// <returns>true if the objects are not equal; otherwise, false.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) =>\n            !(left == right);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public override bool Equals(object? obj) =>\n            Equals(obj as global::GeneratorEqualsDemo.Person);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        bool global::System.IEquatable<global::GeneratorEqualsDemo.Person>.Equals(global::GeneratorEqualsDemo.Person? obj) => Equals((object?) obj);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        protected bool Equals(global::GeneratorEqualsDemo.Person? other)\n        {\n            if (ReferenceEquals(null, other)) return false;\n            if (ReferenceEquals(this, other)) return true;\n            \n            return other.GetType() == this.GetType()\n                && global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default.Equals(this.FirstName!, other.FirstName!)\n                && global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default.Equals(this.LastName!, other.LastName!)\n                ;\n        }\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public override int GetHashCode()\n        {\n            var hashCode = new global::System.HashCode();\n            \n            hashCode.Add(this.GetType());\n            hashCode.Add(\n                this.FirstName!,\n                global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default);\n            hashCode.Add(\n                this.LastName!,\n                global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default);\n            \n            return hashCode.ToHashCode();\n        }\n    }\n}\n\n'})})})}),"\n",(0,n.jsx)(r.h2,{id:"useful",children:"Useful"}),"\n",(0,n.jsx)(r.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(67142).A+"",children:"Download Example project GeneratorEquals "})})}),"\n",(0,n.jsx)(r.h3,{id:"share-generatorequals",children:"Share GeneratorEquals"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&quote=GeneratorEquals",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&text=GeneratorEquals:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&title=GeneratorEquals",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&title=GeneratorEquals&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/GeneratorEquals",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/GeneratorEquals"})}),"\n",(0,n.jsx)(r.h3,{id:"in-the-same-category-equals---2-other-generators",children:"In the same category (Equals) - 2 other generators"}),"\n",(0,n.jsx)(r.h4,{id:"equatablegenerator",children:(0,n.jsx)(r.a,{href:"/docs/Equatable.Generator",children:"Equatable.Generator"})}),"\n",(0,n.jsx)(r.h4,{id:"valuify",children:(0,n.jsx)(r.a,{href:"/docs/Valuify",children:"Valuify"})})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},67142:(e,r,t)=>{t.d(r,{A:()=>a});const a=t.p+"assets/files/GeneratorEquals-bdb72b6f07755095dd99764004ccde85.zip"}}]);