"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9357],{18978:(e,n,i)=>{i.d(n,{Ay:()=>r,RM:()=>s});var t=i(74848),l=i(28453);const s=[{value:"Category &quot;FunctionalProgramming&quot; has the following generators:",id:"category-functionalprogramming-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function o(e){const n={a:"a",h3:"h3",p:"p",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"category-functionalprogramming-has-the-following-generators",children:'Category "FunctionalProgramming" has the following generators:'}),"\n",(0,t.jsxs)(n.p,{children:["1 ",(0,t.jsx)(n.a,{href:"/docs/cachesourcegenerator",children:"cachesourcegenerator"})]}),"\n",(0,t.jsxs)(n.p,{children:["2 ",(0,t.jsx)(n.a,{href:"/docs/dunet",children:"dunet"})]}),"\n",(0,t.jsxs)(n.p,{children:["3 ",(0,t.jsx)(n.a,{href:"/docs/Dusharp",children:"Dusharp"})]}),"\n",(0,t.jsxs)(n.p,{children:["4 ",(0,t.jsx)(n.a,{href:"/docs/Funcky.DiscriminatedUnion",children:"Funcky.DiscriminatedUnion"})]}),"\n",(0,t.jsxs)(n.p,{children:["5 ",(0,t.jsx)(n.a,{href:"/docs/FunicularSwitch",children:"FunicularSwitch"})]}),"\n",(0,t.jsxs)(n.p,{children:["6 ",(0,t.jsx)(n.a,{href:"/docs/N.SourceGenerators.UnionTypes",children:"N.SourceGenerators.UnionTypes"})]}),"\n",(0,t.jsxs)(n.p,{children:["7 ",(0,t.jsx)(n.a,{href:"/docs/OneOf",children:"OneOf"})]}),"\n",(0,t.jsxs)(n.p,{children:["8 ",(0,t.jsx)(n.a,{href:"/docs/PartiallyApplied",children:"PartiallyApplied"})]}),"\n",(0,t.jsxs)(n.p,{children:["9 ",(0,t.jsx)(n.a,{href:"/docs/polytype",children:"polytype"})]}),"\n",(0,t.jsxs)(n.p,{children:["10 ",(0,t.jsx)(n.a,{href:"/docs/rscg_demeter",children:"rscg_demeter"})]}),"\n",(0,t.jsxs)(n.p,{children:["11 ",(0,t.jsx)(n.a,{href:"/docs/rscg_queryables",children:"rscg_queryables"})]}),"\n",(0,t.jsxs)(n.p,{children:["12 ",(0,t.jsx)(n.a,{href:"/docs/RSCG_Utils_Memo",children:"RSCG_Utils_Memo"})]}),"\n",(0,t.jsxs)(n.p,{children:["13 ",(0,t.jsx)(n.a,{href:"/docs/Sera.Union",children:"Sera.Union"})]}),"\n",(0,t.jsxs)(n.p,{children:["14 ",(0,t.jsx)(n.a,{href:"/docs/TypeUtilities",children:"TypeUtilities"})]}),"\n",(0,t.jsxs)(n.p,{children:["15 ",(0,t.jsx)(n.a,{href:"/docs/UnionGen",children:"UnionGen"})]}),"\n",(0,t.jsxs)(n.p,{children:["16 ",(0,t.jsx)(n.a,{href:"/docs/UnionsGenerator",children:"UnionsGenerator"})]}),"\n",(0,t.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/Categories/FunctionalProgramming",children:"FunctionalProgramming"})})]})}function r(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},26532:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>g,default:()=>d,frontMatter:()=>p,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"RSCG-Examples/Sera.Union","title":"157 - Sera.Union","description":"Generate tagged union","source":"@site/docs/RSCG-Examples/Sera.Union.md","sourceDirName":"RSCG-Examples","slug":"/Sera.Union","permalink":"/RSCG_Examples/v2/docs/Sera.Union","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1570,"frontMatter":{"sidebar_position":1570,"title":"157 - Sera.Union","description":"Generate tagged union","slug":"/Sera.Union"},"sidebar":"tutorialSidebar","previous":{"title":"156 - RSCG_NameGenerator","permalink":"/RSCG_Examples/v2/docs/RSCG_NameGenerator"},"next":{"title":"158 - Enhanced.GetTypes","permalink":"/RSCG_Examples/v2/docs/Enhanced.GetTypes"}}');var l=i(74848),s=i(28453),o=i(11470),r=i(19365),a=i(14252),m=i(18978);const p={sidebar_position:1570,title:"157 - Sera.Union",description:"Generate tagged union",slug:"/Sera.Union"},g="Sera.Union  by Sera",c={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Example",id:"example",level:2},{value:"How to use",id:"how-to-use",level:4},{value:"Support generics",id:"support-generics",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use-1",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Sera.Union",id:"share-seraunion",level:3},...m.RM];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"seraunion--by-sera",children:"Sera.Union  by Sera"})}),"\n",(0,l.jsx)(a.A,{toc:u}),"\n",(0,l.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/Sera.Union/",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Sera.Union?label=Sera.Union",alt:"Nuget"})}),"\n",(0,l.jsx)(n.a,{href:"https://github.com/sera-net/Sera.Union",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/sera-net/Sera.Union?label=updated",alt:"GitHub last commit"})}),"\n",(0,l.jsx)(n.img,{src:"https://img.shields.io/github/stars/sera-net/Sera.Union?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,l.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,l.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,l.jsxs)(n.admonition,{type:"info",children:[(0,l.jsxs)(n.p,{children:["Name: ",(0,l.jsx)(n.strong,{children:"Sera.Union"})]}),(0,l.jsx)(n.p,{children:"Tagged union for c#"}),(0,l.jsx)(n.p,{children:"Author: Sera"}),(0,l.jsxs)(n.p,{children:["NuGet:\n",(0,l.jsx)(n.em,{children:(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/Sera.Union/",children:"https://www.nuget.org/packages/Sera.Union/"})})]}),(0,l.jsxs)(n.p,{children:["You can find more details at ",(0,l.jsx)(n.a,{href:"https://github.com/sera-net/Sera.Union",children:"https://github.com/sera-net/Sera.Union"})]}),(0,l.jsxs)(n.p,{children:["Source: ",(0,l.jsx)(n.a,{href:"https://github.com/sera-net/Sera.Union",children:"https://github.com/sera-net/Sera.Union"})]})]}),"\n",(0,l.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsx)(n.h1,{id:"seraunion",children:"Sera.Union"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://github.com/sera-net/Sera.Union/actions/workflows/dotnet.yml",children:(0,l.jsx)(n.img,{src:"https://github.com/sera-net/Sera.Union/actions/workflows/dotnet.yml/badge.svg",alt:".NET"})}),"\n",(0,l.jsx)(n.img,{src:"https://img.shields.io/github/license/sera-net/Sera.Union",alt:"MIT"})]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Sera.Union",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/Sera.Union/",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Sera.Union",alt:"Nuget"})}),"\n",(0,l.jsx)(n.a,{href:"https://openupm.com/packages/net.sera.union/",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/npm/v/net.sera.union?label=openupm&registry_uri=https://package.openupm.com",alt:"openupm"})})]}),"\n",(0,l.jsxs)(n.li,{children:["Sera.Union.Utilities",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.a,{href:"https://www.nuget.org/packages/Sera.Union.Utilities/",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Sera.Union.Utilities",alt:"Nuget"})})]}),"\n"]}),(0,l.jsx)(n.p,{children:"Generate Tagged Union using source generator"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"All unmanaged types will overlap"}),"\n",(0,l.jsx)(n.li,{children:"All classes will overlap"}),"\n",(0,l.jsx)(n.li,{children:"Other types will be tiled"}),"\n"]}),(0,l.jsx)(n.h2,{id:"example",children:"Example"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:"[Union]\npublic readonly partial struct Union1\n{\n    [UnionTemplate]\n    private interface Template\n    {\n        int A();\n        string B();\n        bool C();\n        (int a, int b) D();\n        void E();\n        List<int>? F();\n        (int a, string b) G();\n    }\n}\n"})}),(0,l.jsx)(n.p,{children:"Generate output:"}),(0,l.jsxs)(t,{children:[(0,l.jsx)("summary",{children:"Union1.union.g.cs"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\npublic readonly partial struct Union1\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<Union1>\n    , global::System.IComparable<Union1>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<Union1, Union1, bool>\n    , global::System.Numerics.IComparisonOperators<Union1, Union1, bool>\n#endif\n{\n    private readonly __impl_ _impl;\n    private Union1(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        A = 1,\n        B = 2,\n        C = 3,\n        D = 4,\n        E = 5,\n        F = 6,\n        G = 7,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public __class_ _class_;\n        public __unmanaged_ _unmanaged_;\n        public (int a, string b) _0;\n        public readonly Tags _tag;\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __class_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public string _0;\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public List<int>? _1;\n        }\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __unmanaged_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public int _0;\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public bool _1;\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public (int a, int b) _2;\n        }\n\n        public __impl_(Tags _tag)\n        {\n            this._class_ = default;\n            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_);\n            this._0 = default!;\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeA(int value)\n    {\n        var _impl = new __impl_(Tags.A);\n        _impl._unmanaged_._0 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeB(string value)\n    {\n        var _impl = new __impl_(Tags.B);\n        _impl._class_._0 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeC(bool value)\n    {\n        var _impl = new __impl_(Tags.C);\n        _impl._unmanaged_._1 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeD((int a, int b) value)\n    {\n        var _impl = new __impl_(Tags.D);\n        _impl._unmanaged_._2 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeE()\n    {\n        var _impl = new __impl_(Tags.E);\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeF(List<int>? value)\n    {\n        var _impl = new __impl_(Tags.F);\n        _impl._class_._1 = value;\n        return new Union1(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Union1 MakeG((int a, string b) value)\n    {\n        var _impl = new __impl_(Tags.G);\n        _impl._0 = value;\n        return new Union1(_impl);\n    }\n\n    public readonly bool IsA\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.A;\n    }\n    public readonly bool IsB\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.B;\n    }\n    public readonly bool IsC\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.C;\n    }\n    public readonly bool IsD\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.D;\n    }\n    public readonly bool IsE\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.E;\n    }\n    public readonly bool IsF\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.F;\n    }\n    public readonly bool IsG\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.G;\n    }\n\n    public int A\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsA ? default! : this._impl._unmanaged_._0!;\n    }\n    public string B\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsB ? default! : this._impl._class_._0!;\n    }\n    public bool C\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsC ? default! : this._impl._unmanaged_._1!;\n    }\n    public (int a, int b) D\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsD ? default! : this._impl._unmanaged_._2!;\n    }\n    public List<int>? F\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsF ? default! : this._impl._class_._1!;\n    }\n    public (int a, string b) G\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => !this.IsG ? default! : this._impl._0!;\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(Union1 other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.A => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(this.A, other.A),\n        Tags.B => global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(this.B, other.B),\n        Tags.C => global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(this.C, other.C),\n        Tags.D => global::System.Collections.Generic.EqualityComparer<(int a, int b)>.Default.Equals(this.D, other.D),\n        Tags.F => global::System.Collections.Generic.EqualityComparer<List<int>?>.Default.Equals(this.F, other.F),\n        Tags.G => global::System.Collections.Generic.EqualityComparer<(int a, string b)>.Default.Equals(this.G, other.G),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.A => global::System.HashCode.Combine(this.Tag, this.A),\n        Tags.B => global::System.HashCode.Combine(this.Tag, this.B),\n        Tags.C => global::System.HashCode.Combine(this.Tag, this.C),\n        Tags.D => global::System.HashCode.Combine(this.Tag, this.D),\n        Tags.F => global::System.HashCode.Combine(this.Tag, this.F),\n        Tags.G => global::System.HashCode.Combine(this.Tag, this.G),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is Union1 other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(Union1 left, Union1 right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(Union1 left, Union1 right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(Union1 other) => this.Tag != other.Tag ? Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.A => global::System.Collections.Generic.Comparer<int>.Default.Compare(this.A, other.A),\n        Tags.B => global::System.Collections.Generic.Comparer<string>.Default.Compare(this.B, other.B),\n        Tags.C => global::System.Collections.Generic.Comparer<bool>.Default.Compare(this.C, other.C),\n        Tags.D => global::System.Collections.Generic.Comparer<(int a, int b)>.Default.Compare(this.D, other.D),\n        Tags.F => global::System.Collections.Generic.Comparer<List<int>?>.Default.Compare(this.F, other.F),\n        Tags.G => global::System.Collections.Generic.Comparer<(int a, string b)>.Default.Compare(this.G, other.G),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(Union1 left, Union1 right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(Union1 left, Union1 right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(Union1 left, Union1 right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(Union1 left, Union1 right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.A => $"{nameof(Union1)}.{nameof(Tags.A)} {{ {this.A} }}",\n        Tags.B => $"{nameof(Union1)}.{nameof(Tags.B)} {{ {this.B} }}",\n        Tags.C => $"{nameof(Union1)}.{nameof(Tags.C)} {{ {this.C} }}",\n        Tags.D => $"{nameof(Union1)}.{nameof(Tags.D)} {{ {this.D} }}",\n        Tags.E => $"{nameof(Union1)}.{nameof(Tags.E)}",\n        Tags.F => $"{nameof(Union1)}.{nameof(Tags.F)} {{ {this.F} }}",\n        Tags.G => $"{nameof(Union1)}.{nameof(Tags.G)} {{ {this.G} }}",\n        _ => nameof(Union1),\n    };\n}\n'})})]}),(0,l.jsx)(n.h4,{id:"how-to-use",children:"How to use"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:"var u = Union1.MakeA(123);\n\nif (u is { Tag: Union1.Tags.A, A: var a }) { }\n\nif (u is { IsA: true, A: var a }) { }\n\nif (u.IsA)\n{\n    var a = u.A;\n}\n"})}),(0,l.jsx)(n.hr,{}),(0,l.jsx)(n.h3,{id:"support-generics",children:"Support generics"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Generics will not overlap"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:"[Union]\npublic partial struct Option<T>\n{\n    [UnionTemplate]\n    private interface Template\n    {\n        T Some();\n        void None();\n    }\n}\n\n[Union]\npublic partial struct Result<T, E>\n{\n    [UnionTemplate]\n    private interface Template\n    {\n        T Ok();\n        E Err();\n    }\n}\n"})}),(0,l.jsx)(n.p,{children:"Generate output:"}),(0,l.jsxs)(t,{children:[(0,l.jsx)("summary",{children:"Option[T].union.g.cs"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\npublic partial struct Option<T>\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<Option<T>>\n    , global::System.IComparable<Option<T>>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<Option<T>, Option<T>, bool>\n    , global::System.Numerics.IComparisonOperators<Option<T>, Option<T>, bool>\n#endif\n{\n    private __impl_ _impl;\n    private Option(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Some = 1,\n        None = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public T _0;\n        public readonly Tags _tag;\n\n        public __impl_(Tags _tag)\n        {\n            this._0 = default!;\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Option<T> MakeSome(T value)\n    {\n        var _impl = new __impl_(Tags.Some);\n        _impl._0 = value;\n        return new Option<T>(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Option<T> MakeNone()\n    {\n        var _impl = new __impl_(Tags.None);\n        return new Option<T>(_impl);\n    }\n\n    public readonly bool IsSome\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Some;\n    }\n    public readonly bool IsNone\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.None;\n    }\n\n    public T Some\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsSome ? default! : this._impl._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsSome) { this._impl._0 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(Option<T> other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Some => global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(this.Some, other.Some),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Some => global::System.HashCode.Combine(this.Tag, this.Some),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is Option<T> other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(Option<T> left, Option<T> right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(Option<T> left, Option<T> right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(Option<T> other) => this.Tag != other.Tag ? Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Some => global::System.Collections.Generic.Comparer<T>.Default.Compare(this.Some, other.Some),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(Option<T> left, Option<T> right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(Option<T> left, Option<T> right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(Option<T> left, Option<T> right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(Option<T> left, Option<T> right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Some => $"{nameof(Option<T>)}.{nameof(Tags.Some)} {{ {this.Some} }}",\n        Tags.None => $"{nameof(Option<T>)}.{nameof(Tags.None)}",\n        _ => nameof(Option<T>),\n    };\n}\n\n'})})]}),(0,l.jsxs)(t,{children:[(0,l.jsx)("summary",{children:"Result[T,E].union.g.cs"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cs",children:'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\npublic partial struct Result<T, E>\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<Result<T, E>>\n    , global::System.IComparable<Result<T, E>>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<Result<T, E>, Result<T, E>, bool>\n    , global::System.Numerics.IComparisonOperators<Result<T, E>, Result<T, E>, bool>\n#endif\n{\n    private __impl_ _impl;\n    private Result(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Ok = 1,\n        Err = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public T _0;\n        public E _1;\n        public readonly Tags _tag;\n\n        public __impl_(Tags _tag)\n        {\n            this._0 = default!;\n            this._1 = default!;\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Result<T, E> MakeOk(T value)\n    {\n        var _impl = new __impl_(Tags.Ok);\n        _impl._0 = value;\n        return new Result<T, E>(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static Result<T, E> MakeErr(E value)\n    {\n        var _impl = new __impl_(Tags.Err);\n        _impl._1 = value;\n        return new Result<T, E>(_impl);\n    }\n\n    public readonly bool IsOk\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Ok;\n    }\n    public readonly bool IsErr\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Err;\n    }\n\n    public T Ok\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsOk ? default! : this._impl._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsOk) { this._impl._0 = value; } }\n    }\n    public E Err\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsErr ? default! : this._impl._1!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsErr) { this._impl._1 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(Result<T, E> other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(this.Ok, other.Ok),\n        Tags.Err => global::System.Collections.Generic.EqualityComparer<E>.Default.Equals(this.Err, other.Err),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Ok => global::System.HashCode.Combine(this.Tag, this.Ok),\n        Tags.Err => global::System.HashCode.Combine(this.Tag, this.Err),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is Result<T, E> other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(Result<T, E> left, Result<T, E> right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(Result<T, E> left, Result<T, E> right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(Result<T, E> other) => this.Tag != other.Tag ? Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.Comparer<T>.Default.Compare(this.Ok, other.Ok),\n        Tags.Err => global::System.Collections.Generic.Comparer<E>.Default.Compare(this.Err, other.Err),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(Result<T, E> left, Result<T, E> right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Ok => $"{nameof(Result<T, E>)}.{nameof(Tags.Ok)} {{ {this.Ok} }}",\n        Tags.Err => $"{nameof(Result<T, E>)}.{nameof(Tags.Err)} {{ {this.Err} }}",\n        _ => nameof(Result<T, E>),\n    };\n}\n\n'})})]})]}),"\n",(0,l.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.p,{children:"Generate tagged union"})}),"\n",(0,l.jsx)(n.h2,{id:"how-to-use-1",children:"How to use"}),"\n",(0,l.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,l.jsxs)(o.A,{children:[(0,l.jsxs)(r.A,{value:"csproj",label:"CSharp Project",children:[(0,l.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,l.jsx)(n.strong,{children:"Sera.Union"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n\t<ItemGroup>\n\t  <PackageReference Include="Sera.Union" Version="0.7.0" />\n\t</ItemGroup>\n\n</Project>\n\n'})})]}),(0,l.jsxs)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Sera.Union\\src\\UnionTypesDemo\\Program.cs",label:"Program.cs",children:[(0,l.jsxs)(n.p,{children:["This is the use of ",(0,l.jsx)(n.strong,{children:"Sera.Union"})," in ",(0,l.jsx)(n.em,{children:"Program.cs"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using UnionTypesDemo;\n\nConsole.WriteLine("Save or not");\nvar data = SaveToDatabase.Save(0);\nConsole.WriteLine(data.IsNotFound);\ndata = SaveToDatabase.Save(1);\nif(data.IsOk)\n{\n    Console.WriteLine(data.Tag);\n    Console.WriteLine(data.Ok);\n}\n\n'})})]}),(0,l.jsxs)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Sera.Union\\src\\UnionTypesDemo\\ResultSave.cs",label:"ResultSave.cs",children:[(0,l.jsxs)(n.p,{children:["This is the use of ",(0,l.jsx)(n.strong,{children:"Sera.Union"})," in ",(0,l.jsx)(n.em,{children:"ResultSave.cs"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Sera.TaggedUnion;\nnamespace UnionTypesDemo;\n\n\n[Union]\npublic partial struct ResultSave\n{\n    [UnionTemplate]\n    private interface ITemplate\n    {\n        int Ok();\n        void NotFound();\n    }\n}\n\n\n"})})]}),(0,l.jsxs)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Sera.Union\\src\\UnionTypesDemo\\SaveToDatabase.cs",label:"SaveToDatabase.cs",children:[(0,l.jsxs)(n.p,{children:["This is the use of ",(0,l.jsx)(n.strong,{children:"Sera.Union"})," in ",(0,l.jsx)(n.em,{children:"SaveToDatabase.cs"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace UnionTypesDemo;\n\npublic class SaveToDatabase\n{\n    public static ResultSave Save(int i)\n    {\n\n        if (i == 0)\n        {\n            return ResultSave.MakeNotFound();\n        }\n        return ResultSave.MakeOk(i); ;\n    }\n}\n\n\n\n"})})]})]}),"\n",(0,l.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,l.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,l.jsx)(o.A,{children:(0,l.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Sera.Union\\src\\UnionTypesDemo\\obj\\GX\\Sera.TaggedUnion.Analyzers\\Sera.TaggedUnion.Analyzers.Generators.UnionGenerator\\UnionTypesDemo.ResultSave.union.g.cs",label:"UnionTypesDemo.ResultSave.union.g.cs",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\n#nullable enable\n\nusing Sera.TaggedUnion;\n\nnamespace UnionTypesDemo {\n\npublic partial struct ResultSave\n    : global::Sera.TaggedUnion.ITaggedUnion\n    , global::System.IEquatable<ResultSave>\n    , global::System.IComparable<ResultSave>\n#if NET7_0_OR_GREATER\n    , global::System.Numerics.IEqualityOperators<ResultSave, ResultSave, bool>\n    , global::System.Numerics.IComparisonOperators<ResultSave, ResultSave, bool>\n#endif\n{\n    private __impl_ _impl;\n    private ResultSave(__impl_ _impl) { this._impl = _impl; }\n\n    public readonly Tags Tag\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag;\n    }\n\n    public enum Tags : byte\n    {\n        Ok = 1,\n        NotFound = 2,\n    }\n\n    [global::System.Runtime.CompilerServices.CompilerGenerated]\n    private struct __impl_\n    {\n        public __unmanaged_ _unmanaged_;\n        public readonly Tags _tag;\n\n        [global::System.Runtime.CompilerServices.CompilerGenerated]\n        [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]\n        internal struct __unmanaged_\n        {\n            [global::System.Runtime.InteropServices.FieldOffset(0)]\n            public int _0;\n        }\n\n        public __impl_(Tags _tag)\n        {\n            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out this._unmanaged_);\n            this._tag = _tag;\n        }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static ResultSave MakeOk(int value)\n    {\n        var _impl = new __impl_(Tags.Ok);\n        _impl._unmanaged_._0 = value;\n        return new ResultSave(_impl);\n    }\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static ResultSave MakeNotFound()\n    {\n        var _impl = new __impl_(Tags.NotFound);\n        return new ResultSave(_impl);\n    }\n\n    public readonly bool IsOk\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.Ok;\n    }\n    public readonly bool IsNotFound\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        get => this._impl._tag == Tags.NotFound;\n    }\n\n    public int Ok\n    {\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        readonly get => !this.IsOk ? default! : this._impl._unmanaged_._0!;\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        set { if (this.IsOk) { this._impl._unmanaged_._0 = value; } }\n    }\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly bool Equals(ResultSave other) => this.Tag != other.Tag ? false : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(this.Ok, other.Ok),\n        _ => true,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override int GetHashCode() => this.Tag switch\n    {\n        Tags.Ok => global::System.HashCode.Combine(this.Tag, this.Ok),\n        _ => global::System.HashCode.Combine(this.Tag),\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override bool Equals(object? obj) => obj is ResultSave other && Equals(other);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator ==(ResultSave left, ResultSave right) => Equals(left, right);\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator !=(ResultSave left, ResultSave right) => !Equals(left, right);\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly int CompareTo(ResultSave other) => this.Tag != other.Tag ? global::System.Collections.Generic.Comparer<Tags>.Default.Compare(this.Tag, other.Tag) : this.Tag switch\n    {\n        Tags.Ok => global::System.Collections.Generic.Comparer<int>.Default.Compare(this.Ok, other.Ok),\n        _ => 0,\n    };\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <(ResultSave left, ResultSave right) => left.CompareTo(right) < 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >(ResultSave left, ResultSave right) => left.CompareTo(right) > 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator <=(ResultSave left, ResultSave right) => left.CompareTo(right) <= 0;\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public static bool operator >=(ResultSave left, ResultSave right) => left.CompareTo(right) >= 0;\n\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public readonly override string ToString() => this.Tag switch\n    {\n        Tags.Ok => $"{nameof(ResultSave)}.{nameof(Tags.Ok)} {{ {this.Ok} }}",\n        Tags.NotFound => $"{nameof(ResultSave)}.{nameof(Tags.NotFound)}",\n        _ => nameof(ResultSave),\n    };\n}\n\n} // namespace UnionTypesDemo\n\n'})})})}),"\n",(0,l.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,l.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(40608).A+"",children:"Download Example project Sera.Union "})})}),"\n",(0,l.jsx)(n.h3,{id:"share-seraunion",children:"Share Sera.Union"}),"\n",(0,l.jsxs)("ul",{children:[(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&quote=Sera.Union",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&text=Sera.Union:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&title=Sera.Union",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,l.jsx)("li",{children:(0,l.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union&title=Sera.Union&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSera.Union",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Sera.Union",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Sera.Union"})}),"\n",(0,l.jsx)(n.p,{children:"aaa"}),"\n",(0,l.jsx)(m.Ay,{})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},40608:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/Sera.Union-8a53c5a7c3c42f39539cf44a408e6537.zip"}}]);