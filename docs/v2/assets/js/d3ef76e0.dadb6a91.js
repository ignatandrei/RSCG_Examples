"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[1351],{61254:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var n=a(87462),o=(a(67294),a(3905)),t=a(73992),i=a(18679),r=a(68839);const l={sidebar_position:710,title:"71 - DisposableHelpers",description:"Generating boilerplate for thread safe Dispose",slug:"/DisposableHelpers"},p="DisposableHelpers  by Clynt Neiko Rupinta",m={unversionedId:"RSCG-Examples/DisposableHelpers",id:"RSCG-Examples/DisposableHelpers",title:"71 - DisposableHelpers",description:"Generating boilerplate for thread safe Dispose",source:"@site/docs/RSCG-Examples/DisposableHelpers.md",sourceDirName:"RSCG-Examples",slug:"/DisposableHelpers",permalink:"/RSCG_Examples/v2/docs/DisposableHelpers",draft:!1,tags:[],version:"current",sidebarPosition:710,frontMatter:{sidebar_position:710,title:"71 - DisposableHelpers",description:"Generating boilerplate for thread safe Dispose",slug:"/DisposableHelpers"},sidebar:"tutorialSidebar",previous:{title:"70 - MagicMap",permalink:"/RSCG_Examples/v2/docs/MagicMap"},next:{title:"72 - Meziantou.Polyfill",permalink:"/RSCG_Examples/v2/docs/Meziantou.Polyfill"}},d={},c=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share DisposableHelpers",id:"share-disposablehelpers",level:3},{value:"In the same category (Disposer) - 4 other generators",id:"in-the-same-category-disposer---4-other-generators",level:3},{value:"BenutomoAutomaticDisposeImplSourceGenerator",id:"benutomoautomaticdisposeimplsourcegenerator",level:4},{value:"Coplt.Dropping",id:"copltdropping",level:4},{value:"Disposer",id:"disposer",level:4},{value:"IDisposableGenerator",id:"idisposablegenerator",level:4}],u={toc:c},b="wrapper";function g(e){let{components:s,...l}=e;return(0,o.kt)(b,(0,n.Z)({},u,l,{components:s,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"disposablehelpers--by-clynt-neiko-rupinta"},"DisposableHelpers  by Clynt Neiko Rupinta"),(0,o.kt)(r.Z,{toc:c,mdxType:"TOCInline"}),(0,o.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/DisposableHelpers/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/DisposableHelpers?label=DisposableHelpers",alt:"Nuget"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Kiryuumaru/DisposableHelpers"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/Kiryuumaru/DisposableHelpers?label=updated",alt:"GitHub last commit"})),"\n",(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/Kiryuumaru/DisposableHelpers?style=social",alt:"GitHub Repo stars"})),(0,o.kt)("h2",{id:"details"},"Details"),(0,o.kt)("h3",{id:"info"},"Info"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Name: ",(0,o.kt)("strong",{parentName:"p"},"DisposableHelpers")),(0,o.kt)("p",{parentName:"admonition"},"Disposable helpers for IDisposable and IAsyncDisposable."),(0,o.kt)("p",{parentName:"admonition"},"Author: Clynt Neiko Rupinta"),(0,o.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/DisposableHelpers/"},"https://www.nuget.org/packages/DisposableHelpers/")),"   "),(0,o.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Kiryuumaru/DisposableHelpers"},"https://github.com/Kiryuumaru/DisposableHelpers")),(0,o.kt)("p",{parentName:"admonition"},"Source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Kiryuumaru/DisposableHelpers"},"https://github.com/Kiryuumaru/DisposableHelpers"))),(0,o.kt)("h3",{id:"original-readme"},"Original Readme"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("h1",{parentName:"admonition",id:"disposablehelpers"},"DisposableHelpers"),(0,o.kt)("p",{parentName:"admonition"},"Disposable helpers for IDisposable and IAsyncDisposable with source generators. Also capable of both anonymous disposable and anonymous async disposable."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"NuGets")),(0,o.kt)("table",{parentName:"admonition"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Info"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"DisposableHelpers"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/DisposableHelpers/"},(0,o.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/DisposableHelpers?includePreReleases=true",alt:"NuGet"})))))),(0,o.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// Install release version\nInstall-Package DisposableHelpers\n\n// Install pre-release version\nInstall-Package DisposableHelpers -pre\n")),(0,o.kt)("h2",{parentName:"admonition",id:"supported-frameworks"},"Supported frameworks"),(0,o.kt)("p",{parentName:"admonition"},".NET Standard 2.0 and above - see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dotnet/standard/blob/master/docs/versions.md"},"https://github.com/dotnet/standard/blob/master/docs/versions.md")," for compatibility matrix"),(0,o.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,o.kt)("h3",{parentName:"admonition",id:"disposable"},"Disposable"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using DisposableHelpers;\n\nnamespace YourNamespace\n{\n    public class SampleDisposable : Disposable\n    {\n        private SampleUnmanagedResource resources;\n        \n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                resources.Release();\n            }\n            base.Dispose(disposing);\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"disposable-source-generator"},"Disposable Source Generator"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using DisposableHelpers.Attributes;\n\nnamespace YourNamespace\n{\n    [Disposable]\n    public partial class SampleDisposable\n    {\n        private SampleUnmanagedResource resources;\n        \n        protected void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                resources.Release();\n            }\n            base.Dispose(disposing);\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"anonymous-disposable"},"Anonymous Disposable"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using DisposableHelpers;\n\nnamespace YourNamespace\n{\n    public static class Program\n    {\n        private static SampleUnmanagedResource resources;\n        \n        public static void Main(string[] args)\n        {\n            Disposable disposable = new Disposable(disposing =>\n            {\n                if (disposing)\n                {\n                    resources.Release();\n                }\n            });\n\n            disposable.Dispose();\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"asyncdisposable"},"AsyncDisposable"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using DisposableHelpers;\n\nnamespace YourNamespace\n{\n    public class SampleAsyncDisposable : AsyncDisposable\n    {\n        private SampleAsyncUnmanagedResource resources;\n        \n        protected override async ValueTask Dispose(bool isDisposing)\n        {\n            if (isDisposing)\n            {\n                await resources.Release();\n            }\n            return base.Dispose(isDisposing);\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"asyncdisposable-source-generator"},"AsyncDisposable Source Generator"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using DisposableHelpers.Attributes;\n\nnamespace YourNamespace\n{\n    [AsyncDisposable]\n    public partial class SampleAsyncDisposable\n    {\n        private SampleAsyncUnmanagedResource resources;\n        \n        protected async ValueTask Dispose(bool isDisposing)\n        {\n            if (isDisposing)\n            {\n                await resources.Release();\n            }\n            return base.Dispose(isDisposing);\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"anonymous-asyncdisposable"},"Anonymous AsyncDisposable"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using DisposableHelpers;\n\nnamespace YourNamespace\n{\n    public static class Program\n    {\n        private static SampleAsyncUnmanagedResource resources;\n        \n        public static async void Main(string[] args)\n        {\n            AsyncDisposable disposable = new AsyncDisposable(async disposing =>\n            {\n                if (disposing)\n                {\n                    await resources.Release();\n                }\n            });\n\n            await disposable.DisposeAsync();\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"want-to-support-this-project"},"Want To Support This Project?"),(0,o.kt)("p",{parentName:"admonition"},"All I have ever asked is to be active by submitting bugs, features, and sending those pull requests down!."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://ko-fi.com/kiryuumaru"},(0,o.kt)("img",{parentName:"a",src:"https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif",alt:"paypal"})))),(0,o.kt)("h3",{id:"about"},"About"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Generating boilerplate for thread safe Dispose")),(0,o.kt)("h2",{id:"how-to-use"},"How to use"),(0,o.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,o.kt)(t.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,o.kt)("p",null,"This is the CSharp Project that references ",(0,o.kt)("strong",{parentName:"p"},"DisposableHelpers")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n     <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n     <ItemGroup>\n       <PackageReference Include="DisposableHelpers" Version="1.1.16" />\n     </ItemGroup>\n\n</Project>\n\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DisposableHelpers\\src\\IDisp\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DisposableHelpers")," in ",(0,o.kt)("em",{parentName:"p"},"Program.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using IDisposableGeneratorDemo;\n//https://github.com/benutomo-dev/RoslynComponents\nusing (var db = new DALDB())\n{\n    Console.WriteLine("before releasing");\n}\nConsole.WriteLine("after releasing");\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DisposableHelpers\\src\\IDisp\\DALDB.cs",label:"DALDB.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DisposableHelpers")," in ",(0,o.kt)("em",{parentName:"p"},"DALDB.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using DisposableHelpers.Attributes;\nusing System.Resources;\n\nnamespace IDisposableGeneratorDemo;\n\n\n[Disposable]\npartial class DALDB \n{\n    \n    private readonly ConnectionDB cn;\n    private readonly ConnectionDB cn1;\n\n    public DALDB()\n    {\n        cn = new ConnectionDB();\n        cn1=new ConnectionDB();\n    }\n\n    protected void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            cn.Dispose();\n            cn1.Dispose();\n        }\n    }\n}\n\n"))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DisposableHelpers\\src\\IDisp\\ConnectionDB.cs",label:"ConnectionDB.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DisposableHelpers")," in ",(0,o.kt)("em",{parentName:"p"},"ConnectionDB.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'namespace IDisposableGeneratorDemo;\n\nclass ConnectionDB : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("disposing connectiondb");\n    }\n}\n\n')))),(0,o.kt)("h3",{id:"generated-files"},"Generated Files"),(0,o.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,o.kt)(t.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DisposableHelpers\\src\\IDisp\\obj\\GX\\DisposableHelpers.SourceGenerators\\DisposableHelpers.SourceGenerators.DisposableGenerator\\IDisposableGeneratorDemo.DALDB.cs",label:"IDisposableGeneratorDemo.DALDB.cs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable\nnamespace IDisposableGeneratorDemo\n{\n    partial class DALDB : global::System.IDisposable\n    {\n#nullable disable\n        /// <summary>\n        /// Finalizes an instance of the <see cref = "Disposable"/> class.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        ~DALDB()\n        {\n            Dispose(false);\n        }\n\n        /// <summary>\n        /// Gets a value indicating whether this object is in the process of disposing.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public bool IsDisposing => global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalStarted, DisposalStarted) == DisposalStarted;\n\n        /// <summary>\n        /// Gets a value indicating whether this object has been disposed.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public bool IsDisposed => global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalComplete, DisposalComplete) == DisposalComplete;\n\n        /// <summary>\n        /// Gets a value indicating whether this object has been disposed or is in the process of being disposed.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public bool IsDisposedOrDisposing => global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalNotStarted, DisposalNotStarted) != DisposalNotStarted;\n\n        /// <summary>\n        /// Gets the object name, for use in any <see cref = "global::System.ObjectDisposedException"/> thrown by this object.\n        /// </summary>\n        /// <remarks>\n        /// Subclasses can override this property if they would like more control over the object name appearing in any <see cref = "global::System.ObjectDisposedException"/>\n        /// thrown by this <see cref = "Disposable"/>. This can be particularly useful in debugging and diagnostic scenarios.\n        /// </remarks>\n        /// <value>\n        /// The object name, which defaults to the class name.\n        /// </value>\n        \n#nullable enable\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected virtual string? ObjectName => GetType().FullName;\n\n#nullable disable\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        private const int DisposalNotStarted = 0;\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        private const int DisposalStarted = 1;\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        private const int DisposalComplete = 2;\n        // see the constants defined above for valid values\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        private int disposeStage;\n        /// <summary>\n        /// Occurs when this object is about to be disposed.\n        /// </summary>\n        \n#nullable enable\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public event global::System.EventHandler? Disposing;\n        /// <summary>\n        /// Disposes of this object, if it hasn\'t already been disposed.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public void Dispose()\n        {\n            if (global::System.Threading.Interlocked.CompareExchange(ref disposeStage, DisposalStarted, DisposalNotStarted) != DisposalNotStarted)\n            {\n                return;\n            }\n\n            OnDisposing();\n            Disposing = null;\n            Dispose(true);\n            global::System.GC.SuppressFinalize(this);\n            global::System.Threading.Interlocked.Exchange(ref disposeStage, DisposalComplete);\n        }\n\n        /// <summary>\n        /// Verifies that this object is not in the process of disposing, throwing an exception if it is.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected void VerifyNotDisposing()\n        {\n            if (IsDisposing)\n            {\n                throw new global::System.ObjectDisposedException(ObjectName);\n            }\n        }\n\n        /// <summary>\n        /// Verifies that this object has not been disposed, throwing an exception if it is.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected void VerifyNotDisposed()\n        {\n            if (IsDisposed)\n            {\n                throw new global::System.ObjectDisposedException(ObjectName);\n            }\n        }\n\n        /// <summary>\n        /// Verifies that this object is not being disposed or has been disposed, throwing an exception if either of these are true.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected void VerifyNotDisposedOrDisposing()\n        {\n            if (IsDisposedOrDisposing)\n            {\n                throw new global::System.ObjectDisposedException(ObjectName);\n            }\n        }\n\n        /// <summary>\n        /// Raises the <see cref = "Disposing"/> event.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("DisposableHelpers.SourceGenerators.DisposableGenerator", "1.0.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected virtual void OnDisposing()\n        {\n            Disposing?.Invoke(this, new global::System.EventArgs());\n        }\n    }\n}\n')))),(0,o.kt)("h2",{id:"useful"},"Useful"),(0,o.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{target:"_blank",href:a(74714).Z},"Download Example project DisposableHelpers "))),(0,o.kt)("h3",{id:"share-disposablehelpers"},"Share DisposableHelpers"),(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDisposableHelpers&quote=DisposableHelpers",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDisposableHelpers&text=DisposableHelpers:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDisposableHelpers",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDisposableHelpers&title=DisposableHelpers",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDisposableHelpers&title=DisposableHelpers&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDisposableHelpers",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DisposableHelpers"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DisposableHelpers")),(0,o.kt)("h3",{id:"in-the-same-category-disposer---4-other-generators"},"In the same category (Disposer) - 4 other generators"),(0,o.kt)("h4",{id:"benutomoautomaticdisposeimplsourcegenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/BenutomoAutomaticDisposeImplSourceGenerator"},"BenutomoAutomaticDisposeImplSourceGenerator")),(0,o.kt)("h4",{id:"copltdropping"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Coplt.Dropping"},"Coplt.Dropping")),(0,o.kt)("h4",{id:"disposer"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Disposer"},"Disposer")),(0,o.kt)("h4",{id:"idisposablegenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/IDisposableGenerator"},"IDisposableGenerator")))}g.isMDXComponent=!0},74714:(e,s,a)=>{a.d(s,{Z:()=>n});const n=a.p+"assets/files/DisposableHelpers-776c69e8ffb6ab1d2b0f291e5a9b9c24.zip"}}]);