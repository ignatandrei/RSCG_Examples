"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9541],{77650:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var o=a(87462),n=(a(67294),a(3905)),r=a(73992),i=a(18679),s=a(68839);const l={sidebar_position:90,title:"09 - CommunityToolkit.Mvvm",description:"Shows how to implement INotifyPropertyChanged,ObservableProperty and RelayCommand",slug:"/CommunityToolkit.Mvvm"},m="CommunityToolkit.Mvvm  by Microsoft",p={unversionedId:"RSCG-Examples/CommunityToolkit.Mvvm",id:"RSCG-Examples/CommunityToolkit.Mvvm",title:"09 - CommunityToolkit.Mvvm",description:"Shows how to implement INotifyPropertyChanged,ObservableProperty and RelayCommand",source:"@site/docs/RSCG-Examples/CommunityToolkit.Mvvm.md",sourceDirName:"RSCG-Examples",slug:"/CommunityToolkit.Mvvm",permalink:"/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm",draft:!1,tags:[],version:"current",sidebarPosition:90,frontMatter:{sidebar_position:90,title:"09 - CommunityToolkit.Mvvm",description:"Shows how to implement INotifyPropertyChanged,ObservableProperty and RelayCommand",slug:"/CommunityToolkit.Mvvm"},sidebar:"tutorialSidebar",previous:{title:"08 - RSCG_Static",permalink:"/RSCG_Examples/v2/docs/RSCG_Static"},next:{title:"10 - RSCG_AMS",permalink:"/RSCG_Examples/v2/docs/RSCG_AMS"}},d={},u=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share CommunityToolkit.Mvvm",id:"share-communitytoolkitmvvm",level:3},{value:"In the same category (MVVM) - 1 other generators",id:"in-the-same-category-mvvm---1-other-generators",level:3},{value:"PropertyChangedSourceGenerator",id:"propertychangedsourcegenerator",level:4}],h={toc:u},c="wrapper";function g(e){let{components:t,...l}=e;return(0,n.kt)(c,(0,o.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"communitytoolkitmvvm--by-microsoft"},"CommunityToolkit.Mvvm  by Microsoft"),(0,n.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,n.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/CommunityToolkit.Mvvm"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/CommunityToolkit.Mvvm?label=CommunityToolkit.Mvvm",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CommunityToolkit/dotnet"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/CommunityToolkit/dotnet?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/CommunityToolkit/dotnet?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"CommunityToolkit.Mvvm")),(0,n.kt)("p",{parentName:"admonition"},"This package includes a .NET Standard MVVM library with helpers such as:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre"},"  - ObservableObject: a base class for objects implementing the INotifyPropertyChanged interface.\n  - ObservableRecipient: a base class for observable objects with support for the IMessenger service.\n  - ObservableValidator: a base class for objects implementing the INotifyDataErrorInfo interface.\n  - RelayCommand: a simple delegate command implementing the ICommand interface.\n  - AsyncRelayCommand: a delegate command supporting asynchronous operations and cancellation.\n  - WeakReferenceMessenger: a messaging system to exchange messages through different loosely-coupled objects.\n  - StrongReferenceMessenger: a high-performance messaging system that trades weak references for speed.\n  - Ioc: a helper class to configure dependency injection service containers.\n")),(0,n.kt)("p",{parentName:"admonition"},"Author: Microsoft"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/CommunityToolkit.Mvvm"},"https://www.nuget.org/packages/CommunityToolkit.Mvvm")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/generators/overview"},"https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/generators/overview")),(0,n.kt)("p",{parentName:"admonition"},"Source : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CommunityToolkit/dotnet"},"https://github.com/CommunityToolkit/dotnet"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("h1",{parentName:"admonition",id:"-net-community-toolkit"},"\ud83e\uddf0 .NET Community Toolkit"),(0,n.kt)("p",{parentName:"admonition"},".NET Community Toolkit is a collection of helpers and APIs that work for all .NET developers and are agnostic of any specific UI platform. The toolkit is maintained and published by Microsoft, and part of the .NET Foundation."),(0,n.kt)("h2",{parentName:"admonition",id:"-what-does-this-repo-contain"},"\ud83d\udc40 What does this repo contain?"),(0,n.kt)("p",{parentName:"admonition"},"This repository contains several .NET libraries (originally developed as part of the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CommunityToolkit/WindowsCommunityToolkit"},"Windows Community Toolkit"),") that can be used both by application developers (regardless on the specific UI framework in use, they work everywhere!) and library authors. These libraries are also being used internally at Microsoft to power many of our first party apps (such as the new Microsoft Store) and constantly improved by listening to feedbacks from other teams, external partners and other developers from the community. Here's a quick breakdown of the various components you'll find in this repository:"),(0,n.kt)("table",{parentName:"admonition"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Package"),(0,n.kt)("th",{parentName:"tr",align:null},"Latest stable"),(0,n.kt)("th",{parentName:"tr",align:null},"Latest Preview"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/api/communitytoolkit.common"},(0,n.kt)("inlineCode",{parentName:"a"},"CommunityToolkit.Common"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.Common/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/CommunityToolkit.Common",alt:"CommunityToolkit.Common"}))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.Common/absoluteLatest"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/vpre/CommunityToolkit.Common",alt:"CommunityToolkit.Common"}))),(0,n.kt)("td",{parentName:"tr",align:null},"A set of helper APIs shared with other ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/"},(0,n.kt)("inlineCode",{parentName:"a"},"CommunityToolkit"))," libraries.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/diagnostics/introduction"},(0,n.kt)("inlineCode",{parentName:"a"},"CommunityToolkit.Diagnostics"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.Diagnostics/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/CommunityToolkit.Diagnostics",alt:"CommunityToolkit.Diagnostics"}))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.Diagnostics/absoluteLatest"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/vpre/CommunityToolkit.Diagnostics",alt:"CommunityToolkit.Diagnostics"}))),(0,n.kt)("td",{parentName:"tr",align:null},"A set of helper APIs (specifically, ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/diagnostics/guard"},(0,n.kt)("inlineCode",{parentName:"a"},"Guard"))," and ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/diagnostics/throwhelper"},(0,n.kt)("inlineCode",{parentName:"a"},"ThrowHelper")),") that can be used for cleaner, more efficient and less error-prone argument validation and error checking.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction"},(0,n.kt)("inlineCode",{parentName:"a"},"CommunityToolkit.HighPerformance"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.HighPerformance/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/CommunityToolkit.HighPerformance",alt:"CommunityToolkit.HighPerformance"}))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.HighPerformance/absoluteLatest"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/vpre/CommunityToolkit.HighPerformance",alt:"CommunityToolkit.HighPerformance"}))),(0,n.kt)("td",{parentName:"tr",align:null},"A collection of helpers for working in high-performance scenarios. It includes APIs such as ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/memoryowner"},"pooled buffer helpers"),", a fast ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/stringpool"},"string pool")," type, a 2D variant of ",(0,n.kt)("inlineCode",{parentName:"td"},"Memory<T>")," and ",(0,n.kt)("inlineCode",{parentName:"td"},"Span<T>")," (",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/memory2d"},(0,n.kt)("inlineCode",{parentName:"a"},"Memory2D<T>"))," and ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/span2d"},(0,n.kt)("inlineCode",{parentName:"a"},"Span2D<T>")),") also supporting discontiguous regions, helpers for bit shift operations (such as ",(0,n.kt)("a",{parentName:"td",href:"https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/span2d"},(0,n.kt)("inlineCode",{parentName:"a"},"BitHelper")),", also used in ",(0,n.kt)("a",{parentName:"td",href:"https://getpaint.net"},"Paint.NET"),"), and more.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://aka.ms/mvvmtoolkit/docs"},(0,n.kt)("inlineCode",{parentName:"a"},"CommunityToolkit.Mvvm")," (aka MVVM Toolkit)")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.Mvvm/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/CommunityToolkit.Mvvm",alt:"CommunityToolkit.Mvvm"}))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://nuget.org/packages/CommunityToolkit.Mvvm/absoluteLatest"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/vpre/CommunityToolkit.Mvvm",alt:"CommunityToolkit.Mvvm"}))),(0,n.kt)("td",{parentName:"tr",align:null},"A fast, modular, platform-agnostic MVVM library, which is the official successor of ",(0,n.kt)("inlineCode",{parentName:"td"},"MvvmLight"),". It's used extensively in the Microsoft Store and other first party apps. ",(0,n.kt)("a",{parentName:"td",href:"https://aka.ms/mvvmtoolkit/samples"},"The sample app repository is here"),".")))),(0,n.kt)("h2",{parentName:"admonition",id:"-getting-started"},"\ud83d\ude4c Getting Started"),(0,n.kt)("p",{parentName:"admonition"},"Please read the ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/windows/communitytoolkit/getting-started"},"Getting Started with the .NET Community Toolkit")," page for more detailed information."),(0,n.kt)("h2",{parentName:"admonition",id:"-documentation"},"\ud83d\udcc3 Documentation"),(0,n.kt)("p",{parentName:"admonition"},"All documentation for the toolkit is hosted on ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/dotnet/communitytoolkit/"},"Microsoft Docs"),"."),(0,n.kt)("p",{parentName:"admonition"},"All API documentation can be found at the ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/dotnet/api/?view=win-comm-toolkit-dotnet-stable"},".NET API Browser"),"."),(0,n.kt)("h2",{parentName:"admonition",id:"-contribution"},"\ud83d\ude80 Contribution"),(0,n.kt)("p",{parentName:"admonition"},"Do you want to contribute?"),(0,n.kt)("p",{parentName:"admonition"},"Check out our ",(0,n.kt)("a",{parentName:"p",href:"https://aka.ms/wct/wiki"},".NET Community Toolkit Wiki")," page to learn more about contribution and guidelines!"),(0,n.kt)("h2",{parentName:"admonition",id:"-nuget-packages"},"\ud83d\udce6 NuGet Packages"),(0,n.kt)("p",{parentName:"admonition"},"NuGet is a standard package manager for .NET applications which is built into Visual Studio. When you open solution in Visual Studio, choose the ",(0,n.kt)("em",{parentName:"p"},"Tools")," menu > ",(0,n.kt)("em",{parentName:"p"},"NuGet Package Manager")," > ",(0,n.kt)("em",{parentName:"p"},"Manage NuGet packages for solution\u2026")," Enter one of the package names mentioned in ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/windows/communitytoolkit/nuget-packages"},".NET Community Toolkit NuGet Packages")," table to search for it online."),(0,n.kt)("h2",{parentName:"admonition",id:"-roadmap"},"\ud83c\udf0d Roadmap"),(0,n.kt)("p",{parentName:"admonition"},"Read what we ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CommunityToolkit/dotnet/milestones"},"plan for next iterations"),", and feel free to ask questions."),(0,n.kt)("p",{parentName:"admonition"},"Check out our ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CommunityToolkit/dotnet/wiki/Preview-Packages"},"Preview Packages Wiki Page")," to learn more about updating your NuGet sources in Visual Studio, then you can also get pre-release packages of upcoming versions to try."),(0,n.kt)("h2",{parentName:"admonition",id:"-code-of-conduct"},"\ud83d\udcc4 Code of Conduct"),(0,n.kt)("p",{parentName:"admonition"},"This project has adopted the code of conduct defined by the ",(0,n.kt)("a",{parentName:"p",href:"http://contributor-covenant.org/"},"Contributor Covenant")," to clarify expected behavior in our community.\nFor more information see the .NET Foundation Code of Conduct."),(0,n.kt)("h2",{parentName:"admonition",id:"-net-foundation"},"\ud83c\udfe2 .NET Foundation"),(0,n.kt)("p",{parentName:"admonition"},"This project is supported by the ",(0,n.kt)("a",{parentName:"p",href:"http://dotnetfoundation.org"},".NET Foundation"),"."),(0,n.kt)("h2",{parentName:"admonition",id:"-contributors"},"\ud83c\udfc6 Contributors"),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/CommunityToolkit/dotnet/graphs/contributors"},(0,n.kt)("img",{parentName:"a",src:"https://contrib.rocks/image?repo=CommunityToolkit/dotnet",alt:"Toolkit Contributors"}))),(0,n.kt)("p",{parentName:"admonition"},"Made with ",(0,n.kt)("a",{parentName:"p",href:"https://contrib.rocks"},"contrib.rocks"),".")),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Shows how to implement INotifyPropertyChanged,ObservableProperty and RelayCommand"),(0,n.kt)("p",{parentName:"admonition"},"Unfortunately , not yet a separate package just for those."),(0,n.kt)("p",{parentName:"admonition"},"Also, this show that RSCG could generate multiple partial declarations")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"CommunityToolkit.Mvvm")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.0" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,n.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommunityToolkit.Mvvm\\src\\ToolkitMVVM\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"CommunityToolkit.Mvvm")," in ",(0,n.kt)("em",{parentName:"p"},"Program.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing test;\n\nConsole.WriteLine("Hello, World!");\n\nMyViewModel myViewModel = new();\nmyViewModel.Name = "Andrei";\nvar x=myViewModel.SayHelloCommand;\n'))),(0,n.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommunityToolkit.Mvvm\\src\\ToolkitMVVM\\MyViewModel.cs",label:"MyViewModel.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"CommunityToolkit.Mvvm")," in ",(0,n.kt)("em",{parentName:"p"},"MyViewModel.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\n\nnamespace test;\n\n[INotifyPropertyChanged]\npublic partial class MyViewModel \n{\n    [ObservableProperty]\n    private string? name;\n\n    [RelayCommand]\n    private void SayHello()\n    {\n        Console.WriteLine("Hello");\n    }\n}\n\n')))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommunityToolkit.Mvvm\\src\\ToolkitMVVM\\obj\\GX\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator\\test.MyViewModel.g.cs",label:"test.MyViewModel.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable\nnamespace test\n{\n    /// <inheritdoc/>\n    partial class MyViewModel : global::System.ComponentModel.INotifyPropertyChanged\n    {\n        /// <inheritdoc cref = "global::System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;\n        /// <summary>\n        /// Raises the <see cref = "PropertyChanged"/> event.\n        /// </summary>\n        /// <param name = "e">The input <see cref = "global::System.ComponentModel.PropertyChangedEventArgs"/> instance.</param>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected virtual void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs e)\n        {\n            PropertyChanged?.Invoke(this, e);\n        }\n\n        /// <summary>\n        /// Raises the <see cref = "PropertyChanged"/> event.\n        /// </summary>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected void OnPropertyChanged([global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            OnPropertyChanged(new global::System.ComponentModel.PropertyChangedEventArgs(propertyName));\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given property. If the value has changed, updates\n        /// the property with the new value, then raises the <see cref = "PropertyChanged"/> event.\n        /// </summary>\n        /// <typeparam name = "T">The type of the property that changed.</typeparam>\n        /// <param name = "field">The field storing the property\'s value.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are the same.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetProperty<T>([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("newValue")] ref T field, T newValue, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(field, newValue))\n            {\n                return false;\n            }\n\n            field = newValue;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given property. If the value has changed, updates\n        /// the property with the new value, then raises the <see cref = "PropertyChanged"/> event.\n        /// See additional notes about this overload in <see cref = "SetProperty{T}(ref T, T, string)"/>.\n        /// </summary>\n        /// <typeparam name = "T">The type of the property that changed.</typeparam>\n        /// <param name = "field">The field storing the property\'s value.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "comparer">The <see cref = "global::System.Collections.Generic.IEqualityComparer{T}"/> instance to use to compare the input values.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetProperty<T>([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("newValue")] ref T field, T newValue, global::System.Collections.Generic.IEqualityComparer<T> comparer, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            if (comparer.Equals(field, newValue))\n            {\n                return false;\n            }\n\n            field = newValue;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given property. If the value has changed, updates\n        /// the property with the new value, then raises the <see cref = "PropertyChanged"/> event.\n        /// This overload is much less efficient than <see cref = "SetProperty{T}(ref T, T, string)"/> and it\n        /// should only be used when the former is not viable (eg. when the target property being\n        /// updated does not directly expose a backing field that can be passed by reference).\n        /// For performance reasons, it is recommended to use a stateful callback if possible through\n        /// the <see cref = "SetProperty{TModel, T}(T, T, TModel, global::System.Action{TModel, T}, string? )"/> whenever possible\n        /// instead of this overload, as that will allow the C# compiler to cache the input callback and\n        /// reduce the memory allocations. More info on that overload are available in the related XML\n        /// docs. This overload is here for completeness and in cases where that is not applicable.\n        /// </summary>\n        /// <typeparam name = "T">The type of the property that changed.</typeparam>\n        /// <param name = "oldValue">The current property value.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "callback">A callback to invoke to update the property value.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are the same.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetProperty<T>(T oldValue, T newValue, global::System.Action<T> callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(oldValue, newValue))\n            {\n                return false;\n            }\n\n            callback(newValue);\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given property. If the value has changed, updates\n        /// the property with the new value, then raises the <see cref = "PropertyChanged"/> event.\n        /// See additional notes about this overload in <see cref = "SetProperty{T}(T, T, global::System.Action{T}, string)"/>.\n        /// </summary>\n        /// <typeparam name = "T">The type of the property that changed.</typeparam>\n        /// <param name = "oldValue">The current property value.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "comparer">The <see cref = "global::System.Collections.Generic.IEqualityComparer{T}"/> instance to use to compare the input values.</param>\n        /// <param name = "callback">A callback to invoke to update the property value.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetProperty<T>(T oldValue, T newValue, global::System.Collections.Generic.IEqualityComparer<T> comparer, global::System.Action<T> callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            if (comparer.Equals(oldValue, newValue))\n            {\n                return false;\n            }\n\n            callback(newValue);\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given nested property. If the value has changed,\n        /// updates the property and then raises the <see cref = "PropertyChanged"/> event.\n        /// The behavior mirrors that of <see cref = "SetProperty{T}(ref T, T, string)"/>,\n        /// with the difference being that this method is used to relay properties from a wrapped model in the\n        /// current instance. This type is useful when creating wrapping, bindable objects that operate over\n        /// models that lack support for notification (eg. for CRUD operations).\n        /// Suppose we have this model (eg. for a database row in a table):\n        /// <code>\n        /// public class Person\n        /// {\n        ///     public string Name { get; set; }\n        /// }\n        /// </code>\n        /// We can then use a property to wrap instances of this type into our observable model (which supports\n        /// notifications), injecting the notification to the properties of that model, like so:\n        /// <code>\n        /// [INotifyPropertyChanged]\n        /// public partial class BindablePerson\n        /// {\n        ///     public Model { get; }\n        ///\n        ///     public BindablePerson(Person model)\n        ///     {\n        ///         Model = model;\n        ///     }\n        ///\n        ///     public string Name\n        ///     {\n        ///         get => Model.Name;\n        ///         set => Set(Model.Name, value, Model, (model, name) => model.Name = name);\n        ///     }\n        /// }\n        /// </code>\n        /// This way we can then use the wrapping object in our application, and all those "proxy" properties will\n        /// also raise notifications when changed. Note that this method is not meant to be a replacement for\n        /// <see cref = "SetProperty{T}(ref T, T, string)"/>, and it should only be used when relaying properties to a model that\n        /// doesn\'t support notifications, and only if you can\'t implement notifications to that model directly (eg. by having\n        /// it implement <see cref = "global::System.ComponentModel.INotifyPropertyChanged"/>). The syntax relies on passing the target model and a stateless callback\n        /// to allow the C# compiler to cache the function, which results in much better performance and no memory usage.\n        /// </summary>\n        /// <typeparam name = "TModel">The type of model whose property (or field) to set.</typeparam>\n        /// <typeparam name = "T">The type of property (or field) to set.</typeparam>\n        /// <param name = "oldValue">The current property value.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "model">The model containing the property being updated.</param>\n        /// <param name = "callback">The callback to invoke to set the target property value, if a change has occurred.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are the same.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetProperty<TModel, T>(T oldValue, T newValue, TModel model, global::System.Action<TModel, T> callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n            where TModel : class\n        {\n            if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(oldValue, newValue))\n            {\n                return false;\n            }\n\n            callback(model, newValue);\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given nested property. If the value has changed,\n        /// updates the property and then raises the <see cref = "PropertyChanged"/> event.\n        /// The behavior mirrors that of <see cref = "SetProperty{T}(ref T, T, string)"/>,\n        /// with the difference being that this method is used to relay properties from a wrapped model in the\n        /// current instance. See additional notes about this overload in <see cref = "SetProperty{TModel, T}(T, T, TModel, global::System.Action{TModel, T}, string)"/>.\n        /// </summary>\n        /// <typeparam name = "TModel">The type of model whose property (or field) to set.</typeparam>\n        /// <typeparam name = "T">The type of property (or field) to set.</typeparam>\n        /// <param name = "oldValue">The current property value.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "comparer">The <see cref = "global::System.Collections.Generic.IEqualityComparer{T}"/> instance to use to compare the input values.</param>\n        /// <param name = "model">The model containing the property being updated.</param>\n        /// <param name = "callback">The callback to invoke to set the target property value, if a change has occurred.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetProperty<TModel, T>(T oldValue, T newValue, global::System.Collections.Generic.IEqualityComparer<T> comparer, TModel model, global::System.Action<TModel, T> callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n            where TModel : class\n        {\n            if (comparer.Equals(oldValue, newValue))\n            {\n                return false;\n            }\n\n            callback(model, newValue);\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given field (which should be the backing field for a property).\n        /// If the value has changed, updates the field and then raises the <see cref = "PropertyChanged"/> event.\n        /// The behavior mirrors that of <see cref = "SetProperty{T}(ref T, T, string)"/>, with the difference being that\n        /// this method will also monitor the new value of the property (a generic <see cref = "global::System.Threading.Tasks.Task"/>) and will also\n        /// raise the <see cref = "PropertyChanged"/> again for the target property when it completes.\n        /// This can be used to update bindings observing that <see cref = "global::System.Threading.Tasks.Task"/> or any of its properties.\n        /// This method and its overload specifically rely on the <see cref = "TaskNotifier"/> type, which needs\n        /// to be used in the backing field for the target <see cref = "global::System.Threading.Tasks.Task"/> property. The field doesn\'t need to be\n        /// initialized, as this method will take care of doing that automatically. The <see cref = "TaskNotifier"/>\n        /// type also includes an implicit operator, so it can be assigned to any <see cref = "global::System.Threading.Tasks.Task"/> instance directly.\n        /// Here is a sample property declaration using this method:\n        /// <code>\n        /// private TaskNotifier myTask;\n        ///\n        /// public Task MyTask\n        /// {\n        ///     get => myTask;\n        ///     private set => SetAndNotifyOnCompletion(ref myTask, value);\n        /// }\n        /// </code>\n        /// </summary>\n        /// <param name = "taskNotifier">The field notifier to modify.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are\n        /// the same. The return value being <see langword="true"/> only indicates that the new value being assigned to\n        /// <paramref name = "taskNotifier"/> is different than the previous one, and it does not mean the new\n        /// <see cref = "global::System.Threading.Tasks.Task"/> instance passed as argument is in any particular state.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetPropertyAndNotifyOnCompletion([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier? taskNotifier, global::System.Threading.Tasks.Task? newValue, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier(), newValue, null, propertyName);\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given field (which should be the backing field for a property).\n        /// If the value has changed, updates the field and then raises the <see cref = "PropertyChanged"/> event.\n        /// This method is just like <see cref = "SetPropertyAndNotifyOnCompletion(ref TaskNotifier, global::System.Threading.Tasks.Task, string)"/>,\n        /// with the difference being an extra <see cref = "global::System.Action{T}"/> parameter with a callback being invoked\n        /// either immediately, if the new task has already completed or is <see langword="null"/>, or upon completion.\n        /// </summary>\n        /// <param name = "taskNotifier">The field notifier to modify.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "callback">A callback to invoke to update the property value.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are the same.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetPropertyAndNotifyOnCompletion([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier? taskNotifier, global::System.Threading.Tasks.Task? newValue, global::System.Action<global::System.Threading.Tasks.Task?> callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier(), newValue, callback, propertyName);\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given field (which should be the backing field for a property).\n        /// If the value has changed, updates the field and then raises the <see cref = "PropertyChanged"/> event.\n        /// The behavior mirrors that of <see cref = "SetProperty{T}(ref T, T, string)"/>, with the difference being that\n        /// this method will also monitor the new value of the property (a generic <see cref = "global::System.Threading.Tasks.Task"/>) and will also\n        /// raise the <see cref = "PropertyChanged"/> again for the target property when it completes.\n        /// This can be used to update bindings observing that <see cref = "global::System.Threading.Tasks.Task"/> or any of its properties.\n        /// This method and its overload specifically rely on the <see cref = "TaskNotifier{T}"/> type, which needs\n        /// to be used in the backing field for the target <see cref = "global::System.Threading.Tasks.Task"/> property. The field doesn\'t need to be\n        /// initialized, as this method will take care of doing that automatically. The <see cref = "TaskNotifier{T}"/>\n        /// type also includes an implicit operator, so it can be assigned to any <see cref = "global::System.Threading.Tasks.Task"/> instance directly.\n        /// Here is a sample property declaration using this method:\n        /// <code>\n        /// private TaskNotifier&lt;int&gt; myTask;\n        ///\n        /// public Task&lt;int&gt; MyTask\n        /// {\n        ///     get => myTask;\n        ///     private set => SetAndNotifyOnCompletion(ref myTask, value);\n        /// }\n        /// </code>\n        /// </summary>\n        /// <typeparam name = "T">The type of result for the <see cref = "global::System.Threading.Tasks.Task{TResult}"/> to set and monitor.</typeparam>\n        /// <param name = "taskNotifier">The field notifier to modify.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are\n        /// the same. The return value being <see langword="true"/> only indicates that the new value being assigned to\n        /// <paramref name = "taskNotifier"/> is different than the previous one, and it does not mean the new\n        /// <see cref = "global::System.Threading.Tasks.Task{TResult}"/> instance passed as argument is in any particular state.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetPropertyAndNotifyOnCompletion<T>([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier<T>? taskNotifier, global::System.Threading.Tasks.Task<T>? newValue, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier<T>(), newValue, null, propertyName);\n        }\n\n        /// <summary>\n        /// Compares the current and new values for a given field (which should be the backing field for a property).\n        /// If the value has changed, updates the field and then raises the <see cref = "PropertyChanged"/> event.\n        /// This method is just like <see cref = "SetPropertyAndNotifyOnCompletion{T}(ref TaskNotifier{T}, global::System.Threading.Tasks.Task{T}, string)"/>,\n        /// with the difference being an extra <see cref = "global::System.Action{T}"/> parameter with a callback being invoked\n        /// either immediately, if the new task has already completed or is <see langword="null"/>, or upon completion.\n        /// </summary>\n        /// <typeparam name = "T">The type of result for the <see cref = "global::System.Threading.Tasks.Task{TResult}"/> to set and monitor.</typeparam>\n        /// <param name = "taskNotifier">The field notifier to modify.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "callback">A callback to invoke to update the property value.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        /// <remarks>\n        /// The <see cref = "PropertyChanged"/> event is not raised if the current and new value for the target property are the same.\n        /// </remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected bool SetPropertyAndNotifyOnCompletion<T>([global::System.Diagnostics.CodeAnalysis.NotNull] ref TaskNotifier<T>? taskNotifier, global::System.Threading.Tasks.Task<T>? newValue, global::System.Action<global::System.Threading.Tasks.Task<T>?> callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n        {\n            return SetPropertyAndNotifyOnCompletion(taskNotifier ??= new TaskNotifier<T>(), newValue, callback, propertyName);\n        }\n\n        /// <summary>\n        /// Implements the notification logic for the related methods.\n        /// </summary>\n        /// <typeparam name = "TTask">The type of <see cref = "global::System.Threading.Tasks.Task"/> to set and monitor.</typeparam>\n        /// <param name = "taskNotifier">The field notifier.</param>\n        /// <param name = "newValue">The property\'s value after the change occurred.</param>\n        /// <param name = "callback">(optional) A callback to invoke to update the property value.</param>\n        /// <param name = "propertyName">(optional) The name of the property that changed.</param>\n        /// <returns><see langword="true"/> if the property was changed, <see langword="false"/> otherwise.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        private bool SetPropertyAndNotifyOnCompletion<TTask>(ITaskNotifier<TTask> taskNotifier, TTask? newValue, global::System.Action<TTask?>? callback, [global::System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)\n            where TTask : global::System.Threading.Tasks.Task\n        {\n            if (ReferenceEquals(taskNotifier.Task, newValue))\n            {\n                return false;\n            }\n\n            bool isAlreadyCompletedOrNull = newValue?.IsCompleted ?? true;\n            taskNotifier.Task = newValue;\n            OnPropertyChanged(propertyName);\n            if (isAlreadyCompletedOrNull)\n            {\n                if (callback != null)\n                {\n                    callback(newValue);\n                }\n\n                return true;\n            }\n\n            async void MonitorTask()\n            {\n                await global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__TaskExtensions.GetAwaitableWithoutEndValidation(newValue!);\n                if (ReferenceEquals(taskNotifier.Task, newValue))\n                {\n                    OnPropertyChanged(propertyName);\n                }\n\n                if (callback != null)\n                {\n                    callback(newValue);\n                }\n            }\n\n            MonitorTask();\n            return true;\n        }\n\n        /// <summary>\n        /// An interface for task notifiers of a specified type.\n        /// </summary>\n        /// <typeparam name = "TTask">The type of value to store.</typeparam>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        private interface ITaskNotifier<TTask>\n            where TTask : global::System.Threading.Tasks.Task\n        {\n            /// <summary>\n            /// Gets or sets the wrapped <typeparamref name = "TTask"/> value.\n            /// </summary>\n            TTask? Task { get; set; }\n        }\n\n        /// <summary>\n        /// A wrapping class that can hold a <see cref = "global::System.Threading.Tasks.Task"/> value.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected sealed class TaskNotifier : ITaskNotifier<global::System.Threading.Tasks.Task>\n        {\n            /// <summary>\n            /// Initializes a new instance of the <see cref = "TaskNotifier"/> class.\n            /// </summary>\n            internal TaskNotifier()\n            {\n            }\n\n            private global::System.Threading.Tasks.Task? task;\n            /// <inheritdoc/>\n            global::System.Threading.Tasks.Task? ITaskNotifier<global::System.Threading.Tasks.Task>.Task { get => this.task; set => this.task = value; }\n\n            /// <summary>\n            /// Unwraps the <see cref = "global::System.Threading.Tasks.Task"/> value stored in the current instance.\n            /// </summary>\n            /// <param name = "notifier">The input <see cref = "TaskNotifier{TTask}"/> instance.</param>\n            public static implicit operator global::System.Threading.Tasks.Task? (TaskNotifier? notifier)\n            {\n                return notifier?.task;\n            }\n        }\n\n        /// <summary>\n        /// A wrapping class that can hold a <see cref = "global::System.Threading.Tasks.Task{T}"/> value.\n        /// </summary>\n        /// <typeparam name = "T">The type of value for the wrapped <see cref = "global::System.Threading.Tasks.Task{T}"/> instance.</typeparam>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        protected sealed class TaskNotifier<T> : ITaskNotifier<global::System.Threading.Tasks.Task<T>>\n        {\n            /// <summary>\n            /// Initializes a new instance of the <see cref = "TaskNotifier{TTask}"/> class.\n            /// </summary>\n            internal TaskNotifier()\n            {\n            }\n\n            private global::System.Threading.Tasks.Task<T>? task;\n            /// <inheritdoc/>\n            global::System.Threading.Tasks.Task<T>? ITaskNotifier<global::System.Threading.Tasks.Task<T>>.Task { get => this.task; set => this.task = value; }\n\n            /// <summary>\n            /// Unwraps the <see cref = "global::System.Threading.Tasks.Task{T}"/> value stored in the current instance.\n            /// </summary>\n            /// <param name = "notifier">The input <see cref = "TaskNotifier{TTask}"/> instance.</param>\n            public static implicit operator global::System.Threading.Tasks.Task<T>? (TaskNotifier<T>? notifier)\n            {\n                return notifier?.task;\n            }\n        }\n    }\n}\n'))),(0,n.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommunityToolkit.Mvvm\\src\\ToolkitMVVM\\obj\\GX\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\test.MyViewModel.g.cs",label:"test.MyViewModel.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable\nnamespace test\n{\n    /// <inheritdoc/>\n    partial class MyViewModel\n    {\n        /// <inheritdoc cref="name"/>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public string? Name\n        {\n            get => name;\n            set\n            {\n                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(name, value))\n                {\n                    OnNameChanging(value);\n                    OnNameChanging(default, value);\n                    name = value;\n                    OnNameChanged(value);\n                    OnNameChanged(default, value);\n                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Name);\n                }\n            }\n        }\n\n        /// <summary>Executes the logic for when <see cref="Name"/> is changing.</summary>\n        /// <param name="value">The new property value being set.</param>\n        /// <remarks>This method is invoked right before the value of <see cref="Name"/> is changed.</remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]\n        partial void OnNameChanging(string? value);\n        /// <summary>Executes the logic for when <see cref="Name"/> is changing.</summary>\n        /// <param name="oldValue">The previous property value that is being replaced.</param>\n        /// <param name="newValue">The new property value being set.</param>\n        /// <remarks>This method is invoked right before the value of <see cref="Name"/> is changed.</remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]\n        partial void OnNameChanging(string? oldValue, string? newValue);\n        /// <summary>Executes the logic for when <see cref="Name"/> just changed.</summary>\n        /// <param name="value">The new property value that was set.</param>\n        /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]\n        partial void OnNameChanged(string? value);\n        /// <summary>Executes the logic for when <see cref="Name"/> just changed.</summary>\n        /// <param name="oldValue">The previous property value that was replaced.</param>\n        /// <param name="newValue">The new property value that was set.</param>\n        /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]\n        partial void OnNameChanged(string? oldValue, string? newValue);\n    }\n}\n'))),(0,n.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommunityToolkit.Mvvm\\src\\ToolkitMVVM\\obj\\GX\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedArgs.g.cs",label:"__KnownINotifyPropertyChangedArgs.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable\nnamespace CommunityToolkit.Mvvm.ComponentModel.__Internals\n{\n    /// <summary>\n    /// A helper type providing cached, reusable <see cref="global::System.ComponentModel.PropertyChangedEventArgs"/> instances\n    /// for all properties generated with <see cref="global::CommunityToolkit.Mvvm.ComponentModel.ObservablePropertyAttribute"/>.\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]\n    [global::System.Diagnostics.DebuggerNonUserCode]\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]\n    [global::System.Obsolete("This type is not intended to be used directly by user code")]\n    internal static class __KnownINotifyPropertyChangedArgs\n    {\n        /// <summary>The cached <see cref="global::System.ComponentModel.PropertyChangedEventArgs"/> instance for all "Name" generated properties.</summary>\n        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]\n        [global::System.Obsolete("This field is not intended to be referenced directly by user code")]\n        public static readonly global::System.ComponentModel.PropertyChangedEventArgs Name = new global::System.ComponentModel.PropertyChangedEventArgs("Name");\n    }\n}\n'))),(0,n.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CommunityToolkit.Mvvm\\src\\ToolkitMVVM\\obj\\GX\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator\\test.MyViewModel.SayHello.g.cs",label:"test.MyViewModel.SayHello.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable\nnamespace test\n{\n    /// <inheritdoc/>\n    partial class MyViewModel\n    {\n        /// <summary>The backing field for <see cref="SayHelloCommand"/>.</summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator", "8.2.0.0")]\n        private global::CommunityToolkit.Mvvm.Input.RelayCommand? sayHelloCommand;\n        /// <summary>Gets an <see cref="global::CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="SayHello"/>.</summary>\n        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator", "8.2.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        public global::CommunityToolkit.Mvvm.Input.IRelayCommand SayHelloCommand => sayHelloCommand ??= new global::CommunityToolkit.Mvvm.Input.RelayCommand(new global::System.Action(SayHello));\n    }\n}\n')))),(0,n.kt)("h2",{id:"usefull"},"Usefull"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:a(60634).Z},"Download Example project CommunityToolkit.Mvvm "))),(0,n.kt)("h3",{id:"share-communitytoolkitmvvm"},"Share CommunityToolkit.Mvvm"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommunityToolkit.Mvvm&quote=CommunityToolkit.Mvvm",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommunityToolkit.Mvvm&text=CommunityToolkit.Mvvm:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommunityToolkit.Mvvm",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommunityToolkit.Mvvm&title=CommunityToolkit.Mvvm",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommunityToolkit.Mvvm&title=CommunityToolkit.Mvvm&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCommunityToolkit.Mvvm",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/CommunityToolkit.Mvvm")),(0,n.kt)("h3",{id:"in-the-same-category-mvvm---1-other-generators"},"In the same category (MVVM) - 1 other generators"),(0,n.kt)("h4",{id:"propertychangedsourcegenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/PropertyChangedSourceGenerator"},"PropertyChangedSourceGenerator")))}g.isMDXComponent=!0},60634:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/files/CommunityToolkit.Mvvm-2ab1c7389384100f64cb8c62f813419f.zip"}}]);