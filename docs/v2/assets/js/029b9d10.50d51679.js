"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2060],{9560:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/files/MockMe-a09b4c87e5d3c62da28d41cfbe78946d.zip"},38275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>M,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"RSCG-Examples/MockMe","title":"184 - MockMe","description":"Creating mocks for testing classes","source":"@site/docs/RSCG-Examples/MockMe.md","sourceDirName":"RSCG-Examples","slug":"/MockMe","permalink":"/RSCG_Examples/v2/docs/MockMe","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/MockMe.md","tags":[],"version":"current","sidebarPosition":1840,"frontMatter":{"sidebar_position":1840,"title":"184 - MockMe","description":"Creating mocks for testing classes","slug":"/MockMe"},"sidebar":"tutorialSidebar","previous":{"title":"183 - NTypewriter","permalink":"/RSCG_Examples/v2/docs/NTypewriter"},"next":{"title":"185 - DependencyModules.SourceGenerator","permalink":"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator"}}');var a=n(74848),c=n(28453),s=n(11470),r=n(19365),l=n(14252);const i={sidebar_position:1840,title:"184 - MockMe",description:"Creating mocks for testing classes",slug:"/MockMe"},d="MockMe  by connorivy",M={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"What is it?",id:"what-is-it",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Give it a Star",id:"give-it-a-star",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share MockMe",id:"share-mockme",level:3},{value:"In the same category (Tests) - 4 other generators",id:"in-the-same-category-tests---4-other-generators",level:3},{value:"mocklis",id:"mocklis",level:4},{value:"MSTest",id:"mstest",level:4},{value:"Ridge",id:"ridge",level:4},{value:"Rocks",id:"rocks",level:4}];function k(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"mockme--by-connorivy",children:"MockMe  by connorivy"})}),"\n",(0,a.jsx)(l.A,{toc:h}),"\n",(0,a.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/MockMe/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/MockMe?label=MockMe",alt:"Nuget"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/connorivy/MockMe/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/connorivy/MockMe?label=updated",alt:"GitHub last commit"})}),"\n",(0,a.jsx)(t.img,{src:"https://img.shields.io/github/stars/connorivy/MockMe?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,a.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,a.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["Name: ",(0,a.jsx)(t.strong,{children:"MockMe"})]}),(0,a.jsx)(t.p,{children:"The concrete type mocking library for .NET"}),(0,a.jsx)(t.p,{children:"Author: connorivy"}),(0,a.jsxs)(t.p,{children:["NuGet:\n",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/MockMe/",children:"https://www.nuget.org/packages/MockMe/"})})]}),(0,a.jsxs)(t.p,{children:["You can find more details at ",(0,a.jsx)(t.a,{href:"https://github.com/connorivy/MockMe/",children:"https://github.com/connorivy/MockMe/"})]}),(0,a.jsxs)(t.p,{children:["Source: ",(0,a.jsx)(t.a,{href:"https://github.com/connorivy/MockMe/",children:"https://github.com/connorivy/MockMe/"})]})]}),"\n",(0,a.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,a.jsxs)(t.admonition,{type:"note",children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://github.com/user-attachments/assets/43d8b58f-98b0-4469-95c3-7e5ca0683ffc",alt:"MockMeFull"})}),(0,a.jsx)(t.hr,{}),(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://coveralls.io/github/connorivy/MockMe?branch=main",children:(0,a.jsx)(t.img,{src:"https://coveralls.io/repos/github/connorivy/MockMe/badge.svg?branch=main",alt:"Coverage Status"})})}),(0,a.jsx)(t.h2,{id:"what-is-it",children:"What is it?"}),(0,a.jsx)(t.p,{children:"MockMe is a library for mocking dependencies in your unit test projects. Unlike other libraries that can only mock interfaces and virtual methods, MockMe can mock sealed classes and non-virtual methods."}),(0,a.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),(0,a.jsx)(t.p,{children:"Imagine you have the following repository class"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"sealed class MyRepo\n{\n    public int ExpensiveDatabaseCall() => // some code;\n}\n"})}),(0,a.jsx)(t.p,{children:'Download the MockMe NuGet package, then the source generators and the "MockMe.Mock" type will be available in your project.\nThen you can customize the behavior of the repository class as below.'}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using MockMe;\n\n// use this syntax to trigger the source generator to make a mock of the provided type\n// the 'mock' object will have 3 properties: Setup, Assert, and MockedObject\n// hint: rebuild test project after writing this line or IntelliSense may not work correctly\nvar mock = Mock.Me(default(MyRepo)); \n\n// the mock.Setup object has an identical interface to the original object\n// from there you can configure method behavior with 'Returns', 'Callback', 'Throws', etc\nmock.Setup.ExpensiveDatabaseCall().Returns(99);\n\n// the mock.MockedObject is a special instance of the mocked type which has the modified behavior\n// other instances of the mocked type will have the original behavior\nMyRepo myRepo = mock.MockedObject;\nint result = myRepo.ExpensiveDatabaseCall();\n\nAssert.Equal(99, result);\n\n// the mock.Assert object also has an identical interface to the original object.\n// you can use it to assert certain mock behaviors\nmock.Assert.ExpensiveDatabaseCall().WasCalled();\n\n"})}),(0,a.jsxs)(t.p,{children:["Check out the ",(0,a.jsx)(t.a,{href:"https://github.com/connorivy/MockMe/wiki/QuickStart",children:"Wiki"})," for more examples."]}),(0,a.jsx)(t.h2,{id:"give-it-a-star",children:"Give it a Star"}),(0,a.jsx)(t.p,{children:"If you like this project, please give it a star!"})]}),"\n",(0,a.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Creating mocks for testing classes"})}),"\n",(0,a.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(r.A,{value:"csproj",label:"CSharp Project",children:[(0,a.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,a.jsx)(t.strong,{children:"MockMe"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.5.0" />\n    <PackageReference Include="MockMe" Version="1.1.2" />\n    <PackageReference Include="MSTest.TestAdapter" Version="2.2.10" />\n    <PackageReference Include="MSTest.TestFramework" Version="2.2.10" />\n    <PackageReference Include="coverlet.collector" Version="3.2.0" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include="..\\MockData\\MockData.csproj" />\n  </ItemGroup>\n\n \t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n</Project>\n\n'})})]}),(0,a.jsxs)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\TestClock.cs",label:"TestClock.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"MockMe"})," in ",(0,a.jsx)(t.em,{children:"TestClock.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing MockMe;\n\nnamespace TestClock;\n\n[TestClass]\npublic class TestClock\n{\n    [TestMethod]\n    public void TestMyClock()\n    {\n        var mock = Mock.Me(default(MyClock));\n        mock.Setup.GetUtcNow().Returns(DateTime.Now.AddYears(-1));\n        mock.Setup.GetNow().Returns(DateTime.Now.AddYears(-1));\n        MyClock clock = mock;\n        Assert.AreEqual(DateTime.Now.AddYears(-1).Year, clock.GetNow().Year);\n    }\n}\n"})})]})]}),"\n",(0,a.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,a.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\AssemblyAttributes.g.cs",label:"AssemblyAttributes.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers "})})}),(0,a.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\Mock.DummyDeclaration.g.cs",label:"Mock.DummyDeclaration.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\n// <auto-generated />\n#pragma warning disable\nusing System;\n\nnamespace MockMe\n{\n    internal static partial class Mock\n    {\n        public static object Me(global::MockMe.DummyClass unusedInstance)\n        {\n            throw new global::System.NotImplementedException();\n        }\n    }\n}\n#pragma warning restore\n"})})}),(0,a.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\Mock.g.cs",label:"Mock.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\n// <auto-generated />\n#pragma warning disable\n#nullable enable\n\nnamespace MockMe\n{\n    internal static partial class Mock\n    {\n\n\n        [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n        public static global::MockMe.Generated.MockData.MyClockMock Me(global::MockData.MyClock? unusedInstance)\n        {\n            return new();\n        }\n\n    }\n}\n#pragma warning restore\n\n\n'})})}),(0,a.jsx)(r.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\MockMe\\src\\TestClock\\obj\\GX\\MockMe.Generator\\MockMe.Generator.MockStoreGenerator\\MyClockMock.g.cs",label:"MyClockMock.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\n// <auto-generated />\n#pragma warning disable\n#nullable enable\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing HarmonyLib;\nusing MockMe;\nusing MockMe.Mocks;\nusing MockMe.Mocks.ClassMemberMocks;\nusing MockMe.Mocks.ClassMemberMocks.CallTracker;\n\nnamespace MockMe.Generated.MockData\n{\n    [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n    internal class MyClockMock\n        : global::MockMe.Abstractions.SealedTypeMock<global::MockData.MyClock>\n    {\n        \n        public MyClockMock()\n        {\n            this.Setup = new MyClockMockSetup();\n            this.CallTracker = new MyClockMockSetup.MyClockMockCallTracker(this.Setup);\n            this.Assert = new MyClockMockSetup.MyClockMockCallTracker.MyClockMockAsserter(this.CallTracker);\n            global::MockMe.MockStore<global::MockData.MyClock>.Store.TryAdd(this.MockedObject, this);\n        }\n\n        public MyClockMockSetup Setup { get; }\n        public MyClockMockSetup.MyClockMockCallTracker.MyClockMockAsserter Assert { get; }\n        private MyClockMockSetup.MyClockMockCallTracker CallTracker { get; }\n\n        internal sealed class Patche3022228d9a74650b73fc7bf202bb794\n        {\n            private static bool Prefix(global::MockData.MyClock __instance, ref global::System.DateTime __result)\n            {\n                if (global::MockMe.MockStore<global::MockData.MyClock>.TryGetValue<MyClockMock>(__instance, out var mock))\n                {\n                    __result = mock.CallTracker.GetNow();\n                    return false;\n                }\n\n                return true;\n            }\n        }\n        internal sealed class Patch9c65ff6ba20c4224bd5585786f975467\n        {\n            private static bool Prefix(global::MockData.MyClock __instance, ref global::System.DateTime __result)\n            {\n                if (global::MockMe.MockStore<global::MockData.MyClock>.TryGetValue<MyClockMock>(__instance, out var mock))\n                {\n                    __result = mock.CallTracker.GetUtcNow();\n                    return false;\n                }\n\n                return true;\n            }\n        }\n        static MyClockMock()\n        {\n            var harmony = new global::HarmonyLib.Harmony("com.mockme.patch");\n\n            var originalPatche3022228d9a74650b73fc7bf202bb794 = typeof(global::MockData.MyClock).GetMethod("GetNow", new Type[] {  } );\n            var Patche3022228d9a74650b73fc7bf202bb794 = typeof(Patche3022228d9a74650b73fc7bf202bb794).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);\n\n            harmony.Patch(originalPatche3022228d9a74650b73fc7bf202bb794, prefix: new HarmonyMethod(Patche3022228d9a74650b73fc7bf202bb794));\n\n            var originalPatch9c65ff6ba20c4224bd5585786f975467 = typeof(global::MockData.MyClock).GetMethod("GetUtcNow", new Type[] {  } );\n            var Patch9c65ff6ba20c4224bd5585786f975467 = typeof(Patch9c65ff6ba20c4224bd5585786f975467).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);\n\n            harmony.Patch(originalPatch9c65ff6ba20c4224bd5585786f975467, prefix: new HarmonyMethod(Patch9c65ff6ba20c4224bd5585786f975467));\n\n        }\n\n    }\n\n    [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n    internal class MyClockMockSetup : global::MockMe.Mocks.ClassMemberMocks.Setup.MemberMockSetup\n    {\n\n        private global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime>? GetNow_BagStore;\n        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime> GetNow()\n        {\n\n            return this.GetNow_BagStore ??= new();;\n        }\n        private global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime>? GetUtcNow_BagStore;\n        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.DateTime> GetUtcNow()\n        {\n\n            return this.GetUtcNow_BagStore ??= new();;\n        }\n        [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n        internal class MyClockMockCallTracker : MockCallTracker\n        {\n            private readonly MyClockMockSetup setup;\n            public MyClockMockCallTracker(MyClockMockSetup setup)\n            {\n                this.setup = setup;\n            }\n\n            private int GetNow_CallStore;\n\n            public global::System.DateTime GetNow()\n            {\n                this.GetNow_CallStore++;\n                return MockCallTracker.CallMemberMock<global::System.DateTime>(this.setup.GetNow_BagStore);\n            }\n\n            private int GetUtcNow_CallStore;\n\n            public global::System.DateTime GetUtcNow()\n            {\n                this.GetUtcNow_CallStore++;\n                return MockCallTracker.CallMemberMock<global::System.DateTime>(this.setup.GetUtcNow_BagStore);\n            }\n\n            [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.1.2.0")]\n            internal class MyClockMockAsserter : MockAsserter\n            {\n                private readonly MyClockMockSetup.MyClockMockCallTracker tracker;\n                public MyClockMockAsserter(MyClockMockSetup.MyClockMockCallTracker tracker)\n                {\n                    this.tracker = tracker;\n                }\n\n                public global::MockMe.Asserters.MemberAsserter GetNow() =>\n                    new(this.tracker.GetNow_CallStore);\n\n                public global::MockMe.Asserters.MemberAsserter GetUtcNow() =>\n                    new(this.tracker.GetUtcNow_CallStore);\n\n            }\n\n        }\n\n    }\n\n}\n#pragma warning restore\n\n'})})})]}),"\n",(0,a.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,a.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(9560).A+"",children:"Download Example project MockMe "})})}),"\n",(0,a.jsx)(t.h3,{id:"share-mockme",children:"Share MockMe"}),"\n",(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&quote=MockMe",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&text=MockMe:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&title=MockMe",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe&title=MockMe&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMockMe",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/MockMe",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/MockMe"})}),"\n",(0,a.jsx)(t.h3,{id:"in-the-same-category-tests---4-other-generators",children:"In the same category (Tests) - 4 other generators"}),"\n",(0,a.jsx)(t.h4,{id:"mocklis",children:(0,a.jsx)(t.a,{href:"/docs/mocklis",children:"mocklis"})}),"\n",(0,a.jsx)(t.h4,{id:"mstest",children:(0,a.jsx)(t.a,{href:"/docs/MSTest",children:"MSTest"})}),"\n",(0,a.jsx)(t.h4,{id:"ridge",children:(0,a.jsx)(t.a,{href:"/docs/Ridge",children:"Ridge"})}),"\n",(0,a.jsx)(t.h4,{id:"rocks",children:(0,a.jsx)(t.a,{href:"/docs/Rocks",children:"Rocks"})})]})}function m(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(k,{...e})}):k(e)}}}]);