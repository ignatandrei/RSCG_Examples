"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[1302],{14611:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/files/Csvcsharp-3f77cead9c275781ef91e48d728975cd.zip"},72234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>h,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"RSCG-Examples/Csvcsharp","title":"235 - Csvcsharp","description":"Serializer for CSV files","source":"@site/docs/RSCG-Examples/Csvcsharp.md","sourceDirName":"RSCG-Examples","slug":"/Csvcsharp","permalink":"/RSCG_Examples/v2/docs/Csvcsharp","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2350,"frontMatter":{"sidebar_position":2350,"title":"235 - Csvcsharp","description":"Serializer for CSV files","slug":"/Csvcsharp"},"sidebar":"tutorialSidebar","previous":{"title":"234 - RapidEnum","permalink":"/RSCG_Examples/v2/docs/RapidEnum"},"next":{"title":"236 - validly","permalink":"/RSCG_Examples/v2/docs/validly"}}');var a=n(74848),i=n(28453),s=n(11470),l=n(19365),o=n(14252),c=n(72866);const d={sidebar_position:2350,title:"235 - Csvcsharp",description:"Serializer for CSV files",slug:"/Csvcsharp"},h="Csvcsharp  by Yusuke Nakada",p={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Author",id:"author",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"NuGet packages",id:"nuget-packages",level:3},{value:".NET CLI",id:"net-cli",level:3},{value:"Package Manager",id:"package-manager",level:3},{value:"Unity",id:"unity",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Serialization",id:"serialization",level:2},{value:"CsvDocument",id:"csvdocument",level:2},{value:"Options",id:"options",level:2},{value:"CSV Specifications",id:"csv-specifications",level:2},{value:"Extensions",id:"extensions",level:2},{value:"License",id:"license",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Csvcsharp",id:"share-csvcsharp",level:3},...c.RM];function m(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"csvcsharp--by-yusuke-nakada",children:"Csvcsharp  by Yusuke Nakada"})}),"\n",(0,a.jsx)(o.A,{toc:u,minHeadingLevel:2,maxHeadingLevel:2}),"\n",(0,a.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/Csvcsharp/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Csvcsharp?label=Csvcsharp",alt:"Nuget"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/nuskey8/Csv-CSharp",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/nuskey8/Csv-CSharp?label=updated",alt:"GitHub last commit"})}),"\n",(0,a.jsx)(t.img,{src:"https://img.shields.io/github/stars/nuskey8/Csv-CSharp?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,a.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,a.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["Name: ",(0,a.jsx)(t.strong,{children:"Csvcsharp"})]}),(0,a.jsx)(t.p,{children:"Fast CSV Serializer for .NET and Unity."}),(0,a.jsx)(t.p,{children:"Author: Yusuke Nakada"}),(0,a.jsxs)(t.p,{children:["NuGet:\n",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/Csvcsharp/",children:"https://www.nuget.org/packages/Csvcsharp/"})})]}),(0,a.jsxs)(t.p,{children:["You can find more details at ",(0,a.jsx)(t.a,{href:"https://github.com/nuskey8/Csv-CSharp",children:"https://github.com/nuskey8/Csv-CSharp"})]}),(0,a.jsxs)(t.p,{children:["Source: ",(0,a.jsx)(t.a,{href:"https://github.com/nuskey8/Csv-CSharp",children:"https://github.com/nuskey8/Csv-CSharp"})]})]}),"\n",(0,a.jsx)(t.h3,{id:"author",children:"Author"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Yusuke Nakada\n",(0,a.jsx)(t.img,{src:"https://github.com/nuskey8.png",alt:"Alt text"})]})}),"\n",(0,a.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,a.jsxs)(t.admonition,{type:"note",children:[(0,a.jsx)(t.h1,{id:"csv-csharp",children:"Csv-CSharp"}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/CsvCSharp",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/v/CsvCSharp.svg",alt:"NuGet"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/nuskey8/Csv-CSharp/releases",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/release/nuskey8/Csv-CSharp.svg",alt:"Releases"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/nuskey8/Csv-CSharp/LICENSE",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/license/nuskey8/Csv-CSharp.svg",alt:"GitHub license"})})]}),(0,a.jsxs)(t.p,{children:["English | ",(0,a.jsx)(t.a,{href:"https://github.com/nuskey8/Csv-CSharp/README_JA.md",children:"\u65e5\u672c\u8a9e"})]}),(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://github.com/nuskey8/Csv-CSharp/docs/img1.png",alt:"img"})}),(0,a.jsx)(t.p,{children:"Csv-CSharp is a highly performant CSV (TSV) parser for .NET and Unity. It is designed to parse UTF-8 binaries directly and leverage Source Generators to enable serialization/deserialization between CSV (TSV) and object arrays with zero (or very low) allocation."}),(0,a.jsx)(t.h2,{id:"installation",children:"Installation"}),(0,a.jsx)(t.h3,{id:"nuget-packages",children:"NuGet packages"}),(0,a.jsx)(t.p,{children:"Csv-CSharp requires .NET Standard 2.1 or higher. The package can be obtained from NuGet."}),(0,a.jsx)(t.h3,{id:"net-cli",children:".NET CLI"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ps1",children:"dotnet add package CsvCSharp\n"})}),(0,a.jsx)(t.h3,{id:"package-manager",children:"Package Manager"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ps1",children:"Install-Package CsvCSharp\n"})}),(0,a.jsx)(t.h3,{id:"unity",children:"Unity"}),(0,a.jsxs)(t.p,{children:["You can install Csv-CSharp in Unity by using ",(0,a.jsx)(t.a,{href:"https://github.com/GlitchEnzo/NuGetForUnity",children:"NugetForUnity"}),". For details, refer to the NugetForUnity README."]}),(0,a.jsx)(t.h2,{id:"quick-start",children:"Quick Start"}),(0,a.jsx)(t.p,{children:"Csv-CSharp serializes/deserializes CSV data to and from arrays of classes/structs."}),(0,a.jsxs)(t.p,{children:["Define a class/struct and add the ",(0,a.jsx)(t.code,{children:"[CsvObject]"})," attribute and the ",(0,a.jsx)(t.code,{children:"partial"})," keyword."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"[CsvObject]\npublic partial class Person\n{\n    [Column(0)]\n    public string Name \\{ get; set; }\n\n    [Column(1)]\n    public int Age \\{ get; set; }\n}\n"})}),(0,a.jsxs)(t.p,{children:["All public fields/properties of a type marked with ",(0,a.jsx)(t.code,{children:"[CsvObject]"})," must have either the ",(0,a.jsx)(t.code,{children:"[Column]"})," or ",(0,a.jsx)(t.code,{children:"[IgnoreMember]"})," attribute. (An analyzer will output a compile error if it does not find either attribute on public members.)"]}),(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"[Column]"})," attribute can specify a column index as an ",(0,a.jsx)(t.code,{children:"int"})," or a header name as a ",(0,a.jsx)(t.code,{children:"string"}),"."]}),(0,a.jsxs)(t.p,{children:["To serialize this type to CSV or deserialize it from CSV, use ",(0,a.jsx)(t.code,{children:"CsvSerializer"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'var array = new Person[]\n{\n    new() \\{ Name = "Alice", Age = 18 },\n    new() \\{ Name = "Bob", Age = 23 },\n    new() \\{ Name = "Carol", Age = 31 },\n}\n\n// Person[] -> CSV (UTF-8)\nbyte[] csv = CsvSerializer.Serialize(array);\n\n// Person[] -> CSV (UTF-16)\nstring csvText = CsvSerializer.SerializeToString(array);\n\n// CSV (UTF-8) -> Person[]\narray = CsvSerializer.Deserialize<Person>(csv);\n\n// CSV (UTF-16) -> Person[]\narray = CsvSerializer.Deserialize<Person>(csvText);\n'})}),(0,a.jsxs)(t.p,{children:["Serialize has an overload that returns a UTF-8 encoded ",(0,a.jsx)(t.code,{children:"byte[]"}),", and you can also pass a ",(0,a.jsx)(t.code,{children:"Stream"})," or ",(0,a.jsx)(t.code,{children:"IBufferWriter<byte>"})," for writing. Deserialize accepts UTF-8 byte arrays as ",(0,a.jsx)(t.code,{children:"byte[]"})," and also supports ",(0,a.jsx)(t.code,{children:"string"}),", ",(0,a.jsx)(t.code,{children:"Stream"}),", and ",(0,a.jsx)(t.code,{children:"ReadOnlySequence<byte>"}),"."]}),(0,a.jsxs)(t.p,{children:["The default supported types for fields are ",(0,a.jsx)(t.code,{children:"sbyte"}),", ",(0,a.jsx)(t.code,{children:"byte"}),", ",(0,a.jsx)(t.code,{children:"short"}),", ",(0,a.jsx)(t.code,{children:"ushort"}),", ",(0,a.jsx)(t.code,{children:"int"}),", ",(0,a.jsx)(t.code,{children:"uint"}),", ",(0,a.jsx)(t.code,{children:"long"}),", ",(0,a.jsx)(t.code,{children:"ulong"}),", ",(0,a.jsx)(t.code,{children:"char"}),", ",(0,a.jsx)(t.code,{children:"string"}),", ",(0,a.jsx)(t.code,{children:"Enum"}),", ",(0,a.jsx)(t.code,{children:"Nullable<T>"}),", ",(0,a.jsx)(t.code,{children:"DateTime"}),", ",(0,a.jsx)(t.code,{children:"TimeSpan"}),", and ",(0,a.jsx)(t.code,{children:"Guid"}),". To support other types, refer to the Extensions section."]}),(0,a.jsx)(t.h2,{id:"serialization",children:"Serialization"}),(0,a.jsxs)(t.p,{children:["The class/struct passed to ",(0,a.jsx)(t.code,{children:"CsvSerializer"})," should have the ",(0,a.jsx)(t.code,{children:"[CsvObject]"})," attribute and the ",(0,a.jsx)(t.code,{children:"partial"})," keyword."]}),(0,a.jsxs)(t.p,{children:["By default, fields and properties with the ",(0,a.jsx)(t.code,{children:"[Column]"})," attribute are the targets for serialization/deserialization. The ",(0,a.jsx)(t.code,{children:"[Column]"})," attribute is mandatory for public members, but you can target private members by adding the ",(0,a.jsx)(t.code,{children:"[Column]"})," attribute."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"[CsvObject]\npublic partial class Person\n{\n    [Column(0)]\n    public string Name \\{ get; set; }\n\n    [Column(1)]\n    int age;\n\n    [IgnoreMember]\n    public int Age => age;\n}\n"})}),(0,a.jsx)(t.p,{children:"To specify header names instead of indices, use a string key."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'[CsvObject]\npublic partial class Person\n{\n    [Column("name")]\n    public string Name \\{ get; set; }\n\n    [Column("age")]\n    public int Age \\{ get; set; }\n}\n'})}),(0,a.jsxs)(t.p,{children:["To use member names as keys, specify ",(0,a.jsx)(t.code,{children:"[CsvObject(keyAsPropertyName: true)]"}),". In this case, the ",(0,a.jsx)(t.code,{children:"[Column]"})," attribute is not required."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"[CsvObject(keyAsPropertyName: true)]\npublic partial class Person\n{\n    public string Name \\{ get; set; }\n    public int Age \\{ get; set; }\n}\n"})}),(0,a.jsx)(t.h2,{id:"csvdocument",children:"CsvDocument"}),(0,a.jsxs)(t.p,{children:["If you need to directly parse CSV fields, you can use ",(0,a.jsx)(t.code,{children:"CsvDocument"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'var array = new Person[]\n{\n    new() \\{ Name = "Alice", Age = 18 },\n    new() \\{ Name = "Bob", Age = 23 },\n    new() \\{ Name = "Carol", Age = 31 },\n};\n\nbyte[] csv = CsvSerializer.Serialize(array);\n\n// CSV (UTF-8) -> CsvDocument\nvar document = CsvSerializer.ConvertToDocument(csv);\n\nforeach (var row in document.Rows)\n{\n    var name = row["Name"].GetValue<string>();\n    var age = row["Age"].GetValue<int>();\n}\n'})}),(0,a.jsx)(t.h2,{id:"options",children:"Options"}),(0,a.jsxs)(t.p,{children:["You can change CSV settings by passing ",(0,a.jsx)(t.code,{children:"CsvOptions"})," to Serialize/Deserialize."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"CsvSerializer.Serialize(array, new CsvOptions()\n{\n    HasHeader = true, // Include header row\n    AllowComments = true, // Allow comments starting with '#''\n    NewLine = NewLineType.LF, // Newline type\n    Separator = SeparatorType.Comma, // Separator character\n    QuoteMode = QuoteMode.Minimal, // Conditions for quoting fields (Minimal quotes only strings containing escape characters)\n    FormatterProvider = StandardFormatterProvider.Instance, // ICsvFormatterProvider to use\n});\n"})}),(0,a.jsx)(t.h2,{id:"csv-specifications",children:"CSV Specifications"}),(0,a.jsxs)(t.p,{children:["The default settings of Csv-CSharp generally follow the specifications outlined in ",(0,a.jsx)(t.a,{href:"https://www.rfc-editor.org/rfc/rfc4180.html",children:"RFC 4180"}),". However, please note that for performance and practicality reasons, some specifications may be disregarded."]}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The default newline character is LF instead of CRLF."}),"\n",(0,a.jsx)(t.li,{children:"Records with a mismatch in the number of fields can be read without errors being output; missing fields will be set to their default values."}),"\n"]}),(0,a.jsx)(t.h2,{id:"extensions",children:"Extensions"}),(0,a.jsxs)(t.p,{children:["Interfaces ",(0,a.jsx)(t.code,{children:"ICsvFormatter<T>"})," and ",(0,a.jsx)(t.code,{children:"ICsvFormatterProvider"})," are provided to customize field serialization/deserialization."]}),(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:"ICsvFormatter<T>"})," for type serialization/deserialization. Here is an example of implementing a formatter for a struct wrapping an ",(0,a.jsx)(t.code,{children:"int"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"public struct Foo\n{\n    public int Value;\n\n    public Foo(int value)\n    {\n        this.Value = value;\n    }\n}\n\npublic sealed class FooFormatter : ICsvFormatter<Foo>\n{\n    public Foo Deserialize(ref CsvReader reader)\n    {\n        var value = reader.ReadInt32();\n        return new Foo(value);\n    }\n\n    public void Serialize(ref CsvWriter writer, Foo value)\n    {\n        writer.WriteInt32(value.Value);\n    }\n}\n"})}),(0,a.jsx)(t.p,{children:"Next, implement a formatter provider to retrieve the formatter."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"public class CustomFormatterProvider : ICsvFormatterProvider\n{\n    public static readonly ICsvFormatterProvider Instance = new CustomFormatterProvider();\n\n    CustomFormatterProvider()\n    {\n    }\n\n    static CustomFormatterProvider()\n    {\n        FormatterCache<Foo>.Formatter = new FooFormatter();\n    }\n\n    public ICsvFormatter<T>? GetFormatter<T>()\n    {\n        return FormatterCache<T>.Formatter;\n    }\n\n    static class FormatterCache<T>\n    {\n        public static readonly ICsvFormatter<T> Formatter;\n    }\n}\n"})}),(0,a.jsxs)(t.p,{children:["You can set the created formatter provider in CsvOptions. The above ",(0,a.jsx)(t.code,{children:"CustomFormatterProvider"})," only supports the ",(0,a.jsx)(t.code,{children:"Foo"})," struct, so combine it with the standard formatter provider ",(0,a.jsx)(t.code,{children:"StandardFormatterProvider"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:"// Create a composite formatter provider combining multiple formatter providers\nvar provider = CompositeFormatterProvider.Create(\n    CustomFormatterProvider.Instance,\n    StandardFormatterProvider.Instance\n);\n\nCsvSerializer.Serialize(array, new CsvOptions()\n{\n    FormatterProvider = provider\n});\n"})}),(0,a.jsx)(t.h2,{id:"license",children:"License"}),(0,a.jsx)(t.p,{children:"This library is released under the MIT license."})]}),"\n",(0,a.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Serializer for CSV files"})}),"\n",(0,a.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,a.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,a.jsx)(t.strong,{children:"Csvcsharp"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="CsvCSharp" Version="1.0.0" />\n\t</ItemGroup>\n\t\n</Project>\n\n'})})]}),(0,a.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CsvCsharp\\src\\Serializer\\Program.cs",label:"Program.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"Csvcsharp"})," in ",(0,a.jsx)(t.em,{children:"Program.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Csv;\nusing SerializerDemo;\n\nvar p= new Person() \\{ Name= "Andrei Ignat" , Age=55};\nvar utf8Csv = CsvSerializer.SerializeToString<Person>([p]);\nConsole.WriteLine(utf8Csv);\nvar p1 = CsvSerializer.Serialize<Person>([p]);\nvar p2 = CsvSerializer.Deserialize<Person>(p1);\n\nConsole.WriteLine(p2.First().Name);\nConsole.WriteLine(p2.First().Age);\n'})})]}),(0,a.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CsvCsharp\\src\\Serializer\\Person.cs",label:"Person.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"Csvcsharp"})," in ",(0,a.jsx)(t.em,{children:"Person.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Csv.Annotations;\n\nnamespace SerializerDemo;\n[CsvObject]\npublic partial class Person \n{\n    [Column(0)]\n    public int Age \\{ get; set; }\n    [Column(1)]\n    public string Name \\{ get; set; \\} = string.Empty;\n\n}\n\n\n"})})]})]}),"\n",(0,a.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,a.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CsvCsharp\\src\\Serializer\\obj\\GX\\Csv.SourceGenerator\\Csv.SourceGenerator.CsvSerializerGenerator\\SerializerDemo.Person.CsvSerializer.g.cs",label:"SerializerDemo.Person.CsvSerializer.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:" // <auto-generated />\n #nullable enable\n #pragma warning disable CS0162 // Unreachable code\n #pragma warning disable CS0219 // Variable assigned but never used\n #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.\n #pragma warning disable CS8601 // Possible null reference assignment\n #pragma warning disable CS8602 // Possible null return\n #pragma warning disable CS8604 // Possible null reference argument for parameter\n #pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method\n\n using System;\n using Csv;\n using Csv.Annotations;\n using Csv.Internal;\n\n namespace SerializerDemo\n {\n\t partial class Person : global::Csv.ICsvSerializerRegister\n\t {\n\t\t static void RegisterCsvSerializer()\n\t\t {\n\t\t\t global::Csv.CsvSerializer.Register(GeneratedCsvSerializer.Instance);\n\t\t }\n\t\t class GeneratedCsvSerializer : ICsvSerializer<global::SerializerDemo.Person>\n\t\t {\n\t\t\t public static readonly GeneratedCsvSerializer Instance = new();\n\t\t\t static readonly byte[] AgeUtf8Key = \\{ 65, 103, 101 }; // Age\n\t\t\t static readonly byte[] NameUtf8Key = \\{ 78, 97, 109, 101 }; // Name\n\n\t\t\t public void Serialize(ref global::Csv.CsvWriter writer, global::System.ReadOnlySpan<global::SerializerDemo.Person> values)\n\t\t\t {\n\t\t\t\t if (writer.Options.HasHeader)\n\t\t\t\t {\n\t\t\t\t\t var quoteHeader = writer.Options.QuoteMode is (global::Csv.QuoteMode.All or global::Csv.QuoteMode.NonNumeric);\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteRaw(AgeUtf8Key.AsSpan());\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteSeparator();\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteRaw(NameUtf8Key.AsSpan());\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteEndOfLine();\n\t\t\t\t }\n\t\t\t\t for (int i = 0; i < values.Length; i++)\n\t\t\t\t {\n\t\t\t\t\t var item = values[i];\n\t\t\t\t\t writer.WriteInt32(item.Age);\n\t\t\t\t\t writer.WriteSeparator();\n\t\t\t\t\t writer.WriteString(item.Name);\n\t\t\t\t\t if (i != values.Length - 1) writer.WriteEndOfLine();\n\t\t\t\t }\n\t\t\t }\n\n\t\t\t public void Serialize(ref global::Csv.CsvWriter writer, global::System.Collections.Generic.IEnumerable<global::SerializerDemo.Person> values)\n\t\t\t {\n\t\t\t\t if (writer.Options.HasHeader)\n\t\t\t\t {\n\t\t\t\t\t var quoteHeader = writer.Options.QuoteMode is (global::Csv.QuoteMode.All or global::Csv.QuoteMode.NonNumeric);\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteRaw(AgeUtf8Key.AsSpan());\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteSeparator();\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteRaw(NameUtf8Key.AsSpan());\n\t\t\t\t\t if (quoteHeader) writer.WriteRaw((byte)'\"');\n\t\t\t\t\t writer.WriteEndOfLine();\n\t\t\t\t }\n\t\t\t\t var e = values.GetEnumerator();\n\t\t\t\t try\n\t\t\t\t {\n\t\t\t\t\t if (!e.MoveNext()) return;\n\t\t\t\t\t while (true)\n\t\t\t\t\t {\n\t\t\t\t\t\t var item = e.Current;\n\t\t\t\t\t\t writer.WriteInt32(item.Age);\n\t\t\t\t\t\t writer.WriteSeparator();\n\t\t\t\t\t\t writer.WriteString(item.Name);\n\t\t\t\t\t\t if (!e.MoveNext())\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t writer.WriteEndOfLine();\n\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t }\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t finally\n\t\t\t\t {\n\t\t\t\t\t e.Dispose();\n\t\t\t\t }\n\t\t\t }\n\n\t\t\t public global::SerializerDemo.Person[] Deserialize(ref global::Csv.CsvReader reader)\n\t\t\t {\n\t\t\t\t var allowComments = reader.Options.AllowComments;\n\t\t\t\t while (reader.TryReadEndOfLine(true) || (allowComments && reader.TrySkipComment(false))) \\{ }\n\t\t\t\t if (reader.Options.HasHeader) reader.SkipLine();\n\t\t\t\t using var list = new TempList<global::SerializerDemo.Person>();\n\t\t\t\t while (reader.Remaining > 0)\n\t\t\t\t {\n\t\t\t\t\t if (reader.TryReadEndOfLine()) continue;\n\t\t\t\t\t if (allowComments && reader.TrySkipComment(false)) continue;\n\t\t\t\t\t var __Age = default(int);\n\t\t\t\t\t var __Name = default(string);\n\t\t\t\t\t var ___endOfLine = false;\n\t\t\t\t\t for (int __i = 0; __i <= 1; __i++)\n\t\t\t\t\t {\n\t\t\t\t\t\t switch (__i)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t case 0:\n\t\t\t\t\t\t\t\t __Age = reader.ReadInt32();\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t\t case 1:\n\t\t\t\t\t\t\t\t __Name = reader.ReadString();\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t\t default:\n\t\t\t\t\t\t\t\t reader.SkipField();\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t if (reader.TryReadEndOfLine(true))\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t ___endOfLine = true;\n\t\t\t\t\t\t\t goto ADD_ITEM;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t if (!reader.TryReadSeparator(false)) goto ADD_ITEM;\n\t\t\t\t\t }\n\n\t\t\t\t\t ADD_ITEM:\n\t\t\t\t\t list.Add(\t\t\t\t\t new()\n\t\t\t\t\t {\n\t\t\t\t\t\t Age = __Age,\n\t\t\t\t\t\t Name = __Name,\n\t\t\t\t\t }\n\t\t\t\t\t );\n\n\t\t\t\t\t if (!___endOfLine) reader.SkipLine();\n\t\t\t\t }\n\t\t\t\t return list.AsSpan().ToArray();\n\t\t\t }\n\n\t\t\t public int Deserialize(ref global::Csv.CsvReader reader, global::System.Span<global::SerializerDemo.Person> destination)\n\t\t\t {\n\t\t\t\t var allowComments = reader.Options.AllowComments;\n\t\t\t\t while (reader.TryReadEndOfLine(true) || (allowComments && reader.TrySkipComment(false))) \\{ }\n\t\t\t\t if (reader.Options.HasHeader) reader.SkipLine();\n\t\t\t\t var n = 0;\n\t\t\t\t while (reader.Remaining > 0)\n\t\t\t\t {\n\t\t\t\t\t if (reader.TryReadEndOfLine()) continue;\n\t\t\t\t\t if (allowComments && reader.TrySkipComment(false)) continue;\n\t\t\t\t\t var __Age = default(int);\n\t\t\t\t\t var __Name = default(string);\n\t\t\t\t\t var ___endOfLine = false;\n\t\t\t\t\t for (int __i = 0; __i <= 1; __i++)\n\t\t\t\t\t {\n\t\t\t\t\t\t switch (__i)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t case 0:\n\t\t\t\t\t\t\t\t __Age = reader.ReadInt32();\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t\t case 1:\n\t\t\t\t\t\t\t\t __Name = reader.ReadString();\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t\t default:\n\t\t\t\t\t\t\t\t reader.SkipField();\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t if (reader.TryReadEndOfLine(true))\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t ___endOfLine = true;\n\t\t\t\t\t\t\t goto ADD_ITEM;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t if (!reader.TryReadSeparator(false)) goto ADD_ITEM;\n\t\t\t\t\t }\n\n\t\t\t\t\t ADD_ITEM:\n\t\t\t\t\t destination[n++] = new()\n\t\t\t\t\t {\n\t\t\t\t\t\t Age = __Age,\n\t\t\t\t\t\t Name = __Name,\n\t\t\t\t\t }\n\t\t\t\t\t ;\n\n\t\t\t\t\t if (!___endOfLine) reader.SkipLine();\n\t\t\t\t }\n\t\t\t\t return n;\n\t\t\t }\n\t\t }\n\t }\n\t #pragma warning restore CS0162 // Unreachable code\n\t #pragma warning restore CS0219 // Variable assigned but never used\n\t #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.\n\t #pragma warning restore CS8601 // Possible null reference assignment\n\t #pragma warning restore CS8602 // Possible null return\n\t #pragma warning restore CS8604 // Possible null reference argument for parameter\n\t #pragma warning restore CS8631 // The type cannot be used as type parameter in the generic type or method\n }\n\n"})})}),(0,a.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\CsvCsharp\\src\\Serializer\\obj\\GX\\VYaml.SourceGenerator\\VYaml.SourceGenerator.VYamlIncrementalSourceGenerator\\SerializerDemo.Person.YamlFormatter.g.cs",label:"SerializerDemo.Person.YamlFormatter.g.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:' // <auto-generated />\n #nullable enable\n #pragma warning disable CS0162 // Unreachable code\n #pragma warning disable CS0219 // Variable assigned but never used\n #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.\n #pragma warning disable CS8601 // Possible null reference assignment\n #pragma warning disable CS8602 // Possible null return\n #pragma warning disable CS8604 // Possible null reference argument for parameter\n #pragma warning disable CS8619 // Possible null reference assignment fix\n #pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method\n\n using System;\n using VYaml.Annotations;\n using VYaml.Parser;\n using VYaml.Emitter;\n using VYaml.Serialization;\n\n namespace SerializerDemo\n {\n     partial class Person\n     {\n         [VYaml.Annotations.Preserve]\n         public static void __RegisterVYamlFormatter()\n         {\n             global::VYaml.Serialization.GeneratedResolver.Register(new PersonGeneratedFormatter());\n         }\n         [VYaml.Annotations.Preserve]\n         public class PersonGeneratedFormatter : IYamlFormatter<global::SerializerDemo.Person?>\n         {\n             static readonly byte[] AgeKeyUtf8Bytes = \\{ 97, 103, 101 }; // age\n\n             static readonly byte[] NameKeyUtf8Bytes = \\{ 110, 97, 109, 101 }; // name\n\n             [VYaml.Annotations.Preserve]\n             public void Serialize(ref Utf8YamlEmitter emitter, global::SerializerDemo.Person? value, YamlSerializationContext context)\n             {\n                 if (value is null)\n                 {\n                     emitter.WriteNull();\n                     return;\n                 }\n                 emitter.BeginMapping();\n                 if (context.Options.NamingConvention == global::VYaml.Annotations.NamingConvention.LowerCamelCase)\n                 {\n                     emitter.WriteScalar(AgeKeyUtf8Bytes);\n                 }\n                 else\n                 {\n                     global::VYaml.Serialization.NamingConventionMutator.MutateToThreadStaticBufferUtf8(AgeKeyUtf8Bytes, context.Options.NamingConvention, out var mutated, out var written);\n                     emitter.WriteScalar(mutated.AsSpan(0, written));\n                 }\n                 context.Serialize(ref emitter, value.Age);\n                 if (context.Options.NamingConvention == global::VYaml.Annotations.NamingConvention.LowerCamelCase)\n                 {\n                     emitter.WriteScalar(NameKeyUtf8Bytes);\n                 }\n                 else\n                 {\n                     global::VYaml.Serialization.NamingConventionMutator.MutateToThreadStaticBufferUtf8(NameKeyUtf8Bytes, context.Options.NamingConvention, out var mutated, out var written);\n                     emitter.WriteScalar(mutated.AsSpan(0, written));\n                 }\n                 context.Serialize(ref emitter, value.Name);\n                 emitter.EndMapping();\n             }\n             [VYaml.Annotations.Preserve]\n             public global::SerializerDemo.Person? Deserialize(ref YamlParser parser, YamlDeserializationContext context)\n             {\n                 if (parser.IsNullScalar())\n                 {\n                     parser.Read();\n                     return default;\n                 }\n                 parser.ReadWithVerify(ParseEventType.MappingStart);\n\n                 var __Age__ = default(int);\n                 var __Name__ = default(string);\n                 while (!parser.End && parser.CurrentEventType != ParseEventType.MappingEnd)\n                 {\n                     if (parser.CurrentEventType != ParseEventType.Scalar)\n                     {\n                         throw new YamlSerializerException(parser.CurrentMark, "Custom type deserialization supports only string key");\n                     }\n\n                     if (!parser.TryGetScalarAsSpan(out var key))\n                     {\n                         throw new YamlSerializerException(parser.CurrentMark, "Custom type deserialization supports only string key");\n                     }\n\n                     if (context.Options.NamingConvention != global::VYaml.Annotations.NamingConvention.LowerCamelCase)\n                     {\n                         global::VYaml.Serialization.NamingConventionMutator.MutateToThreadStaticBufferUtf8(key, global::VYaml.Annotations.NamingConvention.LowerCamelCase, out var mutated, out var written);\n                         key = mutated.AsSpan(0, written);\n                     }\n                     switch (key.Length)\n                     {\n                         case 3:\n                             if (key.SequenceEqual(AgeKeyUtf8Bytes))\n                             {\n                                 parser.Read(); // skip key\n                                 __Age__ = context.DeserializeWithAlias<int>(ref parser);\n                                 continue;\n                             }\n                             goto default;\n                         case 4:\n                             if (key.SequenceEqual(NameKeyUtf8Bytes))\n                             {\n                                 parser.Read(); // skip key\n                                 __Name__ = context.DeserializeWithAlias<string>(ref parser);\n                                 continue;\n                             }\n                             goto default;\n                         default:\n                             parser.Read(); // skip key\n                             parser.SkipCurrentNode(); // skip value\n                             continue;\n                     }\n                 }\n                 parser.ReadWithVerify(ParseEventType.MappingEnd);\n                 return new Person\n                 {\n                     Age = __Age__,\n                     Name = __Name__,\n                 }\n                 ;\n             }\n         }\n     }\n }\n #pragma warning restore CS0162 // Unreachable code\n #pragma warning restore CS0219 // Variable assigned but never used\n #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.\n #pragma warning restore CS8601 // Possible null reference assignment\n #pragma warning restore CS8602 // Possible null return\n #pragma warning restore CS8604 // Possible null reference argument for parameter\n #pragma warning restore CS8631 // The type cannot be used as type parameter in the generic type or method\n\n'})})})]}),"\n",(0,a.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,a.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(14611).A+"",children:"Download Example project Csvcsharp "})})}),"\n",(0,a.jsx)(t.h3,{id:"share-csvcsharp",children:"Share Csvcsharp"}),"\n",(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCsvcsharp&quote=Csvcsharp",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCsvcsharp&text=Csvcsharp:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCsvcsharp",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCsvcsharp&title=Csvcsharp",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCsvcsharp&title=Csvcsharp&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FCsvcsharp",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Csvcsharp",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Csvcsharp"})}),"\n",(0,a.jsx)(c.Ay,{})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},72866:(e,t,n)=>{n.d(t,{Ay:()=>l,RM:()=>i});var r=n(74848),a=n(28453);const i=[{value:"Category &quot;Serializer&quot; has the following generators:",id:"category-serializer-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function s(e){const t={a:"a",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"category-serializer-has-the-following-generators",children:'Category "Serializer" has the following generators:'}),"\n",(0,r.jsxs)(t.p,{children:["1 ",(0,r.jsx)(t.a,{href:"/docs/Csvcsharp",children:"Csvcsharp"})]}),"\n",(0,r.jsxs)(t.p,{children:["2 ",(0,r.jsx)(t.a,{href:"/docs/GenPack",children:"GenPack"})]}),"\n",(0,r.jsxs)(t.p,{children:["3 ",(0,r.jsx)(t.a,{href:"/docs/jsonConverterSourceGenerator",children:"jsonConverterSourceGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["4 ",(0,r.jsx)(t.a,{href:"/docs/JsonPolymorphicGenerator",children:"JsonPolymorphicGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["5 ",(0,r.jsx)(t.a,{href:"/docs/Nino",children:"Nino"})]}),"\n",(0,r.jsxs)(t.p,{children:["6 ",(0,r.jsx)(t.a,{href:"/docs/ProtobufSourceGenerator",children:"ProtobufSourceGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["7 ",(0,r.jsx)(t.a,{href:"/docs/Schema",children:"Schema"})]}),"\n",(0,r.jsxs)(t.p,{children:["8 ",(0,r.jsx)(t.a,{href:"/docs/StackXML",children:"StackXML"})]}),"\n",(0,r.jsxs)(t.p,{children:["9 ",(0,r.jsx)(t.a,{href:"/docs/System.Text.Json",children:"System.Text.Json"})]}),"\n",(0,r.jsxs)(t.p,{children:["10 ",(0,r.jsx)(t.a,{href:"/docs/VYaml",children:"VYaml"})]}),"\n",(0,r.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"/docs/Categories/Serializer",children:"Serializer"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}}}]);