"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[1953],{31364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>h,default:()=>f,frontMatter:()=>c,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"RSCG-Examples/Larcanum.GitInfo","title":"181 - Larcanum.GitInfo","description":"Generates GitInfo data from the current environment.","source":"@site/docs/RSCG-Examples/Larcanum.GitInfo.md","sourceDirName":"RSCG-Examples","slug":"/Larcanum.GitInfo","permalink":"/RSCG_Examples/v2/docs/Larcanum.GitInfo","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Larcanum.GitInfo.md","tags":[],"version":"current","sidebarPosition":1810,"frontMatter":{"sidebar_position":1810,"title":"181 - Larcanum.GitInfo","description":"Generates GitInfo data from the current environment.","slug":"/Larcanum.GitInfo"},"sidebar":"tutorialSidebar","previous":{"title":"180 - Pure.DI","permalink":"/RSCG_Examples/v2/docs/Pure.DI"},"next":{"title":"182 - rscg_Interface_to_null_object","permalink":"/RSCG_Examples/v2/docs/rscg_Interface_to_null_object"}}');var s=n(74848),r=n(28453),o=n(11470),a=n(19365),l=n(14252);const c={sidebar_position:1810,title:"181 - Larcanum.GitInfo",description:"Generates GitInfo data from the current environment.",slug:"/Larcanum.GitInfo"},h="Larcanum.GitInfo  by",d={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Assembly Version Attributes",id:"assembly-version-attributes",level:2},{value:"Build Property $(Version)",id:"build-property-version",level:2},{value:"Automated NuGet Package Release with GitHub Action",id:"automated-nuget-package-release-with-github-action",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Larcanum.GitInfo",id:"share-larcanumgitinfo",level:3},{value:"In the same category (EnhancementProject) - 17 other generators",id:"in-the-same-category-enhancementproject---17-other-generators",level:3},{value:"AutoInvoke.Generator",id:"autoinvokegenerator",level:4},{value:"AutoSpectre",id:"autospectre",level:4},{value:"BuildInfo",id:"buildinfo",level:4},{value:"CommandLine",id:"commandline",level:4},{value:"Credfeto.Version.Information.Generator",id:"credfetoversioninformationgenerator",level:4},{value:"LinqGen.Generator",id:"linqgengenerator",level:4},{value:"Pekspro.BuildInformationGenerator",id:"peksprobuildinformationgenerator",level:4},{value:"PlantUmlClassDiagramGenerator",id:"plantumlclassdiagramgenerator",level:4},{value:"RSCG_AMS",id:"rscg_ams",level:4},{value:"RSCG_ExportDiagram",id:"rscg_exportdiagram",level:4},{value:"RSCG_FunctionsWithDI",id:"rscg_functionswithdi",level:4},{value:"RSCG_NameGenerator",id:"rscg_namegenerator",level:4},{value:"RSCG_TimeBombComment",id:"rscg_timebombcomment",level:4},{value:"RSCG_Wait",id:"rscg_wait",level:4},{value:"ThisAssembly",id:"thisassembly",level:4},{value:"ThisAssembly.Constants",id:"thisassemblyconstants",level:4},{value:"ThisAssembly.Metadata",id:"thisassemblymetadata",level:4}];function m(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"larcanumgitinfo--by",children:"Larcanum.GitInfo  by"})}),"\n",(0,s.jsx)(l.A,{toc:u}),"\n",(0,s.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/Larcanum.GitInfo/",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Larcanum.GitInfo?label=Larcanum.GitInfo",alt:"Nuget"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/lord-executor/Larcanum.GitInfo",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/lord-executor/Larcanum.GitInfo?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(t.img,{src:"https://img.shields.io/github/stars/lord-executor/Larcanum.GitInfo?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["Name: ",(0,s.jsx)(t.strong,{children:"Larcanum.GitInfo"})]}),(0,s.jsx)(t.p,{children:"Package Description"}),(0,s.jsx)(t.p,{children:"Author:"}),(0,s.jsxs)(t.p,{children:["NuGet:\n",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/Larcanum.GitInfo/",children:"https://www.nuget.org/packages/Larcanum.GitInfo/"})})]}),(0,s.jsxs)(t.p,{children:["You can find more details at ",(0,s.jsx)(t.a,{href:"https://github.com/lord-executor/Larcanum.GitInfo",children:"https://github.com/lord-executor/Larcanum.GitInfo"})]}),(0,s.jsxs)(t.p,{children:["Source: ",(0,s.jsx)(t.a,{href:"https://github.com/lord-executor/Larcanum.GitInfo",children:"https://github.com/lord-executor/Larcanum.GitInfo"})]})]}),"\n",(0,s.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://github.com/lord-executor/Larcanum.GitInfo/blob/main/LICENSE",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/license/mashape/apistatus.svg",alt:"GitHub"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/lord-executor/Larcanum.GitInfo/actions/workflows/build.yaml",children:(0,s.jsx)(t.img,{src:"https://github.com/lord-executor/Larcanum.GitInfo/actions/workflows/build.yaml/badge.svg",alt:"Build"})}),"\n",(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/Larcanum.GitInfo",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/nuget/v/Larcanum.GitInfo.svg",alt:"Nuget"})})]}),(0,s.jsx)(t.h1,{id:"overview",children:"Overview"}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Larcanum.GitInfo"})," is a package that you can add to your project to get access to some basic ",(0,s.jsx)(t.code,{children:"git"})," information directly\nin your source code through a ",(0,s.jsx)(t.em,{children:"generated"})," ",(0,s.jsx)(t.code,{children:"GitInfo"})," class and some build integration to configure MSBuild to use the\nversion information extracted from ",(0,s.jsx)(t.code,{children:"git"}),". The goal of the package is to simplify versioning of library packages and\nbinaries based on ",(0,s.jsx)(t.code,{children:"git"})," conventions."]}),(0,s.jsxs)(t.p,{children:["Being able to statically access basic ",(0,s.jsx)(t.code,{children:"git"})," version information is also very useful in the context of applications\nand web services since this allows that information to be exposed to the end user. This also works during development\nwhich turns out to be rather useful when working with various different versions of web service projects at the same\ntime."]}),(0,s.jsx)(t.p,{children:"This package is designed to be as simple as possible while still getting the job done and to that end, it makes some\nrelatively strong assumptions."}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The code is C#, using language version 10 or above","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"VB support could be added in the future if somebody needs that"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"The .NET Framework version being used is reasonable new (.NET 6+ should do it)"}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"git"})," binary is present in the ",(0,s.jsx)(t.code,{children:"PATH"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["This can be configured manually, but by default it assumes that ",(0,s.jsx)(t.code,{children:"git"})," is in the PATH and there is no attempt at discovering other locations"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["The target project is using ",(0,s.jsx)(t.a,{href:"https://semver.org/",children:"Semantic Versioning"})]}),"\n",(0,s.jsxs)(t.li,{children:["The target project is using ",(0,s.jsx)(t.code,{children:"git"})," tags as the primary source of version information"]}),"\n"]}),(0,s.jsxs)(t.p,{children:["Usage of the package is very simple too as you can see in the ",(0,s.jsx)(t.code,{children:"GitInfo.Out"}),' sample project in the "src" directory. All\nthat is needed is a package reference and that\'s it. You have access to the ',(0,s.jsx)(t.code,{children:"GitInfo"})," class."]}),(0,s.jsxs)(t.p,{children:["If you need more features than what ",(0,s.jsx)(t.code,{children:"Larcanum.GitInfo"})," provides, then you have three options"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["You can create an issue ",(0,s.jsx)(t.a,{href:"https://github.com/lord-executor/Larcanum.GitInfo/issues",children:"here"})," and if it falls within the scope of the project, then it will likely be added","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"More customization options in the form of configurable variants are good candidates for this"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["You can fork this project and customize from there","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"As stated above, the simplicity of the implementation was a primary design goal which makes it easy for most developers to understand and thus easy to customize"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["You can use ",(0,s.jsx)(t.a,{href:"https://www.devlooped.com/GitInfo/",children:"devlooped/GitInfo"})," instead which has very similar functionality but has way more features","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Also note that said project comes with ",(0,s.jsx)(t.a,{href:"https://github.com/devlooped#sponsorlink",children:"SponsorLink"})," which is not everybody's cup of tea"]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(t.h1,{id:"how-to-use-it",children:"How to Use It"}),(0,s.jsxs)(t.p,{children:["Assuming that you already have a project with a ",(0,s.jsx)(t.code,{children:"git"})," repository, all you have to do is add the package with"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"dotnet add package Larcanum.GitInfo\n"})}),(0,s.jsxs)(t.p,{children:["This will add the source generator and build files as a ",(0,s.jsx)(t.em,{children:"development"}),' dependency, which means that it is isolated to the\nproject it is added to and does not "leak" to other projects. This is what the package reference in the project file\nlooks like.']}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<PackageReference Include="Larcanum.GitInfo" Version="1.0.0">\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n  <PrivateAssets>all</PrivateAssets>\n</PackageReference>\n'})}),(0,s.jsxs)(t.p,{children:["By default, the ",(0,s.jsx)(t.code,{children:"GitInfo"}),' class is added to the project\'s root namespace which in this example is "DemoProj". We can\noutput the current version to the console with']}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'Console.WriteLine($"Version: {DemoProj.GitInfo.Tag}");\n'})}),(0,s.jsx)(t.h1,{id:"what-it-looks-like",children:"What it Looks Like"}),(0,s.jsxs)(t.p,{children:["The generated code looks something like the example below which is actually taken from ",(0,s.jsx)(t.em,{children:"this"})," repository. The information includes:"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.em,{children:"dirty"})," state of the work tree which is considered dirty if there are any uncommitted changes."]}),"\n",(0,s.jsxs)(t.li,{children:["The branch and commit information of the current ",(0,s.jsx)(t.code,{children:"HEAD"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"The tag description which is assumed to contain a semantic version string."}),"\n",(0,s.jsxs)(t.li,{children:["A version string that is compatible with the .NET ",(0,s.jsx)(t.code,{children:"Version"})," class and is derived from the tag description."]}),"\n"]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"NOTE:"})," If you are looking at the generated source file in your IDE, it ",(0,s.jsx)(t.em,{children:"may"}),' not be 100% up to date since IDEs like\nVisualStudio and Rider try to do some "shortcuts" to optimize the build process which means that the ',(0,s.jsx)(t.code,{children:"GitInfoFingerprintFile"}),"\ntarget is not always triggered. This should NOT matter, however since any proper ",(0,s.jsx)(t.code,{children:"dotnet build"})," or packing or publishing\nwill include that target and thus the ",(0,s.jsx)(t.code,{children:"GitInfo"})," class that is actually part of the final assembly will be up to date."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'[assembly: System.Reflection.AssemblyVersion("0.5.0")]\n[assembly: System.Reflection.AssemblyFileVersion("0.5.0")]\n[assembly: System.Reflection.AssemblyInformationalVersion("v0.5.0")]\n\nnamespace Larcanum.GitInfo.UnitTests;\n\npublic partial class GitInfo\n{\n    public const bool IsDirty = true;\n\n    public const string Branch = @"main";\n\n    public const string CommitShortHash = @"a777e94";\n\n    public const string CommitHash = @"a777e94677cbe32c3d2d1c1582ecdbf75ac159f8";\n\n    public const string CommitDate = @"2024-12-23T11:54:14+01:00";\n\n    public const string Tag = @"v0.5.0";\n\n    public const string DotNetVersion = @"0.5.0";\n}\n'})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If the current ",(0,s.jsx)(t.code,{children:"HEAD"})," is tagged, then the tag ",(0,s.jsx)(t.em,{children:"is"})," the description and if it contains a semantic version, this will be extracted as the .NET version","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["e.g. ",(0,s.jsx)(t.code,{children:"v0.5.0"})," /  ",(0,s.jsx)(t.code,{children:"0.5.0"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["If the current ",(0,s.jsx)(t.code,{children:"HEAD"})," is not tagged, but there is a previous tag in the commit history, then the tag description will include the tag as well as the number of commits since that tag and the short commit hash","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["e.g. ",(0,s.jsx)(t.code,{children:"v0.5.0-1-g7af059a"})," / ",(0,s.jsx)(t.code,{children:"0.5.0"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["If there is ",(0,s.jsx)(t.em,{children:"no"})," tag between the current ",(0,s.jsx)(t.code,{children:"HEAD"})," and the root, then the tag description will just consist of the short commit hash and the .NET version will default to 1.0.0","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["e.g. ",(0,s.jsx)(t.code,{children:"e83e39d"})," / ",(0,s.jsx)(t.code,{children:"1.0.0"})]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(t.h1,{id:"how-it-works",children:"How it Works"}),(0,s.jsxs)(t.p,{children:["The primary challenge that needed to be solved was to allow ",(0,s.jsx)(t.em,{children:"user code"})," to actually explicitly ",(0,s.jsx)(t.strong,{children:"reference"})," generated\ncode as in ",(0,s.jsx)(t.code,{children:"GitInfo.CommitHash.Should().HaveLength(40);"}),". Using MSBuild alone something like that is not really possible\nwith a ",(0,s.jsx)(t.em,{children:"reasonable"})," amount of effort. Generating code that can be directly referenced by user code is fortunately\nexactly what .NET Source Generators are meant for. This is why the primary functionality of this package is taking the\nform of an ",(0,s.jsx)(t.a,{href:"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.cookbook.md",children:"incremental source generator"}),"."]}),(0,s.jsxs)(t.p,{children:["Every incremental source generator needs a ",(0,s.jsx)(t.em,{children:"trigger"}),". Something that it can attach itself to and generate code for that\nthing or category of things in an efficient manner. For the ",(0,s.jsx)(t.code,{children:"GitInfo"})," class, there is no obvious anchor point in the\ncode since the ",(0,s.jsx)(t.em,{children:"input"})," for the generator is coming from outside the compilation unit and the code that is generated\nis (project-)global."]}),(0,s.jsxs)(t.p,{children:["One such trigger can be an ",(0,s.jsx)(t.a,{href:"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.cookbook.md#additional-file-transformation",children:"additional file"}),"\nthat can be used to trigger source generators, but we also don't want users to have to set up a dedicated marker file\nin order to use the ",(0,s.jsx)(t.code,{children:"GitInfo"})," generator. This is where the mandatory MSBuild integration comes in. MSBuild allows us to\ndefine such ",(0,s.jsx)(t.code,{children:"AdditionalFiles"})," items without the need for the consumer to do anything, and we can ",(0,s.jsx)(t.em,{children:"hide"}),' those items too.\nThe additional file that we define is called "GitInfo.fingerprint.txt" and is stored somewhere in the "obj" directory.\nHaving an actual file, while not strictly necessary for the source generator to work, provides some key benefits like\nproper build caching through the modification date of the file. To get that modification date, we run a variant of the\n',(0,s.jsx)(t.code,{children:"git describe"})," command in the ",(0,s.jsx)(t.code,{children:"BeforeBuild"}),' stage and if the output of that command, which we refer to as the\nfingerprint, changes then we update the contents of our fingerprint file which in turn triggers the source generator\nto re-generate the source code. This approach is certainly not perfect since it only detects changes to the git "state"\nwhen the actual ',(0,s.jsx)(t.code,{children:"Build"})," target is executed, but this is probably the best we can do with reasonable effort."]}),(0,s.jsxs)(t.p,{children:["The source generator can be configured with a set of MSBuild properties like ",(0,s.jsx)(t.code,{children:"GitInfoNamespace"})," which have to be made\nexplicitly visible to the compiler infrastructure by declaring them as items of the form ",(0,s.jsx)(t.code,{children:'<CompilerVisibleProperty Include="GitInfoNamespace" />'}),".\nThese configuration values are then used by the generator to customize the output to some degree."]}),(0,s.jsx)(t.h2,{id:"assembly-version-attributes",children:"Assembly Version Attributes"}),(0,s.jsxs)(t.p,{children:["Having access to the git version information from within the program itself is very useful, but if the generated\nassembly shows a completely different version than what ",(0,s.jsx)(t.code,{children:"GitInfo"})," provides that would be rather confusing. What we\nusually want is to keep the assembly version attributes in line with the version information provided by ",(0,s.jsx)(t.code,{children:"git"}),"."]}),(0,s.jsxs)(t.p,{children:['To that end, we hook into the existing MSBuild mechanism provided by "Microsoft.NET.GenerateAssemblyInfo.targets"\nwhich generates assembly info from metadata and has various properties to allow for customization. If the MSBuild\nproperty ',(0,s.jsx)(t.code,{children:"GitInfoGenerateAssemblyVersion"})," is set to true, which is the default, this ",(0,s.jsx)(t.em,{children:"disables"})," the automatic generation\nof AssemblyVersion, AssemblyFileVersion and AssemblyInformationalVersion and replaces them by adding these three\nattributes directly into the generated file that contains the ",(0,s.jsx)(t.code,{children:"GitInfo"})," class with version values derived from the\ngit tag description."]}),(0,s.jsx)(t.p,{children:'The informational version is simply set to the full git tag description as it allows any string value. For the assembly\nand file version, the semantic version is translated to a .NET "Major.Minor.Build.Revision" version by'}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"using the SemVer MAJOR, MINOR, PATCH as Major, Minor and Build respectively"}),"\n",(0,s.jsxs)(t.li,{children:["if the SemVer LABEL is a standard label as generated by ",(0,s.jsx)(t.code,{children:"git describe"}),", the number of commits since the last tag\nis extracted and used as the Revision"]}),"\n"]}),(0,s.jsxs)(t.p,{children:["In the example of the ",(0,s.jsx)(t.code,{children:"Larcanum.GitInfo.UnitTests"})," assembly, the overall assembly info (as seen with ILSpy) ends up\nlooking like this:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'[assembly: CompilationRelaxations(8)]\n[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\n[assembly: Debuggable(/*Could not decode attribute arguments.*/)]\n[assembly: TargetFramework(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]\n[assembly: AssemblyCompany("Larcanum.GitInfo.UnitTests")]\n[assembly: AssemblyConfiguration("Debug")]\n[assembly: AssemblyProduct("Larcanum.GitInfo.UnitTests")]\n[assembly: AssemblyTitle("Larcanum.GitInfo.UnitTests")]\n[assembly: AssemblyMetadata("Microsoft.Testing.Platform.Application", "True")]\n// Only the 3 attributes below this line are touched by GitInfo\n[assembly: AssemblyFileVersion("0.7.0.1")]\n[assembly: AssemblyInformationalVersion("v0.7.0-1-gef72f47")]\n[assembly: AssemblyVersion("0.7.0.1")]\n'})}),(0,s.jsx)(t.h2,{id:"build-property-version",children:"Build Property $(Version)"}),(0,s.jsxs)(t.p,{children:["Finally, there is the MSBuild ",(0,s.jsx)(t.code,{children:"$(Version)"})," property that is used in several parts of the build process, including the\nparts of the build that creates a NuGet package with ",(0,s.jsx)(t.code,{children:"dotnet pack"}),". When and how exactly that property is used is not\ndocumented very well and neither are the assumptions about its format, but from practical experience the only limitation\nseems to be that it cannot have a ",(0,s.jsx)(t.em,{children:"prefix"}),' like "v".']}),(0,s.jsxs)(t.p,{children:["If the ",(0,s.jsx)(t.code,{children:"GitInfoUpdateVersionProp"})," is set to true, which is the default, then the ",(0,s.jsx)(t.code,{children:"GitInfoVersion"})," target which runs\nbefore the ",(0,s.jsx)(t.code,{children:"BeforeBuild"})," target tries to update the version property according to the following rules:"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If the ",(0,s.jsx)(t.code,{children:"Version"})," has already been set to a value ",(0,s.jsx)(t.em,{children:"other than"}),' "1.0.0" by a previous step of the build process, like if the version is specified as a command line argument, then it is left as it is.']}),"\n",(0,s.jsxs)(t.li,{children:["If a call to ",(0,s.jsx)(t.code,{children:"git describe"})," returns something that matches the expected SemVer expression, then ",(0,s.jsx)(t.code,{children:"Version"}),' will be set to that string, excluding a "v" prefix if present.']}),"\n"]}),(0,s.jsx)(t.h1,{id:"configuration",children:"Configuration"}),(0,s.jsx)(t.p,{children:"All the configuration happens through MSBuild properties that can be added to the project file"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<GitInfoGlobalNamespace>true</GitInfoGlobalNamespace>"}),"\nDefaults to ",(0,s.jsx)(t.code,{children:"false"}),". When set to ",(0,s.jsx)(t.code,{children:"false"}),", the generated ",(0,s.jsx)(t.code,{children:"GitInfo"})," class will be added to the namespace defined in ",(0,s.jsx)(t.code,{children:"GitInfoNamespace"}),", but when set to ",(0,s.jsx)(t.code,{children:"true"})," it will be added to the ",(0,s.jsx)(t.em,{children:"global"})," namespace instead."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<GitInfoNamespace>My.Custom.Ns</GitInfoNamespace>"}),"\nDefaults to ",(0,s.jsx)(t.code,{children:"$(RootNamespace)"}),". Defines the namespace declaration for the generated class. If set to the empty string, this has the same effect as setting ",(0,s.jsx)(t.code,{children:"GitInfoGlobalNamespace"})," to true."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<GitInfoGitBin>/usr/bin/git</GitInfoGitBin>"}),"\nDefaults to ",(0,s.jsx)(t.code,{children:"git"}),". This is the path to the ",(0,s.jsx)(t.code,{children:"git"})," binary that will be used to gather the ",(0,s.jsx)(t.code,{children:"GitInfo"})," details."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<GitInfoUpdateVersionProp>false</GitInfoUpdateVersionProp>"}),"\nDefaults to ",(0,s.jsx)(t.code,{children:"true"}),". This value determines if the GitInfo targets are going to try to set the ",(0,s.jsx)(t.code,{children:"$(Version)"})," property based on the git tag description. When set to ",(0,s.jsx)(t.code,{children:"false"}),", the Version property will be left as is."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<GitInfoGenerateAssemblyVersion>false</GitInfoGenerateAssemblyVersion>"}),"\nDefaults to ",(0,s.jsx)(t.code,{children:"true"}),". When enabled, this will include the 3 versioning attributes ",(0,s.jsx)(t.code,{children:"AssemblyVersion"}),", ",(0,s.jsx)(t.code,{children:"AssemblyFileVersion"})," and ",(0,s.jsx)(t.code,{children:"AssemblyInformationalVersion"}),' in the generated "GitInfo.g.cs" file and disable the default "GenerateAssembly...Attribute" flags.']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<GitInfoDebug>true</GitInfoDebug>"}),"\nDefaults to ",(0,s.jsx)(t.code,{children:"false"}),". Enables the generation of a dedicated ",(0,s.jsx)(t.code,{children:"GitInfo.Debug"})," property when set to ",(0,s.jsx)(t.code,{children:"true"})," which contains all the context that the generator class had when generating the ",(0,s.jsx)(t.code,{children:"GitInfo"})," class. Useful for debugging and should of course not be enabled for release builds."]}),"\n"]}),(0,s.jsx)(t.h1,{id:"use-cases",children:"Use Cases"}),(0,s.jsx)(t.h2,{id:"automated-nuget-package-release-with-github-action",children:"Automated NuGet Package Release with GitHub Action"}),(0,s.jsxs)(t.p,{children:['Let us assume that we have a .NET library project called "DemoLib" that we want to publish on NuGet. We want to automate the publication process with GitHub actions and we want to ',(0,s.jsx)(t.strong,{children:"trigger"})," the process by simply pushing a tag with the version of the new release."]}),(0,s.jsx)(t.p,{children:"In this example"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The project uses .NET 9"}),"\n",(0,s.jsx)(t.li,{children:'The project file for the library is "src/DemoLib/DemoLib.csproj"'}),"\n",(0,s.jsx)(t.li,{children:'The versioning scheme for the tags uses the "v"-prefix, but that is not mandatory and easy to change.'}),"\n"]}),(0,s.jsx)(t.p,{children:'The workflow definition is stored in the file ".github/workflows/publish.yml" and would look like this.'}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"name: NuGet Package Release\n\non:\n    push:\n        tags:\n            # Trigger this workflow on _tag push_ where the tag name matches the 'v*.*.*' pattern\n            # See https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#running-your-workflow-only-when-a-push-of-specific-tags-occurs\n            - 'v*.*.*'\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n\n        steps:\n            # Checkout the repository\n            - name: Checkout code\n              uses: actions/checkout@v3\n\n            # Setup .NET Core SDK\n            - name: Setup .NET Core\n              uses: actions/setup-dotnet@v3\n              with:\n                  dotnet-version: 9.0.x\n\n            # Pack the project with the version that Larcanum.GitInfo extracts from git (this will match the tag)\n            - name: Pack the project\n              run: dotnet pack --configuration Release --output ./artifacts src/DemoLib/DemoLib.csproj\n\n            # Push the package to NuGet\n            - name: Push to NuGet\n              env:\n                  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}\n              run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json\n"})}),(0,s.jsxs)(t.p,{children:["The NuGet authorization is handled with a NuGet access token that is configured as the ",(0,s.jsx)(t.code,{children:"NUGET_API_KEY"})," secret under ",(0,s.jsx)(t.code,{children:"https://github.com/[user]/[repository]/settings/secrets/actions"}),"."]})]}),"\n",(0,s.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Generates GitInfo data from the current environment."})}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(t.strong,{children:"Larcanum.GitInfo"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t\n\t<ItemGroup>\n\t  <PackageReference Include="Larcanum.GitInfo" Version="1.1.0">\n\t    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t    <PrivateAssets>all</PrivateAssets>\n\t  </PackageReference>\n\t</ItemGroup>\n</Project>\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Larcanum.GitInfo\\src\\DemoGit\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"Larcanum.GitInfo"})," in ",(0,s.jsx)(t.em,{children:"Program.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nConsole.WriteLine("Hello, World!");\nConsole.WriteLine($"Version: {DemoGit.GitInfo.Branch}");\nConsole.WriteLine($"Version: {DemoGit.GitInfo.CommitDate}");\n\n'})})]})]}),"\n",(0,s.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Larcanum.GitInfo\\src\\DemoGit\\obj\\GX\\Larcanum.GitInfo\\Larcanum.GitInfo.GitInfoGenerator\\GitInfo.g.cs",label:"GitInfo.g.cs",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated />\n\n// Generator Context\n// ProjectDir: D:\\eu\\GitHub\\RSCG_Examples\\v2\\rscg_examples\\Larcanum.GitInfo\\src\\DemoGit\\\n// GitInfoNamespace: DemoGit\n// GitInfoGlobalNamespace: False\n// GitInfoGitBin: git\n// GitInfoVersionRegex: v?(?<VERSION>(?<MAJOR>\\d+)\\.(?<MINOR>\\d+)(?:\\.(?<PATCH>\\d+))?(?:[-+](?<LABEL>[\\dA-Za-z\\-\\.]+))?)$\n// GitInfoGenerateAssemblyVersion: True\n// GitInfoDebug: False\n// GitPath: C:\\Program Files\\Git\\cmd\\git.exe\n// GitVersion: git version 2.50.1.windows.1\n// GitRoot: D:/eu/GitHub/RSCG_Examples\n// GitFingerprint: vComparison-2-gce07c539f\n// Timestamp: 2025-07-24T07:40:39.4205152+03:00\n\n[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]\n[assembly: System.Reflection.AssemblyFileVersion("1.0.0.0")]\n[assembly: System.Reflection.AssemblyInformationalVersion("vComparison-2-gce07c539f")]\n\n\nnamespace DemoGit;\n\n/// <summary>Provides access to the git information for the current assembly.</summary>\ninternal partial class GitInfo\n{\n    public const bool IsDirty = false;\n\n    public const string Branch = @"main";\n\n    public const string CommitShortHash = @"ce07c539f";\n\n    public const string CommitHash = @"ce07c539f94b51011f87ded758344c97ff870aba";\n\n    public const string CommitDate = @"2025-07-21T21:49:48+03:00";\n\n    public const string Tag = @"vComparison-2-gce07c539f";\n\n    public const string DotNetVersion = @"1.0.0.0";\n}\n\n'})})})}),"\n",(0,s.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(96781).A+"",children:"Download Example project Larcanum.GitInfo "})})}),"\n",(0,s.jsx)(t.h3,{id:"share-larcanumgitinfo",children:"Share Larcanum.GitInfo"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLarcanum.GitInfo&quote=Larcanum.GitInfo",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLarcanum.GitInfo&text=Larcanum.GitInfo:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLarcanum.GitInfo",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLarcanum.GitInfo&title=Larcanum.GitInfo",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLarcanum.GitInfo&title=Larcanum.GitInfo&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLarcanum.GitInfo",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Larcanum.GitInfo",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Larcanum.GitInfo"})}),"\n",(0,s.jsx)(t.h3,{id:"in-the-same-category-enhancementproject---17-other-generators",children:"In the same category (EnhancementProject) - 17 other generators"}),"\n",(0,s.jsx)(t.h4,{id:"autoinvokegenerator",children:(0,s.jsx)(t.a,{href:"/docs/AutoInvoke.Generator",children:"AutoInvoke.Generator"})}),"\n",(0,s.jsx)(t.h4,{id:"autospectre",children:(0,s.jsx)(t.a,{href:"/docs/AutoSpectre",children:"AutoSpectre"})}),"\n",(0,s.jsx)(t.h4,{id:"buildinfo",children:(0,s.jsx)(t.a,{href:"/docs/BuildInfo",children:"BuildInfo"})}),"\n",(0,s.jsx)(t.h4,{id:"commandline",children:(0,s.jsx)(t.a,{href:"/docs/CommandLine",children:"CommandLine"})}),"\n",(0,s.jsx)(t.h4,{id:"credfetoversioninformationgenerator",children:(0,s.jsx)(t.a,{href:"/docs/Credfeto.Version.Information.Generator",children:"Credfeto.Version.Information.Generator"})}),"\n",(0,s.jsx)(t.h4,{id:"linqgengenerator",children:(0,s.jsx)(t.a,{href:"/docs/LinqGen.Generator",children:"LinqGen.Generator"})}),"\n",(0,s.jsx)(t.h4,{id:"peksprobuildinformationgenerator",children:(0,s.jsx)(t.a,{href:"/docs/Pekspro.BuildInformationGenerator",children:"Pekspro.BuildInformationGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"plantumlclassdiagramgenerator",children:(0,s.jsx)(t.a,{href:"/docs/PlantUmlClassDiagramGenerator",children:"PlantUmlClassDiagramGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_ams",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_AMS",children:"RSCG_AMS"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_exportdiagram",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_ExportDiagram",children:"RSCG_ExportDiagram"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_functionswithdi",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_FunctionsWithDI",children:"RSCG_FunctionsWithDI"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_namegenerator",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_NameGenerator",children:"RSCG_NameGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_timebombcomment",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_TimeBombComment",children:"RSCG_TimeBombComment"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_wait",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_Wait",children:"RSCG_Wait"})}),"\n",(0,s.jsx)(t.h4,{id:"thisassembly",children:(0,s.jsx)(t.a,{href:"/docs/ThisAssembly",children:"ThisAssembly"})}),"\n",(0,s.jsx)(t.h4,{id:"thisassemblyconstants",children:(0,s.jsx)(t.a,{href:"/docs/ThisAssembly.Constants",children:"ThisAssembly.Constants"})}),"\n",(0,s.jsx)(t.h4,{id:"thisassemblymetadata",children:(0,s.jsx)(t.a,{href:"/docs/ThisAssembly.Metadata",children:"ThisAssembly.Metadata"})})]})}function f(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},96781:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/files/Larcanum.GitInfo-a2daac2dfef68636550f92e4e5c48528.zip"}}]);