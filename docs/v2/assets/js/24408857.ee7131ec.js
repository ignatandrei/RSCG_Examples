"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4554],{51043:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=t(87462),i=(t(67294),t(3905)),s=t(73992),r=t(18679),o=t(68839);const l={sidebar_position:2040,title:"204 - InlineComposition",description:"Mixin classes and interfaces together",slug:"/InlineComposition"},m="InlineComposition  by Black White Yoshi",p={unversionedId:"RSCG-Examples/InlineComposition",id:"RSCG-Examples/InlineComposition",title:"204 - InlineComposition",description:"Mixin classes and interfaces together",source:"@site/docs/RSCG-Examples/InlineComposition.md",sourceDirName:"RSCG-Examples",slug:"/InlineComposition",permalink:"/RSCG_Examples/v2/docs/InlineComposition",draft:!1,tags:[],version:"current",sidebarPosition:2040,frontMatter:{sidebar_position:2040,title:"204 - InlineComposition",description:"Mixin classes and interfaces together",slug:"/InlineComposition"},sidebar:"tutorialSidebar",previous:{title:"203 - Tortuga.Shipwright",permalink:"/RSCG_Examples/v2/docs/Tortuga.Shipwright"},next:{title:"205 - Flaggen",permalink:"/RSCG_Examples/v2/docs/Flaggen"}},c={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share InlineComposition",id:"share-inlinecomposition",level:3},{value:"In the same category (Templating) - 13 other generators",id:"in-the-same-category-templating---13-other-generators",level:3},{value:"Gobie",id:"gobie",level:4},{value:"InterceptorTemplate",id:"interceptortemplate",level:4},{value:"JKToolKit.TemplatePropertyGenerator",id:"jktoolkittemplatepropertygenerator",level:4},{value:"Microsoft.NET.Sdk.Razor.SourceGenerators",id:"microsoftnetsdkrazorsourcegenerators",level:4},{value:"Minerals.AutoMixins",id:"mineralsautomixins",level:4},{value:"MorrisMoxy",id:"morrismoxy",level:4},{value:"NTypewriter",id:"ntypewriter",level:4},{value:"RazorBlade",id:"razorblade",level:4},{value:"RazorSlices",id:"razorslices",level:4},{value:"RSCG_IFormattable",id:"rscg_iformattable",level:4},{value:"RSCG_Templating",id:"rscg_templating",level:4},{value:"spreadcheetah",id:"spreadcheetah",level:4},{value:"Tortuga.Shipwright",id:"tortugashipwright",level:4}],d={toc:u},h="wrapper";function b(e){let{components:n,...l}=e;return(0,i.kt)(h,(0,a.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inlinecomposition--by-black-white-yoshi"},"InlineComposition  by Black White Yoshi"),(0,i.kt)(o.Z,{toc:u,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/InlineComposition/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/InlineComposition?label=InlineComposition",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/BlackWhiteYoshi/InlineComposition"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/BlackWhiteYoshi/InlineComposition?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/BlackWhiteYoshi/InlineComposition?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"InlineComposition")),(0,i.kt)("p",{parentName:"admonition"},"A source generator that merges the content of other classes into one class."),(0,i.kt)("p",{parentName:"admonition"},"Author: Black White Yoshi"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/InlineComposition/"},"https://www.nuget.org/packages/InlineComposition/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/BlackWhiteYoshi/InlineComposition"},"https://github.com/BlackWhiteYoshi/InlineComposition")),(0,i.kt)("p",{parentName:"admonition"},"Source: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/BlackWhiteYoshi/InlineComposition"},"https://github.com/BlackWhiteYoshi/InlineComposition"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h1",{parentName:"admonition",id:"inlinecomposition"},"InlineComposition"),(0,i.kt)("p",{parentName:"admonition"},"A source generator that merges the content of other classes into one class.\nA simple workaround for struct inheritance or multiple inheritance."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{parentName:"p",src:"https://github.com/BlackWhiteYoshi/InlineComposition/README_IMAGE.png",alt:"InlineComposition Example"})),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Inlined get members of type field, property, event and method (including constructor and finalizer)."),(0,i.kt)("li",{parentName:"ul"},"Attributes and summaries of the inlined members get also inlined."),(0,i.kt)("li",{parentName:"ul"},"Inheritance and implements declaration are also inlined."),(0,i.kt)("li",{parentName:"ul"},"Mixing classes and structs works fine (inline struct in class and vice versa).")),(0,i.kt)("br",null),"## Type Hierarchy / Polymorphism",(0,i.kt)("p",{parentName:"admonition"},"Inheritance gives not only all the content of a base class, you get also a type hierarchy and polymorphism.\nIf you need a type hierarchy or polymorphism, you can use interfaces to get the same functionality."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\npublic interface IBaseA { ... }\n\npublic interface IBaseB { ... }\n\n[InlineBase]\npublic class BaseA : IBaseA { ... }\n\n[InlineBase]\npublic class BaseB : IBaseB { ... }\n\n[Inline<BaseA, BaseB>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\nDerived derived = new();\nConsole.WriteLine(derived is BaseA);  // False\nConsole.WriteLine(derived is BaseB);  // False\nConsole.WriteLine(derived is IBaseA); // True\nConsole.WriteLine(derived is IBaseB); // True\n\n// polymorphism IBaseA\nExampleA(derived);\n\n// polymorphism IBaseB\nExampleB(derived);\n\n\nstatic void ExampleA(IBaseA baseA) { ... }\n\nstatic void ExampleB(IBaseB baseB) { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IBaseA, IBaseB { ... }\n")),(0,i.kt)("br",null),"## Conflicts",(0,i.kt)("p",{parentName:"admonition"},"Members with the same identifier get merged to a single Member.\nMake sure merged members have the same signature.\nMethod-bodies are merged together that every method is executed one after another.",(0,i.kt)("br",{parentName:"p"}),"\n","Merging of nested types is not supported.\nIf a conflict of nested types happens, the first one is taken and the others are ignored."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\n[InlineBase]\npublic class BaseA\n{\n    public int MyProperty { get; set; }\n\n    public void MyMethod()\n    {\n        int a = 5;\n        Console.WriteLine(a);\n    }\n}\n\n[InlineBase]\npublic class BaseB\n{\n    public int MyProperty { get; set; }\n\n    public void MyMethod()\n    {\n        int a = 5;\n        Console.WriteLine(a + a);\n    }\n}\n\n[Inline<BaseA, BaseB>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public int MyProperty { get; set; }\n\n    public void MyMethod()\n    {\n        {\n        int a = 5;\n        Console.WriteLine(a);\n        }\n\n        {\n        int a = 5;\n        Console.WriteLine(a + a);\n        }\n    }\n}\n")),(0,i.kt)("br",null),"## Generic classes",(0,i.kt)("p",{parentName:"admonition"},"Inlining of generic classes is supported.\nHowever, inserting the concrete type in place of the type parameter is done by simple text replacement.\nThere might be situations where things get replaced/not replaced where it should/should not.\nSo when inlining generic classes, better double check the result."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base<T>\n{\n    public T MyProperty { get; set; }\n}\n\n[Inline<Base<int>>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public int MyProperty { get; set; }\n}\n")),(0,i.kt)("br",null),"## Attributes",(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"inlineattribute"},"InlineAttribute"))),(0,i.kt)("p",{parentName:"admonition"},"Generates a class with the same name and fills it with the content of the classes/structs in the type arguments.",(0,i.kt)("br",{parentName:"p"}),"\n","If you inline a class/struct that has no ",(0,i.kt)("em",{parentName:"p"},"InlineBaseAttribute"),", it will be ignored."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using InlineCompositionAttributes;\n\n[Inline<Example>] // "Example" must have a InlineBaseAttribute, otherwise it has no effect.\npublic partial class MyClass { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class MyClass { ... }\n')),(0,i.kt)("p",{parentName:"admonition"},"This class comes with up to 12 type parameters.\nIf you need more, you can easily create your own suitable one."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace InlineCompositionAttributes;\n\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\ninternal sealed class InlineAttribute<T1, ..., TN> : Attribute { }\n")),(0,i.kt)("br",null),"- ### InlineBaseAttribute",(0,i.kt)("p",{parentName:"admonition"},"In order ",(0,i.kt)("em",{parentName:"p"},"Inline")," works as expected, the classes/structs to inline must be decorated with ",(0,i.kt)("em",{parentName:"p"},"InlineBase"),"."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\n[InlineBase] // Itself it does nothing, but this class can now be used as type argument in InlineAttribute.\npublic class MyClass { ... }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"mapbasetype"},"MapBaseType"),(0,i.kt)("p",{parentName:"admonition"},"If this flag is set to true, all occurrences of the type of the inlineBase class/struct get replaced with the type of the inlining class/struct."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\n[InlineBase(MapBaseType = true)]\npublic class Example\n{\n    public Example Self => this;\n}\n\n[Inline<Example>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public Derived Self => this;\n}\n")),(0,i.kt)("h4",{parentName:"admonition",id:"ignoreinheritenceandimplements"},"IgnoreInheritenceAndImplements"),(0,i.kt)("p",{parentName:"admonition"},"If this flag is set to true, the base classes and interfaces of the inlined class are ignored.",(0,i.kt)("br",{parentName:"p"}),"\n","If you want inline classes that inherit from different base classes, you can use this to avoid to inherit multiple classes."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\npublic abstract class BaseA { ... }\n\npublic abstract class BaseB { ... }\n\n[InlineBase(IgnoreInheritenceAndImplements = true)]\npublic class InlineA : BaseA { ... }\n\n[InlineBase]\npublic class InlineB : BaseB { ... }\n\n[Inline<InlineA, InlineB>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : BaseB { ... }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"inlineattributes"},"InlineAttributes"),(0,i.kt)("p",{parentName:"admonition"},"If this flag is set to true, attributes applied to this class/struct are inlined as well.",(0,i.kt)("br",{parentName:"p"}),"\n","The attribute ","[InlineBase]"," itself is ignored."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\n[SomeAttribute]\n[InlineBase(InlineAttributes = true)]\npublic class Example { ... }\n\n[Inline<Example>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\n[SomeAttribute]\npublic partial class Derived { ... }\n")),(0,i.kt)("br",null),"- ### InlineMethodAttribute",(0,i.kt)("p",{parentName:"admonition"},"Overriding a normal method and adding your own code is native not possible.\nThe ",(0,i.kt)("em",{parentName:"p"},"InlineMethodAttribute")," gives support for adding code to the inlined method.\nThe content of the decorated method is added to the inlined method specified in the ",(0,i.kt)("em",{parentName:"p"},"MethodName")," parameter and takes the same parameters."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "Dispose")]\n    public void DisposePartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IDisposable\n{\n    [InlineMethod(MethodName = "Dispose")]\n    public void Dispose()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n')),(0,i.kt)("h4",{parentName:"admonition",id:"methodname"},"MethodName"),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("em",{parentName:"p"},"MethodName")," is a required parameter that specify the name of the method to add content to.\nMake sure the parameters are the same to target the right (overloaded) method."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base\n{\n    public void PrintSum(int a, int b)\n    {\n        Console.WriteLine(a + b);\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "PrintSum(int, int)")]\n    public void PrintSumPartial(int a, int b)\n    {\n        Console.WriteLine(b + a);\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "PrintSum(int, int)")]\n    public void PrintSum()\n    {\n        {\n        Console.WriteLine(a + b);\n        }\n        {\n        Console.WriteLine(b + a);\n        }\n    }\n}\n')),(0,i.kt)("h4",{parentName:"admonition",id:"modifiers"},"Modifiers"),(0,i.kt)("p",{parentName:"admonition"},"When inlining your method-body in a method, the summary, attributes and modifiers are overwritten with your method.\nIf you want different modifiers inlined than your method, you can use the ",(0,i.kt)("em",{parentName:"p"},"Modifiers")," parameter.\nA common scenario is that your method should not be available (private), but the inlined method should still be public."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "Dispose", Modifiers = "public")]\n    private void DisposePartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IDisposable\n{\n    [InlineMethod(MethodName = "Dispose", Modifiers = "public")]\n    public void Dispose()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n')),(0,i.kt)("h4",{parentName:"admonition",id:"first"},"First"),(0,i.kt)("p",{parentName:"admonition"},"When the added code must run before the inlined code, you can set the ",(0,i.kt)("em",{parentName:"p"},"First")," parameter to true."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "Dispose", First = true)]\n    public void DisposePartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IDisposable\n{\n    [InlineMethod(MethodName = "Dispose")]\n    public void Dispose()\n    {\n        {\n        Console.WriteLine("derived");\n        }\n        {\n        Console.WriteLine("base");\n        }\n    }\n}\n')),(0,i.kt)("br",null),"- ### InlineConstructorAttribute",(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("em",{parentName:"p"},"InlineConstructorAttribute")," lets you add code to the inlined constructor.\nThe content of the decorated method is added to the inlined constructor."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base\n{\n    public Base()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineConstructor]\n    public void ConstructorPartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    [InlineConstructor]\n    public Derived()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n')),(0,i.kt)("h4",{parentName:"admonition",id:"modifiers-1"},"Modifiers"),(0,i.kt)("p",{parentName:"admonition"},"The same functionality as ",(0,i.kt)("em",{parentName:"p"},"InlineMethodAttribute.Modifiers")),(0,i.kt)("h4",{parentName:"admonition",id:"first-1"},"First"),(0,i.kt)("p",{parentName:"admonition"},"The same functionality as ",(0,i.kt)("em",{parentName:"p"},"InlineMethodAttribute.First")),(0,i.kt)("br",null),"- ### InlineFinalizerAttribute",(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("em",{parentName:"p"},"InlineFinalizerAttribute")," lets you add code to the inlined finalizer.\nThe content of the decorated method is added to the inlined finalizer."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[InlineBase]\npublic class Base\n{\n    ~Base()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineFinalizer]\n    public void FinalizerPartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    [InlineFinalizer]\n    ~Derived()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n')),(0,i.kt)("h4",{parentName:"admonition",id:"first-2"},"First"),(0,i.kt)("p",{parentName:"admonition"},"The same functionality as ",(0,i.kt)("em",{parentName:"p"},"InlineMethodAttribute.First")),(0,i.kt)("br",null),"- ### NoInlineAttribute",(0,i.kt)("p",{parentName:"admonition"},"Members decorated with this attribute are ignored."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using InlineCompositionAttributes;\n\n[InlineBase]\npublic class MyBase\n{\n    [NoInline]\n    private int myField;\n\n    public int MyProperty { get; set; }\n}\n\n[Inline<MyBase>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public int MyProperty { get; set; }\n}\n")),(0,i.kt)("br",null),"## Disable Attribute Generation",(0,i.kt)("p",{parentName:"admonition"},"You can disable the generation of the attributes by defining a constant for your compilation:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"  <PropertyGroup>\n    <DefineConstants>INLINECOMPOSITION_EXCLUDE_ATTRIBUTES</DefineConstants>\n  </PropertyGroup>\n")),(0,i.kt)("p",{parentName:"admonition"},"This functionality is specific for the use case when you have a project referencing another project, both projects using this generator and you have ",(0,i.kt)("i",null,"InternalsVisibleTo")," enabled.\nIn that case you have the attributes defined twice in your referencing project and you get a warning about that.\nBy defining this constant in your referencing project, you prevent one generation, so the attributes are only defined once in the referenced project.")),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Mixin classes and interfaces together")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"InlineComposition")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {20}",showLineNumbers:!0,"{20}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\n    \n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n\n    \n    <ItemGroup>\n      <PackageReference Include="InlineComposition" Version="1.4.0">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>\n    </ItemGroup>\n\n    \n</Project>\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"InlineComposition")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing MixinConsoleDemo;\n\nConsole.WriteLine("Hello, World!");\nEmployee p = new Employee();\np.Name="Andrei Ignat";\np.Age = 55;\np.Salary = 1000;\np.Id = 1;\nConsole.WriteLine($"Name: {p.Name}, Age: {p.Age}, Salary: {p.Salary}");\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"InlineComposition")," in ",(0,i.kt)("em",{parentName:"p"},"Person.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n[InlineBase]\ninternal class Person\n{\n    \n    public string Name { get; set; } = string.Empty;\n        public int Age { get; set; }\n    \n}\n\n"))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\Employee.cs",label:"Employee.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"InlineComposition")," in ",(0,i.kt)("em",{parentName:"p"},"Employee.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n[Inline<Person,IId>]\ninternal partial class Employee\n{\n    public decimal Salary { get; set; }\n}\n\n"))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\IId.cs",label:"IId.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"InlineComposition")," in ",(0,i.kt)("em",{parentName:"p"},"IId.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n[InlineBase]\ninternal class IId\n{\n    public int Id { get; set; }\n}\n\n")))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineAttribute.g.cs",label:"InlineAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T10">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T10">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T11">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T10">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T11">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T12">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : Attribute { }\n\n#endif\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineBaseAttribute.g.cs",label:"InlineBaseAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// <para>Marks this class/struct as inlineable, so it can be listed in a <see cref="InlineAttribute{T1}"/> Attribute.</para>\n/// </summary>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineBaseAttribute : Attribute {\n    /// <summary>\n    /// <para>If set all occurrences of the type of the inlineBase class/struct get replaced with the type of the inlining class/struct.</para>\n    /// <para>e.g. if "Example" inlines "Test" with this option enabled, all occurrences of type "Test" inside class/struct "Test" will be mapped to "Example".</para>\n    /// </summary>\n    public bool MapBaseType { get; init; }\n\n    /// <summary>\n    /// If set the generator ignores the inherited class and implemented interfaces of this type.\n    /// </summary>\n    public bool IgnoreInheritenceAndImplements { get; init; }\n\n    /// <summary>\n    /// If set attributes of this class/struct are inlined as well.<br />\n    /// The attribute [InlineBase] itself is ignored.\n    /// </summary>\n    public bool InlineAttributes { get; init; }\n}\n\n#endif\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineConstructorAttribute.g.cs",label:"InlineConstructorAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// The Method under this attribute will be inlined in the constructor.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.Constructor)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineConstructorAttribute : Attribute {\n    /// <summary>\n    /// <para>Modifiers e.g. "public", "protected", "private"</para>\n    /// <para>If null, the method modifiers will be taken.</para>\n    /// </summary>\n    public string? Modifiers { get; init; }\n\n    /// <summary>\n    /// Indicates whether this method gets inlined before the other constructors or after.\n    /// </summary>\n    public bool First { get; init; }\n}\n\n#endif\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineFinalizerAttribute.g.cs",label:"InlineFinalizerAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// The Method under this attribute will be inlined in the finalizer.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineFinalizerAttribute : Attribute {\n    /// <summary>\n    /// Indicates whether this method gets inlined before the other finalizers or after.\n    /// </summary>\n    public bool First { get; init; }\n}\n\n#endif\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineMethodAttribute.g.cs",label:"InlineMethodAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// The Method under this attribute will be inlined in the method given by <see cref="MethodName"/>.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineMethodAttribute : Attribute {\n    /// <summary>\n    /// The method name as string literal.\n    /// </summary>\n    public required string MethodName { get; init; }\n\n    /// <summary>\n    /// <para>Modifiers e.g. "public static extern", "protected abstract"</para>\n    /// <para>If null, the method modifiers will be taken.</para>\n    /// </summary>\n    public string? Modifiers { get; init; }\n\n    /// <summary>\n    /// Indicates whether this method gets inlined before the other methods or after.\n    /// </summary>\n    public bool First { get; init; }\n}\n\n#endif\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\MixinConsoleDemo.Employee.g.cs",label:"MixinConsoleDemo.Employee.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n\ninternal partial class Employee {\n    \n    public string Name { get; set; } = string.Empty;\n\n        public int Age { get; set; }\n\n    public int Id { get; set; }\n\n}\n\n"))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\NoInlineAttribute.g.cs",label:"NoInlineAttribute.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// <para>Only usefule in a class/struct with a <see cref="InlineBaseAttribute"/>.</para>\n/// <para>Skips/Ignores this member.</para>\n/// </summary>\n[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Event | AttributeTargets.Method)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class NoInlineAttribute : Attribute { }\n\n#endif\n\n')))),(0,i.kt)("h2",{id:"useful"},"Useful"),(0,i.kt)("h3",{id:"download-example-net--c"},"Download Example (.NET  C#)"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:t(77974).Z},"Download Example project InlineComposition "))),(0,i.kt)("h3",{id:"share-inlinecomposition"},"Share InlineComposition"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&quote=InlineComposition",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&text=InlineComposition:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&title=InlineComposition",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&title=InlineComposition&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/InlineComposition"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/InlineComposition")),(0,i.kt)("h3",{id:"in-the-same-category-templating---13-other-generators"},"In the same category (Templating) - 13 other generators"),(0,i.kt)("h4",{id:"gobie"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Gobie"},"Gobie")),(0,i.kt)("h4",{id:"interceptortemplate"},(0,i.kt)("a",{parentName:"h4",href:"/docs/InterceptorTemplate"},"InterceptorTemplate")),(0,i.kt)("h4",{id:"jktoolkittemplatepropertygenerator"},(0,i.kt)("a",{parentName:"h4",href:"/docs/JKToolKit.TemplatePropertyGenerator"},"JKToolKit.TemplatePropertyGenerator")),(0,i.kt)("h4",{id:"microsoftnetsdkrazorsourcegenerators"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Microsoft.NET.Sdk.Razor.SourceGenerators"},"Microsoft.NET.Sdk.Razor.SourceGenerators")),(0,i.kt)("h4",{id:"mineralsautomixins"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Minerals.AutoMixins"},"Minerals.AutoMixins")),(0,i.kt)("h4",{id:"morrismoxy"},(0,i.kt)("a",{parentName:"h4",href:"/docs/MorrisMoxy"},"MorrisMoxy")),(0,i.kt)("h4",{id:"ntypewriter"},(0,i.kt)("a",{parentName:"h4",href:"/docs/NTypewriter"},"NTypewriter")),(0,i.kt)("h4",{id:"razorblade"},(0,i.kt)("a",{parentName:"h4",href:"/docs/RazorBlade"},"RazorBlade")),(0,i.kt)("h4",{id:"razorslices"},(0,i.kt)("a",{parentName:"h4",href:"/docs/RazorSlices"},"RazorSlices")),(0,i.kt)("h4",{id:"rscg_iformattable"},(0,i.kt)("a",{parentName:"h4",href:"/docs/RSCG_IFormattable"},"RSCG_IFormattable")),(0,i.kt)("h4",{id:"rscg_templating"},(0,i.kt)("a",{parentName:"h4",href:"/docs/RSCG_Templating"},"RSCG_Templating")),(0,i.kt)("h4",{id:"spreadcheetah"},(0,i.kt)("a",{parentName:"h4",href:"/docs/spreadcheetah"},"spreadcheetah")),(0,i.kt)("h4",{id:"tortugashipwright"},(0,i.kt)("a",{parentName:"h4",href:"/docs/Tortuga.Shipwright"},"Tortuga.Shipwright")))}b.isMDXComponent=!0},77974:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/InlineComposition-ed857b88d04c5e047fb3217b878ce808.zip"}}]);