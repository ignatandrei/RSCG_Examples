"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6278],{78799:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>p,metadata:()=>u,toc:()=>c});var t=a(87462),i=(a(67294),a(3905)),o=a(73992),r=a(18679),m=a(68839);const p={sidebar_position:1900,title:"190 - PMart.Enumeration",description:"Constants as enumeration. With EFCore, Swagger and other implementations.",slug:"/PMart.Enumeration"},s="PMart.Enumeration  by Martinho",u={unversionedId:"RSCG-Examples/PMart.Enumeration",id:"RSCG-Examples/PMart.Enumeration",title:"190 - PMart.Enumeration",description:"Constants as enumeration. With EFCore, Swagger and other implementations.",source:"@site/docs/RSCG-Examples/PMart.Enumeration.md",sourceDirName:"RSCG-Examples",slug:"/PMart.Enumeration",permalink:"/RSCG_Examples/v2/docs/PMart.Enumeration",draft:!1,tags:[],version:"current",sidebarPosition:1900,frontMatter:{sidebar_position:1900,title:"190 - PMart.Enumeration",description:"Constants as enumeration. With EFCore, Swagger and other implementations.",slug:"/PMart.Enumeration"},sidebar:"tutorialSidebar",previous:{title:"189 - MemberAccessor",permalink:"/RSCG_Examples/v2/docs/MemberAccessor"},next:{title:"191 - rscg_demeter",permalink:"/RSCG_Examples/v2/docs/rscg_demeter"}},l={},c=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share PMart.Enumeration",id:"share-pmartenumeration",level:3},{value:"In the same category (Enum) - 5 other generators",id:"in-the-same-category-enum---5-other-generators",level:3},{value:"CredFetoEnum",id:"credfetoenum",level:4},{value:"EnumClass",id:"enumclass",level:4},{value:"EnumUtilities",id:"enumutilities",level:4},{value:"FusionReactor",id:"fusionreactor",level:4},{value:"NetEscapades.EnumGenerators",id:"netescapadesenumgenerators",level:4}],d={toc:c},h="wrapper";function g(e){let{components:n,...p}=e;return(0,i.kt)(h,(0,t.Z)({},d,p,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pmartenumeration--by-martinho"},"PMart.Enumeration  by Martinho"),(0,i.kt)(m.Z,{toc:c,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.Generator/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/PMart.Enumeration.Generator?label=PMart.Enumeration.Generator",alt:"Nuget"})),(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/PMart.Enumeration?label=PMart.Enumeration",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/p-martinho/Enumeration?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/p-martinho/Enumeration?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"PMart.Enumeration")),(0,i.kt)("p",{parentName:"admonition"},"Source code generator to easly create Enumeration classes."),(0,i.kt)("p",{parentName:"admonition"},"Author: Martinho"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/PMart.Enumeration.Generator/"},"https://www.nuget.org/packages/PMart.Enumeration.Generator/")),"   "),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/PMart.Enumeration/"},"https://www.nuget.org/packages/PMart.Enumeration/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration"},"https://github.com/p-martinho/Enumeration")),(0,i.kt)("p",{parentName:"admonition"},"Source : ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration"},"https://github.com/p-martinho/Enumeration"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.svg",alt:"NuGet"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/PMart.Enumeration.svg",alt:"NuGet"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://dev.azure.com/p-martinho/Enumeration/_build/latest?definitionId=1"},(0,i.kt)("img",{parentName:"a",src:"https://dev.azure.com/p-martinho/Enumeration/_apis/build/status/Enumeration-CI-CD",alt:"Build status"}))),(0,i.kt)("h1",{parentName:"admonition",id:"pmartenumeration"},"PMart.Enumeration"),(0,i.kt)("p",{parentName:"admonition"},"This set of libraries provides base classes to implement ",(0,i.kt)("strong",{parentName:"p"},"Enumeration classes"),", based on ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," values.\nIt enables the strongly typed advantages, while using ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," enumerations."),(0,i.kt)("p",{parentName:"admonition"},"It has, also, the possibility to create new enumerations at runtime (let's call it ",(0,i.kt)("a",{parentName:"p",href:"#dynamic-enumerations"},"Dynamic Enumerations"),")."),(0,i.kt)("h2",{parentName:"admonition",id:"what-are-enumeration-classes"},"What are Enumeration Classes?"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types"},"Enumeration classes")," are alternatives to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum"},"enum type in C#"),".\nThey enable features of an object-oriented language without the limitations of the ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," type."),(0,i.kt)("p",{parentName:"admonition"},"They are useful, for instance, for business related enumerations on Domain-Driven Design (DDD)."),(0,i.kt)("p",{parentName:"admonition"},"For more information about enumeration classes, check the links on the section ",(0,i.kt)("a",{parentName:"p",href:"#references"},"References"),"."),(0,i.kt)("h2",{parentName:"admonition",id:"nuget-packages"},"NuGet Packages"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#usage"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration")),": The Enumeration base classes.\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.svg",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#efcore-support"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration.EFCore")),": The ",(0,i.kt)("strong",{parentName:"p"},"Entity Framework Core")," support for ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration"),".\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.EFCore"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.EFCore.svg",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#newtonsoft-jsonnet-support"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration.JsonNet")),": The ",(0,i.kt)("strong",{parentName:"p"},"Newtonsoft Json.NET")," support for ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration"),".\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.JsonNet"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.JsonNet.svg",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#systemtextjson-support"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration.SystemTextJson")),": The ",(0,i.kt)("strong",{parentName:"p"},"System.Text.Json")," support for ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration"),".\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.SystemTextJson"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.SystemTextJson.svg",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#swagger-support"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration.SwaggerGen")),": Support to generate ",(0,i.kt)("strong",{parentName:"p"},"Swagger")," documentation when using ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration"),".\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.SwaggerGen"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.SwaggerGen.svg",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#mapping"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration.Mappers")),": Mappers and mapping extensions for Enumerations (includes mapper for ",(0,i.kt)("strong",{parentName:"p"},"Mapperly"),").\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.Mappers"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.Mappers.svg",alt:"NuGet"}))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#enumeration-generator"},(0,i.kt)("strong",{parentName:"a"},"PMart.Enumeration.Generator")),": A source generator to generate Enumeration classes from a few lines of code.\n",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PMart.Enumeration.Generator"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/PMart.Enumeration.Generator.svg",alt:"NuGet"}))),(0,i.kt)("h1",{parentName:"admonition",id:"installation"},"Installation"),(0,i.kt)("p",{parentName:"admonition"},"Install one or more of the available NuGet packages in your project."),(0,i.kt)("p",{parentName:"admonition"},"Use your IDE or the command:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package <package name>\n")),(0,i.kt)("h1",{parentName:"admonition",id:"usage"},"Usage"),(0,i.kt)("p",{parentName:"admonition"},"An ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," is a class that holds a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),". Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," class should have declared one or more static instances to set the available enumeration members."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Create a new enumeration class by extending ",(0,i.kt)("inlineCode",{parentName:"li"},"Enumeration<T>"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"T")," is the class itself."),(0,i.kt)("li",{parentName:"ul"},"Add a private constructor, as in the bellow example."),(0,i.kt)("li",{parentName:"ul"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"public static readonly")," instance of the class for each enumeration member.")),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"Or you can use the ",(0,i.kt)("a",{parentName:"p",href:"#enumeration-generator"},"Generator")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Generator")," package to generate the code for you!")),(0,i.kt)("p",{parentName:"admonition"},"Here is a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Sample/Enumerations/CommunicationType.cs"},"sample")," for communication types:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'using PMart.Enumeration;\n\nnamespace Enumeration.Sample.Enumerations;\n\n/// <summary>\n/// The communication type enumeration.\n/// </summary>\npublic class CommunicationType : Enumeration<CommunicationType>\n{\n    public static readonly CommunicationType Email = new("Email");\n\n    public static readonly CommunicationType Sms = new("SMS");\n    \n    public static readonly CommunicationType PushNotification = new("PushNotification");\n\n    private CommunicationType(string value) : base(value)\n    {\n    }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Now, you can use it as an enumeration class, type safe, with all its advantages and ",(0,i.kt)("a",{parentName:"p",href:"#features"},"features"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public bool IsToSendEmail(CommunicationType communicationType)\n{\n    return communicationType == CommunicationType.Email;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"You can check some usage examples in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Sample/Samples"},"samples"),"."),(0,i.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,i.kt)("p",{parentName:"admonition"},"The Enumeration classes enables the several features described bellow.\nFor instance, you can add ",(0,i.kt)("a",{parentName:"p",href:"#enumeration-with-behavior"},"behavior"),", and/or you can use ",(0,i.kt)("a",{parentName:"p",href:"#dynamic-enumerations"},"dynamic enumerations")," (created in runtime), etc."),(0,i.kt)("h3",{parentName:"admonition",id:"value"},"Value"),(0,i.kt)("p",{parentName:"admonition"},"It is the ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," value that the enumeration class holds:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'CommunicationType.Email.Value; // returns "Email"\n')),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ToString()")," method also returns the value:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'CommunicationType.Email.ToString(); // returns "Email"\n')),(0,i.kt)("h3",{parentName:"admonition",id:"getmembers"},"GetMembers"),(0,i.kt)("p",{parentName:"admonition"},"Get all the enumerations from an enumeration class:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"var allCommunicationTypes = CommunicationType.GetMembers(); // returns an IEnumerable<CommunicationType> with CommunicationType.Email, CommunicationType.Sms and CommunicationType.PushNotification\nvar communicationTypesCount = CommunicationType.GetMembers().Count(); // returns 3\n")),(0,i.kt)("p",{parentName:"admonition"},"The list of possible enumerations is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Lazy")," object behind the scene, and it is evaluated only if needed."),(0,i.kt)("h3",{parentName:"admonition",id:"getvalues"},"GetValues"),(0,i.kt)("p",{parentName:"admonition"},"Get all the possible values of an enumeration class:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var allCommunicationTypeValues = CommunicationType.GetValues(); // returns an IEnumerable<string> with "Email", "SMS" and "PushNotification"\nvar communicationTypeValuesCount = CommunicationType.GetValues().Count(); // returns 3\n')),(0,i.kt)("h3",{parentName:"admonition",id:"hasvalue"},"HasValue"),(0,i.kt)("p",{parentName:"admonition"},"Find out if there is any enumeration member with a specific value (",(0,i.kt)("strong",{parentName:"p"},"ignoring letters case"),"):"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var hasValue = CommunicationType.HasValue("someUnknownValue"); // false\nhasValue = CommunicationType.HasValue("Email"); // true\nhasValue = CommunicationType.HasValue("EMAIL"); // true\n')),(0,i.kt)("h3",{parentName:"admonition",id:"getfromvalueordefault"},"GetFromValueOrDefault"),(0,i.kt)("p",{parentName:"admonition"},"Get an enumeration instance from a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," that matches the value of the enumeration (",(0,i.kt)("strong",{parentName:"p"},"ignoring letters case"),"), or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," when there isn't any enumeration with that value:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'// Parse the string to Enumeration:\nvar communicationType = CommunicationType.GetFromValueOrDefault("email"); // returns CommunicationType.Email\n\n// Verify if exists an enumeration with the value (GetFromValueOrDefault returns null if there isn\'t any enumeration with the value).\nvar isValid = communicationType is not null; // true\n')),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Note"),": When there's instances with equivalent values (same value ignoring case), the ",(0,i.kt)("inlineCode",{parentName:"p"},"GetValueOrDefault")," can return any of the instances (is nondeterministic). Therefore, enumeration members with equivalent values are not recommended."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'// Let\'s imagine we have these two members:\n// public static readonly CommunicationType Email = new("Email");\n// public static readonly CommunicationType EmailWithDifferentCase = new("EMAIL"); // same value, different case (this is not recommended)\n\nvar emailType = CommunicationType.GetFromValueOrDefault("Email"); // this may return CommunicationType.Email or CommunicationType.EmailWithDifferentCase (they have equivalent values)\nvar isSame = ReferenceEquals(emailType, CommunicationType.Email); // sometimes is true, sometimes is false, is nondeterministic\nvar isEqual = emailType == EmailWithDifferentCase; // always true. Even if they are different instances, they are equal. Check the Equality section bellow.\n')),(0,i.kt)("h3",{parentName:"admonition",id:"equality"},"Equality"),(0,i.kt)("p",{parentName:"admonition"},"Two different instances of a type derived from ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," are equal if they are from the same enumeration type\nand if the value of both is equivalent, ",(0,i.kt)("strong",{parentName:"p"},"ignoring letters case"),"."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'// Let\'s imagine we have these two members:\n// public static readonly CommunicationType Email = new("Email");\n// public static readonly CommunicationType EmailWithDifferentCase = new("EMAIL"); // same value, different case (this is not recommended)\n\nvar isSame = ReferenceEquals(CommunicationType.Email, CommunicationType.EmailWithDifferentCase); // false (they are different instances)\nvar isEqual = CommunicationType.Email == CommunicationType.EmailWithDifferentCase; // true (they are different instances, but they have the same value, ignoring case)\n')),(0,i.kt)("p",{parentName:"admonition"},"It is also possible to test the equality between a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration"),". It also ",(0,i.kt)("strong",{parentName:"p"},"ignores the letters case"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," must be on the left side of the equality operator:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var isStringEqualToEnumeration = "email" == CommunicationType.Email; // true\nisStringEqualToEnumeration = "EMAIL" == CommunicationType.Email; // true\nvar isStringNotEqualToEnumeration = "email" != CommunicationType.Email; // false\nisStringNotEqualToEnumeration = "EMAIL" != CommunicationType.Email; // false\n')),(0,i.kt)("h3",{parentName:"admonition",id:"switch"},"Switch"),(0,i.kt)("p",{parentName:"admonition"},"Since you have objects and not constant values (like in a ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),"), the ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," statement can't be constructed the same way as for an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),", but you can, for example, use pattern matching ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Sample/Samples/SendCommunicationSampleUsingEnumeration.cs"},"this way"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"private ISender? GetCommunicationSenderForCommunicationType(CommunicationType communicationType)\n{\n    // A switch statement for pattern matching\n    return communicationType switch\n    {\n        _ when communicationType == CommunicationType.Email => _emailSender,\n        _ when communicationType == CommunicationType.PushNotification => _pushNotificationSender,\n        _ when communicationType == CommunicationType.Sms => _smsSender,\n        _ => null\n    };\n}\n")),(0,i.kt)("h3",{parentName:"admonition",id:"enumeration-with-behavior"},"Enumeration with Behavior"),(0,i.kt)("p",{parentName:"admonition"},"We can add custom methods to the Enumeration class (it's an object, after all)."),(0,i.kt)("p",{parentName:"admonition"},"Here is a simple example, with a method ",(0,i.kt)("inlineCode",{parentName:"p"},"ParseMessage")," and with a property ",(0,i.kt)("inlineCode",{parentName:"p"},"IsPhoneNumberRequired"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'using PMart.Enumeration;\n\nnamespace Enumeration.Sample.Enumerations;\n\n/// <summary>\n/// The communication type enumeration.\n/// </summary>\npublic class CommunicationTypeWithBehaviour : Enumeration<CommunicationTypeWithBehaviour>\n{\n    public static readonly CommunicationTypeWithBehaviour Email = new("Email");\n\n    public static readonly CommunicationTypeWithBehaviour Sms = new("SMS");\n\n    public static readonly CommunicationTypeWithBehaviour PushNotification = new("PushNotification");\n\n    /// <summary>\n    /// Parses the message.\n    /// </summary>\n    /// <param name="message">The message content.</param>\n    /// <returns>The parsed message.</returns>\n    public string ParseMessage(string message)\n    {\n        return $"Message parsed by the communication type {this}: {message}";\n    }\n\n    /// <summary>\n    /// Gets a value indicating if this communication type requires phone number.\n    /// </summary>\n    /// <returns><c>true</c> if this communication type requires phone number; <c>false</c> otherwise.</returns>\n    public bool IsPhoneNumberRequired => this switch\n    {\n        _ when this == Sms => true,\n        _ when this == PushNotification => true,\n        _ => false\n    };\n\n    private CommunicationTypeWithBehaviour(string value) : base(value)\n    {\n    }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"We can also use inheritance to add specific behavior or properties for each enumeration member in an Enumeration class.\nCheck this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Sample/Enumerations/CommunicationTypeWithBehaviour.cs"},"example"),", where the communication type has subclasses with a specific implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"ParseMessage()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"IsPhoneNumberRequired"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'using PMart.Enumeration;\n\nnamespace Enumeration.Sample.Enumerations;\n\n/// <summary>\n/// The communication type enumeration.\n/// </summary>\npublic abstract class CommunicationTypeWithSpecificBehaviour : Enumeration<CommunicationTypeWithSpecificBehaviour>\n{\n    public static readonly CommunicationTypeWithSpecificBehaviour Email = new EmailType();\n\n    public static readonly CommunicationTypeWithSpecificBehaviour Sms = new SmsType();\n    \n    public static readonly CommunicationTypeWithSpecificBehaviour PushNotification = new PushNotificationType();\n\n    /// <summary>\n    /// Parses the message.\n    /// </summary>\n    /// <remarks>Each communication type, implements its own way of parsing the message.</remarks>\n    /// <param name="message">The message content.</param>\n    /// <returns>The parsed message.</returns>\n    public abstract string ParseMessage(string message);\n\n    /// <summary>\n    /// Gets a value indicating if this communication type requires phone number.\n    /// </summary>\n    /// <returns><c>true</c> if this communication type requires phone number; <c>false</c> otherwise.</returns>\n    public abstract bool IsPhoneNumberRequired { get; }\n    \n    private CommunicationTypeWithSpecificBehaviour(string value) : base(value)\n    {\n    }\n\n    private sealed class EmailType : CommunicationTypeWithSpecificBehaviour\n    {\n        public EmailType() : base("Email")\n        {\n        }\n        \n        /// <inheritdoc />\n        public override string ParseMessage(string message)\n        {\n            return $"<html>{message}</html>";\n        }\n\n        /// <inheritdoc />\n        public override bool IsPhoneNumberRequired => false;\n    }\n    \n    private sealed class SmsType : CommunicationTypeWithSpecificBehaviour\n    {\n        public SmsType() : base("Sms")\n        {\n        }\n        \n        /// <inheritdoc />\n        public override string ParseMessage(string message)\n        {\n            return $"Message encoded for SMS: {message}";\n        }\n        \n        /// <inheritdoc />\n        public override bool IsPhoneNumberRequired => true;\n    }\n    \n    private sealed class PushNotificationType : CommunicationTypeWithSpecificBehaviour\n    {\n        public PushNotificationType() : base("PushNotification")\n        {\n        }\n        \n        /// <inheritdoc />\n        public override string ParseMessage(string message)\n        {\n            return $"Message encoded for push notification: {message}";\n        }\n        \n        /// <inheritdoc />\n        public override bool IsPhoneNumberRequired => true;\n    }\n}\n')),(0,i.kt)("h2",{parentName:"admonition",id:"dynamic-enumerations"},"Dynamic Enumerations"),(0,i.kt)("p",{parentName:"admonition"},"Instead of extending ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," class, you can extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," class.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," class extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," class, therefore, it has the same features.\nWith this type, you will have an extra method that adds the possibility to create new ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," instances at runtime, if there isn't any enumeration member with a specific value."),(0,i.kt)("p",{parentName:"admonition"},"To create an ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," is the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration"),", but it requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"public")," empty constructor, in addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," constructor."),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"You can use the ",(0,i.kt)("a",{parentName:"p",href:"#enumeration-generator"},"Generator")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Generator")," package, that generates the code for you, and therefore you don't need to worry about the constructors.")),(0,i.kt)("p",{parentName:"admonition"},"Continuing with the communication types, here is an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Sample/Enumerations/CommunicationTypeDynamic.cs"},"example")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'using PMart.Enumeration;\n\nnamespace Enumeration.Sample.Enumerations;\n\n/// <summary>\n/// The communication type enumeration.\n/// </summary>\npublic class CommunicationTypeDynamic : EnumerationDynamic<CommunicationTypeDynamic>\n{\n    public static readonly CommunicationTypeDynamic Email = new("Email");\n\n    public static readonly CommunicationTypeDynamic Sms = new("SMS");\n    \n    public static readonly CommunicationTypeDynamic PushNotification = new("PushNotification");\n\n    public CommunicationTypeDynamic()\n    {\n    }\n    \n    private CommunicationTypeDynamic(string value) : base(value)\n    {\n    }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Now, you can use the method ",(0,i.kt)("inlineCode",{parentName:"p"},"GetFromValueOrNew(string? value)"),", that returns an instance of the enumeration type, or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if the provided value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),".\nIf there is an enumeration with the provided value (",(0,i.kt)("strong",{parentName:"p"},"ignoring letters case"),"), it will return that instance, else it will create a new instance with the provided value and return it (or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if the provided value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),")."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var a = CommunicationTypeDynamic.GetFromValueOrNew("Email"); // returns CommunicationTypeDynamic.Email\nvar b = CommunicationTypeDynamic.GetFromValueOrNew("EMAIL"); // returns CommunicationTypeDynamic.Email\nvar c = CommunicationTypeDynamic.GetFromValueOrNew("someUnknownType"); // returns new instance of CommunicationTypeDynamic, with value = "someUnknownType"\nvar d = CommunicationTypeDynamic.GetFromValueOrNew(null); // returns null\n\nvar aValue = a?.Value; // "Email"\nvar bValue = b?.Value; // "Email"\nvar cValue = c?.Value; // "someUnknownValue"\nvar dValue = d?.Value; // null\n')),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Note:")," Instances created with equivalent values are equal (check section ",(0,i.kt)("a",{parentName:"p",href:"#equality"},"Equality"),"), but different instances:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var a = CommunicationTypeDynamic.GetFromValueOrNew("someUnknownType"); // returns a new instance of CommunicationTypeDynamic, with value = "someUnknownType"\nvar b = CommunicationTypeDynamic.GetFromValueOrNew("someUnknownType"); // returns another new instance of CommunicationTypeDynamic, with value = "someUnknownType"\nvar c = CommunicationTypeDynamic.GetFromValueOrNew("SOMEuNKNOWtTYPE"); // returns another new instance of CommunicationTypeDynamic, with value = "SOMEuNKNOWtTYPE"\n\nvar isAEqualToB = a == b; // true\nvar isAEqualToC = a == c; // true\nvar isBEqualToC = b == c; // true\nvar isASameInstanceThanB = ReferenceEquals(a, b); // false\nvar isASameInstanceThanC = ReferenceEquals(a, c); // false\nvar isBSameInstanceThanC = ReferenceEquals(b, c); // false\n')),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Note:")," when you create a new enumeration with ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", that enumeration will not be added to the list of existent enumeration members:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var newCommunicationType = CommunicationTypeDynamic.GetFromValueOrNew("someUnknownType"); // returns a new instance of CommunicationTypeDynamic, with value = "someUnknownType"\n\nvar existsTheNewTypeOnCommunicationTypes = CommunicationTypeDynamic\n   .GetMembers()\n   .Any(ct => ct == newCommunicationType); // false\n')),(0,i.kt)("h3",{parentName:"admonition",id:"why-dynamic-enumerations"},"Why Dynamic Enumerations?"),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," class can be useful when you want to accept values that are not in the declared enumerations or when you want to have the possibility to create new enumerations at runtime."),(0,i.kt)("p",{parentName:"admonition"},"For example, an API ",(0,i.kt)("strong",{parentName:"p"},"A")," sends data to API ",(0,i.kt)("strong",{parentName:"p"},"B")," that then redirects the data to API ",(0,i.kt)("strong",{parentName:"p"},"C"),".\nAll these APIs use enumeration classes, but API ",(0,i.kt)("strong",{parentName:"p"},"B")," don't care about the value, it just sends it to API ",(0,i.kt)("strong",{parentName:"p"},"C"),". So, using ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," on API ",(0,i.kt)("strong",{parentName:"p"},"B")," you don't need to deploy API ",(0,i.kt)("strong",{parentName:"p"},"B")," every time you had a new value to the enumeration on API ",(0,i.kt)("strong",{parentName:"p"},"A"),".\nOther way, using ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", you would need to update API ",(0,i.kt)("strong",{parentName:"p"},"B")," in order to recognize the new enumeration member and send it to the API ",(0,i.kt)("strong",{parentName:"p"},"C"),"."),(0,i.kt)("p",{parentName:"admonition"},"You can check the example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Sample/Samples/SendCommunicationSampleUsingEnumerationDynamic.cs"},"here"),"."),(0,i.kt)("h1",{parentName:"admonition",id:"efcore-support"},"EFCore Support"),(0,i.kt)("p",{parentName:"admonition"},"In EF Core, adding a property of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," to an entity requires setting the conversion to store the value of the enumeration on the database.\nThe NuGet package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.EFCore")," has the required converters, you just need to add them to your model configuration. Check this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.EFCore.Sample/DbContext/SampleDbContext.cs"},"sample"),":"),(0,i.kt)("p",{parentName:"admonition"},"For this entity:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class CommunicationRecord\n{\n   public Guid Id { get; set; }\n   \n   public DateTime SentAt { get; set; }\n   \n   public string To { get; set; } = null!;\n\n   public CommunicationType? Type { get; set; }\n\n   public CommunicationTypeDynamic? TypeDynamic { get; set; }\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"You need to configure it on model creating this way on your ",(0,i.kt)("inlineCode",{parentName:"p"},"DbContext"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n   base.OnModelCreating(modelBuilder);\n\n   modelBuilder.Entity<CommunicationRecord>(e =>\n   {\n       e.Property(p => p.Type)\n           .HasConversion<EnumerationConverter<CommunicationType>>();\n\n       e.Property(p => p.TypeDynamic)\n           .HasConversion<EnumerationDynamicConverter<CommunicationTypeDynamic>>();\n   });\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"An usage ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.EFCore.Sample/Samples/CommunicationUsingEFCoreSample.cs"},"sample"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public async Task<IEnumerable<CommunicationRecord>> GetCommunicationRecordsByType(CommunicationType communicationType)\n{\n    var records = await _context.CommunicationRecords\n        .Where(r => r.Type == communicationType)\n        .ToListAsync();\n\n    return records;\n}\n")),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")," In a query, the case sensitivity is determined by the database provider.\nE.g., if you save the record using an ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," with value ",(0,i.kt)("inlineCode",{parentName:"p"},'"Email"'),", and then query the database using another instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," with value ",(0,i.kt)("inlineCode",{parentName:"p"},'"EMAIL"'),", it is possible you get no results, depending on the database.\nFor example, ",(0,i.kt)("strong",{parentName:"p"},"MS SQL Server")," is, by default, case-insensitive, so you would get the result.")),(0,i.kt)("h1",{parentName:"admonition",id:"newtonsoft-jsonnet-support"},"Newtonsoft Json.NET Support"),(0,i.kt)("p",{parentName:"admonition"},"Using ",(0,i.kt)("a",{parentName:"p",href:"https://www.newtonsoft.com"},"Newtonsoft Json.NET"),", if you need to serialize/deserialize objects that contain properties of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration"),", without any converters, the enumeration property would act like a regular object."),(0,i.kt)("p",{parentName:"admonition"},"For example, using this model:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class CommunicationRecord\n{\n    public DateTime SentAt { get; set; }\n    \n    public string To { get; set; } = null!;\n    \n    public CommunicationType Type { get; set; } = null!;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"The JSON without any custom JSON converters would be like:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sentAt": "0001-01-01",\n  "to": "someone@email.com",\n  "communicationType": {\n    "value": "Email"\n  }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Probably, you would like a JSON where the ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunicationType")," works like an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," value:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sentAt": "0001-01-01",\n  "to": "someone@email.com",\n  "communicationType": "Email"\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"For that, you just need to use the custom converters available on the NuGet package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.JsonNet"),"."),(0,i.kt)("p",{parentName:"admonition"},"An example where the converter is added by attribute:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class CommunicationRecord\n{\n    public DateTime SentAt { get; set; }\n    \n    public string To { get; set; } = null!;\n    \n    [JsonConverter(typeof(EnumerationConverter<CommunicationType>))]\n    public CommunicationType Type { get; set; } = null!;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"An example where the converter is added on the serializer converters:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public string SerializeCommunicationRecord(CommunicationRecord communicationRecord)\n{\n    var json = JsonConvert.SerializeObject(communicationRecord, new EnumerationConverter<CommunicationType>());\n\n    return json;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"For enumerations of type ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", you can use the generic converter ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamicConverter<T>"),"."),(0,i.kt)("p",{parentName:"admonition"},"When you have several enumeration types that you would like to register globally, instead of registering all the converters of type ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationConverter<T>")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamicConverter<T>"),"), one for each enumeration type, you can use the non-generic converter ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationConverter"),".\nThis converter evaluates if the object is derived from ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," and handles it accordingly. It might be a little less performant."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public string SerializeCommunicationRecord(CommunicationRecord communicationRecord)\n{\n    var json = JsonConvert.SerializeObject(communicationRecord, new EnumerationConverter());\n\n    return json;\n}\n")),(0,i.kt)("h1",{parentName:"admonition",id:"systemtextjson-support"},"System.Text.Json Support"),(0,i.kt)("p",{parentName:"admonition"},"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Text.Json"),", if you need to serialize/deserialize objects that contain properties of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration"),", without any converters, the enumeration property would act like a regular object."),(0,i.kt)("p",{parentName:"admonition"},"Again, for the same model example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class CommunicationRecord\n{\n    public DateTime SentAt { get; set; }\n    \n    public string To { get; set; } = null!;\n    \n    public CommunicationType Type { get; set; } = null!;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"The JSON without any custom JSON converters would be like:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sentAt": "0001-01-01",\n  "to": "someone@email.com",\n  "communicationType": {\n    "value": "Email"\n  }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Probably, you would like a JSON where the ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunicationType")," works like a ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," value:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sentAt": "0001-01-01",\n  "to": "someone@email.com",\n  "communicationType": "Email"\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"For that, you just need to use the JSON converter ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationConverterFactory")," available on the NuGet package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.SystemTextJson"),"."),(0,i.kt)("p",{parentName:"admonition"},"An example where the converter is added by attribute:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class CommunicationRecord\n{\n    public DateTime SentAt { get; set; }\n    \n    public string To { get; set; } = null!;\n    \n    [JsonConverter(typeof(EnumerationConverterFactory))]\n    public CommunicationType Type { get; set; } = null!;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"An example where the converter is added on the serializer options:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public string SerializeCommunicationRecord(CommunicationRecord communicationRecord)\n{\n    var serializerOptions = GetSerializerOptions();\n\n    var json = JsonSerializer.Serialize(communicationRecord, serializerOptions);\n\n    return json;\n}\n\nprivate JsonSerializerOptions GetSerializerOptions()\n{\n    return new JsonSerializerOptions\n    {\n        Converters = { new EnumerationConverterFactory() }\n    };\n}\n")),(0,i.kt)("h1",{parentName:"admonition",id:"swagger-support"},"Swagger Support"),(0,i.kt)("p",{parentName:"admonition"},"If you would like to add an enumeration property to a model from an API and would like to document it on ",(0,i.kt)("strong",{parentName:"p"},"Swagger")," like an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),", you should install the NuGet package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.SwaggerGen")," and add the schema filter ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationSchemaFilter")," to the ",(0,i.kt)("strong",{parentName:"p"},"Swagger")," options on your ",(0,i.kt)("inlineCode",{parentName:"p"},"Program.cs")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"Startup.cs"),"), like in this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.SwaggerGen.Sample/Program.cs"},"example"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'builder.Services.AddSwaggerGen(options =>\n{\n    options.SwaggerDoc("v1", new OpenApiInfo {Version = "v1", Title = "Sample API"});\n    \n    options.SchemaFilter<EnumerationSchemaFilter>();\n});\n')),(0,i.kt)("p",{parentName:"admonition"},"Here's an example of the result:"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{parentName:"p",src:"https://github.com/p-martinho/Enumeration/samples/Enumeration.SwaggerGen.Sample/Samples/Swagger-sample-1.png",alt:"Swagger sample 1"})),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{parentName:"p",src:"https://github.com/p-martinho/Enumeration/samples/Enumeration.SwaggerGen.Sample/Samples/Swagger-sample-2.png",alt:"Swagger sample 2"})),(0,i.kt)("h1",{parentName:"admonition",id:"mapping"},"Mapping"),(0,i.kt)("h2",{parentName:"admonition",id:"map-using-built-in-features"},"Map using built-in features"),(0,i.kt)("p",{parentName:"admonition"},"To map from a ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", it is very easy, as explained in the section ",(0,i.kt)("a",{parentName:"p",href:"#Value"},"Features"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var stringValue = CommunicationType.Email.Value; // "Email"\n// Or:\nvar stringValue = CommunicationType.Email.ToString(); // "Email"\n')),(0,i.kt)("p",{parentName:"admonition"},"To map from a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration"),", is also straightforward, as explained in the section ",(0,i.kt)("a",{parentName:"p",href:"#GetFromValueOrDefault"},"Features"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var enumeration = CommunicationType.GetFromValueOrDefault("Email"); // returns CommunicationType.Email\n')),(0,i.kt)("p",{parentName:"admonition"},"To benefit from the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," features and map from a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", as explained in the section ",(0,i.kt)("a",{parentName:"p",href:"#dynamic-enumerations"},"Dynamic Enumerations"),", just use:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var enumeration = CommunicationTypeDynamic.GetFromValueOrNew("someUnknownType"); // returns a new CommunicationTypeDynamic with value "someUnknownType"\n')),(0,i.kt)("p",{parentName:"admonition"},"To map between different types of ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", you can do it like this for ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," types:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"var enumeration = OtherCommunicationType.GetFromValueOrDefault(communicationType.Value);\n")),(0,i.kt)("p",{parentName:"admonition"},"Or like this for ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," types:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"var enumeration = OtherCommunicationTypeDynamic.GetFromValueOrNew(communicationType.Value);\n")),(0,i.kt)("h2",{parentName:"admonition",id:"map-using-extensions-or-mappers"},"Map using Extensions or Mappers"),(0,i.kt)("p",{parentName:"admonition"},"The NuGet package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Mappers")," includes a set of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/src/Enumeration.Mappers/Extensions/EnumerationExtensions.cs"},"extensions")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/src/Enumeration.Mappers"},"mappers")," to help the mapping to/from ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," and between different types of ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),".\nAnd they are prepared for ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," values."),(0,i.kt)("p",{parentName:"admonition"},"Here is an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Mappers.Sample/Samples/MapCommunicationSample.cs"},"example")," using the extensions and the mappers to map between ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public string? MapCommunicationTypeToStringUsingExtensions(CommunicationType communicationType)\n{\n    return communicationType.MapToString();\n}\n\npublic CommunicationType? MapStringToCommunicationTypeUsingExtensions(string communicationType)\n{\n    return communicationType.MapToEnumeration<CommunicationType>();\n}\n\npublic string MapCommunicationTypeToStringUsingMapper(CommunicationType communicationType)\n{\n    return StringEnumerationMapper<CommunicationType>.MapToString(communicationType);\n}\n\npublic CommunicationType MapStringToCommunicationTypeUsingMapper(string communicationType)\n{\n    return StringEnumerationMapper<CommunicationType>.MapToEnumeration(communicationType);\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"Here is an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Mappers.Sample/Samples/MapCommunicationDynamicSample.cs"},"example")," using the extensions and the mappers to map between ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public string? MapCommunicationTypeToStringUsingExtensions(CommunicationTypeDynamic communicationType)\n{\n    return communicationType.MapToString();\n}\n\npublic CommunicationTypeDynamic? MapStringToCommunicationTypeUsingExtensions(string communicationType)\n{\n    return communicationType.MapToEnumerationDynamic<CommunicationTypeDynamic>();\n}\n\npublic string MapCommunicationTypeToStringUsingMapper(CommunicationTypeDynamic communicationType)\n{\n    return StringEnumerationDynamicMapper<CommunicationTypeDynamic>.MapToString(communicationType);\n}\n\npublic CommunicationTypeDynamic MapStringToCommunicationTypeUsingMapper(string communicationType)\n{\n    return StringEnumerationDynamicMapper<CommunicationTypeDynamic>.MapToEnumerationDynamic(communicationType);\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"To map between different types of ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration"),", you can follow this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Mappers.Sample/Samples/MapToOtherCommunicationSample.cs"},"example"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public OtherCommunicationType? MapToOtherTypeOfEnumeration(CommunicationType communicationType)\n{\n    return OtherCommunicationType.GetFromValueOrDefault(communicationType.Value);\n}\n\npublic OtherCommunicationType? MapToOtherTypeOfEnumerationUsingExtensions(CommunicationType communicationType)\n{\n    // Usage: ...MapToEnumeration<the source type, the destination type>();\n    return communicationType.MapToEnumeration<CommunicationType, OtherCommunicationType>();\n}\n\npublic OtherCommunicationType MapToOtherTypeOfEnumerationTypeUsingMapper(CommunicationType communicationType)\n{\n    // Usage: EnumerationMapper<the source type, the destination type>.MapToEnumeration(...);\n    return EnumerationMapper<CommunicationType, OtherCommunicationType>.MapToEnumeration(communicationType);\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"And finally, to map between different types of ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," where the destination is an ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", you can follow this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Mappers.Sample/Samples/MapToOtherCommunicationDynamicSample.cs"},"example"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public OtherCommunicationTypeDynamic? MapToOtherTypeOfEnumeration(CommunicationType communicationType)\n{\n    return OtherCommunicationTypeDynamic.GetFromValueOrNew(communicationType.Value);\n}\n\npublic OtherCommunicationTypeDynamic? MapToOtherTypeOfEnumerationUsingExtensions(\n    CommunicationType communicationType)\n{\n    // Usage: ...MapToEnumerationDynamic<the source type, the destination type>();\n    return communicationType.MapToEnumerationDynamic<CommunicationType, OtherCommunicationTypeDynamic>();\n}\n\npublic OtherCommunicationTypeDynamic MapToOtherTypeOfEnumerationTypeUsingMapper(CommunicationType communicationType)\n{\n    // Usage: EnumerationDynamicMapper<the source type, the destination type>.MapToEnumerationDynamic(...);\n    return EnumerationDynamicMapper<CommunicationType, OtherCommunicationTypeDynamic>.MapToEnumerationDynamic(\n        communicationType);\n}\n")),(0,i.kt)("h2",{parentName:"admonition",id:"using-mapperly"},"Using Mapperly"),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/riok/mapperly"},"Mapperly")," is a source generator for generating object mappings. To map objects that have properties of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic")," with ",(0,i.kt)("strong",{parentName:"p"},"Mapperly"),", you need to implement the mapping in the object mapper."),(0,i.kt)("p",{parentName:"admonition"},"The NuGet package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Mappers")," provides a set of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/src/Enumeration.Mappers"},"mappers")," that can be used in ",(0,i.kt)("strong",{parentName:"p"},"Mapperly")," mappers, without the need to implement the mapping manually."),(0,i.kt)("p",{parentName:"admonition"},"In this example, we have a source object that is mapped to a destination object, which requires mapping from ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," (from ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunicationType")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),") and between different types of ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration")," (from ",(0,i.kt)("inlineCode",{parentName:"p"},"CommunicationType")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"OtherCommunicationType"),"):"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class SourceObject\n{\n    public CommunicationType CommunicationType { get; set; } = null!;\n    \n    public CommunicationType OtherCommunicationType { get; set; } = null!;\n}\n\npublic class DestinationObject\n{\n    public string CommunicationType { get; set; } = null!;\n    \n    public OtherCommunicationType OtherCommunicationType { get; set; } = null!;\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"For this example, we need to create a ",(0,i.kt)("strong",{parentName:"p"},"Mapperly")," mapper, and we can use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/src/Enumeration.Mappers"},"mappers")," as ",(0,i.kt)("a",{parentName:"p",href:"https://mapperly.riok.app/docs/configuration/user-implemented-methods/#use-external-mappings"},"external mappings"),", using the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"[UseStaticMapper]"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"// ...\nusing Riok.Mapperly.Abstractions;\n\nnamespace Enumeration.Mappers.Sample.Samples.Mapperly.Mappers;\n\n[Mapper]\n[UseStaticMapper(typeof(StringEnumerationMapper<CommunicationType>))]\n[UseStaticMapper(typeof(EnumerationMapper<CommunicationType, OtherCommunicationType>))]\ninternal partial class SampleMapper\n{\n    public partial DestinationObject SourceToDestination(SourceObject sourceModel);\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"For enumerations of type ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic"),", you can use the mappers ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/src/Enumeration.Mappers/StringEnumerationDynamicMapper.cs"},(0,i.kt)("inlineCode",{parentName:"a"},"StringEnumerationDynamicMapper"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/src/Enumeration.Mappers/EnumerationDynamicMapper.cs"},(0,i.kt)("inlineCode",{parentName:"a"},"EnumerationDynamicMapper")),"."),(0,i.kt)("p",{parentName:"admonition"},"You can check the sample ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Mappers.Sample/Samples/Mapperly"},"here"),"."),(0,i.kt)("h1",{parentName:"admonition",id:"enumeration-generator"},"Enumeration Generator"),(0,i.kt)("p",{parentName:"admonition"},"Creating a new Enumeration class is a little bit verbose. For instance, you can't forget to extend ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration<T>")," and to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," constructor (else, it wouldn't compile anyway).\nTherefore, the package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Generator")," was added to help on that. It is an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md"},"incremental generator"),"."),(0,i.kt)("h2",{parentName:"admonition",id:"generator-installation"},"Generator Installation"),(0,i.kt)("p",{parentName:"admonition"},"Add the package to your project:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package PMart.Enumeration.Generator\n")),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"You need to keep the package ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration")," installed.")),(0,i.kt)("p",{parentName:"admonition"},"To any project referring that project don't get a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Generator"),", you can add ",(0,i.kt)("inlineCode",{parentName:"p"},'PrivateAssets="all"')," to the package reference.\nAnd you can also add ",(0,i.kt)("inlineCode",{parentName:"p"},'ExcludeAssets="runtime"'),", to avoid the ",(0,i.kt)("inlineCode",{parentName:"p"},"PMart.Enumeration.Generator.dll")," file being copied to your build output (it is not required at runtime, it is a generator, so it works in compile time only):"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<Project Sdk="Microsoft.NET.Sdk">\n\n  \x3c!-- ... --\x3e\n\n  <PackageReference Include="PMart.Enumeration" Version="3.1.0" />\n  <PackageReference Include="PMart.Enumeration.Generator" Version="3.1.0" PrivateAssets="all" ExcludeAssets="runtime" />\n  \n  \x3c!-- ... --\x3e\n\n</Project>\n')),(0,i.kt)("h2",{parentName:"admonition",id:"generator-usage"},"Generator Usage"),(0,i.kt)("p",{parentName:"admonition"},"To create a new Enumeration with the generator, it is easy:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"partial")," class, for the Enumeration class."),(0,i.kt)("li",{parentName:"ul"},"Add the ",(0,i.kt)("inlineCode",{parentName:"li"},"EnumerationAttribute")," (namespace ",(0,i.kt)("inlineCode",{parentName:"li"},"PMart.Enumeration.Generator.Attributes"),") on the class."),(0,i.kt)("li",{parentName:"ul"},"Add fields of type ",(0,i.kt)("inlineCode",{parentName:"li"},"private static readonly string")," named with the prefix ",(0,i.kt)("inlineCode",{parentName:"li"},"ValueFor")," (this prefix is one of the ways of doing it, as you can check next), that hold the values that will be used to create the enumeration members (check the bellow examples).")),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"The non-fields or fields that are not ",(0,i.kt)("inlineCode",{parentName:"p"},"private static readonly string")," are ignored.")),(0,i.kt)("p",{parentName:"admonition"},"For example, without the generator, the communication type enumeration was like this:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'using PMart.Enumeration;\n\nnamespace Enumeration.Sample.Enumerations;\n\n/// <summary>\n/// The communication type enumeration.\n/// </summary>\npublic class CommunicationType : Enumeration<CommunicationType>\n{\n    public static readonly CommunicationType Email = new("Email");\n\n    public static readonly CommunicationType Sms = new("SMS");\n    \n    public static readonly CommunicationType PushNotification = new("PushNotification");\n\n    private CommunicationType(string value) : base(value)\n    {\n    }\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Using the generator and the prefix ",(0,i.kt)("inlineCode",{parentName:"p"},"ValueFor")," (this prefix is one of the ways of doing it, as you can check next), it is just like this:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'using PMart.Enumeration.Generator.Attributes;\n\nnamespace Enumeration.Generator.Sample.Enumerations;\n\n/// <summary>\n/// The communication type enumeration.\n/// </summary>\n[Enumeration]\npublic partial class CommunicationType\n{\n    private static readonly string ValueForEmail = "Email";\n\n    private static readonly string ValueForSms = "SMS";\n    \n    private static readonly string ValueForPushNotification = "PushNotification";\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"And the ",(0,i.kt)("strong",{parentName:"p"},"generated code")," will be something like this:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"// <auto-generated />\n\nnamespace Enumeration.Generator.Sample.Enumerations\n{\n    public partial class CommunicationType : Enumeration<CommunicationType>\n    {\n        public static readonly CommunicationType Email = new CommunicationType(ValueForEmail!);\n\n        public static readonly CommunicationType Sms = new CommunicationType(ValueForSms!);\n\n        public static readonly CommunicationType PushNotification = new CommunicationType(ValueForPushNotification!);\n\n        private CommunicationType(string value) : base(value)\n        {\n        }\n    }\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"If you don't worry about instantiating the enumeration members and your only concern is about the inheritance from ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumeration<T>")," and constructors, you can use the generator to build just that parts:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'[Enumeration]\npublic partial class CommunicationType\n{    \n    public static readonly CommunicationType Email = new("Email");\n\n    public static readonly CommunicationType Sms = new("SMS");\n    \n    public static readonly CommunicationType PushNotification = new("PushNotification");\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"You can check other examples in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Generator.Sample/Enumerations"},"samples"),"."),(0,i.kt)("h3",{parentName:"admonition",id:"the-enumerationmember-attribute"},"The EnumerationMember Attribute"),(0,i.kt)("p",{parentName:"admonition"},"If you don't like the use of the prefix ",(0,i.kt)("inlineCode",{parentName:"p"},"ValueFor")," to define the member names, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationMemberAttribute")," to define the name of the enumeration member\n(but remember, it is not possible two fields have the same name, it will return a compilation error if you try to do that):"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'[Enumeration]\npublic partial class CommunicationType\n{\n    [EnumerationMember("Email")]\n    private static readonly string EmailCode = "Email";\n\n    [EnumerationMember("Sms")]\n    private static readonly string SmsCode = "SMS";\n    \n    [EnumerationMember("PushNotification")]\n    private static readonly string PushNotificationCode = "PushNotification";\n}\n')),(0,i.kt)("h3",{parentName:"admonition",id:"the-enumerationignore-attribute"},"The EnumerationIgnore Attribute"),(0,i.kt)("p",{parentName:"admonition"},"If, for some reason, you already have a field ",(0,i.kt)("inlineCode",{parentName:"p"},"private static readonly string")," named ",(0,i.kt)("inlineCode",{parentName:"p"},"ValueFor..."),", but you don't want it to be used to generate a new enumeration member, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationIgnoreAttribute"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'[Enumeration]\npublic partial class CommunicationType\n{\n    private static readonly string ValueForEmail = "Email";\n\n    private static readonly string ValueForSms = "SMS";\n    \n    private static readonly string ValueForPushNotification = "PushNotification";\n    \n    [EnumerationIgnore]\n    private static readonly string ValueForSomeFieldThatShouldBeIgnored = "SomeValue";\n}\n')),(0,i.kt)("h3",{parentName:"admonition",id:"generate-enumerationdynamic"},"Generate EnumerationDynamic"),(0,i.kt)("p",{parentName:"admonition"},"To generate an Enumeration class of type ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationDynamic<T>"),", enable the option ",(0,i.kt)("inlineCode",{parentName:"p"},"IsDynamic")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumerationAttribute"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'[Enumeration(IsDynamic = true)]\npublic partial class CommunicationTypeDynamic\n{\n    private static readonly string ValueForEmail = "Email";\n\n    private static readonly string ValueForSms = "SMS";\n    \n    private static readonly string ValueForPushNotification = "PushNotification";\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"The generated code will be something like this:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"// <auto-generated />\n\nnamespace Enumeration.Generator.Sample.Enumerations\n{\n    public partial class CommunicationTypeDynamic : EnumerationDynamic<CommunicationTypeDynamic>\n    {\n        public static readonly CommunicationTypeDynamic Email = new CommunicationTypeDynamic(ValueForEmail!);\n\n        public static readonly CommunicationTypeDynamic Sms = new CommunicationTypeDynamic(ValueForSms!);\n\n        public static readonly CommunicationTypeDynamic PushNotification = new CommunicationTypeDynamic(ValueForPushNotification!);\n\n        public CommunicationTypeDynamic()\n        {\n        }\n\n        private CommunicationTypeDynamic(string value) : base(value)\n        {\n        }\n    }\n}\n")),(0,i.kt)("h2",{parentName:"admonition",id:"generator-diagnostics"},"Generator Diagnostics"),(0,i.kt)("p",{parentName:"admonition"},"The generator tries to report errors when the user does common mistakes, namely about naming the enumeration members with names already in use.\nIn some cases, there are no compilation errors on the user code. Without the diagnostics from the generator, the user would not know why the generator doesn't work."),(0,i.kt)("p",{parentName:"admonition"},"For instance, assigning the same name for the enumeration member and for the field, the Enumeration class will not be generated and an error is reported:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'[Enumeration]\npublic partial class CommunicationType\n{\n    [EnumerationMember("Email")]\n    private static readonly string Email = "Email";\n                                   ^^^^^ // Error ENUM0002: The name \'Email\' of the Enumeration member is the same as the field name\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Or, defining an invalid name for the enumeration member:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'[Enumeration]\npublic partial class CommunicationType\n{\n    // 123 is not a valid name for a class member in C#\n    [EnumerationMember("123")]\n    private static readonly string Email = "Email";\n                                   ^^^^^ // Error ENUM0001: Invalid name for the Enumeration member in the EnumerationMemberAttribute\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"There are other diagnostics reported for different cases. All are of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Error")," with an ID like ",(0,i.kt)("inlineCode",{parentName:"p"},"ENUMXXXX")," and with a descriptive message."),(0,i.kt)("h2",{parentName:"admonition",id:"generator-limitations"},"Generator Limitations"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"The .NET versions restrictions are:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},".NET SDK: >= 8.0.100"),(0,i.kt)("li",{parentName:"ul"},"MSBuild/Visual Studio: >= 17.8."))),(0,i.kt)("li",{parentName:"ul"},"It does not work for ",(0,i.kt)("inlineCode",{parentName:"li"},"abstract")," classes. In the example provided in ",(0,i.kt)("a",{parentName:"li",href:"#enumeration-with-behavior"},"Enumeration with behavior"),", we use an ",(0,i.kt)("inlineCode",{parentName:"li"},"abstract")," class and subclasses. When using the generator, you can do the same without being ",(0,i.kt)("inlineCode",{parentName:"li"},"abstract"),", check this ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/p-martinho/Enumeration/samples/Enumeration.Generator.Sample/Enumerations/CommunicationTypeWithSpecificBehaviour.cs"},"sample"),"."),(0,i.kt)("li",{parentName:"ul"},"It does not support nested classes (the usage of the ",(0,i.kt)("inlineCode",{parentName:"li"},"EnumerationAttribute")," in a nested class does not have effect). But it supports nested namespaces.")),(0,i.kt)("h1",{parentName:"admonition",id:"disclaimer"},"Disclaimer"),(0,i.kt)("p",{parentName:"admonition"},"While the enumeration class is a good alternative to ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," type, it is more complex and also .NET doesn't handle it as it handles ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," (e.g. JSON des/serialization, model binding, etc.), requiring custom code.\nPlease be aware that enumeration class may not fit your needs."),(0,i.kt)("h1",{parentName:"admonition",id:"references"},"References"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Enumeration Classes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types"},"Microsoft Docs: Using enumeration classes instead of enum types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://lostechies.com/jimmybogard/2008/08/12/enumeration-classes"},"Jimmy Bogard: Enumeration Classes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ardalis.com/enum-alternatives-in-c"},"Ardalis: Enum Alternatives in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ardalis/SmartEnum"},"Ardalis: SmartEnum")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ankitvijay.net/2020/06/12/series-enumeration-classes-ddd-and-beyond"},"Ankit Vijay: Enumeration Classes \u2013 DDD and beyond")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ankitvijay/Enumeration"},"Ankit Vijay: Enumeration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Services/Ordering/Ordering.Domain/SeedWork/Enumeration.cs"},"eShopOnContainers: Enumeration.cs")))),(0,i.kt)("li",{parentName:"ul"},"Incremental Generators:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md"},"Roslyn Documentation: Incremental Generators")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.cookbook.md"},"Roslyn Documentation: Incremental Generators Cookbook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://andrewlock.net/series/creating-a-source-generator"},"Andrew Lock: Creating a source generator")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/andrewlock/NetEscapades.EnumGenerators"},"Andrew Lock: NetEscapades.EnumGenerators")))))),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Constants as enumeration. With EFCore, Swagger and other implementations.")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"PMart.Enumeration")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {12}",showLineNumbers:!0,"{12}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net9.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n    <ItemGroup>\n\n        <PackageReference Include="PMart.Enumeration" Version="3.1.0" />\n        <PackageReference Include="PMart.Enumeration.Generator" Version="3.1.0" PrivateAssets="all" ExcludeAssets="runtime" />\n\n    </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PMart.Enumeration\\src\\DemoPMart\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"PMart.Enumeration")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using DemoPMart;\n\nvar personType= PersonType.GetFromValueOrDefault("test");\nConsole.WriteLine(personType?.Value??"null");\npersonType = PersonType.GetFromValueOrDefault("manager");\nConsole.WriteLine(personType!.Value);\nConsole.WriteLine(PersonType.Manager == personType);\n\n'))),(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PMart.Enumeration\\src\\DemoPMart\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"PMart.Enumeration")," in ",(0,i.kt)("em",{parentName:"p"},"Person.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using PMart.Enumeration.Generator.Attributes;\n\nnamespace DemoPMart;\n[Enumeration]\npublic partial class PersonType\n{\n    private static readonly string ValueForEmployee = "Employee";\n    private static readonly string ValueForManager = "Manager";\n\n\n}\n\n')))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PMart.Enumeration\\src\\DemoPMart\\obj\\GX\\PMart.Enumeration.Generator\\PMart.Enumeration.Generator.EnumerationGenerator\\PersonType.g.cs",label:"PersonType.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated>\n//     This code was generated by the PMart.Enumeration.Generator source generator.\n// </auto-generated>\n\n#nullable enable\n\nnamespace DemoPMart\n{\n    public partial class PersonType : global::PMart.Enumeration.Enumeration<global::DemoPMart.PersonType>\n    {\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PMart.Enumeration.Generator", "3.1.0.0")]\n        public static readonly global::DemoPMart.PersonType Employee = new global::DemoPMart.PersonType(ValueForEmployee!);\n\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PMart.Enumeration.Generator", "3.1.0.0")]\n        public static readonly global::DemoPMart.PersonType Manager = new global::DemoPMart.PersonType(ValueForManager!);\n\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("PMart.Enumeration.Generator", "3.1.0.0")]\n        private PersonType(string value) : base(value)\n        {\n        }\n    }\n}\n')))),(0,i.kt)("h2",{id:"usefull"},"Usefull"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:a(35801).Z},"Download Example project PMart.Enumeration "))),(0,i.kt)("h3",{id:"share-pmartenumeration"},"Share PMart.Enumeration"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPMart.Enumeration&quote=PMart.Enumeration",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPMart.Enumeration&text=PMart.Enumeration:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPMart.Enumeration",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPMart.Enumeration&title=PMart.Enumeration",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPMart.Enumeration&title=PMart.Enumeration&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPMart.Enumeration",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/PMart.Enumeration"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/PMart.Enumeration")),(0,i.kt)("h3",{id:"in-the-same-category-enum---5-other-generators"},"In the same category (Enum) - 5 other generators"),(0,i.kt)("h4",{id:"credfetoenum"},(0,i.kt)("a",{parentName:"h4",href:"/docs/CredFetoEnum"},"CredFetoEnum")),(0,i.kt)("h4",{id:"enumclass"},(0,i.kt)("a",{parentName:"h4",href:"/docs/EnumClass"},"EnumClass")),(0,i.kt)("h4",{id:"enumutilities"},(0,i.kt)("a",{parentName:"h4",href:"/docs/EnumUtilities"},"EnumUtilities")),(0,i.kt)("h4",{id:"fusionreactor"},(0,i.kt)("a",{parentName:"h4",href:"/docs/FusionReactor"},"FusionReactor")),(0,i.kt)("h4",{id:"netescapadesenumgenerators"},(0,i.kt)("a",{parentName:"h4",href:"/docs/NetEscapades.EnumGenerators"},"NetEscapades.EnumGenerators")))}g.isMDXComponent=!0},35801:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/files/PMart.Enumeration-de155a8ad8f5a45a8365d977b10ee4f3.zip"}}]);