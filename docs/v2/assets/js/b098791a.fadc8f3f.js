"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[4328],{30097:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>k,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),i=a(73992),s=a(18679),l=a(68839);const o={sidebar_position:1170,title:"117 - PlantUmlClassDiagramGenerator",description:"Generating UML from class definitions",slug:"/PlantUmlClassDiagramGenerator"},m="PlantUmlClassDiagramGenerator  by Hirotada Kobayashi",p={unversionedId:"RSCG-Examples/PlantUmlClassDiagramGenerator",id:"RSCG-Examples/PlantUmlClassDiagramGenerator",title:"117 - PlantUmlClassDiagramGenerator",description:"Generating UML from class definitions",source:"@site/docs/RSCG-Examples/PlantUmlClassDiagramGenerator.md",sourceDirName:"RSCG-Examples",slug:"/PlantUmlClassDiagramGenerator",permalink:"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator",draft:!1,tags:[],version:"current",sidebarPosition:1170,frontMatter:{sidebar_position:1170,title:"117 - PlantUmlClassDiagramGenerator",description:"Generating UML from class definitions",slug:"/PlantUmlClassDiagramGenerator"},sidebar:"tutorialSidebar",previous:{title:"116 - CopyTo",permalink:"/RSCG_Examples/v2/docs/CopyTo"},next:{title:"118 - RSCG_Wait",permalink:"/RSCG_Examples/v2/docs/RSCG_Wait"}},d={},c=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share PlantUmlClassDiagramGenerator",id:"share-plantumlclassdiagramgenerator",level:3},{value:"In the same category (EnhancementProject) - 16 other generators",id:"in-the-same-category-enhancementproject---16-other-generators",level:3},{value:"AutoInvoke.Generator",id:"autoinvokegenerator",level:4},{value:"AutoSpectre",id:"autospectre",level:4},{value:"BuildInfo",id:"buildinfo",level:4},{value:"Com",id:"com",level:4},{value:"CommandLine",id:"commandline",level:4},{value:"LinqGen.Generator",id:"linqgengenerator",level:4},{value:"Pekspro.BuildInformationGenerator",id:"peksprobuildinformationgenerator",level:4},{value:"RSCG_AMS",id:"rscg_ams",level:4},{value:"RSCG_ExportDiagram",id:"rscg_exportdiagram",level:4},{value:"RSCG_FunctionsWithDI",id:"rscg_functionswithdi",level:4},{value:"RSCG_NameGenerator",id:"rscg_namegenerator",level:4},{value:"RSCG_TimeBombComment",id:"rscg_timebombcomment",level:4},{value:"RSCG_Wait",id:"rscg_wait",level:4},{value:"ThisAssembly",id:"thisassembly",level:4},{value:"ThisAssembly.Constants",id:"thisassemblyconstants",level:4},{value:"ThisAssembly.Metadata",id:"thisassemblymetadata",level:4}],u={toc:c},g="wrapper";function k(e){let{components:t,...o}=e;return(0,r.kt)(g,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"plantumlclassdiagramgenerator--by-hirotada-kobayashi"},"PlantUmlClassDiagramGenerator  by Hirotada Kobayashi"),(0,r.kt)(l.Z,{toc:c,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/PlantUmlClassDiagramGenerator.SourceGenerator?label=PlantUmlClassDiagramGenerator.SourceGenerator",alt:"Nuget"})),(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/PlantUmlClassDiagramGenerator.Attributes?label=PlantUmlClassDiagramGenerator.Attributes",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/pierre3/PlantUmlClassDiagramGenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/pierre3/PlantUmlClassDiagramGenerator?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"PlantUmlClassDiagramGenerator")),(0,r.kt)("p",{parentName:"admonition"},"This tool is designed to generate PlantUML class diagrams from C# source code. Leveraging SourceGenerator functionality, it analyzes the source code and produces PlantUML class diagrams."),(0,r.kt)("p",{parentName:"admonition"},"Author: Hirotada Kobayashi"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/"},"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/")),"   "),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/"},"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/"},"https://github.com/pierre3/PlantUmlClassDiagramGenerator/")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/"},"https://github.com/pierre3/PlantUmlClassDiagramGenerator/"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("div",{align:"center"},(0,r.kt)("strong",null,(0,r.kt)("a",{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//README.md"},"English")," | ",(0,r.kt)("a",{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//README.zh-CN.md"},"\u7b80\u4f53\u4e2d\u6587"))),(0,r.kt)("h1",{parentName:"admonition",id:"plantumlclassdiagramgenerator"},"PlantUmlClassDiagramGenerator"),(0,r.kt)("p",{parentName:"admonition"},"This is a generator to create a class-diagram of PlantUML from the C# source code."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"README.md Version revision history")),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null},"Commit"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/commit/e73b4feed9cd261271eb990a9c859f53536e8d7c"},"e73b4fe")),(0,r.kt)("td",{parentName:"tr",align:null},'Add "-excludeUmlBeginEndTags" option')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.0"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/commit/70bb8202f7f489aa2d85ce9c25c58121c8f63aed"},"70bb820")),(0,r.kt)("td",{parentName:"tr",align:null},"Because the README.md for other languages is not always updated at the same time, a version number is needed")))),(0,r.kt)("h2",{parentName:"admonition",id:"new-feature-in-development"},"New Feature in Development"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//src/PlantUmlClassDiagramGenerator.SourceGenerator"},"PlantUmlClassDiagramGenerator.SourceGenerator"))),(0,r.kt)("p",{parentName:"admonition"},"This feature is currently in alpha testing phase. Please test it out and provide your feedback. We greatly appreciate it."),(0,r.kt)("h2",{parentName:"admonition",id:"visual-studio-code-extension"},"Visual Studio Code Extension"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=pierre3.csharp-to-plantuml"},"C# to PlantUML"))),(0,r.kt)("h2",{parentName:"admonition",id:"net-core-global-tools"},".Net Core global tools"),(0,r.kt)("p",{parentName:"admonition"},"Nuget Gallery: ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator"},"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator")),(0,r.kt)("h3",{parentName:"admonition",id:"installation"},"Installation"),(0,r.kt)("p",{parentName:"admonition"},"Download and install the ",(0,r.kt)("a",{parentName:"p",href:"https://www.microsoft.com/net/download/windows"},".NET 8.0 SDK")," or newer. Once installed, run the following command."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bat"},"dotnet tool install --global PlantUmlClassDiagramGenerator\n")),(0,r.kt)("h3",{parentName:"admonition",id:"usage"},"Usage"),(0,r.kt)("p",{parentName:"admonition"},'Run the "puml-gen" command.'),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bat"},"puml-gen InputPath [OutputPath] [-dir] [-public | -ignore IgnoreAccessibilities] [-excludePaths ExcludePathList] [-createAssociation]\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"InputPath: (Required) Sets a input source file or directory name."),(0,r.kt)("li",{parentName:"ul"},"OutputPath: (Optional) Sets a output file or directory name.",(0,r.kt)("br",{parentName:"li"}),"If you omit this option, plantuml files are outputted to same directory as the input files."),(0,r.kt)("li",{parentName:"ul"},"-dir: (Optional) Specify when InputPath and OutputPath are directory names."),(0,r.kt)("li",{parentName:"ul"},"-public: (Optional) If specified, only public accessibility members are output. "),(0,r.kt)("li",{parentName:"ul"},"-ignore: (Optional) Specify the accessibility of members to ignore, with a comma separated list."),(0,r.kt)("li",{parentName:"ul"},"-excludePaths: (Optional) Specify the exclude file and directory.",(0,r.kt)("br",{parentName:"li"}),'Specifies a relative path from the "InputPath", with a comma separated list.\nTo exclude multiple paths, which contain a specific folder name, preceed the name by "',"*","*",'/". Example: "**/bin"'),(0,r.kt)("li",{parentName:"ul"},"-createAssociation: (Optional) Create object associations from references of fields and properites."),(0,r.kt)("li",{parentName:"ul"},"-allInOne: (Optional) Only if -dir is set: copy the output of all diagrams to file include.puml (this allows a PlanUMLServer to render it)."),(0,r.kt)("li",{parentName:"ul"},'-attributeRequired: (Optional) When this switch is enabled, only types with "PlantUmlDiagramAttribute" in the type declaration will be output.'),(0,r.kt)("li",{parentName:"ul"},'-excludeUmlBeginEndTags: (Optional) When this switch is enabled, it will exclude the \\"@startuml\\" and \\"@enduml\\" tags from the puml file.')),(0,r.kt)("p",{parentName:"admonition"},"examples"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bat"},"puml-gen C:\\Source\\App1\\ClassA.cs -public\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bat"},"puml-gen C:\\Source\\App1 C:\\PlantUml\\App1 -dir -ignore Private,Protected -createAssociation -allInOne\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bat"},"puml-gen C:\\Source\\App1 C:\\PlantUml\\App1 -dir -excludePaths bin,obj,Properties\n")),(0,r.kt)("h2",{parentName:"admonition",id:"specification-for-conversion-to-plantuml"},"Specification for conversion to PlantUML"),(0,r.kt)("h3",{parentName:"admonition",id:"type-declaration"},"Type Declaration"),(0,r.kt)("h4",{parentName:"admonition",id:"type-keywords"},"Type Keywords"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"C#"),(0,r.kt)("th",{parentName:"tr",align:"right"},"PlantUML"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"class")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"class"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"struct")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"struct"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"interface")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"interface"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"enum")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"enum"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"record")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<record>> class"))))),(0,r.kt)("h4",{parentName:"admonition",id:"type-modifiers"},"Type Modifiers"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"C#"),(0,r.kt)("th",{parentName:"tr",align:"right"},"PlantUML"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"abstract")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"abstract"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"static")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<static>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"partial")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<partial>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sealed")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<sealed>>"))))),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class ClassA {  \n}\nstruct StructA {\n}\ninterface InterfaceA {\n}\nrecord RecordA {\n}\nabstract class AbstractClass {\n}\nstatic class StaticClass {\n}\nsealed partial class ClassB{\n}\nenum EnumType{\n  Apple,\n  Orange,\n  Grape\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"@startuml\nclass ClassA {\n}\nstruct StructA {\n}\ninterface InterfaceA {\n}\nclass RecordA <<record>> {\n}\nabstract class AbstractClass {\n}\nclass StaticClass <<static>> {\n}\nclass ClassB <<sealed>> <<partial>> {\n}\nenum EnumType {\n    Apple,\n    Orange,\n    Grape,\n}\n@enduml\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/TypeDeclaration.png",alt:"TypeDeclaration.png"})),(0,r.kt)("h4",{parentName:"admonition",id:"generics-type"},"Generics Type"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class GenericsType<T1>{\n}\nclass GenericsType<T1,T2>{\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'class "GenericsType`1"<T1>{\n}\nclass "GenericsType`2"<T1,T2>{\n}\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/GenericsTypeDeclaration.png",alt:"GenericsTypeDeclaration.png"})),(0,r.kt)("h3",{parentName:"admonition",id:"member-declaration"},"Member Declaration"),(0,r.kt)("h4",{parentName:"admonition",id:"accessibility-modifiers"},"Accessibility Modifiers"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"C#"),(0,r.kt)("th",{parentName:"tr",align:"right"},"PlantUML"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"public")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"+"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"internal")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<internal>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"protected internal")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"# <<internal>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"protected")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"#"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"private")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"-"))))),(0,r.kt)("h4",{parentName:"admonition",id:"modifiers"},"Modifiers"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"C#"),(0,r.kt)("th",{parentName:"tr",align:"right"},"PlantUML"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"abstract")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"{abstract}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"static")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"{static}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"virtual")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<virtual>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"override")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<override>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"new")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<new>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"readonly")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<readonly>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"event")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"<<event>>"))))),(0,r.kt)("h4",{parentName:"admonition",id:"property-accessors"},"Property Accessors"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"C#"),(0,r.kt)("th",{parentName:"tr",align:"right"},"PlantUML"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"int Prop {get; set;}")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"Prop : int <<get>> <<set>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"int Prop {get;}")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"Prop : int <get>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"int Prop {get; private set }")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"Prop : int <<get>><<private set>>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"int Prop => 100;")),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"Prop : int <<get>>"))))),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'abstract class AbstractClass\n{\n    protected int _x;\n    internal int _y;\n    protected internal int _z;\n    public abstract void AbstractMethod();\n    protected virtual void VirtualMethod(string s){\n\n    }\n    public string BaseMethod(int n){\n        return "";\n    }\n}\nclass ClassM : AbstractClass\n{\n    public static readonly double PI =3.141592;\n    public int PropA { get; set; }\n    public int PropB { get; protected set; }\n    public event EventHandler SomeEvent;\n    public override void AbstractMethod(){\n        \n    }\n    protected override void VirtualMethod(string s)\n    {\n\n    }\n    public override string ToString()\n    {\n        return "override";\n    }\n    public new string BaseMethod(int n){\n        return "new";\n    }\n}\n')),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"abstract class AbstractClass {\n    # _x : int\n    <<internal>> _y : int\n    # <<internal>> _z : int\n    + {abstract} AbstractMethod() : void\n    # <<virtual>> VirtualMethod(s:string) : void\n    + BaseMethod(n:int) : string\n}\nclass ClassM {\n    + {static} <<readonly>> PI : double = 3.141592\n    + PropA : int <<get>> <<set>>\n    + PropB : int <<get>> <<protected set>>\n    +  <<event>> SomeEvent : EventHandler \n    + <<override>> AbstractMethod() : void\n    # <<override>> VirtualMethod(s:string) : void\n    + <<override>> ToString() : string\n    + <<new>> BaseMethod(n:int) : string\n}\nAbstractClass <|-- ClassM\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/MemberDeclaration.png",alt:"MemberDeclaration.png"})),(0,r.kt)("h4",{parentName:"admonition",id:"field-and-property-initializers"},"Field and Property Initializers"),(0,r.kt)("p",{parentName:"admonition"},"Only ",(0,r.kt)("strong",{parentName:"p"},"literal")," initializers are output."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class ClassC\n{\n    private int fieldA = 123;\n    public double Pi {get;} = 3.14159;\n    protected List<string> Items = new List<string>(); \n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"class ClassC {\n  - fieldA : int = 123\n  + Pi : double = 3.14159\n  # Items : List<string>\n}\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/Initializer.png",alt:"Initializer.png"})),(0,r.kt)("h3",{parentName:"admonition",id:"nested-class-declaration"},"Nested Class Declaration"),(0,r.kt)("p",{parentName:"admonition"},'Nested classes are expanded and associated with "OuterClass + - InnerClass".'),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class OuterClass \n{\n  class InnerClass \n  {\n    struct InnerStruct \n    {\n\n    }\n  }\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"class OuterClass{\n\n}\nclass InnerClass{\n\n}\n<<struct>> class InnerStruct {\n\n}\nOuterClass +- InnerClass\nInnerClass +- InnerStruct\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/NestedClass.png",alt:"NestedClass.png"})),(0,r.kt)("h3",{parentName:"admonition",id:"inheritance-relationsips"},"Inheritance Relationsips"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"abstract class BaseClass\n{\n    public abstract void AbstractMethod();\n    protected virtual int VirtualMethod(string s) => 0;\n}\nclass SubClass : BaseClass\n{\n    public override void AbstractMethod() { }\n    protected override int VirtualMethod(string s) => 1;\n}\n\ninterface IInterfaceA {}\ninterface IInterfaceA<T>:IInterfaceA\n{\n    T Value { get; }\n}\nclass ImplementClass : IInterfaceA<int>\n{\n    public int Value { get; }\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'abstract class BaseClass {\n    + {abstract} AbstractMethod() : void\n    # <<virtual>> VirtualMethod(s:string) : int\n}\nclass SubClass {\n    + <<override>> AbstractMethod() : void\n    # <<override>> VirtualMethod(s:string) : int\n}\ninterface IInterfaceA {\n}\ninterface "IInterfaceA`1"<T> {\n    Value : T <<get>>\n}\nclass ImplementClass {\n    + Value : int <<get>>\n}\nBaseClass <|-- SubClass\nIInterfaceA <|-- "IInterfaceA`1"\n"IInterfaceA`1" "<int>" <|-- ImplementClass\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/InheritanceRelationsips.png",alt:"InheritanceRelationsips.png"})),(0,r.kt)("h3",{parentName:"admonition",id:"associations-from-references-of-fields-and-properties"},"Associations (from references of fields and properties)"),(0,r.kt)("p",{parentName:"admonition"},'If you specify the "createAssociation" option, object associations is created from field and property references.'),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class ClassA{\n    public IList<string> Strings{get;} = new List<string>();\n    public Type1 Prop1{get;set;}\n    public Type2 field1;\n}\n\nclass Type1 {\n    public int value1{get;set;}\n}\n\nclass Type2{\n    public string string1{get;set;}\n    public ExternalType Prop2 {get;set;}\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'@startuml\nclass ClassA {\n}\nclass Type1 {\n    + value1 : int <<get>> <<set>>\n}\nclass Type2 {\n    + string1 : string <<get>> <<set>>\n}\nclass "IList`1"<T> {\n}\nClassA o-> "Strings<string>" "IList`1"\nClassA --\x3e "Prop1" Type1\nClassA --\x3e "field1" Type2\nType2 --\x3e "Prop2" ExternalType\n@enduml\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/Associations.png",alt:"InheritanceRelationsips.png"})),(0,r.kt)("h3",{parentName:"admonition",id:"record-types-with-parameter-list"},"Record types (with parameter list)"),(0,r.kt)("p",{parentName:"admonition"},"Record types in C# 9 can have a parameter list. In these cases these parameters\nare added as properties to the class."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"C#")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"record Person(string Name, int Age);\n\nrecord Group(string GroupName) {\n    public Person[] Members { get; init; }\n}\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PlantUML")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"@startuml\nclass Person <<record>> {\n    + Name : string <<get>> <<init>>\n    + Age : int <<get>> <<init>>\n}\nclass Group <<record>> {\n    + GroupName : string <<get>> <<init>>\n    + Members : Person[] <<get>> <<init>>\n}\n@enduml\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/RecordParameterList.png",alt:"InheritanceRelationsips.png"})),(0,r.kt)("h2",{parentName:"admonition",id:"attribute-based-configuration"},"Attribute-based configuration"),(0,r.kt)("p",{parentName:"admonition"},"You can add the package ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes"},"PlantUmlClassDiagramGenerator.Attributes")," to your C# project for attribute-based configuration."),(0,r.kt)("h3",{parentName:"admonition",id:"plantumldiagramattribute"},"PlantUmlDiagramAttribute"),(0,r.kt)("p",{parentName:"admonition"},"Only types to which PlantUmlDiagramAttribute has been added will be output.\nThis attribute is enabled if the -attributeRequired switch is added to the command line argument."),(0,r.kt)("p",{parentName:"admonition"},"This attribute can be added only to type declalerations."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"class"),(0,r.kt)("li",{parentName:"ul"},"struct"),(0,r.kt)("li",{parentName:"ul"},"enum"),(0,r.kt)("li",{parentName:"ul"},"record")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class ClassA\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n[PlantUmlDiagram]\nclass ClassB\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Only ClassB with PlantUmlDiagramAttribute will be output."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"@startuml\nclass ClassB {\n    + Name : string <<get>> <<set>>\n    + Age : int <<get>> <<set>>\n}\n@enduml\n")),(0,r.kt)("h3",{parentName:"admonition",id:"plantumlignoreattribute"},"PlantUmlIgnoreAttribute"),(0,r.kt)("p",{parentName:"admonition"},"Elements with this attribute added are excluded from the output."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[PlantUmlIgnore]\nclass ClassA\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nclass ClassB\n{\n    public string Name { get; set; }\n    [PlantUmlIgnore]\n    public int Age { get; set; }\n}\n\nclass ClassC\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    [PlantUmlIgnore]\n    public ClassC(string name, int age) => (Name, Age) = (name, age);\n    \n    public void MethodA();\n    \n    [PlantUmlIgnore]\n    public void MethodB();\n}\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"@startuml\nclass ClassB {\n    + Name : string\n}\nclass ClassC {\n    + Name : string\n    + Age : int\n    + MethodA() : void\n}\n@enduml\n")),(0,r.kt)("h3",{parentName:"admonition",id:"plantumlassociationattribute"},"PlantUmlAssociationAttribute"),(0,r.kt)("p",{parentName:"admonition"},"By adding this attribute, you can define association between classes.\nThis attribute can be added to properties, fields and method parameters."),(0,r.kt)("p",{parentName:"admonition"},"The details of the association are defined in the following properties."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Name"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the type name on the leaf node side."),(0,r.kt)("li",{parentName:"ul"},"If omitted, the name of the element to which the attribute is added is used."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Association"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the edge portion of the association.Sets a valid string in PlantUML."),(0,r.kt)("li",{parentName:"ul"},'If omitted, "--" is used.'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"RootLabel"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the label to be displayed on the root node side."),(0,r.kt)("li",{parentName:"ul"},"If omitted, nothing is displayed. "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Label"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the label to be displayed in the center of the edge."),(0,r.kt)("li",{parentName:"ul"},"If omitted, nothing is displayed. "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"LeafLabel")," ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the label to be displayed on the leaf node side."),(0,r.kt)("li",{parentName:"ul"},"If omitted, nothing is displayed.  ")))),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'class Parameters\n{\n    public string A { get; set; }\n    public string B { get; set; }\n}\n\nclass CustomAssociationSample\n{\n    [PlantUmlAssociation(Name = "Name", Association = "*--\x3e", LeafLabel = "LeafLabel", Label= "Label", RootLabel = "RootLabel")] \n    public ClassA A { get; set; }\n}\n\nclass CollectionItemsSample\n{\n    [PlantUmlAssociation(Name = "Item", Association = "o--", LeafLabel = "0..*", Label = "Items")]\n    public IList<Item> Items { get; set; }\n}\n\nclass MethodParamtersSample\n{\n    public void Run([PlantUmlAssociation(Association = "..>", Label = "use")] Parameters p)\n    {\n        Console.WriteLine($"{p.A},{p.B}");\n    }\n\n    private ILogger logger;\n    public MyClass([PlantUmlAssociation(Association = "..>", Label = "Injection")] ILogger logger)\n    {\n        this.logger = logger;\n    }\n}\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'@startuml\nclass Parameters {\n    + A : string <<get>> <<set>>\n    + B : string <<get>> <<set>>\n}\nclass CustomAssociationSample {\n}\nclass CollectionItemsSample {\n}\nclass MethodParamtersSample {\n    + Run(p:Parameters) : void\n    + MyClass(logger:ILogger)\n}\nCustomAssociationSample "RootLabel" *--\x3e "LeafLabel" Name : "Label"\nCollectionItemsSample o-- "0..*" Item : "Items"\nMethodParamtersSample ..> Parameters : "use"\nMethodParamtersSample ..> ILogger : "Injection"\n@enduml\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/CustomAssociation.png",alt:"CustomAssociation.png"})),(0,r.kt)("h3",{parentName:"admonition",id:"plantumlignoreassociationattribute"},"PlantUmlIgnoreAssociationAttribute"),(0,r.kt)("p",{parentName:"admonition"},"This attribute can be added to properties and fields.\nProperties (or fields) with this attribute are described as members of the class without any association."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'class User\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nclass ClassA\n{\n    public static User DefaultUser { get; }\n    public IList<User> Users { get; }\n\n    public ClassA(IList<User> users)\n    {\n        Users = users;\n        DefaultUser = new User()\n        {\n            Name = "DefaultUser",\n            Age = "20"\n        };\n    }\n}\n\nclass ClassB\n{\n    [PlantUmlIgnoreAssociation]\n    public static User DefaultUser { get; }\n\n    [PlantUmlIgnoreAssociation]\n    public IList<User> Users { get; }\n\n    public ClassB(IList<User> users)\n    {\n        Users = users;\n        DefaultUser = new User()\n        {\n            Name = "DefaultUser",\n            Age = "20"\n        };\n    }\n}\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'@startuml\nclass User {\n    + Name : string <<get>> <<set>>\n    + Age : int <<get>> <<set>>\n}\nclass ClassA {\n    + ClassA(users:IList<User>)\n}\nclass ClassB {\n    + {static} DefaultUser : User <<get>>\n    + Users : IList<User> <<get>>\n    + ClassB(users:IList<User>)\n}\nclass "IList`1"<T> {\n}\nClassA --\x3e "DefaultUser" User\nClassA --\x3e "Users<User>" "IList`1"\n@enduml\n')),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/IgnoreAssociation.png",alt:"IgnoreAssociation.png"}))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Generating UML from class definitions")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"PlantUmlClassDiagramGenerator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {12}",showLineNumbers:!0,"{12}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    \x3c!--<PackageReference Include="PlantUmlClassDiagramGenerator.Attributes" Version="1.3.0.1" />--\x3e\n    <PackageReference Include="PlantUmlClassDiagramGenerator.SourceGenerator" Version="0.1.9-alpha">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n\n    <PropertyGroup>\n    \x3c!--<PropertyGroup Condition="\'$(Configuration)|$(Platform)\'==\'Release|AnyCPU\'">--\x3e\n        <DefineConstants>$(DefineConstants);GENERATE_PLANTUML</DefineConstants>\n    </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    \n    \n    \n</Project>\n\n'))),(0,r.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"PlantUmlClassDiagramGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing DemoClass2Text;\n\nPerson person = new()\n{\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nConsole.WriteLine(person.FullName());\n\n'))),(0,r.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"PlantUmlClassDiagramGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nnamespace DemoClass2Text\n{\n    [PlantUmlClassDiagramGenerator.SourceGenerator.Attributes.PlantUmlDiagram]\n    internal class Person\n    {\n        public string? FirstName { get; set; }\n        public string? LastName { get; set; }\n        public string? FullName() => $"{FirstName} {LastName}";\n    }\n}\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\obj\\GX\\PlantUmlClassDiagramGenerator.SourceGenerator\\PlantUmlClassDiagramGenerator.SourceGenerator.PlantUmlSourceGenerator\\Attributes.cs",label:"Attributes.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace PlantUmlClassDiagramGenerator.SourceGenerator.Attributes;\n\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Enum | System.AttributeTargets.Struct)]\ninternal class PlantUmlDiagramAttribute : System.Attribute\n{ }\n")))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(22691).Z},"Download Example project PlantUmlClassDiagramGenerator "))),(0,r.kt)("h3",{id:"share-plantumlclassdiagramgenerator"},"Share PlantUmlClassDiagramGenerator"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&quote=PlantUmlClassDiagramGenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&text=PlantUmlClassDiagramGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&title=PlantUmlClassDiagramGenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&title=PlantUmlClassDiagramGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator")),(0,r.kt)("h3",{id:"in-the-same-category-enhancementproject---16-other-generators"},"In the same category (EnhancementProject) - 16 other generators"),(0,r.kt)("h4",{id:"autoinvokegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/AutoInvoke.Generator"},"AutoInvoke.Generator")),(0,r.kt)("h4",{id:"autospectre"},(0,r.kt)("a",{parentName:"h4",href:"/docs/AutoSpectre"},"AutoSpectre")),(0,r.kt)("h4",{id:"buildinfo"},(0,r.kt)("a",{parentName:"h4",href:"/docs/BuildInfo"},"BuildInfo")),(0,r.kt)("h4",{id:"com"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Com"},"Com")),(0,r.kt)("h4",{id:"commandline"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CommandLine"},"CommandLine")),(0,r.kt)("h4",{id:"linqgengenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/LinqGen.Generator"},"LinqGen.Generator")),(0,r.kt)("h4",{id:"peksprobuildinformationgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Pekspro.BuildInformationGenerator"},"Pekspro.BuildInformationGenerator")),(0,r.kt)("h4",{id:"rscg_ams"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_AMS"},"RSCG_AMS")),(0,r.kt)("h4",{id:"rscg_exportdiagram"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_ExportDiagram"},"RSCG_ExportDiagram")),(0,r.kt)("h4",{id:"rscg_functionswithdi"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_FunctionsWithDI"},"RSCG_FunctionsWithDI")),(0,r.kt)("h4",{id:"rscg_namegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_NameGenerator"},"RSCG_NameGenerator")),(0,r.kt)("h4",{id:"rscg_timebombcomment"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_TimeBombComment"},"RSCG_TimeBombComment")),(0,r.kt)("h4",{id:"rscg_wait"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_Wait"},"RSCG_Wait")),(0,r.kt)("h4",{id:"thisassembly"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ThisAssembly"},"ThisAssembly")),(0,r.kt)("h4",{id:"thisassemblyconstants"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ThisAssembly.Constants"},"ThisAssembly.Constants")),(0,r.kt)("h4",{id:"thisassemblymetadata"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ThisAssembly.Metadata"},"ThisAssembly.Metadata")))}k.isMDXComponent=!0},22691:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/PlantUmlClassDiagramGenerator-cb96388fadc35aad5a867b075c756c5f.zip"}}]);