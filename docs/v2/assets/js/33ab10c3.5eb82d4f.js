"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2675],{8379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>k,frontMatter:()=>m,metadata:()=>p,toc:()=>d});var a=n(7462),r=(n(7294),n(4137)),i=n(3992),o=n(425),s=n(8839);const m={sidebar_position:420,title:"42 - Immutype",description:"Immutable from constructors",slug:"/Immutype"},l="Immutype  by Nikolay Pianikov",p={unversionedId:"RSCG-Examples/Immutype",id:"RSCG-Examples/Immutype",title:"42 - Immutype",description:"Immutable from constructors",source:"@site/docs/RSCG-Examples/Immutype.md",sourceDirName:"RSCG-Examples",slug:"/Immutype",permalink:"/RSCG_Examples/v2/docs/Immutype",draft:!1,tags:[],version:"current",sidebarPosition:420,frontMatter:{sidebar_position:420,title:"42 - Immutype",description:"Immutable from constructors",slug:"/Immutype"},sidebar:"tutorialSidebar",previous:{title:"41 - GeneratorEquals",permalink:"/RSCG_Examples/v2/docs/GeneratorEquals"},next:{title:"43 - spreadcheetah",permalink:"/RSCG_Examples/v2/docs/spreadcheetah"}},u={},d=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Immutype",id:"share-immutype",level:3},{value:"In the same category (EnhancementClass)",id:"in-the-same-category-enhancementclass",level:2},{value:"ApparatusAOT",id:"apparatusaot",level:3},{value:"Biwen.AutoClassGen",id:"biwenautoclassgen",level:3},{value:"BuilderGenerator",id:"buildergenerator",level:3},{value:"DudNet",id:"dudnet",level:3},{value:"FastGenericNew",id:"fastgenericnew",level:3},{value:"GeneratorEquals",id:"generatorequals",level:3},{value:"Ling.Audit",id:"lingaudit",level:3},{value:"Lombok.NET",id:"lomboknet",level:3},{value:"M31.FluentAPI",id:"m31fluentapi",level:3},{value:"MemoryPack",id:"memorypack",level:3},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:3},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:3},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:3},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:3},{value:"Roozie.AutoInterface",id:"roozieautointerface",level:3},{value:"RSCG_Decorator",id:"rscg_decorator",level:3},{value:"RSCG_Static",id:"rscg_static",level:3},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:3},{value:"StaticReflection",id:"staticreflection",level:3},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:3},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:3},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:3},{value:"TelemetryLogging",id:"telemetrylogging",level:3}],c={toc:d},h="wrapper";function k(e){let{components:t,...m}=e;return(0,r.kt)(h,(0,a.Z)({},c,m,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"immutype--by-nikolay-pianikov"},"Immutype  by Nikolay Pianikov"),(0,r.kt)(s.Z,{toc:d,mdxType:"TOCInline"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Immutype/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Immutype?label=Immutype",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DevTeam/Immutype"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/DevTeam/Immutype?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/DevTeam/Immutype?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"Immutype")),(0,r.kt)("p",{parentName:"admonition"},"Immutable for .NET."),(0,r.kt)("p",{parentName:"admonition"},"Author: Nikolay Pianikov "),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Immutype/"},"https://www.nuget.org/packages/Immutype/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DevTeam/Immutype"},"https://github.com/DevTeam/Immutype")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DevTeam/Immutype"},"https://github.com/DevTeam/Immutype"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"immutype"},"Immutype"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Immutype"},(0,r.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/Immutype",alt:"NuGet"}))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"http://teamcity.jetbrains.com/viewType.html?buildTypeId=OpenSourceProjects_DevTeam_Immutype_BuildAndTestBuildType&guest=1"},(0,r.kt)("img",{src:"http://teamcity.jetbrains.com/app/rest/builds/buildType:(id:OpenSourceProjects_DevTeam_Immutype_BuildAndTestBuildType)/statusIcon"}))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"Immutype")," is ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"},".NET code generator")," creating extension methods for records, structures, and classes marked by the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"[Immutype.Target]")," to efficiently operate with instances of these types like with immutable ones."),(0,r.kt)("p",{parentName:"admonition"},"For instance, for the type Foo for the constructor parameter ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"values"))," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<int>")," following extension methods are generated:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithValues(this Foo it, params int[] values)")," - to replace values by the new ones using a method with variable number of arguments"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithValues(this Foo it, IEnumerable<int> values)")," - to replace values by the new ones"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo AddValues(this Foo it, params int[] values)")," - to add values using a method with variable number of arguments"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo AddValues(this Foo it, IEnumerable<int> values)")," - to add values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo RemoveValues(this Foo it, params int[] values)")," - to remove values using a method with variable number of arguments"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo RemoveValues(this Foo it, IEnumerable<int> values)")," - to remove values"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo ClearValues(this Foo it)")," - to clear all values")),(0,r.kt)("p",{parentName:"admonition"},"For the type Foo for the constructor parameter ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"value"))," of other types, like ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", with default value ",(0,r.kt)("inlineCode",{parentName:"p"},"99")," following extension methods are generated:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithValue(this Foo it, int value)")," - to replace a value by the new one"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Foo WithDefaultValue(this Foo it)")," - to replace a value by the default value ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("strong",{parentName:"em"},"99")))),(0,r.kt)("p",{parentName:"admonition"},"The extensions methods above are generating automatically for each ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"internal")," type, like ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Foo"))," marked by the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"[Immutype.Target]")," in the static class named as ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"FooExtensions")),". This generated class ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"FooExtensions"))," is static, has the same accessibility level and the same namespace like a target class ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Foo")),". Each generated static extension method has two attributes:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]")," - to improve performance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[Pure]")," - to indicate that this method is pure, that is, it does not make any visible state changes")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"Immutype")," supports nullable ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references"},"reference")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types"},"value")," types and the following list of enumerable types:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Arrays"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IEnumerable<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyCollection<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ICollection<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HashSet<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ISet<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Queue<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Stack<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyCollection<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlyList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IReadOnlySet<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IImmutableList<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableArray<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableQueue<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IImmutableQueue<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImmutableStack<T>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IImmutableStack<T>"))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"Immutype")," supports ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.iincrementalgenerator"},"IIncrementalGenerator")," as well as ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isourcegenerator"},"ISourceGenerator")," so it works quite effective."),(0,r.kt)("h2",{parentName:"admonition",id:"nuget-package"},"NuGet package"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Immutype"},(0,r.kt)("img",{parentName:"a",src:"https://buildstats.info/nuget/Immutype",alt:"NuGet"}))),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Package Manager"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Install-Package Immutype\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},".NET CLI"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"dotnet add package Immutype\n")))),(0,r.kt)("h2",{parentName:"admonition",id:"development-environment-requirements"},"Development environment requirements"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/download/dotnet/5.0"},".NET SDK 5.0.102+")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-40"},"C# v.6 or newer"))),(0,r.kt)("h2",{parentName:"admonition",id:"supported-frameworks"},"Supported frameworks"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/core/"},".NET and .NET Core")," 1.0+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/standard/net-standard"},".NET Standard")," 1.0+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/framework/"},".NET Framework")," 3.5+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/windows/uwp/index"},"UWP/XBOX")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/apps/iot"},".NET IoT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/apps/xamarin"},"Xamarin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/maui/"},".NET Multi-platform App UI (MAUI)"))),(0,r.kt)("h2",{parentName:"admonition",id:"usage-scenarios"},"Usage Scenarios"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Basics",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sample-scenario"},"Sample scenario")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#array"},"Array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#applying-defaults"},"Applying defaults")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#clearing"},"Clearing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#immutable-collection"},"Immutable collection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#removing"},"Removing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#generic-types"},"Generic types")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nullable-collection"},"Nullable collection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#set"},"Set")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#record-with-constructor"},"Record with constructor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#explicit-constructor-choice"},"Explicit constructor choice"))))),(0,r.kt)("h3",{parentName:"admonition",id:"sample-scenario"},"Sample scenario"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person(\n    string Name,\n    bool HasPassport = true,\n    int Age = 0,\n    ImmutableArray<Person> Friends = default);\n\npublic class SampleScenario\n{\n    public void Run()\n    {\n        var john = new Person("John", false, 15)\n            .AddFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n            \n        john.Friends.Length.ShouldBe(2);\n\n        john = john.WithAge(16).WithDefaultHasPassport();\n        john.Age.ShouldBe(16);\n        john.HasPassport.ShouldBeTrue();\n\n        john = john.AddFriends(\n            new Person("Daniel").WithAge(17),\n            new Person("Sophia").WithAge(18));\n        \n        john.Friends.Length.ShouldBe(4);\n            \n        john = john.RemoveFriends(new Person("David").WithAge(16));\n\n        john.Friends.Length.ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"array"},"Array"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(string Name, int Age = 0, params Person[] Friends);\n\npublic class Array\n{ \n    public void Run()\n    {\n        var john = new Person("John")\n            .WithAge(15)\n            .AddFriends(new Person("David").WithAge(16))\n            .AddFriends(\n                new Person("James"),\n                new Person("Daniel").WithAge(17));\n        \n        john.Friends.Length.ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"applying-defaults"},"Applying defaults"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(string Name = "John", int Age = 17);\n\npublic class ApplyingDefaults\n{\n    public void Run()\n    {\n        var john = new Person("David", 15)\n            .WithDefaultAge()\n            .WithDefaultName();\n        \n        john.Name.ShouldBe("John");\n        john.Age.ShouldBe(17);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"clearing"},"Clearing"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(\n    string Name,\n    int Age = 0,\n    params Person[] Friends);\n\npublic class Clearing\n{\n    public void Run()\n    {\n        var john = new Person("John",15, new Person("David").WithAge(16))\n            .AddFriends(new Person("James"));\n\n        john = john.ClearFriends();\n        \n        john.Friends.Length.ShouldBe(0);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"immutable-collection"},"Immutable collection"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly struct Person\n{\n    public readonly string Name;\n    public readonly int Age;\n    public readonly IImmutableList<Person> Friends;\n\n    public Person(\n        string name,\n        int age = 0,\n        IImmutableList<Person>? friends = default)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends ?? ImmutableList<Person>.Empty;\n    }\n};\n\npublic class ImmutableCollection\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .WithFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17))\n            .AddFriends(\n                new Person("David").WithAge(22));\n        \n        john.Friends.Count.ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"removing"},"Removing"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly record struct Person(\n    string Name,\n    int Age = 0,\n    params Person[] Friends);\n\npublic class Removing\n{\n    public void Run()\n    {\n        var john = new Person("John",15, new Person("David").WithAge(16))\n            .AddFriends(new Person("James"));\n\n        john = john.RemoveFriends(new Person("James"));\n        \n        john.Friends.Length.ShouldBe(1);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"generic-types"},"Generic types"),(0,r.kt)("p",{parentName:"admonition"},"It is possible to use generic types including any generic constraints."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person<TAge>(string Name, TAge Age = default, IEnumerable<Person<TAge>>? Friends = default) \n    where TAge : struct;\n\npublic class GenericTypes\n{ \n    public void Run()\n    {\n        var john = new Person<int>("John")\n            .WithAge(15)\n            .WithFriends(new Person<int>("David").WithAge(16))\n            .AddFriends(\n                new Person<int>("James"),\n                new Person<int>("Daniel").WithAge(17));\n        \n        john.Friends?.Count().ShouldBe(3);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"nullable-collection"},"Nullable collection"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person(\n    string Name,\n    int? Age = default,\n    ICollection<Person>? Friends = default);\n\npublic class NullableCollection\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .AddFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n        \n        john.Friends?.Count.ShouldBe(2);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"set"},"Set"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person(\n    string Name,\n    int Age = 0,\n    ISet<Person>? Friends = default);\n\npublic class Set\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .AddFriends(\n                new Person("David").WithAge(16),\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n        \n        john.Friends?.Count.ShouldBe(2);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"record-with-constructor"},"Record with constructor"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal record Person\n{\n    public Person(\n        string name,\n        int? age = default,\n        ICollection<Person>? friends = default)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends;\n    }\n\n    public string Name { get; }\n\n    public int? Age { get; }\n\n    public ICollection<Person>? Friends { get; }\n\n    public void Deconstruct(\n        out string name,\n        out int? age,\n        out ICollection<Person>? friends)\n    {\n        name = Name;\n        age = Age;\n        friends = Friends;\n    }\n}\n\npublic class RecordWithConstructor\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .WithFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17)\n                    .WithFriends(new Person("Tyler").WithAge(16)));\n        \n        john.Friends?.Count.ShouldBe(2);\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"explicit-constructor-choice"},"Explicit constructor choice"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-CSharp"},'[Immutype.Target]\ninternal readonly struct Person\n{\n    public readonly string Name;\n    public readonly int Age;\n    public readonly IImmutableList<Person> Friends;\n\n    // You can explicitly select a constructor by marking it with the [Immutype.Target] attribute\n    [Immutype.Target]\n    public Person(\n        string name,\n        int age = 0,\n        IImmutableList<Person>? friends = default)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends ?? ImmutableList<Person>.Empty;\n    }\n    \n    public Person(\n        string name,\n        int age,\n        IImmutableList<Person>? friends,\n        int someArg = 99)\n    {\n        Name = name;\n        Age = age;\n        Friends = friends ?? ImmutableList<Person>.Empty;\n    }\n};\n\npublic class ExplicitConstructorChoice\n{\n    public void Run()\n    {\n        var john = new Person("John",15)\n            .WithFriends(\n                new Person("David").WithAge(16),\n                new Person("James").WithAge(17))\n            .AddFriends(\n                new Person("David").WithAge(22));\n        \n        john.Friends.Count.ShouldBe(3);\n    }\n}\n'))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Immutable from constructors")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"Immutype")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Immutype" Version="1.0.14" OutputItemType="Analyzer" >\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n</Project>\n\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Immutype\\src\\ImmutypeDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Immutype")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using ImmutypeDemo;\n\nPerson p = new("Andrei","Ignat");\nvar p2= p.WithFirstName("Test");\nConsole.WriteLine(p2.LastName);\n'))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Immutype\\src\\ImmutypeDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Immutype")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace ImmutypeDemo;\n\n[Immutype.Target]\ninternal class Person\n{\n    public string? FirstName;\n    public Person()\n    {\n    }\n    public Person(string? FirstName,string LastName)\n    {\n        this.FirstName = FirstName;\n        this.LastName = LastName;\n    }\n    public int ID { get; set; }\n    public string? LastName { get; set;}\n}\n\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Immutype\\src\\ImmutypeDemo\\obj\\GX\\Immutype\\Immutype.SourceGenerator\\Immutype.Components.Contracts.cs",label:"Immutype.Components.Contracts.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// ReSharper disable CheckNamespace\n// ReSharper disable ClassNeverInstantiated.Global\nnamespace Immutype\n{\n    using System;\n    \n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor, Inherited = false)]\n    public class TargetAttribute: Attribute { }\n}\n"))),(0,r.kt)(o.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Immutype\\src\\ImmutypeDemo\\obj\\GX\\Immutype\\Immutype.SourceGenerator\\ImmutypeDemo.Person.cs",label:"ImmutypeDemo.Person.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'namespace ImmutypeDemo;\n\nusing System.Collections.Generic;\nusing System.Linq;\n[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] \ninternal static partial class PersonExtensions{\n\n\n[System.Runtime.CompilerServices.MethodImplAttribute((System.Runtime.CompilerServices.MethodImplOptions)256),System.Diagnostics.Contracts.PureAttribute]\npublic static ImmutypeDemo.Person WithFirstName(this ImmutypeDemo.Person it,string? FirstName){\nif( it==default(ImmutypeDemo.Person))throw new System.ArgumentNullException("it");\nreturn new ImmutypeDemo.Person(FirstName, it.LastName );}\n\n[System.Runtime.CompilerServices.MethodImplAttribute((System.Runtime.CompilerServices.MethodImplOptions)256),System.Diagnostics.Contracts.PureAttribute]\npublic static ImmutypeDemo.Person WithLastName(this ImmutypeDemo.Person it,string LastName){\nif( it==default(ImmutypeDemo.Person))throw new System.ArgumentNullException("it");\nif(LastName==default(string ))throw new System.ArgumentNullException("LastName");\nreturn new ImmutypeDemo.Person( it.FirstName,LastName);}}\n\n')))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:n(556).Z},"Download Example project Immutype "))),(0,r.kt)("h3",{id:"share-immutype"},"Share Immutype"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FImmutype&quote=Immutype",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FImmutype&text=Immutype:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FImmutype",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FImmutype&title=Immutype",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FImmutype&title=Immutype&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FImmutype",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Immutype"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Immutype")),(0,r.kt)("h2",{id:"in-the-same-category-enhancementclass"},"In the same category (EnhancementClass)"),(0,r.kt)("h3",{id:"apparatusaot"},(0,r.kt)("a",{parentName:"h3",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,r.kt)("h3",{id:"biwenautoclassgen"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Biwen.AutoClassGen"},"Biwen.AutoClassGen")),(0,r.kt)("h3",{id:"buildergenerator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/BuilderGenerator"},"BuilderGenerator")),(0,r.kt)("h3",{id:"dudnet"},(0,r.kt)("a",{parentName:"h3",href:"/docs/DudNet"},"DudNet")),(0,r.kt)("h3",{id:"fastgenericnew"},(0,r.kt)("a",{parentName:"h3",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,r.kt)("h3",{id:"generatorequals"},(0,r.kt)("a",{parentName:"h3",href:"/docs/GeneratorEquals"},"GeneratorEquals")),(0,r.kt)("h3",{id:"lingaudit"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Ling.Audit"},"Ling.Audit")),(0,r.kt)("h3",{id:"lomboknet"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Lombok.NET"},"Lombok.NET")),(0,r.kt)("h3",{id:"m31fluentapi"},(0,r.kt)("a",{parentName:"h3",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,r.kt)("h3",{id:"memorypack"},(0,r.kt)("a",{parentName:"h3",href:"/docs/MemoryPack"},"MemoryPack")),(0,r.kt)("h3",{id:"meziantoupolyfill"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Meziantou.Polyfill"},"Meziantou.Polyfill")),(0,r.kt)("h3",{id:"microsoftextensionslogging"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,r.kt)("h3",{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"},"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator")),(0,r.kt)("h3",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,r.kt)("h3",{id:"roozieautointerface"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Roozie.AutoInterface"},"Roozie.AutoInterface")),(0,r.kt)("h3",{id:"rscg_decorator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,r.kt)("h3",{id:"rscg_static"},(0,r.kt)("a",{parentName:"h3",href:"/docs/RSCG_Static"},"RSCG_Static")),(0,r.kt)("h3",{id:"rscg_utilitytypes"},(0,r.kt)("a",{parentName:"h3",href:"/docs/RSCG_UtilityTypes"},"RSCG_UtilityTypes")),(0,r.kt)("h3",{id:"staticreflection"},(0,r.kt)("a",{parentName:"h3",href:"/docs/StaticReflection"},"StaticReflection")),(0,r.kt)("h3",{id:"syncmethodgenerator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,r.kt)("h3",{id:"systemruntimeinteropservices"},(0,r.kt)("a",{parentName:"h3",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,r.kt)("h3",{id:"systemtextregularexpressions"},(0,r.kt)("a",{parentName:"h3",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")),(0,r.kt)("h3",{id:"telemetrylogging"},(0,r.kt)("a",{parentName:"h3",href:"/docs/TelemetryLogging"},"TelemetryLogging")))}k.isMDXComponent=!0},556:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/Immutype-c76dab316a1e7a8b5020f672d7d269a6.zip"}}]);