"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9766],{28689:(e,t,n)=>{n.d(t,{Ay:()=>o,RM:()=>i});var r=n(74848),a=n(28453);const i=[{value:"Category &quot;FilesToCode&quot; has the following generators:",id:"category-filestocode-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function s(e){const t={a:"a",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"category-filestocode-has-the-following-generators",children:'Category "FilesToCode" has the following generators:'}),"\n",(0,r.jsxs)(t.p,{children:["1 ",(0,r.jsx)(t.a,{href:"/docs/Chorn.EmbeddedResourceAccessGenerator",children:"Chorn.EmbeddedResourceAccessGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["2 ",(0,r.jsx)(t.a,{href:"/docs/corecraft",children:"corecraft"})]}),"\n",(0,r.jsxs)(t.p,{children:["3 ",(0,r.jsx)(t.a,{href:"/docs/Datacute.EmbeddedResourcePropertyGenerator",children:"Datacute.EmbeddedResourcePropertyGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["4 ",(0,r.jsx)(t.a,{href:"/docs/DotnetYang",children:"DotnetYang"})]}),"\n",(0,r.jsxs)(t.p,{children:["5 ",(0,r.jsx)(t.a,{href:"/docs/EmbedResourceCSharp",children:"EmbedResourceCSharp"})]}),"\n",(0,r.jsxs)(t.p,{children:["6 ",(0,r.jsx)(t.a,{href:"/docs/LingoGen",children:"LingoGen"})]}),"\n",(0,r.jsxs)(t.p,{children:["7 ",(0,r.jsx)(t.a,{href:"/docs/NFH.FileEmbed",children:"NFH.FileEmbed"})]}),"\n",(0,r.jsxs)(t.p,{children:["8 ",(0,r.jsx)(t.a,{href:"/docs/NotNotAppSettings",children:"NotNotAppSettings"})]}),"\n",(0,r.jsxs)(t.p,{children:["9 ",(0,r.jsx)(t.a,{href:"/docs/Podimo.ConstEmbed",children:"Podimo.ConstEmbed"})]}),"\n",(0,r.jsxs)(t.p,{children:["10 ",(0,r.jsx)(t.a,{href:"/docs/ResXGenerator",children:"ResXGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["11 ",(0,r.jsx)(t.a,{href:"/docs/RSCG_JSON2Class",children:"RSCG_JSON2Class"})]}),"\n",(0,r.jsxs)(t.p,{children:["12 ",(0,r.jsx)(t.a,{href:"/docs/RSCG_Utils",children:"RSCG_Utils"})]}),"\n",(0,r.jsxs)(t.p,{children:["13 ",(0,r.jsx)(t.a,{href:"/docs/Strings.ResourceGenerator",children:"Strings.ResourceGenerator"})]}),"\n",(0,r.jsxs)(t.p,{children:["14 ",(0,r.jsx)(t.a,{href:"/docs/ThisAssembly_Resources",children:"ThisAssembly_Resources"})]}),"\n",(0,r.jsxs)(t.p,{children:["15 ",(0,r.jsx)(t.a,{href:"/docs/ThisAssembly.Strings",children:"ThisAssembly.Strings"})]}),"\n",(0,r.jsxs)(t.p,{children:["16 ",(0,r.jsx)(t.a,{href:"/docs/Weave",children:"Weave"})]}),"\n",(0,r.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"/docs/Categories/FilesToCode",children:"FilesToCode"})})]})}function o(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},64769:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/files/DotnetYang-18f8cd14669e868ae879f934d3dd2fb5.zip"},78056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>g,frontMatter:()=>c,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"RSCG-Examples/DotnetYang","title":"145 - DotnetYang","description":"Generating source code from YANG models","source":"@site/docs/RSCG-Examples/DotnetYang.md","sourceDirName":"RSCG-Examples","slug":"/DotnetYang","permalink":"/RSCG_Examples/v2/docs/DotnetYang","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1450,"frontMatter":{"sidebar_position":1450,"title":"145 - DotnetYang","description":"Generating source code from YANG models","slug":"/DotnetYang"},"sidebar":"tutorialSidebar","previous":{"title":"144 - depso","permalink":"/RSCG_Examples/v2/docs/depso"},"next":{"title":"146 - RSCG_IFormattable","permalink":"/RSCG_Examples/v2/docs/RSCG_IFormattable"}}');var a=n(74848),i=n(28453),s=n(11470),o=n(19365),d=n(14252),l=n(28689);const c={sidebar_position:1450,title:"145 - DotnetYang",description:"Generating source code from YANG models",slug:"/DotnetYang"},h="DotnetYang  by Westermo Network Technologies",u={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Features",id:"features",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Server creation",id:"server-creation",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share DotnetYang",id:"share-dotnetyang",level:3},...l.RM];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"dotnetyang--by-westermo-network-technologies",children:"DotnetYang  by Westermo Network Technologies"})}),"\n",(0,a.jsx)(d.A,{toc:m}),"\n",(0,a.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/DotnetYang/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/DotnetYang?label=DotnetYang",alt:"Nuget"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/westermo/DotnetYang",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/westermo/DotnetYang?label=updated",alt:"GitHub last commit"})}),"\n",(0,a.jsx)(t.img,{src:"https://img.shields.io/github/stars/westermo/DotnetYang?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,a.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,a.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["Name: ",(0,a.jsx)(t.strong,{children:"DotnetYang"})]}),(0,a.jsx)(t.p,{children:"Package Description"}),(0,a.jsx)(t.p,{children:"Author: Westermo Network Technologies"}),(0,a.jsxs)(t.p,{children:["NuGet:\n",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/DotnetYang/",children:"https://www.nuget.org/packages/DotnetYang/"})})]}),(0,a.jsxs)(t.p,{children:["You can find more details at ",(0,a.jsx)(t.a,{href:"https://github.com/westermo/DotnetYang",children:"https://github.com/westermo/DotnetYang"})]}),(0,a.jsxs)(t.p,{children:["Source: ",(0,a.jsx)(t.a,{href:"https://github.com/westermo/DotnetYang",children:"https://github.com/westermo/DotnetYang"})]})]}),"\n",(0,a.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,a.jsxs)(t.admonition,{type:"note",children:[(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.nuget.org/packages/dotnetYang/",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/nuget/v/dotnetYang?style=flat-square",alt:"Nuget (Generator)"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/westermo/dotnetYang/actions",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/actions/workflow/status/westermo/dotnetYang/build.yml?branch=main&style=flat-square",alt:"Build"})}),"\n",(0,a.jsx)(t.a,{href:"https://github.com/westermo/dotnetYang/blob/develop/LICENSE",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/github/license/westermo/dotnetYang?style=flat-square",alt:"License"})})]}),(0,a.jsxs)(t.p,{children:["dotnetYang is a ",(0,a.jsx)(t.a,{href:"https://github.com/dotnet/roslyn",children:"Roslyn"})," source generator for using the .yang language to generate C# code, providing access to data models, ease-of-use asynchronous RPC, Action & Notification calls directly from code and generated server interfaces."]}),(0,a.jsx)(t.h2,{id:"features",children:"Features"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Drop-and-go:"})," Add your .yang files to a C# project as additional files that references this generator, that is it, your .yang defined RPC's and more are now available directly in  that C# projects code"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Server-interface:"})," Want to implement a server that responds to NETCONF calls? Look no further than the generated interface ",(0,a.jsx)(t.code,{children:"IYangServer"})," and it's extension method ",(0,a.jsx)(t.code,{children:"async Task Recieve(this IYangServer server, Stream input, Stream output);"})," which provides a framework for implementing your own server without having to worry about serializing and parsing NETCONF directly, but instead work with well defined C# Datatypes."]}),"\n"]}),(0,a.jsx)(t.h2,{id:"documentation",children:"Documentation"}),(0,a.jsx)(t.h3,{id:"getting-started",children:"Getting Started"}),(0,a.jsxs)(t.p,{children:["In order to start using ",(0,a.jsx)(t.code,{children:"dotnetYang"})," on a new .csproj project, start by adding the nuget packages by, for example, using the dotnet CLI in your project directory:\n",(0,a.jsx)(t.code,{children:"dotnet add package dotnetYang"})]}),(0,a.jsxs)(t.p,{children:["Afterwards, create or add a .yang file to said project:\n",(0,a.jsx)(t.code,{children:"some-module.yang"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yang",children:'module some-module {\n    yang-version 1.1;\n    namespace "urn:dotnet:yang:some:module";\n    prefix sm;\n    identity someIdentity;\n    identity someOtherIdentity\n    {\n        base someIdentity;\n    }\n    rpc doSomething {\n        input {\n            leaf the-big-leaf\n            {\n                type uint32;\n                default "4";\n                description "The value that is the input of the doSomething rpc";\n            }\n        }\n        output {\n            leaf response\n            {\n                type identityref\n                {\n                    base someIdentity;\n                }\n                default "someOtherIdentity";\n                description "The identity that is the output of the doSomething rpc";\n            }\n        }\n    }\n}\n'})}),(0,a.jsx)(t.p,{children:"And then add it as an additional file to your .csproj file"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n    \x3c!--Other parts of the .csproj file --\x3e\n    <ItemGroup>\n        <AdditionalFiles Include="some-module.yang" />\n    </ItemGroup>\n    \x3c!--Other parts of the .csproj file --\x3e\n</Project>\n'})}),(0,a.jsxs)(t.p,{children:["Now the generated C# code from ",(0,a.jsx)(t.code,{children:"some-module.yang"})," will be available, with it's naming conventions adjusted to be C# compliant"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'namespace MyProject;\npublic class Program\n{\n  public static async Task Main()\n  {\n      IChannel channel = //...Code for setting up whatever channel you want to send the rpc over\n      int messageID = //...Code for getting message id;\n      //Set up the rpc input, not the slight name changes\n      Some.Module.YangNode.DoSomethingInput input = new Some.Module.YangNode.DoSomethingInput\n      {\n          TheBigLeaf = 123\n      };\n      //Call the rpc function, note the slight name changes and the asynchronous nature of the call\n      Some.Module.YangNode.DoSomethingOutput output = await Some.Module.YangNode.DoSomething(channel, messageID, input);\n      //Write the "response" leaf of the output to console.\n      Console.WriteLine(output.Response);\n  }\n}\n'})}),(0,a.jsx)(t.h3,{id:"server-creation",children:"Server creation"}),(0,a.jsxs)(t.p,{children:["Say that you want to create a server that can response to calls defined in ",(0,a.jsx)(t.code,{children:"some-module.yang"}),", then you would create a class that implementes the generated ",(0,a.jsx)(t.code,{children:"IYangServer"})," interface, which might look something like this:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'using Some.Module;\nnamespace MyProject;\npublic class Server : IYangServer\n{\n    public async Task<YangNode.DoSomethingOutput> OnDoSomething(YangNode.DoSomethingInput input)\n    {\n        //Do whatever it is the server is expected to do when told to "doSomething"...\n        //Await something, do something else, the options are endless...\n        \n        //Create the output, not nessecarily like this..\n        YangNode.DoSomethingOutput output = new YangNode.DoSomethingOutput(); \n        return output;\n    }\n}\n'})}),(0,a.jsxs)(t.p,{children:["Of course, if there are a lot of yang modules in a project, ",(0,a.jsx)(t.code,{children:"IYangServer"})," runs the risk of becoming rather big. In such a case, it is recommended to split it's implementation into several ",(0,a.jsx)(t.code,{children:"partial"})," server classes in order to maintain readability."]})]}),"\n",(0,a.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Generating source code from YANG models"})}),"\n",(0,a.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,a.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,a.jsx)(t.strong,{children:"DotnetYang"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {20}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  \n  <ItemGroup>\n    <AdditionalFiles Include="demo.yang" />\n  </ItemGroup>\n\n\t <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\t\n  <ItemGroup>\n    <PackageReference Include="dotnetYang" Version="0.3.0" />\n  </ItemGroup>\n\n</Project>\n\n'})})]}),(0,a.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DotnetYang\\src\\yangDemo\\Program.cs",label:"Program.cs",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"DotnetYang"})," in ",(0,a.jsx)(t.em,{children:"Program.cs"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'Console.WriteLine("Yang file from https://info.support.huawei.com/info-finder/encyclopedia/en/YANG.html#content4!");\nSome.Module.YangNode.DoSomethingInput input = new Some.Module.YangNode.DoSomethingInput\n{\n    TheBigLeaf = 123\n};\n'})})]}),(0,a.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DotnetYang\\src\\yangDemo\\demo.yang",label:"demo.yang",children:[(0,a.jsxs)(t.p,{children:["This is the use of ",(0,a.jsx)(t.strong,{children:"DotnetYang"})," in ",(0,a.jsx)(t.em,{children:"demo.yang"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'module some-module {\n    yang-version 1.1;\n    namespace "urn:dotnet:yang:andrei";\n    prefix sm;\n    identity someIdentity;\n    identity someOtherIdentity\n    {\n        base someIdentity;\n    }\n    rpc doSomething {\n        input {\n            leaf the-big-leaf\n            {\n                type uint32;\n                default "4";\n                description "The value that is the input of the doSomething rpc";\n            }\n        }\n        output {\n            leaf response\n            {\n                type identityref\n                {\n                    base someIdentity;\n                }\n                default "someOtherIdentity";\n                description "The identity that is the output of the doSomething rpc";\n            }\n        }\n    }\n}\n'})})]})]}),"\n",(0,a.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,a.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DotnetYang\\src\\yangDemo\\obj\\GX\\dotnetYang\\YangParser.Generator.YangGenerator\\Configuration.cs",label:"Configuration.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing System.Xml;\nusing YangSupport;\nnamespace yangDemo;\n///<summary>\n///Configuration root object for yangDemo based on provided .yang modules\n///</summary>\n\npublic class Configuration\n{\n    public Some.Module.YangNode? SomeModule { get; set; }\n    public async Task WriteXMLAsync(XmlWriter writer)\n\t{\n\t    await writer.WriteStartElementAsync(null,"root",null);\n\t    \n\t    if(SomeModule is not null) await SomeModule.WriteXMLAsync(writer);\n\t    await writer.WriteEndElementAsync();\n\t}\n    public static async Task<Configuration> ParseAsync(XmlReader reader)\n\t{\n\t    Some.Module.YangNode? _SomeModule = default!;\n\t    while(await reader.ReadAsync())\n\t    {\n\t       switch(reader.NodeType)\n\t       {\n\t           case XmlNodeType.Element:\n\t               switch(reader.Name)\n\t               {\n\t                    case "some-module":\n\t\t\t\t\t\t    _SomeModule = await Some.Module.YangNode.ParseAsync(reader);\n\t\t\t\t\t\t    continue;\n\t                    case "rpc-error": throw await RpcException.ParseAsync(reader);\n\t                    default: throw new Exception($"Unexpected element \'{reader.Name}\' under \'root\'");\n\t               }\n\t           case XmlNodeType.EndElement when reader.Name == "root":\n\t               return new Configuration{\n\t                   SomeModule = _SomeModule,\n\t               };\n\t           case XmlNodeType.Whitespace: break;\n\t           default: throw new Exception($"Unexpected node type \'{reader.NodeType}\' : \'{reader.Name}\' under \'root\'");\n\t       }\n\t    }\n\t    throw new Exception("Reached end-of-readability without ever returning from Configuration.ParseAsync");\n\t}\n}\npublic static class IYangServerExtensions\n{\n   public static async Task Receive(this IYangServer server, global::System.IO.Stream input, global::System.IO.Stream output)\n   {\n       var initialPosition = output.Position;\n       var initialLength = output.Length;\n       string? id = null;\n       using XmlReader reader = XmlReader.Create(input, SerializationHelper.GetStandardReaderSettings());\n       using XmlWriter writer = XmlWriter.Create(output, SerializationHelper.GetStandardWriterSettings());\n       try\n       {\n           await reader.ReadAsync();\n           switch(reader.Name)\n           {\n               case "rpc":\n                   id = reader.ParseMessageId();\n                   await writer.WriteStartElementAsync(null, "rpc-reply", "urn:ietf:params:xml:ns:netconf:base:1.0");\n                   await writer.WriteAttributeStringAsync(null, "message-id", null, id);\n                   await reader.ReadAsync();\n                   switch(reader.Name)\n                   {\n                       case "action":\n                           await server.ReceiveAction(reader, writer);\n                           break;\n                       default:\n                           await server.ReceiveRPC(reader, writer);\n                           break;\n                   }\n                   await writer.WriteEndElementAsync();\n                   await writer.FlushAsync();\n                   break;\n               case "notification":\n                   var eventTime = await reader.ParseEventTime();\n                   await reader.ReadAsync();\n                   await server.ReceiveNotification(reader, eventTime);\n                   break;\n           }\n       }\n       catch(RpcException ex)\n       {\n           await writer.FlushAsync();\n           output.Position = initialPosition;\n           output.SetLength(initialLength);\n           await ex.SerializeAsync(output,id);\n       }\n       catch(Exception ex)\n       {\n           await writer.FlushAsync();\n           output.Position = initialPosition;\n           output.SetLength(initialLength);\n           await output.SerializeRegularExceptionAsync(ex,id);\n       }\n   }\n   public static async Task ReceiveRPC(this IYangServer server, XmlReader reader, XmlWriter writer)\n   {\n       switch(reader.Name)\n       {\n           case "doSomething" when reader.NamespaceURI is "urn:dotnet:yang:andrei":\n\t\t\t{\n\t\t\t    var input = await Some.Module.YangNode.DoSomethingInput.ParseAsync(reader);\n\t\t\t    var task = server.OnDoSomething(input);\n\t\t\t    var response = await task;\n\t\t\t    await response.WriteXMLAsync(writer);\n\t\t\t}\n\t\t\tbreak;\n       }\n   }\n   public static async Task ReceiveAction(this IYangServer server, XmlReader reader, XmlWriter writer)\n   {\n       await reader.ReadAsync();\n       switch(reader.Name)\n       {\n           \n       }\n   }\n   public static async Task ReceiveNotification(this IYangServer server, XmlReader reader, DateTime eventTime)\n   {\n       switch(reader.Name)\n       {\n           \n           \n       }\n   }\n}\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DotnetYang\\src\\yangDemo\\obj\\GX\\dotnetYang\\YangParser.Generator.YangGenerator\\YangModules\\some\\some-module.cs",label:"some-module.cs",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing System.Xml;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\nusing System.Xml.Linq;\nusing System.Text.RegularExpressions;\nusing YangSupport;\nnamespace yangDemo\n{\n    public partial interface IYangServer\n    {\n        Task<Some.Module.YangNode.DoSomethingOutput> OnDoSomething(Some.Module.YangNode.DoSomethingInput input);\n    }\n}\nnamespace Some.Module{\npublic class YangNode\n{\n    public const string ModuleName = "some-module";\n    public const string Revision = "";\n    public static string[] Features = [];\n    //Yang Version 1.1\n\tpublic const string Namespace = "urn:dotnet:yang:andrei";\n\tpublic static string GetEncodedValue(SomeIdentityIdentity value)\n\t{\n\t    switch(value)\n\t    {\n\t        case SomeIdentityIdentity.SomeIdentity: return "someIdentity";\n\t\t\tcase SomeIdentityIdentity.SomeOtherIdentity: return "someOtherIdentity";\n\t        default: return value.ToString();\n\t    }\n\t}\n\tpublic static string GetEncodedValue(SomeIdentityIdentity? value) => GetEncodedValue(value!.Value!);\n\tpublic static SomeIdentityIdentity GetSomeIdentityIdentityValue(string value)\n\t{\n\t    switch(value)\n\t    {\n\t        case "someIdentity": return SomeIdentityIdentity.SomeIdentity;\n\t\t\tcase "someOtherIdentity": return SomeIdentityIdentity.SomeOtherIdentity;\n\t        default: throw new Exception($"{value} is not a valid value for SomeIdentityIdentity");\n\t    }\n\t}\n\tpublic enum SomeIdentityIdentity\n\t{\n\t    SomeIdentity,\n\t\tSomeOtherIdentity\n\t}\n\tpublic static string GetEncodedValue(SomeOtherIdentityIdentity value)\n\t{\n\t    switch(value)\n\t    {\n\t        case SomeOtherIdentityIdentity.SomeOtherIdentity: return "someOtherIdentity";\n\t        default: return value.ToString();\n\t    }\n\t}\n\tpublic static string GetEncodedValue(SomeOtherIdentityIdentity? value) => GetEncodedValue(value!.Value!);\n\tpublic static SomeOtherIdentityIdentity GetSomeOtherIdentityIdentityValue(string value)\n\t{\n\t    switch(value)\n\t    {\n\t        case "someOtherIdentity": return SomeOtherIdentityIdentity.SomeOtherIdentity;\n\t        default: throw new Exception($"{value} is not a valid value for SomeOtherIdentityIdentity");\n\t    }\n\t}\n\tpublic enum SomeOtherIdentityIdentity\n\t{\n\t    SomeOtherIdentity\n\t}\n\tpublic static async Task<Some.Module.YangNode.DoSomethingOutput> DoSomething(IChannel channel, int messageID, Some.Module.YangNode.DoSomethingInput input)\n\t{\n\t    using XmlWriter writer = XmlWriter.Create(channel.WriteStream, SerializationHelper.GetStandardWriterSettings());\n\t    await writer.WriteStartElementAsync(null,"rpc","urn:ietf:params:xml:ns:netconf:base:1.0");\n\t    await writer.WriteAttributeStringAsync(null,"message-id",null,messageID.ToString());\n\t    await writer.WriteStartElementAsync("","doSomething","urn:dotnet:yang:andrei");\n\t\tawait input.WriteXMLAsync(writer);\n\t    await writer.WriteEndElementAsync();\n\t    await writer.WriteEndElementAsync();\n\t    await writer.FlushAsync();\n\t    await channel.Send();\n\t    using XmlReader reader = XmlReader.Create(channel.ReadStream, SerializationHelper.GetStandardReaderSettings());\n\t    await reader.ReadAsync();\n\t    if(reader.NodeType != XmlNodeType.Element || reader.Name != "rpc-reply" || reader.NamespaceURI != "urn:ietf:params:xml:ns:netconf:base:1.0" || reader["message-id"] != messageID.ToString())\n\t    {\n\t        throw new Exception($"Expected stream to start with a <rpc-reply> element with message id {messageID} & \\"urn:ietf:params:xml:ns:netconf:base:1.0\\" but got {reader.NodeType}: {reader.Name} in {reader.NamespaceURI}");\n\t    }\n\t\tvar value = await DoSomethingOutput.ParseAsync(reader);\n\t    return value;\n\t}\n\tpublic class DoSomethingOutput\n\t{\n\t    ///<summary>\n\t\t///The identity that is the output of the doSomething rpc\n\t\t///</summary>\n\t\tpublic SomeIdentityIdentity? Response { get; set; } = SomeIdentityIdentity.SomeOtherIdentity;\n\t    public static async Task<DoSomethingOutput> ParseAsync(XmlReader reader)\n\t{\n\t    SomeIdentityIdentity? _Response = default!;\n\t    while(await reader.ReadAsync())\n\t    {\n\t       switch(reader.NodeType)\n\t       {\n\t           case XmlNodeType.Element:\n\t               switch(reader.Name)\n\t               {\n\t                    case "response":\n\t\t\t\t\t\t    await reader.ReadAsync();\n\t\t\t\t\t\t\tif(reader.NodeType != XmlNodeType.Text)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    throw new Exception($"Expected token in ParseCall for \'response\' to be text, but was \'{reader.NodeType}\'");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_Response = GetSomeIdentityIdentityValue(await reader.GetValueAsync());\n\t\t\t\t\t\t\tif(!reader.IsEmptyElement)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    await reader.ReadAsync();\n\t\t\t\t\t\t\t    if(reader.NodeType != XmlNodeType.EndElement)\n\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t        throw new Exception($"Expected token in ParseCall for \'response\' to be an element closure, but was \'{reader.NodeType}\'");\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    continue;\n\t                    case "rpc-error": throw await RpcException.ParseAsync(reader);\n\t                    default: throw new Exception($"Unexpected element \'{reader.Name}\' under \'rpc-reply\'");\n\t               }\n\t           case XmlNodeType.EndElement when reader.Name == "rpc-reply":\n\t               return new DoSomethingOutput{\n\t                   Response = _Response,\n\t               };\n\t           case XmlNodeType.Whitespace: break;\n\t           default: throw new Exception($"Unexpected node type \'{reader.NodeType}\' : \'{reader.Name}\' under \'rpc-reply\'");\n\t       }\n\t    }\n\t    throw new Exception("Reached end-of-readability without ever returning from DoSomethingOutput.ParseAsync");\n\t}\n\t    public async Task WriteXMLAsync(XmlWriter writer)\n\t{\n\t    if(Response != default)\n\t\t{\n\t\t    await writer.WriteStartElementAsync(null,"response","urn:dotnet:yang:andrei");\n\t\t    await writer.WriteStringAsync(YangNode.GetEncodedValue(Response!));\n\t\t    await writer.WriteEndElementAsync();\n\t\t}\n\t}\n\t}\n\tpublic class DoSomethingInput\n\t{\n\t    ///<summary>\n\t\t///The value that is the input of the doSomething rpc\n\t\t///</summary>\n\t\tpublic uint? TheBigLeaf { get; set; } = 4;\n\t    public async Task WriteXMLAsync(XmlWriter writer)\n\t\t{\n\t\t    if(TheBigLeaf != default)\n\t\t\t{\n\t\t\t    await writer.WriteStartElementAsync(null,"the-big-leaf","urn:dotnet:yang:andrei");\n\t\t\t    await writer.WriteStringAsync(TheBigLeaf!.ToString());\n\t\t\t    await writer.WriteEndElementAsync();\n\t\t\t}\n\t\t}\n\t    public static async Task<DoSomethingInput> ParseAsync(XmlReader reader)\n\t\t{\n\t\t    uint? _TheBigLeaf = default!;\n\t\t    while(await reader.ReadAsync())\n\t\t    {\n\t\t       switch(reader.NodeType)\n\t\t       {\n\t\t           case XmlNodeType.Element:\n\t\t               switch(reader.Name)\n\t\t               {\n\t\t                    case "the-big-leaf":\n\t\t\t\t\t\t\t    await reader.ReadAsync();\n\t\t\t\t\t\t\t\tif(reader.NodeType != XmlNodeType.Text)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t    throw new Exception($"Expected token in ParseCall for \'the-big-leaf\' to be text, but was \'{reader.NodeType}\'");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_TheBigLeaf = uint.Parse(await reader.GetValueAsync());\n\t\t\t\t\t\t\t\tif(!reader.IsEmptyElement)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t    await reader.ReadAsync();\n\t\t\t\t\t\t\t\t    if(reader.NodeType != XmlNodeType.EndElement)\n\t\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t\t        throw new Exception($"Expected token in ParseCall for \'the-big-leaf\' to be an element closure, but was \'{reader.NodeType}\'");\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t    continue;\n\t\t                    case "rpc-error": throw await RpcException.ParseAsync(reader);\n\t\t                    default: throw new Exception($"Unexpected element \'{reader.Name}\' under \'doSomething\'");\n\t\t               }\n\t\t           case XmlNodeType.EndElement when reader.Name == "doSomething":\n\t\t               return new DoSomethingInput{\n\t\t                   TheBigLeaf = _TheBigLeaf,\n\t\t               };\n\t\t           case XmlNodeType.Whitespace: break;\n\t\t           default: throw new Exception($"Unexpected node type \'{reader.NodeType}\' : \'{reader.Name}\' under \'doSomething\'");\n\t\t       }\n\t\t    }\n\t\t    throw new Exception("Reached end-of-readability without ever returning from DoSomethingInput.ParseAsync");\n\t\t}\n\t}\n    public static async Task<Some.Module.YangNode> ParseAsync(XmlReader reader)\n\t{\n\t    while(await reader.ReadAsync())\n\t    {\n\t       switch(reader.NodeType)\n\t       {\n\t           case XmlNodeType.Element:\n\t               switch(reader.Name)\n\t               {\n\t                    case "rpc-error": throw await RpcException.ParseAsync(reader);\n\t                    default: throw new Exception($"Unexpected element \'{reader.Name}\' under \'some-module\'");\n\t               }\n\t           case XmlNodeType.EndElement when reader.Name == "some-module":\n\t               return new Some.Module.YangNode{\n\t               };\n\t           case XmlNodeType.Whitespace: break;\n\t           default: throw new Exception($"Unexpected node type \'{reader.NodeType}\' : \'{reader.Name}\' under \'some-module\'");\n\t       }\n\t    }\n\t    throw new Exception("Reached end-of-readability without ever returning from Some.Module.YangNode.ParseAsync");\n\t}\n    public async Task WriteXMLAsync(XmlWriter writer)\n\t{\n\t    await writer.WriteStartElementAsync(null,"some-module","urn:dotnet:yang:andrei");\n\t    await writer.WriteEndElementAsync();\n\t}\n}\n}\n'})})})]}),"\n",(0,a.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,a.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(64769).A+"",children:"Download Example project DotnetYang "})})}),"\n",(0,a.jsx)(t.h3,{id:"share-dotnetyang",children:"Share DotnetYang"}),"\n",(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDotnetYang&quote=DotnetYang",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDotnetYang&text=DotnetYang:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDotnetYang",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDotnetYang&title=DotnetYang",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDotnetYang&title=DotnetYang&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDotnetYang",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DotnetYang",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DotnetYang"})}),"\n",(0,a.jsx)(t.p,{children:"aaa"}),"\n",(0,a.jsx)(l.Ay,{})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);