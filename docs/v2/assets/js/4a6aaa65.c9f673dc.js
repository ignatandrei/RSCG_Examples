"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7272],{7494:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>h,frontMatter:()=>l,metadata:()=>m,toc:()=>d});var n=a(87462),r=(a(67294),a(3905)),o=a(73992),i=a(18679),s=a(68839);const l={sidebar_position:1120,title:"112 - OptionToStringGenerator",description:"Generating similar ToString method for classes with many properties. It can also generate for external classes.",slug:"/OptionToStringGenerator"},p="OptionToStringGenerator  by Jim W",m={unversionedId:"RSCG-Examples/OptionToStringGenerator",id:"RSCG-Examples/OptionToStringGenerator",title:"112 - OptionToStringGenerator",description:"Generating similar ToString method for classes with many properties. It can also generate for external classes.",source:"@site/docs/RSCG-Examples/OptionToStringGenerator.md",sourceDirName:"RSCG-Examples",slug:"/OptionToStringGenerator",permalink:"/RSCG_Examples/v2/docs/OptionToStringGenerator",draft:!1,tags:[],version:"current",sidebarPosition:1120,frontMatter:{sidebar_position:1120,title:"112 - OptionToStringGenerator",description:"Generating similar ToString method for classes with many properties. It can also generate for external classes.",slug:"/OptionToStringGenerator"},sidebar:"tutorialSidebar",previous:{title:"111 - cachesourcegenerator",permalink:"/RSCG_Examples/v2/docs/cachesourcegenerator"},next:{title:"113 - sourcedepend",permalink:"/RSCG_Examples/v2/docs/sourcedepend"}},u={},d=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share OptionToStringGenerator",id:"share-optiontostringgenerator",level:3},{value:"In the same category (EnhancementClass) - 23 other generators",id:"in-the-same-category-enhancementclass---23-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CopyTo",id:"copyto",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"GeneratorEquals",id:"generatorequals",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"Lombok.NET",id:"lomboknet",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemoryPack",id:"memorypack",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4}],g={toc:d},c="wrapper";function h(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,n.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"optiontostringgenerator--by-jim-w"},"OptionToStringGenerator  by Jim W"),(0,r.kt)(s.Z,{toc:d,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Seekatar.OptionToStringGenerator?label=Seekatar.OptionToStringGenerator",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seekatar/OptionToStringGenerator"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/Seekatar/OptionToStringGenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/Seekatar/OptionToStringGenerator?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"OptionToStringGenerator")),(0,r.kt)("p",{parentName:"admonition"},"This library contains an incremental source generator for formatting configuration objects."),(0,r.kt)("p",{parentName:"admonition"},"Author: Jim W"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/"},"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seekatar/OptionToStringGenerator"},"https://github.com/Seekatar/OptionToStringGenerator")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seekatar/OptionToStringGenerator"},"https://github.com/Seekatar/OptionToStringGenerator"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"optionstostring-incremental-source-generator"},"OptionsToString Incremental Source Generator"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seekatar/OptionToStringGenerator/actions/workflows/dotnet.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/Seekatar/OptionToStringGenerator/actions/workflows/dotnet.yml/badge.svg",alt:"OptionToStringGenerator"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://codecov.io/gh/Seekatar/OptionToStringGenerator"},(0,r.kt)("img",{parentName:"a",src:"https://codecov.io/gh/Seekatar/OptionToStringGenerator/branch/main/graph/badge.svg?token=X3J5MU9T3C",alt:"codecov"}))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Problem:")," I have a configuration class for use with ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options"},"IOptions")," and I want to safely log out its values at runtime."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Solution:")," Use an incremental source generator to generate an extension method to get a string with masked values for the properties."),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"The methods to mask the values can be used outside of the generated code, too. See ",(0,r.kt)("a",{parentName:"p",href:"#using-seekatarmask"},"below")," for details.")),(0,r.kt)("p",{parentName:"admonition"},"This package generates an ",(0,r.kt)("inlineCode",{parentName:"p"},"OptionsToString"),"\nextension method for a class. Using attributes you can control how the values are masked. You can use this to log out the values of your configuration at startup, or via a REST endpoint."),(0,r.kt)("h2",{parentName:"admonition",id:"quick-example"},"Quick Example"),(0,r.kt)("p",{parentName:"admonition"},"Edit the source of your configuration class and decorate it with attributes."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace Test;\n\n[OptionsToString]\ninternal class PropertySimple\n{\n    [OutputMask]\n    public string Secret { get; set; } = "Secret";\n\n    public int RetryLimit { get; set; } = 5;\n\n    [OutputRegex(Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    public string ConnectionString { get; set; } = "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;";\n}\n\n// usage\n_logger.LogInformation(new PropertySimple().OptionsToString());\n')),(0,r.kt)("p",{parentName:"admonition"},"Output:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},'Test.PropertySimple:\n  Secret           : "******"\n  RetryLimit       : 5\n  ConnectionString : "Server=myServerAddress;Database=myDataBase;User Id=***;Password=***;"\n')),(0,r.kt)("p",{parentName:"admonition"},"Alternatively, if you don't have the code for ",(0,r.kt)("inlineCode",{parentName:"p"},"PropertySimple")," this will produce the same output."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'internal class PropertyConfig\n{\n    [OutputPropertyMask(nameof(IOptionsSimple.Secret))]\n    [OutputPropertyRegex(nameof(IOptionsSimple.ConnectionString), Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    public PropertySimple? PropertySimple { get; set; }\n}\n\n// usage\n_logger.LogInformation(new PropertyConfig().PropertySimple.OptionsToString());\n')),(0,r.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Add the ",(0,r.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator"},"OptionToStringGenerator")," NuGet package to your project."),(0,r.kt)("li",{parentName:"ol"},"If you can update the class",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Decorate a class with the ",(0,r.kt)("inlineCode",{parentName:"li"},"OptionsToString")," attribute."),(0,r.kt)("li",{parentName:"ol"},"Optionally decorate properties with an ",(0,r.kt)("inlineCode",{parentName:"li"},"Output*")," attribute to specify how you want them to be masked. If you don't decorate a property, its full text is dumped out."))),(0,r.kt)("li",{parentName:"ol"},"If you don't want to or can't update the class",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Add a property to your class of the Type you want to dump out."),(0,r.kt)("li",{parentName:"ol"},"Decorate the property with multiple ",(0,r.kt)("inlineCode",{parentName:"li"},"OutputProperty*")," attributes to control how the properties are masked.")))),(0,r.kt)("h3",{parentName:"admonition",id:"example-of-editing-a-class"},"Example of Editing a Class"),(0,r.kt)("p",{parentName:"admonition"},"Here's a larger sample class that uses all the different types of masking. Anything without an attribute has its value written out in the clear. The output follows."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace Test;\nusing Seekatar.OptionToStringGenerator;\n\n[OptionsToString]\npublic class PublicOptions\n{\n    public class AClass\n    {\n        public string Name { get; set; } = "maybe this is secret";\n        public override string ToString() => $"{nameof(AClass)}: {Name}";\n    }\n\n    public string PlainText { get; set; } = "hi mom";\n\n    public char Why { get; set; } = \'Y\';\n\n    public int PlainInt { get; set; } = 42;\n\n    public double PlainDouble { get; set; } = 3.141;\n\n    public double PlainDecimal { get; set; } = 6.02;\n\n    public DateTime PlainDateTime { get; set; } = new DateTime(2020, 1, 2, 3, 4, 5);\n\n    public DateOnly PlainDatOnly { get; set; } = new DateOnly(2020, 1, 2);\n\n    public TimeOnly PlainTimeOnly { get; set; } = new TimeOnly(12, 23, 2);\n\n    public TimeSpan TimeSpan { get; set; } = new TimeSpan(1, 2, 3, 4, 5);\n\n    public Guid UUID { get; set; } = Guid.Parse("6536b25c-3a45-48d8-8ea3-756e19f5bad1");\n\n    public string? NullItem { get; set; }\n\n    public AClass AnObject { get; set; } = new();\n\n    [OutputRegex(Regex = @"AClass\\:\\s+(.*)")]\n    public AClass AMaskedObject { get; set; } = new();\n\n    [OutputMask]\n    public string FullyMasked { get; set; } = "thisisasecret";\n\n    [OutputMask(PrefixLen=3)]\n    public string FirstThreeNotMasked { get; set; } = "abc1233435667";\n\n    [OutputMask(SuffixLen=3)]\n    public string LastThreeNotMasked { get; set; } = "abc1233435667";\n\n    [OutputMask(PrefixLen = 3, SuffixLen=3)]\n    public string FirstAndLastThreeNotMasked { get; set; } = "abc1233435667";\n\n    [OutputMask(PrefixLen = 100)]\n    public string NotMaskedSinceLongLength { get; set; } = "abc1233435667";\n\n    [OutputLengthOnly]\n    public string LengthOnly { get; set; } = "thisisasecretthatonlyshowsthelength";\n\n    [OutputRegex(Regex="User Id=([^;]+).*Password=([^;]+)")]\n    public string MaskUserAndPassword { get; set; } = "Server=server;Database=db;User Id=myUsername;Password=myPassword;";\n\n    [OutputRegex(Regex="User Id=([^;]+).*Password=([^;]+)",IgnoreCase=true)]\n    public string MaskUserAndPasswordIgnoreCase { get; set; } = "Server=server;Database=db;user Id=myUsername;Password=myPassword;";\n\n    [OutputRegex(Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    public string RegexNotMatched { get; set; } = "Server=server;Database=db;user Id=myUsername;Password=myPassword;";\n\n    public ConsoleColor Color { get; set; } = ConsoleColor.Red;\n\n    [OutputIgnore]\n    public string IgnoreMe { get; set; } = "abc1233435667";\n}\n\n// usage\nvar options = new PublicOptions();\n_logger.LogInformation(options.OptionsToString());\n')),(0,r.kt)("p",{parentName:"admonition"},"The output has the class name (by default) followed by an indented list of all the properties' values masked as specified."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},'Test.PublicOptions:\n  PlainText                     : "hi mom"\n  Why                           : "Y"\n  PlainInt                      : 42\n  PlainDouble                   : 3.141\n  PlainDecimal                  : 6.02\n  PlainDateTime                 : 01/02/2020 03:04:05\n  PlainDatOnly                  : 01/02/2020\n  PlainTimeOnly                 : 12:23\n  TimeSpan                      : 1.02:03:04.0050000\n  UUID                          : 6536b25c-3a45-48d8-8ea3-756e19f5bad1\n  NullItem                      : null\n  AnObject                      : "AClass: maybe this is secret"\n  AMaskedObject                 : "AClass: ***"\n  FullyMasked                   : "*************"\n  FirstThreeNotMasked           : "abc**********"\n  LastThreeNotMasked            : "**********667"\n  FirstAndLastThreeNotMasked    : "abc*******667"\n  NotMaskedSinceLongLength      : "abc1233435667"\n  LengthOnly                    : Len = 35\n  MaskUserAndPassword           : "Server=server;Database=db;User Id=***;Password=***;"\n  MaskUserAndPasswordIgnoreCase : "Server=server;Database=db;user Id=***;Password=***;"\n  RegexNotMatched               : "***Regex no match***!"\n  Color                         : Red\n')),(0,r.kt)("h3",{parentName:"admonition",id:"example-of-using-a-property"},"Example of Using a Property"),(0,r.kt)("p",{parentName:"admonition"},"Here's a similar example where you don't have the source for the class, or don't want to change it. In this case, you use multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputProperty*"),"  attributes, one for each property you want to mask."),(0,r.kt)("p",{parentName:"admonition"},"This is from the tests where ",(0,r.kt)("inlineCode",{parentName:"p"},"PropertyPublicClass")," is identical to ",(0,r.kt)("inlineCode",{parentName:"p"},"PublicOptions"),", so the output will be the same aside from the class name."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace Test;\nusing Seekatar.OptionToStringGenerator;\n\npublic class PropertyTestOptions\n{\n    public MyClass(IOption<PropertyPublicClass> options, ILogger<PropertyTestOptions> logger)\n    {\n        _options =options.Value;\n        logger.LogInformation(options.OptionsToString());\n    }\n\n    [OutputPropertyRegex(nameof(PropertyPublicClass.AMaskedObject), Regex = @"AClass\\:\\s+(.*)")]\n    [OutputPropertyMask(nameof(PropertyPublicClass.FullyMasked))]\n    [OutputPropertyMask(nameof(PropertyPublicClass.FirstThreeNotMasked), PrefixLen = 3)]\n    [OutputPropertyMask(nameof(PropertyPublicClass.LastThreeNotMasked), SuffixLen = 3)]\n    [OutputPropertyMask(nameof(PropertyPublicClass.FirstAndLastThreeNotMasked), PrefixLen = 3, SuffixLen = 3)]\n    [OutputPropertyMask(nameof(PropertyPublicClass.NotMaskedSinceLongLength), PrefixLen = 100)]\n    [OutputPropertyLengthOnly(nameof(PropertyPublicClass.LengthOnly))]\n    [OutputPropertyRegex(nameof(PropertyPublicClass.MaskUserAndPassword), Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    [OutputPropertyRegex(nameof(PropertyPublicClass.MaskUserAndPasswordIgnoreCase), Regex = "User Id=([^;]+).*Password=([^;]+)", IgnoreCase = true)]\n    [OutputPropertyRegex(nameof(PropertyPublicClass.RegexNotMatched), Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    [OutputPropertyIgnore(nameof(PropertyPublicClass.IgnoreMe) )]\n    public PropertyPublicClass? PublicClass { get; set; }\n}\n\n')),(0,r.kt)("h3",{parentName:"admonition",id:"notes"},"Notes"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"All public properties are included by default and output as plain text."),(0,r.kt)("li",{parentName:"ul"},"Properties will be in the order they are defined in the class, unless ",(0,r.kt)("inlineCode",{parentName:"li"},"Sort=true")," is set on the ",(0,r.kt)("inlineCode",{parentName:"li"},"OptionsToString")," attribute."),(0,r.kt)("li",{parentName:"ul"},"Parent class properties are included by default. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"ExcludeParents = true")," on the ",(0,r.kt)("inlineCode",{parentName:"li"},"OptionsToString")," attribute to exclude them."),(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"OutputIgnore")," attribute to exclude a property."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ToString()")," is called on the property's value, then the mask is applied. You can have a custom ",(0,r.kt)("inlineCode",{parentName:"li"},"ToString()")," method on a class to format its output then it will be masked as the ",(0,r.kt)("inlineCode",{parentName:"li"},"AClass")," example above."),(0,r.kt)("li",{parentName:"ul"},"When editing the class, only one ",(0,r.kt)("inlineCode",{parentName:"li"},"Output*")," attribute is allowed per property. If more than one is set, you'll get a compile warning, and the last attribute set will be used."),(0,r.kt)("li",{parentName:"ul"},"Regex strings with back slashes need to use a verbatim string or escape the back slashes (e.g.  ",(0,r.kt)("inlineCode",{parentName:"li"},'@"\\s+"'),"  or ",(0,r.kt)("inlineCode",{parentName:"li"},'"\\\\s+"'),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OutputRegex")," must have a ",(0,r.kt)("inlineCode",{parentName:"li"},"Regex")," parameter, or you'll get a compile error."),(0,r.kt)("li",{parentName:"ul"},"If the regex doesn't match the value, the output will be ",(0,r.kt)("inlineCode",{parentName:"li"},"***Regex no match***!")," to indicate it didn't match."),(0,r.kt)("li",{parentName:"ul"},"To customize the formatting of masked output see ",(0,r.kt)("a",{parentName:"li",href:"#per-property-formatting-options"},"below"))),(0,r.kt)("h3",{parentName:"admonition",id:"formatting-options"},"Formatting Options"),(0,r.kt)("p",{parentName:"admonition"},"There are properties on the ",(0,r.kt)("inlineCode",{parentName:"p"},"OptionsToStringAttribute")," for classes and ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputPropertyFormat")," for properties to control how the output is generated."),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Indent")),(0,r.kt)("td",{parentName:"tr",align:null},"The indenting string"),(0,r.kt)("td",{parentName:"tr",align:null},'"  " (Two spaces)')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Separator")),(0,r.kt)("td",{parentName:"tr",align:null},"The name-value separator"),(0,r.kt)("td",{parentName:"tr",align:null},'":"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Title")),(0,r.kt)("td",{parentName:"tr",align:null},"The title to use for the output. See below"),(0,r.kt)("td",{parentName:"tr",align:null},"Class name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Json")),(0,r.kt)("td",{parentName:"tr",align:null},"Format the output as JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Sort")),(0,r.kt)("td",{parentName:"tr",align:null},"Sort the properties"),(0,r.kt)("td",{parentName:"tr",align:null},"false")))),(0,r.kt)("p",{parentName:"admonition"},"In addition to literal text, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Title")," parameter can include property names in braces. For example"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// for a class\n[OptionsToString(Title = nameof(TitleOptions) + "_{StringProp}_{IntProp}")]\npublic class TitleOptions\n{\n    public int IntProp { get; set; } = 42;\n    public string StringProp { get; set; } = "hi mom";\n}\n\n// for a property\ninternal class PropertyTestSimple\n{\n    [OutputPropertyFormat(Title = nameof(TitleOptions) + "_{StringProp}_{IntProp}")]\n    public TitleOptions TitleOptions { get; set; } = new ();\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"Both will output"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},'TitleOptions_hi mom_42:\n  IntProp    : 42\n  StringProp : "hi mom"\n')),(0,r.kt)("h3",{parentName:"admonition",id:"per-property-formatting-options"},"Per-Property Formatting Options"),(0,r.kt)("p",{parentName:"admonition"},"For types that take a format string to ",(0,r.kt)("inlineCode",{parentName:"p"},"ToString()")," such as ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime"),", numbers, etc., you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputFormatToString")," attribute. You can also supply a custom method to format a property. For example flattening an array and masking its values. The sample below shows a few examples:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    # comma separate thousands\n    [OutputFormatToString("N0")]\n    public int PlainInt { get; set; } = 423433;\n\n    # two decimal places\n    [OutputFormatToString("0.00")]\n    public double PlainDouble { get; set; } = 3.141;\n\n    # use the U format for DateTime\n    [OutputFormatToString("R")]\n    public DateTime PlainDateTime { get; set; } = new DateTime(2020, 1, 2, 3, 4, 5);\n\n    [OutputFormatProvider(typeof(FormatOptions), nameof(MyFormatter))]\n    public List<string> Secrets { get; set; } = new List<string> { "secret", "hushhush", "psssst" };\n\n    # mask each string in the array showing only the first 3 characters\n    public static string? MyFormatter(List<string> o)\n    {\n        if (o is null) return null;\n        return string.Join(",", o.Select(s => Mask.MaskSuffix(s, 3)));\n    }\n')),(0,r.kt)("p",{parentName:"admonition"},"Output:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},'  PlainInt      : 423,433\n  PlainDouble   : 3.14\n  PlainDateTime : Thu, 02 Jan 2020 03:04:05 GMT\n  Secrets       : "sec***,hus*****,pss***"\n')),(0,r.kt)("h3",{parentName:"admonition",id:"collections"},"Collections"),(0,r.kt)("p",{parentName:"admonition"},"Instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputFormatProvider"),", you can create your own method to handle collections. The ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagingOptions")," test class does so by overriding ",(0,r.kt)("inlineCode",{parentName:"p"},"ToString")," to get its options and all the children."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public override string ToString()\n{\n    var sb = new StringBuilder(this.OptionsToString());\n    sb.AppendLine();\n    foreach (var c in Consumers ?? new Dictionary<string, ClientOptions>())\n    {\n        sb.AppendLine(c.Value.OptionsToString());\n    }\n    foreach (var p in Producers ?? new Dictionary<string, ClientOptions>())\n    {\n        sb.AppendLine(p.Value.OptionsToString());\n    }\n\n    return sb.ToString();\n}\n")),(0,r.kt)("h2",{parentName:"admonition",id:"attributes"},"Attributes"),(0,r.kt)("p",{parentName:"admonition"},"For a class use these attributes."),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"On"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OptionsToString"),(0,r.kt)("td",{parentName:"tr",align:null},"Class"),(0,r.kt)("td",{parentName:"tr",align:null},"Marker for the class, and has formatting options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputMask"),(0,r.kt)("td",{parentName:"tr",align:null},"Member"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask the value with asterisks, with optional prefix and suffix clear")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputRegex"),(0,r.kt)("td",{parentName:"tr",align:null},"Member"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask the value with a regex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputLengthOnly"),(0,r.kt)("td",{parentName:"tr",align:null},"Member"),(0,r.kt)("td",{parentName:"tr",align:null},"Only output the length of the value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputIgnore"),(0,r.kt)("td",{parentName:"tr",align:null},"Member"),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore the property")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputFormatToString"),(0,r.kt)("td",{parentName:"tr",align:null},"Member"),(0,r.kt)("td",{parentName:"tr",align:null},"Format the value using ToString() with a format string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputFormatProvider"),(0,r.kt)("td",{parentName:"tr",align:null},"Member"),(0,r.kt)("td",{parentName:"tr",align:null},"Format the value using a custom method")))),(0,r.kt)("p",{parentName:"admonition"},"For a property, use these attributes on the property"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputPropertyFormat"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional Formatting options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputPropertyMask"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask the value with asterisks, with optional prefix and suffix")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputPropertyRegex"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask the value with a regex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputPropertyLengthOnly"),(0,r.kt)("td",{parentName:"tr",align:null},"Only output the length of the value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OutputPropertyIgnore"),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore the property")))),(0,r.kt)("h2",{parentName:"admonition",id:"warnings-and-errors"},"Warnings and Errors"),(0,r.kt)("p",{parentName:"admonition"},"If attributes have invalid parameters you will get warnings or errors from the compiler. They are documented ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seekatar/OptionToStringGenerator/wiki/Error-Messages"},"here"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"trouble-shooting"},"Trouble Shooting"),(0,r.kt)("h3",{parentName:"admonition",id:"error-cs9057"},"Error CS9057"),(0,r.kt)("p",{parentName:"admonition"},"You may get an error when compiling your code that uses this package."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"##[error]#15 7.135 CSC : error CS9057: The analyzer assembly '/root/.nuget/packages/seekatar.optiontostringgenerator/0.1.4/analyzers/dotnet/cs/Seekatar.OptionToStringGenerator.dll' references version '4.6.0.0' of the compiler, which is newer than the currently running version '4.4.0.0'.")),(0,r.kt)("p",{parentName:"admonition"},"You must use the .NET SDK 6.0.416 or higher. You can check your version with ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet --list-sdks"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"using-seekatarmask"},"Using Seekatar.Mask"),(0,r.kt)("p",{parentName:"admonition"},"The methods used by the generated code to mask a value are available when you include the source generator NuGet package. They are in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Seekatar.Mask")," namespace."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using static Seekatar.Mask;\n\n...\nMaskSuffix("abc123", 3) // returns "abc***"\n')),(0,r.kt)("p",{parentName:"admonition"},"Methods are as follows. Each of these corresponds to an attribute as described ",(0,r.kt)("a",{parentName:"p",href:"#attributes"},"above"),". All take ",(0,r.kt)("inlineCode",{parentName:"p"},"object?")," and return ",(0,r.kt)("inlineCode",{parentName:"p"},"string?"),". Check each for parameters that control usage."),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MaskAll"),(0,r.kt)("td",{parentName:"tr",align:null},"Return a string of the same length as the input, with all characters masked")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MaskLengthOnly"),(0,r.kt)("td",{parentName:"tr",align:null},"Return ",(0,r.kt)("inlineCode",{parentName:"td"},"Len <length>"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MaskPrefix"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask the prefix of the string, showing only a few suffix characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MaskPrefixSuffix"),(0,r.kt)("td",{parentName:"tr",align:null},"Show only a few prefix and suffix characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MaskRegex"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask capture groups of a regex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MaskSuffix"),(0,r.kt)("td",{parentName:"tr",align:null},"Mask the suffix of the string, showing only a few prefix characters")))),(0,r.kt)("h2",{parentName:"admonition",id:"implementation"},"Implementation"),(0,r.kt)("p",{parentName:"admonition"},"Big shout out to Andrew Lock and his ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/creating-a-source-generator-part-1-creating-an-incremental-source-generator/"},"blog series")," on incremental source generators. I used that as a starting point for this project."),(0,r.kt)("p",{parentName:"admonition"},"His blog tells his story of building a source generator and you learn better ways to do things as you progress through the blog."),(0,r.kt)("p",{parentName:"admonition"},"In particular, in the last entry he breaks out the ",(0,r.kt)("inlineCode",{parentName:"p"},"Attributes")," into their own assembly. In the initial generator, he injects the ",(0,r.kt)("inlineCode",{parentName:"p"},"Attributes")," as code with these lines in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Initialize")," method of the generator, which is the typical method like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'context.RegisterPostInitializationOutput(ctx => ctx.AddSource(\n    "ClassExtensionsAttribute.g.cs",\n    SourceText.From(SourceGenerationHelper.Attribute, Encoding.UTF8)));\n')),(0,r.kt)("p",{parentName:"admonition"},"He says this works fine unless someone uses ",(0,r.kt)("inlineCode",{parentName:"p"},"InternalsVisibleTo")," to expose the internals of one assembly to another. He tried several things to solve this before coming up with a robust solution in ",(0,r.kt)("a",{parentName:"p",href:"https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/"},"part 8")," of his series. There's quite a bit of advanced csproj editing that he covers to get it to work. I applied similar changes and everything but the unit tests worked. After viewing his ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/andrewlock/StronglyTypedId"},"repo"),", I found his original unit test helper methods to build the code on-the-fly for the unit tests was different. After picking up those changes, the unit tests worked."),(0,r.kt)("h3",{parentName:"admonition",id:"basic-logic-of-optionstostringgeneratorinitialize"},"Basic Logic of OptionsToStringGenerator.Initialize()"),(0,r.kt)("p",{parentName:"admonition"},"This has the implementation of ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.iincrementalgenerator"},"IIncrementalGenerator"),".Initialize method. For this generator here's what I did:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Look for classes with at least one attribute (predicate, which must be very fast)"),(0,r.kt)("li",{parentName:"ol"},"Look for ones with my ",(0,r.kt)("inlineCode",{parentName:"li"},"OptionToStringAttribute")," (transform, which can be slower)"),(0,r.kt)("li",{parentName:"ol"},"Execute() generates the code",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Take the syntax and get the semantic model of the class, extracting the name, accessibility, and list of properties with a ",(0,r.kt)("inlineCode",{parentName:"li"},"get")),(0,r.kt)("li",{parentName:"ol"},"Generate the code for the extension method")))),(0,r.kt)("h2",{parentName:"admonition",id:"branching-strategy"},"Branching Strategy"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Branch from ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," for new features"),(0,r.kt)("li",{parentName:"ol"},"Pushes will trigger a build and test run using GitHub Actions"),(0,r.kt)("li",{parentName:"ol"},"When ready, create a PR to ",(0,r.kt)("inlineCode",{parentName:"li"},"main")),(0,r.kt)("li",{parentName:"ol"},"To push to the NuGet Gallery create a ",(0,r.kt)("inlineCode",{parentName:"li"},"releases/vX.X.X")," branch and push to it.")),(0,r.kt)("h2",{parentName:"admonition",id:"debugging-and-testing"},"Debugging and Testing"),(0,r.kt)("p",{parentName:"admonition"},"To debug the generator, the ",(0,r.kt)("inlineCode",{parentName:"p"},"unit")," test project calls ",(0,r.kt)("inlineCode",{parentName:"p"},"RunGeneratorsAndUpdateCompilation")," to run the generator and get the output. The unit test output will be the C# code for the extension method of the objects."),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"integration")," test project runs the generator then calls the extension methods and gets the output from it."),(0,r.kt)("p",{parentName:"admonition"},"In both cases, the output is written to files and the Verify package is used to compare the output to a snapshot file."),(0,r.kt)("p",{parentName:"admonition"},"For integration tests, if you make changes to the generator, you often have to restart Visual Studio to get it to load the new one."),(0,r.kt)("h2",{parentName:"admonition",id:"links-to-documentation"},"Links to Documentation"),(0,r.kt)("p",{parentName:"admonition"},"These are links to the MS documentation for the items I used in the generator."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol?view=roslyn-dotnet-4.6.0"},"ISymbol")," -- Base class for all semantic symbols"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.ipropertysymbol?view=roslyn-dotnet-4.6.0"},"IPropertySymbol")," -- Semantic for the property"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.ipropertysymbol.getmethod?view=roslyn-dotnet-4.6.0"},"GetMethod")," -- is it a {get}"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.declaredaccessibility"},"DeclaredAccessibility")," -- is it public?")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.inamedtypesymbol"},"INamedTypeSymbol")," -- More specific semantic for the class"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.getattributes?view=roslyn-dotnet-4.6.0"},"GetAttributes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.containingnamespace?view=roslyn-dotnet-4.6.0"},"ContainingNamespace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.declaredaccessibility?view=roslyn-dotnet-4.6.0"},"DeclaredAccessibility")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.inamespaceortypesymbol.getmembers"},"GetMembers")," -- get all the members of the class")),(0,r.kt)("h2",{parentName:"admonition",id:"links"},"Links"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://andrewlock.net/creating-a-source-generator-part-1-creating-an-incremental-source-generator/"},"Andrew Lock's blog series on incremental generators (Part 1)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/VerifyTests/Verify"},"Verify snapshot test tool")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets"},"MS Build (csproj) Pack Doc")," covers some of the less frequently used options"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/dotnet/runtime/tree/25c675ff78e0446fe596cea25c7e3969b0936a33/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen"},"MS LoggerMessage source generator source code")," referenced by Andrew."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/dotnet/extensions/tree/f34d120d2654057a31dc96d7f86dc42629044472/src/Generators"},"MS .NET Generators' source code")))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Generating similar ToString method for classes with many properties. It can also generate for external classes.")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"OptionToStringGenerator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Seekatar.OptionToStringGenerator" Version="0.3.1" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OptionToStringGenerator\\src\\Class2String\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"OptionToStringGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Class2String;\nusing Seekatar.OptionToStringGenerator;\nvar p = new Person();\np.FirstName = "Andrei";\np.LastName = "Ignat";\np.Age = 50;\nConsole.WriteLine(p.OptionsToString());    \n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OptionToStringGenerator\\src\\Class2String\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"OptionToStringGenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Seekatar.OptionToStringGenerator;\n\nnamespace Class2String;\n\n[OptionsToString]\ninternal class Person\n{\n    [OutputMask(PrefixLen = 3)]\n    public string? FirstName { get; set; }\n    [OutputMask(SuffixLen = 3)]\n    public string? LastName { get; set; }\n\n    public string FUllName => $"{FirstName} {LastName}";\n\n    [OutputIgnore]\n    public int Age { get; set; }\n}\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OptionToStringGenerator\\src\\Class2String\\obj\\GX\\Seekatar.OptionToStringGenerator\\Seekatar.OptionToStringGenerator.OptionToStringGenerator\\ClassExtensions.g.cs",label:"ClassExtensions.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'#nullable enable\nusing static Seekatar.Mask;\nnamespace Seekatar.OptionToStringGenerator\n{\n    public static partial class ClassExtensions\n    {\n        internal static string OptionsToString(this Class2String.Person o)\n        {\n            return $@"Class2String.Person:\n  FirstName : {Format(o?.FirstName,prefixLen:3,suffixLen:0)}\n  LastName  : {Format(o?.LastName,prefixLen:0,suffixLen:3)}\n  FUllName  : {Format(o?.FUllName)}\n";\n        }\n    }\n}\n\n')))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(59929).Z},"Download Example project OptionToStringGenerator "))),(0,r.kt)("h3",{id:"share-optiontostringgenerator"},"Share OptionToStringGenerator"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&quote=OptionToStringGenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&text=OptionToStringGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&title=OptionToStringGenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&title=OptionToStringGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/OptionToStringGenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/OptionToStringGenerator")),(0,r.kt)("h3",{id:"in-the-same-category-enhancementclass---23-other-generators"},"In the same category (EnhancementClass) - 23 other generators"),(0,r.kt)("h4",{id:"apparatusaot"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,r.kt)("h4",{id:"aspectgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/AspectGenerator"},"AspectGenerator")),(0,r.kt)("h4",{id:"copyto"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CopyTo"},"CopyTo")),(0,r.kt)("h4",{id:"dudnet"},(0,r.kt)("a",{parentName:"h4",href:"/docs/DudNet"},"DudNet")),(0,r.kt)("h4",{id:"fastgenericnew"},(0,r.kt)("a",{parentName:"h4",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,r.kt)("h4",{id:"generatorequals"},(0,r.kt)("a",{parentName:"h4",href:"/docs/GeneratorEquals"},"GeneratorEquals")),(0,r.kt)("h4",{id:"hsusgsync"},(0,r.kt)("a",{parentName:"h4",href:"/docs/HsuSgSync"},"HsuSgSync")),(0,r.kt)("h4",{id:"immutype"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Immutype"},"Immutype")),(0,r.kt)("h4",{id:"lingaudit"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Ling.Audit"},"Ling.Audit")),(0,r.kt)("h4",{id:"lomboknet"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Lombok.NET"},"Lombok.NET")),(0,r.kt)("h4",{id:"m31fluentapi"},(0,r.kt)("a",{parentName:"h4",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,r.kt)("h4",{id:"memorypack"},(0,r.kt)("a",{parentName:"h4",href:"/docs/MemoryPack"},"MemoryPack")),(0,r.kt)("h4",{id:"meziantoupolyfill"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Meziantou.Polyfill"},"Meziantou.Polyfill")),(0,r.kt)("h4",{id:"microsoftextensionslogging"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,r.kt)("h4",{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"},"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator")),(0,r.kt)("h4",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,r.kt)("h4",{id:"rscg_decorator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,r.kt)("h4",{id:"rscg_utilitytypes"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_UtilityTypes"},"RSCG_UtilityTypes")),(0,r.kt)("h4",{id:"staticreflection"},(0,r.kt)("a",{parentName:"h4",href:"/docs/StaticReflection"},"StaticReflection")),(0,r.kt)("h4",{id:"syncmethodgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,r.kt)("h4",{id:"systemruntimeinteropservices"},(0,r.kt)("a",{parentName:"h4",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,r.kt)("h4",{id:"systemtextregularexpressions"},(0,r.kt)("a",{parentName:"h4",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")),(0,r.kt)("h4",{id:"telemetrylogging"},(0,r.kt)("a",{parentName:"h4",href:"/docs/TelemetryLogging"},"TelemetryLogging")))}h.isMDXComponent=!0},59929:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/OptionToStringGenerator-8f39fa860ec16085009b2371a45a3cfc.zip"}}]);