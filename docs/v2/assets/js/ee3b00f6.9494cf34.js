"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3242],{31106:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/files/StronglyTypedUid-7c1e738afaa4eccf1e85ecef0c976001.zip"},40152:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>c,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"RSCG-Examples/StronglyTypedUid","title":"134 - StronglyTypedUid","description":"Transforming a record into a GUID","source":"@site/docs/RSCG-Examples/StronglyTypedUid.md","sourceDirName":"RSCG-Examples","slug":"/StronglyTypedUid","permalink":"/RSCG_Examples/v2/docs/StronglyTypedUid","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1340,"frontMatter":{"sidebar_position":1340,"title":"134 - StronglyTypedUid","description":"Transforming a record into a GUID","slug":"/StronglyTypedUid"},"sidebar":"tutorialSidebar","previous":{"title":"133 - FusionReactor","permalink":"/RSCG_Examples/v2/docs/FusionReactor"},"next":{"title":"135 - BitsKit","permalink":"/RSCG_Examples/v2/docs/BitsKit"}}');var i=r(74848),s=r(28453),o=r(11470),d=r(19365),a=r(14252),l=r(82474);const c={sidebar_position:1340,title:"134 - StronglyTypedUid",description:"Transforming a record into a GUID",slug:"/StronglyTypedUid"},p="StronglyTypedUid  by Victor S\xe1nchez",u={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Buy me a coffee",id:"buy-me-a-coffee",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share StronglyTypedUid",id:"share-stronglytypeduid",level:3},...l.RM];function y(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"stronglytypeduid--by-victor-s\xe1nchez",children:"StronglyTypedUid  by Victor S\xe1nchez"})}),"\n",(0,i.jsx)(a.A,{toc:h}),"\n",(0,i.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/StronglyTypedUid/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/StronglyTypedUid?label=StronglyTypedUid",alt:"Nuget"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/vicosanz/StronglyTypedUid",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/vicosanz/StronglyTypedUid?label=updated",alt:"GitHub last commit"})}),"\n",(0,i.jsx)(n.img,{src:"https://img.shields.io/github/stars/vicosanz/StronglyTypedUid?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,i.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,i.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Name: ",(0,i.jsx)(n.strong,{children:"StronglyTypedUid"})]}),(0,i.jsx)(n.p,{children:"Implementation of Strongly Typed Ids."}),(0,i.jsx)(n.p,{children:"Author: Victor S\xe1nchez"}),(0,i.jsxs)(n.p,{children:["NuGet:\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/StronglyTypedUid/",children:"https://www.nuget.org/packages/StronglyTypedUid/"})})]}),(0,i.jsxs)(n.p,{children:["You can find more details at ",(0,i.jsx)(n.a,{href:"https://github.com/vicosanz/StronglyTypedUid",children:"https://github.com/vicosanz/StronglyTypedUid"})]}),(0,i.jsxs)(n.p,{children:["Source: ",(0,i.jsx)(n.a,{href:"https://github.com/vicosanz/StronglyTypedUid",children:"https://github.com/vicosanz/StronglyTypedUid"})]})]}),"\n",(0,i.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.h1,{id:"stronglytypeduid",children:"StronglyTypedUid"}),(0,i.jsx)(n.p,{children:"C# Implementation of Strongly Typed Id made easy."}),(0,i.jsxs)(n.p,{children:["StronglyTypedUid ",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/StronglyTypedUid/",children:(0,i.jsx)(n.img,{src:"https://buildstats.info/nuget/StronglyTypedUid",alt:"NuGet Badge"})})]}),(0,i.jsxs)(n.p,{children:["StronglyTypedUid.Generator ",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/StronglyTypedUid.Generator/",children:(0,i.jsx)(n.img,{src:"https://buildstats.info/nuget/StronglyTypedUid.Generator",alt:"NuGet Badge"})})]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/vicosanz/StronglyTypedUid/actions/workflows/main.yml",children:(0,i.jsx)(n.img,{src:"https://github.com/vicosanz/StronglyTypedUid/actions/workflows/main.yml/badge.svg",alt:"publish to nuget"})})}),(0,i.jsx)(n.h2,{id:"buy-me-a-coffee",children:"Buy me a coffee"}),(0,i.jsxs)(n.p,{children:["If you want to reward my effort, ","\u2615"," ",(0,i.jsx)(n.a,{href:"https://www.paypal.com/paypalme/vicosanzdev?locale.x=es_XC",children:"https://www.paypal.com/paypalme/vicosanzdev?locale.x=es_XC"})]}),(0,i.jsx)(n.p,{children:"All strongly typed ids are source generated, you must create a record struct in this ways:"}),(0,i.jsx)(n.p,{children:"Using attribute decorating a record struct (default Guid version)"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"    [StronglyTypedUid] \n    public readonly partial record struct CustomerId { }\n"})}),(0,i.jsx)(n.p,{children:"If you want change to Ulid"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"    [StronglyTypedUid(asUlid:true)] \n    public readonly partial record struct CustomerId { }\n"})}),(0,i.jsx)(n.p,{children:"Create additional converters to popular packages like efcore, dapper and newtonsoftjson"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"    [StronglyTypedUid(asUlid:true, [EnumAdditionalConverters.EFCore, EnumAdditionalConverters.Dapper, EnumAdditionalConverters.NewtonsoftJson])]\n    public readonly partial record struct CustomerId { }\n"})}),(0,i.jsx)(n.p,{children:"The generator will create a partial record struct of the same name"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Auto generated code\n[TypeConverter(typeof(CustomerIdTypeConverter))]\n[System.Text.Json.Serialization.JsonConverter(typeof(CustomerIdJsonConverter))]\npublic readonly partial record struct CustomerId(Guid Value) : IStronglyTypedGuid\n{\n    public static CustomerId Empty => new(Guid.Empty);\n\n    public static CustomerId NewCustomerId() => new(Guid.NewGuid());\n\n    public static implicit operator CustomerId(Guid value) => new(value);\n\n    public static explicit operator Guid(CustomerId value) => value.Value;\n\n    public bool IsEmpty => Value == Guid.Empty;\n\n    public override string ToString() => Value.ToString();\n\n    public static CustomerId Parse(string text) => new CustomerId(Guid.Parse(text));\n\n    public static bool TryParse(string text, out CustomerId result)\n    {\n        try\n        {\n            if (Guid.TryParse(text, out Guid uid))\n            {\n                result = uid;\n                return true;\n            }\n        }\n        catch (Exception)\n        {\n        }\n        result = default;\n        return false;\n    }\n}\n"})}),(0,i.jsx)(n.p,{children:"You can add additional logic to your strongly type id."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'    [StronglyTypedUid] \n    public readonly partial record struct CustomerId \n    { \n        public override string ToTaggedString() => $"CID-{Value}";\n\n        public static bool TryParseTagged(string text, out CustomerId customer)\n        {\n\t\t    try\n\t\t    {\n                if (Guid.TryParse(text[4..], out Guid result))\n                {\n                    customer = result;\n                    return true;\n                }\n            }\n            catch (Exception)\n\t\t    {\n\t\t    }\n            customer = default;\n            return false;\n        }\n    }\n'})}),(0,i.jsx)(n.p,{children:"The new type is decorated with a TypeConverter and a JsonConverter automatically"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[TypeConverter(typeof(CustomerIdTypeConverter))]\n[System.Text.Json.Serialization.JsonConverter(typeof(CustomerIdJsonConverter))]\n"})}),(0,i.jsx)(n.p,{children:"You can serialize and deserialize without problems"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public record Customer(CustomerId Id, string Name);\n\n\nvar newcustomer = new Customer(CustomerId.NewCustomerId(), "Jhon");\n\nvar serializeOptions = new JsonSerializerOptions\n{\n    WriteIndented = true\n};\nvar json = JsonSerializer.Serialize(newcustomer, serializeOptions);\n\nvar newcustomer2 = JsonSerializer.Deserialize<Customer>(json);\n\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Transforming a record into a GUID"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsxs)(d.A,{value:"csproj",label:"CSharp Project",children:[(0,i.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,i.jsx)(n.strong,{children:"StronglyTypedUid"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="StronglyTypedUid" Version="1.0.1" />\n    <PackageReference Include="StronglyTypedUid.Common" Version="1.0.1" />\n    <PackageReference Include="StronglyTypedUid.Generator" Version="1.0.1" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,i.jsxs)(d.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StronglyTypedUid\\src\\RecordToGuid\\Program.cs",label:"Program.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"StronglyTypedUid"})," in ",(0,i.jsx)(n.em,{children:"Program.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using RecordToGuid;\n\nPersonId personId = PersonId.Empty;\nConsole.WriteLine(personId);\npersonId = PersonId.NewPersonId();\nConsole.WriteLine(personId);\n\n"})})]}),(0,i.jsxs)(d.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StronglyTypedUid\\src\\RecordToGuid\\PersonId.cs",label:"PersonId.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"StronglyTypedUid"})," in ",(0,i.jsx)(n.em,{children:"PersonId.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing StronglyTypedUid;\n\nnamespace RecordToGuid;\n[StronglyTypedUid]\npublic readonly partial record struct PersonId\n{\n}\n\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,i.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,i.jsx)(o.A,{children:(0,i.jsx)(d.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StronglyTypedUid\\src\\RecordToGuid\\obj\\GX\\StronglyTypedUid.Generator\\StronglyTypedUid.Generator.StronglyTypedUidGenerator\\RecordToGuid.PersonId.g.cs",label:"RecordToGuid.PersonId.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing System.ComponentModel;\nusing System.Globalization;\nusing System.Text.Json.Serialization;\nusing System.Text.Json;\nusing System.Buffers;\n\nusing StronglyTypedUid;\n\n#nullable enable\n\nnamespace RecordToGuid;\n\n[TypeConverter(typeof(PersonIdTypeConverter))]\n[System.Text.Json.Serialization.JsonConverter(typeof(PersonIdJsonConverter))]\npublic readonly partial record struct PersonId(Guid Value) : IStronglyTypedUid\n{\n    public static PersonId Empty => new(Guid.Empty);\n\n    public static PersonId NewPersonId() => new(Guid.NewGuid());\n\n    public static implicit operator PersonId(Guid value) => new(value);\n\n    public static explicit operator Guid(PersonId value) => value.Value;\n\n    public bool IsEmpty => Value == Guid.Empty;\n\n    public override string ToString() => Value.ToString();\n\n    public static PersonId Parse(string text) => new PersonId(Guid.Parse(text));\n\n    public static bool TryParse(string text, out PersonId result)\n    {\n        try\n        {\n            if (Guid.TryParse(text, out Guid uid))\n            {\n                result = uid;\n                return true;\n            }\n        }\n        catch (Exception)\n        {\n        }\n        result = default;\n        return false;\n    }\n}\n\npublic class PersonIdTypeConverter : TypeConverter\n{\n    private static readonly Type StringType = typeof(string);\n    private static readonly Type UidType = typeof(Guid);\n\n    public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) => \n        sourceType == StringType || sourceType == UidType || base.CanConvertFrom(context, sourceType);\n\n    public override object? ConvertFrom(ITypeDescriptorContext? context,\n        CultureInfo? culture, object value) => value switch\n        {\n            Guid g => new PersonId(g),\n            string stringValue => PersonId.Parse(stringValue),\n            _ => base.ConvertFrom(context, culture, value),\n        };\n\n    public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) =>\n        destinationType == StringType || destinationType == UidType || base.CanConvertTo(context, destinationType);\n\n    public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType)\n    {\n        if (value is PersonId result)\n        {\n            if (destinationType == StringType)\n            {\n                return result.ToString();\n            }\n            if (destinationType == UidType)\n            {\n                return (Guid)result;\n            }\n        }\n        return base.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\npublic class PersonIdJsonConverter : JsonConverter<PersonId>\n{\n    public override PersonId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        try\n        {\n            if (reader.TokenType != JsonTokenType.String) throw new JsonException("Expected string");\n            return new PersonId(new Guid(reader.GetString()));\n        }\n        catch (IndexOutOfRangeException e)\n        {\n            throw new JsonException("PersonId invalid: length must be 36", e);\n        }\n        catch (OverflowException e)\n        {\n            throw new JsonException("PersonId invalid: invalid character", e);\n        }\n    }\n    public override void Write(Utf8JsonWriter writer, PersonId value, JsonSerializerOptions options)\n    {\n        writer.WriteStringValue(value.ToString());\n    }\n}\n\n\n'})})})}),"\n",(0,i.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,i.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(31106).A+"",children:"Download Example project StronglyTypedUid "})})}),"\n",(0,i.jsx)(n.h3,{id:"share-stronglytypeduid",children:"Share StronglyTypedUid"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&quote=StronglyTypedUid",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&text=StronglyTypedUid:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&title=StronglyTypedUid",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid&title=StronglyTypedUid&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStronglyTypedUid",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StronglyTypedUid",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StronglyTypedUid"})}),"\n",(0,i.jsx)(n.p,{children:"aaa"}),"\n",(0,i.jsx)(l.Ay,{})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},82474:(e,n,r)=>{r.d(n,{Ay:()=>d,RM:()=>s});var t=r(74848),i=r(28453);const s=[{value:"Category &quot;PrimitiveObsession&quot; has the following generators:",id:"category-primitiveobsession-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function o(e){const n={a:"a",h3:"h3",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"category-primitiveobsession-has-the-following-generators",children:'Category "PrimitiveObsession" has the following generators:'}),"\n",(0,t.jsxs)(n.p,{children:["1 ",(0,t.jsx)(n.a,{href:"/docs/DomainPrimitives",children:"DomainPrimitives"})]}),"\n",(0,t.jsxs)(n.p,{children:["2 ",(0,t.jsx)(n.a,{href:"/docs/Strongly",children:"Strongly"})]}),"\n",(0,t.jsxs)(n.p,{children:["3 ",(0,t.jsx)(n.a,{href:"/docs/StronglyTypedUid",children:"StronglyTypedUid"})]}),"\n",(0,t.jsxs)(n.p,{children:["4 ",(0,t.jsx)(n.a,{href:"/docs/UnitGenerator",children:"UnitGenerator"})]}),"\n",(0,t.jsxs)(n.p,{children:["5 ",(0,t.jsx)(n.a,{href:"/docs/Vogen",children:"Vogen"})]}),"\n",(0,t.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/Categories/PrimitiveObsession",children:"PrimitiveObsession"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);