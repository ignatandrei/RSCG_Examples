"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9510],{41032:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>p,default:()=>d,frontMatter:()=>s,metadata:()=>m,toc:()=>u});var n=a(87462),r=(a(67294),a(3905)),o=a(73992),l=a(18679),i=a(68839);const s={sidebar_position:1670,title:"167 - polytype",description:"Generating shape like reflection from classes. See PolyType.Examples for more details",slug:"/polytype"},p="polytype  by Eirik Tsarpalis",m={unversionedId:"RSCG-Examples/polytype",id:"RSCG-Examples/polytype",title:"167 - polytype",description:"Generating shape like reflection from classes. See PolyType.Examples for more details",source:"@site/docs/RSCG-Examples/polytype.md",sourceDirName:"RSCG-Examples",slug:"/polytype",permalink:"/RSCG_Examples/v2/docs/polytype",draft:!1,tags:[],version:"current",sidebarPosition:1670,frontMatter:{sidebar_position:1670,title:"167 - polytype",description:"Generating shape like reflection from classes. See PolyType.Examples for more details",slug:"/polytype"},sidebar:"tutorialSidebar",previous:{title:"166 - Datacute.EmbeddedResourcePropertyGenerator",permalink:"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},y={},u=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share polytype",id:"share-polytype",level:3},{value:"In the same category (FunctionalProgramming) - 14 other generators",id:"in-the-same-category-functionalprogramming---14-other-generators",level:3},{value:"cachesourcegenerator",id:"cachesourcegenerator",level:4},{value:"dunet",id:"dunet",level:4},{value:"Dusharp",id:"dusharp",level:4},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:4},{value:"FunicularSwitch",id:"funicularswitch",level:4},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:4},{value:"OneOf",id:"oneof",level:4},{value:"PartiallyApplied",id:"partiallyapplied",level:4},{value:"rscg_queryables",id:"rscg_queryables",level:4},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:4},{value:"Sera.Union",id:"seraunion",level:4},{value:"TypeUtilities",id:"typeutilities",level:4},{value:"UnionGen",id:"uniongen",level:4},{value:"UnionsGenerator",id:"unionsgenerator",level:4}],c={toc:u},g="wrapper";function d(e){let{components:t,...s}=e;return(0,r.kt)(g,(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"polytype--by-eirik-tsarpalis"},"polytype  by Eirik Tsarpalis"),(0,r.kt)(i.Z,{toc:u,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/polytype/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/polytype?label=polytype",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/PolyType"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/eiriktsarpalis/PolyType?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/eiriktsarpalis/PolyType?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"polytype")),(0,r.kt)("p",{parentName:"admonition"},"Practical Generic Programming for C#"),(0,r.kt)("p",{parentName:"admonition"},"Author: Eirik Tsarpalis"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/polytype/"},"https://www.nuget.org/packages/polytype/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/PolyType"},"https://github.com/eiriktsarpalis/PolyType")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/PolyType"},"https://github.com/eiriktsarpalis/PolyType"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"polytype-build--tests-nuget-badge"},"PolyType ",(0,r.kt)("a",{parentName:"h1",href:"https://github.com/eiriktsarpalis/PolyType/actions/workflows/build.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/eiriktsarpalis/PolyType/actions/workflows/build.yml/badge.svg",alt:"Build & Tests"}))," ",(0,r.kt)("a",{parentName:"h1",href:"https://www.nuget.org/packages/PolyType/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/PolyType",alt:"NuGet Badge"}))),(0,r.kt)("p",{parentName:"admonition"},"PolyType is a practical datatype-generic programming library for .NET types. It is a direct adaptation of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/TypeShape"},"TypeShape")," library for F#, adapted to patterns and idioms available in C#. See the ",(0,r.kt)("a",{parentName:"p",href:"https://eiriktsarpalis.github.io/PolyType"},"project website")," for additional background and ",(0,r.kt)("a",{parentName:"p",href:"https://eiriktsarpalis.github.io/PolyType/api/PolyType.html"},"API documentation"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"quick-start"},"Quick Start"),(0,r.kt)("p",{parentName:"admonition"},"You can try the library by installing the ",(0,r.kt)("inlineCode",{parentName:"p"},"PolyType")," NuGet package:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ dotnet add package PolyType\n")),(0,r.kt)("p",{parentName:"admonition"},"which includes the core types and source generator for generating type shapes:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"using PolyType;\n\n[GenerateShape]\npublic partial record Person(string name, int age);\n")),(0,r.kt)("p",{parentName:"admonition"},"Doing this will augment ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," with an implementation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"IShapeable<Person>")," interface. This suffices to make ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," usable with any library that targets the PolyType core abstractions. You can try this out by installing the built-in example libraries:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ dotnet add package PolyType.Examples\n")),(0,r.kt)("p",{parentName:"admonition"},"Here's how the same value can be serialized to three separate formats."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using PolyType.Examples.JsonSerializer;\nusing PolyType.Examples.CborSerializer;\nusing PolyType.Examples.XmlSerializer;\n\nPerson person = new("Pete", 70);\nJsonSerializerTS.Serialize(person); // {"Name":"Pete","Age":70}\nXmlSerializer.Serialize(person);    // <value><Name>Pete</Name><Age>70</Age></value>\nCborSerializer.EncodeToHex(person); // A2644E616D656450657465634167651846\n')),(0,r.kt)("p",{parentName:"admonition"},"Since the application uses a source generator to produce the shape for ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),", it is fully compatible with Native AOT. See the ",(0,r.kt)("a",{parentName:"p",href:"https://eiriktsarpalis.github.io/PolyType/shape-providers.html"},"shape providers")," article for more details on how to use the library with your types."),(0,r.kt)("h2",{parentName:"admonition",id:"introduction"},"Introduction"),(0,r.kt)("p",{parentName:"admonition"},"PolyType is a meta-library that facilitates rapid development of high performance datatype-generic programs. It exposes a simplified model for .NET types that makes it easy for library authors to publish production-ready components in just a few lines of code. The built-in source generator ensures that any library built on top of the PolyType abstractions gets Native AOT support for free."),(0,r.kt)("p",{parentName:"admonition"},"As a library author, PolyType lets you write high performance, feature complete generic components that target its ",(0,r.kt)("a",{parentName:"p",href:"https://eiriktsarpalis.github.io/PolyType/core-abstractions.html"},"core abstractions"),". For example, a parser API using PolyType might look as follows:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"public static class MyFancyParser\n{\n    public static T? Parse<T>(string myFancyFormat) where T : IShapeable<T>;\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"As an end user, PolyType lets you generate shape models for your own types that can be used with one or more supported libraries:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-C#"},"Person? person = MyFancyParser.Parse<Person>(format); // Compiles\n\n[GenerateShape] // Generate an IShapeable<TPerson> implementation\npartial record Person(string name, int age, List<Person> children);\n")),(0,r.kt)("p",{parentName:"admonition"},"For more information see:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://eiriktsarpalis.github.io/PolyType/core-abstractions.html"},"core abstractions")," document for an overview of the core programming model."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://eiriktsarpalis.github.io/PolyType/shape-providers.html"},"shape providers")," document for an overview of the built-in shape providers and their APIs."),(0,r.kt)("li",{parentName:"ul"},"The generated ",(0,r.kt)("a",{parentName:"li",href:"https://eiriktsarpalis.github.io/PolyType/api/PolyType.html"},"API documentation")," for the project."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Examples"},(0,r.kt)("inlineCode",{parentName:"a"},"PolyType.Examples"))," project for advanced examples of libraries built on top of PolyType.")),(0,r.kt)("h2",{parentName:"admonition",id:"case-study-writing-a-json-serializer"},"Case Study: Writing a JSON serializer"),(0,r.kt)("p",{parentName:"admonition"},"The repo includes a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Examples/JsonSerializer"},"JSON serializer")," built on top of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Utf8JsonWriter"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Utf8JsonReader")," primitives provided by System.Text.Json. At the time of writing, the full implementation is just under 1200 lines of code but exceeds STJ's built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonSerializer")," both in terms of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/PolyType/blob/main/tests/PolyType.Tests/JsonTests.cs"},"supported types")," and performance."),(0,r.kt)("h3",{parentName:"admonition",id:"performance"},"Performance"),(0,r.kt)("p",{parentName:"admonition"},"Here's a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eiriktsarpalis/PolyType/blob/main/tests/PolyType.Benchmarks/JsonBenchmark.cs"},"benchmark")," comparing ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Text.Json")," with the included PolyType implementation:"),(0,r.kt)("h4",{parentName:"admonition",id:"serialization"},"Serialization"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Ratio"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Allocated"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Alloc Ratio"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Serialize_StjReflection"),(0,r.kt)("td",{parentName:"tr",align:"right"},"491.9 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.00"),(0,r.kt)("td",{parentName:"tr",align:"right"},"312 B"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Serialize_StjSourceGen"),(0,r.kt)("td",{parentName:"tr",align:"right"},"467.0 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.95"),(0,r.kt)("td",{parentName:"tr",align:"right"},"312 B"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Serialize_StjSourceGen_FastPath"),(0,r.kt)("td",{parentName:"tr",align:"right"},"227.2 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.46"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Serialize_PolyTypeReflection"),(0,r.kt)("td",{parentName:"tr",align:"right"},"277.9 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.57"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Serialize_PolyTypeSourceGen"),(0,r.kt)("td",{parentName:"tr",align:"right"},"273.6 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.56"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.00")))),(0,r.kt)("h4",{parentName:"admonition",id:"deserialization"},"Deserialization"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Ratio"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Allocated"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Alloc Ratio"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Deserialize_StjReflection"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1,593.0 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.00"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1024 B"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Deserialize_StjSourceGen"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1,530.3 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.96"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1000 B"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.98")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Deserialize_PolyTypeReflection"),(0,r.kt)("td",{parentName:"tr",align:"right"},"773.1 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.49"),(0,r.kt)("td",{parentName:"tr",align:"right"},"440 B"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.43")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Deserialize_PolyTypeSourceGen"),(0,r.kt)("td",{parentName:"tr",align:"right"},"746.7 ns"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.47"),(0,r.kt)("td",{parentName:"tr",align:"right"},"440 B"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.43")))),(0,r.kt)("p",{parentName:"admonition"},"Even though both serializers target the same underlying reader and writer types, the PolyType implementation is ~75% faster for serialization and ~100% faster for deserialization, when compared with System.Text.Json's metadata serializer. As expected, fast-path serialization is still fastest since its implementation is fully inlined."),(0,r.kt)("h2",{parentName:"admonition",id:"known-libraries-based-on-polytype"},"Known libraries based on PolyType"),(0,r.kt)("p",{parentName:"admonition"},"The following code bases are based upon PolyType and may be worth checking out."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/AArnott/Nerdbank.MessagePack"},"Nerdbank.MessagePack")," - a MessagePack library with performance to rival MessagePack-CSharp, and greater simplicity and additional features.")),(0,r.kt)("h2",{parentName:"admonition",id:"project-structure"},"Project structure"),(0,r.kt)("p",{parentName:"admonition"},"The repo consists of the following projects:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The core ",(0,r.kt)("inlineCode",{parentName:"li"},"PolyType")," library containing:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType/Abstractions"},"core abstractions")," defining the type model."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType/ReflectionProvider"},"reflection provider")," implementation."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType/SourceGenModel"},"model classes")," used by the source generator."))),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.SourceGenerator"},(0,r.kt)("inlineCode",{parentName:"a"},"PolyType.SourceGenerator"))," project contains the built-in source generator implementation."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Roslyn"},(0,r.kt)("inlineCode",{parentName:"a"},"PolyType.Roslyn"))," library exposes a set of components for extracting data models from Roslyn type symbols. Used as the foundation for the built-in source generator."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/src/PolyType.Examples"},(0,r.kt)("inlineCode",{parentName:"a"},"PolyType.Examples"))," containing library examples:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A serializer built on top of System.Text.Json,"),(0,r.kt)("li",{parentName:"ul"},"A serializer built on top of System.Xml,"),(0,r.kt)("li",{parentName:"ul"},"A serializer built on top of System.Formats.Cbor,"),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"ConfigurationBinder")," like implementation,"),(0,r.kt)("li",{parentName:"ul"},"A simple pretty-printer for .NET values,"),(0,r.kt)("li",{parentName:"ul"},"A generic random value generator based on ",(0,r.kt)("inlineCode",{parentName:"li"},"System.Random"),","),(0,r.kt)("li",{parentName:"ul"},"A JSON schema generator for .NET types,"),(0,r.kt)("li",{parentName:"ul"},"An object cloning function,"),(0,r.kt)("li",{parentName:"ul"},"A structural ",(0,r.kt)("inlineCode",{parentName:"li"},"IEqualityComparer<T>")," generator for POCOs and collections,"),(0,r.kt)("li",{parentName:"ul"},"An object validator in the style of System.ComponentModel.DataAnnotations."),(0,r.kt)("li",{parentName:"ul"},"A simple .NET object mapper."))),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eiriktsarpalis/PolyType/tree/main/applications"},(0,r.kt)("inlineCode",{parentName:"a"},"applications"))," folder contains sample Native AOT console applications."))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Generating shape like reflection from classes. See PolyType.Examples for more details")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"polytype")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="PolyType" Version="0.16.1" />\n    <PackageReference Include="PolyType.Examples" Version="0.16.1" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"polytype")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using PolyType.Examples.JsonSerializer;\nusing PolyType.Examples.CborSerializer;\nusing PolyType.Examples.XmlSerializer;\nusing ConsoleApp1;\nusing PolyType.Examples.Cloner;\n\nPerson person = new("Pete", 70);\nConsole.WriteLine(JsonSerializerTS.Serialize(person)); // {"Name":"Pete","Age":70}\nConsole.WriteLine(XmlSerializer.Serialize(person));    // <value><Name>Pete</Name><Age>70</Age></value>\nConsole.WriteLine(CborSerializer.EncodeToHex(person)); // A2644E616D656450657465634167651846\nperson.Childs = [new Person("Andrei", 55)];\n\nperson.Childs[0].ID = 1;\nvar q = Cloner.Clone(person);\nperson.Childs[0].ID = 10;\nConsole.WriteLine(q);\nConsole.WriteLine(person);\nConsole.WriteLine(q.Childs[0]);\nConsole.WriteLine(person.Childs[0]);\n\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"polytype")," in ",(0,r.kt)("em",{parentName:"p"},"Person.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using PolyType;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp1;\n[GenerateShape]\npublic partial record Person(string name, int age)\n{\n    public Person[] Childs { get; set; } = [];\n\n    public int ID;\n}\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\ConsoleApp1.Person.ITypeShapeProviderOfT.g.cs",label:"ConsoleApp1.Person.ITypeShapeProviderOfT.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace ConsoleApp1\n{\n    public partial record Person : global::PolyType.IShapeable<global::ConsoleApp1.Person>\n    {\n        static global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person> global::PolyType.IShapeable<global::ConsoleApp1.Person>.GetShape() \n            => global::PolyType.SourceGenerator.GenerateShapeProvider.Default.Person;\n    }\n}\n\n"))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.g.cs",label:"GenerateShapeProvider.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        private const global::System.Reflection.BindingFlags InstanceBindingFlags = \n            global::System.Reflection.BindingFlags.Public | \n            global::System.Reflection.BindingFlags.NonPublic | \n            global::System.Reflection.BindingFlags.Instance;\n        \n        /// <summary>Gets the default instance of the <see cref="GenerateShapeProvider"/> class.</summary>\n        public static GenerateShapeProvider Default { get; } = new();\n        \n        /// <summary>Initializes a new instance of the <see cref="GenerateShapeProvider"/> class.</summary>\n        public GenerateShapeProvider() { }\n    }\n}\n\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.Int32.g.cs",label:"GenerateShapeProvider.Int32.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<int> Int32 => _Int32 ??= Create_Int32();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<int>? _Int32;\n\n        private global::PolyType.Abstractions.ITypeShape<int> Create_Int32()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenObjectTypeShape<int>\n            {\n                Provider = this,\n                IsRecordType = false,\n                IsTupleType = false,\n                CreatePropertiesFunc = null,\n                CreateConstructorFunc = null,\n            };\n        }\n    }\n}\n\n"))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.ITypeShapeProvider.g.cs",label:"GenerateShapeProvider.ITypeShapeProvider.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider : global::PolyType.ITypeShapeProvider\n    {\n        /// <summary>\n        /// Gets the generated <see cref="global::PolyType.Abstractions.ITypeShape{T}" /> for the specified type.\n        /// </summary>\n        /// <typeparam name="T">The type for which a shape is requested.</typeparam>\n        /// <returns>\n        /// The generated <see cref="global::PolyType.Abstractions.ITypeShape{T}" /> for the specified type.\n        /// </returns>\n        public global::PolyType.Abstractions.ITypeShape<T>? GetShape<T>()\n            => (global::PolyType.Abstractions.ITypeShape<T>?)GetShape(typeof(T));\n        \n        /// <summary>\n        /// Gets the generated <see cref="global::PolyType.Abstractions.ITypeShape" /> for the specified type.\n        /// </summary>\n        /// <param name="type">The type for which a shape is requested.</param>\n        /// <returns>\n        /// The generated <see cref="global::PolyType.Abstractions.ITypeShape" /> for the specified type.\n        /// </returns>\n        public global::PolyType.Abstractions.ITypeShape? GetShape(global::System.Type type)\n        {\n            if (type == typeof(global::ConsoleApp1.Person[]))\n                return Person_Array;\n            \n            if (type == typeof(string))\n                return String;\n            \n            if (type == typeof(global::ConsoleApp1.Person))\n                return Person;\n            \n            if (type == typeof(int))\n                return Int32;\n            \n            return null;\n        }\n    }\n}\n\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.Person.g.cs",label:"GenerateShapeProvider.Person.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person> Person => _Person ??= Create_Person();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person>? _Person;\n\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person> Create_Person()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenObjectTypeShape<global::ConsoleApp1.Person>\n            {\n                Provider = this,\n                IsRecordType = true,\n                IsTupleType = false,\n                CreatePropertiesFunc = CreateProperties_Person,\n                CreateConstructorFunc = CreateConstructor_Person,\n            };\n        }\n\n        private global::PolyType.Abstractions.IPropertyShape[] CreateProperties_Person() => new global::PolyType.Abstractions.IPropertyShape[]\n        {\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, string>\n            {\n                Name = "name",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = String,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.name,\n                Setter = null,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("name", InstanceBindingFlags, null, typeof(string), [], null),\n                IsField = false,\n                IsGetterPublic = true,\n                IsSetterPublic = false,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = false,\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, int>\n            {\n                Name = "age",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = Int32,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.age,\n                Setter = null,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("age", InstanceBindingFlags, null, typeof(int), [], null),\n                IsField = false,\n                IsGetterPublic = true,\n                IsSetterPublic = false,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = false,\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, global::ConsoleApp1.Person[]>\n            {\n                Name = "Childs",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = Person_Array,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.Childs,\n                Setter = static (ref global::ConsoleApp1.Person obj, global::ConsoleApp1.Person[] value) => obj.Childs = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("Childs", InstanceBindingFlags, null, typeof(global::ConsoleApp1.Person[]), [], null),\n                IsField = false,\n                IsGetterPublic = true,\n                IsSetterPublic = true,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = true,\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenPropertyShape<global::ConsoleApp1.Person, int>\n            {\n                Name = "ID",\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                PropertyType = Int32,\n                Getter = static (ref global::ConsoleApp1.Person obj) => obj.ID,\n                Setter = static (ref global::ConsoleApp1.Person obj, int value) => obj.ID = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetField("ID", InstanceBindingFlags),\n                IsField = true,\n                IsGetterPublic = true,\n                IsSetterPublic = true,\n                IsGetterNonNullable = true,\n                IsSetterNonNullable = true,\n            },\n        };\n\n        private global::PolyType.Abstractions.IConstructorShape CreateConstructor_Person()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenConstructorShape<global::ConsoleApp1.Person, (string, int, global::ConsoleApp1.Person[], int, byte Flags)>\n            {\n                DeclaringType = (global::PolyType.Abstractions.IObjectTypeShape<global::ConsoleApp1.Person>)Person,\n                ParameterCount = 4,\n                GetParametersFunc = CreateConstructorParameters_Person,\n                DefaultConstructorFunc = null,\n                ArgumentStateConstructorFunc = static () => default((string, int, global::ConsoleApp1.Person[], int, byte Flags)),\n                ParameterizedConstructorFunc = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state) => { var obj = new global::ConsoleApp1.Person(state.Item1, state.Item2);  if ((state.Flags & 1) != 0) obj.Childs = state.Item3; if ((state.Flags & 2) != 0) obj.ID = state.Item4; return obj; },\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetConstructor(InstanceBindingFlags, new[] { typeof(string), typeof(int) }),\n                IsPublic = true,\n            };\n        }\n\n        private global::PolyType.Abstractions.IConstructorParameterShape[] CreateConstructorParameters_Person() => new global::PolyType.Abstractions.IConstructorParameterShape[]\n        {\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), string>\n            {\n                Position = 0,\n                Name = "name",\n                ParameterType = String,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.ConstructorParameter,\n                IsRequired = true,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default!,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, string value) => state.Item1 = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetConstructor(InstanceBindingFlags, new[] { typeof(string), typeof(int) })?.GetParameters()[0],\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), int>\n            {\n                Position = 1,\n                Name = "age",\n                ParameterType = Int32,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.ConstructorParameter,\n                IsRequired = true,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, int value) => state.Item2 = value,\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetConstructor(InstanceBindingFlags, new[] { typeof(string), typeof(int) })?.GetParameters()[1],\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), global::ConsoleApp1.Person[]>\n            {\n                Position = 2,\n                Name = "Childs",\n                ParameterType = Person_Array,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.PropertyInitializer,\n                IsRequired = false,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default!,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, global::ConsoleApp1.Person[] value) => { state.Item3 = value; state.Flags |= 1; },\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetProperty("Childs", InstanceBindingFlags, null, typeof(global::ConsoleApp1.Person[]), [], null),\n            },\n\n            new global::PolyType.SourceGenModel.SourceGenConstructorParameterShape<(string, int, global::ConsoleApp1.Person[], int, byte Flags), int>\n            {\n                Position = 3,\n                Name = "ID",\n                ParameterType = Int32,\n                Kind = global::PolyType.Abstractions.ConstructorParameterKind.FieldInitializer,\n                IsRequired = false,\n                IsNonNullable = true,\n                IsPublic = true,\n                HasDefaultValue = false,\n                DefaultValue = default,\n                Setter = static (ref (string, int, global::ConsoleApp1.Person[], int, byte Flags) state, int value) => { state.Item4 = value; state.Flags |= 2; },\n                AttributeProviderFunc = static () => typeof(global::ConsoleApp1.Person).GetField("ID", InstanceBindingFlags),\n            },\n        };\n\n        [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_name")]\n        private static extern void Person_name_SetAccessor(global::ConsoleApp1.Person obj, string value);\n\n        [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_age")]\n        private static extern void Person_age_SetAccessor(global::ConsoleApp1.Person obj, int value);\n\n        [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "ID")]\n        private static extern ref int Person_ID_Accessor(global::ConsoleApp1.Person obj);\n    }\n}\n\n'))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.Person_Array.g.cs",label:"GenerateShapeProvider.Person_Array.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person[]> Person_Array => _Person_Array ??= Create_Person_Array();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person[]>? _Person_Array;\n\n        private global::PolyType.Abstractions.ITypeShape<global::ConsoleApp1.Person[]> Create_Person_Array()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenEnumerableTypeShape<global::ConsoleApp1.Person[], global::ConsoleApp1.Person>\n            {\n                ElementType = Person,\n                ConstructionStrategy = global::PolyType.Abstractions.CollectionConstructionStrategy.Span,\n                DefaultConstructorFunc = null,\n                EnumerableConstructorFunc = null,\n                SpanConstructorFunc = static values => values.ToArray(),\n                GetEnumerableFunc = static obj => obj,\n                AddElementFunc = null,\n                Rank = 1,\n                Provider = this,\n           };\n        }\n    }\n}\n\n"))),(0,r.kt)(l.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\polytype\\src\\polytypeDemo\\polytypeDemo\\obj\\GX\\PolyType.SourceGenerator\\PolyType.SourceGenerator.TypeShapeIncrementalGenerator\\GenerateShapeProvider.String.g.cs",label:"GenerateShapeProvider.String.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n\n#nullable enable annotations\n#nullable disable warnings\n\nnamespace PolyType.SourceGenerator\n{\n    internal partial class GenerateShapeProvider\n    {\n        /// <summary>Gets the generated shape for specified type.</summary>\n#nullable disable annotations // Use nullable-oblivious property type\n        public global::PolyType.Abstractions.ITypeShape<string> String => _String ??= Create_String();\n#nullable enable annotations // Use nullable-oblivious property type\n        private global::PolyType.Abstractions.ITypeShape<string>? _String;\n\n        private global::PolyType.Abstractions.ITypeShape<string> Create_String()\n        {\n            return new global::PolyType.SourceGenModel.SourceGenObjectTypeShape<string>\n            {\n                Provider = this,\n                IsRecordType = false,\n                IsTupleType = false,\n                CreatePropertiesFunc = null,\n                CreateConstructorFunc = null,\n            };\n        }\n    }\n}\n\n")))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(7852).Z},"Download Example project polytype "))),(0,r.kt)("h3",{id:"share-polytype"},"Share polytype"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&quote=polytype",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&text=polytype:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&title=polytype",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype&title=polytype&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fpolytype",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/polytype"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/polytype")),(0,r.kt)("h3",{id:"in-the-same-category-functionalprogramming---14-other-generators"},"In the same category (FunctionalProgramming) - 14 other generators"),(0,r.kt)("h4",{id:"cachesourcegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/cachesourcegenerator"},"cachesourcegenerator")),(0,r.kt)("h4",{id:"dunet"},(0,r.kt)("a",{parentName:"h4",href:"/docs/dunet"},"dunet")),(0,r.kt)("h4",{id:"dusharp"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Dusharp"},"Dusharp")),(0,r.kt)("h4",{id:"funckydiscriminatedunion"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Funcky.DiscriminatedUnion"},"Funcky.DiscriminatedUnion")),(0,r.kt)("h4",{id:"funicularswitch"},(0,r.kt)("a",{parentName:"h4",href:"/docs/FunicularSwitch"},"FunicularSwitch")),(0,r.kt)("h4",{id:"nsourcegeneratorsuniontypes"},(0,r.kt)("a",{parentName:"h4",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,r.kt)("h4",{id:"oneof"},(0,r.kt)("a",{parentName:"h4",href:"/docs/OneOf"},"OneOf")),(0,r.kt)("h4",{id:"partiallyapplied"},(0,r.kt)("a",{parentName:"h4",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,r.kt)("h4",{id:"rscg_queryables"},(0,r.kt)("a",{parentName:"h4",href:"/docs/rscg_queryables"},"rscg_queryables")),(0,r.kt)("h4",{id:"rscg_utils_memo"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")),(0,r.kt)("h4",{id:"seraunion"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Sera.Union"},"Sera.Union")),(0,r.kt)("h4",{id:"typeutilities"},(0,r.kt)("a",{parentName:"h4",href:"/docs/TypeUtilities"},"TypeUtilities")),(0,r.kt)("h4",{id:"uniongen"},(0,r.kt)("a",{parentName:"h4",href:"/docs/UnionGen"},"UnionGen")),(0,r.kt)("h4",{id:"unionsgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/UnionsGenerator"},"UnionsGenerator")))}d.isMDXComponent=!0},7852:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/polytype-d306fc8e7f32f34a102bfbb8c756339f.zip"}}]);