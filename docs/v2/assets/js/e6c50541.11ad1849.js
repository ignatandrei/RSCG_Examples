"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7571],{28633:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var n=a(87462),r=(a(67294),a(3905)),o=a(73992),i=a(18679),l=a(68839);const s={sidebar_position:1420,title:"142 - TableStorage",description:"Generate resources for accessing Azure Table Storage",slug:"/TableStorage"},u="TableStorage  by Steven Thuriot",p={unversionedId:"RSCG-Examples/TableStorage",id:"RSCG-Examples/TableStorage",title:"142 - TableStorage",description:"Generate resources for accessing Azure Table Storage",source:"@site/docs/RSCG-Examples/TableStorage.md",sourceDirName:"RSCG-Examples",slug:"/TableStorage",permalink:"/RSCG_Examples/v2/docs/TableStorage",draft:!1,tags:[],version:"current",sidebarPosition:1420,frontMatter:{sidebar_position:1420,title:"142 - TableStorage",description:"Generate resources for accessing Azure Table Storage",slug:"/TableStorage"},sidebar:"tutorialSidebar",previous:{title:"141 - ActorSrcGen",permalink:"/RSCG_Examples/v2/docs/ActorSrcGen"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},c={},m=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share TableStorage",id:"share-tablestorage",level:3},{value:"In the same category (Database) - 2 other generators",id:"in-the-same-category-database---2-other-generators",level:3},{value:"Breezy",id:"breezy",level:4},{value:"Gedaq",id:"gedaq",level:4}],b={toc:m},g="wrapper";function d(e){let{components:t,...s}=e;return(0,r.kt)(g,(0,n.Z)({},b,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tablestorage--by-steven-thuriot"},"TableStorage  by Steven Thuriot"),(0,r.kt)(l.Z,{toc:m,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/TableStorage/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/TableStorage?label=TableStorage",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/StevenThuriot/TableStorage"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/StevenThuriot/TableStorage?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/StevenThuriot/TableStorage?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"TableStorage")),(0,r.kt)("p",{parentName:"admonition"},"Package Description"),(0,r.kt)("p",{parentName:"admonition"},"Author: Steven Thuriot"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/TableStorage/"},"https://www.nuget.org/packages/TableStorage/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/StevenThuriot/TableStorage"},"https://github.com/StevenThuriot/TableStorage")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/StevenThuriot/TableStorage"},"https://github.com/StevenThuriot/TableStorage"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"tablestorage"},"TableStorage"),(0,r.kt)("p",{parentName:"admonition"},"Streamlined way of working with Azure Data Tables"),(0,r.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package TableStorage\n")),(0,r.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,r.kt)("p",{parentName:"admonition"},"Create your own TableContext and mark it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"[TableContext]")," attribute. This class must be partial."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[TableContext]\npublic partial class MyTableContext;\n")),(0,r.kt)("p",{parentName:"admonition"},"Create your models, these must be classes and have a parameterless constructor. Mark them with the ",(0,r.kt)("inlineCode",{parentName:"p"},"[TableSet]")," attribute. This class must be partial."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[TableSet]\npublic partial class Model\n{\n    public string Data { get; set; }\n    public bool Enabled { get; set; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Properties can also be defined using the ",(0,r.kt)("inlineCode",{parentName:"p"},"[TableSetProperty]")," attribute.\nThis is particularly useful if you are planning on using dotnet 8+'s Native AOT, as the source generation will make sure any breaking reflection calls are avoided by the Azure.Core libraries."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[TableSet]\n[TableSetProperty(typeof(string), "Data")]\n[TableSetProperty(typeof(bool), "Enabled")]\npublic partial class Model;\n')),(0,r.kt)("p",{parentName:"admonition"},"Some times it's also nice to have a pretty name for your ",(0,r.kt)("inlineCode",{parentName:"p"},"PartitionKey")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RowKey")," properties, as the original names might not always make much sense when reading your code, at least not in a functional way.\nYou can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"[PartitionKeyAttribute]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"[RowKeyAttribute]")," attributes to create a proxy for these two properties."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[TableSet]\n[PartitionKey("MyPrettyPartitionKey")]\n[RowKey("MyPrettyRowKey")]\npublic partial class Model;\n')),(0,r.kt)("p",{parentName:"admonition"},"Place your tables on your TableContext. The sample below will create 2 tables in table storage, named Models1 and Models2."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[TableContext]\npublic partial class MyTableContext\n{\n    public TableSet<Model> Models1 { get; set; }\n    public TableSet<Model> Models2 { get; set; }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Register your TableContext in your services. An extension method will be available specifically for your context."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddMyTableContext(builder.Configuration.GetConnectionString("MyConnectionString"));\n')),(0,r.kt)("p",{parentName:"admonition"},"Optionally, pass along a ",(0,r.kt)("inlineCode",{parentName:"p"},"Configure")," method to adjust some configuration options."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddMyTableContext(builder.Configuration.GetConnectionString("MyConnectionString"), Configure);\n\nstatic void Configure(TableOptions options)\n{\n    options.AutoTimestamps = true;\n    options.TableMode = TableUpdateMode.Merge;\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"Inject ",(0,r.kt)("inlineCode",{parentName:"p"},"MyTableContext")," into your class and use as needed."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MyService(MyTableContext context)\n{\n    private readonly MyTableContext _context = context;\n\n    public async Task DoSomething(CancellationToken token)\n    {\n        var entity = await _context.Models1.GetEntityOrDefaultAsync("partitionKey", "rowKey", token);\n        if (entity is not null)\n        {\n            //Do more\n        }\n    }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"For some special cases, your table name might not be known at compile time. To handle those, an extension method has been added:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var tableSet = context.GetTableSet<Model>("randomname");\n')),(0,r.kt)("h2",{parentName:"admonition",id:"linq"},"Linq"),(0,r.kt)("p",{parentName:"admonition"},"A few simple Linq extension methods have been provided in the ",(0,r.kt)("inlineCode",{parentName:"p"},"TableStorage.Linq")," namespace that optimize some existing LINQ methods specifically for Table Storage."),(0,r.kt)("p",{parentName:"admonition"},"Since these return an instance that implements ",(0,r.kt)("inlineCode",{parentName:"p"},"IAsyncEnumerable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Linq.Async")," is an excellent companion to these methods. Do keep in mind that as soon as you start using ",(0,r.kt)("inlineCode",{parentName:"p"},"IAsyncEnumerable"),", any further operations will run client-side."),(0,r.kt)("p",{parentName:"admonition"},"Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"Select")," will include the actual transformation. If you want the original model, with only the selected fields retrieved, use ",(0,r.kt)("inlineCode",{parentName:"p"},"SelectFields")," instead.\nIf you are using Native AOT, you will need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"SelectFields")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"Select")," will not work.")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Generate resources for accessing Azure Table Storage")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"TableStorage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Azure.Storage.Blobs" Version="12.13.1" />\n    <PackageReference Include="Azure.Storage.Files.Shares" Version="12.1.0" />\n    <PackageReference Include="Azure.Storage.Queues" Version="12.11.1" />\n    <PackageReference Include="Microsoft.Extensions.Azure" Version="1.5.0" />\n    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />\n    <PackageReference Include="TableStorage" Version="4.2.1" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"TableStorage")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Microsoft.Extensions.DependencyInjection;\nusing test;\n/*Visual Studio version Azurite executable location\nVisual Studio Community 2022    C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\nVisual Studio Professional 2022 C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\nVisual Studio Enterprise 2022   C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\Extensions\\Microsoft\\Azure Storage Emulator\n*/\n\nvar serviceProvider = new ServiceCollection()\n    .AddDatabaseContext("UseDevelopmentStorage=true")\n    .BuildServiceProvider();\n\nDatabaseContext db = serviceProvider.GetRequiredService<DatabaseContext>();\n\nEmployee?  e=new ();\ne.Name = "Andrei Ignat";\ne.PartitionKey = "1";\ne.RowKey = Guid.NewGuid().ToString();\nawait db.Employees.AddEntityAsync(e);\n\ne = await db.Employees.GetEntityAsync(e.PartitionKey, e.RowKey);\nConsole.WriteLine(e?.Name);  \n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\Database.cs",label:"Database.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"TableStorage")," in ",(0,r.kt)("em",{parentName:"p"},"Database.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using TableStorage;\nnamespace test;\n[TableContext]\npublic partial class DatabaseContext\n{\n    public TableSet<Employee>? Employees { get; set; }\n}\n\n\n[TableSet]\n[TableSetProperty(typeof(bool), "Enabled")]\n[TableSetProperty(typeof(string), "Name")]\npublic partial class Employee\n{\n\n}\n\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableContextGenerator\\TableContextAttribute.g.cs",label:"TableContextAttribute.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\n\nnamespace TableStorage\n{\n    [AttributeUsage(AttributeTargets.Class)]\n    public sealed class TableContextAttribute : Attribute\n    {\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableContextGenerator\\TableContexts.g.cs",label:"TableContexts.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Microsoft.Extensions.DependencyInjection;\nusing TableStorage;\nusing System;\n\n#nullable disable\n\nnamespace test\n{\n    public static class DatabaseContextExtensions\n    {\n        public static IServiceCollection AddDatabaseContext(this IServiceCollection services, string connectionString, Action<TableStorage.TableOptions> configure = null)\n        {\n            DatabaseContext.Register(services, connectionString, configure);\n            return services;\n        }\n    }\n\n    partial class DatabaseContext\n    {\n        private TableStorage.ICreator _creator { get; init; }\n\n        private static class TableSetCache<T>\n                where T : class, Azure.Data.Tables.ITableEntity, new()\n        {\n            private static System.Collections.Concurrent.ConcurrentDictionary<string, TableStorage.TableSet<T>> _unknownTableSets = new System.Collections.Concurrent.ConcurrentDictionary<string, TableStorage.TableSet<T>>();\n            public static TableStorage.TableSet<T> GetTableSet(TableStorage.ICreator creator, string tableName)\n            {\n                return _unknownTableSets.GetOrAdd(tableName, creator.CreateSet<T>);\n            }\n\n        }\n\n        public TableSet<T> GetTableSet<T>(string tableName)\n            where T : class, Azure.Data.Tables.ITableEntity, new()\n        {\n            return TableSetCache<T>.GetTableSet(_creator, tableName);\n        }\n\n        public static void Register(IServiceCollection services, string connectionString, Action<TableStorage.TableOptions> configure = null)\n        {\n            services.AddSingleton(s =>\n                    {\n                        ICreator creator = TableStorage.TableStorageSetup.BuildCreator(connectionString, configure);\n\n                        return new DatabaseContext()\n                        {\n                            _creator = creator,\n                            Employees = creator.CreateSet<test.Employee>("Employees", null, null),\n                        };\n                    });\n        }\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableSetModelGenerator\\TableSetAttributes.g.cs",label:"TableSetAttributes.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nusing System;\n\nnamespace TableStorage\n{\n    [AttributeUsage(AttributeTargets.Class)]\n    public sealed class TableSetAttribute : Attribute\n    {\n    }\n\n\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\n    public sealed class TableSetPropertyAttribute : Attribute\n    {\n        public TableSetPropertyAttribute(Type type, string name)\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\n    public sealed class PartitionKeyAttribute : Attribute\n    {\n        public PartitionKeyAttribute(string name)\n        {\n        }\n    }\n\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]\n    public sealed class RowKeyAttribute : Attribute\n    {\n        public RowKeyAttribute(string name)\n        {\n        }\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TableStorage\\src\\AzureStorage\\obj\\GX\\TableStorage.SourceGenerators\\TableStorage.SourceGenerators.TableSetModelGenerator\\TableSets.g.cs",label:"TableSets.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Microsoft.Extensions.DependencyInjection;\nusing TableStorage;\nusing System.Collections.Generic;\nusing System;\n\n#nullable disable\n\nnamespace test\n{\n    [System.Diagnostics.DebuggerDisplay(@"Employee \\{ {PartitionKey}, {RowKey} \\}")]\n    partial class Employee : IDictionary<string, object>, Azure.Data.Tables.ITableEntity\n    {\n        public string PartitionKey { get; set; }\n        public string RowKey { get; set; }\n        public DateTimeOffset? Timestamp { get; set; }\n        public Azure.ETag ETag { get; set; }\n        [System.Runtime.Serialization.IgnoreDataMember] public bool Enabled { get; set; }\n        [System.Runtime.Serialization.IgnoreDataMember] public string Name { get; set; }\n\n        public object this[string key]\n        {\n            get\n            {\n                switch (key)\n                {\n                    case "PartitionKey": return PartitionKey;\n                    case "RowKey": return RowKey;\n                    case "Timestamp": return Timestamp;\n                    case "odata.etag": return ETag.ToString();\n                    case "Enabled": return Enabled;\n                    case "Name": return Name;\n                    default: return null;\n                }\n            }\n\n            set\n            {\n                switch (key)\n                {\n                    case "PartitionKey": PartitionKey = value?.ToString(); break;\n                    case "RowKey": RowKey = value?.ToString(); break;\n                    case "Timestamp": Timestamp = (System.DateTimeOffset?)value; break;\n                    case "odata.etag": ETag = new Azure.ETag(value?.ToString()); break;\n                    case "Enabled": Enabled = (bool) value; break;\n                    case "Name": Name = (string) value; break;\n                }\n            }\n        }\n\n        public ICollection<string> Keys => new string[] { "PartitionKey", "RowKey", "Timestamp", "odata.etag", "Enabled", "Name",  };\n        public ICollection<object> Values => new object[] { PartitionKey, RowKey, Timestamp, ETag.ToString(), Enabled, Name,  };\n        public int Count => 6;\n        public bool IsReadOnly => false;\n\n        public void Add(string key, object value)\n        {\n            this[key] = value;\n        }\n\n        public void Add(KeyValuePair<string, object> item)\n        {\n            this[item.Key] = item.Value;\n        }\n\n        public void Clear()\n        {\n            Enabled = default(bool);\n            Name = default(string);\n        }\n\n        public bool Contains(KeyValuePair<string, object> item)\n        {\n            if (TryGetValue(item.Key, out var value))\n            {\n                return value == item.Value;\n            }\n\n            return false;\n        }\n\n        public bool ContainsKey(string key)\n        {\n            switch (key)\n            {\n                case "PartitionKey":\n                case "RowKey":\n                case "Timestamp":\n                case "odata.etag":\n                case "Enabled": \n                case "Name": \n                    return true;\n            \n                default: return false;\n            }\n        }\n\n        public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)\n        {\n            if (array == null)\n            {\n                throw new System.ArgumentNullException("array");\n            }\n\n            if ((uint)arrayIndex > (uint)array.Length)\n            {\n                throw new System.IndexOutOfRangeException();\n            }\n\n            if (array.Length - arrayIndex < Count)\n            {\n                throw new System.ArgumentException();\n            }\n\n            foreach (var item in this)\n            {\n                array[arrayIndex++] = item;\n            }\n        }\n\n        public IEnumerator<KeyValuePair<string, object>> GetEnumerator()\n        {\n            yield return new KeyValuePair<string, object>("PartitionKey", PartitionKey);\n            yield return new KeyValuePair<string, object>("RowKey", RowKey);\n            yield return new KeyValuePair<string, object>("Timestamp", Timestamp);\n            yield return new KeyValuePair<string, object>("odata.etag", ETag.ToString());\n            yield return new KeyValuePair<string, object>("Enabled", Enabled);\n            yield return new KeyValuePair<string, object>("Name", Name);\n        }\n\n        public bool Remove(string key)\n        {\n            if (ContainsKey(key)) \n            {\n                this[key] = null;\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool Remove(KeyValuePair<string, object> item)\n        {\n            if (Contains(item)) \n            {\n                this[item.Key] = null;\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool TryGetValue(string key, out object value)\n        {\n            switch (key)\n            {\n                case "PartitionKey": value = PartitionKey; return true;\n                case "RowKey": value = RowKey; return true;\n                case "Timestamp": value = Timestamp; return true;\n                case "odata.etag": value = ETag; return true;\n                case "Enabled": value = Enabled; return true;\n                case "Name": value = Name; return true;\n                default: value = null; return false;\n            }\n        }\n\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n        {\n            return this.GetEnumerator();\n        }\n    }\n}\n')))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(44149).Z},"Download Example project TableStorage "))),(0,r.kt)("h3",{id:"share-tablestorage"},"Share TableStorage"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&quote=TableStorage",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&text=TableStorage:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&title=TableStorage",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage&title=TableStorage&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTableStorage",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TableStorage"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TableStorage")),(0,r.kt)("h3",{id:"in-the-same-category-database---2-other-generators"},"In the same category (Database) - 2 other generators"),(0,r.kt)("h4",{id:"breezy"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Breezy"},"Breezy")),(0,r.kt)("h4",{id:"gedaq"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Gedaq"},"Gedaq")))}d.isMDXComponent=!0},44149:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/TableStorage-9b8820bd5101e01cdbedde9b14f869a9.zip"}}]);