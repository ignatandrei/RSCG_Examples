"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2748],{87216:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/files/OptionToStringGenerator-8f39fa860ec16085009b2371a45a3cfc.zip"},93952:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"RSCG-Examples/OptionToStringGenerator","title":"112 - OptionToStringGenerator","description":"Generating similar ToString method for classes with many properties. It can also generate for external classes.","source":"@site/docs/RSCG-Examples/OptionToStringGenerator.md","sourceDirName":"RSCG-Examples","slug":"/OptionToStringGenerator","permalink":"/RSCG_Examples/v2/docs/OptionToStringGenerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/OptionToStringGenerator.md","tags":[],"version":"current","sidebarPosition":1120,"frontMatter":{"sidebar_position":1120,"title":"112 - OptionToStringGenerator","description":"Generating similar ToString method for classes with many properties. It can also generate for external classes.","slug":"/OptionToStringGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"111 - cachesourcegenerator","permalink":"/RSCG_Examples/v2/docs/cachesourcegenerator"},"next":{"title":"113 - sourcedepend","permalink":"/RSCG_Examples/v2/docs/sourcedepend"}}');var s=n(74848),i=n(28453),o=n(11470),a=n(19365),l=n(14252);const c={sidebar_position:1120,title:"112 - OptionToStringGenerator",description:"Generating similar ToString method for classes with many properties. It can also generate for external classes.",slug:"/OptionToStringGenerator"},d="OptionToStringGenerator  by Jim W",h={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Quick Example",id:"quick-example",level:2},{value:"Usage",id:"usage",level:2},{value:"Example of Editing a Class",id:"example-of-editing-a-class",level:3},{value:"Example of Using a Property",id:"example-of-using-a-property",level:3},{value:"Notes",id:"notes",level:3},{value:"Formatting Options",id:"formatting-options",level:3},{value:"Per-Property Formatting Options",id:"per-property-formatting-options",level:3},{value:"Collections",id:"collections",level:3},{value:"Attributes",id:"attributes",level:2},{value:"Warnings and Errors",id:"warnings-and-errors",level:2},{value:"Trouble Shooting",id:"trouble-shooting",level:2},{value:"Error CS9057",id:"error-cs9057",level:3},{value:"Using Seekatar.Mask",id:"using-seekatarmask",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Basic Logic of OptionsToStringGenerator.Initialize()",id:"basic-logic-of-optionstostringgeneratorinitialize",level:3},{value:"Branching Strategy",id:"branching-strategy",level:2},{value:"Debugging and Testing",id:"debugging-and-testing",level:2},{value:"Links to Documentation",id:"links-to-documentation",level:2},{value:"Links",id:"links",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share OptionToStringGenerator",id:"share-optiontostringgenerator",level:3},{value:"In the same category (EnhancementClass) - 27 other generators",id:"in-the-same-category-enhancementclass---27-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CommonCodeGenerator",id:"commoncodegenerator",level:4},{value:"Comparison",id:"comparison",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"Enhanced.GetTypes",id:"enhancedgettypes",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"Lombok.NET",id:"lomboknet",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemberAccessor",id:"memberaccessor",level:4},{value:"MemoryPack",id:"memorypack",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"QueryStringGenerator",id:"querystringgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4},{value:"ThisClass",id:"thisclass",level:4}];function u(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"optiontostringgenerator--by-jim-w",children:"OptionToStringGenerator  by Jim W"})}),"\n",(0,s.jsx)(l.A,{toc:p}),"\n",(0,s.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Seekatar.OptionToStringGenerator?label=Seekatar.OptionToStringGenerator",alt:"Nuget"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/Seekatar/OptionToStringGenerator",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/Seekatar/OptionToStringGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(t.img,{src:"https://img.shields.io/github/stars/Seekatar/OptionToStringGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["Name: ",(0,s.jsx)(t.strong,{children:"OptionToStringGenerator"})]}),(0,s.jsx)(t.p,{children:"This library contains an incremental source generator for formatting configuration objects."}),(0,s.jsx)(t.p,{children:"Author: Jim W"}),(0,s.jsxs)(t.p,{children:["NuGet:\n",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/",children:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator/"})})]}),(0,s.jsxs)(t.p,{children:["You can find more details at ",(0,s.jsx)(t.a,{href:"https://github.com/Seekatar/OptionToStringGenerator",children:"https://github.com/Seekatar/OptionToStringGenerator"})]}),(0,s.jsxs)(t.p,{children:["Source: ",(0,s.jsx)(t.a,{href:"https://github.com/Seekatar/OptionToStringGenerator",children:"https://github.com/Seekatar/OptionToStringGenerator"})]})]}),"\n",(0,s.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsx)(t.h1,{id:"optionstostring-incremental-source-generator",children:"OptionsToString Incremental Source Generator"}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://github.com/Seekatar/OptionToStringGenerator/actions/workflows/dotnet.yml",children:(0,s.jsx)(t.img,{src:"https://github.com/Seekatar/OptionToStringGenerator/actions/workflows/dotnet.yml/badge.svg",alt:"OptionToStringGenerator"})}),"\n",(0,s.jsx)(t.a,{href:"https://codecov.io/gh/Seekatar/OptionToStringGenerator",children:(0,s.jsx)(t.img,{src:"https://codecov.io/gh/Seekatar/OptionToStringGenerator/branch/main/graph/badge.svg?token=X3J5MU9T3C",alt:"codecov"})})]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Problem:"})," I have a configuration class for use with ",(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options",children:"IOptions"})," and I want to safely log out its values at runtime."]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Solution:"})," Use an incremental source generator to generate an extension method to get a string with masked values for the properties."]}),(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["The methods to mask the values can be used outside of the generated code, too. See ",(0,s.jsx)(t.a,{href:"#using-seekatarmask",children:"below"})," for details."]}),"\n"]}),(0,s.jsxs)(t.p,{children:["This package generates an ",(0,s.jsx)(t.code,{children:"OptionsToString"}),"\nextension method for a class. Using attributes you can control how the values are masked. You can use this to log out the values of your configuration at startup, or via a REST endpoint."]}),(0,s.jsx)(t.h2,{id:"quick-example",children:"Quick Example"}),(0,s.jsx)(t.p,{children:"Edit the source of your configuration class and decorate it with attributes."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'namespace Test;\n\n[OptionsToString]\ninternal class PropertySimple\n{\n    [OutputMask]\n    public string Secret { get; set; } = "Secret";\n\n    public int RetryLimit { get; set; } = 5;\n\n    [OutputRegex(Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    public string ConnectionString { get; set; } = "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;";\n}\n\n// usage\n_logger.LogInformation(new PropertySimple().OptionsToString());\n'})}),(0,s.jsx)(t.p,{children:"Output:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'Test.PropertySimple:\n  Secret           : "******"\n  RetryLimit       : 5\n  ConnectionString : "Server=myServerAddress;Database=myDataBase;User Id=***;Password=***;"\n'})}),(0,s.jsxs)(t.p,{children:["Alternatively, if you don't have the code for ",(0,s.jsx)(t.code,{children:"PropertySimple"})," this will produce the same output."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'internal class PropertyConfig\n{\n    [OutputPropertyMask(nameof(IOptionsSimple.Secret))]\n    [OutputPropertyRegex(nameof(IOptionsSimple.ConnectionString), Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    public PropertySimple? PropertySimple { get; set; }\n}\n\n// usage\n_logger.LogInformation(new PropertyConfig().PropertySimple.OptionsToString());\n'})}),(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Add the ",(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/Seekatar.OptionToStringGenerator",children:"OptionToStringGenerator"})," NuGet package to your project."]}),"\n",(0,s.jsxs)(t.li,{children:["If you can update the class","\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Decorate a class with the ",(0,s.jsx)(t.code,{children:"OptionsToString"})," attribute."]}),"\n",(0,s.jsxs)(t.li,{children:["Optionally decorate properties with an ",(0,s.jsx)(t.code,{children:"Output*"})," attribute to specify how you want them to be masked. If you don't decorate a property, its full text is dumped out."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["If you don't want to or can't update the class","\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Add a property to your class of the Type you want to dump out."}),"\n",(0,s.jsxs)(t.li,{children:["Decorate the property with multiple ",(0,s.jsx)(t.code,{children:"OutputProperty*"})," attributes to control how the properties are masked."]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(t.h3,{id:"example-of-editing-a-class",children:"Example of Editing a Class"}),(0,s.jsx)(t.p,{children:"Here's a larger sample class that uses all the different types of masking. Anything without an attribute has its value written out in the clear. The output follows."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'namespace Test;\nusing Seekatar.OptionToStringGenerator;\n\n[OptionsToString]\npublic class PublicOptions\n{\n    public class AClass\n    {\n        public string Name { get; set; } = "maybe this is secret";\n        public override string ToString() => $"{nameof(AClass)}: {Name}";\n    }\n\n    public string PlainText { get; set; } = "hi mom";\n\n    public char Why { get; set; } = \'Y\';\n\n    public int PlainInt { get; set; } = 42;\n\n    public double PlainDouble { get; set; } = 3.141;\n\n    public double PlainDecimal { get; set; } = 6.02;\n\n    public DateTime PlainDateTime { get; set; } = new DateTime(2020, 1, 2, 3, 4, 5);\n\n    public DateOnly PlainDatOnly { get; set; } = new DateOnly(2020, 1, 2);\n\n    public TimeOnly PlainTimeOnly { get; set; } = new TimeOnly(12, 23, 2);\n\n    public TimeSpan TimeSpan { get; set; } = new TimeSpan(1, 2, 3, 4, 5);\n\n    public Guid UUID { get; set; } = Guid.Parse("6536b25c-3a45-48d8-8ea3-756e19f5bad1");\n\n    public string? NullItem { get; set; }\n\n    public AClass AnObject { get; set; } = new();\n\n    [OutputRegex(Regex = @"AClass\\:\\s+(.*)")]\n    public AClass AMaskedObject { get; set; } = new();\n\n    [OutputMask]\n    public string FullyMasked { get; set; } = "thisisasecret";\n\n    [OutputMask(PrefixLen=3)]\n    public string FirstThreeNotMasked { get; set; } = "abc1233435667";\n\n    [OutputMask(SuffixLen=3)]\n    public string LastThreeNotMasked { get; set; } = "abc1233435667";\n\n    [OutputMask(PrefixLen = 3, SuffixLen=3)]\n    public string FirstAndLastThreeNotMasked { get; set; } = "abc1233435667";\n\n    [OutputMask(PrefixLen = 100)]\n    public string NotMaskedSinceLongLength { get; set; } = "abc1233435667";\n\n    [OutputLengthOnly]\n    public string LengthOnly { get; set; } = "thisisasecretthatonlyshowsthelength";\n\n    [OutputRegex(Regex="User Id=([^;]+).*Password=([^;]+)")]\n    public string MaskUserAndPassword { get; set; } = "Server=server;Database=db;User Id=myUsername;Password=myPassword;";\n\n    [OutputRegex(Regex="User Id=([^;]+).*Password=([^;]+)",IgnoreCase=true)]\n    public string MaskUserAndPasswordIgnoreCase { get; set; } = "Server=server;Database=db;user Id=myUsername;Password=myPassword;";\n\n    [OutputRegex(Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    public string RegexNotMatched { get; set; } = "Server=server;Database=db;user Id=myUsername;Password=myPassword;";\n\n    public ConsoleColor Color { get; set; } = ConsoleColor.Red;\n\n    [OutputIgnore]\n    public string IgnoreMe { get; set; } = "abc1233435667";\n}\n\n// usage\nvar options = new PublicOptions();\n_logger.LogInformation(options.OptionsToString());\n'})}),(0,s.jsx)(t.p,{children:"The output has the class name (by default) followed by an indented list of all the properties' values masked as specified."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'Test.PublicOptions:\n  PlainText                     : "hi mom"\n  Why                           : "Y"\n  PlainInt                      : 42\n  PlainDouble                   : 3.141\n  PlainDecimal                  : 6.02\n  PlainDateTime                 : 01/02/2020 03:04:05\n  PlainDatOnly                  : 01/02/2020\n  PlainTimeOnly                 : 12:23\n  TimeSpan                      : 1.02:03:04.0050000\n  UUID                          : 6536b25c-3a45-48d8-8ea3-756e19f5bad1\n  NullItem                      : null\n  AnObject                      : "AClass: maybe this is secret"\n  AMaskedObject                 : "AClass: ***"\n  FullyMasked                   : "*************"\n  FirstThreeNotMasked           : "abc**********"\n  LastThreeNotMasked            : "**********667"\n  FirstAndLastThreeNotMasked    : "abc*******667"\n  NotMaskedSinceLongLength      : "abc1233435667"\n  LengthOnly                    : Len = 35\n  MaskUserAndPassword           : "Server=server;Database=db;User Id=***;Password=***;"\n  MaskUserAndPasswordIgnoreCase : "Server=server;Database=db;user Id=***;Password=***;"\n  RegexNotMatched               : "***Regex no match***!"\n  Color                         : Red\n'})}),(0,s.jsx)(t.h3,{id:"example-of-using-a-property",children:"Example of Using a Property"}),(0,s.jsxs)(t.p,{children:["Here's a similar example where you don't have the source for the class, or don't want to change it. In this case, you use multiple ",(0,s.jsx)(t.code,{children:"OutputProperty*"}),"  attributes, one for each property you want to mask."]}),(0,s.jsxs)(t.p,{children:["This is from the tests where ",(0,s.jsx)(t.code,{children:"PropertyPublicClass"})," is identical to ",(0,s.jsx)(t.code,{children:"PublicOptions"}),", so the output will be the same aside from the class name."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'namespace Test;\nusing Seekatar.OptionToStringGenerator;\n\npublic class PropertyTestOptions\n{\n    public MyClass(IOption<PropertyPublicClass> options, ILogger<PropertyTestOptions> logger)\n    {\n        _options =options.Value;\n        logger.LogInformation(options.OptionsToString());\n    }\n\n    [OutputPropertyRegex(nameof(PropertyPublicClass.AMaskedObject), Regex = @"AClass\\:\\s+(.*)")]\n    [OutputPropertyMask(nameof(PropertyPublicClass.FullyMasked))]\n    [OutputPropertyMask(nameof(PropertyPublicClass.FirstThreeNotMasked), PrefixLen = 3)]\n    [OutputPropertyMask(nameof(PropertyPublicClass.LastThreeNotMasked), SuffixLen = 3)]\n    [OutputPropertyMask(nameof(PropertyPublicClass.FirstAndLastThreeNotMasked), PrefixLen = 3, SuffixLen = 3)]\n    [OutputPropertyMask(nameof(PropertyPublicClass.NotMaskedSinceLongLength), PrefixLen = 100)]\n    [OutputPropertyLengthOnly(nameof(PropertyPublicClass.LengthOnly))]\n    [OutputPropertyRegex(nameof(PropertyPublicClass.MaskUserAndPassword), Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    [OutputPropertyRegex(nameof(PropertyPublicClass.MaskUserAndPasswordIgnoreCase), Regex = "User Id=([^;]+).*Password=([^;]+)", IgnoreCase = true)]\n    [OutputPropertyRegex(nameof(PropertyPublicClass.RegexNotMatched), Regex = "User Id=([^;]+).*Password=([^;]+)")]\n    [OutputPropertyIgnore(nameof(PropertyPublicClass.IgnoreMe) )]\n    public PropertyPublicClass? PublicClass { get; set; }\n}\n\n'})}),(0,s.jsx)(t.h3,{id:"notes",children:"Notes"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"All public properties are included by default and output as plain text."}),"\n",(0,s.jsxs)(t.li,{children:["Properties will be in the order they are defined in the class, unless ",(0,s.jsx)(t.code,{children:"Sort=true"})," is set on the ",(0,s.jsx)(t.code,{children:"OptionsToString"})," attribute."]}),"\n",(0,s.jsxs)(t.li,{children:["Parent class properties are included by default. Use ",(0,s.jsx)(t.code,{children:"ExcludeParents = true"})," on the ",(0,s.jsx)(t.code,{children:"OptionsToString"})," attribute to exclude them."]}),"\n",(0,s.jsxs)(t.li,{children:["Use the ",(0,s.jsx)(t.code,{children:"OutputIgnore"})," attribute to exclude a property."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ToString()"})," is called on the property's value, then the mask is applied. You can have a custom ",(0,s.jsx)(t.code,{children:"ToString()"})," method on a class to format its output then it will be masked as the ",(0,s.jsx)(t.code,{children:"AClass"})," example above."]}),"\n",(0,s.jsxs)(t.li,{children:["When editing the class, only one ",(0,s.jsx)(t.code,{children:"Output*"})," attribute is allowed per property. If more than one is set, you'll get a compile warning, and the last attribute set will be used."]}),"\n",(0,s.jsxs)(t.li,{children:["Regex strings with back slashes need to use a verbatim string or escape the back slashes (e.g.  ",(0,s.jsx)(t.code,{children:'@"\\s+"'}),"  or ",(0,s.jsx)(t.code,{children:'"\\\\s+"'}),")."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"OutputRegex"})," must have a ",(0,s.jsx)(t.code,{children:"Regex"})," parameter, or you'll get a compile error."]}),"\n",(0,s.jsxs)(t.li,{children:["If the regex doesn't match the value, the output will be ",(0,s.jsx)(t.code,{children:"***Regex no match***!"})," to indicate it didn't match."]}),"\n",(0,s.jsxs)(t.li,{children:["To customize the formatting of masked output see ",(0,s.jsx)(t.a,{href:"#per-property-formatting-options",children:"below"})]}),"\n"]}),(0,s.jsx)(t.h3,{id:"formatting-options",children:"Formatting Options"}),(0,s.jsxs)(t.p,{children:["There are properties on the ",(0,s.jsx)(t.code,{children:"OptionsToStringAttribute"})," for classes and ",(0,s.jsx)(t.code,{children:"OutputPropertyFormat"})," for properties to control how the output is generated."]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Indent"})}),(0,s.jsx)(t.td,{children:"The indenting string"}),(0,s.jsx)(t.td,{children:'"  " (Two spaces)'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Separator"})}),(0,s.jsx)(t.td,{children:"The name-value separator"}),(0,s.jsx)(t.td,{children:'":"'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Title"})}),(0,s.jsx)(t.td,{children:"The title to use for the output. See below"}),(0,s.jsx)(t.td,{children:"Class name"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Json"})}),(0,s.jsx)(t.td,{children:"Format the output as JSON"}),(0,s.jsx)(t.td,{children:"false"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Sort"})}),(0,s.jsx)(t.td,{children:"Sort the properties"}),(0,s.jsx)(t.td,{children:"false"})]})]})]}),(0,s.jsxs)(t.p,{children:["In addition to literal text, the ",(0,s.jsx)(t.code,{children:"Title"})," parameter can include property names in braces. For example"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'// for a class\n[OptionsToString(Title = nameof(TitleOptions) + "_{StringProp}_{IntProp}")]\npublic class TitleOptions\n{\n    public int IntProp { get; set; } = 42;\n    public string StringProp { get; set; } = "hi mom";\n}\n\n// for a property\ninternal class PropertyTestSimple\n{\n    [OutputPropertyFormat(Title = nameof(TitleOptions) + "_{StringProp}_{IntProp}")]\n    public TitleOptions TitleOptions { get; set; } = new ();\n}\n'})}),(0,s.jsx)(t.p,{children:"Both will output"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'TitleOptions_hi mom_42:\n  IntProp    : 42\n  StringProp : "hi mom"\n'})}),(0,s.jsx)(t.h3,{id:"per-property-formatting-options",children:"Per-Property Formatting Options"}),(0,s.jsxs)(t.p,{children:["For types that take a format string to ",(0,s.jsx)(t.code,{children:"ToString()"})," such as ",(0,s.jsx)(t.code,{children:"DateTime"}),", numbers, etc., you can use the ",(0,s.jsx)(t.code,{children:"OutputFormatToString"})," attribute. You can also supply a custom method to format a property. For example flattening an array and masking its values. The sample below shows a few examples:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'    # comma separate thousands\n    [OutputFormatToString("N0")]\n    public int PlainInt { get; set; } = 423433;\n\n    # two decimal places\n    [OutputFormatToString("0.00")]\n    public double PlainDouble { get; set; } = 3.141;\n\n    # use the U format for DateTime\n    [OutputFormatToString("R")]\n    public DateTime PlainDateTime { get; set; } = new DateTime(2020, 1, 2, 3, 4, 5);\n\n    [OutputFormatProvider(typeof(FormatOptions), nameof(MyFormatter))]\n    public List<string> Secrets { get; set; } = new List<string> { "secret", "hushhush", "psssst" };\n\n    # mask each string in the array showing only the first 3 characters\n    public static string? MyFormatter(List<string> o)\n    {\n        if (o is null) return null;\n        return string.Join(",", o.Select(s => Mask.MaskSuffix(s, 3)));\n    }\n'})}),(0,s.jsx)(t.p,{children:"Output:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:'  PlainInt      : 423,433\n  PlainDouble   : 3.14\n  PlainDateTime : Thu, 02 Jan 2020 03:04:05 GMT\n  Secrets       : "sec***,hus*****,pss***"\n'})}),(0,s.jsx)(t.h3,{id:"collections",children:"Collections"}),(0,s.jsxs)(t.p,{children:["Instead of using ",(0,s.jsx)(t.code,{children:"OutputFormatProvider"}),", you can create your own method to handle collections. The ",(0,s.jsx)(t.code,{children:"MessagingOptions"})," test class does so by overriding ",(0,s.jsx)(t.code,{children:"ToString"})," to get its options and all the children."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"public override string ToString()\n{\n    var sb = new StringBuilder(this.OptionsToString());\n    sb.AppendLine();\n    foreach (var c in Consumers ?? new Dictionary<string, ClientOptions>())\n    {\n        sb.AppendLine(c.Value.OptionsToString());\n    }\n    foreach (var p in Producers ?? new Dictionary<string, ClientOptions>())\n    {\n        sb.AppendLine(p.Value.OptionsToString());\n    }\n\n    return sb.ToString();\n}\n"})}),(0,s.jsx)(t.h2,{id:"attributes",children:"Attributes"}),(0,s.jsx)(t.p,{children:"For a class use these attributes."}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"On"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OptionsToString"}),(0,s.jsx)(t.td,{children:"Class"}),(0,s.jsx)(t.td,{children:"Marker for the class, and has formatting options"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputMask"}),(0,s.jsx)(t.td,{children:"Member"}),(0,s.jsx)(t.td,{children:"Mask the value with asterisks, with optional prefix and suffix clear"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputRegex"}),(0,s.jsx)(t.td,{children:"Member"}),(0,s.jsx)(t.td,{children:"Mask the value with a regex"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputLengthOnly"}),(0,s.jsx)(t.td,{children:"Member"}),(0,s.jsx)(t.td,{children:"Only output the length of the value"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputIgnore"}),(0,s.jsx)(t.td,{children:"Member"}),(0,s.jsx)(t.td,{children:"Ignore the property"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputFormatToString"}),(0,s.jsx)(t.td,{children:"Member"}),(0,s.jsx)(t.td,{children:"Format the value using ToString() with a format string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputFormatProvider"}),(0,s.jsx)(t.td,{children:"Member"}),(0,s.jsx)(t.td,{children:"Format the value using a custom method"})]})]})]}),(0,s.jsx)(t.p,{children:"For a property, use these attributes on the property"}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputPropertyFormat"}),(0,s.jsx)(t.td,{children:"Optional Formatting options"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputPropertyMask"}),(0,s.jsx)(t.td,{children:"Mask the value with asterisks, with optional prefix and suffix"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputPropertyRegex"}),(0,s.jsx)(t.td,{children:"Mask the value with a regex"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputPropertyLengthOnly"}),(0,s.jsx)(t.td,{children:"Only output the length of the value"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OutputPropertyIgnore"}),(0,s.jsx)(t.td,{children:"Ignore the property"})]})]})]}),(0,s.jsx)(t.h2,{id:"warnings-and-errors",children:"Warnings and Errors"}),(0,s.jsxs)(t.p,{children:["If attributes have invalid parameters you will get warnings or errors from the compiler. They are documented ",(0,s.jsx)(t.a,{href:"https://github.com/Seekatar/OptionToStringGenerator/wiki/Error-Messages",children:"here"}),"."]}),(0,s.jsx)(t.h2,{id:"trouble-shooting",children:"Trouble Shooting"}),(0,s.jsx)(t.h3,{id:"error-cs9057",children:"Error CS9057"}),(0,s.jsx)(t.p,{children:"You may get an error when compiling your code that uses this package."}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"##[error]#15 7.135 CSC : error CS9057: The analyzer assembly '/root/.nuget/packages/seekatar.optiontostringgenerator/0.1.4/analyzers/dotnet/cs/Seekatar.OptionToStringGenerator.dll' references version '4.6.0.0' of the compiler, which is newer than the currently running version '4.4.0.0'."})}),(0,s.jsxs)(t.p,{children:["You must use the .NET SDK 6.0.416 or higher. You can check your version with ",(0,s.jsx)(t.code,{children:"dotnet --list-sdks"}),"."]}),(0,s.jsx)(t.h2,{id:"using-seekatarmask",children:"Using Seekatar.Mask"}),(0,s.jsxs)(t.p,{children:["The methods used by the generated code to mask a value are available when you include the source generator NuGet package. They are in the ",(0,s.jsx)(t.code,{children:"Seekatar.Mask"})," namespace."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'using static Seekatar.Mask;\n\n...\nMaskSuffix("abc123", 3) // returns "abc***"\n'})}),(0,s.jsxs)(t.p,{children:["Methods are as follows. Each of these corresponds to an attribute as described ",(0,s.jsx)(t.a,{href:"#attributes",children:"above"}),". All take ",(0,s.jsx)(t.code,{children:"object?"})," and return ",(0,s.jsx)(t.code,{children:"string?"}),". Check each for parameters that control usage."]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MaskAll"}),(0,s.jsx)(t.td,{children:"Return a string of the same length as the input, with all characters masked"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MaskLengthOnly"}),(0,s.jsxs)(t.td,{children:["Return ",(0,s.jsx)(t.code,{children:"Len <length>"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MaskPrefix"}),(0,s.jsx)(t.td,{children:"Mask the prefix of the string, showing only a few suffix characters"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MaskPrefixSuffix"}),(0,s.jsx)(t.td,{children:"Show only a few prefix and suffix characters"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MaskRegex"}),(0,s.jsx)(t.td,{children:"Mask capture groups of a regex"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MaskSuffix"}),(0,s.jsx)(t.td,{children:"Mask the suffix of the string, showing only a few prefix characters"})]})]})]}),(0,s.jsx)(t.h2,{id:"implementation",children:"Implementation"}),(0,s.jsxs)(t.p,{children:["Big shout out to Andrew Lock and his ",(0,s.jsx)(t.a,{href:"https://andrewlock.net/creating-a-source-generator-part-1-creating-an-incremental-source-generator/",children:"blog series"})," on incremental source generators. I used that as a starting point for this project."]}),(0,s.jsx)(t.p,{children:"His blog tells his story of building a source generator and you learn better ways to do things as you progress through the blog."}),(0,s.jsxs)(t.p,{children:["In particular, in the last entry he breaks out the ",(0,s.jsx)(t.code,{children:"Attributes"})," into their own assembly. In the initial generator, he injects the ",(0,s.jsx)(t.code,{children:"Attributes"})," as code with these lines in the ",(0,s.jsx)(t.code,{children:"Initialize"})," method of the generator, which is the typical method like this:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'context.RegisterPostInitializationOutput(ctx => ctx.AddSource(\n    "ClassExtensionsAttribute.g.cs",\n    SourceText.From(SourceGenerationHelper.Attribute, Encoding.UTF8)));\n'})}),(0,s.jsxs)(t.p,{children:["He says this works fine unless someone uses ",(0,s.jsx)(t.code,{children:"InternalsVisibleTo"})," to expose the internals of one assembly to another. He tried several things to solve this before coming up with a robust solution in ",(0,s.jsx)(t.a,{href:"https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/",children:"part 8"})," of his series. There's quite a bit of advanced csproj editing that he covers to get it to work. I applied similar changes and everything but the unit tests worked. After viewing his ",(0,s.jsx)(t.a,{href:"https://github.com/andrewlock/StronglyTypedId",children:"repo"}),", I found his original unit test helper methods to build the code on-the-fly for the unit tests was different. After picking up those changes, the unit tests worked."]}),(0,s.jsx)(t.h3,{id:"basic-logic-of-optionstostringgeneratorinitialize",children:"Basic Logic of OptionsToStringGenerator.Initialize()"}),(0,s.jsxs)(t.p,{children:["This has the implementation of ",(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.iincrementalgenerator",children:"IIncrementalGenerator"}),".Initialize method. For this generator here's what I did:"]}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Look for classes with at least one attribute (predicate, which must be very fast)"}),"\n",(0,s.jsxs)(t.li,{children:["Look for ones with my ",(0,s.jsx)(t.code,{children:"OptionToStringAttribute"})," (transform, which can be slower)"]}),"\n",(0,s.jsxs)(t.li,{children:["Execute() generates the code","\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Take the syntax and get the semantic model of the class, extracting the name, accessibility, and list of properties with a ",(0,s.jsx)(t.code,{children:"get"})]}),"\n",(0,s.jsx)(t.li,{children:"Generate the code for the extension method"}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(t.h2,{id:"branching-strategy",children:"Branching Strategy"}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Branch from ",(0,s.jsx)(t.code,{children:"main"})," for new features"]}),"\n",(0,s.jsx)(t.li,{children:"Pushes will trigger a build and test run using GitHub Actions"}),"\n",(0,s.jsxs)(t.li,{children:["When ready, create a PR to ",(0,s.jsx)(t.code,{children:"main"})]}),"\n",(0,s.jsxs)(t.li,{children:["To push to the NuGet Gallery create a ",(0,s.jsx)(t.code,{children:"releases/vX.X.X"})," branch and push to it."]}),"\n"]}),(0,s.jsx)(t.h2,{id:"debugging-and-testing",children:"Debugging and Testing"}),(0,s.jsxs)(t.p,{children:["To debug the generator, the ",(0,s.jsx)(t.code,{children:"unit"})," test project calls ",(0,s.jsx)(t.code,{children:"RunGeneratorsAndUpdateCompilation"})," to run the generator and get the output. The unit test output will be the C# code for the extension method of the objects."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"integration"})," test project runs the generator then calls the extension methods and gets the output from it."]}),(0,s.jsx)(t.p,{children:"In both cases, the output is written to files and the Verify package is used to compare the output to a snapshot file."}),(0,s.jsx)(t.p,{children:"For integration tests, if you make changes to the generator, you often have to restart Visual Studio to get it to load the new one."}),(0,s.jsx)(t.h2,{id:"links-to-documentation",children:"Links to Documentation"}),(0,s.jsx)(t.p,{children:"These are links to the MS documentation for the items I used in the generator."}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol?view=roslyn-dotnet-4.6.0",children:"ISymbol"})," -- Base class for all semantic symbols"]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.ipropertysymbol?view=roslyn-dotnet-4.6.0",children:"IPropertySymbol"})," -- Semantic for the property"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.ipropertysymbol.getmethod?view=roslyn-dotnet-4.6.0",children:"GetMethod"})," -- is it a {get}"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.declaredaccessibility",children:"DeclaredAccessibility"})," -- is it public?"]}),"\n"]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.inamedtypesymbol",children:"INamedTypeSymbol"})," -- More specific semantic for the class"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.getattributes?view=roslyn-dotnet-4.6.0",children:"GetAttributes"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.containingnamespace?view=roslyn-dotnet-4.6.0",children:"ContainingNamespace"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.declaredaccessibility?view=roslyn-dotnet-4.6.0",children:"DeclaredAccessibility"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.inamespaceortypesymbol.getmembers",children:"GetMembers"})," -- get all the members of the class"]}),"\n"]}),(0,s.jsx)(t.h2,{id:"links",children:"Links"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://andrewlock.net/creating-a-source-generator-part-1-creating-an-incremental-source-generator/",children:"Andrew Lock's blog series on incremental generators (Part 1)"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/VerifyTests/Verify",children:"Verify snapshot test tool"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets",children:"MS Build (csproj) Pack Doc"})," covers some of the less frequently used options"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/dotnet/runtime/tree/25c675ff78e0446fe596cea25c7e3969b0936a33/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen",children:"MS LoggerMessage source generator source code"})," referenced by Andrew."]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/dotnet/extensions/tree/f34d120d2654057a31dc96d7f86dc42629044472/src/Generators",children:"MS .NET Generators' source code"})}),"\n"]})]}),"\n",(0,s.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Generating similar ToString method for classes with many properties. It can also generate for external classes."})}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(t.strong,{children:"OptionToStringGenerator"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Seekatar.OptionToStringGenerator" Version="0.3.1" />\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OptionToStringGenerator\\src\\Class2String\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"OptionToStringGenerator"})," in ",(0,s.jsx)(t.em,{children:"Program.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Class2String;\nusing Seekatar.OptionToStringGenerator;\nvar p = new Person();\np.FirstName = "Andrei";\np.LastName = "Ignat";\np.Age = 50;\nConsole.WriteLine(p.OptionsToString());    \n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OptionToStringGenerator\\src\\Class2String\\Person.cs",label:"Person.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"OptionToStringGenerator"})," in ",(0,s.jsx)(t.em,{children:"Person.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Seekatar.OptionToStringGenerator;\n\nnamespace Class2String;\n\n[OptionsToString]\ninternal class Person\n{\n    [OutputMask(PrefixLen = 3)]\n    public string? FirstName { get; set; }\n    [OutputMask(SuffixLen = 3)]\n    public string? LastName { get; set; }\n\n    public string FUllName => $"{FirstName} {LastName}";\n\n    [OutputIgnore]\n    public int Age { get; set; }\n}\n'})})]})]}),"\n",(0,s.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\OptionToStringGenerator\\src\\Class2String\\obj\\GX\\Seekatar.OptionToStringGenerator\\Seekatar.OptionToStringGenerator.OptionToStringGenerator\\ClassExtensions.g.cs",label:"ClassExtensions.g.cs",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#nullable enable\nusing static Seekatar.Mask;\nnamespace Seekatar.OptionToStringGenerator\n{\n    public static partial class ClassExtensions\n    {\n        internal static string OptionsToString(this Class2String.Person o)\n        {\n            return $@"Class2String.Person:\n  FirstName : {Format(o?.FirstName,prefixLen:3,suffixLen:0)}\n  LastName  : {Format(o?.LastName,prefixLen:0,suffixLen:3)}\n  FUllName  : {Format(o?.FUllName)}\n";\n        }\n    }\n}\n\n'})})})}),"\n",(0,s.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(87216).A+"",children:"Download Example project OptionToStringGenerator "})})}),"\n",(0,s.jsx)(t.h3,{id:"share-optiontostringgenerator",children:"Share OptionToStringGenerator"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&quote=OptionToStringGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&text=OptionToStringGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&title=OptionToStringGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator&title=OptionToStringGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FOptionToStringGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/OptionToStringGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/OptionToStringGenerator"})}),"\n",(0,s.jsx)(t.h3,{id:"in-the-same-category-enhancementclass---27-other-generators",children:"In the same category (EnhancementClass) - 27 other generators"}),"\n",(0,s.jsx)(t.h4,{id:"apparatusaot",children:(0,s.jsx)(t.a,{href:"/docs/ApparatusAOT",children:"ApparatusAOT"})}),"\n",(0,s.jsx)(t.h4,{id:"aspectgenerator",children:(0,s.jsx)(t.a,{href:"/docs/AspectGenerator",children:"AspectGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"commoncodegenerator",children:(0,s.jsx)(t.a,{href:"/docs/CommonCodeGenerator",children:"CommonCodeGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"comparison",children:(0,s.jsx)(t.a,{href:"/docs/Comparison",children:"Comparison"})}),"\n",(0,s.jsx)(t.h4,{id:"dudnet",children:(0,s.jsx)(t.a,{href:"/docs/DudNet",children:"DudNet"})}),"\n",(0,s.jsx)(t.h4,{id:"enhancedgettypes",children:(0,s.jsx)(t.a,{href:"/docs/Enhanced.GetTypes",children:"Enhanced.GetTypes"})}),"\n",(0,s.jsx)(t.h4,{id:"fastgenericnew",children:(0,s.jsx)(t.a,{href:"/docs/FastGenericNew",children:"FastGenericNew"})}),"\n",(0,s.jsx)(t.h4,{id:"hsusgsync",children:(0,s.jsx)(t.a,{href:"/docs/HsuSgSync",children:"HsuSgSync"})}),"\n",(0,s.jsx)(t.h4,{id:"immutype",children:(0,s.jsx)(t.a,{href:"/docs/Immutype",children:"Immutype"})}),"\n",(0,s.jsx)(t.h4,{id:"lingaudit",children:(0,s.jsx)(t.a,{href:"/docs/Ling.Audit",children:"Ling.Audit"})}),"\n",(0,s.jsx)(t.h4,{id:"lomboknet",children:(0,s.jsx)(t.a,{href:"/docs/Lombok.NET",children:"Lombok.NET"})}),"\n",(0,s.jsx)(t.h4,{id:"m31fluentapi",children:(0,s.jsx)(t.a,{href:"/docs/M31.FluentAPI",children:"M31.FluentAPI"})}),"\n",(0,s.jsx)(t.h4,{id:"memberaccessor",children:(0,s.jsx)(t.a,{href:"/docs/MemberAccessor",children:"MemberAccessor"})}),"\n",(0,s.jsx)(t.h4,{id:"memorypack",children:(0,s.jsx)(t.a,{href:"/docs/MemoryPack",children:"MemoryPack"})}),"\n",(0,s.jsx)(t.h4,{id:"meziantoupolyfill",children:(0,s.jsx)(t.a,{href:"/docs/Meziantou.Polyfill",children:"Meziantou.Polyfill"})}),"\n",(0,s.jsx)(t.h4,{id:"microsoftextensionslogging",children:(0,s.jsx)(t.a,{href:"/docs/Microsoft.Extensions.Logging",children:"Microsoft.Extensions.Logging"})}),"\n",(0,s.jsx)(t.h4,{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",children:(0,s.jsx)(t.a,{href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",children:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"microsoftinteropjavascriptjsimportgenerator",children:(0,s.jsx)(t.a,{href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator",children:"Microsoft.Interop.JavaScript.JSImportGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"querystringgenerator",children:(0,s.jsx)(t.a,{href:"/docs/QueryStringGenerator",children:"QueryStringGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_decorator",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_Decorator",children:"RSCG_Decorator"})}),"\n",(0,s.jsx)(t.h4,{id:"rscg_utilitytypes",children:(0,s.jsx)(t.a,{href:"/docs/RSCG_UtilityTypes",children:"RSCG_UtilityTypes"})}),"\n",(0,s.jsx)(t.h4,{id:"staticreflection",children:(0,s.jsx)(t.a,{href:"/docs/StaticReflection",children:"StaticReflection"})}),"\n",(0,s.jsx)(t.h4,{id:"syncmethodgenerator",children:(0,s.jsx)(t.a,{href:"/docs/SyncMethodGenerator",children:"SyncMethodGenerator"})}),"\n",(0,s.jsx)(t.h4,{id:"systemruntimeinteropservices",children:(0,s.jsx)(t.a,{href:"/docs/System.Runtime.InteropServices",children:"System.Runtime.InteropServices"})}),"\n",(0,s.jsx)(t.h4,{id:"systemtextregularexpressions",children:(0,s.jsx)(t.a,{href:"/docs/System.Text.RegularExpressions",children:"System.Text.RegularExpressions"})}),"\n",(0,s.jsx)(t.h4,{id:"telemetrylogging",children:(0,s.jsx)(t.a,{href:"/docs/TelemetryLogging",children:"TelemetryLogging"})}),"\n",(0,s.jsx)(t.h4,{id:"thisclass",children:(0,s.jsx)(t.a,{href:"/docs/ThisClass",children:"ThisClass"})})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);