"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[5961],{54725:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>a});var i=t(74848),s=t(28453);const a=[{value:"Category &quot;Templating&quot; has the following generators:",id:"category-templating-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function r(e){const n={a:"a",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"category-templating-has-the-following-generators",children:'Category "Templating" has the following generators:'}),"\n",(0,i.jsxs)(n.p,{children:["1 ",(0,i.jsx)(n.a,{href:"/docs/Gobie",children:"Gobie"})]}),"\n",(0,i.jsxs)(n.p,{children:["2 ",(0,i.jsx)(n.a,{href:"/docs/InlineComposition",children:"InlineComposition"})]}),"\n",(0,i.jsxs)(n.p,{children:["3 ",(0,i.jsx)(n.a,{href:"/docs/InterceptorTemplate",children:"InterceptorTemplate"})]}),"\n",(0,i.jsxs)(n.p,{children:["4 ",(0,i.jsx)(n.a,{href:"/docs/JKToolKit.TemplatePropertyGenerator",children:"JKToolKit.TemplatePropertyGenerator"})]}),"\n",(0,i.jsxs)(n.p,{children:["5 ",(0,i.jsx)(n.a,{href:"/docs/Microsoft.NET.Sdk.Razor.SourceGenerators",children:"Microsoft.NET.Sdk.Razor.SourceGenerators"})]}),"\n",(0,i.jsxs)(n.p,{children:["6 ",(0,i.jsx)(n.a,{href:"/docs/NTypewriter",children:"NTypewriter"})]}),"\n",(0,i.jsxs)(n.p,{children:["7 ",(0,i.jsx)(n.a,{href:"/docs/RazorBlade",children:"RazorBlade"})]}),"\n",(0,i.jsxs)(n.p,{children:["8 ",(0,i.jsx)(n.a,{href:"/docs/RazorSlices",children:"RazorSlices"})]}),"\n",(0,i.jsxs)(n.p,{children:["9 ",(0,i.jsx)(n.a,{href:"/docs/RSCG_IFormattable",children:"RSCG_IFormattable"})]}),"\n",(0,i.jsxs)(n.p,{children:["10 ",(0,i.jsx)(n.a,{href:"/docs/RSCG_Templating",children:"RSCG_Templating"})]}),"\n",(0,i.jsxs)(n.p,{children:["11 ",(0,i.jsx)(n.a,{href:"/docs/spreadcheetah",children:"spreadcheetah"})]}),"\n",(0,i.jsxs)(n.p,{children:["12 ",(0,i.jsx)(n.a,{href:"/docs/Tortuga.Shipwright",children:"Tortuga.Shipwright"})]}),"\n",(0,i.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/docs/Categories/Templating",children:"Templating"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},58114:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>b,frontMatter:()=>m,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"RSCG-Examples/InlineComposition","title":"204 - InlineComposition","description":"Mixin classes and interfaces together","source":"@site/docs/RSCG-Examples/InlineComposition.md","sourceDirName":"RSCG-Examples","slug":"/InlineComposition","permalink":"/RSCG_Examples/v2/docs/InlineComposition","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2040,"frontMatter":{"sidebar_position":2040,"title":"204 - InlineComposition","description":"Mixin classes and interfaces together","slug":"/InlineComposition"},"sidebar":"tutorialSidebar","previous":{"title":"203 - Tortuga.Shipwright","permalink":"/RSCG_Examples/v2/docs/Tortuga.Shipwright"},"next":{"title":"205 - Flaggen","permalink":"/RSCG_Examples/v2/docs/Flaggen"}}');var s=t(74848),a=t(28453),r=t(11470),l=t(19365),o=t(14252),c=t(54725);const m={sidebar_position:2040,title:"204 - InlineComposition",description:"Mixin classes and interfaces together",slug:"/InlineComposition"},p="InlineComposition  by Black White Yoshi",d={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Type Hierarchy / Polymorphism",id:"type-hierarchy--polymorphism",level:2},{value:"Conflicts",id:"conflicts",level:2},{value:"Generic classes",id:"generic-classes",level:2},{value:"Attributes",id:"attributes",level:2},{value:"InlineAttribute",id:"inlineattribute",level:3},{value:"InlineBaseAttribute",id:"inlinebaseattribute",level:3},{value:"MapBaseType",id:"mapbasetype",level:4},{value:"IgnoreInheritenceAndImplements",id:"ignoreinheritenceandimplements",level:4},{value:"InlineAttributes",id:"inlineattributes",level:4},{value:"InlineMethodAttribute",id:"inlinemethodattribute",level:3},{value:"MethodName",id:"methodname",level:4},{value:"Modifiers",id:"modifiers",level:4},{value:"First",id:"first",level:4},{value:"InlineConstructorAttribute",id:"inlineconstructorattribute",level:3},{value:"Modifiers",id:"modifiers-1",level:4},{value:"First",id:"first-1",level:4},{value:"InlineFinalizerAttribute",id:"inlinefinalizerattribute",level:3},{value:"First",id:"first-2",level:4},{value:"NoInlineAttribute",id:"noinlineattribute",level:3},{value:"Disable Attribute Generation",id:"disable-attribute-generation",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share InlineComposition",id:"share-inlinecomposition",level:3},...c.RM];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"inlinecomposition--by-black-white-yoshi",children:"InlineComposition  by Black White Yoshi"})}),"\n",(0,s.jsx)(o.A,{toc:h}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/InlineComposition/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/InlineComposition?label=InlineComposition",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/InlineComposition",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/BlackWhiteYoshi/InlineComposition?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/BlackWhiteYoshi/InlineComposition?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"InlineComposition"})]}),(0,s.jsx)(n.p,{children:"A source generator that merges the content of other classes into one class."}),(0,s.jsx)(n.p,{children:"Author: Black White Yoshi"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/InlineComposition/",children:"https://www.nuget.org/packages/InlineComposition/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/InlineComposition",children:"https://github.com/BlackWhiteYoshi/InlineComposition"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/BlackWhiteYoshi/InlineComposition",children:"https://github.com/BlackWhiteYoshi/InlineComposition"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.h1,{id:"inlinecomposition",children:"InlineComposition"}),(0,s.jsx)(n.p,{children:"A source generator that merges the content of other classes into one class.\nA simple workaround for struct inheritance or multiple inheritance."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/BlackWhiteYoshi/InlineComposition/README_IMAGE.png",alt:"InlineComposition Example"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Inlined get members of type field, property, event and method (including constructor and finalizer)."}),"\n",(0,s.jsx)(n.li,{children:"Attributes and summaries of the inlined members get also inlined."}),"\n",(0,s.jsx)(n.li,{children:"Inheritance and implements declaration are also inlined."}),"\n",(0,s.jsx)(n.li,{children:"Mixing classes and structs works fine (inline struct in class and vice versa)."}),"\n"]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"type-hierarchy--polymorphism",children:"Type Hierarchy / Polymorphism"}),(0,s.jsx)(n.p,{children:"Inheritance gives not only all the content of a base class, you get also a type hierarchy and polymorphism.\nIf you need a type hierarchy or polymorphism, you can use interfaces to get the same functionality."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\npublic interface IBaseA { ... }\n\npublic interface IBaseB { ... }\n\n[InlineBase]\npublic class BaseA : IBaseA { ... }\n\n[InlineBase]\npublic class BaseB : IBaseB { ... }\n\n[Inline<BaseA, BaseB>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\nDerived derived = new();\nConsole.WriteLine(derived is BaseA);  // False\nConsole.WriteLine(derived is BaseB);  // False\nConsole.WriteLine(derived is IBaseA); // True\nConsole.WriteLine(derived is IBaseB); // True\n\n// polymorphism IBaseA\nExampleA(derived);\n\n// polymorphism IBaseB\nExampleB(derived);\n\n\nstatic void ExampleA(IBaseA baseA) { ... }\n\nstatic void ExampleB(IBaseB baseB) { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IBaseA, IBaseB { ... }\n"})}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"conflicts",children:"Conflicts"}),(0,s.jsxs)(n.p,{children:["Members with the same identifier get merged to a single Member.\nMake sure merged members have the same signature.\nMethod-bodies are merged together that every method is executed one after another.",(0,s.jsx)(n.br,{}),"\n","Merging of nested types is not supported.\nIf a conflict of nested types happens, the first one is taken and the others are ignored."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\n[InlineBase]\npublic class BaseA\n{\n    public int MyProperty { get; set; }\n\n    public void MyMethod()\n    {\n        int a = 5;\n        Console.WriteLine(a);\n    }\n}\n\n[InlineBase]\npublic class BaseB\n{\n    public int MyProperty { get; set; }\n\n    public void MyMethod()\n    {\n        int a = 5;\n        Console.WriteLine(a + a);\n    }\n}\n\n[Inline<BaseA, BaseB>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public int MyProperty { get; set; }\n\n    public void MyMethod()\n    {\n        {\n        int a = 5;\n        Console.WriteLine(a);\n        }\n\n        {\n        int a = 5;\n        Console.WriteLine(a + a);\n        }\n    }\n}\n"})}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"generic-classes",children:"Generic classes"}),(0,s.jsx)(n.p,{children:"Inlining of generic classes is supported.\nHowever, inserting the concrete type in place of the type parameter is done by simple text replacement.\nThere might be situations where things get replaced/not replaced where it should/should not.\nSo when inlining generic classes, better double check the result."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base<T>\n{\n    public T MyProperty { get; set; }\n}\n\n[Inline<Base<int>>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public int MyProperty { get; set; }\n}\n"})}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"attributes",children:"Attributes"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.h3,{id:"inlineattribute",children:"InlineAttribute"}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Generates a class with the same name and fills it with the content of the classes/structs in the type arguments.",(0,s.jsx)(n.br,{}),"\n","If you inline a class/struct that has no ",(0,s.jsx)(n.em,{children:"InlineBaseAttribute"}),", it will be ignored."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using InlineCompositionAttributes;\n\n[Inline<Example>] // "Example" must have a InlineBaseAttribute, otherwise it has no effect.\npublic partial class MyClass { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class MyClass { ... }\n'})}),(0,s.jsx)(n.p,{children:"This class comes with up to 12 type parameters.\nIf you need more, you can easily create your own suitable one."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace InlineCompositionAttributes;\n\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\ninternal sealed class InlineAttribute<T1, ..., TN> : Attribute { }\n"})}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.h3,{id:"inlinebaseattribute",children:"InlineBaseAttribute"}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["In order ",(0,s.jsx)(n.em,{children:"Inline"})," works as expected, the classes/structs to inline must be decorated with ",(0,s.jsx)(n.em,{children:"InlineBase"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\n[InlineBase] // Itself it does nothing, but this class can now be used as type argument in InlineAttribute.\npublic class MyClass { ... }\n"})}),(0,s.jsx)(n.h4,{id:"mapbasetype",children:"MapBaseType"}),(0,s.jsx)(n.p,{children:"If this flag is set to true, all occurrences of the type of the inlineBase class/struct get replaced with the type of the inlining class/struct."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\n[InlineBase(MapBaseType = true)]\npublic class Example\n{\n    public Example Self => this;\n}\n\n[Inline<Example>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public Derived Self => this;\n}\n"})}),(0,s.jsx)(n.h4,{id:"ignoreinheritenceandimplements",children:"IgnoreInheritenceAndImplements"}),(0,s.jsxs)(n.p,{children:["If this flag is set to true, the base classes and interfaces of the inlined class are ignored.",(0,s.jsx)(n.br,{}),"\n","If you want inline classes that inherit from different base classes, you can use this to avoid to inherit multiple classes."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\npublic abstract class BaseA { ... }\n\npublic abstract class BaseB { ... }\n\n[InlineBase(IgnoreInheritenceAndImplements = true)]\npublic class InlineA : BaseA { ... }\n\n[InlineBase]\npublic class InlineB : BaseB { ... }\n\n[Inline<InlineA, InlineB>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : BaseB { ... }\n"})}),(0,s.jsx)(n.h4,{id:"inlineattributes",children:"InlineAttributes"}),(0,s.jsxs)(n.p,{children:["If this flag is set to true, attributes applied to this class/struct are inlined as well.",(0,s.jsx)(n.br,{}),"\n","The attribute [InlineBase] itself is ignored."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\n[SomeAttribute]\n[InlineBase(InlineAttributes = true)]\npublic class Example { ... }\n\n[Inline<Example>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\n[SomeAttribute]\npublic partial class Derived { ... }\n"})}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.h3,{id:"inlinemethodattribute",children:"InlineMethodAttribute"}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Overriding a normal method and adding your own code is native not possible.\nThe ",(0,s.jsx)(n.em,{children:"InlineMethodAttribute"})," gives support for adding code to the inlined method.\nThe content of the decorated method is added to the inlined method specified in the ",(0,s.jsx)(n.em,{children:"MethodName"})," parameter and takes the same parameters."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "Dispose")]\n    public void DisposePartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IDisposable\n{\n    [InlineMethod(MethodName = "Dispose")]\n    public void Dispose()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n'})}),(0,s.jsx)(n.h4,{id:"methodname",children:"MethodName"}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"MethodName"})," is a required parameter that specify the name of the method to add content to.\nMake sure the parameters are the same to target the right (overloaded) method."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base\n{\n    public void PrintSum(int a, int b)\n    {\n        Console.WriteLine(a + b);\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "PrintSum(int, int)")]\n    public void PrintSumPartial(int a, int b)\n    {\n        Console.WriteLine(b + a);\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "PrintSum(int, int)")]\n    public void PrintSum()\n    {\n        {\n        Console.WriteLine(a + b);\n        }\n        {\n        Console.WriteLine(b + a);\n        }\n    }\n}\n'})}),(0,s.jsx)(n.h4,{id:"modifiers",children:"Modifiers"}),(0,s.jsxs)(n.p,{children:["When inlining your method-body in a method, the summary, attributes and modifiers are overwritten with your method.\nIf you want different modifiers inlined than your method, you can use the ",(0,s.jsx)(n.em,{children:"Modifiers"})," parameter.\nA common scenario is that your method should not be available (private), but the inlined method should still be public."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "Dispose", Modifiers = "public")]\n    private void DisposePartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IDisposable\n{\n    [InlineMethod(MethodName = "Dispose", Modifiers = "public")]\n    public void Dispose()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n'})}),(0,s.jsx)(n.h4,{id:"first",children:"First"}),(0,s.jsxs)(n.p,{children:["When the added code must run before the inlined code, you can set the ",(0,s.jsx)(n.em,{children:"First"})," parameter to true."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base : IDisposable\n{\n    public void Dispose()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineMethod(MethodName = "Dispose", First = true)]\n    public void DisposePartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived : IDisposable\n{\n    [InlineMethod(MethodName = "Dispose")]\n    public void Dispose()\n    {\n        {\n        Console.WriteLine("derived");\n        }\n        {\n        Console.WriteLine("base");\n        }\n    }\n}\n'})}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.h3,{id:"inlineconstructorattribute",children:"InlineConstructorAttribute"}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"InlineConstructorAttribute"})," lets you add code to the inlined constructor.\nThe content of the decorated method is added to the inlined constructor."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using InlineCompositionAttributes;\n\n[InlineBase]\npublic class Base\n{\n    public Base()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineConstructor]\n    public void ConstructorPartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    [InlineConstructor]\n    public Derived()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n'})}),(0,s.jsx)(n.h4,{id:"modifiers-1",children:"Modifiers"}),(0,s.jsxs)(n.p,{children:["The same functionality as ",(0,s.jsx)(n.em,{children:"InlineMethodAttribute.Modifiers"})]}),(0,s.jsx)(n.h4,{id:"first-1",children:"First"}),(0,s.jsxs)(n.p,{children:["The same functionality as ",(0,s.jsx)(n.em,{children:"InlineMethodAttribute.First"})]}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.h3,{id:"inlinefinalizerattribute",children:"InlineFinalizerAttribute"}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"InlineFinalizerAttribute"})," lets you add code to the inlined finalizer.\nThe content of the decorated method is added to the inlined finalizer."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[InlineBase]\npublic class Base\n{\n    ~Base()\n    {\n        Console.WriteLine("base");\n    }\n}\n\n[Inline<Base>]\npublic partial class Derived\n{\n    [InlineFinalizer]\n    public void FinalizerPartial()\n    {\n        Console.WriteLine("derived");\n    }\n}\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    [InlineFinalizer]\n    ~Derived()\n    {\n        {\n        Console.WriteLine("base");\n        }\n        {\n        Console.WriteLine("derived");\n        }\n    }\n}\n'})}),(0,s.jsx)(n.h4,{id:"first-2",children:"First"}),(0,s.jsxs)(n.p,{children:["The same functionality as ",(0,s.jsx)(n.em,{children:"InlineMethodAttribute.First"})]}),(0,s.jsx)("br",{}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.h3,{id:"noinlineattribute",children:"NoInlineAttribute"}),"\n"]}),"\n"]}),(0,s.jsx)(n.p,{children:"Members decorated with this attribute are ignored."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using InlineCompositionAttributes;\n\n[InlineBase]\npublic class MyBase\n{\n    [NoInline]\n    private int myField;\n\n    public int MyProperty { get; set; }\n}\n\n[Inline<MyBase>]\npublic partial class Derived { ... }\n\n\n[...]\n\n\n// <auto-generated/>\npublic partial class Derived\n{\n    public int MyProperty { get; set; }\n}\n"})}),(0,s.jsx)("br",{}),(0,s.jsx)(n.h2,{id:"disable-attribute-generation",children:"Disable Attribute Generation"}),(0,s.jsx)(n.p,{children:"You can disable the generation of the attributes by defining a constant for your compilation:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"  <PropertyGroup>\n    <DefineConstants>INLINECOMPOSITION_EXCLUDE_ATTRIBUTES</DefineConstants>\n  </PropertyGroup>\n"})}),(0,s.jsxs)(n.p,{children:["This functionality is specific for the use case when you have a project referencing another project, both projects using this generator and you have ",(0,s.jsx)("i",{children:"InternalsVisibleTo"})," enabled.\nIn that case you have the attributes defined twice in your referencing project and you get a warning about that.\nBy defining this constant in your referencing project, you prevent one generation, so the attributes are only defined once in the referenced project."]})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Mixin classes and interfaces together"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"InlineComposition"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {20}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\n\t\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n\n\t\n\t<ItemGroup>\n\t  <PackageReference Include="InlineComposition" Version="1.4.0">\n\t    <PrivateAssets>all</PrivateAssets>\n\t    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t  </PackageReference>\n\t</ItemGroup>\n\n\t\n</Project>\n\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"InlineComposition"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing MixinConsoleDemo;\n\nConsole.WriteLine("Hello, World!");\nEmployee p = new Employee();\np.Name="Andrei Ignat";\np.Age = 55;\np.Salary = 1000;\np.Id = 1;\nConsole.WriteLine($"Name: {p.Name}, Age: {p.Age}, Salary: {p.Salary}");\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\Person.cs",label:"Person.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"InlineComposition"})," in ",(0,s.jsx)(n.em,{children:"Person.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n[InlineBase]\ninternal class Person\n{\n    \n    public string Name { get; set; } = string.Empty;\n        public int Age { get; set; }\n    \n}\n\n"})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\Employee.cs",label:"Employee.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"InlineComposition"})," in ",(0,s.jsx)(n.em,{children:"Employee.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n[Inline<Person,IId>]\ninternal partial class Employee\n{\n    public decimal Salary { get; set; }\n}\n\n"})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\IId.cs",label:"IId.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"InlineComposition"})," in ",(0,s.jsx)(n.em,{children:"IId.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n[InlineBase]\ninternal class IId\n{\n    public int Id { get; set; }\n}\n\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineAttribute.g.cs",label:"InlineAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T10">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T10">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T11">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : Attribute { }\n\n/// <summary>\n/// Generates a partial class/struct which includes all members listed in the typeParams.\n/// </summary>\n/// <typeparam name="T1">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T2">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T3">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T4">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T5">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T6">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T7">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T8">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T9">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T10">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T11">class/struct which members gets inlined.</typeparam>\n/// <typeparam name="T12">class/struct which members gets inlined.</typeparam>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineAttribute<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : Attribute { }\n\n#endif\n\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineBaseAttribute.g.cs",label:"InlineBaseAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// <para>Marks this class/struct as inlineable, so it can be listed in a <see cref="InlineAttribute{T1}"/> Attribute.</para>\n/// </summary>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineBaseAttribute : Attribute {\n    /// <summary>\n    /// <para>If set all occurrences of the type of the inlineBase class/struct get replaced with the type of the inlining class/struct.</para>\n    /// <para>e.g. if "Example" inlines "Test" with this option enabled, all occurrences of type "Test" inside class/struct "Test" will be mapped to "Example".</para>\n    /// </summary>\n    public bool MapBaseType { get; init; }\n\n    /// <summary>\n    /// If set the generator ignores the inherited class and implemented interfaces of this type.\n    /// </summary>\n    public bool IgnoreInheritenceAndImplements { get; init; }\n\n    /// <summary>\n    /// If set attributes of this class/struct are inlined as well.<br />\n    /// The attribute [InlineBase] itself is ignored.\n    /// </summary>\n    public bool InlineAttributes { get; init; }\n}\n\n#endif\n\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineConstructorAttribute.g.cs",label:"InlineConstructorAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// The Method under this attribute will be inlined in the constructor.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.Constructor)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineConstructorAttribute : Attribute {\n    /// <summary>\n    /// <para>Modifiers e.g. "public", "protected", "private"</para>\n    /// <para>If null, the method modifiers will be taken.</para>\n    /// </summary>\n    public string? Modifiers { get; init; }\n\n    /// <summary>\n    /// Indicates whether this method gets inlined before the other constructors or after.\n    /// </summary>\n    public bool First { get; init; }\n}\n\n#endif\n\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineFinalizerAttribute.g.cs",label:"InlineFinalizerAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// The Method under this attribute will be inlined in the finalizer.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineFinalizerAttribute : Attribute {\n    /// <summary>\n    /// Indicates whether this method gets inlined before the other finalizers or after.\n    /// </summary>\n    public bool First { get; init; }\n}\n\n#endif\n\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\InlineMethodAttribute.g.cs",label:"InlineMethodAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// The Method under this attribute will be inlined in the method given by <see cref="MethodName"/>.\n/// </summary>\n[AttributeUsage(AttributeTargets.Method)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class InlineMethodAttribute : Attribute {\n    /// <summary>\n    /// The method name as string literal.\n    /// </summary>\n    public required string MethodName { get; init; }\n\n    /// <summary>\n    /// <para>Modifiers e.g. "public static extern", "protected abstract"</para>\n    /// <para>If null, the method modifiers will be taken.</para>\n    /// </summary>\n    public string? Modifiers { get; init; }\n\n    /// <summary>\n    /// Indicates whether this method gets inlined before the other methods or after.\n    /// </summary>\n    public bool First { get; init; }\n}\n\n#endif\n\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\MixinConsoleDemo.Employee.g.cs",label:"MixinConsoleDemo.Employee.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\nusing InlineCompositionAttributes;\n\nnamespace MixinConsoleDemo;\n\ninternal partial class Employee {\n    \n    public string Name { get; set; } = string.Empty;\n\n        public int Age { get; set; }\n\n    public int Id { get; set; }\n\n}\n\n"})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\InlineComposition\\src\\MixinConsoleDemo\\obj\\GX\\InlineComposition\\InlineComposition.InlineCompositionGenerator\\NoInlineAttribute.g.cs",label:"NoInlineAttribute.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#pragma warning disable\n#nullable enable annotations\n\n\n#if !INLINECOMPOSITION_EXCLUDE_ATTRIBUTES\n\nusing System;\n\nnamespace InlineCompositionAttributes;\n\n/// <summary>\n/// <para>Only usefule in a class/struct with a <see cref="InlineBaseAttribute"/>.</para>\n/// <para>Skips/Ignores this member.</para>\n/// </summary>\n[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Event | AttributeTargets.Method)]\n[System.CodeDom.Compiler.GeneratedCodeAttribute("InlineComposition", "1.4.0")]\ninternal sealed class NoInlineAttribute : Attribute { }\n\n#endif\n\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(91597).A+"",children:"Download Example project InlineComposition "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-inlinecomposition",children:"Share InlineComposition"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&quote=InlineComposition",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&text=InlineComposition:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&title=InlineComposition",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition&title=InlineComposition&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInlineComposition",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/InlineComposition",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/InlineComposition"})}),"\n",(0,s.jsx)(n.p,{children:"aaa"}),"\n",(0,s.jsx)(c.Ay,{})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},91597:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/InlineComposition-ed857b88d04c5e047fb3217b878ce808.zip"}}]);