"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[8308],{6785:(e,n,r)=>{r.d(n,{A:()=>l});const l=r.p+"assets/files/kli.Localize-cc8e9d484abd5f6c05f227b88e6f0067.zip"},28689:(e,n,r)=>{r.d(n,{Ay:()=>a,RM:()=>s});var l=r(74848),t=r(28453);const s=[{value:"Category &quot;FilesToCode&quot; has the following generators:",id:"category-filestocode-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function i(e){const n={a:"a",h3:"h3",p:"p",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h3,{id:"category-filestocode-has-the-following-generators",children:'Category "FilesToCode" has the following generators:'}),"\n",(0,l.jsxs)(n.p,{children:["1 ",(0,l.jsx)(n.a,{href:"/docs/Chorn.EmbeddedResourceAccessGenerator",children:"Chorn.EmbeddedResourceAccessGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["2 ",(0,l.jsx)(n.a,{href:"/docs/corecraft",children:"corecraft"})]}),"\n",(0,l.jsxs)(n.p,{children:["3 ",(0,l.jsx)(n.a,{href:"/docs/Datacute.EmbeddedResourcePropertyGenerator",children:"Datacute.EmbeddedResourcePropertyGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["4 ",(0,l.jsx)(n.a,{href:"/docs/DotnetYang",children:"DotnetYang"})]}),"\n",(0,l.jsxs)(n.p,{children:["5 ",(0,l.jsx)(n.a,{href:"/docs/EmbedResourceCSharp",children:"EmbedResourceCSharp"})]}),"\n",(0,l.jsxs)(n.p,{children:["6 ",(0,l.jsx)(n.a,{href:"/docs/kli.Localize",children:"kli.Localize"})]}),"\n",(0,l.jsxs)(n.p,{children:["7 ",(0,l.jsx)(n.a,{href:"/docs/LingoGen",children:"LingoGen"})]}),"\n",(0,l.jsxs)(n.p,{children:["8 ",(0,l.jsx)(n.a,{href:"/docs/NFH.FileEmbed",children:"NFH.FileEmbed"})]}),"\n",(0,l.jsxs)(n.p,{children:["9 ",(0,l.jsx)(n.a,{href:"/docs/NotNotAppSettings",children:"NotNotAppSettings"})]}),"\n",(0,l.jsxs)(n.p,{children:["10 ",(0,l.jsx)(n.a,{href:"/docs/Podimo.ConstEmbed",children:"Podimo.ConstEmbed"})]}),"\n",(0,l.jsxs)(n.p,{children:["11 ",(0,l.jsx)(n.a,{href:"/docs/ResXGenerator",children:"ResXGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["12 ",(0,l.jsx)(n.a,{href:"/docs/RSCG_JSON2Class",children:"RSCG_JSON2Class"})]}),"\n",(0,l.jsxs)(n.p,{children:["13 ",(0,l.jsx)(n.a,{href:"/docs/RSCG_Utils",children:"RSCG_Utils"})]}),"\n",(0,l.jsxs)(n.p,{children:["14 ",(0,l.jsx)(n.a,{href:"/docs/Strings.ResourceGenerator",children:"Strings.ResourceGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["15 ",(0,l.jsx)(n.a,{href:"/docs/ThisAssembly_Resources",children:"ThisAssembly_Resources"})]}),"\n",(0,l.jsxs)(n.p,{children:["16 ",(0,l.jsx)(n.a,{href:"/docs/ThisAssembly.Strings",children:"ThisAssembly.Strings"})]}),"\n",(0,l.jsxs)(n.p,{children:["17 ",(0,l.jsx)(n.a,{href:"/docs/Weave",children:"Weave"})]}),"\n",(0,l.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/docs/Categories/FilesToCode",children:"FilesToCode"})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(i,{...e})}):i(e)}},28764:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>u,metadata:()=>l,toc:()=>m});const l=JSON.parse('{"id":"RSCG-Examples/kli.Localize","title":"231 - kli.Localize","description":"Generating locality files from json files","source":"@site/docs/RSCG-Examples/kli.Localize.md","sourceDirName":"RSCG-Examples","slug":"/kli.Localize","permalink":"/RSCG_Examples/v2/docs/kli.Localize","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2310,"frontMatter":{"sidebar_position":2310,"title":"231 - kli.Localize","description":"Generating locality files from json files","slug":"/kli.Localize"},"sidebar":"tutorialSidebar","previous":{"title":"230 - Unflat","permalink":"/RSCG_Examples/v2/docs/Unflat"},"next":{"title":"v1","permalink":"/RSCG_Examples/v2/docs/v1"}}');var t=r(74848),s=r(28453),i=r(11470),a=r(19365),o=r(14252),c=r(28689);const u={sidebar_position:2310,title:"231 - kli.Localize",description:"Generating locality files from json files",slug:"/kli.Localize"},d="kli.Localize  by Tobias Klimm",h={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Author",id:"author",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Usage",id:"usage",level:2},{value:"Install the nuget package",id:"install-the-nuget-package",level:3},{value:"Create *.json files for your localized texts.",id:"create-json-files-for-your-localized-texts",level:3},{value:"Add json files to csproj",id:"add-json-files-to-csproj",level:3},{value:"Use it in your code",id:"use-it-in-your-code",level:3},{value:"Namespace generation",id:"namespace-generation",level:3},{value:"Class naming",id:"class-naming",level:3},{value:"Changelog",id:"changelog",level:2},{value:"Help! Why is no code generated?",id:"help-why-is-no-code-generated",level:2},{value:"Need help? Problems?",id:"need-help-problems",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share kli.Localize",id:"share-klilocalize",level:3},...c.RM];function p(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{Details:l}=n;return l||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"klilocalize--by-tobias-klimm",children:"kli.Localize  by Tobias Klimm"})}),"\n",(0,t.jsx)(o.A,{toc:m}),"\n",(0,t.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/kli.Localize/",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/kli.Localize?label=kli.Localize",alt:"Nuget"})}),"\n",(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/kl1mm/localize?label=updated",alt:"GitHub last commit"})}),"\n",(0,t.jsx)(n.img,{src:"https://img.shields.io/github/stars/kl1mm/localize?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,t.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,t.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["Name: ",(0,t.jsx)(n.strong,{children:"kli.Localize"})]}),(0,t.jsx)(n.p,{children:"Generates statically accessible code for .json files that serve as a source for localization (C# Source Generators)"}),(0,t.jsx)(n.p,{children:"Author: Tobias Klimm"}),(0,t.jsxs)(n.p,{children:["NuGet:\n",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/kli.Localize/",children:"https://www.nuget.org/packages/kli.Localize/"})})]}),(0,t.jsxs)(n.p,{children:["You can find more details at ",(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize",children:"https://github.com/kl1mm/localize"})]}),(0,t.jsxs)(n.p,{children:["Source: ",(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize",children:"https://github.com/kl1mm/localize"})]})]}),"\n",(0,t.jsx)(n.h3,{id:"author",children:"Author"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Tobias Klimm\n",(0,t.jsx)(n.img,{src:"https://github.com/kl1mm.png",alt:"Alt text"})]})}),"\n",(0,t.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.h1,{id:"localize",children:"Localize"}),(0,t.jsxs)(n.p,{children:["Simple package to localize ",(0,t.jsx)(n.strong,{children:"strings"})," from json files via static source code generation."]}),(0,t.jsxs)(n.p,{children:["Implemented via ",(0,t.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview",children:"C# source generators"})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize/actions/workflows/dotnet.yml",children:(0,t.jsx)(n.img,{src:"https://github.com/kl1mm/localize/actions/workflows/dotnet.yml/badge.svg?branch=main",alt:"CI\\CD"})})}),(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Also see ",(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize/tree/develop/example/kli.Localize.Example",children:(0,t.jsx)(n.strong,{children:"example project"})})]})}),(0,t.jsx)(n.h3,{id:"install-the-nuget-package",children:"Install the nuget package"}),(0,t.jsxs)(n.p,{children:["Add a ",(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/kli.Localize/",children:"Nuget package"})," reference to the project file in the project you want to localize:"]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'<PackageReference Include="kli.Localize" Version="<version>" />'})}),(0,t.jsx)(n.h3,{id:"create-json-files-for-your-localized-texts",children:"Create *.json files for your localized texts."}),(0,t.jsx)(n.p,{children:"Example:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "SampleText": "FooBar",\n    "Other": "Text42",\n    "NestedItems": {\n      "Are": "also supported"\n    }\n}\n'})}),(0,t.jsxs)(n.p,{children:["Name your localization files, including the culture according to the pattern: ",(0,t.jsx)(n.code,{children:"<FileName>_<CultureInfo.Name>.json"})," (e.g. ",(0,t.jsx)(n.code,{children:"Locale_de.json"}),").\nFor other cultures follow the same pattern (e.g. ",(0,t.jsx)(n.code,{children:"Locale_en-US.json"})," for American English or ",(0,t.jsx)(n.code,{children:"Locale_en.json"})," for English).",(0,t.jsx)(n.br,{}),"\n","You have to specify which given culture is the neutral culture (the fallback used if there is no localization found for a specific culture)\nvia the ",(0,t.jsx)(n.code,{children:"NeutralCulture"})," attribute on the ",(0,t.jsx)(n.code,{children:"Localize"})," element."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"docs/locale_files.png",alt:"locale_files image"})}),(0,t.jsx)(n.h3,{id:"add-json-files-to-csproj",children:"Add json files to csproj"}),(0,t.jsxs)(n.p,{children:["In an ",(0,t.jsx)(n.code,{children:"ItemGroup"})," in your csproj file add an ",(0,t.jsx)(n.code,{children:"Localize"})," element for ",(0,t.jsx)(n.strong,{children:"each localization"})," json file, include other cultures via glob pattern.\nSet the ",(0,t.jsx)(n.code,{children:"Include"})," attribute to the path of the file and specify the neutral culture via the ",(0,t.jsx)(n.code,{children:"NeutralCulture"})," attribute"]}),(0,t.jsx)(n.p,{children:"Example:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n    <ItemGroup>\n        <PackageReference Include="kli.Localize" Version="1.0.*" />\n\n        <Localize Include="TestLocalizations\\Locale_*.json" NeutralCulture="en"/>\n    </ItemGroup>\n</Project>\n'})}),(0,t.jsxs)(n.p,{children:["This means: if you have a ",(0,t.jsx)(n.code,{children:"Locale_en.json"})," and a ",(0,t.jsx)(n.code,{children:"Locale_en-US.json"})," add ",(0,t.jsx)(n.code,{children:"Locale_*.json"})," as ",(0,t.jsx)(n.code,{children:"<Localize>"}),", and specify either ",(0,t.jsx)(n.code,{children:"en"})," or ",(0,t.jsx)(n.code,{children:"en_US"})," as ",(0,t.jsx)(n.code,{children:"NeutralCulture"}),".",(0,t.jsx)(n.br,{}),"\n","Add other files the same way in another ",(0,t.jsx)(n.code,{children:"Localize"})," element."]}),(0,t.jsx)(n.h3,{id:"use-it-in-your-code",children:"Use it in your code"}),(0,t.jsxs)(n.p,{children:["Now you should be able to locate the generated source code in your project under Dependencies/Analyzers.",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.em,{children:"Of course you can also view and debug the generated source code."})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"docs/generated_1.png",alt:"generated_1 image"})}),(0,t.jsxs)(l,{children:[(0,t.jsx)("summary",{children:"Generated code example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by kli.Localize.Generator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nnamespace kli.Localize.Example.Localizations\n{\n    using System;\n    using System.Globalization;\n    using System.Collections.Generic;\n    using Translations = System.Collections.Generic.Dictionary<string, string>;\n\n    public sealed class Locale\n    {\n        private static readonly LocalizationProvider provider = new LocalizationProvider();\n        public static IDictionary<string, string> GetAll(CultureInfo cultureInfo = null) => provider.GetValues(cultureInfo ?? CultureInfo.CurrentUICulture);\n        public static string GetString(string key, CultureInfo cultureInfo = null) => provider.GetValue(key, cultureInfo ?? CultureInfo.CurrentUICulture);\n        ///<summary>Similar to: Hallo Welt (German)</summary>\n        public static string MyText => provider.GetValue(nameof(MyText), CultureInfo.CurrentUICulture);\n        private class LocalizationProvider\n        {\n            delegate bool SelectorFunc<T>(Translations translations, out T arg);\n            internal string GetValue(string key, CultureInfo cultureInfo)\n            {\n                bool ValueSelector(Translations translations, out string value)\n                {\n                    if (translations.TryGetValue(key, out value))\n                        return true;\n                    value = key;\n                    return false;\n                }\n\n                return TraverseCultures<string>(cultureInfo, ValueSelector);\n            }\n\n            internal IDictionary<string, string> GetValues(CultureInfo cultureInfo)\n            {\n                bool ValueSelector(Translations translations, out Translations value)\n                {\n                    value = translations;\n                    return true;\n                }\n\n                return TraverseCultures<Translations>(cultureInfo, ValueSelector);\n            }\n\n            private T TraverseCultures<T>(CultureInfo cultureInfo, SelectorFunc<T> selectorFunc)\n            {\n                if (resources.TryGetValue(cultureInfo, out Translations translations))\n                {\n                    if (selectorFunc(translations, out T result) || cultureInfo == CultureInfo.InvariantCulture)\n                        return result;\n                }\n\n                return TraverseCultures<T>(cultureInfo.Parent, selectorFunc);\n            }\n\n            private static readonly Translations invariant = new()\n            {{"MyText", "Hallo Welt (German)"}, };\n            private static readonly Translations en = new()\n            {{"MyText", "Hello World (English)"}, };\n            private static readonly Dictionary<CultureInfo, Translations> resources = new()\n            {{CultureInfo.InvariantCulture, invariant}, {new CultureInfo("en"), en}, };\n        }\n    }\n}\n'})})]}),(0,t.jsxs)(n.p,{children:["Import the namespace where you put your *.json files and use the generated code to access your localizations.",(0,t.jsx)(n.br,{}),"\n","Access is based on ",(0,t.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.currentuiculture",children:"CultureInfo.CurrentUICulture"})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"docs/useit.png",alt:"useit image"})}),(0,t.jsx)(n.h3,{id:"namespace-generation",children:"Namespace generation"}),(0,t.jsxs)(n.p,{children:["The namespace is generated using the following pattern:",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.code,{children:"rootnamespace + relative directory structure"})]}),(0,t.jsxs)(n.p,{children:["This behaviour can be overridden with the ",(0,t.jsx)(n.code,{children:"NamespaceName"})," attribute on the ",(0,t.jsx)(n.code,{children:"Localize"})," element."]}),(0,t.jsx)(n.h3,{id:"class-naming",children:"Class naming"}),(0,t.jsx)(n.p,{children:"The default class name in the generated code is the filename without the culture."}),(0,t.jsxs)(n.p,{children:["This behaviour can be overridden with the ",(0,t.jsx)(n.code,{children:"ClassName"})," attribute on the ",(0,t.jsx)(n.code,{children:"Localize"})," element."]}),(0,t.jsx)(n.h2,{id:"changelog",children:(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize/CHANGELOG.md",children:"Changelog"})}),(0,t.jsx)(n.h2,{id:"help-why-is-no-code-generated",children:"Help! Why is no code generated?"}),(0,t.jsx)(n.p,{children:"Directly after including the package sometimes the tooling (Visual Studio) gets stuck. If you encounter any problems with source generation try to restart Visual Studio and/or check the build log for warnings/errors."}),(0,t.jsx)(n.h2,{id:"need-help-problems",children:"Need help? Problems?"}),(0,t.jsxs)(n.p,{children:["Feel free to create an ",(0,t.jsx)(n.a,{href:"https://github.com/kl1mm/localize/issues",children:"Issue"})]})]}),"\n",(0,t.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Generating locality files from json files"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,t.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,t.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,t.jsx)(n.strong,{children:"kli.Localize"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {24}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  \n\n  \n\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n  \n\n  \n\n\t<ItemGroup>\n\t  <PackageReference Include="kli.Localize" Version="2.0.4" />\n\t<Localize Include="TestData\\AllText_*.json" NeutralCulture="en"/>\n\t</ItemGroup>\n\t\x3c!--<ItemGroup>\n\t\t<CompilerVisibleProperty Include="FileEmbed_MaxEmbedSize" />\n\t</ItemGroup>\n\t<PropertyGroup>\n\t\t<FileEmbed_MaxEmbedSize>SIZE_IN_BYTES_GOES_HERE</FileEmbed_MaxEmbedSize>\n\t</PropertyGroup>--\x3e\n</Project>\n\n'})})]}),(0,t.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\kli.Localize\\src\\EmbedDemo\\Program.cs",label:"Program.cs",children:[(0,t.jsxs)(n.p,{children:["This is the use of ",(0,t.jsx)(n.strong,{children:"kli.Localize"})," in ",(0,t.jsx)(n.em,{children:"Program.cs"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using EmbedDemo.TestData;\nusing System.Globalization;\nusing System.Text;\n\nConsole.WriteLine("Hello, World!");\nCultureInfo.CurrentUICulture  = new CultureInfo("en-US");\nConsole.WriteLine(AllText.Welcome);\nCultureInfo.CurrentUICulture  = new CultureInfo("ro-RO");\nConsole.WriteLine(AllText.Welcome);\nConsole.WriteLine(AllText.page1.Text);\n'})})]}),(0,t.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\kli.Localize\\src\\EmbedDemo\\TestData\\AllText_en.json",label:"AllText_en.json",children:[(0,t.jsxs)(n.p,{children:["This is the use of ",(0,t.jsx)(n.strong,{children:"kli.Localize"})," in ",(0,t.jsx)(n.em,{children:"AllText_en.json"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'{\n\t"Welcome": "Welcome , user",\n\t"page1": {\n\t\t"Text": "List of Persons"\n\t}\n}\n'})})]}),(0,t.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\kli.Localize\\src\\EmbedDemo\\TestData\\AllText_ro.json",label:"AllText_ro.json",children:[(0,t.jsxs)(n.p,{children:["This is the use of ",(0,t.jsx)(n.strong,{children:"kli.Localize"})," in ",(0,t.jsx)(n.em,{children:"AllText_ro.json"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'{\n\t"Welcome": "Bine ai venit",\n\t"page1": {\n\t\t"Text": "Lista persoanelor"\n\t}\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,t.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,t.jsx)(i.A,{children:(0,t.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\kli.Localize\\src\\EmbedDemo\\obj\\GX\\kli.Localize.Generator\\kli.Localize.Generator.LocalizeCodeGenerator\\AllText.g.cs",label:"AllText.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by kli.Localize.Generator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nnamespace EmbedDemo.TestData\n{\n    using System;\n    using System.Globalization;\n    using System.Collections.Generic;\n    using Translations = System.Collections.Generic.Dictionary<string, string>;\n\n    ///<summary>Localizations from "AllText_en.json"</summary>\n    public sealed partial class AllText\n    {\n        private static readonly LocalizationProvider provider = new LocalizationProvider();\n        /// <summary>\n        /// Retrieves all translations for the specified culture.\n        /// </summary>\n        /// <param name="cultureInfo">The culture for which translations are retrieved. Defaults to the current UI culture.</param>\n        /// <returns>A dictionary containing all translations for the specified culture.</returns>\n        public static IDictionary<string, string> GetAll(CultureInfo cultureInfo = null) => provider.GetValues(cultureInfo ?? CultureInfo.CurrentUICulture);\n        /// <summary>\n        /// Retrieves a localized string for the specified key and culture.\n        /// </summary>\n        /// <param name="key">The key of the string to retrieve.</param>\n        /// <param name="cultureInfo">The culture for which the string is retrieved. Defaults to the current UI culture.</param>\n        /// <returns>The localized string if found, traversing through parent cultures. Otherwise, the key itself.</returns>\n        public static string GetString(string key, CultureInfo cultureInfo = null) => provider.GetValue(key, cultureInfo ?? CultureInfo.CurrentUICulture);\n        private class LocalizationProvider\n        {\n            delegate bool SelectorFunc<T>(Translations translations, out T arg);\n            internal string GetValue(string key, CultureInfo cultureInfo)\n            {\n                bool ValueSelector(Translations translations, out string value)\n                {\n                    if (translations.TryGetValue(key, out value))\n                        return true;\n                    value = key;\n                    return false;\n                }\n\n                return TraverseCultures<string>(cultureInfo, ValueSelector);\n            }\n\n            internal IDictionary<string, string> GetValues(CultureInfo cultureInfo)\n            {\n                bool ValueSelector(Translations translations, out Translations value)\n                {\n                    value = translations;\n                    return true;\n                }\n\n                return TraverseCultures<Translations>(cultureInfo, ValueSelector);\n            }\n\n            private T TraverseCultures<T>(CultureInfo cultureInfo, SelectorFunc<T> selectorFunc)\n            {\n                if (resources.TryGetValue(cultureInfo, out Translations translations))\n                {\n                    if (selectorFunc(translations, out T result) || cultureInfo == CultureInfo.InvariantCulture)\n                        return result;\n                }\n\n                return TraverseCultures<T>(cultureInfo.Parent, selectorFunc);\n            }\n\n            private static readonly Translations invariant = new()\n            {\n                {\n                    "Welcome",\n                    "Welcome , user"\n                },\n                {\n                    "page1::Text",\n                    "List of Persons"\n                },\n            };\n            private static readonly Translations ro = new()\n            {\n                {\n                    "Welcome",\n                    "Bine ai venit"\n                },\n                {\n                    "page1::Text",\n                    "Lista persoanelor"\n                },\n            };\n            private static readonly Dictionary<CultureInfo, Translations> resources = new()\n            {\n                {\n                    CultureInfo.InvariantCulture,\n                    invariant\n                },\n                {\n                    new CultureInfo("ro"),\n                    ro\n                },\n            };\n        }\n\n        ///<summary>Similar to: Welcome , user</summary>\n        public static string Welcome => provider.GetValue("Welcome", CultureInfo.CurrentUICulture);\n\n        ///<summary>Localizations for "page1" from "AllText_en.json"</summary>\n        public static class page1\n        {\n            ///<summary>Similar to: List of Persons</summary>\n            public static string Text => provider.GetValue("page1::Text", CultureInfo.CurrentUICulture);\n        }\n    }\n}\n'})})})}),"\n",(0,t.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,t.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(6785).A+"",children:"Download Example project kli.Localize "})})}),"\n",(0,t.jsx)(n.h3,{id:"share-klilocalize",children:"Share kli.Localize"}),"\n",(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fkli.Localize&quote=kli.Localize",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fkli.Localize&text=kli.Localize:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fkli.Localize",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fkli.Localize&title=kli.Localize",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fkli.Localize&title=kli.Localize&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fkli.Localize",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/kli.Localize",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/kli.Localize"})}),"\n",(0,t.jsx)(c.Ay,{})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);