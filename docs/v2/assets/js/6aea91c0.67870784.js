"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6277],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(i,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const o={},s="RSCG_AMS",l={unversionedId:"RSCG-Examples/RSCG_AMS_readme",id:"RSCG-Examples/RSCG_AMS_readme",title:"RSCG_AMS",description:"a Roslyn Source Code Generator for About My Software",source:"@site/docs/RSCG-Examples/RSCG_AMS_readme.md",sourceDirName:"RSCG-Examples",slug:"/RSCG-Examples/RSCG_AMS_readme",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/RSCG_AMS_readme",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"QuickConstructor",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/QuickConstructor_readme"},next:{title:"FunctionsDI",permalink:"/RSCG_Examples/v2/docs/RSCG-Examples/RSCG_FunctionsWithDI_readme"}},i={},p=[{value:"How to use",id:"how-to-use",level:2},{value:"For Console or DLL",id:"for-console-or-dll",level:3},{value:"For  Web applications",id:"for--web-applications",level:3},{value:"Adding releases on date",id:"adding-releases-on-date",level:2},{value:"Detecting that you are in a CI build",id:"detecting-that-you-are-in-a-ci-build",level:2},{value:"Modifying the subject",id:"modifying-the-subject",level:2},{value:"Diagnostics",id:"diagnostics",level:2},{value:"CI settings",id:"ci-settings",level:2},{value:"How it is built",id:"how-it-is-built",level:2},{value:"TBD:",id:"tbd",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rscg_ams"},"RSCG_AMS"),(0,a.kt)("p",null,"a Roslyn Source Code Generator for About My Software"),(0,a.kt)("p",null,"You will obtain"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://ignatandrei.github.io/RSCG_AMS/result.png",alt:"RSCG_AMS",title:"RSCG_AMS Generated"})),(0,a.kt)("p",null,"( See online at ",(0,a.kt)("a",{parentName:"p",href:"https://netcoreblockly.herokuapp.com/ams"},"https://netcoreblockly.herokuapp.com/ams")," )"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/AMS_Base/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/AMS_Base?label=AMS_Base",alt:"AMS_BASE"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/RSCG_AMS/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/RSCG_AMS?label=RSCG_AMS",alt:"RSCG_AMS"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/AMSWebAPI/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/AMSWebAPI?label=AMSWebAPI",alt:"AMSWebAPI"}))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_AMS/actions/workflows/dotnet.yml"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/ignatandrei/RSCG_AMS/actions/workflows/dotnet.yml/badge.svg",alt:"BuildAndTest"}))),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("h3",{id:"for-console-or-dll"},"For Console or DLL"),(0,a.kt)("p",null,"Add to the csproj 2023.5.21.1551"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n    <PackageReference Include="AMS_Base" Version="2023.5.21.1551" />\n    <PackageReference Include="RSCG_AMS" Version="2023.5.21.1551" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />\n  </ItemGroup>\n')),(0,a.kt)("p",null,"And access like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},' var amsAll = AboutMySoftware.AllDefinitions;\nforeach (var amsKV in amsAll)\n{\n    var ams = amsKV.Value;\n\n    Console.WriteLine($"{amsKV.Key}.{nameof(ams.AssemblyName)} : {ams.AssemblyName}");\n    Console.WriteLine($"{amsKV.Key}.{nameof(ams.DateGenerated)} : {ams.DateGenerated}");\n    Console.WriteLine($"{amsKV.Key}.{nameof(ams.CommitId)} : {ams.CommitId}");\n    Console.WriteLine($"{amsKV.Key}.{nameof(ams.RepoUrl)} : {ams.RepoUrl}");\n}\n')),(0,a.kt)("h3",{id:"for--web-applications"},"For  Web applications"),(0,a.kt)("p",null,"Add to the csproj"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'    <PackageReference Include="AMSWebAPI" Version="2023.5.21.1551" />\n    <PackageReference Include="AMS_Base" Version="2023.5.21.1551" />\n    <PackageReference Include="RSCG_AMS" Version="2023.5.21.1551" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />\n\n')),(0,a.kt)("p",null,"And in the Startup.cs put "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"//above the namespace : using AMSWebAPI;\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n    endpoints.UseAMS();\n});\n")),(0,a.kt)("p",null,"The access /ams/all ( for json)  or /ams/index ( for html)"),(0,a.kt)("h2",{id:"adding-releases-on-date"},"Adding releases on date"),(0,a.kt)("p",null,"For adding releases between dates  use the following codes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using AMS_Base;\n[assembly:VersionReleased(Name="PreviousReleases",ISODateTime ="2022-03-31",recordData = RecordData.Merges)]\n[assembly: VersionReleased(Name = "WithVersioning", ISODateTime = "2022-04-02", recordData = RecordData.Merges)]\n[assembly: AMS_Base.VersionReleased(Name = "FutureRelease", ISODateTime = "9999-04-16", recordData = AMS_Base.RecordData.Merges)]\n\n')),(0,a.kt)("h2",{id:"detecting-that-you-are-in-a-ci-build"},"Detecting that you are in a CI build"),(0,a.kt)("p",null,"Put into the .csproj"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)GeneratedX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n")),(0,a.kt)("p",null,"In the obj folder see the GeneratedX folder, then AMS folder, than AMS.AMSVersion folder, then edit the .cs file with notepad"),(0,a.kt)("p",null,"you will see something like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public class XAboutMySoftware_digits\n")),(0,a.kt)("p",null,"Please see what are the digits"),(0,a.kt)("p",null,"In your code put someething like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'bool IsInCI = new XAboutMySoftware_digits().IsInCI;\n\nbuilder.Services.AddDbContextFactory<ApplicationDBContext>(\n    options =>\n    {\n        if (IsInCI)\n        {\n            var cn = builder.Configuration.GetConnectionString("DefaultConnection");\n            options.UseSqlServer(cn);\n        }\n\n        else\n        {\n            var cn = "Data Source=Tilt.db";\n            options.UseSqlite(cn);\n        }\n    }\n     )\n   ;\n\n')),(0,a.kt)("h2",{id:"modifying-the-subject"},"Modifying the subject"),(0,a.kt)("p",null,"Add to the csproj the following"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n    <CompilerVisibleProperty Include="AMSMerge" />\n  </ItemGroup>\n  <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)GeneratedX</CompilerGeneratedFilesOutputPath>\n        <AMSMerge>AMSInterpreter.MergeAnalyzer</AMSMerge>\n    </PropertyGroup>\n  \n')),(0,a.kt)("p",null,"and add the following code to a class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public static string MergeAnalyzer(string RepoUrl,string CommitId, string Author,    DateTime ReleaseDate, string Subject)\n        {\n            try\n            {\n                /*{\n                    //modify the subject \n                    string regex = @"^Merge\\ pull\\ request\\ \\#(?<issueID>\\d+)\\ from\\ (?<branch>.+?)$";\n\n                    RegexOptions options = RegexOptions.Multiline;\n                    string input = Subject;\n\n                    MatchCollection matches = Regex.Matches(input, regex, options);\n                    foreach (Match match in matches)\n                    {\n                        return $"Issue ID: {RepoUrl}/issues/{match.Groups["issueID"].Value} branch: {match.Groups["branch"].Value}"; ; \n                    }\n                    return Subject;\n                }*/\n            }\n            catch (Exception ex)\n            {\n                return $"{CommitId} {ex.Message}";\n            }\n            \n        }\n')),(0,a.kt)("h2",{id:"diagnostics"},"Diagnostics"),(0,a.kt)("p",null,"//TODO: Add more explanations here"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'  <ItemGroup>\n    <ProjectReference Include="..\\AMS\\AMS.csproj" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />\n    <ProjectReference Include="..\\AMS_Base\\AMS_Base.csproj" />\n    <CompilerVisibleProperty Include="AMSMerge" />\n      <CompilerVisibleProperty Include="FakeWarningForDiagnostics" />\n      \n\n  </ItemGroup>\n    <PropertyGroup>\n        <FakeWarningForDiagnostics>true</FakeWarningForDiagnostics>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)GeneratedX</CompilerGeneratedFilesOutputPath>\n        <AMSMerge>AMSInterpreter.MergeAnalyzer</AMSMerge>\n    </PropertyGroup>\n\n')),(0,a.kt)("h2",{id:"ci-settings"},"CI settings"),(0,a.kt)("p",null,"For GitLab:"),(0,a.kt)("p",null,"For GitHub actions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"}," steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n")),(0,a.kt)("h2",{id:"how-it-is-built"},"How it is built"),(0,a.kt)("p",null,"The AMS_Base project / nuget is containing the definition"),(0,a.kt)("p",null,"The RSCG_AMS project / nuget generates the code for having , in CI , the C# class with the commit / Repo / date / other details."),(0,a.kt)("p",null,"The AMSWebAPI project / nuget generates the code for endpoints  :  /ams/index.html and /ams/all ( for json )"),(0,a.kt)("p",null,"See more at ",(0,a.kt)("a",{parentName:"p",href:"http://msprogrammer.serviciipeweb.ro/category/ams/"},"http://msprogrammer.serviciipeweb.ro/category/ams/")),(0,a.kt)("h2",{id:"tbd"},"TBD:"),(0,a.kt)("p",null,"More about ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ignatandrei/RSCG_AMS/issues/27"},"https://github.com/ignatandrei/RSCG_AMS/issues/27")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<AMSGitArgs>log --merges --pretty='%an|%ai|%H|%s</AMSGitArgs>\n")),(0,a.kt)("p",null,"More about Angular - to display ams - see src/Angular"),(0,a.kt)("h1",{id:"more-roslyn-source-code-generators"},"More Roslyn Source Code Generators"),(0,a.kt)("p",null,"You can find more RSCG with examples at ",(0,a.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/"},"Roslyn Source Code Generators")))}m.isMDXComponent=!0}}]);