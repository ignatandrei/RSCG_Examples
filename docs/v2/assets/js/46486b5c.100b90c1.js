"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6988],{56022:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>m,default:()=>g,frontMatter:()=>p,metadata:()=>l,toc:()=>u});var o=a(87462),r=(a(67294),a(3905)),n=a(73992),i=a(18679),s=a(68839);const p={sidebar_position:1950,title:"195 - Comparison",description:"If you want to generate comparison operators for your classes, startin with IComparable",slug:"/Comparison"},m="Comparison  by Fons Sonnemans",l={unversionedId:"RSCG-Examples/Comparison",id:"RSCG-Examples/Comparison",title:"195 - Comparison",description:"If you want to generate comparison operators for your classes, startin with IComparable",source:"@site/docs/RSCG-Examples/Comparison.md",sourceDirName:"RSCG-Examples",slug:"/Comparison",permalink:"/RSCG_Examples/v2/docs/Comparison",draft:!1,tags:[],version:"current",sidebarPosition:1950,frontMatter:{sidebar_position:1950,title:"195 - Comparison",description:"If you want to generate comparison operators for your classes, startin with IComparable",slug:"/Comparison"},sidebar:"tutorialSidebar",previous:{title:"194 - zlinq",permalink:"/RSCG_Examples/v2/docs/zlinq"},next:{title:"196 - ArgumentParsing",permalink:"/RSCG_Examples/v2/docs/ArgumentParsing"}},c={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Comparison",id:"share-comparison",level:3},{value:"In the same category (EnhancementClass) - 27 other generators",id:"in-the-same-category-enhancementclass---27-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CommonCodeGenerator",id:"commoncodegenerator",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"Enhanced.GetTypes",id:"enhancedgettypes",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"Lombok.NET",id:"lomboknet",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemberAccessor",id:"memberaccessor",level:4},{value:"MemoryPack",id:"memorypack",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"OptionToStringGenerator",id:"optiontostringgenerator",level:4},{value:"QueryStringGenerator",id:"querystringgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4},{value:"ThisClass",id:"thisclass",level:4}],h={toc:u},d="wrapper";function g(e){let{components:t,...p}=e;return(0,r.kt)(d,(0,o.Z)({},h,p,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"comparison--by-fons-sonnemans"},"Comparison  by Fons Sonnemans"),(0,r.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/ReflectionIT.ComparisonOperatorsGenerator?label=ReflectionIT.ComparisonOperatorsGenerator",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"Comparison")),(0,r.kt)("p",{parentName:"admonition"},"A Source Generator package that generates the ",(0,r.kt)("inlineCode",{parentName:"p"},">"),", ",(0,r.kt)("inlineCode",{parentName:"p"},">="),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<=")," operators for a ",(0,r.kt)("inlineCode",{parentName:"p"},"partial")," type (",(0,r.kt)("inlineCode",{parentName:"p"},"class"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"record"),") which implements",(0,r.kt)("inlineCode",{parentName:"p"},"IComparable<T>"),"."),(0,r.kt)("p",{parentName:"admonition"},"Author: Fons Sonnemans"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/"},"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator"},"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator")),(0,r.kt)("p",{parentName:"admonition"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator"},"https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"reflectionitcomparisonoperatorsgenerator"},"ReflectionIT.ComparisonOperatorsGenerator"),(0,r.kt)("p",{parentName:"admonition"},"A Source Generator package that generates the ",(0,r.kt)("inlineCode",{parentName:"p"},">"),", ",(0,r.kt)("inlineCode",{parentName:"p"},">="),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<=")," operators for a ",(0,r.kt)("inlineCode",{parentName:"p"},"partial")," type (",(0,r.kt)("inlineCode",{parentName:"p"},"class"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"record"),") which implements\n",(0,r.kt)("inlineCode",{parentName:"p"},"IComparable<T>"),"."),(0,r.kt)("p",{parentName:"admonition"},"Generating these additional operators is as simple as adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"ComparisonOperators")," attribute to your type. Make sure this type is ",(0,r.kt)("inlineCode",{parentName:"p"},"partial")," and implements ",(0,r.kt)("inlineCode",{parentName:"p"},"System.IComparable<T>")),(0,r.kt)("h1",{parentName:"admonition",id:"nuget-packages"},"NuGet packages"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Package"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ReflectionIT.ComparisonOperatorsGenerator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/ReflectionIT.ComparisonOperatorsGenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/ReflectionIT.ComparisonOperatorsGenerator",alt:"NuGet"})))))),(0,r.kt)("h2",{parentName:"admonition",id:"example"},"Example"),(0,r.kt)("p",{parentName:"admonition"},"Add the NuGet package and write the following code:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using ReflectionIT.ComparisonOperatorsGenerator.Attributes;\n\n[ComparisonOperators]\npartial class Point : IComparable<Point> {\n\n    public double X { get; }\n    public double Y { get; }\n\n    public Point(double x, double y) {\n        this.X = x;\n        this.Y = y;\n    }\n\n    public void Swap() => new Point(this.Y, this.X);\n\n    public double Dist => Math.Sqrt((X * X) + (Y * Y));\n\n    public override string ToString() => $"({X},{Y})";\n\n    public int CompareTo(Point? other) {\n        return Comparer<double?>.Default.Compare(this.Dist, other?.Dist);\n    }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the following partial class with the 4 comparison operators."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"partial class Point : System.Numerics.IComparisonOperators<Point,Point,bool> \n{\n    public static bool operator <(Point left, Point right) => left.CompareTo(right) < 0;\n        \n    public static bool operator <=(Point left, Point right) => left.CompareTo(right) <= 0;\n        \n    public static bool operator >(Point left, Point right) => left.CompareTo(right) > 0;\n        \n    public static bool operator >=(Point left, Point right) => left.CompareTo(right) >= 0;       \n}\n")),(0,r.kt)("h2",{parentName:"admonition",id:"implement-icomparisonoperatorstselftothertresult-interface"},"Implement IComparisonOperators<TSelf,TOther,TResult> interface"),(0,r.kt)("p",{parentName:"admonition"},"You can automatically implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"IComparisonOperators<TSelf,TOther,TResult>")," interface using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImplementIComparisonOperatorsInterface")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ComparisonOperators")," attribute."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using ReflectionIT.ComparisonOperatorsGenerator.Attributes;\n\n[ComparisonOperators(ImplementIComparisonOperatorsInterface = true)]\nreadonly partial record struct Time : IComparable<Time> {\n\n    public readonly int TotalMinutes; \n\n    public int Hours => TotalMinutes / 60;\n    public int Minutes => TotalMinutes % 60;\n    public Time(int totalMinutes) {\n        ArgumentOutOfRangeException.ThrowIfNegative(totalMinutes);\n        TotalMinutes = totalMinutes;\n    }\n\n    public Time(int hours, int minutes) : this(hours * 60 + minutes) {\n    }\n\n    public override string ToString() => $"{this.Hours}:{this.Minutes:00}";\n\n    public int CompareTo(Time other) => this.TotalMinutes.CompareTo(other.TotalMinutes);\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the following partial record struct with the 4 comparison operators and the ",(0,r.kt)("inlineCode",{parentName:"p"},"IComparisonOperators<TSelf,TOther,TResult>")," interface implementation"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"partial record struct Time : global::System.Numerics.IComparisonOperators<Time,Time,bool> \n{\n    public static bool operator <(Time left, Time right) => left.CompareTo(right) < 0;\n        \n    public static bool operator <=(Time left, Time right) => left.CompareTo(right) <= 0;\n        \n    public static bool operator >(Time left, Time right) => left.CompareTo(right) > 0;\n        \n    public static bool operator >=(Time left, Time right) => left.CompareTo(right) >= 0;\n        \n}\n"))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you want to generate comparison operators for your classes, startin with IComparable")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,r.kt)(n.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"Comparison")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <ItemGroup>\n\n        <PackageReference Include="ReflectionIT.ComparisonOperatorsGenerator" Version="0.1.2-preview" />\n        \n    </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Comparison")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing ComparisonDemo;\n\nConsole.WriteLine("Hello, World!");\nvar room = new Room\n{\n    Height = 10,\n    Width = 20,\n    Length = 30\n};\nvar room2 = new Room\n{\n    Height = 15,\n    Width = 25,\n    Length = 35\n};\nConsole.WriteLine($"Room Volume: {room.Volume}");\nConsole.WriteLine($"Room Comparison: {room.CompareTo(room2)}");\nConsole.WriteLine($"Room Comparison: {room < room2}");\n\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\Room.cs",label:"Room.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"Comparison")," in ",(0,r.kt)("em",{parentName:"p"},"Room.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using ReflectionIT.ComparisonOperatorsGenerator.Attributes;\n\n\nnamespace ComparisonDemo;\n//https://github.com/sonnemaf/ReflectionIT.ComparisonOperatorsGenerator\n[ComparisonOperators]\ninternal partial class Room : IComparable<Room>\n{\n\n    public int Height { get; set; }\n    public int Width { get; set; }\n    public int Length { get; set; }\n    public int Volume => Height * Width * Length;\n\n    public int CompareTo(Room? other)\n    {\n        return other is null ? 1 : Volume.CompareTo(other.Volume);\n    }\n}\n\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(n.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\obj\\GX\\ReflectionIT.ComparisonOperatorsGenerator\\ReflectionIT.ComparisonOperatorsGenerator.DisposableGenerator\\ComparisonDemo.Room.g.cs",label:"ComparisonDemo.Room.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the ReflectionIT.ComparisonOperatorsGenerator source generator\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace ComparisonDemo\n{\n    partial class Room\n    {\n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is less.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator <(Room left, Room right) => left.CompareTo(right) < 0;\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is less or equal.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator <=(Room left, Room right) => left.CompareTo(right) <= 0;\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is greater.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator >(Room left, Room right) => left.CompareTo(right) > 0;\n        \n        [global::System.CodeDom.Compiler.GeneratedCode("ReflectionIT.ComparisonOperatorsGenerator", "0.1.2.0")]\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n        /// <summary>Compares two values to determine which is greater or equal.</summary>\n        /// <param name="left">The value to compare with <paramref name="right" />.</param>\n        /// <param name="right">The value to compare with <paramref name="left" />.</param>\n        /// <returns><c>true</c> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>\n        public static bool operator >=(Room left, Room right) => left.CompareTo(right) >= 0;\n        \n    }\n    \n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Comparison\\src\\ComparisonDemo\\obj\\GX\\ReflectionIT.ComparisonOperatorsGenerator\\ReflectionIT.ComparisonOperatorsGenerator.DisposableGenerator\\ComparisonOperatorsGenerator.Attributes.g.cs",label:"ComparisonOperatorsGenerator.Attributes.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the ReflectionIT.ComparisonOperatorsGenerator source generator\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n#nullable enable\n#if COMPARISON_OPERATORS_GENERATOR_EMBED_ATTRIBUTES\n\n/// <summary>\n/// An attribute to indicate that comparison operators should be generated for the target class, struct or record\n/// <para>\n/// This only works if the <see cref="System.IComparable{T}"/> interface is implemented\n/// </para>\n/// </summary>\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]\npublic class ComparisonOperatorsAttribute : Attribute {\n\n    /// <summary>\n    /// Gets or sets a value indicating whether the <see cref="System.Numerics.IComparisonOperators{TSelf,TOther,TResult}" /> interface should be implemented.\n    /// </summary>\n    public bool ImplementIComparisonOperatorsInterface { get; set; }\n}\n#endif\n')))),(0,r.kt)("h2",{id:"useful"},"Useful"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(81331).Z},"Download Example project Comparison "))),(0,r.kt)("h3",{id:"share-comparison"},"Share Comparison"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&quote=Comparison",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&text=Comparison:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&title=Comparison",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison&title=Comparison&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FComparison",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Comparison"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Comparison")),(0,r.kt)("h3",{id:"in-the-same-category-enhancementclass---27-other-generators"},"In the same category (EnhancementClass) - 27 other generators"),(0,r.kt)("h4",{id:"apparatusaot"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,r.kt)("h4",{id:"aspectgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/AspectGenerator"},"AspectGenerator")),(0,r.kt)("h4",{id:"commoncodegenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CommonCodeGenerator"},"CommonCodeGenerator")),(0,r.kt)("h4",{id:"dudnet"},(0,r.kt)("a",{parentName:"h4",href:"/docs/DudNet"},"DudNet")),(0,r.kt)("h4",{id:"enhancedgettypes"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Enhanced.GetTypes"},"Enhanced.GetTypes")),(0,r.kt)("h4",{id:"fastgenericnew"},(0,r.kt)("a",{parentName:"h4",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,r.kt)("h4",{id:"hsusgsync"},(0,r.kt)("a",{parentName:"h4",href:"/docs/HsuSgSync"},"HsuSgSync")),(0,r.kt)("h4",{id:"immutype"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Immutype"},"Immutype")),(0,r.kt)("h4",{id:"lingaudit"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Ling.Audit"},"Ling.Audit")),(0,r.kt)("h4",{id:"lomboknet"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Lombok.NET"},"Lombok.NET")),(0,r.kt)("h4",{id:"m31fluentapi"},(0,r.kt)("a",{parentName:"h4",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,r.kt)("h4",{id:"memberaccessor"},(0,r.kt)("a",{parentName:"h4",href:"/docs/MemberAccessor"},"MemberAccessor")),(0,r.kt)("h4",{id:"memorypack"},(0,r.kt)("a",{parentName:"h4",href:"/docs/MemoryPack"},"MemoryPack")),(0,r.kt)("h4",{id:"meziantoupolyfill"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Meziantou.Polyfill"},"Meziantou.Polyfill")),(0,r.kt)("h4",{id:"microsoftextensionslogging"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,r.kt)("h4",{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"},"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator")),(0,r.kt)("h4",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,r.kt)("h4",{id:"optiontostringgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/OptionToStringGenerator"},"OptionToStringGenerator")),(0,r.kt)("h4",{id:"querystringgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/QueryStringGenerator"},"QueryStringGenerator")),(0,r.kt)("h4",{id:"rscg_decorator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,r.kt)("h4",{id:"rscg_utilitytypes"},(0,r.kt)("a",{parentName:"h4",href:"/docs/RSCG_UtilityTypes"},"RSCG_UtilityTypes")),(0,r.kt)("h4",{id:"staticreflection"},(0,r.kt)("a",{parentName:"h4",href:"/docs/StaticReflection"},"StaticReflection")),(0,r.kt)("h4",{id:"syncmethodgenerator"},(0,r.kt)("a",{parentName:"h4",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,r.kt)("h4",{id:"systemruntimeinteropservices"},(0,r.kt)("a",{parentName:"h4",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,r.kt)("h4",{id:"systemtextregularexpressions"},(0,r.kt)("a",{parentName:"h4",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")),(0,r.kt)("h4",{id:"telemetrylogging"},(0,r.kt)("a",{parentName:"h4",href:"/docs/TelemetryLogging"},"TelemetryLogging")),(0,r.kt)("h4",{id:"thisclass"},(0,r.kt)("a",{parentName:"h4",href:"/docs/ThisClass"},"ThisClass")))}g.isMDXComponent=!0},81331:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/files/Comparison-78f49e8f86a9f176004f4426ad919934.zip"}}]);