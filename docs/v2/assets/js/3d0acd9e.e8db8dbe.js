"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3620],{6536:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/files/Darp.BinaryObjects-827eac1e7d2192a9005e77afe8f83b97.zip"},11618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"RSCG-Examples/Darp.BinaryObjects","title":"176 - Darp.BinaryObjects","description":"Serialize bits of data","source":"@site/docs/RSCG-Examples/Darp.BinaryObjects.md","sourceDirName":"RSCG-Examples","slug":"/Darp.BinaryObjects","permalink":"/RSCG_Examples/v2/docs/Darp.BinaryObjects","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1760,"frontMatter":{"sidebar_position":1760,"title":"176 - Darp.BinaryObjects","description":"Serialize bits of data","slug":"/Darp.BinaryObjects"},"sidebar":"tutorialSidebar","previous":{"title":"175 - Dolly","permalink":"/RSCG_Examples/v2/docs/Dolly"},"next":{"title":"177 - Equatable.Generator","permalink":"/RSCG_Examples/v2/docs/Equatable.Generator"}}');var r=n(74848),s=n(28453),a=n(11470),l=n(19365),o=n(14252),c=n(16993);const d={sidebar_position:1760,title:"176 - Darp.BinaryObjects",description:"Serialize bits of data",slug:"/Darp.BinaryObjects"},h="Darp.BinaryObjects  by Ross Light GmbH",u={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions.",id:"a-source-generator-to-generate-tryreadwrite-littlebigendian-methods-for-structclass-definitions",level:3},{value:"Supported properties",id:"supported-properties",level:2},{value:"What is serialized?",id:"what-is-serialized",level:2},{value:"How it&#39;s supposed to work",id:"how-its-supposed-to-work",level:2},{value:"Usage",id:"usage",level:2},{value:"Development",id:"development",level:2},{value:"Code formatting",id:"code-formatting",level:3},{value:"Testing",id:"testing",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Darp.BinaryObjects",id:"share-darpbinaryobjects",level:3},...c.RM];function b(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",del:"del",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"darpbinaryobjects--by-ross-light-gmbh",children:"Darp.BinaryObjects  by Ross Light GmbH"})}),"\n",(0,r.jsx)(o.A,{toc:p}),"\n",(0,r.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/Darp.BinaryObjects/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Darp.BinaryObjects?label=Darp.BinaryObjects",alt:"Nuget"})}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/rosslight/Darp.BinaryObjects",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/rosslight/Darp.BinaryObjects?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/github/stars/rosslight/Darp.BinaryObjects?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["Name: ",(0,r.jsx)(t.strong,{children:"Darp.BinaryObjects"})]}),(0,r.jsx)(t.p,{children:"A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions for binary serialization."}),(0,r.jsx)(t.p,{children:"Author: Ross Light GmbH"}),(0,r.jsxs)(t.p,{children:["NuGet:\n",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/Darp.BinaryObjects/",children:"https://www.nuget.org/packages/Darp.BinaryObjects/"})})]}),(0,r.jsxs)(t.p,{children:["You can find more details at ",(0,r.jsx)(t.a,{href:"https://github.com/rosslight/Darp.BinaryObjects",children:"https://github.com/rosslight/Darp.BinaryObjects"})]}),(0,r.jsxs)(t.p,{children:["Source: ",(0,r.jsx)(t.a,{href:"https://github.com/rosslight/Darp.BinaryObjects",children:"https://github.com/rosslight/Darp.BinaryObjects"})]})]}),"\n",(0,r.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsxs)("div",{align:"center",children:[(0,r.jsx)(t.h1,{id:"darpbinaryobjects",children:"Darp.BinaryObjects"}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/Darp.BinaryObjects",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/v/Darp.BinaryObjects.svg",alt:"NuGet"})}),"\n",(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/Darp.BinaryObjects",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Darp.BinaryObjects",alt:"Downloads"})})]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.img,{src:"https://img.shields.io/badge/dotnet-net8.0%20%7C%20net9.0-blue",alt:"Dotnet Version"}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/badge/c%23-11-blue",alt:"Language Version"})]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://github.com/rosslight/Darp.BinaryObjects/actions/workflows/test_and_publish.yml",children:(0,r.jsx)(t.img,{src:"https://github.com/rosslight/Darp.BinaryObjects/actions/workflows/test_and_publish.yml/badge.svg",alt:"Tests"})}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/github/license/rosslight/Darp.BinaryObjects",alt:"License"})]}),(0,r.jsx)(t.h3,{id:"a-source-generator-to-generate-tryreadwrite-littlebigendian-methods-for-structclass-definitions",children:"A source generator to generate TryRead/Write Little/BigEndian methods for struct/class definitions."}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["[!IMPORTANT]",(0,r.jsx)(t.br,{}),"\n","This package is under heavy development. Anything is subject to change."]}),"\n"]})]}),(0,r.jsx)(t.p,{children:"You should use the source generation when you want:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Serialization to a buffer of bytes"}),"\n",(0,r.jsx)(t.li,{children:"Deserialization from a buffer already completely received"}),"\n",(0,r.jsx)(t.li,{children:"Endianness during serialization"}),"\n",(0,r.jsx)(t.li,{children:"Common interfaces for serialization are required which allow to implement more complex scenarios by hand without the generator"}),"\n",(0,r.jsx)(t.li,{children:"Usage of something like BinaryPrimitives but for more complex types"}),"\n",(0,r.jsx)(t.li,{children:"Can work with a minimum c# LanguageVersion of 11 and net8.0 / net9.0"}),"\n"]}),(0,r.jsx)(t.p,{children:"If these requirements do not meet your expectations, check out those other wonderful projects"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Several binary serializers. e.g. ",(0,r.jsx)(t.a,{href:"https://github.com/Cysharp/MemoryPack",children:"MemoryPack"}),", ",(0,r.jsx)(t.a,{href:"https://github.com/Sergio0694/BinaryPack",children:"BinaryPack"}),", ...\nwhich are great if direct binary serialization is not needed"]}),"\n",(0,r.jsxs)(t.li,{children:["Serialization libraries relying on reflection. e.g. ",(0,r.jsx)(t.a,{href:"https://github.com/adam-dot-cohen/HyperSerializer",children:"HyperSerializer"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/RudolfKurkaMs/StructPacker",children:"StructPacker"})," - not supporting allocation less packing/unpacking"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/jefffhaynes/BinarySerializer?tab=readme-ov-file",children:"BinarySerializer"})," - Allows for binary serialization with a way larger feature set but more difficult to understand and relying on reflection"]}),"\n"]}),(0,r.jsx)(t.h2,{id:"supported-properties",children:"Supported properties"}),(0,r.jsx)(t.p,{children:"Here is a list of the property types currently supported by the library:"}),(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","Unmanaged types: ",(0,r.jsx)(t.code,{children:"bool"}),", ",(0,r.jsx)(t.code,{children:"sbyte"}),", ",(0,r.jsx)(t.code,{children:"byte"}),", ",(0,r.jsx)(t.code,{children:"short"}),", ",(0,r.jsx)(t.code,{children:"ushort"}),", ",(0,r.jsx)(t.code,{children:"int"}),", ",(0,r.jsx)(t.code,{children:"uint"}),", ",(0,r.jsx)(t.code,{children:"long"}),", ",(0,r.jsx)(t.code,{children:"ulong"}),", ",(0,r.jsx)(t.code,{children:"char"}),", ",(0,r.jsx)(t.code,{children:"float"}),", ",(0,r.jsx)(t.code,{children:"double"})]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","BinaryObjects implementing ",(0,r.jsx)(t.code,{children:"IWritable"})," or ",(0,r.jsx)(t.code,{children:"IReadable"})]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Blittable types"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","Enums"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Other .NET types: ",(0,r.jsx)(t.code,{children:"BitArray"})]}),"\n"]}),(0,r.jsx)(t.p,{children:"For all of these types, it should be possible to define as array types:"}),(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","Memory abstractions: ",(0,r.jsx)(t.code,{children:"ReadOnlyMemory<T>"})]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","Arrays: ",(0,r.jsx)(t.code,{children:"T[]"})]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","Lists: ",(0,r.jsx)(t.code,{children:"List<T>"})]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ","Collections: ",(0,r.jsx)(t.code,{children:"IEnumerable<T>"}),", ",(0,r.jsx)(t.code,{children:"IReadOnlyCollection<T>"}),", ",(0,r.jsx)(t.code,{children:"ICollection<T>"}),", ",(0,r.jsx)(t.code,{children:"IReadOnlyList<T>"}),", ",(0,r.jsx)(t.code,{children:"IList<T>"})]}),"\n"]}),(0,r.jsx)(t.p,{children:"To control these types there are attributes"}),(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(t.code,{children:"BinaryIgnore"}),": Ignore some members"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,r.jsx)(t.code,{children:"BinaryElementCount"}),": Sets the number of elements in an array"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.code,{children:"BinaryReadRemaining"}),": Reads the remaining into an array"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.code,{children:"BinaryLength"}),": Sets the length of a member"]}),"\n"]}),(0,r.jsx)(t.p,{children:"Unplanned:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Unmanaged types have no clearly defined length / endianness: ",(0,r.jsx)(t.del,{children:(0,r.jsx)(t.code,{children:"nint"})}),", ",(0,r.jsx)(t.del,{children:(0,r.jsx)(t.code,{children:"nuint"})}),", ",(0,r.jsx)(t.del,{children:(0,r.jsx)(t.code,{children:"decimal"})})]}),"\n",(0,r.jsxs)(t.li,{children:["Multidimensional arrays (e.g. ",(0,r.jsx)(t.code,{children:"T[,]"}),", ",(0,r.jsx)(t.code,{children:"T[,,]"}),", etc.)"]}),"\n",(0,r.jsxs)(t.li,{children:["Jagged arrays (e.g. ",(0,r.jsx)(t.code,{children:"T[][]"}),", etc.)"]}),"\n",(0,r.jsxs)(t.li,{children:["Dictionaries: ",(0,r.jsx)(t.code,{children:"Dictionary<TKey, TValue>"}),", ",(0,r.jsx)(t.code,{children:"IDictionary<TKey, TValue>"})," and ",(0,r.jsx)(t.code,{children:"IReadOnlyDictionary<TKey, TValue>"})]}),"\n",(0,r.jsxs)(t.li,{children:["Nullable value types: ",(0,r.jsx)(t.code,{children:"Nullable<T>"})," or ",(0,r.jsx)(t.code,{children:"T?"})]}),"\n"]}),(0,r.jsx)(t.h2,{id:"what-is-serialized",children:"What is serialized?"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Any ",(0,r.jsx)(t.code,{children:"real"}),", user-defined member in a ",(0,r.jsx)(t.code,{children:"class"})," or ",(0,r.jsx)(t.code,{children:"struct"})," declaration"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Any ",(0,r.jsx)(t.code,{children:"field"})," or ",(0,r.jsx)(t.code,{children:"auto property"})," which is settable or has a parameter with matching type and name in the constructor"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["If there are multiple constructors defined the one with a ",(0,r.jsx)(t.code,{children:"BinaryConstructorAttribute"})," is being used"]}),"\n"]}),"\n"]}),(0,r.jsx)(t.p,{children:"There are warnings if:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The constructor cannot be resolved"}),"\n",(0,r.jsxs)(t.li,{children:["There are multiple constructors but none with a ",(0,r.jsx)(t.code,{children:"BinaryConstructorAttribute"})]}),"\n",(0,r.jsx)(t.li,{children:"A member is readonly and does not have a matching constructor argument or is explicitly ignored"}),"\n"]}),(0,r.jsx)(t.h2,{id:"how-its-supposed-to-work",children:"How it's supposed to work"}),(0,r.jsx)(t.p,{children:"Let's pretend we have a series of bytes:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"01020003040506\n\nA: 01\nB: 0200\nData: 03040506\n"})}),(0,r.jsxs)(t.p,{children:["We now want to read an object from these bytes similar to how we would do with ",(0,r.jsx)(t.code,{children:"BinaryPrimitives"}),":"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"[BinaryObject]\npublic readonly record struct SomeTestStruct(byte A, ushort B, ReadOnlyMemory<byte> Data);\n"})}),(0,r.jsxs)(t.p,{children:["Normally, you would have to write serialization methods for yourself. By adding the ",(0,r.jsx)(t.code,{children:"BinaryObjectAttribute"}),", this is done automatically by the source generator."]}),(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'// Define your object\n[BinaryObject]\npartial record struct YourStruct(ushort A, byte B);\n\n// Read the struct from the buffer using either little or big endian format\nvar buffer = Convert.FromHexString("AABBCC");\nvar success = YourStruct.TryReadLittleEndian(source: buffer, out var value);\nvar success2 = YourStruct.TryReadBigEndian(source: buffer, out var value2, out int bytesRead);\n\n// Get the actual size of the struct\nvar size = value.GetByteCount();\n\n// Write the values back to a buffer\nvar writeBuffer = new byte[size];\nvar success3 = value.TryWriteLittleEndian(destination: writeBuffer);\nvar success4 = value2.TryWriteLittleEndian(destination: writeBuffer, out int bytesWritten);\n'})}),(0,r.jsx)(t.p,{children:"The code generated by the struct will attempt to maximize readability by still maintaining performance and as little allocations as possible."}),(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Generated code"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'// <auto-generated/>\n#nullable enable\n\nusing BinaryHelpers = global::Darp.BinaryObjects.BinaryHelpers;\nusing NotNullWhenAttribute = global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute;\n\nnamespace Your.Namespace;\n\n/// <remarks> <list type="table">\n/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>\n/// <item> <term><see cref="A"/></term> <description>2</description> </item>\n/// <item> <term><see cref="B"/></term> <description>1</description> </item>\n/// <item> <term> --- </term> <description>3</description> </item>\n/// </list> </remarks>\npublic partial record struct YourStruct : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable<YourStruct>\n{\n    /// <inheritdoc />\n    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n    public int GetByteCount() => 3;\n\n    /// <inheritdoc />\n    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);\n    /// <inheritdoc />\n    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)\n    {\n        bytesWritten = 0;\n\n        if (destination.Length < 3)\n            return false;\n        BinaryHelpers.WriteUInt16LittleEndian(destination[0..], this.A);\n        BinaryHelpers.WriteUInt8(destination[2..], this.B);\n        bytesWritten += 3;\n\n        return true;\n    }\n    /// <inheritdoc />\n    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);\n    /// <inheritdoc />\n    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)\n    {\n        bytesWritten = 0;\n\n        if (destination.Length < 3)\n            return false;\n        BinaryHelpers.WriteUInt16BigEndian(destination[0..], this.A);\n        BinaryHelpers.WriteUInt8(destination[2..], this.B);\n        bytesWritten += 3;\n\n        return true;\n    }\n\n    /// <inheritdoc />\n    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value) => TryReadLittleEndian(source, out value, out _);\n    /// <inheritdoc />\n    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value, out int bytesRead)\n    {\n        bytesRead = 0;\n        value = default;\n\n        if (source.Length < 3)\n            return false;\n        var ___readA = BinaryHelpers.ReadUInt16LittleEndian(source[0..]);\n        var ___readB = BinaryHelpers.ReadUInt8(source[2..]);\n        bytesRead += 3;\n\n        value = new YourStruct(___readA, ___readB);\n        return true;\n    }\n    /// <inheritdoc />\n    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value) => TryReadBigEndian(source, out value, out _);\n    /// <inheritdoc />\n    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, out YourStruct value, out int bytesRead)\n    {\n        bytesRead = 0;\n        value = default;\n\n        if (source.Length < 3)\n            return false;\n        var ___readA = BinaryHelpers.ReadUInt16BigEndian(source[0..]);\n        var ___readB = BinaryHelpers.ReadUInt8(source[2..]);\n        bytesRead += 3;\n\n        value = new YourStruct(___readA, ___readB);\n        return true;\n    }\n}\n'})})]}),(0,r.jsx)(t.h2,{id:"development",children:"Development"}),(0,r.jsx)(t.p,{children:"After cloning the repository, you will find the following project structure:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"src/Darp.BinaryObjects"})," contains public APIs and Attributes"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"src/Darp.BinaryObjects.Generator"})," contains the actual source generator"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"test/Darp.BinaryObjects.Tests"})," contains unit tests ensuring the generated files actually build and read/write as expected"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"test/Darp.BInaryObjects.Generator.Tests"})," contains snapshot tests to ensure the source generator generates valid files"]}),"\n"]}),(0,r.jsx)(t.h3,{id:"code-formatting",children:"Code formatting"}),(0,r.jsxs)(t.p,{children:["This repository uses ",(0,r.jsx)(t.a,{href:"https://csharpier.com/",children:"CSharpier"})," (inspired by prettier) for code formatting.\nCSharpier should be installed automatically when building the solution as a local dotnet tool."]}),(0,r.jsx)(t.p,{children:"To run it, execute"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"dotnet csharpier .\n"})}),(0,r.jsxs)(t.p,{children:["If you want to format you code on save, check out available ",(0,r.jsx)(t.a,{href:"https://csharpier.com/docs/Editors",children:"Editor integration"})," for your IDE."]}),(0,r.jsx)(t.h3,{id:"testing",children:"Testing"}),(0,r.jsxs)(t.p,{children:["Snapshot tests are done using ",(0,r.jsx)(t.a,{href:"https://github.com/VerifyTests/Verify/",children:"Verify"}),". If you want to optimize running these tests in your local IDE, you might adjust some settings.\nPlease, check your local configuration in the ",(0,r.jsx)(t.a,{href:"https://github.com/VerifyTests/Verify/blob/main/docs/wiz/readme.md",children:"VerifyDocs"})]})]}),"\n",(0,r.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"Serialize bits of data"})}),"\n",(0,r.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(t.strong,{children:"Darp.BinaryObjects"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {18}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  \n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n  \n\t<ItemGroup>\n\t  <PackageReference Include="Darp.BinaryObjects" Version="0.4.0" />\n\t</ItemGroup>\n\n</Project>\n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Darp.BinaryObjects\\src\\BitsDemo\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"Darp.BinaryObjects"})," in ",(0,r.jsx)(t.em,{children:"Program.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using BitsDemo;\nusing Darp.BinaryObjects;\n\nvar z = new zlib_header(0x78, 0x9C);\n\nvar size = z.GetByteCount();\n\n// Write the values back to a buffer\nvar writeBuffer = new byte[size];\nif(z.TryWriteLittleEndian(writeBuffer))\n{\n    Console.WriteLine("writing to buffer" );\n\tforeach (var item in writeBuffer)\n\t{\n\t\tConsole.Write(item+" ");\n\t}\n}\n\n'})})]}),(0,r.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Darp.BinaryObjects\\src\\BitsDemo\\BitStruct.cs",label:"BitStruct.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"Darp.BinaryObjects"})," in ",(0,r.jsx)(t.em,{children:"BitStruct.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Darp.BinaryObjects;\nusing System.IO.Compression;\n\nnamespace BitsDemo;\n\n[BinaryObject]\npartial record zlib_header(byte cmf, byte flg)\n{\n    \n}\n"})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Darp.BinaryObjects\\src\\BitsDemo\\obj\\GX\\Darp.BinaryObjects.Generator\\Darp.BinaryObjects.Generator.BinaryObjectsGenerator\\BinaryObjectsGenerator.g.cs",label:"BinaryObjectsGenerator.g.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#nullable enable\n\nnamespace BitsDemo\n{\n    /// <remarks> <list type="table">\n    /// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>\n    /// <item> <term><see cref="cmf"/></term> <description>1</description> </item>\n    /// <item> <term><see cref="flg"/></term> <description>1</description> </item>\n    /// <item> <term> --- </term> <description>2</description> </item>\n    /// </list> </remarks>\n    partial record zlib_header : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable<zlib_header>\n    {\n        /// <inheritdoc />\n        [global::System.Diagnostics.Contracts.Pure]\n        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public int GetByteCount() => 2;\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)\n        {\n            bytesWritten = 0;\n\n            if (destination.Length < 2)\n                return false;\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..], this.cmf);\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..], this.flg);\n            bytesWritten += 2;\n\n            return true;\n        }\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)\n        {\n            bytesWritten = 0;\n\n            if (destination.Length < 2)\n                return false;\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..], this.cmf);\n            global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..], this.flg);\n            bytesWritten += 2;\n\n            return true;\n        }\n\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value) => TryReadLittleEndian(source, out value, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value, out int bytesRead)\n        {\n            bytesRead = 0;\n            value = default;\n\n            if (source.Length < 2)\n                return false;\n            var ___readcmf = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]);\n            var ___readflg = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]);\n            bytesRead += 2;\n\n            value = new zlib_header(___readcmf, ___readflg);\n            return true;\n        }\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value) => TryReadBigEndian(source, out value, out _);\n        /// <inheritdoc />\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n        public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out zlib_header? value, out int bytesRead)\n        {\n            bytesRead = 0;\n            value = default;\n\n            if (source.Length < 2)\n                return false;\n            var ___readcmf = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]);\n            var ___readflg = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]);\n            bytesRead += 2;\n\n            value = new zlib_header(___readcmf, ___readflg);\n            return true;\n        }\n    }\n}\n\nnamespace Darp.BinaryObjects.Generated\n{\n    using Darp.BinaryObjects;\n    using System;\n    using System.Buffers.Binary;\n    using System.CodeDom.Compiler;\n    using System.Collections.Generic;\n    using System.Runtime.CompilerServices;\n    using System.Runtime.InteropServices;\n\n    /// <summary>Helper methods used by generated BinaryObjects.</summary>\n    [GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "0.4.0.0")]\n    file static class Utilities\n    {\n        /// <summary> Writes a <c>byte</c> to the destination </summary>\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void WriteUInt8(Span<byte> destination, byte value)\n        {\n            destination[0] = value;\n        }\n        /// <summary> Reads a <c>byte</c> from the given source </summary>\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte ReadUInt8(ReadOnlySpan<byte> source)\n        {\n            return source[0];\n        }\n    }\n}\n\n'})})})}),"\n",(0,r.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(6536).A+"",children:"Download Example project Darp.BinaryObjects "})})}),"\n",(0,r.jsx)(t.h3,{id:"share-darpbinaryobjects",children:"Share Darp.BinaryObjects"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&quote=Darp.BinaryObjects",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&text=Darp.BinaryObjects:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&title=Darp.BinaryObjects",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects&title=Darp.BinaryObjects&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDarp.BinaryObjects",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Darp.BinaryObjects",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Darp.BinaryObjects"})}),"\n",(0,r.jsx)(t.p,{children:"aaa"}),"\n",(0,r.jsx)(c.Ay,{})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}},16993:(e,t,n)=>{n.d(t,{Ay:()=>l,RM:()=>s});var i=n(74848),r=n(28453);const s=[{value:"Category &quot;Bitwise&quot; has the following generators:",id:"category-bitwise-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const t={a:"a",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"category-bitwise-has-the-following-generators",children:'Category "Bitwise" has the following generators:'}),"\n",(0,i.jsxs)(t.p,{children:["1 ",(0,i.jsx)(t.a,{href:"/docs/BitsKit",children:"BitsKit"})]}),"\n",(0,i.jsxs)(t.p,{children:["2 ",(0,i.jsx)(t.a,{href:"/docs/Darp.BinaryObjects",children:"Darp.BinaryObjects"})]}),"\n",(0,i.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/docs/Categories/Bitwise",children:"Bitwise"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);