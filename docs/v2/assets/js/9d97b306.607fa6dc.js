"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[8040],{2104:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var r=a(7462),n=(a(7294),a(4137)),o=a(3992),i=a(425),s=a(8839);const l={sidebar_position:410,title:"41 - GeneratorEquals",description:"Generating Equals from properties",slug:"/GeneratorEquals"},m="GeneratorEquals  by Diego Frato",u={unversionedId:"RSCG-Examples/GeneratorEquals",id:"RSCG-Examples/GeneratorEquals",title:"41 - GeneratorEquals",description:"Generating Equals from properties",source:"@site/docs/RSCG-Examples/GeneratorEquals.md",sourceDirName:"RSCG-Examples",slug:"/GeneratorEquals",permalink:"/RSCG_Examples/v2/docs/GeneratorEquals",draft:!1,tags:[],version:"current",sidebarPosition:410,frontMatter:{sidebar_position:410,title:"41 - GeneratorEquals",description:"Generating Equals from properties",slug:"/GeneratorEquals"},sidebar:"tutorialSidebar",previous:{title:"40 - FastGenericNew",permalink:"/RSCG_Examples/v2/docs/FastGenericNew"},next:{title:"42 - Immutype",permalink:"/RSCG_Examples/v2/docs/Immutype"}},p={},d=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share GeneratorEquals",id:"share-generatorequals",level:3},{value:"In the same category (EnhancementClass)",id:"in-the-same-category-enhancementclass",level:2},{value:"ApparatusAOT",id:"apparatusaot",level:3},{value:"BuilderGenerator",id:"buildergenerator",level:3},{value:"EnumClass",id:"enumclass",level:3},{value:"FastGenericNew",id:"fastgenericnew",level:3},{value:"Immutype",id:"immutype",level:3},{value:"Lombok.NET",id:"lomboknet",level:3},{value:"M31.FluentAPI",id:"m31fluentapi",level:3},{value:"MemoryPack",id:"memorypack",level:3},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:3},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:3},{value:"MorrisMoxy",id:"morrismoxy",level:3},{value:"NetEscapades.EnumGenerators",id:"netescapadesenumgenerators",level:3},{value:"Roozie.AutoInterface",id:"roozieautointerface",level:3},{value:"RSCG_Decorator",id:"rscg_decorator",level:3},{value:"RSCG_Static",id:"rscg_static",level:3},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:3},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:3},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:3}],c={toc:d},h="wrapper";function g(e){let{components:t,...l}=e;return(0,n.kt)(h,(0,r.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"generatorequals--by-diego-frato"},"GeneratorEquals  by Diego Frato"),(0,n.kt)(s.Z,{toc:d,mdxType:"TOCInline"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Generator.Equals/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Generator.Equals?label=Generator.Equals",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/diegofrata/Generator.Equals"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/diegofrata/Generator.Equals?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/diegofrata/Generator.Equals?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"GeneratorEquals")),(0,n.kt)("p",{parentName:"admonition"},"A source code generator for automatically implementing IEquatable using only attributes."),(0,n.kt)("p",{parentName:"admonition"},"Author: Diego Frato"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Generator.Equals/"},"https://www.nuget.org/packages/Generator.Equals/")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/diegofrata/Generator.Equals"},"https://github.com/diegofrata/Generator.Equals")),(0,n.kt)("p",{parentName:"admonition"},"Source : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/diegofrata/Generator.Equals"},"https://github.com/diegofrata/Generator.Equals"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Generator.Equals/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Generator.Equals",alt:"Nuget"}))),(0,n.kt)("h1",{parentName:"admonition",id:"generatorequals"},"Generator.Equals"),(0,n.kt)("p",{parentName:"admonition"},"A source code generator for automatically implementing IEquatable","<","T",">"," using only attributes."),(0,n.kt)("hr",{parentName:"admonition"}),(0,n.kt)("h2",{parentName:"admonition",id:"requirements"},"Requirements"),(0,n.kt)("p",{parentName:"admonition"},"In order to use this library, you must:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Use a target framework that supports .NET Standard >= 2.0"),(0,n.kt)("li",{parentName:"ul"},"Set your project's C# ",(0,n.kt)("inlineCode",{parentName:"li"},"LangVersion")," property to 9.0 or higher.")),(0,n.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,n.kt)("p",{parentName:"admonition"},"Simply add the package ",(0,n.kt)("inlineCode",{parentName:"p"},"Generator.Equals")," to your project. Keep reading to learn how to add the attributes to your types."),(0,n.kt)("h2",{parentName:"admonition",id:"migrating-from-version-2"},"Migrating from version 2"),(0,n.kt)("p",{parentName:"admonition"},"Migrating to version 3 is very straightforward."),(0,n.kt)("ol",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ol"},"Ensure projects are targeting C# 9.0 or latter using the MSBuild property ",(0,n.kt)("inlineCode",{parentName:"li"},"LangVersion"),"."),(0,n.kt)("li",{parentName:"ol"},"Be aware that ",(0,n.kt)("inlineCode",{parentName:"li"},"IEquatable<T>")," for classes is now implemented explicitly in order to support deep equality. As a result, the method ",(0,n.kt)("inlineCode",{parentName:"li"},"Equals(T)")," method is no longer marked as public. Most code should still work, requiring only to be recompiled as the ABI has changed.")),(0,n.kt)("p",{parentName:"admonition"},"If you have an existing project using ",(0,n.kt)("inlineCode",{parentName:"p"},"Generator.Equals")," and don't need any of the new features, you can still use version 2.x. The differences are minimal between both major versions."),(0,n.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,n.kt)("p",{parentName:"admonition"},"The below sample shows how to use Generator.Equals to override the default equality implementation for a C# record, enhancing it with the ability to determine the equality between the array contents of the record."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},'using Generator.Equals;\n\n[Equatable]\npartial record MyRecord(\n    [property: OrderedEquality] string[] Fruits\n);\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var record1 = new MyRecord(new[] {"banana", "apple"});\n        var record2 = new MyRecord(new[] {"banana", "apple"});\n\n        Console.WriteLine(record1 == record2);\n    }\n}\n')),(0,n.kt)("p",{parentName:"admonition"},"Need more than records? Generator.Equals supports properties (and fields) also across classes, structs and record structs."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"using Generator.Equals;\n\n[Equatable]\npartial class MyClass\n{\n    [DefaultEquality] \n    private int _secretNumber = 42;\n\n    [OrderedEquality] \n    public string[] Fruits { get; set; }\n}\n\n[Equatable]\npartial struct MyStruct\n{\n    [OrderedEquality] \n    public string[] Fruits { get; set; }\n}\n\n[Equatable]\npartial record struct MyRecordStruct(\n    [property: OrderedEquality] string[] Fruits\n);\n")),(0,n.kt)("h2",{parentName:"admonition",id:"supported-comparers"},"Supported Comparers"),(0,n.kt)("p",{parentName:"admonition"},"Below is a list of all supported comparers. Would you like something else added? Let me know by raising an issue or sending a PR!"),(0,n.kt)("h3",{parentName:"admonition",id:"default"},"Default"),(0,n.kt)("p",{parentName:"admonition"},"This is the comparer that's used when a property has no attributes indicating otherwise. The generated code will use\n",(0,n.kt)("inlineCode",{parentName:"p"},"EqualityComparer<T>.Default")," for both equals and hashing operation."),(0,n.kt)("blockquote",{parentName:"admonition"},(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("em",{parentName:"p"},"Fields are not used in comparison unless explicitly annotated. To enable the default comparison for a field, annotate it with the ",(0,n.kt)("inlineCode",{parentName:"em"},"DefaultEquality")," attribute."))),(0,n.kt)("h3",{parentName:"admonition",id:"ignoreequality"},"IgnoreEquality"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"[IgnoreEquality] \npublic string Name { get; set; }\n")),(0,n.kt)("p",{parentName:"admonition"},"As the name implies, the property is ignored during Equals and GetHashCode calls!"),(0,n.kt)("h3",{parentName:"admonition",id:"orderedequality"},"OrderedEquality"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"[OrderedEquality] \npublic string[] Fruits { get; set; } // Fruits have to be in the same order for the array to be considered equal.\n")),(0,n.kt)("p",{parentName:"admonition"},"This equality comparer will compare properties as a sequence instead of a reference. This works just like ",(0,n.kt)("inlineCode",{parentName:"p"},"Enumerable.SequenceEqual"),", which assumes both lists are of the same size and same sort."),(0,n.kt)("p",{parentName:"admonition"},"Bear in mind that the property has to implement IEnumerable and the that the items themselves implement equality (you can use Generator.Equals in the items too!)."),(0,n.kt)("h3",{parentName:"admonition",id:"unorderedequality"},"UnorderedEquality"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"[UnorderedEquality] \npublic string[] Fruits { get; set; } // Does not care about the order of the fruits!\n\n[UnorderedEquality] \npublic IDictionary<string, object> Properties { get; set; } // Works with dictionaries too!\n")),(0,n.kt)("p",{parentName:"admonition"},"This equality comparer will compare properties as an unordered sequence instead of a reference. This works just like ",(0,n.kt)("inlineCode",{parentName:"p"},"Enumerable.SequenceEqual"),", but it does not care about the order as long as the all values (including the repetitions) are present."),(0,n.kt)("p",{parentName:"admonition"},"As with OrderedEquality, bear in mind that the property (or key and values if using a dictionary) has to implement IEnumerable and the that the items themselves implement equality (you can use Generator.Equals in the items too!)."),(0,n.kt)("h3",{parentName:"admonition",id:"setequality"},"SetEquality"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"[SetEquality] \npublic HashSet<string> Fruits { get; set; } // Fruits can be in any order and it can be repeated\n")),(0,n.kt)("p",{parentName:"admonition"},"This equality comparer will do a set comparison, using ",(0,n.kt)("inlineCode",{parentName:"p"},"SetEquals")," whenever the underlying collection implements ",(0,n.kt)("inlineCode",{parentName:"p"},"ISet<T>"),", otherwise falling back to  manually comparing both collections, which can be expensive for large collections."),(0,n.kt)("p",{parentName:"admonition"},"Hashing always returns 0 for this type of equality,"),(0,n.kt)("h3",{parentName:"admonition",id:"referenceequality"},"ReferenceEquality"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"[ReferenceEquality] \npublic string Name { get; set; } // Will only return true if strings are the same reference (eg. when used with string.Intern)\n")),(0,n.kt)("p",{parentName:"admonition"},"This will ignore whatever equality is implemented for a particular object and compare references instead."),(0,n.kt)("h3",{parentName:"admonition",id:"customequality"},"CustomEquality"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-c#"},"class LengthEqualityComparer : IEqualityComparer<string>\n{\n    public static readonly LengthEqualityComparer Default = new();\n\n    public bool Equals(string? x, string? y) => x?.Length == y?.Length;\n\n    public int GetHashCode(string obj) => obj.Length.GetHashCode();\n}\n\nclass NameEqualityComparer \n{\n    public static readonly IEqualityComparer<string> Default = new SomeCustomComparer();\n}\n\n\n[CustomEquality(typeof(LengthEqualityComparer))] \npublic string Name1 { get; set; } // Will use LengthEqualityComparer to compare the values of Name1.\n\n[CustomEquality(typeof(NameEqualityComparer))] \npublic string Name2 { get; set; } // Will use NameEqualityComparer.Default to compare values of Name2.\n\n[CustomEquality(typeof(StringComparer), nameof(StringComparer.OrdinalIgnoreCase))] \npublic string Name2 { get; set; } // Will use StringComparer.OrdinalIgnoreCase to compare values of Name2.\n")),(0,n.kt)("p",{parentName:"admonition"},"This attribute allows you to specify a custom comparer for a particular property. For it to work, the type passed as an\nargument to CustomEqualityAttribute should fulfill AT LEAST one of the following:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Have a static field/property named Default returning a valid IEqualityComparer instance for the target type;"),(0,n.kt)("li",{parentName:"ul"},"Have a static field/property with the same name passed to the CustomComparerAttribute returning a valid IEqualityComparer instance for the target type;"),(0,n.kt)("li",{parentName:"ul"},"Implement IEqualityComparer and expose a parameterless constructor.")),(0,n.kt)("h2",{parentName:"admonition",id:"advanced-options"},"Advanced Options"),(0,n.kt)("h3",{parentName:"admonition",id:"explicit-mode"},"Explicit Mode"),(0,n.kt)("p",{parentName:"admonition"},"The generator allows you to explicitly specify which properties are used to generate the ",(0,n.kt)("inlineCode",{parentName:"p"},"IEquatable"),".  "),(0,n.kt)("p",{parentName:"admonition"},"To do this, set the ",(0,n.kt)("inlineCode",{parentName:"p"},"Explicit")," property of ",(0,n.kt)("inlineCode",{parentName:"p"},"EquatableAttribute")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," and specify the required properties using ",(0,n.kt)("inlineCode",{parentName:"p"},"DefaultEqualityAttribute")," or other attributes."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-cs"},'using Generator.Equals;\n\n[Equatable(Explicit = true)]\npartial class MyClass\n{\n    // Only this property will be used for equality!\n    [DefaultEquality] \n    public string Name { get; set; } = "Konstantin"; \n    \n    public string Description { get; set; } = "";\n}\n')),(0,n.kt)("h3",{parentName:"admonition",id:"ignore-inherited-members"},"Ignore Inherited Members"),(0,n.kt)("p",{parentName:"admonition"},"You can also choose to ignore members from parent classes/record by setting ",(0,n.kt)("inlineCode",{parentName:"p"},"IgnoreInheritedMembers")," to true."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"using Generator.Equals;\n\nclass Person \n{\n    public string Name { get; set; }\n}\n\n[Equatable(IgnoreInheritedMembers = true)]\npartial class Doctor : Person\n{\n    // Only members in the Doctor class will be used for comparison.\n    public string Id { get; set; }\n    public string Specialization { get; set; }\n}\n"))),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Generating Equals from properties")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"GeneratorEquals")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Generator.Equals" Version="3.0.0" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,n.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GeneratorEquals\\src\\GeneratorEqualsDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"GeneratorEquals")," in ",(0,n.kt)("em",{parentName:"p"},"Program.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing GeneratorEqualsDemo;\nvar p1 = new Person()\n{\n    ID = 1,\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nvar p2= new Person()\n{\n    ID = 2,\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nConsole.WriteLine(p1==p2);\n\n'))),(0,n.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GeneratorEquals\\src\\GeneratorEqualsDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"GeneratorEquals")," in ",(0,n.kt)("em",{parentName:"p"},"Person.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Generator.Equals;\n\nnamespace GeneratorEqualsDemo;\n\n[Equatable]\npartial class Person\n{\n    [IgnoreEquality]\n    public int ID { get; set; }\n    [DefaultEquality]\n    public string? FirstName { get; set; }\n    [DefaultEquality] \n    public string? LastName { get; set; }\n}\n\n")))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\GeneratorEquals\\src\\GeneratorEqualsDemo\\obj\\GX\\Generator.Equals\\Generator.Equals.EqualsGenerator\\GeneratorEqualsDemo.Person.Generator.Equals.g.cs",label:"GeneratorEqualsDemo.Person.Generator.Equals.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\n#nullable enable\n#pragma warning disable CS0612,CS0618\n#pragma warning disable CS0436\n\nnamespace GeneratorEqualsDemo\n{\n    partial class Person : global::System.IEquatable<Person>\n    {\n        /// <summary>\n        /// Indicates whether the object on the left is equal to the object on the right.\n        /// </summary>\n        /// <param name="left">The left object</param>\n        /// <param name="right">The right object</param>\n        /// <returns>true if the objects are equal; otherwise, false.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public static bool operator ==(\n            global::GeneratorEqualsDemo.Person? left,\n            global::GeneratorEqualsDemo.Person? right) =>\n            global::Generator.Equals.DefaultEqualityComparer<global::GeneratorEqualsDemo.Person?>.Default\n                .Equals(left, right);\n        \n        /// <summary>\n        /// Indicates whether the object on the left is not equal to the object on the right.\n        /// </summary>\n        /// <param name="left">The left object</param>\n        /// <param name="right">The right object</param>\n        /// <returns>true if the objects are not equal; otherwise, false.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public static bool operator !=(global::GeneratorEqualsDemo.Person? left, global::GeneratorEqualsDemo.Person? right) =>\n            !(left == right);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public override bool Equals(object? obj) =>\n            Equals(obj as global::GeneratorEqualsDemo.Person);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        bool global::System.IEquatable<global::GeneratorEqualsDemo.Person>.Equals(global::GeneratorEqualsDemo.Person? obj) => Equals((object?) obj);\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        protected bool Equals(global::GeneratorEqualsDemo.Person? other)\n        {\n            if (ReferenceEquals(null, other)) return false;\n            if (ReferenceEquals(this, other)) return true;\n            \n            return other.GetType() == this.GetType()\n                && global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default.Equals(this.FirstName!, other.FirstName!)\n                && global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default.Equals(this.LastName!, other.LastName!)\n                ;\n        }\n        \n        /// <inheritdoc/>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Generator.Equals", "1.0.0.0")]\n        public override int GetHashCode()\n        {\n            var hashCode = new global::System.HashCode();\n            \n            hashCode.Add(this.GetType());\n            hashCode.Add(\n                this.FirstName!,\n                global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default);\n            hashCode.Add(\n                this.LastName!,\n                global::Generator.Equals.DefaultEqualityComparer<global::System.String?>.Default);\n            \n            return hashCode.ToHashCode();\n        }\n    }\n}\n\n')))),(0,n.kt)("h2",{id:"usefull"},"Usefull"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:a(1589).Z},"Download Example project GeneratorEquals "))),(0,n.kt)("h3",{id:"share-generatorequals"},"Share GeneratorEquals"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&quote=GeneratorEquals",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&text=GeneratorEquals:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&title=GeneratorEquals",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals&title=GeneratorEquals&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGeneratorEquals",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/GeneratorEquals"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/GeneratorEquals")),(0,n.kt)("h2",{id:"in-the-same-category-enhancementclass"},"In the same category (EnhancementClass)"),(0,n.kt)("h3",{id:"apparatusaot"},(0,n.kt)("a",{parentName:"h3",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,n.kt)("h3",{id:"buildergenerator"},(0,n.kt)("a",{parentName:"h3",href:"/docs/BuilderGenerator"},"BuilderGenerator")),(0,n.kt)("h3",{id:"enumclass"},(0,n.kt)("a",{parentName:"h3",href:"/docs/EnumClass"},"EnumClass")),(0,n.kt)("h3",{id:"fastgenericnew"},(0,n.kt)("a",{parentName:"h3",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,n.kt)("h3",{id:"immutype"},(0,n.kt)("a",{parentName:"h3",href:"/docs/Immutype"},"Immutype")),(0,n.kt)("h3",{id:"lomboknet"},(0,n.kt)("a",{parentName:"h3",href:"/docs/Lombok.NET"},"Lombok.NET")),(0,n.kt)("h3",{id:"m31fluentapi"},(0,n.kt)("a",{parentName:"h3",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,n.kt)("h3",{id:"memorypack"},(0,n.kt)("a",{parentName:"h3",href:"/docs/MemoryPack"},"MemoryPack")),(0,n.kt)("h3",{id:"microsoftextensionslogging"},(0,n.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,n.kt)("h3",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,n.kt)("a",{parentName:"h3",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,n.kt)("h3",{id:"morrismoxy"},(0,n.kt)("a",{parentName:"h3",href:"/docs/MorrisMoxy"},"MorrisMoxy")),(0,n.kt)("h3",{id:"netescapadesenumgenerators"},(0,n.kt)("a",{parentName:"h3",href:"/docs/NetEscapades.EnumGenerators"},"NetEscapades.EnumGenerators")),(0,n.kt)("h3",{id:"roozieautointerface"},(0,n.kt)("a",{parentName:"h3",href:"/docs/Roozie.AutoInterface"},"Roozie.AutoInterface")),(0,n.kt)("h3",{id:"rscg_decorator"},(0,n.kt)("a",{parentName:"h3",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,n.kt)("h3",{id:"rscg_static"},(0,n.kt)("a",{parentName:"h3",href:"/docs/RSCG_Static"},"RSCG_Static")),(0,n.kt)("h3",{id:"syncmethodgenerator"},(0,n.kt)("a",{parentName:"h3",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,n.kt)("h3",{id:"systemruntimeinteropservices"},(0,n.kt)("a",{parentName:"h3",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,n.kt)("h3",{id:"systemtextregularexpressions"},(0,n.kt)("a",{parentName:"h3",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")))}g.isMDXComponent=!0},1589:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/files/GeneratorEquals-bdb72b6f07755095dd99764004ccde85.zip"}}]);