"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7157],{70303:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>h,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"RSCG-Examples/Schema","title":"225 - Schema","description":"Generate binary serialization code","source":"@site/docs/RSCG-Examples/Schema.md","sourceDirName":"RSCG-Examples","slug":"/Schema","permalink":"/RSCG_Examples/v2/docs/Schema","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2250,"frontMatter":{"sidebar_position":2250,"title":"225 - Schema","description":"Generate binary serialization code","slug":"/Schema"},"sidebar":"tutorialSidebar","previous":{"title":"224 - FactoryGenerator.Abstractions","permalink":"/RSCG_Examples/v2/docs/FactoryGenerator.Abstractions"},"next":{"title":"v1","permalink":"/RSCG_Examples/v2/docs/v1"}}');var t=i(74848),a=i(28453),s=i(11470),l=i(19365),o=i(14252),c=i(72866);const d={sidebar_position:2250,title:"225 - Schema",description:"Generate binary serialization code",slug:"/Schema"},h="Schema  by Melty Player",u={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Author",id:"author",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Overview",id:"overview",level:2},{value:"Credits",id:"credits",level:2},{value:"Usage",id:"usage",level:2},{value:"Implementing binary schema classes",id:"implementing-binary-schema-classes",level:3},{value:"Automatically",id:"automatically",level:4},{value:"Manually",id:"manually",level:4},{value:"How to use a binary schema class",id:"how-to-use-a-binary-schema-class",level:3},{value:"Supported Attributes",id:"supported-attributes",level:3},{value:"Align",id:"align",level:4},{value:"Endianness",id:"endianness",level:4},{value:"IfBoolean/RIfBoolean",id:"ifbooleanrifboolean",level:4},{value:"IChildOf&lt;TParent&gt;",id:"ichildoftparent",level:4},{value:"Skip",id:"skip",level:4},{value:"Numbers/Enums",id:"numbersenums",level:4},{value:"NumberFormat",id:"numberformat",level:5},{value:"IntegerFormat",id:"integerformat",level:5},{value:"Strings",id:"strings",level:4},{value:"StringLengthSource/RStringLengthSource",id:"stringlengthsourcerstringlengthsource",level:5},{value:"NullTerminatedString",id:"nullterminatedstring",level:5},{value:"Sequences",id:"sequences",level:4},{value:"SequenceLengthSource/RSequenceLengthSource",id:"sequencelengthsourcersequencelengthsource",level:5},{value:"RSequenceUntilEndOfStreamAttribute",id:"rsequenceuntilendofstreamattribute",level:5},{value:"Pointers/Memory",id:"pointersmemory",level:4},{value:"WPointerTo",id:"wpointerto",level:5},{value:"WSizeOfMemberInBytes",id:"wsizeofmemberinbytes",level:5},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share Schema",id:"share-schema",level:3},...c.RM];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"schema--by-melty-player",children:"Schema  by Melty Player"})}),"\n",(0,t.jsx)(o.A,{toc:m}),"\n",(0,t.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/Schema/",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Schema?label=Schema",alt:"Nuget"})}),"\n",(0,t.jsx)(n.a,{href:"https://github.com/MeltyPlayer/Schema",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/MeltyPlayer/Schema?label=updated",alt:"GitHub last commit"})}),"\n",(0,t.jsx)(n.img,{src:"https://img.shields.io/github/stars/MeltyPlayer/Schema?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,t.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,t.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["Name: ",(0,t.jsx)(n.strong,{children:"Schema"})]}),(0,t.jsx)(n.p,{children:"Library for converting classes to and from binary. Provides a C# Roslyn generator that automatically implements conversion logic for simple classes."}),(0,t.jsx)(n.p,{children:"Author: Melty Player"}),(0,t.jsxs)(n.p,{children:["NuGet:\n",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/Schema/",children:"https://www.nuget.org/packages/Schema/"})})]}),(0,t.jsxs)(n.p,{children:["You can find more details at ",(0,t.jsx)(n.a,{href:"https://github.com/MeltyPlayer/Schema",children:"https://github.com/MeltyPlayer/Schema"})]}),(0,t.jsxs)(n.p,{children:["Source: ",(0,t.jsx)(n.a,{href:"https://github.com/MeltyPlayer/Schema",children:"https://github.com/MeltyPlayer/Schema"})]})]}),"\n",(0,t.jsx)(n.h3,{id:"author",children:"Author"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Melty Player\n",(0,t.jsx)(n.img,{src:"https://github.com/MeltyPlayer.png",alt:"Alt text"})]})}),"\n",(0,t.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.h1,{id:"schema",children:"Schema"}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{src:"https://img.shields.io/github/license/MeltyPlayer/Schema",alt:"GitHub"}),"\n",(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/schema",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/nuget/v/schema",alt:"Nuget"})}),"\n",(0,t.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/schema",alt:"Nuget"}),"\n",(0,t.jsx)(n.img,{src:"https://github.com/MeltyPlayer/Schema/actions/workflows/dotnet.yml/badge.svg",alt:"Unit tests"}),"\n",(0,t.jsx)(n.a,{href:"https://coveralls.io/github/MeltyPlayer/Schema",children:(0,t.jsx)(n.img,{src:"https://coveralls.io/repos/github/MeltyPlayer/Schema/badge.svg?service=github",alt:"Coverage Status"})})]}),(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),(0,t.jsx)(n.p,{children:"Library for serializing C# types to/from binary. Provides a Roslyn generator that automatically implements read/write logic."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Warning: The design of this library is still in flux, so anticipate making changes when upgrading to future versions."})}),(0,t.jsx)(n.h2,{id:"credits",children:"Credits"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/connorhaigh",children:"@connorhaigh"}),", whose ",(0,t.jsx)(n.a,{href:"https://github.com/connorhaigh/SubstreamSharp",children:"SubstreamSharp"})," library was pulled in for reading substreams."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/jefffhaynes",children:"@jefffhaynes"}),", whose ",(0,t.jsx)(n.a,{href:"https://github.com/jefffhaynes/BinarySerializer",children:"BinarySerializer"})," attribute library inspired the schema attributes for configuring how binary data is read."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/Kermalis",children:"@Kermalis"}),", whose ",(0,t.jsx)(n.a,{href:"https://github.com/Kermalis/EndianBinaryIO",children:"EndianBinaryIO"})," library inspired ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay",children:"Span"}),"-based performance improvements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/Sergio0694",children:"@Sergio0694"}),", whose ",(0,t.jsx)(n.a,{href:"https://github.com/Sergio0694/BinaryPack",children:"BinaryPack"})," generator inspired the schema source generator used to generate read/write methods."]}),"\n"]}),(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,t.jsx)(n.h3,{id:"implementing-binary-schema-classes",children:"Implementing binary schema classes"}),(0,t.jsxs)(n.p,{children:["To write a binary schema class, you must first have it implement the ",(0,t.jsx)(n.code,{children:"IBinarySerializable"})," or ",(0,t.jsx)(n.code,{children:"IBinaryDeserializable"})," interfaces (or ",(0,t.jsx)(n.code,{children:"IBinaryConvertible"})," if you need both)."]}),(0,t.jsxs)(n.p,{children:["Then, based on how complicated your schema class is, you can either choose to automatically or manually implement ",(0,t.jsx)(n.code,{children:"Read()"}),"/",(0,t.jsx)(n.code,{children:"Write()"})," methods."]}),(0,t.jsx)(n.h4,{id:"automatically",children:"Automatically"}),(0,t.jsx)(n.p,{children:"For most schema classes, you should be able to use the automatic code generator."}),(0,t.jsxs)(n.p,{children:["All you have to do is annotate the schema class with the ",(0,t.jsx)(n.code,{children:"[BinarySchema]"})," attribute and mark it as partial; this will flag to the generator that it should implement read/write methods for this class.\nIt will then look into all fields/properties in the schema class, and attempt to implement read/write logic in the same order that the fields/properties appear."]}),(0,t.jsx)(n.p,{children:"Any nested schema classes will be automatically read/written as expected."}),(0,t.jsxs)(n.p,{children:["Some types require additional attributes in order to clarify any ambiguity.\nFor example, booleans require a ",(0,t.jsx)(n.code,{children:"[IntegerFormat(SchemaIntegerType.###)]"})," attribute to know what type of integer to read, which it will then compare to 0."]}),(0,t.jsx)(n.p,{children:"Any readonly primitives will treated as assertions, which is useful for validating things like magic text or padding."}),(0,t.jsx)(n.h4,{id:"manually",children:"Manually"}),(0,t.jsx)(n.p,{children:"For complicated schema classes, such as ones that use decompression logic or pointers, you'll need to implement the read/write logic manually."}),(0,t.jsxs)(n.p,{children:["Specifically, you'll need to implement both a ",(0,t.jsx)(n.code,{children:"Read(IBinaryReader br)"})," and ",(0,t.jsx)(n.code,{children:"Write(IBinaryWriter bw)"})," method.\nThe ",(0,t.jsx)(n.code,{children:"SchemaBinaryReader"})," and ",(0,t.jsx)(n.code,{children:"SchemaBinaryWriter"})," classes provide many helpful methods for reading/writing a number of different primitive formats, including basic ones such as ",(0,t.jsx)(n.code,{children:"byte"}),"/",(0,t.jsx)(n.code,{children:"int"}),"/",(0,t.jsx)(n.code,{children:"float"}),", but also more complex/unique ones such as ",(0,t.jsx)(n.code,{children:"Half"})," (two-byte float) and ",(0,t.jsx)(n.code,{children:"un16"})," (unsigned normalized 16-bit float)."]}),(0,t.jsxs)(n.p,{children:["Similar to the automatic process, you can nest schema classes and manually read/write them by calling their ",(0,t.jsx)(n.code,{children:"Read()"}),"/",(0,t.jsx)(n.code,{children:"Write()"})," methods.\nThis can allow you to automatically generate subsections, so only the most complex logic needs to be manually written."]}),(0,t.jsx)(n.h3,{id:"how-to-use-a-binary-schema-class",children:"How to use a binary schema class"}),(0,t.jsxs)(n.p,{children:["To convert a given schema class to or from binary, simply instantiate an ",(0,t.jsx)(n.code,{children:"SchemaBinaryReader"})," or ",(0,t.jsx)(n.code,{children:"SchemaBinaryWriter"})," and pass it into the corresponding ",(0,t.jsx)(n.code,{children:"Read()"})," or ",(0,t.jsx)(n.code,{children:"Write()"})," methods in the schema class."]}),(0,t.jsx)(n.h3,{id:"supported-attributes",children:"Supported Attributes"}),(0,t.jsxs)(n.p,{children:["The following attributes are currently supported in this library ",(0,t.jsx)(n.strong,{children:"when automatically generating code"}),". Some attributes are only used at read or write time\u2014these are prefixed with an R or W respectively."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Warning: These names are not final, so they may change in future versions."})}),(0,t.jsx)(n.h4,{id:"align",children:"Align"}),(0,t.jsxs)(n.p,{children:["Specifies how a field or property's offset (relative to the start of the stream) should be aligned when reading/writing. If misaligned, the ",(0,t.jsx)(n.code,{children:"SchemaBinaryReader"}),"/",(0,t.jsx)(n.code,{children:"SchemaBinaryWriter"})," will automatically insert the remaining bytes of padding. For example, ",(0,t.jsx)(n.code,{children:"[Align(4)]"})," would force a field/property's starting offset to be a multiple of 4 (0, 4, 8, 12, 16, etc.)."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[Align(4)]\npublic int alignedField;\n\n[Align(4)]\npublic int AlignedProperty \\{ get; set; }\n"})}),(0,t.jsx)(n.h4,{id:"endianness",children:"Endianness"}),(0,t.jsxs)(n.p,{children:["Forces a type, field, or property to be read/written with a given ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"endianness"})," (big-endian or little-endian). Tracked via a stack within the ",(0,t.jsx)(n.code,{children:"SchemaBinaryReader"}),"/",(0,t.jsx)(n.code,{children:"SchemaBinaryWriter"}),". If unspecified, will use whatever endianness was last specified in the stack (or the system endianness by default)."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[BinarySchema]\n[Endianness(Endianness.BigEndian)]\npublic partial class BigEndianType : IBinaryConvertible {\n  ...\n  \n  [Endianness(Endianness.LittleEndian)]\n  public int LittleEndianProperty \\{ get; set; }\n  \n  ...\n}\n"})}),(0,t.jsx)(n.h4,{id:"ifbooleanrifboolean",children:"IfBoolean/RIfBoolean"}),(0,t.jsx)(n.p,{children:"Marks that a nullable field or property will only be read/written if some other boolean field or property is true."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[IntegerFormat(SchemaIntegerType.BYTE)]\npublic bool HasValue \\{ get; set; }\n\n[RIfBoolean(nameof(this.HasValue))]\npublic int? Value \\{ get; set; }\n"})}),(0,t.jsx)(n.h4,{id:"ichildoftparent",children:"IChildOf<TParent>"}),(0,t.jsx)(n.p,{children:'This pseudo-attribute marks a type as a "child" of some "parent" type\u2014that it is contained as one of the members of the "parent type"\u2014and passes the parent down to the child so it can be referenced in Schema logic.'}),(0,t.jsxs)(n.p,{children:["Used by having the child type implement the ",(0,t.jsx)(n.code,{children:"IChildOf<TParent>"})," interface, where ",(0,t.jsx)(n.code,{children:"TParent"})," stores the child type in a field/property or as a member of a sequence (array/list):"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[BinarySchema]\npublic partial class ChildType : IBinaryConvertible, IChildOf<ParentType> {\n  public ParentType Parent \\{ get; set; }\n  \n  ...\n}\n"})}),(0,t.jsx)(n.p,{children:"Below is a simple example where a boolean from the parent is used to decide when to read a value in the child:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[BinarySchema]\npublic partial class ParentType : IBinaryConvertible {\n  [IntegerFormat(SchemaIntegerType.BYTE)]\n  public bool ChildHasSomeField \\{ get; set; }\n\n  public ChildType Child \\{ get; \\} = new();\n}\n\n[BinarySchema]\npublic partial class ChildType : IBinaryConvertible, IChildOf<ParentType> {\n  // This is automatically skipped while reading/writing.\n  public ParentType Parent \\{ get; set; }\n\n  [Skip]\n  private bool HasSomeField => Parent.ChildHasSomeField;\n\n  [RIfBoolean(nameof(HasSomeField))]\n  public int? SomeField \\{ get; set; }\n}\n"})}),(0,t.jsx)(n.h4,{id:"skip",children:"Skip"}),(0,t.jsx)(n.p,{children:"Designates that a field or property should be skipped while reading/writing."}),(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Note: ",(0,t.jsx)(n.code,{children:"IChildOf<TParent>.Parent"})," is automatically skipped."]})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[Skip]\npublic int skippedField;\n\n[Skip]\npublic int SkippedProperty \\{ get; set; }\n"})}),(0,t.jsx)(n.p,{children:"This can be used to encapsulate logic within properties, such as in the following examples:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Value conversion"})}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'[StringLengthSource(4)]\npublic string Magic \\{ get; set; }\n\n[Skip]\npublic MagicType Type => this.Magic switch {\n  "IMGE" => MagicType.IMAGE,\n  "SOND" => MagicType.SOUND,\n  "TEXT" => MagicType.TEXT,\n};\n'})}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:'"Switch" cases'})}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'[NullTerminatedString]\npublic string Magic \\{ get; set; }\n\n[Skip]\npublic ISection? Section => this.imageSection_ ?? this.soundSection_ ?? this.textSection_;\n\n[Skip]\nprivate bool IsImage_ => this.Magic == "IMAGE";\n[Skip]\nprivate bool IsSound_ => this.Magic == "SOUND";\n[Skip]\nprivate bool IsText_ => this.Magic == "TEXT";\n\n[RIfBoolean(nameof(this.IsImage))]\nprivate ImageSection? imageSection_ \\{ get; set; }\n\n[RIfBoolean(nameof(this.IsSound_))]\nprivate SoundSection? soundSection_ \\{ get; set; }\n\n[RIfBoolean(nameof(this.IsText_))]\nprivate TextSection? textSection_ \\{ get; set; }\n'})}),(0,t.jsx)(n.h4,{id:"numbersenums",children:"Numbers/Enums"}),(0,t.jsx)(n.h5,{id:"numberformat",children:"NumberFormat"}),(0,t.jsx)(n.p,{children:"TODO"}),(0,t.jsx)(n.h5,{id:"integerformat",children:"IntegerFormat"}),(0,t.jsx)(n.p,{children:"TODO"}),(0,t.jsx)(n.h4,{id:"strings",children:"Strings"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Note: At the moment, only ASCII is fully supported."})}),(0,t.jsx)(n.h5,{id:"stringlengthsourcerstringlengthsource",children:"StringLengthSource/RStringLengthSource"}),(0,t.jsx)(n.p,{children:"Designates the length of a string field or property via one of three cases."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Note: Any trailing null terminators will be ignored at read time."})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Constant length"})}),"\n"]}),(0,t.jsxs)(n.p,{children:["If a constant is passed into ",(0,t.jsx)(n.code,{children:"StringLengthSource"}),", that many characters will be read/written."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[StringLengthSource(8)]\npublic string Text \\{ get; set; }\n"})}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Preceding value"})}),"\n"]}),(0,t.jsxs)(n.p,{children:["If a ",(0,t.jsx)(n.code,{children:"SchemaIntegerType"})," is passed into ",(0,t.jsx)(n.code,{children:"StringLengthSource"}),", an integer of that type will first be read and used as the length of the string, or the length of the string will first be written before writing the string itself."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[StringLengthSource(SchemaIntegerType.BYTE)]\npublic string TextWithByteLength \\{ get; set; }\n"})}),(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Another field or property"})}),"\n"]}),(0,t.jsxs)(n.p,{children:["If the name of another field or property is passed into ",(0,t.jsx)(n.code,{children:"RStringLengthSource"}),", that other value will be used as the length of the string when reading."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"public byte TextLength \\{ get; set; }\n\n[RStringLengthSource(nameof(this.TextLength))]\npublic string Text \\{ get; set; }\n"})}),(0,t.jsx)(n.h5,{id:"nullterminatedstring",children:"NullTerminatedString"}),(0,t.jsx)(n.p,{children:"Designates that a string field or property will be read until a null terminator is reached, and written with a null terminator affixed to the end."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[NullTerminatedString]\npublic string Text \\{ get; set; }\n"})}),(0,t.jsx)(n.h4,{id:"sequences",children:"Sequences"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:'Note: "Sequence" is the term used within Schema to refer to an array/list of elements.'})}),(0,t.jsx)(n.h5,{id:"sequencelengthsourcersequencelengthsource",children:"SequenceLengthSource/RSequenceLengthSource"}),(0,t.jsx)(n.p,{children:"TODO"}),(0,t.jsx)(n.h5,{id:"rsequenceuntilendofstreamattribute",children:"RSequenceUntilEndOfStreamAttribute"}),(0,t.jsx)(n.p,{children:"TODO"}),(0,t.jsx)(n.h4,{id:"pointersmemory",children:"Pointers/Memory"}),(0,t.jsx)(n.p,{children:"TODO"}),(0,t.jsx)(n.h5,{id:"wpointerto",children:"WPointerTo"}),(0,t.jsx)(n.p,{children:"TODO"}),(0,t.jsx)(n.h5,{id:"wsizeofmemberinbytes",children:"WSizeOfMemberInBytes"}),(0,t.jsx)(n.p,{children:"TODO"})]}),"\n",(0,t.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Generate binary serialization code"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,t.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,t.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,t.jsx)(n.strong,{children:"Schema"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {15}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="CommunityToolkit.HighPerformance" Version="8.3.0" />\n\t  <PackageReference Include="schema" Version="0.6.13" />\n\t</ItemGroup>\n\t\n</Project>\n\n'})})]}),(0,t.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\Program.cs",label:"Program.cs",children:[(0,t.jsxs)(n.p,{children:["This is the use of ",(0,t.jsx)(n.strong,{children:"Schema"})," in ",(0,t.jsx)(n.em,{children:"Program.cs"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using schema.binary;\nusing SerializerDemo;\n\nvar p= new Person() \\{ Name= "Andrei Ignat" , Age=55};\nvar ms=new MemoryStream();\nSchemaBinaryWriter writer = new ();\np.Write(writer);\nawait writer.CompleteAndCopyToAsync(ms);\nms.Position=0;\nSchemaBinaryReader reader = new (ms);\np.Name=string.Empty;\np.Age=0;\np.Read(reader);\nConsole.WriteLine(p.Name);\nConsole.WriteLine(p.Age);\n'})})]}),(0,t.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\Person.cs",label:"Person.cs",children:[(0,t.jsxs)(n.p,{children:["This is the use of ",(0,t.jsx)(n.strong,{children:"Schema"})," in ",(0,t.jsx)(n.em,{children:"Person.cs"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing schema.binary;\nusing schema.binary.attributes;\n\nnamespace SerializerDemo;\n\n[BinarySchema]\n[Endianness(Endianness.BigEndian)]\npublic partial class Person : IBinaryConvertible\n{\n    [IntegerFormat(SchemaIntegerType.INT32)]\n    public int Age \\{ get; set; }\n\n    [NullTerminatedString]\n    public string Name \\{ get; set; \\} = string.Empty;\n\n}\n\n\n"})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,t.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Deserializer.Collection.g.cs",label:"Serializer.NinoGen.Deserializer.Collection.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable CS8669\n\nusing System;\nusing global::Nino.Core;\nusing System.Buffers;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static partial class Deserializer\n    {\n#region System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> - Generated by transformer TrivialEnumerableUsingAdd\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(ReadOnlySpan<byte> data, out System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> value) \n        {\n            var reader = new Reader(data);\n            Deserialize(out value, ref reader);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(out System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n        \n            if (!reader.ReadCollectionHeader(out var length))\n            {\n                value = default;\n                return;\n            }\n        \n        #if WEAK_VERSION_TOLERANCE\n            Reader eleReader;\n        #endif\n        \n            var lst = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, object?>>();\n            for (int i = 0; i < length; i++)\n            {\n        #if WEAK_VERSION_TOLERANCE\n                eleReader = reader.Slice();\n                NinoDeserializer.Deserialize(out System.Collections.Generic.KeyValuePair<string, object?> item, ref eleReader);\n        #else\n                NinoDeserializer.Deserialize(out System.Collections.Generic.KeyValuePair<string, object?> item, ref reader);\n        #endif\n                lst.Add(item);\n            }\n        \n            value = lst;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeRef(ref System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> value, ref Reader reader) => Deserialize(out value, ref reader);\n        \n#endregion\n\n#region System.Collections.Generic.KeyValuePair<string, object?> - Generated by transformer KeyValuePair\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(ReadOnlySpan<byte> data, out System.Collections.Generic.KeyValuePair<string, object?> value) \n        {\n            var reader = new Reader(data);\n            Deserialize(out value, ref reader);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(out System.Collections.Generic.KeyValuePair<string, object?> value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n            NinoDeserializer.Deserialize(out string k, ref reader);\n            object v = NinoDeserializer.DeserializeBoxed(ref reader, null);\n            value = new System.Collections.Generic.KeyValuePair<string, object?>(k, v);\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeRef(ref System.Collections.Generic.KeyValuePair<string, object?> value, ref Reader reader)\n            => Deserialize(out value, ref reader);\n        \n#endregion\n\n#region byte[] - Generated by transformer Array\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(ReadOnlySpan<byte> data, out byte[] value) \n        {\n            var reader = new Reader(data);\n            Deserialize(out value, ref reader);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(out byte[] value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n            reader.Read(out value);\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeRef(ref byte[] value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n            reader.ReadRef(ref value);\n        }\n        \n#endregion\n\n#region int[] - Generated by transformer Array\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(ReadOnlySpan<byte> data, out int[] value) \n        {\n            var reader = new Reader(data);\n            Deserialize(out value, ref reader);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(out int[] value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n            reader.Read(out value);\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeRef(ref int[] value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n            reader.ReadRef(ref value);\n        }\n        \n#endregion\n\n#region long? - Generated by transformer Nullable\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(ReadOnlySpan<byte> data, out long? value) \n        {\n            var reader = new Reader(data);\n            Deserialize(out value, ref reader);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(out long? value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n            if (reader.Eof)\n            {\n                value = default;\n                return;\n            }\n        #endif\n            reader.Read(out bool hasValue);\n            if (!hasValue)\n            {\n                value = default;\n                return;\n            }\n        \n            reader.UnsafeRead(out long ret);\n            value = ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeRef(ref long? value, ref Reader reader) => Deserialize(out value, ref reader);\n        \n#endregion\n\n    }\n}\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Deserializer.g.cs",label:"Serializer.NinoGen.Deserializer.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\nusing System;\nusing global::Nino.Core;\nusing System.Buffers;\nusing System.ComponentModel;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static partial class Deserializer\n    {\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(out string value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n             if (reader.Eof)\n             {\n                value = default;\n                return;\n             }\n        #endif\n            \n            reader.Read(out value);\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeRef(ref string value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n             if (reader.Eof)\n             {\n                value = default;\n                return;\n             }\n        #endif\n            \n            reader.Read(out value);\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Deserialize(ReadOnlySpan<byte> data, out string value) \n        {\n            var reader = new Reader(data);\n            Deserialize(out value, ref reader);\n        }\n\n\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeImpl(out SerializerDemo.Person value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n           if (reader.Eof)\n           {\n              value = default;\n              return;\n           }\n        #endif\n            reader.Read(out int typeId);\n            if(typeId == TypeCollector.Null)\n            {\n                value = default;\n                return;\n            }\n            else if(typeId != NinoTypeConst.SerializerDemo_Person)\n                throw new InvalidOperationException("Invalid type id");\n\n            value = new SerializerDemo.Person();\n#if WEAK_VERSION_TOLERANCE\n            if (!reader.Eof) reader.UnsafeRead(out value.Age);\n#else\n            reader.UnsafeRead(out value.Age);\n#endif\n#if WEAK_VERSION_TOLERANCE\n            if (!reader.Eof) reader.Read(out value.Name);\n#else\n            reader.Read(out value.Name);\n#endif\n        }\n\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void DeserializeImplRef(ref SerializerDemo.Person value, ref Reader reader)\n        {\n        #if WEAK_VERSION_TOLERANCE\n           if (reader.Eof)\n           {\n              value = default;\n              return;\n           }\n        #endif\n            if (Unsafe.IsNullRef(ref value))\n            {\n                DeserializeImpl(out value, ref reader);\n                return;\n            }\n\n            reader.Read(out int typeId);\n            if(typeId == TypeCollector.Null)\n            {\n                value = default;\n                return;\n            }\n            else if(typeId != NinoTypeConst.SerializerDemo_Person)\n                throw new InvalidOperationException("Invalid type id");\n\n#if WEAK_VERSION_TOLERANCE\n            if (!reader.Eof) reader.UnsafeRead(out value.Age);\n#else\n            reader.UnsafeRead(out value.Age);\n#endif\n#if WEAK_VERSION_TOLERANCE\n            if (!reader.Eof) reader.Read(out value.Name);\n#else\n            reader.Read(out value.Name);\n#endif\n        }\n\n\n    }\n}\n'})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Deserializer.Generic.g.cs",label:"Serializer.NinoGen.Deserializer.Generic.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable CS8669\nusing System;\nusing global::Nino.Core;\nusing System.Buffers;\nusing System.ComponentModel;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static partial class Deserializer\n    {\n        private static bool _initialized;\n        private static object _lock = new object();\n        \n        static Deserializer()\n        {\n            Init();\n        }\n        \n    #if NET5_0_OR_GREATER\n        [ModuleInitializer]\n    #endif\n        public static void Init()\n        {\n            lock (_lock)\n            {\n                if (_initialized)\n                    return;\n                    \n                RegisterTrivialDeserializers();\n                RegisterCollectionDeserializers();\n                _initialized = true;\n            }\n        }\n        \n    #if UNITY_2020_2_OR_NEWER\n    #if UNITY_EDITOR\n        [UnityEditor.InitializeOnLoadMethod]\n        private static void InitEditor() => Init();\n    #endif\n    \n        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]\n        private static void InitRuntime() => Init();\n    #endif\n    \n        private static void RegisterCollectionDeserializers()\n        {\n            NinoTypeMetadata.RegisterDeserializer<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>>>(Deserialize, DeserializeRef, false);\n            NinoTypeMetadata.RegisterDeserializer<System.Collections.Generic.KeyValuePair<string, object?>>(Deserialize, DeserializeRef, false);\n            NinoTypeMetadata.RegisterDeserializer<byte[]>(Deserialize, DeserializeRef, false);\n            NinoTypeMetadata.RegisterDeserializer<int[]>(Deserialize, DeserializeRef, false);\n            NinoTypeMetadata.RegisterDeserializer<long?>(Deserialize, DeserializeRef, false);\n        }\n        private static void RegisterTrivialDeserializers()\n        {\n            NinoTypeMetadata.RegisterDeserializer<SerializerDemo.Person>(DeserializeImpl, DeserializeImplRef, false);\n            NinoTypeMetadata.RegisterDeserializer<string>(Deserialize, DeserializeRef, false);\n        }\n    }\n}\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Graph.g.cs",label:"Serializer.NinoGen.Graph.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"/*\nBase Types:\n\nSub Types:\n\nTop Types:\nSerializerDemo.Person\n\nCircular Types:\n\n\n*/\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.PartialClass.g.cs",label:"Serializer.NinoGen.PartialClass.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable CS0109, CS8669\nusing System;\nusing System.Runtime.CompilerServices;\n\n\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.PrivateAccessor.g.cs",label:"Serializer.NinoGen.PrivateAccessor.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n\nusing System;\nusing System.Runtime.CompilerServices;\n\n#if NET8_0_OR_GREATER\nnamespace Serializer.NinoGen\n{\n    internal static partial class PrivateAccessor\n    {\n    }\n}\n#endif\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Serializer.Collection.g.cs",label:"Serializer.NinoGen.Serializer.Collection.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable CS8669\n\nusing System;\nusing global::Nino.Core;\nusing System.Buffers;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static partial class Serializer\n    {\n#region System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> - Generated by transformer TrivialEnumerable\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(this System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> value) \n        {\n            var bufferWriter = NinoSerializer.GetBufferWriter();\n            Serialize(value, bufferWriter);\n            var ret = bufferWriter.WrittenSpan.ToArray();\n            NinoSerializer.ReturnBufferWriter(bufferWriter);\n            return ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> value, INinoBufferWriter bufferWriter) \n        {\n            Writer writer = new Writer(bufferWriter);\n            Serialize(value, ref writer);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> value, ref Writer writer)\n        {\n            if (value == null)\n            {\n                writer.Write(TypeCollector.NullCollection);\n                return;\n            }\n        \n            var serializer_1388A30A = CachedSerializer<System.Collections.Generic.KeyValuePair<string, object?>>.Instance;\n        \n            int cnt = 0;\n            int oldPos = writer.Advance(4);\n        \n            foreach (var item in value)\n            {\n                cnt++;\n        #if WEAK_VERSION_TOLERANCE\n                var pos = writer.Advance(4);\n        #endif\n                serializer_1388A30A.Serialize(item, ref writer);\n        #if WEAK_VERSION_TOLERANCE\n                writer.PutLength(pos);\n        #endif\n            }\n        \n            writer.PutBack(TypeCollector.GetCollectionHeader(cnt), oldPos);\n        }\n        \n#endregion\n\n#region System.Collections.Generic.KeyValuePair<string, object?> - Generated by transformer KeyValuePair\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(this System.Collections.Generic.KeyValuePair<string, object?> value) \n        {\n            var bufferWriter = NinoSerializer.GetBufferWriter();\n            Serialize(value, bufferWriter);\n            var ret = bufferWriter.WrittenSpan.ToArray();\n            NinoSerializer.ReturnBufferWriter(bufferWriter);\n            return ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this System.Collections.Generic.KeyValuePair<string, object?> value, INinoBufferWriter bufferWriter) \n        {\n            Writer writer = new Writer(bufferWriter);\n            Serialize(value, ref writer);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this System.Collections.Generic.KeyValuePair<string, object?> value, ref Writer writer)\n        {\n            var serializer_C55A10A5 = CachedSerializer<string>.Instance;\n            var serializer_7A439E91 = CachedSerializer<object>.Instance;\n        \n            serializer_C55A10A5.Serialize(value.Key, ref writer);\n            NinoSerializer.SerializeBoxed(value.Value, ref writer, value.Value?.GetType());\n        }\n        \n#endregion\n\n#region byte[] - Generated by transformer Array\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(this byte[] value) \n        {\n            var bufferWriter = NinoSerializer.GetBufferWriter();\n            Serialize(value, bufferWriter);\n            var ret = bufferWriter.WrittenSpan.ToArray();\n            NinoSerializer.ReturnBufferWriter(bufferWriter);\n            return ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this byte[] value, INinoBufferWriter bufferWriter) \n        {\n            Writer writer = new Writer(bufferWriter);\n            Serialize(value, ref writer);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this byte[] value, ref Writer writer)\n        {\n            writer.Write(value);\n        }\n        \n#endregion\n\n#region int[] - Generated by transformer Array\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(this int[] value) \n        {\n            var bufferWriter = NinoSerializer.GetBufferWriter();\n            Serialize(value, bufferWriter);\n            var ret = bufferWriter.WrittenSpan.ToArray();\n            NinoSerializer.ReturnBufferWriter(bufferWriter);\n            return ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this int[] value, INinoBufferWriter bufferWriter) \n        {\n            Writer writer = new Writer(bufferWriter);\n            Serialize(value, ref writer);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this int[] value, ref Writer writer)\n        {\n            writer.Write(value);\n        }\n        \n#endregion\n\n#region long? - Generated by transformer Nullable\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(this long? value) \n        {\n            var bufferWriter = NinoSerializer.GetBufferWriter();\n            Serialize(value, bufferWriter);\n            var ret = bufferWriter.WrittenSpan.ToArray();\n            NinoSerializer.ReturnBufferWriter(bufferWriter);\n            return ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this long? value, INinoBufferWriter bufferWriter) \n        {\n            Writer writer = new Writer(bufferWriter);\n            Serialize(value, ref writer);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this long? value, ref Writer writer)\n        {\n            if (!value.HasValue)\n            {\n                writer.Write(false);\n                return;\n            }\n        \n            writer.Write(true);\n            writer.Write(value.Value);\n        }\n        \n#endregion\n\n    }\n}\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Serializer.g.cs",label:"Serializer.NinoGen.Serializer.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n\nusing System;\nusing System.Buffers;\nusing System.Threading;\nusing global::Nino.Core;\nusing System.ComponentModel;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static partial class Serializer\n    {\n        private static readonly ConcurrentQueue<NinoArrayBufferWriter> BufferWriters = new();\n        private static readonly NinoArrayBufferWriter DefaultBufferWriter = new NinoArrayBufferWriter(1024);\n        private static int _defaultUsed;\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static NinoArrayBufferWriter GetBufferWriter()\n        {\n            // Fast path\n            if (Interlocked.CompareExchange(ref _defaultUsed, 1, 0) == 0)\n            {\n                return DefaultBufferWriter;\n            }\n\n            if (BufferWriters.Count == 0)\n            {\n                return new NinoArrayBufferWriter(1024);\n            }\n\n            if (BufferWriters.TryDequeue(out var bufferWriter))\n            {\n                return bufferWriter;\n            }\n\n            return new NinoArrayBufferWriter(1024);\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void ReturnBufferWriter(NinoArrayBufferWriter bufferWriter)\n        {\n#if NET8_0_OR_GREATER\n            bufferWriter.ResetWrittenCount();\n#else\n            bufferWriter.Clear();\n#endif\n            // Check if the buffer writer is the default buffer writer\n            if (bufferWriter == DefaultBufferWriter)\n            {\n                // Ensure it is in use, otherwise throw an exception\n                if (Interlocked.CompareExchange(ref _defaultUsed, 0, 1) == 0)\n                {\n                    throw new InvalidOperationException("The returned buffer writer is not in use.");\n                }\n\n                return;\n            }\n\n            BufferWriters.Enqueue(bufferWriter);\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(bool value)\n        {\n            if (value)\n                return new byte[1] \\{ 1 };\n           \n            return new byte[1] \\{ 0 };\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(byte value)\n        {\n            return new byte[1] \\{ value };\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(string value, ref Writer writer) \n        {\n            writer.Write(value);\n        }\n\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static byte[] Serialize(this string value) \n        {\n            var bufferWriter = NinoSerializer.GetBufferWriter();\n            Serialize(value, bufferWriter);\n            var ret = bufferWriter.WrittenSpan.ToArray();\n            NinoSerializer.ReturnBufferWriter(bufferWriter);\n            return ret;\n        }\n        \n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void Serialize(this string value, INinoBufferWriter bufferWriter) \n        {\n            Writer writer = new Writer(bufferWriter);\n            Serialize(value, ref writer);\n        }\n\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static void SerializeImpl(SerializerDemo.Person value, ref Writer writer)\n        {\n            if(value == null)\n            {\n                writer.Write(TypeCollector.Null);\n                return;\n            }\n\n            writer.Write(NinoTypeConst.SerializerDemo_Person);\n            writer.Write(value.Age);\n            writer.Write(value.Name);\n        }\n\n    }\n}\n'})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Serializer.Generic.g.cs",label:"Serializer.NinoGen.Serializer.Generic.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n#pragma warning disable CS8669\nusing System;\nusing global::Nino.Core;\nusing System.Buffers;\nusing System.ComponentModel;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static partial class Serializer\n    {\n        static Serializer()\n        {\n            Init();\n        }\n        \n        private static bool _initialized;\n        private static object _lock = new object();\n        \n\n        #if NET5_0_OR_GREATER\n            [ModuleInitializer]\n        #endif\n        public static void Init()\n        {\n            lock (_lock)\n            {\n                if (_initialized)\n                    return;\n                    \n                RegisterTrivialSerializers();\n                RegisterCollectionSerializers();\n                _initialized = true;\n            }\n        }\n        \n    #if UNITY_2020_2_OR_NEWER\n    #if UNITY_EDITOR\n        [UnityEditor.InitializeOnLoadMethod]\n        private static void InitEditor() => Init();\n    #endif\n    \n        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]\n        private static void InitRuntime() => Init();\n    #endif\n        \n        private static void RegisterCollectionSerializers()\n        {\n            NinoTypeMetadata.RegisterSerializer<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>>>(Serialize, false);\n            NinoTypeMetadata.RegisterSerializer<System.Collections.Generic.KeyValuePair<string, object?>>(Serialize, false);\n            NinoTypeMetadata.RegisterSerializer<byte[]>(Serialize, false);\n            NinoTypeMetadata.RegisterSerializer<int[]>(Serialize, false);\n            NinoTypeMetadata.RegisterSerializer<long?>(Serialize, false);\n        }\n\n        private static void RegisterTrivialSerializers()\n        {\n            NinoTypeMetadata.RegisterSerializer<SerializerDemo.Person>(SerializeImpl, false);\n            NinoTypeMetadata.RegisterSerializer<string>(Serialize, false);\n        }\n\n    }\n}\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.TypeConst.g.cs",label:"Serializer.NinoGen.TypeConst.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated/>\n\nusing System;\nusing Nino.Core;\nusing System.Runtime.CompilerServices;\n\nnamespace Serializer.NinoGen\n{\n    public static class NinoTypeConst\n    {\n        private static bool _initialized;\n        private static object _lock = new object();\n       \n        static NinoTypeConst()\n        {\n            Init();\n        }\n               \n    #if UNITY_2020_2_OR_NEWER\n    #if UNITY_EDITOR\n        [UnityEditor.InitializeOnLoadMethod]\n        private static void InitEditor() => Init();\n    #endif\n   \n        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]\n        private static void InitRuntime() => Init();\n    #endif\n       \n    #if NET5_0_OR_GREATER\n        [ModuleInitializer]\n    #endif\n\t\tpublic static void Init()\n\t\t{\n\t\t\tlock (_lock)\n\t\t\t{\n\t\t\t\tif (_initialized)\n\t\t\t\t\treturn;\n\t\t\t\t_initialized = true;\n\n\t\t\t\tNinoTypeMetadata.RegisterType<global::SerializerDemo.Person>(SerializerDemo_Person);\n\t\t\t}\n\t\t}\n\n\t\t// global::SerializerDemo.Person\n\t\tpublic const int SerializerDemo_Person = 192498207;\n\n    }\n}\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Nino.Generator\\Nino.Generator.GlobalGenerator\\Serializer.NinoGen.Types.g.cs",label:"Serializer.NinoGen.Types.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"/*\nType: SerializerDemo.Person\nParents:\nMembers:\n\tint Age [Ctor: False, Private: False, Property: False, Utf8String: False]\n\tstring Name [Ctor: False, Private: False, Property: False, Utf8String: False]\n\n*/\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Schema\\schema.binary.BinarySchemaGenerator\\SerializerDemo.Person_0_reader.g.cs",label:"SerializerDemo.Person_0_reader.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using System;\nusing schema.binary;\n\nnamespace SerializerDemo;\n\npublic partial class Person {\n  public void Read(IBinaryReader br) {\n    br.PushContainerEndianness(Endianness.BigEndian);\n    this.Age = br.ReadInt32();\n    this.Name = br.ReadStringNT();\n    br.PopEndianness();\n  }\n}\n\n"})})}),(0,t.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Schema\\src\\Serializer\\obj\\GX\\Schema\\schema.binary.BinarySchemaGenerator\\SerializerDemo.Person_0_writer.g.cs",label:"SerializerDemo.Person_0_writer.g.cs",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using System;\nusing schema.binary;\n\nnamespace SerializerDemo;\n\npublic partial class Person {\n  public void Write(IBinaryWriter bw) {\n    bw.PushContainerEndianness(Endianness.BigEndian);\n    bw.WriteInt32(this.Age);\n    bw.WriteStringNT(this.Name);\n    bw.PopEndianness();\n  }\n}\n\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,t.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(75285).A+"",children:"Download Example project Schema "})})}),"\n",(0,t.jsx)(n.h3,{id:"share-schema",children:"Share Schema"}),"\n",(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSchema&quote=Schema",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSchema&text=Schema:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSchema",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSchema&title=Schema",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSchema&title=Schema&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FSchema",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Schema",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Schema"})}),"\n",(0,t.jsx)(c.Ay,{})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},72866:(e,n,i)=>{i.d(n,{Ay:()=>l,RM:()=>a});var r=i(74848),t=i(28453);const a=[{value:"Category &quot;Serializer&quot; has the following generators:",id:"category-serializer-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function s(e){const n={a:"a",h3:"h3",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"category-serializer-has-the-following-generators",children:'Category "Serializer" has the following generators:'}),"\n",(0,r.jsxs)(n.p,{children:["1 ",(0,r.jsx)(n.a,{href:"/docs/GenPack",children:"GenPack"})]}),"\n",(0,r.jsxs)(n.p,{children:["2 ",(0,r.jsx)(n.a,{href:"/docs/jsonConverterSourceGenerator",children:"jsonConverterSourceGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["3 ",(0,r.jsx)(n.a,{href:"/docs/JsonPolymorphicGenerator",children:"JsonPolymorphicGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["4 ",(0,r.jsx)(n.a,{href:"/docs/Nino",children:"Nino"})]}),"\n",(0,r.jsxs)(n.p,{children:["5 ",(0,r.jsx)(n.a,{href:"/docs/ProtobufSourceGenerator",children:"ProtobufSourceGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["6 ",(0,r.jsx)(n.a,{href:"/docs/Schema",children:"Schema"})]}),"\n",(0,r.jsxs)(n.p,{children:["7 ",(0,r.jsx)(n.a,{href:"/docs/StackXML",children:"StackXML"})]}),"\n",(0,r.jsxs)(n.p,{children:["8 ",(0,r.jsx)(n.a,{href:"/docs/System.Text.Json",children:"System.Text.Json"})]}),"\n",(0,r.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/Categories/Serializer",children:"Serializer"})})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},75285:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/files/Schema-4429584d655daca07b9655056e94a6bb.zip"}}]);