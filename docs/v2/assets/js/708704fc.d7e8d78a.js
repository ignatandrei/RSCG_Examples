"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[757],{3963:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>T,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var a=n(7462),s=(n(7294),n(4137)),i=n(3992),u=n(425),c=n(8839);const r={sidebar_position:150,title:"15 - dunet",description:"Add union types to C#  - similar with F#/TS discriminated unions",slug:"/dunet"},o="dunet  by Domn Werner",l={unversionedId:"RSCG-Examples/dunet",id:"RSCG-Examples/dunet",title:"15 - dunet",description:"Add union types to C#  - similar with F#/TS discriminated unions",source:"@site/docs/RSCG-Examples/dunet.md",sourceDirName:"RSCG-Examples",slug:"/dunet",permalink:"/RSCG_Examples/v2/docs/dunet",draft:!1,tags:[],version:"current",sidebarPosition:150,frontMatter:{sidebar_position:150,title:"15 - dunet",description:"Add union types to C#  - similar with F#/TS discriminated unions",slug:"/dunet"},sidebar:"tutorialSidebar",previous:{title:"14 - AutoCtor",permalink:"/RSCG_Examples/v2/docs/AutoCtor"},next:{title:"16 - Vogen",permalink:"/RSCG_Examples/v2/docs/Vogen"}},p={},h=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share dunet",id:"share-dunet",level:3}],S={toc:h},m="wrapper";function T(t){let{components:e,...r}=t;return(0,s.kt)(m,(0,a.Z)({},S,r,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"dunet--by-domn-werner"},"dunet  by Domn Werner"),(0,s.kt)(c.Z,{toc:h,mdxType:"TOCInline"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/dunet/"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/dunet?label=dunet",alt:"Nuget"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/domn1995/dunet"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/domn1995/dunet?label=updated",alt:"GitHub last commit"})),"\n",(0,s.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/domn1995/dunet?style=social",alt:"GitHub Repo stars"})),(0,s.kt)("h2",{id:"details"},"Details"),(0,s.kt)("h3",{id:"info"},"Info"),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Name: ",(0,s.kt)("strong",{parentName:"p"},"dunet")),(0,s.kt)("p",{parentName:"admonition"},"A simple source generator for discriminated unions in C#."),(0,s.kt)("p",{parentName:"admonition"},"Author: Domn Werner"),(0,s.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,s.kt)("em",{parentName:"p"},(0,s.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/dunet/"},"https://www.nuget.org/packages/dunet/")),"   "),(0,s.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/domn1995/dunet"},"https://github.com/domn1995/dunet")),(0,s.kt)("p",{parentName:"admonition"},"Source : ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/domn1995/dunet"},"https://github.com/domn1995/dunet"))),(0,s.kt)("h3",{id:"original-readme"},"Original Readme"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("h1",{parentName:"admonition",id:"dunet"},"Dunet"),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{parentName:"p",href:"https://github.com/domn1995/dunet/actions"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/github/actions/workflow/status/domn1995/dunet/main.yml?branch=main",alt:"Build"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://nuget.org/packages/dunet"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/dunet.svg",alt:"Package"}))),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Dunet")," is a simple source generator for ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tagged_union"},"discriminated unions")," in C#."),(0,s.kt)("h2",{parentName:"admonition",id:"install"},"Install"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Dunet/"},"NuGet"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"dotnet add package dunet"))),(0,s.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"// 1. Import the namespace.\nusing Dunet;\n\n// 2. Add the `Union` attribute to a partial record.\n[Union]\npartial record Shape\n{\n    // 3. Define the union variants as inner partial records.\n    partial record Circle(double Radius);\n    partial record Rectangle(double Length, double Width);\n    partial record Triangle(double Base, double Height);\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'// 4. Use the union variants.\nvar shape = new Shape.Rectangle(3, 4);\nvar area = shape.Match(\n    circle => 3.14 * circle.Radius * circle.Radius,\n    rectangle => rectangle.Length * rectangle.Width,\n    triangle => triangle.Base * triangle.Height / 2\n);\nConsole.WriteLine(area); // "12"\n')),(0,s.kt)("h2",{parentName:"admonition",id:"generics"},"Generics"),(0,s.kt)("p",{parentName:"admonition"},"Use generics for more advanced union types. For example, an option monad:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"// 1. Import the namespace.\nusing Dunet;\n// Optional: use static import for more terse code.\nusing static Option<int>;\n\n// 2. Add the `Union` attribute to a partial record.\n// 3. Add one or more type arguments to the union record.\n[Union]\npartial record Option<T>\n{\n    partial record Some(T Value);\n    partial record None();\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'// 4. Use the union variants.\nOption<int> ParseInt(string? value) =>\n    int.TryParse(value, out var number)\n        ? new Some(number)\n        : new None();\n\nstring GetOutput(Option<int> number) =>\n    number.Match(\n        some => some.Value.ToString(),\n        none => "Invalid input!"\n    );\n\nvar input = Console.ReadLine(); // User inputs "not a number".\nvar result = ParseInt(input);\nvar output = GetOutput(result);\nConsole.WriteLine(output); // "Invalid input!"\n\ninput = Console.ReadLine(); // User inputs "12345".\nresult = ParseInt(input);\noutput = GetOutput(result);\nConsole.WriteLine(output); // "12345".\n')),(0,s.kt)("h2",{parentName:"admonition",id:"implicit-conversions"},"Implicit Conversions"),(0,s.kt)("p",{parentName:"admonition"},"Dunet generates implicit conversions between union variants and the union type if your union meets all of the following conditions:"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"The union has no required properties."),(0,s.kt)("li",{parentName:"ul"},"All variants contain a single property."),(0,s.kt)("li",{parentName:"ul"},"Each variant's property is unique within the union."),(0,s.kt)("li",{parentName:"ul"},"No variant's property is an interface type.")),(0,s.kt)("p",{parentName:"admonition"},"For example, consider a ",(0,s.kt)("inlineCode",{parentName:"p"},"Result")," union type that represents success as a ",(0,s.kt)("inlineCode",{parentName:"p"},"double")," and failure as an ",(0,s.kt)("inlineCode",{parentName:"p"},"Exception"),":"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"// 1. Import the namespace.\nusing Dunet;\n\n// 2. Define a union type with a single unique variant property:\n[Union]\npartial record Result\n{\n    partial record Success(double Value);\n    partial record Failure(Exception Error);\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'// 3. Return union variants directly.\nResult Divide(double numerator, double denominator)\n{\n    if (denominator is 0d)\n    {\n        // No need for `new Result.Failure(new InvalidOperationException("..."));`\n        return new InvalidOperationException("Cannot divide by zero!");\n    }\n\n    // No need for `new Result.Success(...);`\n    return numerator / denominator;\n}\n\nvar result = Divide(42, 0);\nvar output = result.Match(\n    success => success.Value.ToString(),\n    failure => failure.Error.Message\n);\n\nConsole.WriteLine(output); // "Cannot divide by zero!"\n')),(0,s.kt)("h2",{parentName:"admonition",id:"async-match"},"Async Match"),(0,s.kt)("p",{parentName:"admonition"},"Dunet generates a ",(0,s.kt)("inlineCode",{parentName:"p"},"MatchAsync()")," extension method for all ",(0,s.kt)("inlineCode",{parentName:"p"},"Task<T>")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ValueTask<T>")," where ",(0,s.kt)("inlineCode",{parentName:"p"},"T")," is a union type. For example:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"// Choice.cs\n\nusing Dunet;\n\nnamespace Core;\n\n// 1. Define a union type within a namespace.\n[Union]\npartial record Choice\n{\n    partial record Yes;\n    partial record No(string Reason);\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'// Program.cs\n\nusing Core;\nusing static Core.Choice;\n\n// 2. Define async methods like you would for any other type.\nstatic async Task<Choice> AskAsync()\n{\n    // Simulating network call.\n    await Task.Delay(1000);\n\n    // 3. Return unions from async methods like any other type.\n    return new No("because I don\'t wanna!");\n}\n\n// 4. Asynchronously match any union `Task` or `ValueTask`.\nvar response = await AskAsync()\n    .MatchAsync(\n        yes => "Yes!!!",\n        no => $"No, {no.Reason}"\n    );\n\n// Prints "No, because I don\'t wanna!" after 1 second.\nConsole.WriteLine(response);\n')),(0,s.kt)("blockquote",{parentName:"admonition"},(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"Note"),":\n",(0,s.kt)("inlineCode",{parentName:"p"},"MatchAsync()")," can only be generated for namespaced unions.")),(0,s.kt)("h2",{parentName:"admonition",id:"specific-match"},"Specific Match"),(0,s.kt)("p",{parentName:"admonition"},"Dunet generates specific match methods for each union variant. This is useful when unwrapping a union and you only care about transforming a single variant. For example:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"[Union]\npartial record Shape\n{\n    partial record Point(int X, int Y);\n    partial record Line(double Length);\n    partial record Rectangle(double Length, double Width);\n    partial record Sphere(double Radius);\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"public static bool IsZeroDimensional(this Shape shape) =>\n    shape.MatchPoint(\n        point => true,\n        () => false\n    );\n\npublic static bool IsOneDimensional(this Shape shape) =>\n    shape.MatchLine(\n        line => true,\n        () => false\n    );\n\npublic static bool IsTwoDimensional(this Shape shape) =>\n    shape.MatchRectangle(\n        rectangle => true,\n        () => false\n    );\n\npublic static bool IsThreeDimensional(this Shape shape) =>\n    shape.MatchSphere(\n        sphere => true,\n        () => false\n    );\n")),(0,s.kt)("h2",{parentName:"admonition",id:"pretty-print"},"Pretty Print"),(0,s.kt)("p",{parentName:"admonition"},"To control how union variants are printed with their ",(0,s.kt)("inlineCode",{parentName:"p"},"ToString()")," methods, override and seal the union declaration's ",(0,s.kt)("inlineCode",{parentName:"p"},"ToString()")," method. For example:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'[Union]\npublic partial record QueryResult<T>\n{\n    public partial record Ok(T Value);\n    public partial record NotFound;\n    public partial record Unauthorized;\n\n    public sealed override string ToString() =>\n        Match(\n            ok => ok.Value.ToString(),\n            notFound => "Not found.",\n            unauthorized => "Unauthorized access."\n        );\n}\n')),(0,s.kt)("blockquote",{parentName:"admonition"},(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"Note"),":\nYou must seal the ",(0,s.kt)("inlineCode",{parentName:"p"},"ToString()")," override to prevent the compiler from synthesizing a custom ",(0,s.kt)("inlineCode",{parentName:"p"},"ToString()")," method for each variant."),(0,s.kt)("p",{parentName:"blockquote"},"More info: ",(0,s.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record#built-in-formatting-for-display"},"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record#built-in-formatting-for-display"))),(0,s.kt)("h2",{parentName:"admonition",id:"shared-properties"},"Shared Properties"),(0,s.kt)("p",{parentName:"admonition"},"To create a property shared by all variants, add it to the union declaration. For example, the following code requires all union variants to initialize the ",(0,s.kt)("inlineCode",{parentName:"p"},"StatusCode")," property. This makes ",(0,s.kt)("inlineCode",{parentName:"p"},"StatusCode")," available to anyone with a reference to ",(0,s.kt)("inlineCode",{parentName:"p"},"HttpResponse")," without having to match."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"[Union]\npublic partial record HttpResponse\n{\n    public partial record Success;\n    public partial record Error(string Message);\n    // 1. All variants shall have a status code.\n    public required int StatusCode { get; init; }\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'using var client = new HttpClient();\nvar response = await CreateUserAsync(client, "John", "Smith");\n\n// 2. The `StatusCode` property is available at the union level.\nvar statusCode = response.StatusCode;\n\npublic static async Task<HttpResponse> CreateUserAsync(\n    HttpClient client, string firstName, string lastName\n)\n{\n    using var response = await client.PostJsonAsync(\n        "/users",\n        new { firstName, lastName }\n    );\n\n    var content = await response.Content.ReadAsStringAsync();\n\n    if (!response.IsSuccessStatusCode)\n    {\n        return new HttpResponse.Error(content)\n        {\n            StatusCode = (int)response.StatusCode,\n        };\n    }\n\n    return new HttpResponse.Success()\n    {\n        StatusCode = (int)response.StatusCode,\n    };\n}\n')),(0,s.kt)("h2",{parentName:"admonition",id:"stateful-matching"},"Stateful Matching"),(0,s.kt)("p",{parentName:"admonition"},"To reduce memory allocations, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Match")," overload that accepts a generic state parameter as its first argument. This allows your match parameter lambdas to be ",(0,s.kt)("inlineCode",{parentName:"p"},"static")," but still flow state through:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'using Dunet;\nusing static Expression;\n\nvar environment = new Dictionary<string, int>()\n{\n    ["a"] = 1,\n    ["b"] = 2,\n    ["c"] = 3,\n};\n\nvar expression = new Add(new Variable("a"), new Multiply(new Number(2), new Variable("b")));\nvar result = Evaluate(environment, expression);\n\nConsole.WriteLine(result); // "5"\n\nstatic int Evaluate(Dictionary<string, int> env, Expression exp) =>\n    exp.Match(\n        // 1. Pass your state "container" as the first parameter.\n        state: env,\n        // 2. Use static lambdas for each variant\'s match method.\n        static (_, number) => number.Value,\n        // 3. Reference the state as the first argument of each lambda.\n        static (state, add) => Evaluate(state, add.Left) + Evaluate(state, add.Right),\n        static (state, mul) => Evaluate(state, mul.Left) * Evaluate(state, mul.Right),\n        static (state, var) => state[var.Value]\n    );\n\n[Union]\npublic partial record Expression\n{\n    public partial record Number(int Value);\n    public partial record Add(Expression Left, Expression Right);\n    public partial record Multiply(Expression Left, Expression Right);\n    public partial record Variable(string Value);\n}\n')),(0,s.kt)("h2",{parentName:"admonition",id:"nest-unions"},"Nest Unions"),(0,s.kt)("p",{parentName:"admonition"},"To declare a union nested within a class or record, the class or record must be ",(0,s.kt)("inlineCode",{parentName:"p"},"partial"),". For example:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"// This type declaration must be partial.\npublic partial class Parent1\n{\n    // So must this one.\n    public partial class Parent2\n    {\n        // Unions must always be partial.\n        [Union]\n        public partial record Nested\n        {\n            public partial record Variant1;\n            public partial record Variant2;\n        }\n    }\n}\n")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cs"},"// Access variants like any other nested type.\nvar variant1 = new Parent1.Parent2.Nested.Variant1();\n"))),(0,s.kt)("h3",{id:"about"},"About"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Add union types to C#  - similar with F#/TS discriminated unions"),(0,s.kt)("p",{parentName:"admonition"},"Check his examples-  awesome")),(0,s.kt)("h2",{id:"how-to-use"},"How to use"),(0,s.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(u.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,s.kt)("p",null,"This is the CSharp Project that references ",(0,s.kt)("strong",{parentName:"p"},"dunet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net7.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <PackageReference Include="Dunet" Version="1.8.0">\n            <PrivateAssets>all</PrivateAssets>\n            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n        </PackageReference>\n    </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n</Project>\n\n'))),(0,s.kt)(u.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\dunet\\src\\duneDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,s.kt)("p",null,"  This is the use of ",(0,s.kt)("strong",{parentName:"p"},"dunet")," in ",(0,s.kt)("em",{parentName:"p"},"Program.cs")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://github.com/domn1995/dunet for more examples\nusing duneDemo;\nConsole.WriteLine(WhatIsTheString.FromString("1"));\n\nConsole.WriteLine(WhatIsTheString.FromString("Andrei"));\n\nConsole.WriteLine(WhatIsTheString.FromString("1970-04-16"));\n\nConsole.WriteLine("Enter something - 1, 1970-04-16 or Andrei !");\nvar readLine = Console.ReadLine();\nvar opt= WhatIsTheString.FromString(readLine);\nConsole.WriteLine(opt);\n//if if it long\nopt.MatchIsLong(\n    l => Console.WriteLine("is long " + l.value),\n    () => Console.WriteLine("is not long")\n    ) ;\n//C# switch\nvar x=opt switch\n{\n    WhatIsTheString.IsLong l => "is long " +l.value,\n    WhatIsTheString.IsDate d=> "is date "+ d.value,\n    WhatIsTheString.IsString s=>"is string "+ s.value,\n    WhatIsTheString.IsNullWhiteSpace w=>"no data",\n    _ => throw new NotImplementedException()\n\n};\nConsole.WriteLine(x);\n\n\n\n\n\n'))),(0,s.kt)(u.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\dunet\\src\\duneDemo\\Recognize.cs",label:"Recognize.cs",mdxType:"TabItem"},(0,s.kt)("p",null,"  This is the use of ",(0,s.kt)("strong",{parentName:"p"},"dunet")," in ",(0,s.kt)("em",{parentName:"p"},"Recognize.cs")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Dunet;\nnamespace duneDemo;\n\n[Union]\npartial record WhatIsTheString\n{\n    partial record IsString(string value);\n    partial record IsLong(long value);\n    partial record IsDate(DateTime value);\n\n    partial record IsNullWhiteSpace();\n\n    public static WhatIsTheString FromString(string? value)\n    {\n        if (string.IsNullOrWhiteSpace(value))\n            return new IsNullWhiteSpace();\n\n        if(long.TryParse(value, out var longValue))\n        {\n            return new IsLong(longValue);\n        }\n        if(DateTime.TryParse(value, out var dateTimeValue))\n        {\n            return new IsDate(dateTimeValue);\n        }\n        return new IsString(value);\n    }\n\n}\n\n")))),(0,s.kt)("h3",{id:"generated-files"},"Generated Files"),(0,s.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(u.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\dunet\\src\\duneDemo\\obj\\GX\\Dunet\\Dunet.UnionAttributeGeneration.UnionAttributeGenerator\\UnionAttribute.g.cs",label:"UnionAttribute.g.cs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using System;\n\nnamespace Dunet;\n\n/// <summary>\n/// Enables dunet union source generation for the decorated partial record.\n/// </summary>\n[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\ninternal sealed class UnionAttribute : Attribute {}\n"))),(0,s.kt)(u.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\dunet\\src\\duneDemo\\obj\\GX\\Dunet\\Dunet.UnionGeneration.UnionGenerator\\duneDemo.WhatIsTheString.g.cs",label:"duneDemo.WhatIsTheString.g.cs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"#pragma warning disable 1591\nnamespace duneDemo;\nabstract partial record WhatIsTheString\n{\n    private WhatIsTheString() {}\n\n    public abstract TMatchOutput Match<TMatchOutput>(\n        System.Func<IsString, TMatchOutput> @isString,\n        System.Func<IsLong, TMatchOutput> @isLong,\n        System.Func<IsDate, TMatchOutput> @isDate,\n        System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n    );\n    public abstract void Match(\n        System.Action<IsString> @isString,\n        System.Action<IsLong> @isLong,\n        System.Action<IsDate> @isDate,\n        System.Action<IsNullWhiteSpace> @isNullWhiteSpace\n    );\n\n    public abstract TMatchOutput Match<TState, TMatchOutput>(\n        TState state,\n        System.Func<TState, IsString, TMatchOutput> @isString,\n        System.Func<TState, IsLong, TMatchOutput> @isLong,\n        System.Func<TState, IsDate, TMatchOutput> @isDate,\n        System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n    );\n    public abstract void Match<TState>(\n        TState state,\n        System.Action<TState, IsString> @isString,\n        System.Action<TState, IsLong> @isLong,\n        System.Action<TState, IsDate> @isDate,\n        System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace\n    );\n\n    public abstract TMatchOutput MatchIsString<TMatchOutput>(\n        System.Func<IsString, TMatchOutput> @isString,\n        System.Func<TMatchOutput> @else\n    );\n    public abstract TMatchOutput MatchIsLong<TMatchOutput>(\n        System.Func<IsLong, TMatchOutput> @isLong,\n        System.Func<TMatchOutput> @else\n    );\n    public abstract TMatchOutput MatchIsDate<TMatchOutput>(\n        System.Func<IsDate, TMatchOutput> @isDate,\n        System.Func<TMatchOutput> @else\n    );\n    public abstract TMatchOutput MatchIsNullWhiteSpace<TMatchOutput>(\n        System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n        System.Func<TMatchOutput> @else\n    );\n\n    public abstract void MatchIsString(\n        System.Action<IsString> @isString,\n        System.Action @else\n    );\n    public abstract void MatchIsLong(\n        System.Action<IsLong> @isLong,\n        System.Action @else\n    );\n    public abstract void MatchIsDate(\n        System.Action<IsDate> @isDate,\n        System.Action @else\n    );\n    public abstract void MatchIsNullWhiteSpace(\n        System.Action<IsNullWhiteSpace> @isNullWhiteSpace,\n        System.Action @else\n    );\n\n    public abstract TMatchOutput MatchIsString<TState, TMatchOutput>(\n        TState state,\n        System.Func<TState, IsString, TMatchOutput> @isString,\n        System.Func<TState, TMatchOutput> @else\n    );\n    public abstract TMatchOutput MatchIsLong<TState, TMatchOutput>(\n        TState state,\n        System.Func<TState, IsLong, TMatchOutput> @isLong,\n        System.Func<TState, TMatchOutput> @else\n    );\n    public abstract TMatchOutput MatchIsDate<TState, TMatchOutput>(\n        TState state,\n        System.Func<TState, IsDate, TMatchOutput> @isDate,\n        System.Func<TState, TMatchOutput> @else\n    );\n    public abstract TMatchOutput MatchIsNullWhiteSpace<TState, TMatchOutput>(\n        TState state,\n        System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n        System.Func<TState, TMatchOutput> @else\n    );\n\n    public abstract void MatchIsString<TState>(\n        TState state,\n        System.Action<TState, IsString> @isString,\n        System.Action<TState> @else\n    );\n    public abstract void MatchIsLong<TState>(\n        TState state,\n        System.Action<TState, IsLong> @isLong,\n        System.Action<TState> @else\n    );\n    public abstract void MatchIsDate<TState>(\n        TState state,\n        System.Action<TState, IsDate> @isDate,\n        System.Action<TState> @else\n    );\n    public abstract void MatchIsNullWhiteSpace<TState>(\n        TState state,\n        System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace,\n        System.Action<TState> @else\n    );\n\n    public sealed partial record IsString : WhatIsTheString\n    {\n        public override TMatchOutput Match<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isString(this);\n        public override void Match(\n            System.Action<IsString> @isString,\n            System.Action<IsLong> @isLong,\n            System.Action<IsDate> @isDate,\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isString(this);\n        public override TMatchOutput Match<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isString(state, this);\n        public override void Match<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isString(state, this);\n        public override TMatchOutput MatchIsString<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<TMatchOutput> @else\n        ) => @isString(this);\n        public override TMatchOutput MatchIsLong<TMatchOutput>(\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsDate<TMatchOutput>(\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsNullWhiteSpace<TMatchOutput>(\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override void MatchIsString(\n            System.Action<IsString> @isString,\n            System.Action @else\n        ) => @isString(this);\n        public override void MatchIsLong(\n            System.Action<IsLong> @isLong,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsDate(\n            System.Action<IsDate> @isDate,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsNullWhiteSpace(\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action @else\n        ) => @else();\n        public override TMatchOutput MatchIsString<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, TMatchOutput> @else\n        ) => @isString(state, this);\n        public override TMatchOutput MatchIsLong<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsDate<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsNullWhiteSpace<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override void MatchIsString<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState> @else\n        ) => @isString(state, this);\n        public override void MatchIsLong<TState>(\n        TState state,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsDate<TState>(\n        TState state,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsNullWhiteSpace<TState>(\n        TState state,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action<TState> @else\n        ) => @else(state);\n    }\n\n    public sealed partial record IsLong : WhatIsTheString\n    {\n        public override TMatchOutput Match<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isLong(this);\n        public override void Match(\n            System.Action<IsString> @isString,\n            System.Action<IsLong> @isLong,\n            System.Action<IsDate> @isDate,\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isLong(this);\n        public override TMatchOutput Match<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isLong(state, this);\n        public override void Match<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isLong(state, this);\n        public override TMatchOutput MatchIsString<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsLong<TMatchOutput>(\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<TMatchOutput> @else\n        ) => @isLong(this);\n        public override TMatchOutput MatchIsDate<TMatchOutput>(\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsNullWhiteSpace<TMatchOutput>(\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override void MatchIsString(\n            System.Action<IsString> @isString,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsLong(\n            System.Action<IsLong> @isLong,\n            System.Action @else\n        ) => @isLong(this);\n        public override void MatchIsDate(\n            System.Action<IsDate> @isDate,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsNullWhiteSpace(\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action @else\n        ) => @else();\n        public override TMatchOutput MatchIsString<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsLong<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, TMatchOutput> @else\n        ) => @isLong(state, this);\n        public override TMatchOutput MatchIsDate<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsNullWhiteSpace<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override void MatchIsString<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsLong<TState>(\n        TState state,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState> @else\n        ) => @isLong(state, this);\n        public override void MatchIsDate<TState>(\n        TState state,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsNullWhiteSpace<TState>(\n        TState state,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action<TState> @else\n        ) => @else(state);\n    }\n\n    public sealed partial record IsDate : WhatIsTheString\n    {\n        public override TMatchOutput Match<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isDate(this);\n        public override void Match(\n            System.Action<IsString> @isString,\n            System.Action<IsLong> @isLong,\n            System.Action<IsDate> @isDate,\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isDate(this);\n        public override TMatchOutput Match<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isDate(state, this);\n        public override void Match<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isDate(state, this);\n        public override TMatchOutput MatchIsString<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsLong<TMatchOutput>(\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsDate<TMatchOutput>(\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<TMatchOutput> @else\n        ) => @isDate(this);\n        public override TMatchOutput MatchIsNullWhiteSpace<TMatchOutput>(\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override void MatchIsString(\n            System.Action<IsString> @isString,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsLong(\n            System.Action<IsLong> @isLong,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsDate(\n            System.Action<IsDate> @isDate,\n            System.Action @else\n        ) => @isDate(this);\n        public override void MatchIsNullWhiteSpace(\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action @else\n        ) => @else();\n        public override TMatchOutput MatchIsString<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsLong<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsDate<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, TMatchOutput> @else\n        ) => @isDate(state, this);\n        public override TMatchOutput MatchIsNullWhiteSpace<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override void MatchIsString<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsLong<TState>(\n        TState state,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsDate<TState>(\n        TState state,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState> @else\n        ) => @isDate(state, this);\n        public override void MatchIsNullWhiteSpace<TState>(\n        TState state,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action<TState> @else\n        ) => @else(state);\n    }\n\n    public sealed partial record IsNullWhiteSpace : WhatIsTheString\n    {\n        public override TMatchOutput Match<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isNullWhiteSpace(this);\n        public override void Match(\n            System.Action<IsString> @isString,\n            System.Action<IsLong> @isLong,\n            System.Action<IsDate> @isDate,\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isNullWhiteSpace(this);\n        public override TMatchOutput Match<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n        ) => @isNullWhiteSpace(state, this);\n        public override void Match<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace\n        ) => @isNullWhiteSpace(state, this);\n        public override TMatchOutput MatchIsString<TMatchOutput>(\n            System.Func<IsString, TMatchOutput> @isString,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsLong<TMatchOutput>(\n            System.Func<IsLong, TMatchOutput> @isLong,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsDate<TMatchOutput>(\n            System.Func<IsDate, TMatchOutput> @isDate,\n            System.Func<TMatchOutput> @else\n        ) => @else();\n        public override TMatchOutput MatchIsNullWhiteSpace<TMatchOutput>(\n            System.Func<IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TMatchOutput> @else\n        ) => @isNullWhiteSpace(this);\n        public override void MatchIsString(\n            System.Action<IsString> @isString,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsLong(\n            System.Action<IsLong> @isLong,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsDate(\n            System.Action<IsDate> @isDate,\n            System.Action @else\n        ) => @else();\n        public override void MatchIsNullWhiteSpace(\n            System.Action<IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action @else\n        ) => @isNullWhiteSpace(this);\n        public override TMatchOutput MatchIsString<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsString, TMatchOutput> @isString,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsLong<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsLong, TMatchOutput> @isLong,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsDate<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsDate, TMatchOutput> @isDate,\n            System.Func<TState, TMatchOutput> @else\n        ) => @else(state);\n        public override TMatchOutput MatchIsNullWhiteSpace<TState, TMatchOutput>(\n        TState state,\n            System.Func<TState, IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n            System.Func<TState, TMatchOutput> @else\n        ) => @isNullWhiteSpace(state, this);\n        public override void MatchIsString<TState>(\n        TState state,\n            System.Action<TState, IsString> @isString,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsLong<TState>(\n        TState state,\n            System.Action<TState, IsLong> @isLong,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsDate<TState>(\n        TState state,\n            System.Action<TState, IsDate> @isDate,\n            System.Action<TState> @else\n        ) => @else(state);\n        public override void MatchIsNullWhiteSpace<TState>(\n        TState state,\n            System.Action<TState, IsNullWhiteSpace> @isNullWhiteSpace,\n            System.Action<TState> @else\n        ) => @isNullWhiteSpace(state, this);\n    }\n\n}\n#pragma warning restore 1591\n\n"))),(0,s.kt)(u.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\dunet\\src\\duneDemo\\obj\\GX\\Dunet\\Dunet.UnionGeneration.UnionGenerator\\duneDemo.WhatIsTheStringMatchExtensions.g.cs",label:"duneDemo.WhatIsTheStringMatchExtensions.g.cs",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"#pragma warning disable 1591\n\nnamespace duneDemo;\n\ninternal static class WhatIsTheStringMatchExtensions\n{\n    public static async System.Threading.Tasks.Task<TMatchOutput> MatchAsync<TMatchOutput>(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsString, TMatchOutput> @isString,\n        System.Func<WhatIsTheString.IsLong, TMatchOutput> @isLong,\n        System.Func<WhatIsTheString.IsDate, TMatchOutput> @isDate,\n        System.Func<WhatIsTheString.IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n    )\n    => (await unionTask.ConfigureAwait(false)).Match(\n            @isString,\n            @isLong,\n            @isDate,\n            @isNullWhiteSpace\n        );\n    public static async System.Threading.Tasks.ValueTask<TMatchOutput> MatchAsync<TMatchOutput>(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsString, TMatchOutput> @isString,\n        System.Func<WhatIsTheString.IsLong, TMatchOutput> @isLong,\n        System.Func<WhatIsTheString.IsDate, TMatchOutput> @isDate,\n        System.Func<WhatIsTheString.IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace\n    )\n    => (await unionTask.ConfigureAwait(false)).Match(\n            @isString,\n            @isLong,\n            @isDate,\n            @isNullWhiteSpace\n        );\n    public static async System.Threading.Tasks.Task MatchAsync(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsString> @isString,\n        System.Action<WhatIsTheString.IsLong> @isLong,\n        System.Action<WhatIsTheString.IsDate> @isDate,\n        System.Action<WhatIsTheString.IsNullWhiteSpace> @isNullWhiteSpace\n    )\n    => (await unionTask.ConfigureAwait(false)).Match(\n            @isString,\n            @isLong,\n            @isDate,\n            @isNullWhiteSpace\n        );\n    public static async System.Threading.Tasks.ValueTask MatchAsync(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsString> @isString,\n        System.Action<WhatIsTheString.IsLong> @isLong,\n        System.Action<WhatIsTheString.IsDate> @isDate,\n        System.Action<WhatIsTheString.IsNullWhiteSpace> @isNullWhiteSpace\n    )\n    => (await unionTask.ConfigureAwait(false)).Match(\n            @isString,\n            @isLong,\n            @isDate,\n            @isNullWhiteSpace\n        );\n    public static async System.Threading.Tasks.Task<TMatchOutput> MatchIsStringAsync<TMatchOutput>(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsString, TMatchOutput> @isString,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsString(\n                    @isString,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task<TMatchOutput> MatchIsLongAsync<TMatchOutput>(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsLong, TMatchOutput> @isLong,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsLong(\n                    @isLong,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task<TMatchOutput> MatchIsDateAsync<TMatchOutput>(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsDate, TMatchOutput> @isDate,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsDate(\n                    @isDate,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task<TMatchOutput> MatchIsNullWhiteSpaceAsync<TMatchOutput>(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsNullWhiteSpace(\n                    @isNullWhiteSpace,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask<TMatchOutput> MatchIsStringAsync<TMatchOutput>(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsString, TMatchOutput> @isString,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsString(\n                    @isString,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask<TMatchOutput> MatchIsLongAsync<TMatchOutput>(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsLong, TMatchOutput> @isLong,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsLong(\n                    @isLong,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask<TMatchOutput> MatchIsDateAsync<TMatchOutput>(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsDate, TMatchOutput> @isDate,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsDate(\n                    @isDate,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask<TMatchOutput> MatchIsNullWhiteSpaceAsync<TMatchOutput>(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Func<WhatIsTheString.IsNullWhiteSpace, TMatchOutput> @isNullWhiteSpace,\n        System.Func<TMatchOutput> @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsNullWhiteSpace(\n                    @isNullWhiteSpace,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task MatchIsStringAsync(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsString> @isString,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsString(\n                    @isString,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task MatchIsLongAsync(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsLong> @isLong,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsLong(\n                    @isLong,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task MatchIsDateAsync(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsDate> @isDate,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsDate(\n                    @isDate,\n                    @else\n                );\n    public static async System.Threading.Tasks.Task MatchIsNullWhiteSpaceAsync(\n        this System.Threading.Tasks.Task<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsNullWhiteSpace> @isNullWhiteSpace,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsNullWhiteSpace(\n                    @isNullWhiteSpace,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask MatchIsStringAsync(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsString> @isString,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsString(\n                    @isString,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask MatchIsLongAsync(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsLong> @isLong,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsLong(\n                    @isLong,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask MatchIsDateAsync(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsDate> @isDate,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsDate(\n                    @isDate,\n                    @else\n                );\n    public static async System.Threading.Tasks.ValueTask MatchIsNullWhiteSpaceAsync(\n        this System.Threading.Tasks.ValueTask<WhatIsTheString> unionTask,\n        System.Action<WhatIsTheString.IsNullWhiteSpace> @isNullWhiteSpace,\n        System.Action @else\n    )\n        =>\n            (await unionTask.ConfigureAwait(false))\n                .MatchIsNullWhiteSpace(\n                    @isNullWhiteSpace,\n                    @else\n                );\n}\n#pragma warning restore 1591\n\n")))),(0,s.kt)("h2",{id:"usefull"},"Usefull"),(0,s.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{target:"_blank",href:n(275).Z},"Download Example project dunet "))),(0,s.kt)("h3",{id:"share-dunet"},"Share dunet"),(0,s.kt)("ul",null,(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fdunet&quote=dunet",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fdunet&text=dunet:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fdunet",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fdunet&title=dunet",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fdunet&title=dunet&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fdunet",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/dunet"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/dunet")))}T.isMDXComponent=!0},275:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/files/dunet-c65f20c9540aa3e643896cc88c123325.zip"}}]);