"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2288],{50488:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>m,default:()=>c,frontMatter:()=>u,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"RSCG-Examples/ArgumentParsing","title":"196 - ArgumentParsing","description":"Transform command line arguments into strongly typed objects","source":"@site/docs/RSCG-Examples/ArgumentParsing.md","sourceDirName":"RSCG-Examples","slug":"/ArgumentParsing","permalink":"/RSCG_Examples/v2/docs/ArgumentParsing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/ArgumentParsing.md","tags":[],"version":"current","sidebarPosition":1960,"frontMatter":{"sidebar_position":1960,"title":"196 - ArgumentParsing","description":"Transform command line arguments into strongly typed objects","slug":"/ArgumentParsing"},"sidebar":"tutorialSidebar","previous":{"title":"195 - Comparison","permalink":"/RSCG_Examples/v2/docs/Comparison"},"next":{"title":"197 - BunnyTailServiceRegistration","permalink":"/RSCG_Examples/v2/docs/BunnyTailServiceRegistration"}}');var s=r(74848),a=r(28453),i=r(11470),l=r(19365),o=r(14252);const u={sidebar_position:1960,title:"196 - ArgumentParsing",description:"Transform command line arguments into strongly typed objects",slug:"/ArgumentParsing"},m="ArgumentParsing  by",g={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Overview",id:"overview",level:2},{value:"Quick start example",id:"quick-start-example",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share ArgumentParsing",id:"share-argumentparsing",level:3},{value:"In the same category (CommandLine) - 0 other generators",id:"in-the-same-category-commandline---0-other-generators",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"argumentparsing--by",children:"ArgumentParsing  by"})}),"\n",(0,s.jsx)(o.A,{toc:p}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/ArgumentParsing/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/ArgumentParsing?label=ArgumentParsing",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/DoctorKrolic/ArgumentParsing",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/DoctorKrolic/ArgumentParsing?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/DoctorKrolic/ArgumentParsing?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"ArgumentParsing"})]}),(0,s.jsx)(n.p,{children:"Source generator based command line arguments parser"}),(0,s.jsx)(n.p,{children:"Author:"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/ArgumentParsing/",children:"https://www.nuget.org/packages/ArgumentParsing/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/DoctorKrolic/ArgumentParsing",children:"https://github.com/DoctorKrolic/ArgumentParsing"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/DoctorKrolic/ArgumentParsing",children:"https://github.com/DoctorKrolic/ArgumentParsing"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.h1,{id:"argument-parsing",children:"Argument Parsing"}),(0,s.jsx)(n.p,{children:"Library for command line arguments parsing with intuitive API in declarative style, allowing you to build complex command line applications by simply declaring options type and annotating its members with attributes to get the desired behavior. All logic is source-generated, making this library completely AOT-friendly!"}),(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Best works on latest .NET version, but is ",(0,s.jsx)(n.strong,{children:".NET Standard 2.0 compatible"}),", meaning it works on a huge variety of .NET versions, including .NET Framework"]}),"\n",(0,s.jsxs)(n.li,{children:["Provides simple declarative API: you define ",(0,s.jsx)(n.em,{children:"what"})," you want and the library figures out ",(0,s.jsx)(n.em,{children:"how"})," to achieve that"]}),"\n",(0,s.jsxs)(n.li,{children:["Supports wide variety of types, including nullable value types and immutable sequences like ",(0,s.jsx)(n.code,{children:"ImmutableArray<T>"})]}),"\n",(0,s.jsxs)(n.li,{children:["Good integration with modern C# features (e.g. you can specify a required option/parameter by making its corresponding property ",(0,s.jsx)(n.code,{children:"required"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Provides default implementations of ",(0,s.jsx)(n.code,{children:"--help"})," and ",(0,s.jsx)(n.code,{children:"--version"})," commands with additional customization"]}),"\n",(0,s.jsx)(n.li,{children:"All parsing logic is entirely source-generated, making this library completely NativeAOT-friendly"}),"\n",(0,s.jsx)(n.li,{children:"Delivers rich developer experience: the editor provides real-time diagnostics, including error detection, code suggestions and more as you type"}),"\n",(0,s.jsx)(n.li,{children:"Includes detailed and comprehensive wiki documentation"}),"\n"]}),(0,s.jsx)(n.h2,{id:"quick-start-example",children:"Quick start example"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'using ArgumentParsing;\nusing ArgumentParsing.Generated;\nusing ArgumentParsing.Results;\nusing ArgumentParsing.SpecialCommands.Help;\nusing System;\nusing System.Collections.Immutable;\nusing System.Linq;\n\nnamespace SimpleSumApp;\n\npartial class Program\n{\n    private static void Main(string[] args)\n    {\n        ParseArguments(args).ExecuteDefaults(ExecuteMainApp);\n    }\n\n    [GeneratedArgumentParser]\n    private static partial ParseResult<Options> ParseArguments(string[] args);\n\n    private static void ExecuteMainApp(Options options)\n    {\n        // At this point all errors and special cases are handled,\n        // so we get valid options object we can work with\n        var sum = options.FirstRequiredParameter + options.SecondRequiredParameter;\n        if (options.Verbose)\n        {\n            Console.WriteLine($"Sum of 2 required parameters: {sum}");\n        }\n\n        var remainingSum = options.RemainingParameters.Sum();\n        if (options.Verbose)\n        {\n            Console.WriteLine($"Sum of remaining parameters: {remainingSum}");\n        }\n\n        Console.WriteLine($"Total sum: {sum + remainingSum}");\n    }\n}\n\n[OptionsType]\nclass Options\n{\n    [Option(\'v\'), HelpInfo("Enables verbose logging")]\n    public bool Verbose { get; init; }\n\n    [Parameter(0)]\n    public required int FirstRequiredParameter { get; init; }\n\n    [Parameter(1)]\n    public required int SecondRequiredParameter { get; init; }\n\n    [RemainingParameters]\n    public ImmutableArray<int> RemainingParameters { get; init; }\n}\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Transform command line arguments into strongly typed objects"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"ArgumentParsing"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  \x3c!--<ItemGroup>\n    <ProjectReference Include="..\\src\\ArgumentParsing\\ArgumentParsing.csproj" />\n    <ProjectReference Include="..\\src\\ArgumentParsing.Generators\\ArgumentParsing.Generators.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all" />\n  </ItemGroup>--\x3e\n  \n  \n  <PropertyGroup>\n    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n    <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n  </PropertyGroup>\n  \n  \n  <ItemGroup>\n    <PackageReference Include="ArgumentParsing" Version="0.3.0" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all" />\n  </ItemGroup>\n\n</Project>\n\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ArgumentParsing\\src\\ArgPars\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"ArgumentParsing"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using ArgumentParsing;\nusing ArgumentParsing.Results;\n\nnamespace ArgPars;\n\npartial class Program\n{\n    /// <summary>\n    /// Execute in the folder with csproj file:\n    ///\n    /// dotnet run -- --help\n    /// dotnet run -- --version\n    /// dotnet run -- sample-input.txt\n    /// dotnet run -- -v -f Xml sample-input.txt\n    /// </summary>\n    /// <param name="args"></param>\n    private static void Main(string[] args)\n    {\n        // Parse the command line arguments with the generated parser\n        var result = ParseArguments(args);\n        \n        // Handle the result based on its state\n        switch (result.State) \n        {\n            case ParseResultState.ParsedOptions:\n                ExecuteMainApp(result.Options!);\n                break;\n            case ParseResultState.ParsedWithErrors:\n                Console.Error.WriteLine("Error parsing arguments:");\n                if (result.Errors != null)\n                {\n                    foreach (var error in result.Errors)\n                    {\n                        Console.Error.WriteLine($"  {error.GetMessage()}");\n                    }\n                }\n                Environment.Exit(1);\n                break;\n            case ParseResultState.ParsedSpecialCommand:\n                var exitCode = result.SpecialCommandHandler!.HandleCommand();\n                Environment.Exit(exitCode);\n                break;\n        }\n    }\n\n    [GeneratedArgumentParser]\n    private static partial ParseResult<FileProcessorOptions> ParseArguments(string[] args);\n\n    private static void ExecuteMainApp(FileProcessorOptions options)\n    {\n        // At this point all errors and special cases are handled,\n        // so we get valid options object we can work with\n        \n        Console.WriteLine("=== File Processor Tool ===");\n        Console.WriteLine($"Verbose mode: {options.Verbose}");\n\n        if (options.Verbose)\n        {\n            Console.WriteLine($"Verbose mode: enabled");\n            Console.WriteLine($"Output format: {options.OutputFormat}");\n            Console.WriteLine($"Max file size: {options.MaxFileSizeBytes} bytes");\n            Console.WriteLine($"Input file: {options.InputFile}");\n            \n            if (!string.IsNullOrEmpty(options.OutputFile))\n                Console.WriteLine($"Output file: {options.OutputFile}");\n                \n            if (options.AdditionalFiles.Length > 0)\n            {\n                Console.WriteLine($"Additional files ({options.AdditionalFiles.Length}):");\n                foreach (var file in options.AdditionalFiles)\n                {\n                    Console.WriteLine($"  - {file}");\n                }\n            }\n        }\n\n        //TODO: Simulate file processing\n        \n    }\n\n    \n\n    \n}\n\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ArgumentParsing\\src\\ArgPars\\FileProcessorOptions.cs",label:"FileProcessorOptions.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"ArgumentParsing"})," in ",(0,s.jsx)(n.em,{children:"FileProcessorOptions.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using ArgumentParsing;\nusing ArgumentParsing.SpecialCommands.Help;\nusing System.Collections.Immutable;\n\nnamespace ArgPars;\n\n[OptionsType]\nclass FileProcessorOptions\n{\n    [Option(\'v\', "verbose"), HelpInfo("Enable verbose logging and detailed output")]\n    public bool Verbose { get; init; }\n\n    [Option(\'f\', "format"), HelpInfo("Output format for processed files (json, xml, csv)")]\n    public OutputFormat OutputFormat { get; init; } = OutputFormat.Json;\n\n    [Option(\'m\', "max-size"), HelpInfo("Maximum file size in bytes (default: 10MB)")]\n    public long MaxFileSizeBytes { get; init; } = 10 * 1024 * 1024; // 10MB default\n\n    [Option(\'o\', "output"), HelpInfo("Output file path (optional, defaults to input file with new extension)")]\n    public string? OutputFile { get; init; }\n\n    [Parameter(0, Name = "input-file"), HelpInfo("Path to the input file to process")]\n    public required string InputFile { get; init; }\n\n    [RemainingParameters, HelpInfo("Additional files to process")]\n    public ImmutableArray<string> AdditionalFiles { get; init; }\n}\n\n'})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ArgumentParsing\\src\\ArgPars\\obj\\GX\\ArgumentParsing.Generators\\ArgumentParsing.Generators.ArgumentParserGenerator\\ExampleProject.FileProcessorOptions.g.cs",label:"ExampleProject.FileProcessorOptions.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#nullable disable\n#pragma warning disable\n\nnamespace ArgumentParsing.Generated\n{\n    internal static partial class ParseResultExtensions\n    {\n        /// <summary>\n        /// Executes common default actions for the given <see cref="global::ArgumentParsing.Results.ParseResult{TOptions}"/>\n        /// <list type="bullet">\n        /// <item>If <paramref name="result"/> is in <see cref="global::ArgumentParsing.Results.ParseResultState.ParsedOptions"/> state invokes provided <paramref name="action"/> with parsed options object</item>\n        /// <item>If <paramref name="result"/> is in <see cref="global::ArgumentParsing.Results.ParseResultState.ParsedWithErrors"/> state writes help screen text with parse errors to <see cref="global::System.Console.Error"/> and exits application with code 1</item>\n        /// <item>If <paramref name="result"/> is in <see cref="global::ArgumentParsing.Results.ParseResultState.ParsedSpecialCommand"/> state executes parsed handler and exits application with code, returned from the handler</item>\n        /// </list>\n        /// </summary>\n        /// <param name="result">Parse result</param>\n        /// <param name="action">Action, which will be invoked if options type is correctly parsed</param>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ArgumentParsing.Generators.ArgumentParserGenerator", "0.3.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]\n        public static void ExecuteDefaults(this global::ArgumentParsing.Results.ParseResult<global::ExampleProject.FileProcessorOptions> result, global::System.Action<global::ExampleProject.FileProcessorOptions> action)\n        {\n            switch (result.State)\n            {\n                case global::ArgumentParsing.Results.ParseResultState.ParsedOptions:\n                    action(result.Options);\n                    break;\n                case global::ArgumentParsing.Results.ParseResultState.ParsedWithErrors:\n                    string errorScreenText = global::ArgumentParsing.Generated.HelpCommandHandler_ExampleProject_FileProcessorOptions.GenerateHelpText(result.Errors);\n                    global::System.Console.Error.WriteLine(errorScreenText);\n                    global::System.Environment.Exit(1);\n                    break;\n                case global::ArgumentParsing.Results.ParseResultState.ParsedSpecialCommand:\n                    int exitCode = result.SpecialCommandHandler.HandleCommand();\n                    global::System.Environment.Exit(exitCode);\n                    break;\n            }\n        }\n    }\n}\n\nnamespace ExampleProject\n{\n    partial class Program\n    {\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ArgumentParsing.Generators.ArgumentParserGenerator", "0.3.0.0")]\n        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]\n        private static partial global::ArgumentParsing.Results.ParseResult<global::ExampleProject.FileProcessorOptions> ParseArguments(string[] args)\n        {\n            bool Verbose_val = default(bool);\n            global::ExampleProject.OutputFormat OutputFormat_val = default(global::ExampleProject.OutputFormat);\n            long MaxFileSizeBytes_val = default(long);\n            string OutputFile_val = default(string);\n            string InputFile_val = default(string);\n            global::System.Collections.Immutable.ImmutableArray<string>.Builder remainingParametersBuilder = global::System.Collections.Immutable.ImmutableArray.CreateBuilder<string>();\n\n            int state = -3;\n            int seenOptions = 0;\n            global::System.Collections.Generic.HashSet<global::ArgumentParsing.Results.Errors.ParseError> errors = null;\n            global::System.Span<global::System.Range> longArgSplit = stackalloc global::System.Range[2];\n            global::System.ReadOnlySpan<char> latestOptionName = default(global::System.ReadOnlySpan<char>);\n            string previousArgument = null;\n            int parameterIndex = 0;\n\n            foreach (string arg in args)\n            {\n                if (state == -3)\n                {\n                    switch (arg)\n                    {\n                        case "--help":\n                            return new global::ArgumentParsing.Results.ParseResult<global::ExampleProject.FileProcessorOptions>(new global::ArgumentParsing.Generated.HelpCommandHandler_ExampleProject_FileProcessorOptions());\n                        case "--version":\n                            return new global::ArgumentParsing.Results.ParseResult<global::ExampleProject.FileProcessorOptions>(new global::ArgumentParsing.Generated.VersionCommandHandler());\n                    }\n\n                    state = 0;\n                }\n\n                global::System.ReadOnlySpan<char> val;\n\n                bool hasLetters = global::System.Linq.Enumerable.Any(arg, char.IsLetter);\n                bool startsOption = hasLetters && arg.Length > 1 && arg.StartsWith(\'-\');\n\n                if (state > 0 && startsOption)\n                {\n                    errors ??= new();\n                    errors.Add(new global::ArgumentParsing.Results.Errors.OptionValueIsNotProvidedError(previousArgument));\n                    state = 0;\n                }\n\n                if (state != -2)\n                {\n                    if (arg.StartsWith("--") && (hasLetters || arg.Length == 2 || arg.Contains(\'=\')))\n                    {\n                        global::System.ReadOnlySpan<char> slice = global::System.MemoryExtensions.AsSpan(arg, 2);\n                        int written = global::System.MemoryExtensions.Split(slice, longArgSplit, \'=\');\n\n                        latestOptionName = slice[longArgSplit[0]];\n                        switch (latestOptionName)\n                        {\n                            case "":\n                                if (written == 1)\n                                {\n                                    state = -2;\n                                }\n                                else\n                                {\n                                    errors ??= new();\n                                    errors.Add(new global::ArgumentParsing.Results.Errors.UnrecognizedArgumentError(arg));\n                                }\n                                continue;\n                            case "verbose":\n                                if ((seenOptions & 0b0001) > 0)\n                                {\n                                    errors ??= new();\n                                    errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("verbose"));\n                                }\n                                Verbose_val = true;\n                                state = -10;\n                                seenOptions |= 0b0001;\n                                break;\n                            case "format":\n                                if ((seenOptions & 0b0010) > 0)\n                                {\n                                    errors ??= new();\n                                    errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("format"));\n                                }\n                                state = 2;\n                                seenOptions |= 0b0010;\n                                break;\n                            case "max-size":\n                                if ((seenOptions & 0b0100) > 0)\n                                {\n                                    errors ??= new();\n                                    errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("max-size"));\n                                }\n                                state = 3;\n                                seenOptions |= 0b0100;\n                                break;\n                            case "output":\n                                if ((seenOptions & 0b1000) > 0)\n                                {\n                                    errors ??= new();\n                                    errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("output"));\n                                }\n                                state = 4;\n                                seenOptions |= 0b1000;\n                                break;\n                            default:\n                                errors ??= new();\n                                errors.Add(new global::ArgumentParsing.Results.Errors.UnknownOptionError(latestOptionName.ToString(), arg));\n                                if (written == 1)\n                                {\n                                    state = -1;\n                                }\n                                goto continueMainLoop;\n                        }\n\n                        if (written == 2)\n                        {\n                            val = slice[longArgSplit[1]];\n                            goto decodeValue;\n                        }\n\n                        goto continueMainLoop;\n                    }\n\n                    if (startsOption)\n                    {\n                        global::System.ReadOnlySpan<char> slice = global::System.MemoryExtensions.AsSpan(arg, 1);\n\n                        for (int i = 0; i < slice.Length; i++)\n                        {\n                            if (state > 0)\n                            {\n                                val = slice.Slice(i);\n                                goto decodeValue;\n                            }\n\n                            char shortOptionName = slice[i];\n                            latestOptionName = new global::System.ReadOnlySpan<char>(in slice[i]);\n                            switch (shortOptionName)\n                            {\n                                case \'v\':\n                                    if ((seenOptions & 0b0001) > 0)\n                                    {\n                                        errors ??= new();\n                                        errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("v"));\n                                    }\n                                    Verbose_val = true;\n                                    state = -10;\n                                    seenOptions |= 0b0001;\n                                    break;\n                                case \'f\':\n                                    if ((seenOptions & 0b0010) > 0)\n                                    {\n                                        errors ??= new();\n                                        errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("f"));\n                                    }\n                                    state = 2;\n                                    seenOptions |= 0b0010;\n                                    break;\n                                case \'m\':\n                                    if ((seenOptions & 0b0100) > 0)\n                                    {\n                                        errors ??= new();\n                                        errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("m"));\n                                    }\n                                    state = 3;\n                                    seenOptions |= 0b0100;\n                                    break;\n                                case \'o\':\n                                    if ((seenOptions & 0b1000) > 0)\n                                    {\n                                        errors ??= new();\n                                        errors.Add(new global::ArgumentParsing.Results.Errors.DuplicateOptionError("o"));\n                                    }\n                                    state = 4;\n                                    seenOptions |= 0b1000;\n                                    break;\n                                default:\n                                    if (state <= -10)\n                                    {\n                                        val = slice.Slice(i);\n                                        latestOptionName = new global::System.ReadOnlySpan<char>(in slice[i - 1]);\n                                        goto decodeValue;\n                                    }\n                                    errors ??= new();\n                                    errors.Add(new global::ArgumentParsing.Results.Errors.UnknownOptionError(shortOptionName.ToString(), arg));\n                                    state = -1;\n                                    goto continueMainLoop;\n                            }\n                        }\n\n                        goto continueMainLoop;\n                    }\n                }\n\n                val = global::System.MemoryExtensions.AsSpan(arg);\n\n            decodeValue:\n                switch (state)\n                {\n                    case -1:\n                        break;\n                    case 2:\n                        if (!global::System.Enum.TryParse<global::ExampleProject.OutputFormat>(val, out OutputFormat_val))\n                        {\n                            errors ??= new();\n                            errors.Add(new global::ArgumentParsing.Results.Errors.BadOptionValueFormatError(val.ToString(), latestOptionName.ToString()));\n                        }\n                        break;\n                    case 3:\n                        if (!long.TryParse(val, global::System.Globalization.NumberStyles.Integer, global::System.Globalization.CultureInfo.InvariantCulture, out MaxFileSizeBytes_val))\n                        {\n                            errors ??= new();\n                            errors.Add(new global::ArgumentParsing.Results.Errors.BadOptionValueFormatError(val.ToString(), latestOptionName.ToString()));\n                        }\n                        break;\n                    case 4:\n                        OutputFile_val = val.ToString();\n                        break;\n                    default:\n                        switch (parameterIndex++)\n                        {\n                            case 0:\n                                InputFile_val = arg;\n                                break;\n                            default:\n                                remainingParametersBuilder.Add(arg);\n                                break;\n                        }\n                        break;\n                }\n\n                state = 0;\n\n            continueMainLoop:\n                previousArgument = arg;\n            }\n\n            if (state > 0)\n            {\n                errors ??= new();\n                errors.Add(new global::ArgumentParsing.Results.Errors.OptionValueIsNotProvidedError(previousArgument));\n            }\n\n            if (parameterIndex <= 0)\n            {\n                errors ??= new();\n                errors.Add(new global::ArgumentParsing.Results.Errors.MissingRequiredParameterError(\n                "input-file", 0));\n            }\n\n            if (errors != null)\n            {\n                return new global::ArgumentParsing.Results.ParseResult<global::ExampleProject.FileProcessorOptions>(global::ArgumentParsing.Results.Errors.ParseErrorCollection.AsErrorCollection(errors));\n            }\n\n            global::ExampleProject.FileProcessorOptions options = new global::ExampleProject.FileProcessorOptions\n            {\n                Verbose = Verbose_val,\n                OutputFormat = OutputFormat_val,\n                MaxFileSizeBytes = MaxFileSizeBytes_val,\n                OutputFile = OutputFile_val,\n                InputFile = InputFile_val,\n                AdditionalFiles = remainingParametersBuilder.ToImmutable(),\n            };\n\n            return new global::ArgumentParsing.Results.ParseResult<global::ExampleProject.FileProcessorOptions>(options);\n        }\n    }\n}\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ArgumentParsing\\src\\ArgPars\\obj\\GX\\ArgumentParsing.Generators\\ArgumentParsing.Generators.ArgumentParserGenerator\\HelpCommandHandler.ExampleProject.FileProcessorOptions.g.cs",label:"HelpCommandHandler.ExampleProject.FileProcessorOptions.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#nullable disable\n#pragma warning disable\n\nnamespace ArgumentParsing.Generated\n{\n    /// <summary>\n    /// Default implementation of <c>--help</c> command for <see cref="global::ExampleProject.FileProcessorOptions"/> type\n    /// </summary>\n    [global::ArgumentParsing.SpecialCommands.SpecialCommandAliasesAttribute("--help")]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ArgumentParsing.Generators.ArgumentParserGenerator", "0.3.0.0")]\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]\n    internal sealed class HelpCommandHandler_ExampleProject_FileProcessorOptions : global::ArgumentParsing.SpecialCommands.ISpecialCommandHandler\n    {\n        /// <summary>\n        /// Generates help text for <see cref="global::ExampleProject.FileProcessorOptions"/> type.\n        /// If <paramref name="errors"/> parameter is supplied, generated text will contain an error section\n        /// </summary>\n        /// <param name="errors">Parse errors to include into help text</param>\n        /// <returns>Generated help text</returns>\n        public static string GenerateHelpText(global::ArgumentParsing.Results.Errors.ParseErrorCollection? errors = null)\n        {\n            global::System.Text.StringBuilder helpBuilder = new();\n            helpBuilder.AppendLine("ArgPars 1.0.0");\n            helpBuilder.AppendLine("Copyright (C) " + global::System.DateTime.UtcNow.Year.ToString());\n            if ((object)errors != null)\n            {\n                helpBuilder.AppendLine();\n                helpBuilder.AppendLine("ERROR(S):");\n                foreach (global::ArgumentParsing.Results.Errors.ParseError error in errors)\n                {\n                    helpBuilder.AppendLine("  " + error.GetMessage());\n                }\n            }\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("OPTIONS:");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  -v, --verbose\\tEnable verbose logging and detailed output");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  -f, --format\\tOutput format for processed files (json, xml, csv)");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  -m, --max-size\\tMaximum file size in bytes (default: 10MB)");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  -o, --output\\tOutput file path (optional, defaults to input file with new extension)");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("PARAMETERS:");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  input-file (at index 0)\\tRequired. Path to the input file to process");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  Remaining parameters\\tAdditional files to process");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("COMMANDS:");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  --help\\tShow help screen");\n            helpBuilder.AppendLine();\n            helpBuilder.AppendLine("  --version\\tShow version information");\n            return helpBuilder.ToString();\n        }\n\n        /// <inheritdoc/>\n        public int HandleCommand()\n        {\n            global::System.Console.Out.WriteLine(GenerateHelpText());\n            return 0;\n        }\n    }\n}\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ArgumentParsing\\src\\ArgPars\\obj\\GX\\ArgumentParsing.Generators\\ArgumentParsing.Generators.ArgumentParserGenerator\\VersionCommandHandler.ArgPars.g.cs",label:"VersionCommandHandler.ArgPars.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated/>\n#nullable disable\n#pragma warning disable\n\nnamespace ArgumentParsing.Generated\n{\n    /// <summary>\n    /// Default implementation of <c>--version</c> command for <c>ArgPars</c> assembly\n    /// </summary>\n    [global::ArgumentParsing.SpecialCommands.SpecialCommandAliasesAttribute("--version")]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ArgumentParsing.Generators.ArgumentParserGenerator", "0.3.0.0")]\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]\n    internal sealed class VersionCommandHandler : global::ArgumentParsing.SpecialCommands.ISpecialCommandHandler\n    {\n        /// <inheritdoc/>\n        public int HandleCommand()\n        {\n            global::System.Console.WriteLine("ArgPars 1.0.0");\n            return 0;\n        }\n    }\n}\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(62665).A+"",children:"Download Example project ArgumentParsing "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-argumentparsing",children:"Share ArgumentParsing"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FArgumentParsing&quote=ArgumentParsing",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FArgumentParsing&text=ArgumentParsing:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FArgumentParsing",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FArgumentParsing&title=ArgumentParsing",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FArgumentParsing&title=ArgumentParsing&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FArgumentParsing",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ArgumentParsing",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ArgumentParsing"})}),"\n",(0,s.jsx)(n.h3,{id:"in-the-same-category-commandline---0-other-generators",children:"In the same category (CommandLine) - 0 other generators"})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},62665:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/files/ArgumentParsing-f0680b0aae872541540029c84f960c64.zip"}}]);