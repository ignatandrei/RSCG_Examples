"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3868],{49529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>E,frontMatter:()=>l,metadata:()=>m,toc:()=>p});var o=t(87462),a=(t(67294),t(3905)),r=t(73992),s=t(18679),i=t(68839);const l={sidebar_position:1330,title:"133 - FusionReactor",description:"Enums to string and other extensions",slug:"/FusionReactor"},u="FusionReactor  by OhFlowi",m={unversionedId:"RSCG-Examples/FusionReactor",id:"RSCG-Examples/FusionReactor",title:"133 - FusionReactor",description:"Enums to string and other extensions",source:"@site/docs/RSCG-Examples/FusionReactor.md",sourceDirName:"RSCG-Examples",slug:"/FusionReactor",permalink:"/RSCG_Examples/v2/docs/FusionReactor",draft:!1,tags:[],version:"current",sidebarPosition:1330,frontMatter:{sidebar_position:1330,title:"133 - FusionReactor",description:"Enums to string and other extensions",slug:"/FusionReactor"},sidebar:"tutorialSidebar",previous:{title:"132 - UnionGen",permalink:"/RSCG_Examples/v2/docs/UnionGen"},next:{title:"134 - StronglyTypedUid",permalink:"/RSCG_Examples/v2/docs/StronglyTypedUid"}},c={},p=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share FusionReactor",id:"share-fusionreactor",level:3},{value:"In the same category (Enum) - 5 other generators",id:"in-the-same-category-enum---5-other-generators",level:3},{value:"CredFetoEnum",id:"credfetoenum",level:4},{value:"EnumClass",id:"enumclass",level:4},{value:"EnumUtilities",id:"enumutilities",level:4},{value:"NetEscapades.EnumGenerators",id:"netescapadesenumgenerators",level:4},{value:"PMart.Enumeration",id:"pmartenumeration",level:4}],h={toc:p},d="wrapper";function E(e){let{components:n,...l}=e;return(0,a.kt)(d,(0,o.Z)({},h,l,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fusionreactor--by-ohflowi"},"FusionReactor  by OhFlowi"),(0,a.kt)(i.Z,{toc:p,mdxType:"TOCInline"}),(0,a.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/FusionReactor.SourceGenerators.EnumExtensions?label=FusionReactor.SourceGenerators.EnumExtensions",alt:"Nuget"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions?label=updated",alt:"GitHub last commit"})),"\n",(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions?style=social",alt:"GitHub Repo stars"})),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("h3",{id:"info"},"Info"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Name: ",(0,a.kt)("strong",{parentName:"p"},"FusionReactor")),(0,a.kt)("p",{parentName:"admonition"},"A C# incremental source generator to create extensions for an enum type.\nThe extensions should be very fast and without reflections."),(0,a.kt)("p",{parentName:"admonition"},"Author: OhFlowi"),(0,a.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions"},"https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions")),"   "),(0,a.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions"},"https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions")),(0,a.kt)("p",{parentName:"admonition"},"Source : ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions"},"https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions"))),(0,a.kt)("h3",{id:"original-readme"},"Original Readme"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions/master/LICENSE"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square",alt:"GitHub license"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/FusionReactor.SourceGenerators.EnumExtensions?label=Nuget.org%20Downloads&style=flat-square&color=blue",alt:"Nuget"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/vpre/FusionReactor.SourceGenerators.EnumExtensions.svg?label=NuGet",alt:"Nuget"}))),(0,a.kt)("h1",{parentName:"admonition",id:"fusionreactorsourcegeneratorsenumextensions"},"FusionReactor.SourceGenerators.EnumExtensions"),(0,a.kt)("p",{parentName:"admonition"},"A C# source generator to create extensions for an enum type."),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Optimized for speed and low resource consumption"),(0,a.kt)("li",{parentName:"ul"},"Support for non-standard enum declarations")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public enum EPublicFoo : byte\n")),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},".NET 8+ support by using ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.frozen.frozendictionary-2"},"FrozenDictionary")," & ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.frozen.frozenset-1"},"FrozenSet")),(0,a.kt)("li",{parentName:"ul"},".NET 5+ support by using ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},"IReadOnlyDictionary")," & ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlyset-1"},"IReadOnlySet")),(0,a.kt)("li",{parentName:"ul"},".NET Framework 4.5+ support by using ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},"IReadOnlyDictionary")," & ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1"},"HashSet"))),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Package")," - ",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/FusionReactor.SourceGenerators.EnumExtensions/"},"FusionReactor.SourceGenerators.EnumExtensions")),(0,a.kt)("p",{parentName:"admonition"},"Add the package to your application using"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package FusionReactor.SourceGenerators.EnumExtensions\n")),(0,a.kt)("p",{parentName:"admonition"},"Adding the package will automatically add a marker attribute, ",(0,a.kt)("inlineCode",{parentName:"p"},"[GenerateEnumExtensions]"),", to your project."),(0,a.kt)("p",{parentName:"admonition"},"To use the generator, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"[GenerateEnumExtensions]")," attribute to an enum. For example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[GenerateEnumExtensions]\npublic enum EPublicFoo\n{\n    [Display(\n        ShortName = "Fo",\n        Name = "Foo - 0",\n        Description = "Zero",\n        Prompt = "ooF",\n        GroupName = "Foos",\n        Order = 0)]\n    Foo = 0,\n\n    [Display(\n        ShortName = "Ba",\n        Name = "Bar - 1",\n        Description = "One",\n        Prompt = "raB",\n        GroupName = "Bars",\n        Order = 1)]\n    Bar = 1,\n\n    Batz = 2,\n}\n\n')),(0,a.kt)("p",{parentName:"admonition"},"This will generate a class called ",(0,a.kt)("inlineCode",{parentName:"p"},"EPublicFooExtensions")," (",(0,a.kt)("inlineCode",{parentName:"p"},"EPublicFoo")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"Extensions"),"), which contains a number of helper methods. The new class is splitted in two files (",(0,a.kt)("inlineCode",{parentName:"p"},"EPublicFoo")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"Extensions.Base.g.cs")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"EPublicFoo")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"Extensions.DisplayAttribute.g.cs"),")"),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"EPublicFooExtensions.Base.g.cs"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'/// <summary>\n/// Extension methods for the <see cref = "EPublicFoo"/> enum.\n/// </summary>\n[GeneratedCode("FusionReactor.SourceGenerators.EnumExtensions", null)]\npublic static partial class EPublicFooExtensions\n{\n#if NET8_0_OR_GREATER\n    private static readonly FrozenDictionary<EPublicFoo, Int32> content = new Dictionary<EPublicFoo, Int32>\n    {\n        {\n            EPublicFoo.Foo,\n            0\n        },\n        {\n            EPublicFoo.Bar,\n            1\n        },\n        {\n            EPublicFoo.Batz,\n            2\n        },\n    }\n    .ToFrozenDictionary();\n#else\n    private static readonly Dictionary<EPublicFoo, Int32> contentDictionary = new Dictionary<EPublicFoo, Int32>\n    {\n        {\n            EPublicFoo.Foo,\n            0\n        },\n        {\n            EPublicFoo.Bar,\n            1\n        },\n        {\n            EPublicFoo.Batz,\n            2\n        },\n    };\n\n    private static readonly IReadOnlyDictionary<EPublicFoo, Int32> content\n        = new ReadOnlyDictionary<EPublicFoo, Int32>(contentDictionary);\n#endif\n\n#if NET8_0_OR_GREATER\n    private static readonly FrozenSet<string> names = new []\n    {\n        "Foo",\n        "Bar",\n        "Batz",\n    }\n    .ToFrozenSet();\n#elif NET5_0_OR_GREATER\n    private static readonly IReadOnlySet<string> names = new HashSet<string>()\n    {\n        "Foo",\n        "Bar",\n        "Batz",\n    };\n#else\n    private static readonly HashSet<string> names = new HashSet<string>()\n    {\n        "Foo",\n        "Bar",\n        "Batz",\n    };\n#endif\n\n#if NET8_0_OR_GREATER\n    private static readonly FrozenSet<EPublicFoo> values = new []\n    {\n        EPublicFoo.Foo,\n        EPublicFoo.Bar,\n        EPublicFoo.Batz,\n    }\n    .ToFrozenSet();\n#elif NET5_0_OR_GREATER\n    private static readonly IReadOnlySet<EPublicFoo> values = new HashSet<EPublicFoo>()\n    {\n        EPublicFoo.Foo,\n        EPublicFoo.Bar,\n        EPublicFoo.Batz,\n    };\n#else\n    private static readonly HashSet<EPublicFoo> values = new HashSet<EPublicFoo>()\n    {\n        EPublicFoo.Foo,\n        EPublicFoo.Bar,\n        EPublicFoo.Batz,\n    };\n#endif\n\n    /// <summary>\n    /// Gets the content dictionary containing mappings of <see cref = "EPublicFoo"/> enum values to values.\n    /// </summary>\n    /// <returns>The read-only content dictionary.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenDictionary<EPublicFoo, Int32> GetContent()\n#else\n    public static IReadOnlyDictionary<EPublicFoo, Int32> GetContent()\n#endif\n    {\n        return content;\n    }\n\n    /// <summary>\n    /// Gets the content dictionary containing mappings of <see cref = "EPublicFoo"/> enum values to values.\n    /// </summary>\n    /// <param name = "enumValue">The enum value for which to get the content dictionary.</param>\n    /// <returns>The read-only content dictionary.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenDictionary<EPublicFoo, Int32> GetContent(this EPublicFoo enumValue)\n#else\n    public static IReadOnlyDictionary<EPublicFoo, Int32> GetContent(this EPublicFoo enumValue)\n#endif\n    {\n        return content;\n    }\n\n    /// <summary>\n    /// Retrieves the name of the constant in the <see cref = "EPublicFoo"/>.\n    /// </summary>\n    /// <param name = "enumValue">The enum value to convert.</param>\n    /// <returns>\n    /// A string containing the name of the <see cref = "EPublicFoo"/>;\n    /// or <see langword="null"/> if no such constant is found.\n    /// </returns>\n    public static string? GetName(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => nameof(EPublicFoo.Foo),\n            EPublicFoo.Bar => nameof(EPublicFoo.Bar),\n            EPublicFoo.Batz => nameof(EPublicFoo.Batz),\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Retrieves all available names of the <see cref = "EPublicFoo"/>.\n    /// </summary>\n    /// <returns>An enumerable collection of <see cref = "EPublicFoo"/> names.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenSet<string> GetNames()\n#elif NET5_0_OR_GREATER\n    public static IReadOnlySet<string> GetNames()\n#else\n    public static HashSet<string> GetNames()\n#endif\n    {\n        return names;\n    }\n\n    /// <summary>\n    /// Retrieves all available names of the <see cref = "EPublicFoo"/>.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value.</param>\n    /// <returns>An enumerable collection of <see cref = "EPublicFoo"/> names.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenSet<string> GetNames(this EPublicFoo enumValue)\n#elif NET5_0_OR_GREATER\n    public static IReadOnlySet<string> GetNames(this EPublicFoo enumValue)\n#else\n    public static HashSet<string> GetNames(this EPublicFoo enumValue)\n#endif\n    {\n        return names;\n    }\n\n    /// <summary>\n    /// Retrieves all available values of the <see cref = "EPublicFoo"/>.\n    /// </summary>\n    /// <returns>An enumerable collection of <see cref = "EPublicFoo"/> values.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenSet<EPublicFoo> GetValues()\n#elif NET5_0_OR_GREATER\n    public static IReadOnlySet<EPublicFoo> GetValues()\n#else\n    public static HashSet<EPublicFoo> GetValues()\n#endif\n    {\n        return values;\n    }\n\n    /// <summary>\n    /// Retrieves all available values of the <see cref = "EPublicFoo"/>.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value.</param>\n    /// <returns>An enumerable collection of <see cref = "EPublicFoo"/> values.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenSet<EPublicFoo> GetValues(this EPublicFoo enumValue)\n#elif NET5_0_OR_GREATER\n    public static IReadOnlySet<EPublicFoo> GetValues(this EPublicFoo enumValue)\n#else\n    public static HashSet<EPublicFoo> GetValues(this EPublicFoo enumValue)\n#endif\n    {\n        return values;\n    }\n\n    /// <summary>\n    /// Parses the specified string representation of the enumeration value to its corresponding\n    /// <see cref = "EPublicFoo"/> value.\n    /// </summary>\n    /// <param name = "value">A string containing the name or value to convert.</param>\n    /// <param name = "ignoreCase">\n    /// A boolean indicating whether to ignore case during the parsing. Default is <c>false</c>.\n    /// </param>\n    /// <returns>\n    /// The <see cref = "EPublicFoo"/> value equivalent to the specified string representation.\n    /// </returns>\n    public static EPublicFoo Parse(string value, bool ignoreCase = false)\n    {\n        if (ignoreCase)\n        {\n            return value.ToLowerInvariant() switch\n            {\n                "foo" => EPublicFoo.Foo,\n                "bar" => EPublicFoo.Bar,\n                "batz" => EPublicFoo.Batz,\n                _ => throw new ArgumentException(),\n            };\n        }\n        else\n        {\n            return value switch\n            {\n                "Foo" => EPublicFoo.Foo,\n                "Bar" => EPublicFoo.Bar,\n                "Batz" => EPublicFoo.Batz,\n                _ => throw new ArgumentException(),\n            };\n        }\n    }\n\n    /// <summary>\n    /// Parses the specified string representation of the enumeration value to its corresponding\n    /// <see cref = "EPublicFoo"/> value.\n    /// </summary>\n    /// <param name = "enumValue">The current <see cref = "EPublicFoo"/> value.</param>\n    /// <param name = "value">A string containing the name or value to convert.</param>\n    /// <param name = "ignoreCase">\n    /// A boolean indicating whether to ignore case during the parsing. Default is <c>false</c>.\n    /// </param>\n    /// <returns>\n    /// The <see cref = "EPublicFoo"/> value equivalent to the specified string representation.\n    /// </returns>\n    public static EPublicFoo Parse(this EPublicFoo enumValue, string value, bool ignoreCase = false)\n    {\n        if (ignoreCase)\n        {\n            return value.ToLowerInvariant() switch\n            {\n                "foo" => EPublicFoo.Foo,\n                "bar" => EPublicFoo.Bar,\n                "batz" => EPublicFoo.Batz,\n                _ => throw new ArgumentException(),\n            };\n        }\n        else\n        {\n            return value switch\n            {\n                "Foo" => EPublicFoo.Foo,\n                "Bar" => EPublicFoo.Bar,\n                "Batz" => EPublicFoo.Batz,\n                _ => throw new ArgumentException(),\n            };\n        }\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "EPublicFoo"/> enumeration value.\n    /// </summary>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "EPublicFoo"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(string value, out EPublicFoo? result)\n    {\n        return TryParse(value, false, out result);\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "EPublicFoo"/> enumeration value.\n    /// </summary>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "ignoreCase">A boolean indicating whether case should be ignored when parsing.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "EPublicFoo"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(string value, bool ignoreCase, out EPublicFoo? result)\n    {\n        if (ignoreCase)\n        {\n            result = value.ToLowerInvariant() switch\n            {\n                "foo" => EPublicFoo.Foo,\n                "bar" => EPublicFoo.Bar,\n                "batz" => EPublicFoo.Batz,\n                _ => null,\n            };\n        }\n        else\n        {\n            result = value switch\n            {\n                "Foo" => EPublicFoo.Foo,\n                "Bar" => EPublicFoo.Bar,\n                "Batz" => EPublicFoo.Batz,\n                _ => null,\n            };\n        }\n\n        return result != null;\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "EPublicFoo"/> enumeration value.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value to parse.</param>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "EPublicFoo"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(this EPublicFoo enumValue, string value, out EPublicFoo? result)\n    {\n        return TryParse(value, false, out result);\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "EPublicFoo"/> enumeration value.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value to parse.</param>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "ignoreCase">A boolean indicating whether case should be ignored when parsing.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "EPublicFoo"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(EPublicFoo) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(this EPublicFoo enumValue, string value, bool ignoreCase, out EPublicFoo? result)\n    {\n        if (ignoreCase)\n        {\n            result = value.ToLowerInvariant() switch\n            {\n                "foo" => EPublicFoo.Foo,\n                "bar" => EPublicFoo.Bar,\n                "batz" => EPublicFoo.Batz,\n                _ => null,\n            };\n        }\n        else\n        {\n            result = value switch\n            {\n                "Foo" => EPublicFoo.Foo,\n                "Bar" => EPublicFoo.Bar,\n                "Batz" => EPublicFoo.Batz,\n                _ => null,\n            };\n        }\n\n        return result != null;\n    }\n}\n')),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"EPublicFooExtensions.DisplayAttribute.g.cs"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public static partial class EPublicFooExtensions\n{\n#if !NET8_0_OR_GREATER\n    private static readonly Dictionary<EPublicFoo, DisplayResult?> displayResultsDictionary = new Dictionary<EPublicFoo, DisplayResult?>\n    {\n        {\n            EPublicFoo.Foo,\n            new DisplayResult\n            {\n                ShortName = "Fo",\n                Name = "Foo - 0",\n                Description = "Zero",\n                Prompt = "ooF",\n                GroupName = "Foos",\n                Order = 0,\n            }\n        },\n        {\n            EPublicFoo.Bar,\n            new DisplayResult\n            {\n                ShortName = "Ba",\n                Name = "Bar - 1",\n                Description = "One",\n                Prompt = "raB",\n                GroupName = "Bars",\n                Order = 1,\n            }\n        },\n        {\n            EPublicFoo.Batz,\n            null\n        },\n    };\n#endif\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <returns>The display attribute result or the enum value.</returns>\n#if NET8_0_OR_GREATER\n    public static FrozenDictionary<EPublicFoo, DisplayResult?> DisplayResults => new Dictionary<EPublicFoo, DisplayResult?>\n    {\n        {\n            EPublicFoo.Foo,\n            new DisplayResult\n            {\n                ShortName = "Fo",\n                Name = "Foo - 0",\n                Description = "Zero",\n                Prompt = "ooF",\n                GroupName = "Foos",\n                Order = 0,\n        }},\n        {\n            EPublicFoo.Bar,\n            new DisplayResult\n            {\n                ShortName = "Ba",\n                Name = "Bar - 1",\n                Description = "One",\n                Prompt = "raB",\n                GroupName = "Bars",\n                Order = 1,\n            }},\n        {\n            EPublicFoo.Batz,\n            null\n        },\n    }\n    .ToFrozenDictionary();\n#else\n    public static IReadOnlyDictionary<EPublicFoo, DisplayResult?> DisplayResults => new ReadOnlyDictionary<EPublicFoo, DisplayResult?>(displayResultsDictionary);\n#endif\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayShortName(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => "Fo",\n            EPublicFoo.Bar => "Ba",\n            EPublicFoo.Batz => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The name or the enum value.</returns>\n    public static string? DisplayName(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => "Foo - 0",\n            EPublicFoo.Bar => "Bar - 1",\n            EPublicFoo.Batz => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayDescription(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => "Zero",\n            EPublicFoo.Bar => "One",\n            EPublicFoo.Batz => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayPrompt(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => "ooF",\n            EPublicFoo.Bar => "raB",\n            EPublicFoo.Batz => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayGroupName(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => "Foos",\n            EPublicFoo.Bar => "Bars",\n            EPublicFoo.Batz => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/> of the <see cref = "EPublicFoo"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static int? DisplayOrder(this EPublicFoo enumValue)\n    {\n        return enumValue switch\n        {\n            EPublicFoo.Foo => 0,\n            EPublicFoo.Bar => 1,\n            EPublicFoo.Batz => null,\n            _ => null\n        };\n    }\n}\n')),(0,a.kt)("p",{parentName:"admonition"},"The generated extension files are available in your IDE under the Source Generators files."),(0,a.kt)("h2",{parentName:"admonition",id:"contributing"},"Contributing"),(0,a.kt)("p",{parentName:"admonition"},"Create an ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OhFlowi/FusionReactor.SourceGenerators.EnumExtensions/issues/new"},"issue")," if you find a BUG or have a Suggestion or Question. If you want to develop this project :"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},"Fork it!"),(0,a.kt)("li",{parentName:"ol"},"Create your feature branch: ",(0,a.kt)("inlineCode",{parentName:"li"},"git checkout -b my-new-feature")),(0,a.kt)("li",{parentName:"ol"},"Commit your changes: ",(0,a.kt)("inlineCode",{parentName:"li"},"git commit -am 'Add some feature'")),(0,a.kt)("li",{parentName:"ol"},"Push to the branch: ",(0,a.kt)("inlineCode",{parentName:"li"},"git push origin my-new-feature")),(0,a.kt)("li",{parentName:"ol"},"Submit a pull request")),(0,a.kt)("h2",{parentName:"admonition",id:"license"},"License"),(0,a.kt)("p",{parentName:"admonition"},"FusionReactor.SourceGenerators.EnumExtensions is Copyright \xa9 2024 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OhFlowi"},"OhFlowi")," under the MIT License.")),(0,a.kt)("h3",{id:"about"},"About"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Enums to string and other extensions")),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,a.kt)("p",null,"This is the CSharp Project that references ",(0,a.kt)("strong",{parentName:"p"},"FusionReactor")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="FusionReactor.SourceGenerators.EnumExtensions" Version="1.1.0" />\n  </ItemGroup>\n\n  \n</Project>\n\n'))),(0,a.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FusionReactor\\src\\EnumClassDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,a.kt)("p",null,"  This is the use of ",(0,a.kt)("strong",{parentName:"p"},"FusionReactor")," in ",(0,a.kt)("em",{parentName:"p"},"Program.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using EnumClassDemo;\nConsole.WriteLine(Colors.None.GetName());\nConsole.WriteLine(ColorsExtensions.GetContent()[Colors.None]);\n"))),(0,a.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FusionReactor\\src\\EnumClassDemo\\Colors.cs",label:"Colors.cs",mdxType:"TabItem"},(0,a.kt)("p",null,"  This is the use of ",(0,a.kt)("strong",{parentName:"p"},"FusionReactor")," in ",(0,a.kt)("em",{parentName:"p"},"Colors.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using System.ComponentModel.DataAnnotations;\nusing System.Runtime.Serialization;\n\nnamespace EnumClassDemo;\n\n//[Flags]\n[FusionReactor.SourceGenerators.EnumExtensions.GenerateEnumExtensions]\npublic enum Colors\n{\n    [Display(\n         ShortName = "None",\n         Name = "none - 0",\n         Description = "Zero",\n         Prompt = "ooF",\n         GroupName = "Color1",\n         Order = 0)]\n    None =0,\n    Red=1,\n    Green=2,\n    Blue=4,\n}\n\n')))),(0,a.kt)("h3",{id:"generated-files"},"Generated Files"),(0,a.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FusionReactor\\src\\EnumClassDemo\\obj\\GX\\FusionReactor.SourceGenerators.EnumExtensions\\FusionReactor.SourceGenerators.EnumExtensions.EnumExtensionsGenerator\\ColorsExtensions.Base.g.cs",label:"ColorsExtensions.Base.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\nusing System;\nusing System.CodeDom.Compiler;\nusing System.Collections;\n#if NET8_0_OR_GREATER\nusing System.Collections.Frozen;\n#endif\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\nnamespace EnumClassDemo;\n/// <summary>\n/// Extension methods for the <see cref = "Colors"/> enum.\n/// </summary>\n[GeneratedCode("FusionReactor.SourceGenerators.EnumExtensions", null)]\npublic static partial class ColorsExtensions\n{\n#if NET8_0_OR_GREATER\nprivate static readonly FrozenDictionary<Colors, Int32> content\n  = new Dictionary<Colors, Int32>\n    {\n        { Colors.None, 0 },\n{ Colors.Red, 1 },\n{ Colors.Green, 2 },\n{ Colors.Blue, 4 },\n\n    }\n    .ToFrozenDictionary();\n#else\n    private static readonly Dictionary<Colors, Int32> contentDictionary = new Dictionary<Colors, Int32>\n    {\n        {\n            Colors.None,\n            0\n        },\n        {\n            Colors.Red,\n            1\n        },\n        {\n            Colors.Green,\n            2\n        },\n        {\n            Colors.Blue,\n            4\n        },\n    };\n    private static readonly IReadOnlyDictionary<Colors, Int32> content = new ReadOnlyDictionary<Colors, Int32>(contentDictionary);\n#endif\n#if NET8_0_OR_GREATER\nprivate static readonly FrozenSet<string> names = new []\n{\n    "None",\n"Red",\n"Green",\n"Blue",\n\n}\n.ToFrozenSet();\n#elif NET5_0_OR_GREATER\nprivate static readonly IReadOnlySet<string> names = new HashSet<string>()\n{\n    "None",\n"Red",\n"Green",\n"Blue",\n\n};\n#else\n    private static readonly HashSet<string> names = new HashSet<string>()\n    {\n        "None",\n        "Red",\n        "Green",\n        "Blue",\n    };\n#endif\n#if NET8_0_OR_GREATER\nprivate static readonly FrozenSet<Colors> values = new []\n{\n    Colors.None,\nColors.Red,\nColors.Green,\nColors.Blue,\n\n}\n.ToFrozenSet();\n#elif NET5_0_OR_GREATER\nprivate static readonly IReadOnlySet<Colors> values = new HashSet<Colors>()\n{\n    Colors.None,\nColors.Red,\nColors.Green,\nColors.Blue,\n\n};\n#else\n    private static readonly HashSet<Colors> values = new HashSet<Colors>()\n    {\n        Colors.None,\n        Colors.Red,\n        Colors.Green,\n        Colors.Blue,\n    };\n#endif\n    /// <summary>\n    /// Gets the content dictionary containing mappings of <see cref = "Colors"/> enum values to values.\n    /// </summary>\n    /// <returns>The read-only content dictionary.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenDictionary<Colors, Int32> GetContent()\n#else\n    public static IReadOnlyDictionary<Colors, Int32> GetContent()\n#endif\n    {\n        return content;\n    }\n\n    /// <summary>\n    /// Gets the content dictionary containing mappings of <see cref = "Colors"/> enum values to values.\n    /// </summary>\n    /// <param name = "enumValue">The enum value for which to get the content dictionary.</param>\n    /// <returns>The read-only content dictionary.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenDictionary<Colors, Int32> GetContent(this Colors enumValue)\n#else\n    public static IReadOnlyDictionary<Colors, Int32> GetContent(this Colors enumValue)\n#endif\n    {\n        return content;\n    }\n\n    /// <summary>\n    /// Retrieves the name of the constant in the <see cref = "Colors"/>.\n    /// </summary>\n    /// <param name = "enumValue">The enum value to convert.</param>\n    /// <returns>\n    /// A string containing the name of the <see cref = "Colors"/>;\n    /// or <see langword="null"/> if no such constant is found.\n    /// </returns>\n    public static string? GetName(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => nameof(Colors.None),\n            Colors.Red => nameof(Colors.Red),\n            Colors.Green => nameof(Colors.Green),\n            Colors.Blue => nameof(Colors.Blue),\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Retrieves all available names of the <see cref = "Colors"/>.\n    /// </summary>\n    /// <returns>An enumerable collection of <see cref = "Colors"/> names.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenSet<string> GetNames()\n#elif NET5_0_OR_GREATER\npublic static IReadOnlySet<string> GetNames()\n#else\n    public static HashSet<string> GetNames()\n#endif\n    {\n        return names;\n    }\n\n    /// <summary>\n    /// Retrieves all available names of the <see cref = "Colors"/>.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value.</param>\n    /// <returns>An enumerable collection of <see cref = "Colors"/> names.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenSet<string> GetNames(this Colors enumValue)\n#elif NET5_0_OR_GREATER\npublic static IReadOnlySet<string> GetNames(this Colors enumValue)\n#else\n    public static HashSet<string> GetNames(this Colors enumValue)\n#endif\n    {\n        return names;\n    }\n\n    /// <summary>\n    /// Retrieves all available values of the <see cref = "Colors"/>.\n    /// </summary>\n    /// <returns>An enumerable collection of <see cref = "Colors"/> values.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenSet<Colors> GetValues()\n#elif NET5_0_OR_GREATER\npublic static IReadOnlySet<Colors> GetValues()\n#else\n    public static HashSet<Colors> GetValues()\n#endif\n    {\n        return values;\n    }\n\n    /// <summary>\n    /// Retrieves all available values of the <see cref = "Colors"/>.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value.</param>\n    /// <returns>An enumerable collection of <see cref = "Colors"/> values.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenSet<Colors> GetValues(this Colors enumValue)\n#elif NET5_0_OR_GREATER\npublic static IReadOnlySet<Colors> GetValues(this Colors enumValue)\n#else\n    public static HashSet<Colors> GetValues(this Colors enumValue)\n#endif\n    {\n        return values;\n    }\n\n    /// <summary>\n    /// Parses the specified string representation of the enumeration value to its corresponding\n    /// <see cref = "Colors"/> value.\n    /// </summary>\n    /// <param name = "value">A string containing the name or value to convert.</param>\n    /// <param name = "ignoreCase">\n    /// A boolean indicating whether to ignore case during the parsing. Default is <c>false</c>.\n    /// </param>\n    /// <returns>\n    /// The <see cref = "Colors"/> value equivalent to the specified string representation.\n    /// </returns>\n    public static Colors Parse(string value, bool ignoreCase = false)\n    {\n        if (ignoreCase)\n        {\n            return value.ToLowerInvariant() switch\n            {\n                "none" => Colors.None,\n                "red" => Colors.Red,\n                "green" => Colors.Green,\n                "blue" => Colors.Blue,\n                _ => throw new ArgumentException(),\n            };\n        }\n        else\n        {\n            return value switch\n            {\n                "None" => Colors.None,\n                "Red" => Colors.Red,\n                "Green" => Colors.Green,\n                "Blue" => Colors.Blue,\n                _ => throw new ArgumentException(),\n            };\n        }\n    }\n\n    /// <summary>\n    /// Parses the specified string representation of the enumeration value to its corresponding\n    /// <see cref = "Colors"/> value.\n    /// </summary>\n    /// <param name = "enumValue">The current <see cref = "Colors"/> value.</param>\n    /// <param name = "value">A string containing the name or value to convert.</param>\n    /// <param name = "ignoreCase">\n    /// A boolean indicating whether to ignore case during the parsing. Default is <c>false</c>.\n    /// </param>\n    /// <returns>\n    /// The <see cref = "Colors"/> value equivalent to the specified string representation.\n    /// </returns>\n    public static Colors Parse(this Colors enumValue, string value, bool ignoreCase = false)\n    {\n        if (ignoreCase)\n        {\n            return value.ToLowerInvariant() switch\n            {\n                "none" => Colors.None,\n                "red" => Colors.Red,\n                "green" => Colors.Green,\n                "blue" => Colors.Blue,\n                _ => throw new ArgumentException(),\n            };\n        }\n        else\n        {\n            return value switch\n            {\n                "None" => Colors.None,\n                "Red" => Colors.Red,\n                "Green" => Colors.Green,\n                "Blue" => Colors.Blue,\n                _ => throw new ArgumentException(),\n            };\n        }\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "Colors"/> enumeration value.\n    /// </summary>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "Colors"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(string value, out Colors? result)\n    {\n        return TryParse(value, false, out result);\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "Colors"/> enumeration value.\n    /// </summary>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "ignoreCase">A boolean indicating whether case should be ignored when parsing.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "Colors"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(string value, bool ignoreCase, out Colors? result)\n    {\n        if (ignoreCase)\n        {\n            result = value.ToLowerInvariant() switch\n            {\n                "none" => Colors.None,\n                "red" => Colors.Red,\n                "green" => Colors.Green,\n                "blue" => Colors.Blue,\n                _ => null,\n            };\n        }\n        else\n        {\n            result = value switch\n            {\n                "None" => Colors.None,\n                "Red" => Colors.Red,\n                "Green" => Colors.Green,\n                "Blue" => Colors.Blue,\n                _ => null,\n            };\n        }\n\n        return result != null;\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "Colors"/> enumeration value.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value to parse.</param>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "Colors"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(this Colors enumValue, string value, out Colors? result)\n    {\n        return TryParse(value, false, out result);\n    }\n\n    /// <summary>\n    /// Tries to parse the specified string representation of an enumeration value to its corresponding\n    /// <see cref = "Colors"/> enumeration value.\n    /// </summary>\n    /// <param name = "enumValue">The enumeration value to parse.</param>\n    /// <param name = "value">The string representation of the enumeration value.</param>\n    /// <param name = "ignoreCase">A boolean indicating whether case should be ignored when parsing.</param>\n    /// <param name = "result">\n    /// When this method returns, contains the <see cref = "Colors"/> value equivalent\n    /// to the string representation, if the parse succeeded, or default(Colors) if the parse failed.</param>\n    /// <returns><c>true</c> if the parsing was successful; otherwise, <c>false</c>.</returns>\n    public static bool TryParse(this Colors enumValue, string value, bool ignoreCase, out Colors? result)\n    {\n        if (ignoreCase)\n        {\n            result = value.ToLowerInvariant() switch\n            {\n                "none" => Colors.None,\n                "red" => Colors.Red,\n                "green" => Colors.Green,\n                "blue" => Colors.Blue,\n                _ => null,\n            };\n        }\n        else\n        {\n            result = value switch\n            {\n                "None" => Colors.None,\n                "Red" => Colors.Red,\n                "Green" => Colors.Green,\n                "Blue" => Colors.Blue,\n                _ => null,\n            };\n        }\n\n        return result != null;\n    }\n}\n'))),(0,a.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FusionReactor\\src\\EnumClassDemo\\obj\\GX\\FusionReactor.SourceGenerators.EnumExtensions\\FusionReactor.SourceGenerators.EnumExtensions.EnumExtensionsGenerator\\ColorsExtensions.DisplayAttribute.g.cs",label:"ColorsExtensions.DisplayAttribute.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\nusing System;\nusing System.Collections;\n#if NET8_0_OR_GREATER\nusing System.Collections.Frozen;\n#endif\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing FusionReactor.SourceGenerators.EnumExtensions;\n\nnamespace EnumClassDemo;\npublic static partial class ColorsExtensions\n{\n#if !NET8_0_OR_GREATER\n    private static readonly Dictionary<Colors, DisplayResult?> displayResultsDictionary = new Dictionary<Colors, DisplayResult?>\n    {\n        {\n            Colors.None,\n            new DisplayResult\n            {\n                ShortName = "None",\n                Name = "none - 0",\n                Description = "Zero",\n                Prompt = "ooF",\n                GroupName = "Color1",\n                Order = 0,\n            }\n        },\n        {\n            Colors.Red,\n            null\n        },\n        {\n            Colors.Green,\n            null\n        },\n        {\n            Colors.Blue,\n            null\n        },\n    };\n#endif\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <returns>The display attribute result or the enum value.</returns>\n    \n#if NET8_0_OR_GREATER\npublic static FrozenDictionary<Colors, DisplayResult?> DisplayResults\n  => new Dictionary<Colors, DisplayResult?>\n    {\n        { Colors.None, new DisplayResult {ShortName = "None",\nName = "none - 0",\nDescription = "Zero",\nPrompt = "ooF",\nGroupName = "Color1",\nOrder = 0,\n}},\n{ Colors.Red, null },\n{ Colors.Green, null },\n{ Colors.Blue, null },\n\n    }\n    .ToFrozenDictionary();\n#else\n    public static IReadOnlyDictionary<Colors, DisplayResult?> DisplayResults => new ReadOnlyDictionary<Colors, DisplayResult?>(displayResultsDictionary);\n\n#endif\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayShortName(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => "None",\n            Colors.Red => null,\n            Colors.Green => null,\n            Colors.Blue => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The name or the enum value.</returns>\n    public static string? DisplayName(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => "none - 0",\n            Colors.Red => null,\n            Colors.Green => null,\n            Colors.Blue => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayDescription(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => "Zero",\n            Colors.Red => null,\n            Colors.Green => null,\n            Colors.Blue => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayPrompt(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => "ooF",\n            Colors.Red => null,\n            Colors.Green => null,\n            Colors.Blue => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static string? DisplayGroupName(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => "Color1",\n            Colors.Red => null,\n            Colors.Green => null,\n            Colors.Blue => null,\n            _ => null\n        };\n    }\n\n    /// <summary>\n    /// Returns the <see cref = "System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/> of the <see cref = "Colors"/> enum.\n    /// </summary>\n    /// <param name = "enumValue">The enum value.</param>\n    /// <returns>The display name or the enum value.</returns>\n    public static int? DisplayOrder(this Colors enumValue)\n    {\n        return enumValue switch\n        {\n            Colors.None => 0,\n            Colors.Red => null,\n            Colors.Green => null,\n            Colors.Blue => null,\n            _ => null\n        };\n    }\n}\n'))),(0,a.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FusionReactor\\src\\EnumClassDemo\\obj\\GX\\FusionReactor.SourceGenerators.EnumExtensions\\FusionReactor.SourceGenerators.EnumExtensions.EnumExtensionsGenerator\\DisplayResult.g.cs",label:"DisplayResult.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\nusing System;\nusing System.CodeDom.Compiler;\n\nnamespace FusionReactor.SourceGenerators.EnumExtensions;\n/// <inheritdoc cref = "System.ComponentModel.DataAnnotations.DisplayAttribute"/>\n[GeneratedCode("FusionReactor.SourceGenerators.EnumExtensions", null)]\npublic class DisplayResult\n{\n    /// <summary>\n    /// Gets or sets the ShortName attribute property, which may be a resource key string.\n    /// </summary>\n    public string? ShortName { get; set; }\n    /// <summary>\n    /// Gets or sets the Name attribute property, which may be a resource key string.\n    /// </summary>\n    public string? Name { get; set; }\n    /// <summary>\n    /// Gets or sets the Description attribute property, which may be a resource key string.\n    /// </summary>\n    public string? Description { get; set; }\n    /// <summary>\n    /// Gets or sets the Prompt attribute property, which may be a resource key string.\n    /// </summary>\n    public string? Prompt { get; set; }\n    /// <summary>\n    /// Gets or sets the GroupName attribute property, which may be a resource key string.\n    /// </summary>\n    public string? GroupName { get; set; }\n    /// <summary>\n    /// Gets or sets the order in which this field should be displayed.  If this property is not set then\n    /// the presentation layer will automatically determine the order.  Setting this property explicitly\n    /// allows an override of the default behavior of the presentation layer.\n    /// </summary>\n    public int? Order { get; set; }\n}\n'))),(0,a.kt)(s.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\FusionReactor\\src\\EnumClassDemo\\obj\\GX\\FusionReactor.SourceGenerators.EnumExtensions\\FusionReactor.SourceGenerators.EnumExtensions.EnumExtensionsGenerator\\GenerateEnumExtensionsAttribute.g.cs",label:"GenerateEnumExtensionsAttribute.g.cs",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\nusing System;\nusing System.CodeDom.Compiler;\n\nnamespace FusionReactor.SourceGenerators.EnumExtensions;\n/// <summary>\n/// Attribute to mark an enum for FusionReactor.SourceGenerators.EnumExtensions extension generations.\n/// </summary>\n/// <remarks>\n/// This attribute is used to mark an enum for FusionReactor.SourceGenerators.EnumExtensions extension generations.\n/// </remarks>\n[GeneratedCode("FusionReactor.SourceGenerators.EnumExtensions", null)]\n[AttributeUsage(AttributeTargets.Enum)]\npublic class GenerateEnumExtensionsAttribute : Attribute\n{\n}\n')))),(0,a.kt)("h2",{id:"usefull"},"Usefull"),(0,a.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{target:"_blank",href:t(43606).Z},"Download Example project FusionReactor "))),(0,a.kt)("h3",{id:"share-fusionreactor"},"Share FusionReactor"),(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFusionReactor&quote=FusionReactor",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFusionReactor&text=FusionReactor:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFusionReactor",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFusionReactor&title=FusionReactor",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,a.kt)("li",null,(0,a.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFusionReactor&title=FusionReactor&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FFusionReactor",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/FusionReactor"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/FusionReactor")),(0,a.kt)("h3",{id:"in-the-same-category-enum---5-other-generators"},"In the same category (Enum) - 5 other generators"),(0,a.kt)("h4",{id:"credfetoenum"},(0,a.kt)("a",{parentName:"h4",href:"/docs/CredFetoEnum"},"CredFetoEnum")),(0,a.kt)("h4",{id:"enumclass"},(0,a.kt)("a",{parentName:"h4",href:"/docs/EnumClass"},"EnumClass")),(0,a.kt)("h4",{id:"enumutilities"},(0,a.kt)("a",{parentName:"h4",href:"/docs/EnumUtilities"},"EnumUtilities")),(0,a.kt)("h4",{id:"netescapadesenumgenerators"},(0,a.kt)("a",{parentName:"h4",href:"/docs/NetEscapades.EnumGenerators"},"NetEscapades.EnumGenerators")),(0,a.kt)("h4",{id:"pmartenumeration"},(0,a.kt)("a",{parentName:"h4",href:"/docs/PMart.Enumeration"},"PMart.Enumeration")))}E.isMDXComponent=!0},43606:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/files/FusionReactor-1009f0379c31b58ec7ebf09584575d59.zip"}}]);