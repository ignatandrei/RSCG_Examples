"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2624],{4293:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/files/Matryoshki-bb7c60a4307c6d2b4bb35519d191f019.zip"},72242:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>h,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"RSCG-Examples/Matryoshki","title":"33 - Matryoshki","description":"Adding decorators to an implementation of interface","source":"@site/docs/RSCG-Examples/Matryoshki.md","sourceDirName":"RSCG-Examples","slug":"/Matryoshki","permalink":"/RSCG_Examples/v2/docs/Matryoshki","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Matryoshki.md","tags":[],"version":"current","sidebarPosition":330,"frontMatter":{"sidebar_position":330,"title":"33 - Matryoshki","description":"Adding decorators to an implementation of interface","slug":"/Matryoshki"},"sidebar":"tutorialSidebar","previous":{"title":"32 - Mediator","permalink":"/RSCG_Examples/v2/docs/Mediator"},"next":{"title":"34 - MemoryPack","permalink":"/RSCG_Examples/v2/docs/MemoryPack"}}');var r=t(74848),a=t(28453),i=t(11470),o=t(19365),l=t(14252);const c={sidebar_position:330,title:"33 - Matryoshki",description:"Adding decorators to an implementation of interface",slug:"/Matryoshki"},h="Matryoshki  by Georgy Krasin",d={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Key Features",id:"key-features",level:4},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Adornments",id:"adornments",level:3},{value:"Asynchronous method templates",id:"asynchronous-method-templates",level:4},{value:"Decoration",id:"decoration",level:3},{value:"Chains of decorations with INesting&lt;T1, ..., TN&gt;",id:"chains-of-decorations-with-inestingt1--tn",level:3},{value:"Limitations",id:"limitations",level:2},{value:"License",id:"license",level:2},{value:"Quick links",id:"quick-links",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Matryoshki",id:"share-matryoshki",level:3},{value:"In the same category (Interface) - 11 other generators",id:"in-the-same-category-interface---11-other-generators",level:3},{value:"Biwen.AutoClassGen",id:"biwenautoclassgen",level:4},{value:"CopyCat",id:"copycat",level:4},{value:"Farskeptic.AutoCompose",id:"farskepticautocompose",level:4},{value:"MakeInterface.Generator",id:"makeinterfacegenerator",level:4},{value:"Minerals.AutoInterfaces",id:"mineralsautointerfaces",level:4},{value:"NetAutomaticInterface",id:"netautomaticinterface",level:4},{value:"ProxyGen",id:"proxygen",level:4},{value:"Roozie.AutoInterface",id:"roozieautointerface",level:4},{value:"RSCG_CompositeProvider",id:"rscg_compositeprovider",level:4},{value:"rscg_Interface_to_null_object",id:"rscg_interface_to_null_object",level:4},{value:"RSCG_Static",id:"rscg_static",level:4}];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"matryoshki--by-georgy-krasin",children:"Matryoshki  by Georgy Krasin"})}),"\n",(0,r.jsx)(l.A,{toc:m}),"\n",(0,r.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Matryoshki/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Matryoshki?label=Matryoshki",alt:"Nuget"})}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/krasin-ga/matryoshki/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/krasin-ga/matryoshki?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(n.img,{src:"https://img.shields.io/github/stars/krasin-ga/matryoshki?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["Name: ",(0,r.jsx)(n.strong,{children:"Matryoshki"})]}),(0,r.jsx)(n.p,{children:"Metaprogramming framework based on C# source generators"}),(0,r.jsx)(n.p,{children:"Author: Georgy Krasin"}),(0,r.jsxs)(n.p,{children:["NuGet:\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Matryoshki/",children:"https://www.nuget.org/packages/Matryoshki/"})})]}),(0,r.jsxs)(n.p,{children:["You can find more details at ",(0,r.jsx)(n.a,{href:"https://github.com/krasin-ga/matryoshki/",children:"https://github.com/krasin-ga/matryoshki/"})]}),(0,r.jsxs)(n.p,{children:["Source: ",(0,r.jsx)(n.a,{href:"https://github.com/krasin-ga/matryoshki/",children:"https://github.com/krasin-ga/matryoshki/"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.h1,{id:"matryoshki",children:"Matryoshki"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Matryoshki/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Matryoshki?color=1E9400&label=Matryoshki&style=flat-square",alt:"Matryoshki Nuget"})})," ",(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Matryoshki.Abstractions/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Matryoshki.Abstractions?color=1E9400&label=Matryoshki.Abstractions&style=flat-square",alt:"Matryoshki.Abstractions Nuget"})})," ",(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/Matryoshki.Generators/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Matryoshki.Generators?color=1E9400&label=Matryoshki.Generators&style=flat-square",alt:"Matryoshki.Generators Nuget"})})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:"assets/matryoshki.svg",align:"right"}),' "Matryoshki" (\u041c\u0430\u0442\u0440\u0451\u0448\u043a\u0438, Matryoshkas) is a metaprogramming framework based on C# source generators.']}),(0,r.jsx)(n.h4,{id:"key-features",children:"Key Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Define type-agnostic templates and create decorators based on them:\n",(0,r.jsx)(n.code,{children:"Decorate<IFoo>.With<LoggingAdornment>().Name<FooWithLogging>()"})]}),"\n"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Extract interfaces and automatically generate adapters from classes: ",(0,r.jsx)(n.code,{children:"From<Bar>.ExtractInterface<IBar>()"}),"."]}),"\n"]}),(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),(0,r.jsx)(n.h3,{id:"installation",children:"Installation"}),(0,r.jsx)(n.p,{children:"The first step is to add package to the target project:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet add package Matryoshki\n"})}),(0,r.jsx)(n.p,{children:"Once the package is installed, you can proceed with creating adornments."}),(0,r.jsx)(n.h3,{id:"adornments",children:"Adornments"}),(0,r.jsx)("img",{src:"assets/flower.png",width:"48",align:"left"}),(0,r.jsx)(n.p,{children:"Adornments act as blueprints for creating type-agnostic decorators. They consist of a method template and can contain arbitrary members. Rather than being instantiated as objects, the code of adornment classes is directly injected into the decorator classes."}),(0,r.jsxs)(n.p,{children:["To create an adornment you need to create a class that implements ",(0,r.jsx)(n.code,{children:"IAdornment"}),". As a simple example, you can create an adornment that outputs the name of the decorated member to the console:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:'public class HelloAdornment : IAdornment\n{\n    public TResult MethodTemplate<TResult>(Call<TResult> call)\n    {\n        Console.WriteLine($"Hello, {call.MemberName}!");\n        return call.Forward();\n    }\n}\n'})}),(0,r.jsxs)(n.p,{children:["When creating a decorated method, ",(0,r.jsx)(n.code,{children:"call.Forward()"})," will be replaced with a call to the implementation. And ",(0,r.jsx)(n.code,{children:"TResult"})," will have the type of the actual return value. For ",(0,r.jsx)(n.code,{children:"void"})," methods, a special type ",(0,r.jsx)(n.code,{children:"Nothing"})," will be used."]}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"A more complex example"}),(0,r.jsx)(n.p,{children:"An adornment for logging can serve as a slightly closer example to real-world usage:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:'public class LoggingAdornment : IAdornment\n{\n    private readonly ILogger<ExceptionLoggingAdornment> _logger;\n\n    public LoggingAdornment(ILogger<ExceptionLoggingAdornment> logger)\n    {\n        _logger = logger;\n    }\n\n    public TResult MethodTemplate<TResult>(Call<TResult> call)\n    {\n        try\n        {\n            if(_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug("Executing {Type}.{Member}", GetType().Name, call.MemberName);\n\n            var result = call.Forward();\n\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug("Successfully executed {Type}.{Member}: {Result}", GetType().Name, call.MemberName, result);\n\n            return result;\n        }\n        catch (Exception exception)\n        {\n            _logger.LogError(\n                exception,\n                "Error executing {Type}.{Member}({Arguments})",\n                GetType().Name,\n                call.MemberName,\n                string.Join(",", call.GetArgumentsOfType<object>()));\n\n            throw;\n        }\n    }\n}\n'})})]}),(0,r.jsx)(n.h4,{id:"asynchronous-method-templates",children:"Asynchronous method templates"}),(0,r.jsxs)(n.p,{children:["Asynchronous templates can be defined by implementing the ",(0,r.jsx)(n.code,{children:"AsyncMethodTemplate"})," method, which will be used to decorate methods that return ",(0,r.jsx)(n.code,{children:"Task"})," or ",(0,r.jsx)(n.code,{children:"ValueTask"}),"."]}),(0,r.jsxs)(n.p,{children:["Note that asynchronous templates are optional, and async methods will still be decorated because an ",(0,r.jsx)(n.code,{children:"AsyncMethodTemplate"})," will be automatically created from the ",(0,r.jsx)(n.code,{children:"MethodTemplate"})," by awaiting the ",(0,r.jsx)(n.code,{children:"Forward*"})," method invocations."]}),(0,r.jsx)(n.p,{children:"More tips for writing adornments can be found here: tips"}),(0,r.jsx)(n.h3,{id:"decoration",children:"Decoration"}),(0,r.jsx)(n.p,{children:"Once we have an adornment, we can create our first matryoshkas."}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Suppose we have two interfaces that we would like to apply our HelloAdornment to."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"interface IFoo\n{\n    object Foo(object foo) => foo;\n}\nrecord Foo : IFoo;\n\ninterface IBar\n{\n    Task BarAsync() => Task.Delay(0);\n}\nrecord Bar : IFoo;\n"})})]}),(0,r.jsx)(n.p,{children:"To create matryoshkas, you just need to write their specification in any appropriate location:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"Matryoshka<IFoo>\n    .With<HelloAdornment>()\n    .Name<FooMatryoshka>();\n\nDecorate<IBar> // you can use Decorate<> alias if you prefer\n    .With<HelloAdornment>()\n    .Name<BarMatryoshka>();\n"})}),(0,r.jsx)(n.p,{children:"Done! Now we can test the generated classes:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:'var fooMatryoshka = new FooMatryoshka(new Foo());\nvar barMatryoshka = new BarMatryoshka(new Bar());\n\nfooMatryoshka.Foo(); // "Hello, Foo!" will be written to console\nbarMatryoshka.Bar(); // "Hello, Bar!" will be written to console\n'})}),(0,r.jsxs)(n.p,{children:["In a production environment, you will likely prefer to use DI containers that support decoration (Grace, Autofac, etc.) or libraries like ",(0,r.jsx)(n.a,{href:"https://github.com/khellang/Scrutor",children:"Scrutor"}),". Here's an example of using matryoshkas together with Scrutor:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"using Scrutor;\nusing Matryoshki.Abstractions;\n\npublic static class MatryoshkaScrutorExtensions\n{\n    public static IServiceCollection DecorateWithMatryoshka(\n        this IServiceCollection services,\n        Expression<Func<MatryoshkaType>> expression)\n    {\n        var matryoshkaType = expression.Compile()();\n\n        services.Decorate(matryoshkaType.Target, matryoshkaType.Type);\n\n        return services;\n    }\n\n    public static IServiceCollection DecorateWithNestedMatryoshkas(\n        this IServiceCollection services,\n        Expression<Func<MatryoshkaTypes>> expression)\n    {\n        var matryoshkaTypes = expression.Compile()();\n\n        foreach (var type in matryoshkaTypes)\n            services.Decorate(matryoshkaTypes.Target, type);\n\n        return services;\n    }\n}\n\ninternal static class Example\n{\n    internal static IServiceCollection DecorateBar(\n        this IServiceCollection services)\n    {\n        return services.DecorateWithMatryoshka(\n            () => Matryoshka<IBar>.With<HelloAdornment>());\n    }\n}\n"})}),(0,r.jsx)(n.h3,{id:"chains-of-decorations-with-inestingt1--tn",children:"Chains of decorations with INesting<T1, ..., TN>"}),(0,r.jsxs)(n.p,{children:["Reusable decoration chains can be described by creating a type that implements ",(0,r.jsx)(n.code,{children:"INesting<T1, ..., TN>"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"public record ObservabilityNesting : INesting<MetricsAdornment, LoggingAdornment, TracingAdornment>;\n"})}),(0,r.jsx)(n.p,{children:"You can generate the classes using it as follows:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"static IServiceCollection DecorateFoo(IServiceCollection services)\n{\n    //assuming that you are using MatryoshkaScrutorExtensions\n    return services.DecorateWithNestedMatryoshkas(\n        () => Matryoshka<IBar>.WithNesting<ObservabilityNesting>());\n}\n"})}),(0,r.jsxs)(n.p,{children:["It is not possible to assign names to the classes when using ",(0,r.jsx)(n.code,{children:"INesting"}),". The generated types will be located in the ",(0,r.jsx)(n.code,{children:"MatryoshkiGenerated.{NestingName}"})," namespace and have names in the format ",(0,r.jsx)(n.strong,{children:"TargetTypeName"}),(0,r.jsx)(n.em,{children:"With"}),(0,r.jsx)(n.strong,{children:"AdornmentName"}),"."]}),(0,r.jsx)(n.h2,{id:"limitations",children:"Limitations"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not use a variable named ",(0,r.jsx)(n.code,{children:"value"}),", as this can conflict with a property setter."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"call"})," parameter should not be passed to other methods."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default"})," cannot be used without specifying a type argument."]}),"\n",(0,r.jsxs)(n.li,{children:["To apply decorations, the members must be abstract or virtual. To surpass this limitation you can generate an interface with expression ",(0,r.jsx)(n.code,{children:"From<TClass>.ExtractInterface<TInterface>()"})," and then decrorate ",(0,r.jsx)(n.code,{children:"TInterface"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"The decoration expression must be computable at compile time and written with a single statement"}),"\n",(0,r.jsx)(n.li,{children:"Pattern matching will not always work"}),"\n"]}),(0,r.jsx)(n.h2,{id:"license",children:"License"}),(0,r.jsx)(n.p,{children:"This project is licensed under the MIT license."}),(0,r.jsx)(n.h2,{id:"quick-links",children:"Quick links"}),(0,r.jsx)(n.p,{children:"Tips"})]}),"\n",(0,r.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Adding decorators to an implementation of interface"})}),"\n",(0,r.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(n.strong,{children:"Matryoshki"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t\t<PackageReference Include="Matryoshki" Version="1.1.4" />\n\t\t<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="7.0.0" />\n\n\t</ItemGroup>\n\n\n</Project>\n\n'})})]}),(0,r.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Matryoshki"})," in ",(0,r.jsx)(n.em,{children:"Program.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing Matryoshki.Abstractions;\nDecorate<IPerson> // you can use Decorate<> alias if you prefer\n    .With<AddLog>()\n    .Name<PersonMatryoshka>();\n\nvar services = new ServiceCollection();\n\nservices.AddTransient<IPerson, Person>();\nservices.AddTransient<PersonMatryoshka, PersonMatryoshka>();\nvar serviceProvider = services.BuildServiceProvider();\nvar sp=serviceProvider.GetRequiredService<PersonMatryoshka>();\nsp.FirstName = "Andrei";\nsp.LastName = "Ignat";\nConsole.WriteLine(sp.FullName());\n\n'})})]}),(0,r.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\AddLog.cs",label:"AddLog.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Matryoshki"})," in ",(0,r.jsx)(n.em,{children:"AddLog.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nnamespace MatryoshkiDemo;\n\ninternal class AddLog : IAdornment\n{\n    public TResult MethodTemplate<TResult>(Call<TResult> call)\n    {        \n        Console.WriteLine($"start Calling {call.MemberName}  !");\n        var data    =call.Forward();\n        Console.WriteLine($"end calling {call.MemberName} !");\n        return data;\n\n    }\n}\n'})})]}),(0,r.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\IPerson.cs",label:"IPerson.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Matryoshki"})," in ",(0,r.jsx)(n.em,{children:"IPerson.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace MatryoshkiDemo;\n\npublic interface IPerson\n{\n    string? FirstName { get; set; }\n    int ID { get; set; }\n    string? LastName { get; set; }\n\n    string FullName();\n}\n"})})]}),(0,r.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\Person.cs",label:"Person.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"Matryoshki"})," in ",(0,r.jsx)(n.em,{children:"Person.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nnamespace MatryoshkiDemo;\n\npublic class Person : IPerson\n{\n    public int ID { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n\n    public string FullName()\n    {\n        return $"{FirstName} {LastName}";\n    }\n}\n\n'})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\obj\\GX\\Matryoshki.Generators\\Matryoshki.Generators.CompiledAdornmentSourceGenerator\\MatryoshkiDemo_AddLog.Compiled.g.cs",label:"MatryoshkiDemo_AddLog.Compiled.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'[assembly: Matryoshki.Abstractions.CompiledAdornmentAttribute("MatryoshkiDemo.AddLog", "AddLog", "DQpuYW1lc3BhY2UgTWF0cnlvc2hraURlbW87DQoNCmludGVybmFsIGNsYXNzIEFkZExvZyA6IElBZG9ybm1lbnQNCnsNCiAgICBwdWJsaWMgVFJlc3VsdCBNZXRob2RUZW1wbGF0ZTxUUmVzdWx0PihDYWxsPFRSZXN1bHQ+IGNhbGwpDQogICAgeyAgICAgICAgDQogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQic3RhcnQgQ2FsbGluZyB7Y2FsbC5NZW1iZXJOYW1lfSAgISIpOw0KICAgICAgICB2YXIgZGF0YSAgICA9Y2FsbC5Gb3J3YXJkKCk7DQogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiZW5kIGNhbGxpbmcge2NhbGwuTWVtYmVyTmFtZX0gISIpOw0KICAgICAgICByZXR1cm4gZGF0YTsNCg0KICAgIH0NCn0=")]\n'})})}),(0,r.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Matryoshki\\src\\MatryoshkiDemo\\obj\\GX\\Matryoshki.Generators\\Matryoshki.Generators.MatryoshkiSourceGenerator\\.PersonMatryoshka.g.cs",label:".PersonMatryoshka.g.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing MatryoshkiDemo;\n\n#nullable enable\npublic class PersonMatryoshka : MatryoshkiDemo.IPerson\n{\n    private readonly MatryoshkiDemo.IPerson _inner;\n    public PersonMatryoshka(MatryoshkiDemo.IPerson inner)\n    {\n        _inner = inner;\n    }\n\n    private static readonly string[] MethodParameterNamesForPropertyFirstName = new string[]\n    {\n    };\n    public string? FirstName\n    {\n        get\n        {\n            Console.WriteLine($"start Calling {"FirstName"}  !");\n            var data = _inner.FirstName;\n            Console.WriteLine($"end calling {"FirstName"} !");\n            return data;\n        }\n\n        set\n        {\n            Console.WriteLine($"start Calling {"FirstName"}  !");\n            var data = Matryoshki.Abstractions.Nothing.FromPropertyAction(_inner, value, static (@inner\u0394\u0394\u0394, @value\u0394\u0394\u0394) => @inner\u0394\u0394\u0394.FirstName = @value\u0394\u0394\u0394);\n            Console.WriteLine($"end calling {"FirstName"} !");\n            return;\n        }\n    }\n\n    private static readonly string[] MethodParameterNamesForPropertyID = new string[]\n    {\n    };\n    public int ID\n    {\n        get\n        {\n            Console.WriteLine($"start Calling {"ID"}  !");\n            var data = _inner.ID;\n            Console.WriteLine($"end calling {"ID"} !");\n            return data;\n        }\n\n        set\n        {\n            Console.WriteLine($"start Calling {"ID"}  !");\n            var data = Matryoshki.Abstractions.Nothing.FromPropertyAction(_inner, value, static (@inner\u0394\u0394\u0394, @value\u0394\u0394\u0394) => @inner\u0394\u0394\u0394.ID = @value\u0394\u0394\u0394);\n            Console.WriteLine($"end calling {"ID"} !");\n            return;\n        }\n    }\n\n    private static readonly string[] MethodParameterNamesForPropertyLastName = new string[]\n    {\n    };\n    public string? LastName\n    {\n        get\n        {\n            Console.WriteLine($"start Calling {"LastName"}  !");\n            var data = _inner.LastName;\n            Console.WriteLine($"end calling {"LastName"} !");\n            return data;\n        }\n\n        set\n        {\n            Console.WriteLine($"start Calling {"LastName"}  !");\n            var data = Matryoshki.Abstractions.Nothing.FromPropertyAction(_inner, value, static (@inner\u0394\u0394\u0394, @value\u0394\u0394\u0394) => @inner\u0394\u0394\u0394.LastName = @value\u0394\u0394\u0394);\n            Console.WriteLine($"end calling {"LastName"} !");\n            return;\n        }\n    }\n\n    private static readonly string[] MethodParameterNamesForMethodFullName = new string[]\n    {\n    };\n    public string FullName()\n    {\n        Console.WriteLine($"start Calling {"FullName"}  !");\n        var data = _inner.FullName();\n        Console.WriteLine($"end calling {"FullName"} !");\n        return data;\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(4293).A+"",children:"Download Example project Matryoshki "})})}),"\n",(0,r.jsx)(n.h3,{id:"share-matryoshki",children:"Share Matryoshki"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&quote=Matryoshki",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&text=Matryoshki:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&title=Matryoshki",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki&title=Matryoshki&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FMatryoshki",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Matryoshki",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Matryoshki"})}),"\n",(0,r.jsx)(n.h3,{id:"in-the-same-category-interface---11-other-generators",children:"In the same category (Interface) - 11 other generators"}),"\n",(0,r.jsx)(n.h4,{id:"biwenautoclassgen",children:(0,r.jsx)(n.a,{href:"/docs/Biwen.AutoClassGen",children:"Biwen.AutoClassGen"})}),"\n",(0,r.jsx)(n.h4,{id:"copycat",children:(0,r.jsx)(n.a,{href:"/docs/CopyCat",children:"CopyCat"})}),"\n",(0,r.jsx)(n.h4,{id:"farskepticautocompose",children:(0,r.jsx)(n.a,{href:"/docs/Farskeptic.AutoCompose",children:"Farskeptic.AutoCompose"})}),"\n",(0,r.jsx)(n.h4,{id:"makeinterfacegenerator",children:(0,r.jsx)(n.a,{href:"/docs/MakeInterface.Generator",children:"MakeInterface.Generator"})}),"\n",(0,r.jsx)(n.h4,{id:"mineralsautointerfaces",children:(0,r.jsx)(n.a,{href:"/docs/Minerals.AutoInterfaces",children:"Minerals.AutoInterfaces"})}),"\n",(0,r.jsx)(n.h4,{id:"netautomaticinterface",children:(0,r.jsx)(n.a,{href:"/docs/NetAutomaticInterface",children:"NetAutomaticInterface"})}),"\n",(0,r.jsx)(n.h4,{id:"proxygen",children:(0,r.jsx)(n.a,{href:"/docs/ProxyGen",children:"ProxyGen"})}),"\n",(0,r.jsx)(n.h4,{id:"roozieautointerface",children:(0,r.jsx)(n.a,{href:"/docs/Roozie.AutoInterface",children:"Roozie.AutoInterface"})}),"\n",(0,r.jsx)(n.h4,{id:"rscg_compositeprovider",children:(0,r.jsx)(n.a,{href:"/docs/RSCG_CompositeProvider",children:"RSCG_CompositeProvider"})}),"\n",(0,r.jsx)(n.h4,{id:"rscg_interface_to_null_object",children:(0,r.jsx)(n.a,{href:"/docs/rscg_Interface_to_null_object",children:"rscg_Interface_to_null_object"})}),"\n",(0,r.jsx)(n.h4,{id:"rscg_static",children:(0,r.jsx)(n.a,{href:"/docs/RSCG_Static",children:"RSCG_Static"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);