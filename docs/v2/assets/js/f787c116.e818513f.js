"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[5152],{8134:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>h,default:()=>u,frontMatter:()=>d,metadata:()=>l,toc:()=>x});const l=JSON.parse('{"id":"RSCG-Examples/VYaml","title":"233 - VYaml","description":"Serializing to/from YAML format","source":"@site/docs/RSCG-Examples/VYaml.md","sourceDirName":"RSCG-Examples","slug":"/VYaml","permalink":"/RSCG_Examples/v2/docs/VYaml","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2330,"frontMatter":{"sidebar_position":2330,"title":"233 - VYaml","description":"Serializing to/from YAML format","slug":"/VYaml"},"sidebar":"tutorialSidebar","previous":{"title":"232 - ConsoleAppFramework","permalink":"/RSCG_Examples/v2/docs/ConsoleAppFramework"},"next":{"title":"234 - RapidEnum","permalink":"/RSCG_Examples/v2/docs/RapidEnum"}}');var s=i(74848),r=i(28453),a=i(11470),t=i(19365),c=i(14252),o=i(72866);const d={sidebar_position:2330,title:"233 - VYaml",description:"Serializing to/from YAML format",slug:"/VYaml"},h="VYaml  by Hadashi A",m={},x=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Author",id:"author",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Features",id:"features",level:2},{value:"Most recent roadmap",id:"most-recent-roadmap",level:2},{value:"Installation",id:"installation",level:2},{value:"NuGet",id:"nuget",level:3},{value:"Unity",id:"unity",level:3},{value:"Usage",id:"usage",level:2},{value:"Serialize / Deserialize",id:"serialize--deserialize",level:3},{value:"Built-in supported types",id:"built-in-supported-types",level:4},{value:"Deserialize as <code>dynamic</code>",id:"deserialize-as-dynamic",level:4},{value:"Deserialize multiple documents",id:"deserialize-multiple-documents",level:4},{value:"Naming convention",id:"naming-convention",level:4},{value:"Custom constructor",id:"custom-constructor",level:4},{value:"Enum",id:"enum",level:4},{value:"Polymorphism (Union)",id:"polymorphism-union",level:4},{value:"Customize serialization behaviour",id:"customize-serialization-behaviour",level:2},{value:"Low-Level API",id:"low-level-api",level:2},{value:"Parser",id:"parser",level:3},{value:"Emitter",id:"emitter",level:3},{value:"Emit string in various formats",id:"emit-string-in-various-formats",level:4},{value:"Emit sequences and other structures",id:"emit-sequences-and-other-structures",level:4},{value:"YAML 1.2 spec support status",id:"yaml-12-spec-support-status",level:2},{value:"Implicit primitive type conversion of scalar",id:"implicit-primitive-type-conversion-of-scalar",level:3},{value:"https://yaml.org/spec/1.2.2/",id:"httpsyamlorgspec122",level:3},{value:"Credits",id:"credits",level:2},{value:"Aurhor",id:"aurhor",level:2},{value:"License",id:"license",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share VYaml",id:"share-vyaml",level:3},...o.RM];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"vyaml--by-hadashi-a",children:"VYaml  by Hadashi A"})}),"\n",(0,s.jsx)(c.A,{toc:x}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/VYaml/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/VYaml?label=VYaml",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/hadashiA/VYaml",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/hadashiA/VYaml?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/hadashiA/VYaml?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"VYaml"})]}),(0,s.jsx)(n.p,{children:"The extra fast YAML library for C#"}),(0,s.jsx)(n.p,{children:"Author: Hadashi A"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/VYaml/",children:"https://www.nuget.org/packages/VYaml/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/hadashiA/VYaml",children:"https://github.com/hadashiA/VYaml"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/hadashiA/VYaml",children:"https://github.com/hadashiA/VYaml"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"author",children:"Author"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Hadashi A\n",(0,s.jsx)(n.img,{src:"https://github.com/hadashiA.png",alt:"Alt text"})]})}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.h1,{id:"vyaml",children:"VYaml"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/hadashiA/VYaml/LICENSE",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/license/hadashiA/VYaml",alt:"GitHub license"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/unity-2021.3+-000.svg",alt:"Unity 2022.2+"}),"\n",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/VYaml",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/v/VYaml.svg",alt:"NuGet"})})]}),(0,s.jsx)(n.p,{children:"VYaml is a pure C# YAML 1.2 implementation, which is extra fast, low memory footprint with focued on .NET and Unity."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The parser is heavily influenced by ",(0,s.jsx)(n.a,{href:"https://github.com/chyh1990/yaml-rust",children:"yaml-rust"}),", and libyaml, yaml-cpp."]}),"\n",(0,s.jsxs)(n.li,{children:["Serialization interface/implementation is heavily influenced by ",(0,s.jsx)(n.a,{href:"https://github.com/neuecc/Utf8Json",children:"Utf8Json"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/neuecc/MessagePack-CSharp",children:"MessagePack-CSharp"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/Cysharp/MemoryPack",children:"MemoryPack"}),"."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["The reason VYaml is fast is it handles utf8 byte sequences directly with newface api set of C# (",(0,s.jsx)(n.code,{children:"System.Buffers.*"}),", etc).\nIn parsing, scalar values are pooled and no allocation occurs until ",(0,s.jsx)(n.code,{children:"Scalar.ToString()"}),". This works with very low memory footprint and low performance overhead, in environments such as Unity."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{src:"https://github.com/hadashiA/VYaml/screenshots/screenshot_benchmark_dotnet.png",alt:"screenshot_benchmark_dotnet.png"}),"\n",(0,s.jsx)(n.img,{src:"https://github.com/hadashiA/VYaml/screenshots/screenshot_benchmark_unity.png",alt:"screenshot_benchmark_unity.png"})]}),(0,s.jsxs)(n.p,{children:["Compared with ",(0,s.jsx)(n.a,{href:"https://github.com/aaubry/YamlDotNet",children:"YamlDotNet"})," (most popular yaml library in C#), basically 6x faster and about 1/50 heap allocations in some case."]}),(0,s.jsx)(n.h2,{id:"features",children:"Features"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["YAML Parser (Reader)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#httpsyamlorgspec122",children:"YAML 1.2 mostly supported"})}),"\n",(0,s.jsxs)(n.li,{children:["Support Unity serialized weird YAML format","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://forum.unity.com/threads/scene-files-invalid-yaml.355653/",children:"https://forum.unity.com/threads/scene-files-invalid-yaml.355653/"})}),"\n",(0,s.jsxs)(n.li,{children:["YAML automatically generated by Unity may contain the symbol ",(0,s.jsx)(n.code,{children:'"stripped"'})," in the document start line. This is against the YAML specification, but VYaml supports this format."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["YAML Emitter (Writer)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write primitive types."}),"\n",(0,s.jsx)(n.li,{children:"Write plain scalar, double-quoted scalar, literal scalar."}),"\n",(0,s.jsx)(n.li,{children:"Write block style sequence, flow style sequence, and block mapping."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Deserialize / Serialize","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Convert between YAML and C# user-defined types."}),"\n",(0,s.jsxs)(n.li,{children:["Convert between YAML and primitive collection via ",(0,s.jsx)(n.code,{children:"dynamic"})," ."]}),"\n",(0,s.jsx)(n.li,{children:"Support interface-typed and abstract class-typed objects."}),"\n",(0,s.jsxs)(n.li,{children:["Support anchor (",(0,s.jsx)(n.code,{children:"&"}),") and alias (",(0,s.jsx)(n.code,{children:"*"}),") in the YAML spec."]}),"\n",(0,s.jsx)(n.li,{children:"Support multiple yaml documents to C# collection."}),"\n",(0,s.jsxs)(n.li,{children:["Customization","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rename key"}),"\n",(0,s.jsx)(n.li,{children:"Ignore member"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Mainly focused on Unity","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only 2021.3 and higher (netstandard2.1 compatible)"}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"most-recent-roadmap",children:"Most recent roadmap"}),(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Support node tree representation"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),(0,s.jsx)(n.h3,{id:"nuget",children:"NuGet"}),(0,s.jsxs)(n.p,{children:["You can install the following nuget package.\n",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/VYaml",children:"https://www.nuget.org/packages/VYaml"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package VYaml\n"})}),(0,s.jsx)(n.h3,{id:"unity",children:"Unity"}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!IMPORTANT]\nStarting with version 1.0, VYaml is now via NuGetForUnity.\nIf you are using an older version, please follow these instructions to reinstall."}),"\n"]}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!NOTE]\nRequirements: Unity 2021.3 or later."}),"\n"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Install NugetForUnity."}),"\n",(0,s.jsx)(n.li,{children:'Open the NuGet window by going to NuGet > Manage NuGet Packages, search for the "VYaml" package, and install it.'}),"\n",(0,s.jsx)(n.li,{children:"(Optional) Installing Unity-specific extensions:"}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Open the Package Manager window by selecting Window > Package Manager, then click on [+] > Add package from git URL and enter the following URL:"}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"https://github.com/hadashiA/VYaml.git?path=VYaml.Unity/Assets/VYaml#1.2.0\n"})}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,s.jsx)(n.h3,{id:"serialize--deserialize",children:"Serialize / Deserialize"}),(0,s.jsxs)(n.p,{children:["Define a struct or class to be serialized and annotate it with the ",(0,s.jsx)(n.code,{children:"[YamlObject]"})," attribute and the partial keyword."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using VYaml.Annotations;\n\n[YamlObject]\npublic partial class Sample\n{\n    // By default, public fields and properties are serializable.\n    public string A; // public field\n    public string B \\{ get; set; \\} // public property\n    public string C \\{ get; private set; \\} // public property (private setter)\n    public string D \\{ get; init; \\} // public property (init-only setter)\n\n    // use `[YamlIgnore]` to remove target of a public member\n    [YamlIgnore]\n    public int PublicProperty2 => PublicProperty + PublicField;\n}\n"})}),(0,s.jsx)(n.p,{children:"Why partial is necessary ?"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["VYaml uses ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview",children:"SourceGenerator"})," for metaprogramming, which supports automatic generation of partial declarations, sets to private fields."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var utf8Yaml = YamlSerializer.Serialize(new Sample\n{\n    A = "hello",\n    B = "foo",\n    C = "bar",\n    D = "hoge",\n});\n'})}),(0,s.jsx)(n.p,{children:"Result:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"a: hello\nb: foo\nc: bar\nd: hoge\n"})}),(0,s.jsxs)(n.p,{children:["By default, The ",(0,s.jsx)(n.code,{children:"Serialize<T>"})," method returns an utf8 byte array.\nThis is because it is common for writes to files or any data stores to be stored as strings in utf8 format."]}),(0,s.jsx)(n.p,{children:"If you wish to receive the results in a C# string, do the following\nNote that this has the overhead of conversion to utf16."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var yamlString = YamlSerializer.SerializeToString(...);\n"})}),(0,s.jsx)(n.p,{children:"You can also convert yaml to C#."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using var stream = File.OpenRead("/path/to/yaml");\nvar sample = await YamlSerializer.DeserializeAsync<Sample>(stream);\n\n// Or \n// var yamlUtf8Bytes = System.Text.Encoding.UTF8.GetBytes("<yaml string....>");\n// var sample = YamlSerializer.Deserialize<Sample>(yamlUtf8Bytes);\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'sample.A // #=> "hello"\nsample.B // #=> "foo"\nsample.C // #=> "bar"\nsample.D // #=> "hoge"\n'})}),(0,s.jsx)(n.h4,{id:"built-in-supported-types",children:"Built-in supported types"}),(0,s.jsx)(n.p,{children:"These types can be serialized by default:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[".NET primitives (",(0,s.jsx)(n.code,{children:"byte"}),", ",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"bool"}),", ",(0,s.jsx)(n.code,{children:"char"}),", ",(0,s.jsx)(n.code,{children:"double"}),", etc.)"]}),"\n",(0,s.jsx)(n.li,{children:"Any enum (Currently, only simple string representation)"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string"}),", ",(0,s.jsx)(n.code,{children:"decimal"}),", ",(0,s.jsx)(n.code,{children:"Half"}),", ",(0,s.jsx)(n.code,{children:"BigInteger"}),", ",(0,s.jsx)(n.code,{children:"Complex"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TimeSpan"}),", ",(0,s.jsx)(n.code,{children:"DateTime"}),", ",(0,s.jsx)(n.code,{children:"DateTimeOffset"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Guid"}),", ",(0,s.jsx)(n.code,{children:"Uri"}),", ",(0,s.jsx)(n.code,{children:"Version"}),", ",(0,s.jsx)(n.code,{children:"Type"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"byte[]"})," as base64 string"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"T[]"}),", ",(0,s.jsx)(n.code,{children:"T[,]"}),", ",(0,s.jsx)(n.code,{children:"T[,,]"}),", ",(0,s.jsx)(n.code,{children:"T[,,]"}),", ",(0,s.jsx)(n.code,{children:"BitArray"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Nullable<>"}),", ",(0,s.jsx)(n.code,{children:"KeyValuePair<,>"}),", ",(0,s.jsx)(n.code,{children:"Tuple<,...>"}),", ",(0,s.jsx)(n.code,{children:"ValueTuple<,...>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"List<>"}),", ",(0,s.jsx)(n.code,{children:"Stack<>"}),", ",(0,s.jsx)(n.code,{children:"Queue<>"}),", ",(0,s.jsx)(n.code,{children:"LinkedList<>"}),", ",(0,s.jsx)(n.code,{children:"HashSet<>"}),", ",(0,s.jsx)(n.code,{children:"SortedSet<>"}),",  ",(0,s.jsx)(n.code,{children:"BlockingCollection<>"}),", ",(0,s.jsx)(n.code,{children:"ConcurrentQueue<>"}),", ",(0,s.jsx)(n.code,{children:"ConcurrentStack<>"}),", ",(0,s.jsx)(n.code,{children:"ConcurrentBag<>"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Dictionary<,>"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IEnumerable<>"}),", ",(0,s.jsx)(n.code,{children:"ICollection<>"}),", ",(0,s.jsx)(n.code,{children:"IList<>"}),", ",(0,s.jsx)(n.code,{children:"IReadOnlyCollection<>"}),", ",(0,s.jsx)(n.code,{children:"IReadOnlyList<>"}),", ",(0,s.jsx)(n.code,{children:"ISet<>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IDictionary<,>"}),", ",(0,s.jsx)(n.code,{children:"IReadOnlyDictionary<,>"})]}),"\n"]}),(0,s.jsx)(n.p,{children:"The following types of support are included in the package for Unity."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Color"}),", ",(0,s.jsx)(n.code,{children:"Color32"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Vector2"}),", ",(0,s.jsx)(n.code,{children:"Vector2Int"}),", ",(0,s.jsx)(n.code,{children:"Vector3"}),", ",(0,s.jsx)(n.code,{children:"Vector3Int"}),", ",(0,s.jsx)(n.code,{children:"Vector4"}),", ",(0,s.jsx)(n.code,{children:"Vector4Int"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Matrix4x4"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Quaternion"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Rect"}),", ",(0,s.jsx)(n.code,{children:"RectInt"}),", ",(0,s.jsx)(n.code,{children:"RectOffset"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Addtionaly, If the ",(0,s.jsx)(n.code,{children:"Unity.Mathmatics"})," package is installed, the following support is enabled:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool2"}),", ",(0,s.jsx)(n.code,{children:"bool3"}),", ",(0,s.jsx)(n.code,{children:"bool4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float2"}),", ",(0,s.jsx)(n.code,{children:"float3"}),", ",(0,s.jsx)(n.code,{children:"float4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"double2"}),", ",(0,s.jsx)(n.code,{children:"double3"}),", ",(0,s.jsx)(n.code,{children:"double4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"half2"}),", ",(0,s.jsx)(n.code,{children:"half3"}),", ",(0,s.jsx)(n.code,{children:"half4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int2"}),", ",(0,s.jsx)(n.code,{children:"int3"}),", ",(0,s.jsx)(n.code,{children:"int4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"uint2"}),", ",(0,s.jsx)(n.code,{children:"uint3"}),", ",(0,s.jsx)(n.code,{children:"uint4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool2x2"}),", ",(0,s.jsx)(n.code,{children:"bool2x3"}),", ",(0,s.jsx)(n.code,{children:"bool2x4"}),", ",(0,s.jsx)(n.code,{children:"bool3x2"}),", ",(0,s.jsx)(n.code,{children:"bool3x3"}),", ",(0,s.jsx)(n.code,{children:"bool3x4"}),", ",(0,s.jsx)(n.code,{children:"bool4x2"}),", ",(0,s.jsx)(n.code,{children:"bool4x3"}),", ",(0,s.jsx)(n.code,{children:"bool4x4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float2x2"}),", ",(0,s.jsx)(n.code,{children:"float2x3"}),", ",(0,s.jsx)(n.code,{children:"float2x4"}),", ",(0,s.jsx)(n.code,{children:"float3x2"}),", ",(0,s.jsx)(n.code,{children:"float3x3"}),", ",(0,s.jsx)(n.code,{children:"float3x4"}),", ",(0,s.jsx)(n.code,{children:"float4x2"}),", ",(0,s.jsx)(n.code,{children:"float4x3"}),", ",(0,s.jsx)(n.code,{children:"float4x4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"double2x2"}),", ",(0,s.jsx)(n.code,{children:"double2x3"}),", ",(0,s.jsx)(n.code,{children:"double2x4"}),", ",(0,s.jsx)(n.code,{children:"double3x2"}),", ",(0,s.jsx)(n.code,{children:"double3x3"}),", ",(0,s.jsx)(n.code,{children:"double3x4"}),", ",(0,s.jsx)(n.code,{children:"double4x2"}),", ",(0,s.jsx)(n.code,{children:"double4x3"}),", ",(0,s.jsx)(n.code,{children:"double4x4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int2x2"}),", ",(0,s.jsx)(n.code,{children:"int2x3"}),", ",(0,s.jsx)(n.code,{children:"int2x4"}),", ",(0,s.jsx)(n.code,{children:"int3x2"}),", ",(0,s.jsx)(n.code,{children:"int3x3"}),", ",(0,s.jsx)(n.code,{children:"int3x4"}),", ",(0,s.jsx)(n.code,{children:"int4x2"}),", ",(0,s.jsx)(n.code,{children:"int4x3"}),", ",(0,s.jsx)(n.code,{children:"int4x4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"uint2x2"}),", ",(0,s.jsx)(n.code,{children:"uint2x3"}),", ",(0,s.jsx)(n.code,{children:"uint2x4"}),", ",(0,s.jsx)(n.code,{children:"uint3x2"}),", ",(0,s.jsx)(n.code,{children:"uint3x3"}),", ",(0,s.jsx)(n.code,{children:"uint3x4"}),", ",(0,s.jsx)(n.code,{children:"uint4x2"}),", ",(0,s.jsx)(n.code,{children:"uint4x3"}),", ",(0,s.jsx)(n.code,{children:"uint4x4"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"quaternion"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To enable it, do the following"}),"\n"]}),"\n"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Install the unity package.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["See ",(0,s.jsx)(n.a,{href:"#unity",children:"Installation/Unity"})," section."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Add UnityResolver to YamlSeriarOptions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"YamlSerializer.DefaultOptions = new YamlSerializerOptions\n{\n    Resolver = CompositeResolver.Create(new IYamlFormatterResolver[]\n    {\n        StandardResolver.Instance,\n        UnityResolver.Instance,\n    })\n};\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsxs)(n.h4,{id:"deserialize-as-dynamic",children:["Deserialize as ",(0,s.jsx)(n.code,{children:"dynamic"})]}),(0,s.jsxs)(n.p,{children:["You can also deserialize into primitive ",(0,s.jsx)(n.code,{children:"object"})," type implicitly."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var yaml = YamlSerializer.Deserialize<dynamic>(yamlUtf8Bytes);\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'yaml["a"] // #=> "hello"\nyaml["b"] // #=> "aaa"\nyaml["c"] // #=> "hoge"\nyaml["d"] // #=> "ddd"\n'})}),(0,s.jsx)(n.h4,{id:"deserialize-multiple-documents",children:"Deserialize multiple documents"}),(0,s.jsxs)(n.p,{children:["YAML allows for multiple data in one file by separating them with ",(0,s.jsx)(n.code,{children:"---"}),'. This is called a "Document".\nIf you want to load multiple documents, you can use ',(0,s.jsx)(n.code,{children:"Yamlserializer.DeserializeMultipleDocuments<T>(...)"}),"."]}),(0,s.jsx)(n.p,{children:"For example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'---\nTime: 2001-11-23 15:01:42 -5\nUser: ed\nWarning:\n  This is an error message\n  for the log file\n---\nTime: 2001-11-23 15:02:31 -5\nUser: ed\nWarning:\n  A slightly different error\n  message.\n---\nDate: 2001-11-23 15:03:17 -5\nUser: ed\nFatal:\n  Unknown variable "bar"\nStack:\n- file: TopClass.py\n  line: 23\n  code: |\n    x = MoreObject("345\\n")\n- file: MoreClass.py\n  line: 58\n  code: |-\n    foo = bar\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var documents = YamlSerializer.DeserializeMultipleDocuments<dynamic>(yaml);\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'documents[0]["Warning"] // #=> "This is an error message for the log file"\ndocuments[1]["Warning"] // #=> "A slightly different error message."\ndocuments[2]["Fatal"]   // #=> "Unknown variable \\"bar\\""\n'})}),(0,s.jsx)(n.h4,{id:"naming-convention",children:"Naming convention"}),(0,s.jsxs)(n.p,{children:["\u2757"," By default, VYaml maps C# property names in lower camel case (e.g. ",(0,s.jsx)(n.code,{children:"propertyName"}),") format to yaml keys."]}),(0,s.jsxs)(n.p,{children:["If you want to customize this behaviour, ",(0,s.jsx)(n.code,{children:"YamlSerializerOptions.NamingConvention"})," to set it."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'var options = YamlSerializerOptions.Standard;\noptions.NamingConvention = NamingConvention.SnakeCase;\n\nYamlSerializer.Serialize(new A \\{ FooBar = 123 }, options); // #=> "{ foo_bar: 123 }"\n'})}),(0,s.jsx)(n.p,{children:"List of possible values:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["NamingConvention.LowerCamelCase","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Like ",(0,s.jsx)(n.code,{children:"propertyName"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["NamingConvention.UpperCamelCase:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Like ",(0,s.jsx)(n.code,{children:"PropertyName"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["NamingConvention.SnakeCase:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Like  ",(0,s.jsx)(n.code,{children:"property_name"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["NamingConvention.KebabCase:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Like ",(0,s.jsx)(n.code,{children:"property-name"})]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["[!TIP]\nIf you specify an option other than the default ",(0,s.jsx)(n.code,{children:"LowerCamelCase"}),", there will be a slight performance degradation at runtime."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["You may specify NamingConvention for each type declaration by ",(0,s.jsx)(n.code,{children:"[YamlObject]"})," attribute.\nIn this case, no performance degradation occurs."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[YamlObject(NamingConvention.SnakeCase)]\npublic partial class Sample\n{\n    public int FooBar \\{ get; init; }\n}\n"})}),(0,s.jsx)(n.p,{children:"This serialize as:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"foo_bar: 100\n"})}),(0,s.jsxs)(n.p,{children:["Also, you can change the key name each members with ",(0,s.jsx)(n.code,{children:'[YamlMember("name")]'})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[YamlObject]\npublic partial class Sample\n{\n    [YamlMember("foo-bar-alias")]\n    public int FooBar \\{ get; init; }\n}\n'})}),(0,s.jsx)(n.p,{children:"This serialize as:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"foo-bar-alias: 100\n"})}),(0,s.jsx)(n.h4,{id:"custom-constructor",children:"Custom constructor"}),(0,s.jsx)(n.p,{children:"VYaml supports both parameterized and parameterless constructors. The selection of the constructor follows these rules."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If there is ",(0,s.jsx)(n.code,{children:"[YamlConstructor]"}),", use it."]}),"\n",(0,s.jsx)(n.li,{children:"If there is no explicit constructor use a parameterless one."}),"\n",(0,s.jsx)(n.li,{children:"If there is one constructor use it."}),"\n",(0,s.jsxs)(n.li,{children:["If there are multiple constructors, then the ",(0,s.jsx)(n.code,{children:"[YamlConstructor]"})," attribute must be applied to the desired constructor (the generator will not automatically choose one), otherwise the generator will emit an error."]}),"\n"]}),(0,s.jsx)(n.p,{children:":note: If using a parameterized constructor, all parameter names must match corresponding member names (case-insensitive)."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[YamlObject]\npublic partial class Person\n{\n    public int Age \\{ get; \\} \n    public string Name \\{ get; }\n\n    // You can use a parameterized constructor - parameter names must match corresponding members name (case-insensitive)\n    public Person(int age, string name)\n    {\n        Age = age;\n        Name = name;\n    }\n}\n\n[YamlObject]\npublic partial class Person\n{\n    public int Age \\{ get; set; }\n    public string Name \\{ get; set; }\n    \n    public Person()\n    {\n        // ...\n    }\n\n    // If there are multiple constructors, then [YamlConstructor] should be used\n    [YamlConstructor]\n    public Person(int age, string name)\n    {\n        this.Age = age;\n        this.Name = name;\n    }\n}\n\n\n[YamlObject]\npublic partial class Person\n{\n    public int Age \\{ get; \\} // from constructor\n    public string Name \\{ get; \\} // from constructor\n    public string Profile \\{ get; set; \\} // from setter\n\n    // If all members of the construct are not taken as arguments, setters are used for the other members\n    public Person(int age, string name)\n    {\n        this.Age = age;\n        this.Name = name;\n    }\n}\n"})}),(0,s.jsx)(n.h4,{id:"enum",children:"Enum"}),(0,s.jsx)(n.p,{children:"By default, Enum is serialized in camelCase with a leading lowercase letter, as is the key name of the object.\nFor example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"enum Foo\n{\n    Item1,\n    Item2,\n    Item3,\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'YamlSerializer.Serialize(Foo.Item1); // #=> "item1"\n'})}),(0,s.jsxs)(n.p,{children:["It respect ",(0,s.jsx)(n.code,{children:"[EnumMember]"}),", and ",(0,s.jsx)(n.code,{children:"[DataMember]"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'enum Foo\n{\n    [EnumMember(Value = "item1-alias")]\n    Item1,\n    \n    [EnumMember(Value = "item2-alias")]\n    Item2,\n    \n    [EnumMember(Value = "item3-alias")]\n    Item3,\n}\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'YamlSerializer.Serialize(Foo.Item1); // #=> "item1-alias"\n'})}),(0,s.jsxs)(n.p,{children:["And, naming covnention can also be specified by using the ",(0,s.jsx)(n.code,{children:"[YamlMember]"})," attribute."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[YamlObject(NamingConvention.SnakeCase)]\nenum Foo\n{\n    ItemOne,\n    ItemTwo,\n    ItemThree,\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'YamlSerializer.Serialize(Foo.ItemOne); // #=> "item_one"\n'})}),(0,s.jsx)(n.h4,{id:"polymorphism-union",children:"Polymorphism (Union)"}),(0,s.jsxs)(n.p,{children:["VYaml supports deserialize interface or abstract class objects for. In VYaml this feature is called Union.\nOnly interfaces and abstracts classes are allowed to be annotated with ",(0,s.jsx)(n.code,{children:"[YamlObjectUnion]"})," attributes. Unique union tags are required."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[YamlObject]\n[YamlObjectUnion("!foo", typeof(FooClass))]\n[YamlObjectUnion("!bar", typeof(BarClass))]\npublic partial interface IUnionSample\n{\n}\n\n[YamlObject]\npublic partial class FooClass : IUnionSample\n{\n    public int A \\{ get; set; }\n}\n\n[YamlObject]\npublic partial class BarClass : IUnionSample\n{\n    public string? B \\{ get; set; }\n}\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// We can deserialize as interface type.\nvar obj = YamlSerializer.Deserialize<IUnionSample>(UTF8.GetBytes("!foo \\{ a: 100 }"));\n\nobj.GetType(); // #=> FooClass\n'})}),(0,s.jsxs)(n.p,{children:["In the abobe example, The ",(0,s.jsx)(n.code,{children:"!foo"})," and ",(0,s.jsx)(n.code,{children:"!bar"}),"  are called tag in the YAML specification.\nYAML can mark arbitrary data in this way, and VYaml Union takes advantage of this."]}),(0,s.jsx)(n.p,{children:"You can also serialize:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"YamlSerializer.Serialize<IUnionSample>(new FooClass \\{ A = 100 });\n"})}),(0,s.jsx)(n.p,{children:"Result:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"!foo\na: 100\n"})}),(0,s.jsx)(n.h2,{id:"customize-serialization-behaviour",children:"Customize serialization behaviour"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IYamlFormatter&lt;T&gt;"})," is an interface customize the serialization behaviour of a your particular type."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IYamlFormatterResolver"})," is an interface can customize how it searches for ",(0,s.jsx)(n.code,{children:"IYamlFormatter&lt;T&gt;"})," at runtime."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["To perform Serialize/Deserialize, it need an ",(0,s.jsx)(n.code,{children:"IYamlFormatter&lt;T&gt;"})," corresponding to a certain C# type.",(0,s.jsx)(n.br,{}),"\n","By default, the following ",(0,s.jsx)(n.code,{children:"StandardResolver"})," works and identifies IYamlFormatter<T>."]}),(0,s.jsx)(n.p,{children:"You can customize this behavior as follows:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var options = new YamlSerializerOptions\n{\n    Resolver = CompositeResolver.Create(\n        new IYamlFormatter[]\n        {\n            new YourCustomFormatter1(), // You can add additional formatter\n        },\n        new IYamlFormatterResolver[]\n        {\n            new YourCustomResolver(),  // You can add additional resolver\n            StandardResolver.Instance, // Fallback to default behavior at the end.\n        })\n};\n        \nYamlSerializer.Deserialize<T>(yaml, options);\nYamlSerializer.Deserialize<T>(yaml, options);\n"})}),(0,s.jsx)(n.h2,{id:"low-level-api",children:"Low-Level API"}),(0,s.jsx)(n.h3,{id:"parser",children:"Parser"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"YamlParser"})," struct provides access to the complete meta-information of yaml."]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"YamlParser.Read()"})," reads through to the next syntax on yaml. (If end of stream then return false.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"YamlParser.ParseEventType"})," indicates the state of the currently read yaml parsing result."]}),"\n",(0,s.jsxs)(n.li,{children:["How to access scalar value:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"YamlParser.GetScalarAs*"})," families take the result of converting a scalar at the current position to a specified type."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"YamlParser.TryGetScalarAs*"})," families return true and take a result if the current position is a scalar and of the specified type."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"YamlParser.ReadScalarAs*"})," families is similar to GetScalarAs*, but advances the present position to after the scalar read."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["How to access meta information:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"YamlParser.TryGetCurrentTag(out Tag tag)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"YamlParser.TryGetCurrentAnchor(out Anchor anchor)"})}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.p,{children:"Basic example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var parser = YamlParser.FromBytes(utf8Bytes);\n\n// YAML contains more than one `Document`. \n// Here we skip to before first document content.\nparser.SkipAfter(ParseEventType.DocumentStart);\n\n// Scanning...\nwhile (parser.Read())\n{\n    // If the current syntax is Scalar, \n    if (parser.CurrentEventType == ParseEventType.Scalar)\n    {\n        var intValue = parser.GetScalarAsInt32();\n        var stringValue = parser.GetScalarAsString();\n        // ...\n        \n        if (parser.TryGetCurrentTag(out var tag))\n        {\n            // Check for the tag...\n        }\n        \n        if (parser.TryGetCurrentAnchor(out var anchor))\n        {\n            // Check for the anchor...\n        \\}        \n    }\n    \n    // If the current syntax is Sequence (Like a list in yaml)\n    else if (parser.CurrentEventType == ParseEventType.SequenceStart)\n    {\n        // We can check for the tag...\n        // We can check for the anchor...\n        \n        parser.Read(); // Skip SequenceStart\n\n        // Read to end of sequence\n        while (!parser.End && parser.CurrentEventType != ParseEventType.SequenceEnd)\n        {\n             // A sequence element may be a scalar or other...\n             if (parser.CurrentEventType == ParseEventType.Scalar)\n             {\n                 // ...\n             }\n             // ...\n             // ...\n             else\n             {\n                 // We can skip current element. (It could be a scalar, or alias, sequence, mapping...)\n                 parser.SkipCurrentNode();\n             }\n        }\n        parser.Read(); // Skip SequenceEnd.\n    }\n    \n    // If the current syntax is Mapping (like a Dictionary in yaml)\n    else if (parser.CurrentEventType == ParseEventType.MappingStart)\n    {\n        // We can check for the tag...\n        // We can check for the anchor...\n        \n        parser.Read(); // Skip MappingStart\n\n        // Read to end of mapping\n        while (parser.CurrentEventType != ParseEventType.MappingEnd)\n        {\n             // After Mapping start, key and value appear alternately.\n             \n             var key = parser.ReadScalarAsString();  // if key is scalar\n             var value = parser.ReadScalarAsString(); // if value is scalar\n             \n             // Or we can skip current key/value. (It could be a scalar, or alias, sequence, mapping...)\n             // parser.SkipCurrentNode(); // skip key\n             // parser.SkipCurrentNode(); // skip value\n        }\n        parser.Read(); // Skip MappingEnd.\n    }\n    \n    // Alias\n    else if (parser.CurrentEventType == ParseEventType.Alias)\n    {\n        // If Alias is used, the previous anchors must be holded somewhere.\n        // In the High level Deserialize API, `YamlDeserializationContext` does exactly this. \n    }\n}\n"})}),(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://github.com/hadashiA/VYaml/blob/master/VYaml.Tests/Parser/SpecTest.cs",children:"test code"})," for more information.\nThe above test covers various patterns for the order of ",(0,s.jsx)(n.code,{children:"ParsingEvent"}),"."]}),(0,s.jsx)(n.h3,{id:"emitter",children:"Emitter"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Utf8YamlEmitter"})," struct provides to write YAML formatted string."]}),(0,s.jsx)(n.p,{children:"Basic usage:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var buffer = new ArrayBufferWriter<byte>();\nvar emitter = new Utf8YamlEmitter(buffer); // It needs buffer implemented `IBufferWriter<byte>`\n\nemitter.BeginMapping(); // Mapping is a collection like Dictionary in YAML\n{\n    emitter.WriteString("key1");\n    emitter.WriteString("value-1");\n    \n    emitter.WriteString("key2");\n    emitter.WriteInt32(222);\n    \n    emitter.WriteString("key3");\n    emitter.WriteFloat(3.333f);\n}\nemitter.EndMapping();\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// If you want to expand a string in memory, you can do this.\nSystem.Text.Encoding.UTF8.GetString(buffer.WrittenSpan); \n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"key1: value-1\nkey2: 222\nkey3: 3.333\n"})}),(0,s.jsx)(n.h4,{id:"emit-string-in-various-formats",children:"Emit string in various formats"}),(0,s.jsx)(n.p,{children:"By default, WriteString() automatically determines the format of a scalar."}),(0,s.jsx)(n.p,{children:"Multi-line strings are automatically format as a literal scalar:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'emitter.WriteString("Hello,\\nWorld!\\n");\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"|\n  Hello,\n  World!\n"})}),(0,s.jsx)(n.p,{children:"Special characters contained strings are automatically quoted."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'emitter.WriteString("&aaaaa ");\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'"&aaaaa "\n'})}),(0,s.jsx)(n.p,{children:"Or you can specify the style explicitly:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'emitter.WriteString("aaaaaaa", ScalarStyle.Literal);\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"|-\n  aaaaaaaa\n"})}),(0,s.jsx)(n.h4,{id:"emit-sequences-and-other-structures",children:"Emit sequences and other structures"}),(0,s.jsx)(n.p,{children:"e.g:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'emitter.BeginSequence();\n{\n    emitter.BeginSequence(SequenceStyle.Flow);\n    {\n        emitter.WriteInt32(100);\n        emitter.WriteString("&hoge");\n        emitter.WriteString("bra");\n    }\n    emitter.EndSequence();\n    \n    emitter.BeginMapping();\n    {\n        emitter.WriteString("key1");\n        emitter.WriteString("item1");\n        \n        emitter.WriteString("key2");\n        emitter.BeginSequence();\n        {\n            emitter.WriteString("nested-item1")\n            emitter.WriteString("nested-item2")\n            emitter.BeginMapping();\n            {\n                emitter.WriteString("nested-key1")\n                emitter.WriteInt32(100)\n            }\n            emitter.EndMapping();\n        }\n        emitter.EndSequence();\n    }\n    emitter.EndMapping();\n}\nemitter.EndMapping();\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'- [100, "&hoge", bra]\n- key1: item1\n  key2:\n  - nested-item1\n  - nested-item2\n  - nested-key1: 100\n'})}),(0,s.jsx)(n.h2,{id:"yaml-12-spec-support-status",children:"YAML 1.2 spec support status"}),(0,s.jsx)(n.h3,{id:"implicit-primitive-type-conversion-of-scalar",children:"Implicit primitive type conversion of scalar"}),(0,s.jsx)(n.p,{children:"The following is the default implicit type interpretation."}),(0,s.jsxs)(n.p,{children:["Basically, it follows YAML Core Schema.\n",(0,s.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/#103-core-schema",children:"https://yaml.org/spec/1.2.2/#103-core-schema"})]}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Support"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Regular expression"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Resolved to type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"null | Null | NULL | ~"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"/* Empty */"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"true | True | TRUE | false | False | FALSE"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"boolean"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"[-+]? [0-9]+"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"int  (Base 10)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"0o [0-7]+"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"int (Base 8)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"0x [0-9a-fA-F]+"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"int (Base 16)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"[-+]? ( \\. [0-9]+ | [0-9]+ ( \\. [0-9]* )? ) ( [eE] [-+]? [0-9]+ )?"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"float"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"[-+]? ( \\.inf | \\.Inf | \\.INF )"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"float (Infinity)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"\u2705"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"\\.nan | \\.NaN | \\.NAN"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"float (Not a number)"})]})]})]}),(0,s.jsx)(n.h3,{id:"httpsyamlorgspec122",children:(0,s.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/",children:"https://yaml.org/spec/1.2.2/"})}),(0,s.jsxs)(n.p,{children:["Following is the results of the ",(0,s.jsx)(n.a,{href:"https://github.com/hadashiA/VYaml/blob/master/VYaml.Tests/Parser/SpecTest.cs",children:"test"})," for the examples from the  ",(0,s.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/",children:"yaml spec page"}),"."]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["2.1. Collections","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.1 Sequence of Scalars (ball players)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.2 Mapping Scalars to Scalars (player statistics)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.3 Mapping Scalars to Sequences (ball clubs in each league)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.4 Sequence of Mappings (players statistics)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.5 Sequence of Sequences"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.6 Mapping of Mappings"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["2.2. Structures","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.7 Two Documents in a Stream (each with a leading comment)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.8 Play by Play Feed from a Game"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.9 Single Document with Two Comments"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.10 Node for Sammy Sosa appears twice in this document"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.11 Mapping between Sequences"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.12 Compact Nested Mapping"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["2.3. Scalars","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.13 In literals, newlines are preserved"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.14 In the folded scalars, newlines become spaces"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.15 Folded newlines are preserved for more indented and blank lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.16 Indentation determines scope"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.17 Quoted Scalars"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.18 Multi-line Flow Scalars"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["2.4. Tags","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.19 Integers"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.20 Floating Point"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.21 Miscellaneous"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.22 Timestamps"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.23 Various Explicit Tags"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.24 Global Tags"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.25 Unordered Sets"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.26 Ordered Mappings"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["2.5. Full Length Example","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.27 Invoice"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 2.28 Log File"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["5.2. Character Encodings","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.1 Byte Order Mark"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.2 Invalid Byte Order Mark"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["5.3. Indicator Characters","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.3 Block Structure Indicators"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.4 Flow Collection Indicators"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.5 Comment Indicator"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.6 Node Property Indicators"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.7 Block Scalar Indicators"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.8 Quoted Scalar Indicators"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.9 Directive Indicator"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.10 Invalid use of Reserved Indicators"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["5.4. Line Break Characters","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.11 Line Break Characters"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.12 Tabs and Spaces"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.13 Escaped Characters"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 5.14 Invalid Escaped Characters"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.1. Indentation Spaces","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.1 Indentation Spaces"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.2 Indentation Indicators"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.2. Separation Spaces","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.3 Separation Spaces"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.3. Line Prefixes","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.4 Line Prefixes"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.4. Empty Lines","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.5 Empty Lines"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.5. Line Folding","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.6 Line Folding"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.7 Block Folding"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.8 Flow Folding"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.6. Comments","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.9 Separated Comment"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.10 Comment Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.11 Multi-Line Comments"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.7. Separation Lines","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.12 Separation Spaces"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.8. Directives","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.13 Reserved Directives"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.14 YAML directive"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.15 Invalid Repeated YAML directive"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.16 TAG directive"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.17 Invalid Repeated TAG directive"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.18 Primary Tag Handle"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.19 Secondary Tag Handle"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.20 Tag Handles"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.21 Local Tag Prefix"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.22 Global Tag Prefix"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["6.9. Node Properties","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.23 Node Properties"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.24 Verbatim Tags"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.25 Invalid Verbatim Tags"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.26 Tag Shorthands"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.27 Invalid Tag Shorthands"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.28 Non-Specific Tags"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 6.29 Node Anchors"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["7.1. Alias Nodes","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.1 Alias Nodes"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["7.2. Empty Nodes","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.2 Empty Content"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.3 Completely Empty Flow Nodes"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["7.3. Flow Scalar Styles","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.4 Double Quoted Implicit Keys"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.5 Double Quoted Line Breaks"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.6 Double Quoted Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.7 Single Quoted Characters"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.8 Single Quoted Implicit Keys"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.9 Single Quoted Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.10 Plain Characters"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.11 Plain Implicit Keys"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.12 Plain Lines"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["7.4. Flow Collection Styles","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.13 Flow Sequence"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.14 Flow Sequence Entries"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.15 Flow Mappings"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.16 Flow Mapping Entries"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.17 Flow Mapping Separate Values"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.18 Flow Mapping Adjacent Values"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.20 Single Pair Explicit Entry"]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c"," Example 7.21 Single Pair Implicit Entries"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.22 Invalid Implicit Keys"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.23 Flow Content"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 7.24 Flow Nodes"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["8.1. Block Scalar Styles","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.1 Block Scalar Header"]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c"," Example 8.2 Block Indentation Indicator"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.3 Invalid Block Scalar Indentation Indicators"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.4 Chomping Final Line Break"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.5 Chomping Trailing Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.6 Empty Scalar Chomping"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.7 Literal Scalar"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.8 Literal Content"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.9 Folded Scalar"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.10 Folded Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.11 More Indented Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.12 Empty Separation Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.13 Final Empty Lines"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.14 Block Sequence"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.15 Block Sequence Entry Types"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.16 Block Mappings"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.17 Explicit Block Mapping Entries"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.18 Implicit Block Mapping Entries"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.19 Compact Block Mappings"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.20 Block Node Types"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.21 Block Scalar Nodes"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705"," Example 8.22 Block Collection Nodes"]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"credits",children:"Credits"}),(0,s.jsx)(n.p,{children:"VYaml is inspired by:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/chyh1990/yaml-rust",children:"yaml-rust"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/neuecc/Utf8Json",children:"Utf8Json"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/neuecc/MessagePack-CSharp",children:"MessagePack-CSharp"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/Cysharp/MemoryPack",children:"MemoryPack"})]}),"\n"]}),(0,s.jsx)(n.h2,{id:"aurhor",children:"Aurhor"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/hadashiA",children:"@hadashiA"})}),(0,s.jsx)(n.h2,{id:"license",children:"License"}),(0,s.jsx)(n.p,{children:"MIT"})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Serializing to/from YAML format"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsxs)(t.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"VYaml"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="VYaml" Version="1.2.0" />\n\t  <PackageReference Include="VYaml.Annotations" Version="1.2.0" />\n\t</ItemGroup>\n\n</Project>\n\n'})})]}),(0,s.jsxs)(t.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Vyaml\\src\\Serializer\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"VYaml"})," in ",(0,s.jsx)(n.em,{children:"Program.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using SerializerDemo;\nusing VYaml.Serialization;\n\nvar p= new Person() \\{ Name= "Andrei Ignat" , Age=55};\nvar utf8Yaml = YamlSerializer.SerializeToString(p);\nConsole.WriteLine(utf8Yaml);\nvar p1 = YamlSerializer.Serialize<Person>(p);\nvar p2 = YamlSerializer.Deserialize<Person>(p1);\n\nConsole.WriteLine(p2.Name);\nConsole.WriteLine(p2.Age);\n'})})]}),(0,s.jsxs)(t.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Vyaml\\src\\Serializer\\Person.cs",label:"Person.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"VYaml"})," in ",(0,s.jsx)(n.em,{children:"Person.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using VYaml.Annotations;\nnamespace SerializerDemo;\n[YamlObject]\npublic partial class Person \n{\n    public int Age \\{ get; set; }\n\n    public string Name \\{ get; set; \\} = string.Empty;\n\n}\n\n\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsx)(a.A,{children:(0,s.jsx)(t.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Vyaml\\src\\Serializer\\obj\\GX\\VYaml.SourceGenerator\\VYaml.SourceGenerator.VYamlIncrementalSourceGenerator\\SerializerDemo.Person.YamlFormatter.g.cs",label:"SerializerDemo.Person.YamlFormatter.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:' // <auto-generated />\n #nullable enable\n #pragma warning disable CS0162 // Unreachable code\n #pragma warning disable CS0219 // Variable assigned but never used\n #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.\n #pragma warning disable CS8601 // Possible null reference assignment\n #pragma warning disable CS8602 // Possible null return\n #pragma warning disable CS8604 // Possible null reference argument for parameter\n #pragma warning disable CS8619 // Possible null reference assignment fix\n #pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method\n\n using System;\n using VYaml.Annotations;\n using VYaml.Parser;\n using VYaml.Emitter;\n using VYaml.Serialization;\n\n namespace SerializerDemo\n {\n     partial class Person\n     {\n         [VYaml.Annotations.Preserve]\n         public static void __RegisterVYamlFormatter()\n         {\n             global::VYaml.Serialization.GeneratedResolver.Register(new PersonGeneratedFormatter());\n         }\n         [VYaml.Annotations.Preserve]\n         public class PersonGeneratedFormatter : IYamlFormatter<global::SerializerDemo.Person?>\n         {\n             static readonly byte[] AgeKeyUtf8Bytes = \\{ 97, 103, 101 }; // age\n\n             static readonly byte[] NameKeyUtf8Bytes = \\{ 110, 97, 109, 101 }; // name\n\n             [VYaml.Annotations.Preserve]\n             public void Serialize(ref Utf8YamlEmitter emitter, global::SerializerDemo.Person? value, YamlSerializationContext context)\n             {\n                 if (value is null)\n                 {\n                     emitter.WriteNull();\n                     return;\n                 }\n                 emitter.BeginMapping();\n                 if (context.Options.NamingConvention == global::VYaml.Annotations.NamingConvention.LowerCamelCase)\n                 {\n                     emitter.WriteScalar(AgeKeyUtf8Bytes);\n                 }\n                 else\n                 {\n                     global::VYaml.Serialization.NamingConventionMutator.MutateToThreadStaticBufferUtf8(AgeKeyUtf8Bytes, context.Options.NamingConvention, out var mutated, out var written);\n                     emitter.WriteScalar(mutated.AsSpan(0, written));\n                 }\n                 context.Serialize(ref emitter, value.Age);\n                 if (context.Options.NamingConvention == global::VYaml.Annotations.NamingConvention.LowerCamelCase)\n                 {\n                     emitter.WriteScalar(NameKeyUtf8Bytes);\n                 }\n                 else\n                 {\n                     global::VYaml.Serialization.NamingConventionMutator.MutateToThreadStaticBufferUtf8(NameKeyUtf8Bytes, context.Options.NamingConvention, out var mutated, out var written);\n                     emitter.WriteScalar(mutated.AsSpan(0, written));\n                 }\n                 context.Serialize(ref emitter, value.Name);\n                 emitter.EndMapping();\n             }\n             [VYaml.Annotations.Preserve]\n             public global::SerializerDemo.Person? Deserialize(ref YamlParser parser, YamlDeserializationContext context)\n             {\n                 if (parser.IsNullScalar())\n                 {\n                     parser.Read();\n                     return default;\n                 }\n                 parser.ReadWithVerify(ParseEventType.MappingStart);\n\n                 var __Age__ = default(int);\n                 var __Name__ = default(string);\n                 while (!parser.End && parser.CurrentEventType != ParseEventType.MappingEnd)\n                 {\n                     if (parser.CurrentEventType != ParseEventType.Scalar)\n                     {\n                         throw new YamlSerializerException(parser.CurrentMark, "Custom type deserialization supports only string key");\n                     }\n\n                     if (!parser.TryGetScalarAsSpan(out var key))\n                     {\n                         throw new YamlSerializerException(parser.CurrentMark, "Custom type deserialization supports only string key");\n                     }\n\n                     if (context.Options.NamingConvention != global::VYaml.Annotations.NamingConvention.LowerCamelCase)\n                     {\n                         global::VYaml.Serialization.NamingConventionMutator.MutateToThreadStaticBufferUtf8(key, global::VYaml.Annotations.NamingConvention.LowerCamelCase, out var mutated, out var written);\n                         key = mutated.AsSpan(0, written);\n                     }\n                     switch (key.Length)\n                     {\n                         case 3:\n                             if (key.SequenceEqual(AgeKeyUtf8Bytes))\n                             {\n                                 parser.Read(); // skip key\n                                 __Age__ = context.DeserializeWithAlias<int>(ref parser);\n                                 continue;\n                             }\n                             goto default;\n                         case 4:\n                             if (key.SequenceEqual(NameKeyUtf8Bytes))\n                             {\n                                 parser.Read(); // skip key\n                                 __Name__ = context.DeserializeWithAlias<string>(ref parser);\n                                 continue;\n                             }\n                             goto default;\n                         default:\n                             parser.Read(); // skip key\n                             parser.SkipCurrentNode(); // skip value\n                             continue;\n                     }\n                 }\n                 parser.ReadWithVerify(ParseEventType.MappingEnd);\n                 return new Person\n                 {\n                     Age = __Age__,\n                     Name = __Name__,\n                 }\n                 ;\n             }\n         }\n     }\n }\n #pragma warning restore CS0162 // Unreachable code\n #pragma warning restore CS0219 // Variable assigned but never used\n #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.\n #pragma warning restore CS8601 // Possible null reference assignment\n #pragma warning restore CS8602 // Possible null return\n #pragma warning restore CS8604 // Possible null reference argument for parameter\n #pragma warning restore CS8631 // The type cannot be used as type parameter in the generic type or method\n\n'})})})}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(59617).A+"",children:"Download Example project VYaml "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-vyaml",children:"Share VYaml"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FVYaml&quote=VYaml",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FVYaml&text=VYaml:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FVYaml",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FVYaml&title=VYaml",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FVYaml&title=VYaml&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FVYaml",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/VYaml",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/VYaml"})}),"\n",(0,s.jsx)(o.Ay,{})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},59617:(e,n,i)=>{i.d(n,{A:()=>l});const l=i.p+"assets/files/VYaml-607c8ca33cfd369c396492fd5cc51c89.zip"},72866:(e,n,i)=>{i.d(n,{Ay:()=>t,RM:()=>r});var l=i(74848),s=i(28453);const r=[{value:"Category &quot;Serializer&quot; has the following generators:",id:"category-serializer-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const n={a:"a",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h3,{id:"category-serializer-has-the-following-generators",children:'Category "Serializer" has the following generators:'}),"\n",(0,l.jsxs)(n.p,{children:["1 ",(0,l.jsx)(n.a,{href:"/docs/GenPack",children:"GenPack"})]}),"\n",(0,l.jsxs)(n.p,{children:["2 ",(0,l.jsx)(n.a,{href:"/docs/jsonConverterSourceGenerator",children:"jsonConverterSourceGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["3 ",(0,l.jsx)(n.a,{href:"/docs/JsonPolymorphicGenerator",children:"JsonPolymorphicGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["4 ",(0,l.jsx)(n.a,{href:"/docs/Nino",children:"Nino"})]}),"\n",(0,l.jsxs)(n.p,{children:["5 ",(0,l.jsx)(n.a,{href:"/docs/ProtobufSourceGenerator",children:"ProtobufSourceGenerator"})]}),"\n",(0,l.jsxs)(n.p,{children:["6 ",(0,l.jsx)(n.a,{href:"/docs/Schema",children:"Schema"})]}),"\n",(0,l.jsxs)(n.p,{children:["7 ",(0,l.jsx)(n.a,{href:"/docs/StackXML",children:"StackXML"})]}),"\n",(0,l.jsxs)(n.p,{children:["8 ",(0,l.jsx)(n.a,{href:"/docs/System.Text.Json",children:"System.Text.Json"})]}),"\n",(0,l.jsxs)(n.p,{children:["9 ",(0,l.jsx)(n.a,{href:"/docs/VYaml",children:"VYaml"})]}),"\n",(0,l.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/docs/Categories/Serializer",children:"Serializer"})})]})}function t(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);