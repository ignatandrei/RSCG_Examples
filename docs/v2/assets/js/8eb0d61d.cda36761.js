"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7116],{68345:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>m,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),o=a(73992),i=a(18679),c=a(68839);const s={sidebar_position:1110,title:"111 - cachesourcegenerator",description:"Caching methods results",slug:"/cachesourcegenerator"},m="cachesourcegenerator  by Jeppe Roi Kristensen",l={unversionedId:"RSCG-Examples/cachesourcegenerator",id:"RSCG-Examples/cachesourcegenerator",title:"111 - cachesourcegenerator",description:"Caching methods results",source:"@site/docs/RSCG-Examples/cachesourcegenerator.md",sourceDirName:"RSCG-Examples",slug:"/cachesourcegenerator",permalink:"/RSCG_Examples/v2/docs/cachesourcegenerator",draft:!1,tags:[],version:"current",sidebarPosition:1110,frontMatter:{sidebar_position:1110,title:"111 - cachesourcegenerator",description:"Caching methods results",slug:"/cachesourcegenerator"},sidebar:"tutorialSidebar",previous:{title:"110 - jab",permalink:"/RSCG_Examples/v2/docs/jab"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},h={},p=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share cachesourcegenerator",id:"share-cachesourcegenerator",level:3},{value:"In the same category (FunctionalProgramming)",id:"in-the-same-category-functionalprogramming",level:2},{value:"dunet",id:"dunet",level:3},{value:"Funcky.DiscriminatedUnion",id:"funckydiscriminatedunion",level:3},{value:"FunicularSwitch",id:"funicularswitch",level:3},{value:"N.SourceGenerators.UnionTypes",id:"nsourcegeneratorsuniontypes",level:3},{value:"OneOf",id:"oneof",level:3},{value:"PartiallyApplied",id:"partiallyapplied",level:3},{value:"RSCG_Utils_Memo",id:"rscg_utils_memo",level:3}],u={toc:p},d="wrapper";function g(e){let{components:t,...s}=e;return(0,r.kt)(d,(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cachesourcegenerator--by-jeppe-roi-kristensen"},"cachesourcegenerator  by Jeppe Roi Kristensen"),(0,r.kt)(c.Z,{toc:p,mdxType:"TOCInline"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/cachesourcegenerator/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/cachesourcegenerator?label=cachesourcegenerator",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jeppevammenkristensen/cachesourcegenerator"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/jeppevammenkristensen/cachesourcegenerator?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/jeppevammenkristensen/cachesourcegenerator?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"cachesourcegenerator")),(0,r.kt)("p",{parentName:"admonition"},"A tool to wrap a method call with caching"),(0,r.kt)("p",{parentName:"admonition"},"Author: Jeppe Roi Kristensen"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/cachesourcegenerator/"},"https://www.nuget.org/packages/cachesourcegenerator/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jeppevammenkristensen/cachesourcegenerator"},"https://github.com/jeppevammenkristensen/cachesourcegenerator")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jeppevammenkristensen/cachesourcegenerator"},"https://github.com/jeppevammenkristensen/cachesourcegenerator"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"cache-source-generator"},"Cache source generator"),(0,r.kt)("p",{parentName:"admonition"}," ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/CacheSourceGenerator"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/CacheSourceGenerator?style=flat-square&label=NuGet%3A%20CacheSourceGenerator",alt:"CacheSourceGenerator Nuget Version"})))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"Important")," ",(0,r.kt)("inlineCode",{parentName:"p"},"CachoAttribute")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"GenerateMemoryCacheAttribute")," "),(0,r.kt)("p",{parentName:"admonition"},"A source generator that can generate simple cache boilerplate to wrap around a method"),(0,r.kt)("h2",{parentName:"admonition",id:"getting-started"},"Getting started"),(0,r.kt)("p",{parentName:"admonition"},"This generator works by wrapping a method in another method with the same signature, that ensures calls are cached."),(0,r.kt)("p",{parentName:"admonition"},"In a partial class decorate the method with the ",(0,r.kt)("inlineCode",{parentName:"p"},"GenerateMemoryCache")," attribute"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial class SampleEntity\n{\n    private readonly IMemoryCache _memoryCache;\n\n    public SampleEntity(IMemoryCache memoryCache)\n    {\n        _memoryCache = memoryCache;\n    }\n\n    [GenerateMemoryCache(MethodName = "GetId", CacheEnricherProcessor = nameof(ProcessCacheEntry))]\n    private string? DoGetSomeValue(int id)\n    {\n        return "Someresult";\n    }\n\n    \n    public void ProcessCacheEntry(ICacheEntry entry)\n    {\n        entry.SlidingExpiration = TimeSpan.FromMinutes(2);\n    }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"And it will generate"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial class SampleEntity\n{\n    public string? GetId(int id)\n    {\n        var _key_ = new\n        {\n            _MethodName = "DoGetSomeValue",\n            _ClassName = "SampleEntity",\n            id\n        };\n        IMemoryCache _cache_ = _memoryCache;\n        return _cache_.GetOrCreate(_key_, _entry_ =>\n        {\n            ProcessCacheEntry(_entry_);\n            return DoGetSomeValue(id);\n        });\n    }\n    \n    public void GetId_Evict(int id)\n    {\n        var _key_ = new\n        {\n            _MethodName = "DoGetSomeValue",\n            _ClassName = "SampleEntity",\n            id\n        };\n        IMemoryCache _cache_ = _memoryCache;\n        _cache_.Remove(_key_);\n    }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"Note that that defining the CacheEnricherProcessor is optional and can be left out"),(0,r.kt)("h2",{parentName:"admonition",id:"cache-access"},"Cache access"),(0,r.kt)("p",{parentName:"admonition"},"The IMemoryCache can be retrieved in two ways. Autogenerated or by providing it in the class"),(0,r.kt)("h3",{parentName:"admonition",id:"autogenerated-cache-access-code"},"Autogenerated cache access code"),(0,r.kt)("p",{parentName:"admonition"},"This requires that you install the nuget package Microsoft.Extensions.Caching.Memory."),(0,r.kt)("p",{parentName:"admonition"},"Decorate a method that returns a value on a partial class with the GenerateMemoryCache Attribute"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial class SomeClass\n{\n\n  [CacheSourceGenerator.Cache(MethodName = "SomeMethod")]\n  private string DoSomeMethod(string id, int age)\n  {\n      return $"{id}{age}";\n  }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the code below."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public partial class SomeClass\n{\n    private static class CacheInit\n    {\n        static CacheInit()\n        {\n            _memoryCache = new Lazy<IMemoryCache>(() => new MemoryCache(new MemoryCacheOptions()));\n        }\n\n        private static Lazy<IMemoryCache> _memoryCache;\n        public static IMemoryCache MemoryCache => _memoryCache.Value;\n    }\n\n    public string SomeMethod(string id, int age)\n    {\n        var key = new\n        {\n            _MethodName = "DoSomeMethod",\n            _ClassName = "SomeClass",\n            id,\n            age\n        };\n        IMemoryCache cache = CacheInit.MemoryCache;\n        return cache.GetOrCreate(key, entry =>\n        {\n            return DoSomeMethod(id, age);\n        });\n    }\n}\n')),(0,r.kt)("h3",{parentName:"admonition",id:"providing-the-cache-from-the-class"},"Providing the cache from the class"),(0,r.kt)("p",{parentName:"admonition"},"An alternative is to provide a IMemoryCache instance from the class. This can be done through a"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Field"),(0,r.kt)("li",{parentName:"ul"},"Property"),(0,r.kt)("li",{parentName:"ul"},"Method (parameter less)")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public static partial class SomeOtherClass\n{\n    private static IMemoryCache GetCache() => new MemoryCache(new MemoryCacheOptions());\n\n    [CacheSourceGenerator.GenerateMemoryCache(MethodName = "SomeMethod")]\n    public static Task<string> ExecuteCall()\n    {\n        return Task.FromResult("Hello");\n    }\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the code below."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public static partial class SomeOtherClass\n{\n    public async static Task<string> SomeMethod()\n    {\n        var key = new\n        {\n            _MethodName = "ExecuteCall",\n            _ClassName = "SomeOtherClass",\n        };\n        IMemoryCache cache = GetCache();\n        var result = await cache.GetOrCreateAsync(key, async entry =>\n        {\n            return await ExecuteCall();\n        });\n        return result ?? throw new InvalidOperationException("Expected non empty result");\n    }\n}\n')),(0,r.kt)("h2",{parentName:"admonition",id:"method-generation"},"Method generation"),(0,r.kt)("p",{parentName:"admonition"},"if the method is async or returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"Task<T>")," the generated method will take that into consideration."),(0,r.kt)("p",{parentName:"admonition"},"If the return type is not nullable, the generated method will throw an exception if the result of the method call is null."),(0,r.kt)("h2",{parentName:"admonition",id:"generatememorycache-atrribute"},"GenerateMemoryCache Atrribute"),(0,r.kt)("h3",{parentName:"admonition",id:"methodname"},"MethodName"),(0,r.kt)("p",{parentName:"admonition"},"The GenerateMemoryCache needs to as a minimum have MethodName set as this is the desired method name of the generated method."),(0,r.kt)("h3",{parentName:"admonition",id:"cacheenricherprocessor"},"CacheEnricherProcessor"),(0,r.kt)("p",{parentName:"admonition"},"If you want to control the ",(0,r.kt)("inlineCode",{parentName:"p"},"ICacheEntry")," object, you can use this property to point to a method that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"ICacheEntry")," as input and\nreturns void or if async as Task. This method will be called like below and can be used set for instance expiration"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var _result_ = _cache_.GetOrCreate(_key_, _entry_ =>\n{\n    CacheEnricher(_entry_);\n    return DoGetName(id);\n});\n")),(0,r.kt)("h3",{parentName:"admonition",id:"keygenerator"},"KeyGenerator"),(0,r.kt)("p",{parentName:"admonition"},"Out of the box a key will be auto generated that will consist of "),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"MethodName"),(0,r.kt)("li",{parentName:"ul"},"ClassName"),(0,r.kt)("li",{parentName:"ul"},"The parameters of the method")),(0,r.kt)("p",{parentName:"admonition"},"If you want to create a custom key, you can use the KeyGenerator property to point to a method that will generate the key. The method must match the parameters of the decorated method by type (it's okay if there is a mismatch between names)"),(0,r.kt)("p",{parentName:"admonition"},"The return type can be anything but void"),(0,r.kt)("p",{parentName:"admonition"},"So for "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[GenerateMemoryCache(KeyGenerator=nameof(GenerateKey), MethodName="SomeName")]\npublic string Somemethod(string id, int number, bool boolValue)\n')),(0,r.kt)("p",{parentName:"admonition"},"a valid KeyGenerator method could be"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public (string id, int number, bool boolean) \n"))),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Caching methods results")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"cachesourcegenerator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="CacheSourceGenerator" Version="0.4.1" />\n    <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" Version="8.0.0" />\n  </ItemGroup>\n    <ItemGroup>\n        <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="7.0.0" />\n    </ItemGroup>\n <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\cachesourcegenerator\\src\\CacheDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"cachesourcegenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using CacheDemo;\nusing Microsoft.Extensions.Caching.Memory;\nvar f=new FibTest(new MemoryCache(new MemoryCacheOptions()));\nConsole.WriteLine(f.FibMemo(5));\nConsole.WriteLine("and now with cache hit:");\nConsole.WriteLine(f.FibMemo(5));\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\cachesourcegenerator\\src\\CacheDemo\\Fib.cs",label:"Fib.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"cachesourcegenerator")," in ",(0,r.kt)("em",{parentName:"p"},"Fib.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Microsoft.Extensions.Caching.Memory;\nusing CacheSourceGenerator;\nnamespace CacheDemo;\ninternal partial class FibTest\n{\n    private readonly IMemoryCache _memoryCache;\n\n    public FibTest(IMemoryCache memoryCache)\n    {\n        _memoryCache = memoryCache;\n    }\n    void ProcessCacheEntry(ICacheEntry entry)\n    {\n        entry.SlidingExpiration = TimeSpan.FromMinutes(2);\n    }\n\n    [GenerateMemoryCache(MethodName = "FibMemo", CacheEnricherProcessor = nameof(ProcessCacheEntry))]\n    public int Fib(int n)\n    {\n        if (n <= 1)\n        {\n            return n;\n        }\n        Console.WriteLine($"Calculating Fib({n})");\n        //return Fib(n - 1) + Fib(n - 2);\n        return FibMemo(n - 1) + FibMemo(n - 2);\n    }\n}\n')))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\cachesourcegenerator\\src\\CacheDemo\\obj\\GX\\CacheSourceGenerator\\CacheSourceGenerator.CachoIncrementalSourceGenerator\\FibTest.g.cs",label:"FibTest.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'#nullable enable\n//autogenerated\nusing Microsoft.Extensions.Caching.Memory;\nusing CacheSourceGenerator;\nusing System;\n\nnamespace CacheDemo;\ninternal partial class FibTest\n{\n    public int FibMemo(int n)\n    {\n        var _key_ = new\n        {\n            _MethodName = "Fib",\n            _ClassName = "FibTest",\n            n\n        };\n        IMemoryCache _cache_ = _memoryCache;\n        var _result_ = _cache_.GetOrCreate(_key_, _entry_ =>\n        {\n            ProcessCacheEntry(_entry_);\n            OnCallingFib(n);\n            var _callResult_ = Fib(n);\n            OnCalledFib(n, _callResult_);\n            ;\n            return _callResult_;\n        });\n        return _result_;\n    }\n\n    public void FibMemo_Evict(int n)\n    {\n        var _key_ = new\n        {\n            _MethodName = "Fib",\n            _ClassName = "FibTest",\n            n\n        };\n        IMemoryCache _cache_ = _memoryCache;\n        _cache_.Remove(_key_);\n    }\n\n    partial void OnCallingFib(int n);\n    partial void OnCalledFib(int n, int _returned_);\n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\cachesourcegenerator\\src\\CacheDemo\\obj\\GX\\CacheSourceGenerator\\CacheSourceGenerator.CachoIncrementalSourceGenerator\\GenerateMemoryCache.g.cs",label:"GenerateMemoryCache.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n#nullable enable\nnamespace CacheSourceGenerator\n{\n    [System.AttributeUsage(System.AttributeTargets.Method)]\n    public class GenerateMemoryCacheAttribute : System.Attribute\n    {\n       /// <summary>\n       /// The name of the generated cache method \n       /// </summary>\n       public string MethodName { get;init; } = default!;\n       \n       /// <summary>\n       /// The name of a method in the current class that takes\n       /// an CacheEntry and processes it \n       /// </summary>\n       public string? CacheEnricherProcessor { get;set; }\n       \n       \n       /// <summary>\n        /// The name of a method in the current class that can \n        /// generate a custom cache key. The method must take the same parameters\n        /// as the method being decorated. But can return any type.\n        /// </summary>\n       public string? KeyGenerator {get;set;}\n       \n       /// <summary>\n       /// Set this to true to not generate an evict method\n       /// </summary>\n       public bool SuppressEvictMethod {get;set;}\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\cachesourcegenerator\\src\\CacheDemo\\obj\\GX\\CacheSourceGenerator\\CacheSourceGenerator.CachoIncrementalSourceGenerator\\IgnoreKey.g.cs",label:"IgnoreKey.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"// <auto-generated/>\n#nullable enable\nnamespace CacheSourceGenerator\n{\n    [System.AttributeUsage(System.AttributeTargets.Parameter)]\n    public class IgnoreKeyAttribute : System.Attribute\n    {\n        \n    }\n}\n")))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:a(75912).Z},"Download Example project cachesourcegenerator "))),(0,r.kt)("h3",{id:"share-cachesourcegenerator"},"Share cachesourcegenerator"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fcachesourcegenerator&quote=cachesourcegenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fcachesourcegenerator&text=cachesourcegenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fcachesourcegenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fcachesourcegenerator&title=cachesourcegenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fcachesourcegenerator&title=cachesourcegenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fcachesourcegenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/cachesourcegenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/cachesourcegenerator")),(0,r.kt)("h2",{id:"in-the-same-category-functionalprogramming"},"In the same category (FunctionalProgramming)"),(0,r.kt)("h3",{id:"dunet"},(0,r.kt)("a",{parentName:"h3",href:"/docs/dunet"},"dunet")),(0,r.kt)("h3",{id:"funckydiscriminatedunion"},(0,r.kt)("a",{parentName:"h3",href:"/docs/Funcky.DiscriminatedUnion"},"Funcky.DiscriminatedUnion")),(0,r.kt)("h3",{id:"funicularswitch"},(0,r.kt)("a",{parentName:"h3",href:"/docs/FunicularSwitch"},"FunicularSwitch")),(0,r.kt)("h3",{id:"nsourcegeneratorsuniontypes"},(0,r.kt)("a",{parentName:"h3",href:"/docs/N.SourceGenerators.UnionTypes"},"N.SourceGenerators.UnionTypes")),(0,r.kt)("h3",{id:"oneof"},(0,r.kt)("a",{parentName:"h3",href:"/docs/OneOf"},"OneOf")),(0,r.kt)("h3",{id:"partiallyapplied"},(0,r.kt)("a",{parentName:"h3",href:"/docs/PartiallyApplied"},"PartiallyApplied")),(0,r.kt)("h3",{id:"rscg_utils_memo"},(0,r.kt)("a",{parentName:"h3",href:"/docs/RSCG_Utils_Memo"},"RSCG_Utils_Memo")))}g.isMDXComponent=!0},75912:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/cachesourcegenerator-8beeccfca14c20186d80a43d35992315.zip"}}]);