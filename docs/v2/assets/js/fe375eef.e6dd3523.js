"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[304],{65926:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>m,toc:()=>c});var r=a(87462),n=(a(67294),a(3905)),o=a(73992),p=a(18679),s=a(68839);const i={sidebar_position:1740,title:"174 - Dapper.AOT",description:"Generating AOT code for Dapper -hydrating classes from SQL queries.",slug:"/Dapper.AOT"},l="Dapper.AOT  by Marc Gravell",m={unversionedId:"RSCG-Examples/Dapper.AOT",id:"RSCG-Examples/Dapper.AOT",title:"174 - Dapper.AOT",description:"Generating AOT code for Dapper -hydrating classes from SQL queries.",source:"@site/docs/RSCG-Examples/Dapper.AOT.md",sourceDirName:"RSCG-Examples",slug:"/Dapper.AOT",permalink:"/RSCG_Examples/v2/docs/Dapper.AOT",draft:!1,tags:[],version:"current",sidebarPosition:1740,frontMatter:{sidebar_position:1740,title:"174 - Dapper.AOT",description:"Generating AOT code for Dapper -hydrating classes from SQL queries.",slug:"/Dapper.AOT"},sidebar:"tutorialSidebar",previous:{title:"173 - Microsoft.Windows.CsWin32",permalink:"/RSCG_Examples/v2/docs/Microsoft.Windows.CsWin32"},next:{title:"175 - Dolly",permalink:"/RSCG_Examples/v2/docs/Dolly"}},d={},c=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Dapper.AOT",id:"share-dapperaot",level:3},{value:"In the same category (Database) - 4 other generators",id:"in-the-same-category-database---4-other-generators",level:3},{value:"Breezy",id:"breezy",level:4},{value:"EntityLengths.Generator",id:"entitylengthsgenerator",level:4},{value:"Gedaq",id:"gedaq",level:4},{value:"TableStorage",id:"tablestorage",level:4}],u={toc:c},g="wrapper";function b(e){let{components:t,...i}=e;return(0,n.kt)(g,(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dapperaot--by-marc-gravell"},"Dapper.AOT  by Marc Gravell"),(0,n.kt)(s.Z,{toc:c,mdxType:"TOCInline"}),(0,n.kt)("h2",{id:"nuget--site-data"},"NuGet / site data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Dapper.AOT/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Dapper.AOT?label=Dapper.AOT",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/DapperLib/DapperAOT"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/DapperLib/DapperAOT?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/DapperLib/DapperAOT?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"Dapper.AOT")),(0,n.kt)("p",{parentName:"admonition"},"Build time (AOT) tools for Dapper"),(0,n.kt)("p",{parentName:"admonition"},"Author: Marc Gravell"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Dapper.AOT/"},"https://www.nuget.org/packages/Dapper.AOT/")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://aot.dapperlib.dev/"},"https://aot.dapperlib.dev/")),(0,n.kt)("p",{parentName:"admonition"},"Source: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/DapperLib/DapperAOT"},"https://github.com/DapperLib/DapperAOT"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Let's face it: ADO.NET is a complicated API, and writing \"good\" ADO.NET code by hand is time consuming and error-prone. But a lot of times you also don't want\nthe ceremony of an ORM like EF or LLBLGenPro - you just want to execute SQL!"),(0,n.kt)("p",{parentName:"admonition"},"For years now, Dapper helped by providing a great low-friction way of talking to arbitrary ADO.NET databases, handling command preparation, invocation, and result parsing."),(0,n.kt)("p",{parentName:"admonition"},"Dapper.AOT radically changes how Dapper works, generating the necessary code ",(0,n.kt)("em",{parentName:"p"},"during build"),", and offers a range of usage guidance to improve how you use Dapper."),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://aot.dapperlib.dev/gettingstarted"},"Getting Started")," | ",(0,n.kt)("a",{parentName:"p",href:"https://aot.dapperlib.dev/"},"Documentation"))),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Generating AOT code for Dapper -hydrating classes from SQL queries.")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example-source-csproj-source-files"},"Example (source csproj, source files)"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"Dapper.AOT")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {12}",showLineNumbers:!0,"{12}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Dapper" Version="2.1.35" />\n    <PackageReference Include="Dapper.AOT" Version="1.0.31" />\n    <PackageReference Include="Microsoft.Data.SqlClient" Version="5.2.2" />\n  </ItemGroup>\n    <PropertyGroup>\n        <InterceptorsPreviewNamespaces>$(InterceptorsPreviewNamespaces);Dapper.AOT</InterceptorsPreviewNamespaces>\n    </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,n.kt)(p.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dapper.AOT\\src\\DapperDemo\\DapperDemo.csproj",label:"DapperDemo.csproj",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Dapper.AOT")," in ",(0,n.kt)("em",{parentName:"p"},"DapperDemo.csproj")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Dapper" Version="2.1.35" />\n    <PackageReference Include="Dapper.AOT" Version="1.0.31" />\n    <PackageReference Include="Microsoft.Data.SqlClient" Version="5.2.2" />\n  </ItemGroup>\n    <PropertyGroup>\n        <InterceptorsPreviewNamespaces>$(InterceptorsPreviewNamespaces);Dapper.AOT</InterceptorsPreviewNamespaces>\n    </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,n.kt)(p.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dapper.AOT\\src\\DapperDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Dapper.AOT")," in ",(0,n.kt)("em",{parentName:"p"},"Program.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\n\nConsole.WriteLine("Hello, World!");\nvar p= Product.GetProduct(new SqlConnection("Server=localhost;Database=AdventureWorks2019;Trusted_Connection=True;"), 1);\n'))),(0,n.kt)(p.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dapper.AOT\\src\\DapperDemo\\Product.cs",label:"Product.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Dapper.AOT")," in ",(0,n.kt)("em",{parentName:"p"},"Product.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nnamespace DapperDemo;\ninternal partial class Product\n{\n    public int ID { get; set; }\n    public string Name { get; set; } = "";\n    public string ProductId { get; set; } = ""; \n    public static Product GetProduct(SqlConnection connection, int productId) => connection.QueryFirst<Product>(\n    "select ID, Name, ProductId from Production.Product where ProductId=@productId", new { productId });\n}\n\n'))),(0,n.kt)(p.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dapper.AOT\\src\\DapperDemo\\globals.cs",label:"globals.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Dapper.AOT")," in ",(0,n.kt)("em",{parentName:"p"},"globals.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"global using Dapper;\nglobal using Microsoft.Data.SqlClient;\nglobal using DapperDemo;\n\n\n[module: DapperAot]\n")))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Dapper.AOT\\src\\DapperDemo\\obj\\GX\\Dapper.AOT.Analyzers\\Dapper.CodeAnalysis.DapperInterceptorGenerator\\DapperDemo.generated.cs",label:"DapperDemo.generated.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'#nullable enable\nnamespace Dapper.AOT // interceptors must be in a known namespace\n{\n    file static class DapperGeneratedInterceptors\n    {\n        [global::System.Runtime.CompilerServices.InterceptsLocationAttribute("D:\\\\eu\\\\GitHub\\\\RSCG_Examples\\\\v2\\\\rscg_examples\\\\Dapper.AOT\\\\src\\\\DapperDemo\\\\Product.cs", 8, 93)]\n        internal static global::DapperDemo.Product QueryFirst0(this global::System.Data.IDbConnection cnn, string sql, object? param, global::System.Data.IDbTransaction? transaction, int? commandTimeout, global::System.Data.CommandType? commandType)\n        {\n            // Query, TypedResult, HasParameters, SingleRow, Text, AtLeastOne, BindResultsByName, KnownParameters\n            // takes parameter: <anonymous type: int productId>\n            // parameter map: productId\n            // returns data: global::DapperDemo.Product\n            global::System.Diagnostics.Debug.Assert(!string.IsNullOrWhiteSpace(sql));\n            global::System.Diagnostics.Debug.Assert((commandType ?? global::Dapper.DapperAotExtensions.GetCommandType(sql)) == global::System.Data.CommandType.Text);\n            global::System.Diagnostics.Debug.Assert(param is not null);\n\n            return global::Dapper.DapperAotExtensions.Command(cnn, transaction, sql, global::System.Data.CommandType.Text, commandTimeout.GetValueOrDefault(), CommandFactory0.Instance).QueryFirst(param, RowFactory0.Instance);\n\n        }\n\n\n        private static global::Dapper.CommandFactory<object?> DefaultCommandFactory => global::Dapper.CommandFactory.Simple;\n\n        private sealed class RowFactory0 : global::Dapper.RowFactory<global::DapperDemo.Product>\n        {\n            internal static readonly RowFactory0 Instance = new();\n            private RowFactory0() {}\n            public override object? Tokenize(global::System.Data.Common.DbDataReader reader, global::System.Span<int> tokens, int columnOffset)\n            {\n                for (int i = 0; i < tokens.Length; i++)\n                {\n                    int token = -1;\n                    var name = reader.GetName(columnOffset);\n                    var type = reader.GetFieldType(columnOffset);\n                    switch (NormalizedHash(name))\n                    {\n                        case 926444256U when NormalizedEquals(name, "id"):\n                            token = type == typeof(int) ? 0 : 3; // two tokens for right-typed and type-flexible\n                            break;\n                        case 2369371622U when NormalizedEquals(name, "name"):\n                            token = type == typeof(string) ? 1 : 4;\n                            break;\n                        case 2521315361U when NormalizedEquals(name, "productid"):\n                            token = type == typeof(string) ? 2 : 5;\n                            break;\n\n                    }\n                    tokens[i] = token;\n                    columnOffset++;\n\n                }\n                return null;\n            }\n            public override global::DapperDemo.Product Read(global::System.Data.Common.DbDataReader reader, global::System.ReadOnlySpan<int> tokens, int columnOffset, object? state)\n            {\n                global::DapperDemo.Product result = new();\n                foreach (var token in tokens)\n                {\n                    switch (token)\n                    {\n                        case 0:\n                            result.ID = reader.GetInt32(columnOffset);\n                            break;\n                        case 3:\n                            result.ID = GetValue<int>(reader, columnOffset);\n                            break;\n                        case 1:\n                            result.Name = reader.GetString(columnOffset);\n                            break;\n                        case 4:\n                            result.Name = GetValue<string>(reader, columnOffset);\n                            break;\n                        case 2:\n                            result.ProductId = reader.GetString(columnOffset);\n                            break;\n                        case 5:\n                            result.ProductId = GetValue<string>(reader, columnOffset);\n                            break;\n\n                    }\n                    columnOffset++;\n\n                }\n                return result;\n\n            }\n\n        }\n\n        private sealed class CommandFactory0 : global::Dapper.CommandFactory<object?> // <anonymous type: int productId>\n        {\n            internal static readonly CommandFactory0 Instance = new();\n            public override void AddParameters(in global::Dapper.UnifiedCommand cmd, object? args)\n            {\n                var typed = Cast(args, static () => new { productId = default(int) }); // expected shape\n                var ps = cmd.Parameters;\n                global::System.Data.Common.DbParameter p;\n                p = cmd.CreateParameter();\n                p.ParameterName = "productId";\n                p.DbType = global::System.Data.DbType.Int32;\n                p.Direction = global::System.Data.ParameterDirection.Input;\n                p.Value = AsValue(typed.productId);\n                ps.Add(p);\n\n            }\n            public override void UpdateParameters(in global::Dapper.UnifiedCommand cmd, object? args)\n            {\n                var typed = Cast(args, static () => new { productId = default(int) }); // expected shape\n                var ps = cmd.Parameters;\n                ps[0].Value = AsValue(typed.productId);\n\n            }\n            public override bool CanPrepare => true;\n\n        }\n\n\n    }\n}\nnamespace System.Runtime.CompilerServices\n{\n    // this type is needed by the compiler to implement interceptors - it doesn\'t need to\n    // come from the runtime itself, though\n\n    [global::System.Diagnostics.Conditional("DEBUG")] // not needed post-build, so: evaporate\n    [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]\n    sealed file class InterceptsLocationAttribute : global::System.Attribute\n    {\n        public InterceptsLocationAttribute(string path, int lineNumber, int columnNumber)\n        {\n            _ = path;\n            _ = lineNumber;\n            _ = columnNumber;\n        }\n    }\n}\n')))),(0,n.kt)("h2",{id:"useful"},"Useful"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:a(72149).Z},"Download Example project Dapper.AOT "))),(0,n.kt)("h3",{id:"share-dapperaot"},"Share Dapper.AOT"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDapper.AOT&quote=Dapper.AOT",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDapper.AOT&text=Dapper.AOT:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDapper.AOT",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDapper.AOT&title=Dapper.AOT",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDapper.AOT&title=Dapper.AOT&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDapper.AOT",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dapper.AOT"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Dapper.AOT")),(0,n.kt)("h3",{id:"in-the-same-category-database---4-other-generators"},"In the same category (Database) - 4 other generators"),(0,n.kt)("h4",{id:"breezy"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Breezy"},"Breezy")),(0,n.kt)("h4",{id:"entitylengthsgenerator"},(0,n.kt)("a",{parentName:"h4",href:"/docs/EntityLengths.Generator"},"EntityLengths.Generator")),(0,n.kt)("h4",{id:"gedaq"},(0,n.kt)("a",{parentName:"h4",href:"/docs/Gedaq"},"Gedaq")),(0,n.kt)("h4",{id:"tablestorage"},(0,n.kt)("a",{parentName:"h4",href:"/docs/TableStorage"},"TableStorage")))}b.isMDXComponent=!0},72149:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/files/Dapper.AOT-b5c7910d73ed96132557dacdaac07b23.zip"}}]);