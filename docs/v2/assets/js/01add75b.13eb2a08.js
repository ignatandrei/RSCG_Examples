"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[9791],{36254:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>g,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"RSCG-Examples/TypedSignalR.Client","title":"163 - TypedSignalR.Client","description":"Creating typed Signal R clients","source":"@site/docs/RSCG-Examples/TypedSignalR.Client.md","sourceDirName":"RSCG-Examples","slug":"/TypedSignalR.Client","permalink":"/RSCG_Examples/v2/docs/TypedSignalR.Client","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/TypedSignalR.Client.md","tags":[],"version":"current","sidebarPosition":1630,"frontMatter":{"sidebar_position":1630,"title":"163 - TypedSignalR.Client","description":"Creating typed Signal R clients","slug":"/TypedSignalR.Client"},"sidebar":"tutorialSidebar","previous":{"title":"162 - MinimalHelpers.Routing.Analyzers","permalink":"/RSCG_Examples/v2/docs/MinimalHelpers.Routing.Analyzers"},"next":{"title":"164 - RazorSlices","permalink":"/RSCG_Examples/v2/docs/RazorSlices"}}');var r=a(74848),t=a(28453),l=a(11470),T=a(19365),i=a(14252);const o={sidebar_position:1630,title:"163 - TypedSignalR.Client",description:"Creating typed Signal R clients",slug:"/TypedSignalR.Client"},g="TypedSignalR.Client  by nenoNaninu",c={},d=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Install",id:"install",level:2},{value:"Why TypedSignalR.Client?",id:"why-typedsignalrclient",level:2},{value:"API",id:"api",level:2},{value:"Usage",id:"usage",level:2},{value:"Client",id:"client",level:3},{value:"Cancellation",id:"cancellation",level:4},{value:"Server",id:"server",level:3},{value:"Recommendation",id:"recommendation",level:2},{value:"Sharing a Project",id:"sharing-a-project",level:3},{value:"Client Code Format",id:"client-code-format",level:3},{value:"Streaming Support",id:"streaming-support",level:2},{value:"Client Results Support",id:"client-results-support",level:2},{value:"Compile-Time Error Support",id:"compile-time-error-support",level:2},{value:"Generated Source Code",id:"generated-source-code",level:2},{value:"Related Work",id:"related-work",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share TypedSignalR.Client",id:"share-typedsignalrclient",level:3},{value:"In the same category (SignalR) - 0 other generators",id:"in-the-same-category-signalr---0-other-generators",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"typedsignalrclient--by-nenonaninu",children:"TypedSignalR.Client  by nenoNaninu"})}),"\n",(0,r.jsx)(i.A,{toc:d}),"\n",(0,r.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/TypedSignalR.Client/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/TypedSignalR.Client?label=TypedSignalR.Client",alt:"Nuget"})}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/TypedSignalR.Client",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/nenoNaninu/TypedSignalR.Client?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(n.img,{src:"https://img.shields.io/github/stars/nenoNaninu/TypedSignalR.Client?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["Name: ",(0,r.jsx)(n.strong,{children:"TypedSignalR.Client"})]}),(0,r.jsx)(n.p,{children:"C# Source Generator to create strongly typed SignalR Client."}),(0,r.jsx)(n.p,{children:"Author: nenoNaninu"}),(0,r.jsxs)(n.p,{children:["NuGet:\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/TypedSignalR.Client/",children:"https://www.nuget.org/packages/TypedSignalR.Client/"})})]}),(0,r.jsxs)(n.p,{children:["You can find more details at ",(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/TypedSignalR.Client",children:"https://github.com/nenoNaninu/TypedSignalR.Client"})]}),(0,r.jsxs)(n.p,{children:["Source: ",(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/TypedSignalR.Client",children:"https://github.com/nenoNaninu/TypedSignalR.Client"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.h1,{id:"typedsignalrclient",children:"TypedSignalR.Client"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/TypedSignalR.Client",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/nuget/v/TypedSignalR.Client.svg",alt:"NuGet"})}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/TypedSignalR.Client/actions/workflows/build-and-test.yaml",children:(0,r.jsx)(n.img,{src:"https://github.com/nenoNaninu/TypedSignalR.Client/actions/workflows/build-and-test.yaml/badge.svg?branch=master",alt:"build-and-test"})})]}),(0,r.jsxs)(n.p,{children:["C# ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview",children:"Source Generator"})," to create strongly typed SignalR clients."]}),(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#install",children:"Install"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#why-typedsignalrclient",children:"Why TypedSignalR.Client?"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#api",children:"API"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#usage",children:"Usage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#client",children:"Client"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#cancellation",children:"Cancellation"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#server",children:"Server"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#recommendation",children:"Recommendation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#sharing-a-project",children:"Sharing a Project"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#client-code-format",children:"Client Code Format"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#streaming-support",children:"Streaming Support"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#client-results-support",children:"Client Results Support"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#compile-time-error-support",children:"Compile-Time Error Support"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#generated-source-code",children:"Generated Source Code"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#related-work",children:"Related Work"})}),"\n"]}),(0,r.jsx)(n.h2,{id:"install",children:"Install"}),(0,r.jsxs)(n.p,{children:["NuGet: ",(0,r.jsx)(n.a,{href:"https://www.nuget.org/packages/TypedSignalR.Client/",children:"TypedSignalR.Client"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"dotnet add package Microsoft.AspNetCore.SignalR.Client\ndotnet add package TypedSignalR.Client\n"})}),(0,r.jsx)(n.h2,{id:"why-typedsignalrclient",children:"Why TypedSignalR.Client?"}),(0,r.jsx)(n.p,{children:"The ASP.NET Core SignalR C# client is not strongly typed.\nTo call a Hub (server-side) method, we must specify the method defined in Hub using a string.\nWe also have to determine the return type manually.\nMoreover, registering client methods called from a server also requires specifying the method name as a string, and we must set parameter types manually."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'// C# SignalR Client\n// without TypedSignalR.Client\n\n// Specify a hub method to invoke using string.\nawait connection.InvokeAsync("HubMethod1");\n\n// Manually determine a return type.\n// Parameters are cast to object type.\nvar guid = await connection.InvokeAsync<Guid>("HubMethod2", "message", 99);\n\n// Registering a client method requires a string, and parameter types must be set manually.\nvar subscription = connection.On<string, DateTime>("ClientMethod", (message, dateTime) => {});\n'})}),(0,r.jsx)(n.p,{children:"These are very painful and cause bugs easily.\nMoreover, if we change the code on the server-side, the modification on the client-side becomes very troublesome.\nThe leading cause of the problems is that they are not strongly typed."}),(0,r.jsxs)(n.p,{children:["TypedSignalR.Client aims to generate strongly typed SignalR clients using interfaces in which the server and client methods are defined.\nDefining interfaces is helpful not only for the client-side but also for the server-side.\nSee ",(0,r.jsx)(n.a,{href:"#usage",children:"Usage"})," section for details."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'// C# SignalR Client\n// with TypedSignalR.Client\n\n// First, create a hub proxy.\nIHub hubProxy = connection.CreateHubProxy<IHub>();\n\n// Invoke a hub method through hub proxy.\n// We no longer need to specify the method using a string.\nawait hubProxy.HubMethod1();\n\n// Both parameters and return types are strongly typed.\nvar guid = await hubProxy.HubMethod2("message", 99);\n\n// Client method registration is also strongly typed, so it\'s safe and easy.\nvar subscription = connection.Register<IReceiver>(new Receiver());\n\n// Defining interfaces are useful not only for the client-side but also for the server-side.\n// See Usage in this README.md for details.\ninterface IHub\n{\n    Task HubMethod1();\n    Task<Guid> HubMethod2(string message, int value);\n}\n\ninterface IReceiver\n{\n    Task ClientMethod(string message, DateTime dateTime);\n}\n\nclass Receiver : IReceiver\n{\n    // implementation\n}\n'})}),(0,r.jsx)(n.h2,{id:"api",children:"API"}),(0,r.jsx)(n.p,{children:"This Source Generator provides two extension methods and one interface."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"static class HubConnectionExtensions\n{\n    THub CreateHubProxy<THub>(this HubConnection connection, CancellationToken cancellationToken = default){...}\n    IDisposable Register<TReceiver>(this HubConnection connection, TReceiver receiver){...}\n}\n\n// An interface for observing SignalR events.\ninterface IHubConnectionObserver\n{\n    Task OnClosed(Exception? exception);\n    Task OnReconnected(string? connectionId);\n    Task OnReconnecting(Exception? exception);\n}\n"})}),(0,r.jsx)(n.p,{children:"Use it as follows."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"HubConnection connection = ...;\n\nIHub hub = connection.CreateHubProxy<IHub>();\nIDisposable subscription = connection.Register<IReceiver>(new Receiver());\n"})}),(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,r.jsx)(n.p,{children:"For example, we have the following interface defined."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"public class UserDefinedType\n{\n    public Guid Id { get; set; }\n    public DateTime Datetime { get; set; }\n}\n\n// The return type of methods on the client-side must be Task. \npublic interface IClientContract\n{\n    // Of course, user defined type is OK. \n    Task ClientMethod1(string user, string message, UserDefinedType userDefine);\n    Task ClientMethod2();\n}\n\n// The return type of methods on the hub-side must be Task or Task<T>. \npublic interface IHubContract\n{\n    Task<string> HubMethod1(string user, string message);\n    Task HubMethod2();\n}\n\nclass Receiver1 : IClientContract\n{\n    // implementation\n}\n\nclass Receiver2 : IClientContract, IHubConnectionObserver\n{\n    // implementation\n}\n"})}),(0,r.jsx)(n.h3,{id:"client",children:"Client"}),(0,r.jsx)(n.p,{children:"It's very easy to use."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'HubConnection connection = ...;\n\nvar hub = connection.CreateHubProxy<IHubContract>();\nvar subscription1 = connection.Register<IClientContract>(new Receiver1());\n\n// When an instance of a class that implements IHubConnectionObserver is registered (Receiver2 in this case), \n// the method defined in IHubConnectionObserver is automatically registered regardless of the type argument. \nvar subscription2 = connection.Register<IClientContract>(new Receiver2());\n\n// Invoke hub methods\nhub.HubMethod1("user", "message");\n\n// Unregister the receiver\nsubscription.Dispose();\n'})}),(0,r.jsx)(n.h4,{id:"cancellation",children:"Cancellation"}),(0,r.jsxs)(n.p,{children:["In ASP.NET Core SignalR, ",(0,r.jsx)(n.code,{children:"CancellationToken"})," is passed for each invoke."]}),(0,r.jsxs)(n.p,{children:["On the other hand, in TypedSignalR.Client, ",(0,r.jsx)(n.code,{children:"CancellationToken"})," is passed only once when creating a hub proxy.\nThe passed ",(0,r.jsx)(n.code,{children:"CancelationToken"})," will be used for each invoke internally."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'var cts = new CancellationTokenSource();\n\n// The following two are equivalent.\n\n// 1: ASP.NET Core SignalR Client\nvar ret =  await connection.InvokeAsync<string>("HubMethod1", "user", "message", cts.Token);\nawait connection.InvokeAsync("HubMethod2", cts.Token);\n\n// 2: TypedSignalR.Client\nvar hubProxy = connection.CreateHubProxy<IHubContract>(cts.Token);\nvar ret = await hubProxy.HubMethod1("user", "message");\nawait hubProxy.HubMethod2();\n'})}),(0,r.jsx)(n.h3,{id:"server",children:"Server"}),(0,r.jsx)(n.p,{children:"Using the interface definitions, we can write as follows on the server-side (ASP.NET Core).\nTypedSignalR.Client is not necessary."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'using Microsoft.AspNetCore.SignalR;\n\npublic class SomeHub : Hub<IClientContract>, IHubContract\n{\n    public async Task<string> HubMethod1(string user, string message)\n    {\n        var instance = new UserDefinedType()\n        {\n            Id = Guid.NewGuid(),\n            DateTime = DateTime.Now,\n        };\n\n        // broadcast\n        await this.Clients.All.ClientMethod1(user, message, instance);\n        return "OK!";\n    }\n\n    public async Task HubMethod2()\n    {\n        await this.Clients.Caller.ClientMethod2();\n    }\n}\n'})}),(0,r.jsx)(n.h2,{id:"recommendation",children:"Recommendation"}),(0,r.jsx)(n.h3,{id:"sharing-a-project",children:"Sharing a Project"}),(0,r.jsx)(n.p,{children:"I recommend that these interfaces be shared between the client-side and server-side project, for example, by project references."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"server.csproj --\x3e shared.csproj <-- client.csproj\n"})}),(0,r.jsx)(n.h3,{id:"client-code-format",children:"Client Code Format"}),(0,r.jsx)(n.p,{children:"It is easier to handle if we write client code in the following format."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"class Client : IReceiver, IHubConnectionObserver, IDisposable\n{\n    private readonly IHub _hubProxy;\n    private readonly IDisposable _subscription;\n    private readonly CancellationTokenSource _cancellationTokenSource = new();\n\n    public Client(HubConnection connection)\n    {\n        _hubProxy = connection.CreateHubProxy<IHub>(_cancellationTokenSource.Token);\n        _subscription = connection.Register<IReceiver>(this);\n    }\n\n    // implementation\n}\n"})}),(0,r.jsx)(n.h2,{id:"streaming-support",children:"Streaming Support"}),(0,r.jsxs)(n.p,{children:["SignalR supports both ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/signalr/streaming?view=aspnetcore-6.0",children:"server-to-client streaming and client-to-server streaming"}),"."]}),(0,r.jsxs)(n.p,{children:["TypedSignalR.Client supports both server-to-client streaming and client-to-server streaming.\nIf you use ",(0,r.jsx)(n.code,{children:"IAsyncEnumerable<T>"}),", ",(0,r.jsx)(n.code,{children:"Task<IAsyncEnumerable<T>>"}),", or ",(0,r.jsx)(n.code,{children:"Task<ChannelReader<T>>"})," for the method return type, it is analyzed as server-to-client streaming.\nAnd if ",(0,r.jsx)(n.code,{children:"IAsyncEnumerable<T>"})," or ",(0,r.jsx)(n.code,{children:"ChannelReader<T>"})," is used in the method parameter, it is analyzed as client-to-server streaming."]}),(0,r.jsxs)(n.p,{children:["When using server-to-client streaming, a single ",(0,r.jsx)(n.code,{children:"CancellationToken"})," can be used as a method parameter (Note: ",(0,r.jsx)(n.code,{children:"CancellationToken"})," cannot be used as a parameter except for server-to-client streaming)."]}),(0,r.jsx)(n.h2,{id:"client-results-support",children:"Client Results Support"}),(0,r.jsxs)(n.p,{children:[".NET 7 and later, you can use ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-7.0#client-results",children:"client results"}),"."]}),(0,r.jsxs)(n.p,{children:["TypedSignalR.Client supports client results.\nIf you use ",(0,r.jsx)(n.code,{children:"Task<T>"})," for the method return type in the receiver interface, you can use client results."]}),(0,r.jsx)(n.h2,{id:"compile-time-error-support",children:"Compile-Time Error Support"}),(0,r.jsx)(n.p,{children:"This library has some restrictions, including those that come from server-side implementations."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Type argument of the ",(0,r.jsx)(n.code,{children:"CreateHubProxy/Register"})," method must be an interface."]}),"\n",(0,r.jsxs)(n.li,{children:["Only method definitions are allowed in the interface used for ",(0,r.jsx)(n.code,{children:"CreateHubProxy/Register"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It is forbidden to define properties and events."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The return type of the method in the interface used for ",(0,r.jsx)(n.code,{children:"CreateHubProxy"})," must be ",(0,r.jsx)(n.code,{children:"Task"})," or ",(0,r.jsx)(n.code,{children:"Task<T>"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The return type of the method in the interface used for ",(0,r.jsx)(n.code,{children:"Register"})," must be ",(0,r.jsx)(n.code,{children:"Task"}),"."]}),"\n"]}),(0,r.jsx)(n.p,{children:"It is complicated for humans to comply with these restrictions properly.\nSo, this library looks for parts that do not follow the restriction and report detailed errors at compile time.\nTherefore, no runtime error occurs."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/27144255/155505022-0a13bf1b-643c-472c-882e-8508e52c2b63.png",alt:"compile-time-error"})}),(0,r.jsx)(n.h2,{id:"generated-source-code",children:"Generated Source Code"}),(0,r.jsxs)(n.p,{children:["TypedSignalR.Client checks the type argument of a methods ",(0,r.jsx)(n.code,{children:"CreateHubProxy"})," and ",(0,r.jsx)(n.code,{children:"Register"})," and generates source code.\nGenerated source code can be seen in Visual Studio."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/27144255/154827948-dca0b9b1-0a1b-4833-8b32-3d5ceaa41414.png",alt:"generated-code-visible-from-solution-explorer"})}),(0,r.jsx)(n.h2,{id:"related-work",children:"Related Work"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/TypedSignalR.Client.TypeScript",children:"nenoNaninu/TypedSignalR.Client.TypeScript"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TypeScript source generator to provide strongly typed SignalR clients by analyzing C# type definitions."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/TypedSignalR.Client.DevTools",children:"nenoNaninu/TypedSignalR.Client.DevTools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SignalR development tools inspired by SwaggerUI."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nenoNaninu/AspNetCore.SignalR.OpenTelemetry",children:"nenoNaninu/AspNetCore.SignalR.OpenTelemetry"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SignalR instrumentation library for OpenTelemetry."}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Creating typed Signal R clients"})}),"\n",(0,r.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(T.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(n.strong,{children:"TypedSignalR.Client"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {12}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\t<ItemGroup>\n\t\t<PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="6.0.1" />\n\t\t<PackageReference Include="TypedSignalR.Client" Version="3.6.0">\n\t\t  <PrivateAssets>all</PrivateAssets>\n\t\t  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t\t</PackageReference>\n\t</ItemGroup>\n\n\t<ItemGroup>\n\t  <ProjectReference Include="..\\TestSignalRCommon\\TestSignalRCommon.csproj" />\n\t</ItemGroup>\n\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t\n</Project>\n\n'})})]}),(0,r.jsxs)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypedSignalR.Client\\src\\TestSignalRConsole\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(n.p,{children:["This is the use of ",(0,r.jsx)(n.strong,{children:"TypedSignalR.Client"})," in ",(0,r.jsx)(n.em,{children:"Program.cs"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing Microsoft.AspNetCore.SignalR.Client;\nusing TestSignalRCommon;\nusing TestSignalRConsole;\n\nConsole.WriteLine("Hello, World!");\nawait Task.Delay(5_000);\nHubConnection _connection = new HubConnectionBuilder()\n    .WithUrl("https://localhost:7302/ChatHub")\n    .Build();\nawait _connection.StartAsync();\n\n_connection.On<string, string>("ReceiveMessage", (user, message) =>\n{\n    Console.WriteLine($" from not typed {user}: {message}");\n});\n\nawait Task.Delay(30_000);\nvar h = TypedSignalR.Client.HubConnectionExtensions.CreateHubProxy<IHubMessage>(_connection);\nawait h.SendMessage("console", "message");\n//TypedSignalR.Client.HubConnectionExtensions.Register<IHubMessage>(_connection,new ReceiverMessage());\n\nConsole.WriteLine("waiting for messages from Windows App");\nvar message = Console.ReadLine();\n\n\n\n'})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypedSignalR.Client\\src\\TestSignalRConsole\\obj\\GX\\TypedSignalR.Client\\TypedSignalR.Client.SourceGenerator\\TypedSignalR.Client.Components.Generated.cs",label:"TypedSignalR.Client.Components.Generated.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client\n// </auto-generated>\n#nullable enable\n#pragma warning disable CS1591\nnamespace TypedSignalR.Client\n{\n    internal interface IHubConnectionObserver\n    {\n        global::System.Threading.Tasks.Task OnClosed(global::System.Exception? exception);\n        global::System.Threading.Tasks.Task OnReconnected(string? connectionId);\n        global::System.Threading.Tasks.Task OnReconnecting(global::System.Exception? exception);\n    }\n\n    internal interface IHubInvoker\n    {\n    }\n\n    internal interface IHubInvokerFactory\n    {\n    }\n\n    internal interface IHubInvokerFactory<out T> : IHubInvokerFactory\n    {\n        T CreateHubInvoker(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken);\n    }\n\n    internal interface IReceiverBinder\n    {\n    }\n\n    internal interface IReceiverBinder<in T> : IReceiverBinder\n    {\n        global::System.IDisposable Bind(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, T receiver);\n    }\n}\n#pragma warning restore CS1591\n\n"})})}),(0,r.jsx)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypedSignalR.Client\\src\\TestSignalRConsole\\obj\\GX\\TypedSignalR.Client\\TypedSignalR.Client.SourceGenerator\\TypedSignalR.Client.HubConnectionExtensions.Binder.Generated.cs",label:"TypedSignalR.Client.HubConnectionExtensions.Binder.Generated.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client\n// </auto-generated>\n#nullable enable\n#pragma warning disable CS1591\n#pragma warning disable CS8767\n#pragma warning disable CS8613\nnamespace TypedSignalR.Client\n{\n    internal static partial class HubConnectionExtensions\n    {\n        private static partial global::System.Collections.Generic.Dictionary<global::System.Type, IReceiverBinder> CreateBinders()\n        {\n            var binders = new global::System.Collections.Generic.Dictionary<global::System.Type, IReceiverBinder>();\n\n\n            return binders;\n        }\n    }\n}\n#pragma warning restore CS8613\n#pragma warning restore CS8767\n#pragma warning restore CS1591\n\n"})})}),(0,r.jsx)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypedSignalR.Client\\src\\TestSignalRConsole\\obj\\GX\\TypedSignalR.Client\\TypedSignalR.Client.SourceGenerator\\TypedSignalR.Client.HubConnectionExtensions.Generated.cs",label:"TypedSignalR.Client.HubConnectionExtensions.Generated.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client\n// </auto-generated>\n#nullable enable\n#pragma warning disable CS1591\nnamespace TypedSignalR.Client\n{\n    internal static partial class HubConnectionExtensions\n    {\n        public static THub CreateHubProxy<THub>(this global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken = default)\n        {\n            var factory = HubInvokerFactoryProvider.GetHubInvokerFactory<THub>();\n\n            if (factory is null)\n            {\n                throw new global::System.InvalidOperationException($"Failed to create a hub proxy. TypedSignalR.Client did not generate source code to create a hub proxy, which type is {typeof(THub)}.");\n            }\n\n            return factory.CreateHubInvoker(connection, cancellationToken);\n        }\n\n        public static global::System.IDisposable Register<TReceiver>(this global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, TReceiver receiver)\n        {\n            if (receiver is null)\n            {\n                throw new global::System.ArgumentNullException(nameof(receiver));\n            }\n\n            if (typeof(TReceiver) == typeof(IHubConnectionObserver))\n            {\n                return new HubConnectionObserverSubscription(connection, (IHubConnectionObserver)receiver);\n            }\n\n            var binder = ReceiverBinderProvider.GetReceiverBinder<TReceiver>();\n\n            if (binder is null)\n            {\n                throw new global::System.InvalidOperationException($"Failed to register a receiver. TypedSignalR.Client did not generate source code to register a receiver, which type is {typeof(TReceiver)}.");\n            }\n\n            var subscription = binder.Bind(connection, receiver);\n\n            if (receiver is IHubConnectionObserver hubConnectionObserver)\n            {\n                subscription = new CompositeDisposable(new[] { subscription, new HubConnectionObserverSubscription(connection, hubConnectionObserver) });\n            }\n\n            return subscription;\n        }\n    }\n\n    internal static partial class HubConnectionExtensions\n    {\n        private static partial global::System.Collections.Generic.Dictionary<global::System.Type, IHubInvokerFactory> CreateFactories();\n        private static partial global::System.Collections.Generic.Dictionary<global::System.Type, IReceiverBinder> CreateBinders();\n\n        private static class HubInvokerFactoryProvider\n        {\n            private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, IHubInvokerFactory> Factories;\n\n            static HubInvokerFactoryProvider()\n            {\n                Factories = CreateFactories();\n            }\n\n            public static IHubInvokerFactory<T>? GetHubInvokerFactory<T>()\n            {\n                return Cache<T>.HubInvokerFactory;\n            }\n\n            private static class Cache<T>\n            {\n                public static readonly IHubInvokerFactory<T>? HubInvokerFactory = default;\n\n                static Cache()\n                {\n                    if (Factories.TryGetValue(typeof(T), out var hubInvokerFactory))\n                    {\n                        HubInvokerFactory = hubInvokerFactory as IHubInvokerFactory<T>;\n                    }\n                }\n            }\n        }\n\n        private static class ReceiverBinderProvider\n        {\n            private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, IReceiverBinder> Binders;\n\n            static ReceiverBinderProvider()\n            {\n                Binders = CreateBinders();\n            }\n\n            public static IReceiverBinder<T>? GetReceiverBinder<T>()\n            {\n                return Cache<T>.ReceiverBinder;\n            }\n\n            private static class Cache<T>\n            {\n                public static readonly IReceiverBinder<T>? ReceiverBinder = default;\n\n                static Cache()\n                {\n                    if (Binders.TryGetValue(typeof(T), out var receiverBinder))\n                    {\n                        ReceiverBinder = receiverBinder as IReceiverBinder<T>;\n                    }\n                }\n            }\n        }\n\n        private sealed class HubConnectionObserverSubscription : global::System.IDisposable\n        {\n            private readonly global::Microsoft.AspNetCore.SignalR.Client.HubConnection _connection;\n            private readonly IHubConnectionObserver _hubConnectionObserver;\n\n            private int _disposed = 0;\n\n            public HubConnectionObserverSubscription(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, IHubConnectionObserver hubConnectionObserver)\n            {\n                _connection = connection;\n                _hubConnectionObserver = hubConnectionObserver;\n\n                _connection.Closed += hubConnectionObserver.OnClosed;\n                _connection.Reconnected += hubConnectionObserver.OnReconnected;\n                _connection.Reconnecting += hubConnectionObserver.OnReconnecting;\n            }\n\n            public void Dispose()\n            {\n                if (global::System.Threading.Interlocked.Exchange(ref _disposed, 1) == 0)\n                {\n                    _connection.Closed -= _hubConnectionObserver.OnClosed;\n                    _connection.Reconnected -= _hubConnectionObserver.OnReconnected;\n                    _connection.Reconnecting -= _hubConnectionObserver.OnReconnecting;\n                }\n            }\n        }\n\n        private sealed class CompositeDisposable : global::System.IDisposable\n        {\n            private readonly object _gate = new object();\n            private readonly global::System.Collections.Generic.List<global::System.IDisposable> _disposables;\n\n            private bool _disposed;\n\n            public CompositeDisposable()\n            {\n                _disposables = new global::System.Collections.Generic.List<global::System.IDisposable>();\n            }\n\n            public CompositeDisposable(global::System.IDisposable[] disposables)\n            {\n                _disposables = new global::System.Collections.Generic.List<global::System.IDisposable>(disposables);\n            }\n\n            public CompositeDisposable(int capacity)\n            {\n                if (capacity < 0)\n                {\n                    throw new global::System.ArgumentOutOfRangeException(nameof(capacity));\n                }\n\n                _disposables = new global::System.Collections.Generic.List<global::System.IDisposable>(capacity);\n            }\n\n            public void Add(global::System.IDisposable item)\n            {\n                bool shouldDispose = false;\n\n                lock (_gate)\n                {\n                    shouldDispose = _disposed;\n\n                    if (!_disposed)\n                    {\n                        _disposables.Add(item);\n                    }\n                }\n\n                if (shouldDispose)\n                {\n                    item.Dispose();\n                }\n            }\n\n            public void Dispose()\n            {\n                var currentDisposables = default(global::System.Collections.Generic.List<global::System.IDisposable>);\n\n                lock (_gate)\n                {\n                    if (_disposed)\n                    {\n                        return;\n                    }\n\n                    _disposed = true;\n                    currentDisposables = _disposables;\n                }\n\n                foreach (var item in currentDisposables)\n                {\n                    if (item is not null)\n                    {\n                        item.Dispose();\n                    }\n                }\n\n                currentDisposables.Clear();\n            }\n        }\n\n        // It is not possible to avoid boxing.\n        // This is a limitation caused by the SignalR implementation.\n        private static class HandlerConverter\n        {\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert(global::System.Func<global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler();\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1>(global::System.Func<T1, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2>(global::System.Func<T1, T2, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3>(global::System.Func<T1, T2, T3, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4>(global::System.Func<T1, T2, T3, T4, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5>(global::System.Func<T1, T2, T3, T4, T5, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6>(global::System.Func<T1, T2, T3, T4, T5, T6, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, (T15)args[14]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, (T15)args[14]!, (T16)args[15]!);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert(global::System.Func<global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler(default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1>(global::System.Func<T1, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2>(global::System.Func<T1, T2, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3>(global::System.Func<T1, T2, T3, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4>(global::System.Func<T1, T2, T3, T4, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5>(global::System.Func<T1, T2, T3, T4, T5, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6>(global::System.Func<T1, T2, T3, T4, T5, T6, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> handler)\n            {\n                return args => handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, (T15)args[14]!, default);\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<TResult>(global::System.Func<global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler().ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, TResult>(global::System.Func<T1, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, TResult>(global::System.Func<T1, T2, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, TResult>(global::System.Func<T1, T2, T3, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, TResult>(global::System.Func<T1, T2, T3, T4, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, TResult>(global::System.Func<T1, T2, T3, T4, T5, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, (T15)args[14]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, (T15)args[14]!, (T16)args[15]!).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<TResult>(global::System.Func<global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler(default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, TResult>(global::System.Func<T1, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, TResult>(global::System.Func<T1, T2, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, TResult>(global::System.Func<T1, T2, T3, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, TResult>(global::System.Func<T1, T2, T3, T4, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, TResult>(global::System.Func<T1, T2, T3, T4, T5, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n\n            public static global::System.Func<object?[], global::System.Threading.Tasks.Task<TResult>> Convert<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(global::System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handler)\n            {\n                return async args =>\n                {\n                    var result = await handler((T1)args[0]!, (T2)args[1]!, (T3)args[2]!, (T4)args[3]!, (T5)args[4]!, (T6)args[5]!, (T7)args[6]!, (T8)args[7]!, (T9)args[8]!, (T10)args[9]!, (T11)args[10]!, (T12)args[11]!, (T13)args[12]!, (T14)args[13]!, (T15)args[14]!, default).ConfigureAwait(false);\n                    return result;\n                };\n            }\n        }\n    }\n}\n#pragma warning restore CS1591\n\n'})})}),(0,r.jsx)(T.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\TypedSignalR.Client\\src\\TestSignalRConsole\\obj\\GX\\TypedSignalR.Client\\TypedSignalR.Client.SourceGenerator\\TypedSignalR.Client.HubConnectionExtensions.HubInvoker.Generated.cs",label:"TypedSignalR.Client.HubConnectionExtensions.HubInvoker.Generated.cs",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client\n// </auto-generated>\n#nullable enable\n#pragma warning disable CS1591\n#pragma warning disable CS8767\n#pragma warning disable CS8613\nnamespace TypedSignalR.Client\n{\n    internal static partial class HubConnectionExtensions\n    {\n        private sealed class HubInvokerFor_global__TestSignalRCommon_IHubMessage : global::TestSignalRCommon.IHubMessage, IHubInvoker\n        {\n            private readonly global::Microsoft.AspNetCore.SignalR.Client.HubConnection _connection;\n            private readonly global::System.Threading.CancellationToken _cancellationToken;\n\n            public HubInvokerFor_global__TestSignalRCommon_IHubMessage(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken)\n            {\n                _connection = connection;\n                _cancellationToken = cancellationToken;\n            }\n\n            public global::System.Threading.Tasks.Task SendMessage(string user, string message)\n            {\n                return global::Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeCoreAsync(_connection, nameof(SendMessage), new object?[] { user, message }, _cancellationToken);\n            }\n        }\n\n        private sealed class HubInvokerFactoryFor_global__TestSignalRCommon_IHubMessage : IHubInvokerFactory<global::TestSignalRCommon.IHubMessage>\n        {\n            public global::TestSignalRCommon.IHubMessage CreateHubInvoker(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken)\n            {\n                return new HubInvokerFor_global__TestSignalRCommon_IHubMessage(connection, cancellationToken);\n            }\n        }\n\n        private static partial global::System.Collections.Generic.Dictionary<global::System.Type, IHubInvokerFactory> CreateFactories()\n        {\n            var factories = new global::System.Collections.Generic.Dictionary<global::System.Type, IHubInvokerFactory>();\n\n            factories.Add(typeof(global::TestSignalRCommon.IHubMessage), new HubInvokerFactoryFor_global__TestSignalRCommon_IHubMessage());\n\n            return factories;\n        }\n    }\n}\n#pragma warning restore CS8613\n#pragma warning restore CS8767\n#pragma warning restore CS1591\n\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:a(62851).A+"",children:"Download Example project TypedSignalR.Client "})})}),"\n",(0,r.jsx)(n.h3,{id:"share-typedsignalrclient",children:"Share TypedSignalR.Client"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypedSignalR.Client&quote=TypedSignalR.Client",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypedSignalR.Client&text=TypedSignalR.Client:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypedSignalR.Client",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypedSignalR.Client&title=TypedSignalR.Client",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypedSignalR.Client&title=TypedSignalR.Client&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FTypedSignalR.Client",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TypedSignalR.Client",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/TypedSignalR.Client"})}),"\n",(0,r.jsx)(n.h3,{id:"in-the-same-category-signalr---0-other-generators",children:"In the same category (SignalR) - 0 other generators"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},62851:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/files/TypedSignalR.Client-e736bc6906a22ee0b06e022680d5cfde.zip"}}]);