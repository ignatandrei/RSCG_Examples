"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[74],{17204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>g,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),s=n(73992),i=n(18679),o=n(68839);const l={sidebar_position:1310,title:"131 - EnumUtilities",description:"Enum to string- and multiple other extensions for an enum",slug:"/EnumUtilities"},u="EnumUtilities  by Fabricio Godoy",m={unversionedId:"RSCG-Examples/EnumUtilities",id:"RSCG-Examples/EnumUtilities",title:"131 - EnumUtilities",description:"Enum to string- and multiple other extensions for an enum",source:"@site/docs/RSCG-Examples/EnumUtilities.md",sourceDirName:"RSCG-Examples",slug:"/EnumUtilities",permalink:"/RSCG_Examples/v2/docs/EnumUtilities",draft:!1,tags:[],version:"current",sidebarPosition:1310,frontMatter:{sidebar_position:1310,title:"131 - EnumUtilities",description:"Enum to string- and multiple other extensions for an enum",slug:"/EnumUtilities"},sidebar:"tutorialSidebar",previous:{title:"130 - MSTest",permalink:"/RSCG_Examples/v2/docs/MSTest"},next:{title:"132 - UnionGen",permalink:"/RSCG_Examples/v2/docs/UnionGen"}},p={},c=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share EnumUtilities",id:"share-enumutilities",level:3},{value:"In the same category (Enum) - 3 other generators",id:"in-the-same-category-enum---3-other-generators",level:3},{value:"CredFetoEnum",id:"credfetoenum",level:4},{value:"EnumClass",id:"enumclass",level:4},{value:"NetEscapades.EnumGenerators",id:"netescapadesenumgenerators",level:4}],h={toc:c},d="wrapper";function g(e){let{components:t,...l}=e;return(0,r.kt)(d,(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"enumutilities--by-fabricio-godoy"},"EnumUtilities  by Fabricio Godoy"),(0,r.kt)(o.Z,{toc:c,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/EnumUtilities/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/EnumUtilities?label=EnumUtilities",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/skarllot/EnumUtilities"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/skarllot/EnumUtilities?label=updated",alt:"GitHub last commit"})),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/skarllot/EnumUtilities?style=social",alt:"GitHub Repo stars"})),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"info"},"Info"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Name: ",(0,r.kt)("strong",{parentName:"p"},"EnumUtilities")),(0,r.kt)("p",{parentName:"admonition"},"Provides generic enum functions such as bitwise operations, fast HasFlag, and others."),(0,r.kt)("p",{parentName:"admonition"},"Author: Fabricio Godoy"),(0,r.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/EnumUtilities/"},"https://www.nuget.org/packages/EnumUtilities/")),"   "),(0,r.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/skarllot/EnumUtilities"},"https://github.com/skarllot/EnumUtilities")),(0,r.kt)("p",{parentName:"admonition"},"Source : ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/skarllot/EnumUtilities"},"https://github.com/skarllot/EnumUtilities"))),(0,r.kt)("h3",{id:"original-readme"},"Original Readme"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("h1",{parentName:"admonition",id:"enum-utilities"},"Enum Utilities"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/skarllot/EnumUtilities/actions"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/skarllot/EnumUtilities/actions/workflows/dotnet.yml/badge.svg?branch=main",alt:"Build status"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://securityscorecards.dev/viewer/?uri=github.com/skarllot/EnumUtilities"},(0,r.kt)("img",{parentName:"a",src:"https://api.securityscorecards.dev/projects/github.com/skarllot/EnumUtilities/badge",alt:"OpenSSF Scorecard"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/EngRajabi/Enum.Source.Generator/master/LICENSE"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square",alt:"GitHub license"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Raiqub.Generators.EnumUtilities"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/Raiqub.Generators.EnumUtilities",alt:"Nuget"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Raiqub.Generators.EnumUtilities"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Raiqub.Generators.EnumUtilities?label=Nuget.org%20Downloads&style=flat-square&color=blue",alt:"Nuget"}))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"A source generator for C# that uses Roslyn to create extensions and parsers for enumerations")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"#quickstart"},"\ud83c\udfc3 Quickstart")," ","\xa0"," | ","\xa0"," ",(0,r.kt)("a",{parentName:"p",href:"#guide"},"\ud83d\udcd7 Guide")," ","\xa0"," | ","\xa0"," ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Raiqub.Generators.EnumUtilities"},"\ud83d\udce6 NuGet")),(0,r.kt)("hr",null),(0,r.kt)("p",{parentName:"admonition"},"A source generator for C# that uses Roslyn to create extensions and parsers for enumerations, allowing to get a value associated to enum member or parse back from attribute value to enum member. All code generated at compile time thus avoid using reflection or boilerplate code."),(0,r.kt)("h2",{parentName:"admonition",id:"compatibility"},"Compatibility"),(0,r.kt)("p",{parentName:"admonition"},"Raiqub.Generators.EnumUtilities runs with Roslyn compiler so does not introduce a new dependency to your project besides a library containing the EnumGenerator attribute."),(0,r.kt)("p",{parentName:"admonition"},"It requires at least the .NET 6 SDK to run, but you can target earlier frameworks."),(0,r.kt)("h2",{parentName:"admonition",id:"quickstart"},"Quickstart"),(0,r.kt)("p",{parentName:"admonition"},"Add the package to your application using"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dotnet add package Raiqub.Generators.EnumUtilities\n")),(0,r.kt)("p",{parentName:"admonition"},"Adding the package will automatically add a marker attribute, ",(0,r.kt)("inlineCode",{parentName:"p"},"[EnumGenerator]"),", to your project."),(0,r.kt)("p",{parentName:"admonition"},"To use the generator, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"[EnumGenerator]")," attribute to an enum. For example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[EnumGenerator]\npublic enum Categories\n{\n   Electronics,\n   Food,\n   Automotive,\n   Arts,\n   BeautyCare,\n   Fashion\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"This will generate 3 classes with the following methods:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.CategoriesExtensions.g.cs"},"CategoriesExtensions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ToStringFast(this Categories)"),(0,r.kt)("li",{parentName:"ul"},"IsDefined(this Categories)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedAdd(this ref Categories, int)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedDecrement(this ref Categories)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedIncrement(this ref Categories)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedCompareExchange(this ref Categories, Categories, Categories)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedExchange(this ref Categories, Categories)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.CategoriesFactory.g.cs"},"CategoriesFactory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TryParse(string?, StringComparison, out Categories)"),(0,r.kt)("li",{parentName:"ul"},"TryParseIgnoreCase(string?, out Categories)"),(0,r.kt)("li",{parentName:"ul"},"TryParse(string?, out Categories)"),(0,r.kt)("li",{parentName:"ul"},"TryParse(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"TryParseIgnoreCase(string?)"),(0,r.kt)("li",{parentName:"ul"},"TryParse(string?)"),(0,r.kt)("li",{parentName:"ul"},"GetValues()"),(0,r.kt)("li",{parentName:"ul"},"GetNames()"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.CategoriesValidation.g.cs"},"CategoriesValidation"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IsDefined(Categories)"),(0,r.kt)("li",{parentName:"ul"},"IsDefined(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"IsDefinedIgnoreCase(string?)"),(0,r.kt)("li",{parentName:"ul"},"IsDefined(string?)")))),(0,r.kt)("p",{parentName:"admonition"},"Bit flags enums are supported too:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[Flags]\n[EnumGenerator]\npublic enum Colours\n{\n    Red = 1,\n    Blue = 2,\n    Green = 4,\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Then 3 classes will be generated with the following methods:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.ColoursExtensions.g.cs"},"ColoursExtensions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ToStringFast(this Colours)"),(0,r.kt)("li",{parentName:"ul"},"IsDefined(this Colours)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedAnd(this ref Colours, Colours)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedOr(this ref Colours, Colours)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedCompareExchange(this ref Colours, Colours, Colours)"),(0,r.kt)("li",{parentName:"ul"},"InterlockedExchange(this ref Colours, Colours)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.ColoursFactory.g.cs"},"ColoursFactory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TryParse(string?, StringComparison, out Colours)"),(0,r.kt)("li",{parentName:"ul"},"TryParse(string?, out Colours)"),(0,r.kt)("li",{parentName:"ul"},"TryParseIgnoreCase(string?, out Colours)"),(0,r.kt)("li",{parentName:"ul"},"TryParse(string?)"),(0,r.kt)("li",{parentName:"ul"},"TryParseIgnoreCase(string?)"),(0,r.kt)("li",{parentName:"ul"},"TryParse(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"GetValues()"),(0,r.kt)("li",{parentName:"ul"},"GetNames()"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.ColoursValidation.g.cs"},"ColoursValidation"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IsDefined(Colours)"),(0,r.kt)("li",{parentName:"ul"},"IsDefined(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"IsDefinedIgnoreCase(string?)"),(0,r.kt)("li",{parentName:"ul"},"IsDefined(string?)")))),(0,r.kt)("p",{parentName:"admonition"},"All generated code are properly nullable annotated and removed from code coverage."),(0,r.kt)("h2",{parentName:"admonition",id:"guide"},"Guide"),(0,r.kt)("p",{parentName:"admonition"},"The following attributes are supported:"),(0,r.kt)("h3",{parentName:"admonition",id:"enummemberattribute"},(0,r.kt)("a",{parentName:"h3",href:"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.enummemberattribute"},"EnumMemberAttribute")),(0,r.kt)("p",{parentName:"admonition"},"Example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[EnumGenerator]\npublic enum PaymentMethod\n{\n    [EnumMember(Value = "Credit card")]\n    Credit,\n    [EnumMember(Value = "Debit card")]\n    Debit,\n    Cash,\n    Cheque\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the following methods:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.PaymentMethodExtensions.g.cs"},"PaymentMethodExtensions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ToEnumMemberValue(this PaymentMethod)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.PaymentMethodFactory.g.cs"},"PaymentMethodFactory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TryParseFromEnumMemberValue(string?, StringComparison, out PaymentMethod)"),(0,r.kt)("li",{parentName:"ul"},"TryParseFromEnumMemberValue(string?, out PaymentMethod)"),(0,r.kt)("li",{parentName:"ul"},"TryParseFromEnumMemberValue(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"TryParseFromEnumMemberValue(string?)")))),(0,r.kt)("h3",{parentName:"admonition",id:"descriptionattribute"},(0,r.kt)("a",{parentName:"h3",href:"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.descriptionattribute"},"DescriptionAttribute")),(0,r.kt)("p",{parentName:"admonition"},"Example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[EnumGenerator]\npublic enum PaymentMethod\n{\n    Credit,\n    Debit,\n    [Description("The payment by using physical cash")]\n    Cash,\n    Cheque\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the following methods:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.PaymentMethodExtensions.g.cs"},"PaymentMethodExtensions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"GetDescription(this PaymentMethod)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.PaymentMethodFactory.g.cs"},"PaymentMethodFactory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?, StringComparison, out PaymentMethod)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?, out PaymentMethod)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?)")))),(0,r.kt)("h3",{parentName:"admonition",id:"displayattribute"},(0,r.kt)("a",{parentName:"h3",href:"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayattribute"},"DisplayAttribute")),(0,r.kt)("p",{parentName:"admonition"},"Example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[EnumGenerator]\npublic enum WeekDays\n{\n    [Display(\n        Name = nameof(Strings.MondayFull),\n        ShortName = nameof(Strings.MondayShort),\n        Description = nameof(Strings.MondayDescription),\n        ResourceType = typeof(Strings))]\n    Monday,\n    [Display(ShortName = "Tue")]\n    Tuesday,\n    [Display]\n    Wednesday,\n    [Display(Name = "Thursday")]\n    Thursday,\n    [Display(Name = "Friday", ShortName = "Fri")]\n    Friday,\n    [Display(ShortName = "Sat", Description = "Almost the last day of the week")]\n    Saturday,\n    [Display(Description = "The last day of the week")]\n    Sunday\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"Note that if ",(0,r.kt)("inlineCode",{parentName:"p"},"ResourceType")," is provided the generated code will correctly get the value from resource."),(0,r.kt)("p",{parentName:"admonition"},"This will generate the following methods:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.WeekDaysExtensions.g.cs"},"WeekDaysExtensions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"GetDisplayShortName(this WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"GetDisplayName(this WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"GetDescription(this WeekDays)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.WeekDaysFactory.g.cs"},"WeekDaysFactory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayShortName(string?, StringComparison, out WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayShortName(string?, out WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayShortName(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayShortName(string?)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayName(string?, StringComparison, out WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayName(string?, out WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayName(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDisplayName(string?)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?, StringComparison, out WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?, out WeekDays)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?, StringComparison)"),(0,r.kt)("li",{parentName:"ul"},"TryCreateFromDescription(string?)")))),(0,r.kt)("h3",{parentName:"admonition",id:"json-serialization"},"JSON Serialization"),(0,r.kt)("p",{parentName:"admonition"},"Besides the member name, supports the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.enummemberattribute"},"EnumMemberAttribute")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.text.json.serialization.jsonpropertynameattribute"},"JsonPropertyNameAttribute")," attributes."),(0,r.kt)("p",{parentName:"admonition"},"Example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[JsonConverterGenerator]\n[JsonConverter(typeof(SeasonJsonConverter))]\npublic enum Season\n{\n    [EnumMember(Value = "\\ud83c\\udf31")]\n    Spring = 1,\n    [EnumMember(Value = "\\u2600\\ufe0f")]\n    Summer,\n    [EnumMember(Value = "\\ud83c\\udf42")]\n    Autumn,\n    [EnumMember(Value = "\\u26c4")]\n    Winter\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"This will generate the following JSON converter: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/skarllot/EnumUtilities/tests/EnumUtilities.IntegrationTests/Generated/Raiqub.Generators.EnumUtilities/Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator/Raiqub.Generators.EnumUtilities.IntegrationTests.Models.SeasonJsonConverter.g.cs"},"SeasonJsonConverter"),"."),(0,r.kt)("h2",{parentName:"admonition",id:"contributing"},"Contributing"),(0,r.kt)("p",{parentName:"admonition"},"If something is not working for you or if you think that the source file\nshould change, feel free to create an issue or Pull Request.\nI will be happy to discuss and potentially integrate your ideas!"),(0,r.kt)("h2",{parentName:"admonition",id:"license"},"License"),(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/skarllot/EnumUtilities/LICENSE"},"LICENSE")," file for details.")),(0,r.kt)("h3",{id:"about"},"About"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Enum to string- and multiple other extensions for an enum")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,r.kt)("p",null,"This is the CSharp Project that references ",(0,r.kt)("strong",{parentName:"p"},"EnumUtilities")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {16}",showLineNumbers:!0,"{16}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Raiqub.Generators.EnumUtilities" Version="1.6.14" />\n  </ItemGroup>\n</Project>\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumUtilities\\src\\EnumClassDemo\\Colors.cs",label:"Colors.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"EnumUtilities")," in ",(0,r.kt)("em",{parentName:"p"},"Colors.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Raiqub.Generators.EnumUtilities;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Runtime.Serialization;\nusing System.Text.Json.Serialization;\n\nnamespace EnumClassDemo;\n[EnumGenerator]\n[Flags]\n//[JsonConverterGenerator]\n//[JsonConverter(typeof(ColorJsonConverter))]\npublic enum Colors\n{\n    //[Display(ShortName = "This should be never seen")]\n    [EnumMember(Value = "This should be never seen")]\n    None =0,\n    Red=1,\n    Green=2,\n    Blue=4,\n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumUtilities\\src\\EnumClassDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,r.kt)("p",null,"  This is the use of ",(0,r.kt)("strong",{parentName:"p"},"EnumUtilities")," in ",(0,r.kt)("em",{parentName:"p"},"Program.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using EnumClassDemo;\nConsole.WriteLine(Colors.None.ToStringFast());\nConsole.WriteLine(Colors.None.ToEnumMemberValue());\n")))),(0,r.kt)("h3",{id:"generated-files"},"Generated Files"),(0,r.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumUtilities\\src\\EnumClassDemo\\obj\\GX\\Raiqub.Generators.EnumUtilities\\Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator\\EnumClassDemo.ColorsExtensions.g.cs",label:"EnumClassDemo.ColorsExtensions.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\n\nusing System;\nusing System.Runtime.CompilerServices;\nusing System.Threading;\n\n#pragma warning disable CS1591 // publicly visible type or member must be documented\n\nnamespace EnumClassDemo\n{\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]\n    public static partial class ColorsExtensions\n    {\n        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>\n        /// <returns>The string representation of the value of this instance.</returns>\n        public static string ToStringFast(this Colors value)\n        {\n            return value switch\n            {\n                Colors.None => nameof(Colors.None),\n                Colors.Red => nameof(Colors.Red),\n                Colors.Green => nameof(Colors.Green),\n                Colors.Blue => nameof(Colors.Blue),\n                _ => value.ToString()\n            };\n        }\n\n        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>\n        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>\n        public static bool IsDefined(this Colors value)\n        {\n            return ColorsValidation.IsDefined(value);\n        }\n\n    #if NET5_0_OR_GREATER\n        /// <summary>Bitwise "ands" two enumerations and replaces the first value with the result, as an atomic operation.</summary>\n        /// <param name="location">A variable containing the first value to be combined.</param>\n        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>\n        /// <returns>The original value in <paramref name="location" />.</returns>\n        public static Colors InterlockedAnd(this ref Colors location, Colors value)\n        {\n            ref int locationRaw = ref Unsafe.As<Colors, int>(ref location);\n            int resultRaw = Interlocked.And(ref locationRaw, Unsafe.As<Colors, int>(ref value));\n            return Unsafe.As<int, Colors>(ref resultRaw);\n        }\n\n        /// <summary>Bitwise "ors" two enumerations and replaces the first value with the result, as an atomic operation.</summary>\n        /// <param name="location">A variable containing the first value to be combined.</param>\n        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>\n        /// <returns>The original value in <paramref name="location" />.</returns>\n        public static Colors InterlockedOr(this ref Colors location, Colors value)\n        {\n            ref int locationRaw = ref Unsafe.As<Colors, int>(ref location);\n            int resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As<Colors, int>(ref value));\n            return Unsafe.As<int, Colors>(ref resultRaw);\n        }\n    #endif\n\n        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>\n        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>\n        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>\n        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>\n        /// <returns>The original value in <paramref name="location" />.</returns>\n        public static Colors InterlockedCompareExchange(this ref Colors location, Colors value, Colors comparand)\n        {\n            ref int locationRaw = ref Unsafe.As<Colors, int>(ref location);\n            int resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<Colors, int>(ref value), Unsafe.As<Colors, int>(ref comparand));\n            return Unsafe.As<int, Colors>(ref resultRaw);\n        }\n\n        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>\n        /// <param name="location">The variable to set to the specified value.</param>\n        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>\n        /// <returns>The original value of <paramref name="location" />.</returns>\n        public static Colors InterlockedExchange(this ref Colors location, Colors value)\n        {\n            ref int locationRaw = ref Unsafe.As<Colors, int>(ref location);\n            int resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<Colors, int>(ref value));\n            return Unsafe.As<int, Colors>(ref resultRaw);\n        }\n\n        public static string ToEnumMemberValue(this Colors value)\n        {\n            return value switch\n            {\n                Colors.None => "This should be never seen",\n                Colors.Red => nameof(Colors.Red),\n                Colors.Green => nameof(Colors.Green),\n                Colors.Blue => nameof(Colors.Blue),\n                _ => value.ToString()\n            };\n        }\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumUtilities\\src\\EnumClassDemo\\obj\\GX\\Raiqub.Generators.EnumUtilities\\Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator\\EnumClassDemo.ColorsFactory.g.cs",label:"EnumClassDemo.ColorsFactory.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\n\nusing System;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\n\n#pragma warning disable CS1591 // publicly visible type or member must be documented\n\nnamespace EnumClassDemo\n{\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]\n    public static partial class ColorsFactory\n    {\n        /// <summary>\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\n        /// </summary>\n        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\n        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>\n        /// <param name="result">\n        /// When this method returns, result contains an object of type Colors whose value is represented by value\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\n        /// underlying type of Colors. Note that this value need not be a member of the Colors enumeration.\n        /// </param>\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\n        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>\n        public static bool TryParse(\n            [NotNullWhen(true)] string? name,\n            StringComparison comparisonType,\n            out Colors result)\n        {\n            switch (name)\n            {\n                case { } s when s.Equals(nameof(Colors.None), comparisonType):\n                    result = Colors.None;\n                    return true;\n                case { } s when s.Equals(nameof(Colors.Red), comparisonType):\n                    result = Colors.Red;\n                    return true;\n                case { } s when s.Equals(nameof(Colors.Green), comparisonType):\n                    result = Colors.Green;\n                    return true;\n                case { } s when s.Equals(nameof(Colors.Blue), comparisonType):\n                    result = Colors.Blue;\n                    return true;\n                case { } s when TryParseNumeric(s, comparisonType, out int val):\n                    result = (Colors)val;\n                    return true;\n                default:\n                    return Enum.TryParse(name, out result);\n            }\n        }\n\n        /// <summary>\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\n        /// </summary>\n        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\n        /// <param name="result">\n        /// When this method returns, result contains an object of type Colors whose value is represented by value\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\n        /// underlying type of Colors. Note that this value need not be a member of the Colors enumeration.\n        /// </param>\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\n        public static bool TryParse(\n            [NotNullWhen(true)] string? name,\n            out Colors result)\n        {\n            switch (name)\n            {\n                case nameof(Colors.None):\n                    result = Colors.None;\n                    return true;\n                case nameof(Colors.Red):\n                    result = Colors.Red;\n                    return true;\n                case nameof(Colors.Green):\n                    result = Colors.Green;\n                    return true;\n                case nameof(Colors.Blue):\n                    result = Colors.Blue;\n                    return true;\n                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out int val):\n                    result = (Colors)val;\n                    return true;\n                default:\n                    return Enum.TryParse(name, out result);\n            }\n        }\n\n        /// <summary>\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\n        /// </summary>\n        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\n        /// <param name="result">\n        /// When this method returns, result contains an object of type Colors whose value is represented by value\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\n        /// underlying type of Colors. Note that this value need not be a member of the Colors enumeration.\n        /// </param>\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\n        public static bool TryParseIgnoreCase(\n            [NotNullWhen(true)] string? name,\n            out Colors result)\n        {\n            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);\n        }\n\n        /// <summary>\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\n        /// an equivalent enumerated object.\n        /// </summary>\n        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\n        /// <returns>\n        /// Contains an object of type Colors whose value is represented by value if the parse operation succeeds.\n        /// If the parse operation fails, result contains <c>null</c> value.\n        /// </returns>\n        public static Colors? TryParse(string? name)\n        {\n            return TryParse(name, out Colors result) ? result : null;\n        }\n\n        /// <summary>\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\n        /// an equivalent enumerated object.\n        /// </summary>\n        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\n        /// <returns>\n        /// Contains an object of type Colors whose value is represented by value if the parse operation succeeds.\n        /// If the parse operation fails, result contains <c>null</c> value.\n        /// </returns>\n        public static Colors? TryParseIgnoreCase(string? name)\n        {\n            return TryParse(name, StringComparison.OrdinalIgnoreCase, out Colors result) ? result : null;\n        }\n\n        /// <summary>\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\n        /// an equivalent enumerated object.\n        /// </summary>\n        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\n        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>\n        /// <returns>\n        /// Contains an object of type Colors whose value is represented by value if the parse operation succeeds.\n        /// If the parse operation fails, result contains <c>null</c> value.\n        /// </returns>\n        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>\n        public static Colors? TryParse(string? name, StringComparison comparisonType)\n        {\n            return TryParse(name, comparisonType, out Colors result) ? result : null;\n        }\n\n        /// <summary>\n        /// Converts the string representation of the value associated with one enumerated constant to\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\n        /// </summary>\n        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>\n        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>\n        /// <param name="result">\n        /// When this method returns, result contains an object of type Colors whose value is represented by value\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\n        /// underlying type of Colors. Note that this value need not be a member of the Colors enumeration.\n        /// </param>\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\n        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>\n        public static bool TryParseFromEnumMemberValue(\n            [NotNullWhen(true)] string? enumMemberValue,\n            StringComparison comparisonType,\n            out Colors result)\n        {\n            switch (enumMemberValue)\n            {\n                case { } s when s.Equals("This should be never seen", comparisonType):\n                    result = Colors.None;\n                    return true;\n                case { } s when s.Equals(nameof(Colors.Red), comparisonType):\n                    result = Colors.Red;\n                    return true;\n                case { } s when s.Equals(nameof(Colors.Green), comparisonType):\n                    result = Colors.Green;\n                    return true;\n                case { } s when s.Equals(nameof(Colors.Blue), comparisonType):\n                    result = Colors.Blue;\n                    return true;\n                default:\n                    result = default;\n                    return false;\n            }\n        }\n\n        /// <summary>\n        /// Converts the string representation of the value associated with one enumerated constant to\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\n        /// </summary>\n        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>\n        /// <param name="result">\n        /// When this method returns, result contains an object of type Colors whose value is represented by value\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\n        /// underlying type of Colors. Note that this value need not be a member of the Colors enumeration.\n        /// </param>\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\n        public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? enumMemberValue, out Colors result)\n        {\n            return TryParseFromEnumMemberValue(enumMemberValue, StringComparison.Ordinal, out result);\n        }\n\n        /// <summary>\n        /// Converts the string representation of the value associated with one enumerated constant to\n        /// an equivalent enumerated object.\n        /// </summary>\n        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>\n        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>\n        /// <returns>\n        /// Contains an object of type Colors whose value is represented by value if the parse operation succeeds.\n        /// If the parse operation fails, result contains a null value.\n        /// </returns>\n        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>\n        public static Colors? TryParseFromEnumMemberValue(string? enumMemberValue, StringComparison comparisonType)\n        {\n            return TryParseFromEnumMemberValue(enumMemberValue, comparisonType, out Colors result) ? result : null;\n        }\n\n        /// <summary>\n        /// Converts the string representation of the value associated with one enumerated constant to\n        /// an equivalent enumerated object.\n        /// </summary>\n        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>\n        /// <returns>\n        /// Contains an object of type Colors whose value is represented by value if the parse operation succeeds.\n        /// If the parse operation fails, result contains a null value.\n        /// </returns>\n        public static Colors? TryParseFromEnumMemberValue(string? enumMemberValue)\n        {\n            return TryParseFromEnumMemberValue(enumMemberValue, StringComparison.Ordinal, out Colors result) ? result : null;\n        }\n\n        /// <summary>Retrieves an array of the values of the constants in the Colors enumeration.</summary>\n        /// <returns>An array that contains the values of the constants in Colors.</returns>\n        public static Colors[] GetValues()\n        {\n            return new[]\n            {\n                Colors.None,\n                Colors.Red,\n                Colors.Green,\n                Colors.Blue,\n            };\n        }\n\n        /// <summary>Retrieves an array of the names of the constants in Colors enumeration.</summary>\n        /// <returns>A string array of the names of the constants in Colors.</returns>\n        public static string[] GetNames()\n        {\n            return new[]\n            {\n                nameof(Colors.None),\n                nameof(Colors.Red),\n                nameof(Colors.Green),\n                nameof(Colors.Blue),\n            };\n        }\n\n        private static bool TryParseNumeric(\n            string name,\n            StringComparison comparisonType,\n            out int result)\n        {\n            switch (comparisonType)\n            {\n                case StringComparison.CurrentCulture:\n                case StringComparison.CurrentCultureIgnoreCase:\n                    return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);\n                case StringComparison.InvariantCulture:\n                case StringComparison.InvariantCultureIgnoreCase:\n                case StringComparison.Ordinal:\n                case StringComparison.OrdinalIgnoreCase:\n                    return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);\n                default:\n                    return int.TryParse(name, out result);\n            }\n        }\n    }\n}\n\n'))),(0,r.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\EnumUtilities\\src\\EnumClassDemo\\obj\\GX\\Raiqub.Generators.EnumUtilities\\Raiqub.Generators.EnumUtilities.EnumUtilitiesGenerator\\EnumClassDemo.ColorsValidation.g.cs",label:"EnumClassDemo.ColorsValidation.g.cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\n\nusing System;\nusing System.Diagnostics.CodeAnalysis;\n\n#pragma warning disable CS1591 // publicly visible type or member must be documented\n\nnamespace EnumClassDemo\n{\n    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]\n    public static partial class ColorsValidation\n    {\n        /// <summary>Returns a boolean telling whether the value of <see cref="Colors"/> instance exists in the enumeration.</summary>\n        /// <returns><c>true</c> if the value of <see cref="Colors"/> instance exists in the enumeration; <c>false</c> otherwise.</returns>\n        public static bool IsDefined(Colors value)\n        {\n            return value switch\n            {\n                Colors.None => true,\n                Colors.Red => true,\n                Colors.Green => true,\n                Colors.Blue => true,\n                _ => false\n            };\n        }\n\n        public static bool IsDefined(\n            [NotNullWhen(true)] string? name,\n            StringComparison comparisonType)\n        {\n            return name switch\n            {\n                { } s when s.Equals(nameof(Colors.None), comparisonType) => true,\n                { } s when s.Equals(nameof(Colors.Red), comparisonType) => true,\n                { } s when s.Equals(nameof(Colors.Green), comparisonType) => true,\n                { } s when s.Equals(nameof(Colors.Blue), comparisonType) => true,\n                _ => false\n            };\n        }\n\n        public static bool IsDefinedIgnoreCase([NotNullWhen(true)] string? name)\n        {\n            return IsDefined(name, StringComparison.OrdinalIgnoreCase);\n        }\n\n        public static bool IsDefined([NotNullWhen(true)] string? name)\n        {\n            return name switch\n            {\n                nameof(Colors.None) => true,\n                nameof(Colors.Red) => true,\n                nameof(Colors.Green) => true,\n                nameof(Colors.Blue) => true,\n                _ => false\n            };\n        }\n    }\n}\n\n')))),(0,r.kt)("h2",{id:"usefull"},"Usefull"),(0,r.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{target:"_blank",href:n(48637).Z},"Download Example project EnumUtilities "))),(0,r.kt)("h3",{id:"share-enumutilities"},"Share EnumUtilities"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumUtilities&quote=EnumUtilities",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumUtilities&text=EnumUtilities:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumUtilities",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumUtilities&title=EnumUtilities",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,r.kt)("li",null,(0,r.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumUtilities&title=EnumUtilities&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FEnumUtilities",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/EnumUtilities"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/EnumUtilities")),(0,r.kt)("h3",{id:"in-the-same-category-enum---3-other-generators"},"In the same category (Enum) - 3 other generators"),(0,r.kt)("h4",{id:"credfetoenum"},(0,r.kt)("a",{parentName:"h4",href:"/docs/CredFetoEnum"},"CredFetoEnum")),(0,r.kt)("h4",{id:"enumclass"},(0,r.kt)("a",{parentName:"h4",href:"/docs/EnumClass"},"EnumClass")),(0,r.kt)("h4",{id:"netescapadesenumgenerators"},(0,r.kt)("a",{parentName:"h4",href:"/docs/NetEscapades.EnumGenerators"},"NetEscapades.EnumGenerators")))}g.isMDXComponent=!0},48637:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/EnumUtilities-12ac46a145e19fa0d91f2df910876725.zip"}}]);