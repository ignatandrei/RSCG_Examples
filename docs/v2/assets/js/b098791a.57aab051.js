"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6148],{10640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>x,frontMatter:()=>d,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"RSCG-Examples/PlantUmlClassDiagramGenerator","title":"117 - PlantUmlClassDiagramGenerator","description":"Generating UML from class definitions","source":"@site/docs/RSCG-Examples/PlantUmlClassDiagramGenerator.md","sourceDirName":"RSCG-Examples","slug":"/PlantUmlClassDiagramGenerator","permalink":"/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/PlantUmlClassDiagramGenerator.md","tags":[],"version":"current","sidebarPosition":1170,"frontMatter":{"sidebar_position":1170,"title":"117 - PlantUmlClassDiagramGenerator","description":"Generating UML from class definitions","slug":"/PlantUmlClassDiagramGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"116 - CopyTo","permalink":"/RSCG_Examples/v2/docs/CopyTo"},"next":{"title":"118 - RSCG_Wait","permalink":"/RSCG_Examples/v2/docs/RSCG_Wait"}}');var r=n(74848),l=n(28453),i=n(11470),a=n(19365),c=n(14252);const d={sidebar_position:1170,title:"117 - PlantUmlClassDiagramGenerator",description:"Generating UML from class definitions",slug:"/PlantUmlClassDiagramGenerator"},o="PlantUmlClassDiagramGenerator  by Hirotada Kobayashi",h={},m=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"New Feature in Development",id:"new-feature-in-development",level:2},{value:"Visual Studio Code Extension",id:"visual-studio-code-extension",level:2},{value:".Net Core global tools",id:"net-core-global-tools",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3},{value:"Specification for conversion to PlantUML",id:"specification-for-conversion-to-plantuml",level:2},{value:"Type Declaration",id:"type-declaration",level:3},{value:"Type Keywords",id:"type-keywords",level:4},{value:"Type Modifiers",id:"type-modifiers",level:4},{value:"Generics Type",id:"generics-type",level:4},{value:"Member Declaration",id:"member-declaration",level:3},{value:"Accessibility Modifiers",id:"accessibility-modifiers",level:4},{value:"Modifiers",id:"modifiers",level:4},{value:"Property Accessors",id:"property-accessors",level:4},{value:"Field and Property Initializers",id:"field-and-property-initializers",level:4},{value:"Nested Class Declaration",id:"nested-class-declaration",level:3},{value:"Inheritance Relationsips",id:"inheritance-relationsips",level:3},{value:"Associations (from references of fields and properties)",id:"associations-from-references-of-fields-and-properties",level:3},{value:"Record types (with parameter list)",id:"record-types-with-parameter-list",level:3},{value:"Attribute-based configuration",id:"attribute-based-configuration",level:2},{value:"PlantUmlDiagramAttribute",id:"plantumldiagramattribute",level:3},{value:"PlantUmlIgnoreAttribute",id:"plantumlignoreattribute",level:3},{value:"PlantUmlAssociationAttribute",id:"plantumlassociationattribute",level:3},{value:"PlantUmlIgnoreAssociationAttribute",id:"plantumlignoreassociationattribute",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share PlantUmlClassDiagramGenerator",id:"share-plantumlclassdiagramgenerator",level:3},{value:"In the same category (EnhancementProject) - 17 other generators",id:"in-the-same-category-enhancementproject---17-other-generators",level:3},{value:"AutoInvoke.Generator",id:"autoinvokegenerator",level:4},{value:"AutoSpectre",id:"autospectre",level:4},{value:"BuildInfo",id:"buildinfo",level:4},{value:"CommandLine",id:"commandline",level:4},{value:"Credfeto.Version.Information.Generator",id:"credfetoversioninformationgenerator",level:4},{value:"Larcanum.GitInfo",id:"larcanumgitinfo",level:4},{value:"LinqGen.Generator",id:"linqgengenerator",level:4},{value:"Pekspro.BuildInformationGenerator",id:"peksprobuildinformationgenerator",level:4},{value:"RSCG_AMS",id:"rscg_ams",level:4},{value:"RSCG_ExportDiagram",id:"rscg_exportdiagram",level:4},{value:"RSCG_FunctionsWithDI",id:"rscg_functionswithdi",level:4},{value:"RSCG_NameGenerator",id:"rscg_namegenerator",level:4},{value:"RSCG_TimeBombComment",id:"rscg_timebombcomment",level:4},{value:"RSCG_Wait",id:"rscg_wait",level:4},{value:"ThisAssembly",id:"thisassembly",level:4},{value:"ThisAssembly.Constants",id:"thisassemblyconstants",level:4},{value:"ThisAssembly.Metadata",id:"thisassemblymetadata",level:4}];function g(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"plantumlclassdiagramgenerator--by-hirotada-kobayashi",children:"PlantUmlClassDiagramGenerator  by Hirotada Kobayashi"})}),"\n",(0,r.jsx)(c.A,{toc:m}),"\n",(0,r.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/PlantUmlClassDiagramGenerator.SourceGenerator?label=PlantUmlClassDiagramGenerator.SourceGenerator",alt:"Nuget"})}),(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/PlantUmlClassDiagramGenerator.Attributes?label=PlantUmlClassDiagramGenerator.Attributes",alt:"Nuget"})}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/",children:(0,r.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/pierre3/PlantUmlClassDiagramGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,r.jsx)(t.img,{src:"https://img.shields.io/github/stars/pierre3/PlantUmlClassDiagramGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,r.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["Name: ",(0,r.jsx)(t.strong,{children:"PlantUmlClassDiagramGenerator"})]}),(0,r.jsx)(t.p,{children:"This tool is designed to generate PlantUML class diagrams from C# source code. Leveraging SourceGenerator functionality, it analyzes the source code and produces PlantUML class diagrams."}),(0,r.jsx)(t.p,{children:"Author: Hirotada Kobayashi"}),(0,r.jsxs)(t.p,{children:["NuGet:\n",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/",children:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator/"})})]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/",children:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes/"})})}),(0,r.jsxs)(t.p,{children:["You can find more details at ",(0,r.jsx)(t.a,{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/",children:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/"})]}),(0,r.jsxs)(t.p,{children:["Source: ",(0,r.jsx)(t.a,{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/",children:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/"})]})]}),"\n",(0,r.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsx)("div",{align:"center",children:(0,r.jsxs)("strong",{children:[(0,r.jsx)("a",{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//README.md",children:"English"})," | ",(0,r.jsx)("a",{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//README.zh-CN.md",children:"\u7b80\u4f53\u4e2d\u6587"})]})}),(0,r.jsx)(t.h1,{id:"plantumlclassdiagramgenerator",children:"PlantUmlClassDiagramGenerator"}),(0,r.jsx)(t.p,{children:"This is a generator to create a class-diagram of PlantUML from the C# source code."}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"README.md Version revision history"})}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Version"}),(0,r.jsx)(t.th,{children:"Commit"}),(0,r.jsx)(t.th,{children:"Comment"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"1.1"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/commit/e73b4feed9cd261271eb990a9c859f53536e8d7c",children:"e73b4fe"})}),(0,r.jsx)(t.td,{children:'Add "-excludeUmlBeginEndTags" option'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"1.0"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator/commit/70bb8202f7f489aa2d85ce9c25c58121c8f63aed",children:"70bb820"})}),(0,r.jsx)(t.td,{children:"Because the README.md for other languages is not always updated at the same time, a version number is needed"})]})]})]}),(0,r.jsx)(t.h2,{id:"new-feature-in-development",children:"New Feature in Development"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//src/PlantUmlClassDiagramGenerator.SourceGenerator",children:"PlantUmlClassDiagramGenerator.SourceGenerator"})}),"\n"]}),(0,r.jsx)(t.p,{children:"This feature is currently in alpha testing phase. Please test it out and provide your feedback. We greatly appreciate it."}),(0,r.jsx)(t.h2,{id:"visual-studio-code-extension",children:"Visual Studio Code Extension"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=pierre3.csharp-to-plantuml",children:"C# to PlantUML"})}),"\n"]}),(0,r.jsx)(t.h2,{id:"net-core-global-tools",children:".Net Core global tools"}),(0,r.jsxs)(t.p,{children:["Nuget Gallery: ",(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator",children:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator"})]}),(0,r.jsx)(t.h3,{id:"installation",children:"Installation"}),(0,r.jsxs)(t.p,{children:["Download and install the ",(0,r.jsx)(t.a,{href:"https://www.microsoft.com/net/download/windows",children:".NET 8.0 SDK"})," or newer. Once installed, run the following command."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bat",children:"dotnet tool install --global PlantUmlClassDiagramGenerator\n"})}),(0,r.jsx)(t.h3,{id:"usage",children:"Usage"}),(0,r.jsx)(t.p,{children:'Run the "puml-gen" command.'}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bat",children:"puml-gen InputPath [OutputPath] [-dir] [-public | -ignore IgnoreAccessibilities] [-excludePaths ExcludePathList] [-createAssociation]\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"InputPath: (Required) Sets a input source file or directory name."}),"\n",(0,r.jsxs)(t.li,{children:["OutputPath: (Optional) Sets a output file or directory name.",(0,r.jsx)(t.br,{}),"\n","If you omit this option, plantuml files are outputted to same directory as the input files."]}),"\n",(0,r.jsx)(t.li,{children:"-dir: (Optional) Specify when InputPath and OutputPath are directory names."}),"\n",(0,r.jsx)(t.li,{children:"-public: (Optional) If specified, only public accessibility members are output."}),"\n",(0,r.jsx)(t.li,{children:"-ignore: (Optional) Specify the accessibility of members to ignore, with a comma separated list."}),"\n",(0,r.jsxs)(t.li,{children:["-excludePaths: (Optional) Specify the exclude file and directory.",(0,r.jsx)(t.br,{}),"\n",'Specifies a relative path from the "InputPath", with a comma separated list.\nTo exclude multiple paths, which contain a specific folder name, preceed the name by "**/". Example: "**/bin"']}),"\n",(0,r.jsx)(t.li,{children:"-createAssociation: (Optional) Create object associations from references of fields and properites."}),"\n",(0,r.jsx)(t.li,{children:"-allInOne: (Optional) Only if -dir is set: copy the output of all diagrams to file include.puml (this allows a PlanUMLServer to render it)."}),"\n",(0,r.jsx)(t.li,{children:'-attributeRequired: (Optional) When this switch is enabled, only types with "PlantUmlDiagramAttribute" in the type declaration will be output.'}),"\n",(0,r.jsx)(t.li,{children:'-excludeUmlBeginEndTags: (Optional) When this switch is enabled, it will exclude the "@startuml" and "@enduml" tags from the puml file.'}),"\n"]}),(0,r.jsx)(t.p,{children:"examples"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bat",children:"puml-gen C:\\Source\\App1\\ClassA.cs -public\n"})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bat",children:"puml-gen C:\\Source\\App1 C:\\PlantUml\\App1 -dir -ignore Private,Protected -createAssociation -allInOne\n"})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bat",children:"puml-gen C:\\Source\\App1 C:\\PlantUml\\App1 -dir -excludePaths bin,obj,Properties\n"})}),(0,r.jsx)(t.h2,{id:"specification-for-conversion-to-plantuml",children:"Specification for conversion to PlantUML"}),(0,r.jsx)(t.h3,{id:"type-declaration",children:"Type Declaration"}),(0,r.jsx)(t.h4,{id:"type-keywords",children:"Type Keywords"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"C#"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"PlantUML"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"class"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"class"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"struct"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"struct"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"interface"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"interface"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"enum"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"enum"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"record"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<record>> class"})})]})]})]}),(0,r.jsx)(t.h4,{id:"type-modifiers",children:"Type Modifiers"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"C#"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"PlantUML"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"abstract"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"abstract"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"static"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<static>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"partial"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<partial>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"sealed"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<sealed>>"})})]})]})]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"class ClassA {  \n}\nstruct StructA {\n}\ninterface InterfaceA {\n}\nrecord RecordA {\n}\nabstract class AbstractClass {\n}\nstatic class StaticClass {\n}\nsealed partial class ClassB{\n}\nenum EnumType{\n  Apple,\n  Orange,\n  Grape\n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"@startuml\nclass ClassA {\n}\nstruct StructA {\n}\ninterface InterfaceA {\n}\nclass RecordA <<record>> {\n}\nabstract class AbstractClass {\n}\nclass StaticClass <<static>> {\n}\nclass ClassB <<sealed>> <<partial>> {\n}\nenum EnumType {\n    Apple,\n    Orange,\n    Grape,\n}\n@enduml\n"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/TypeDeclaration.png",alt:"TypeDeclaration.png"})}),(0,r.jsx)(t.h4,{id:"generics-type",children:"Generics Type"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"class GenericsType<T1>{\n}\nclass GenericsType<T1,T2>{\n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'class "GenericsType`1"<T1>{\n}\nclass "GenericsType`2"<T1,T2>{\n}\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/GenericsTypeDeclaration.png",alt:"GenericsTypeDeclaration.png"})}),(0,r.jsx)(t.h3,{id:"member-declaration",children:"Member Declaration"}),(0,r.jsx)(t.h4,{id:"accessibility-modifiers",children:"Accessibility Modifiers"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"C#"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"PlantUML"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"public"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"+"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"internal"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<internal>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"protected internal"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"# <<internal>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"protected"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"#"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"private"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"-"})})]})]})]}),(0,r.jsx)(t.h4,{id:"modifiers",children:"Modifiers"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"C#"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"PlantUML"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"abstract"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"{abstract}"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"static"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"{static}"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"virtual"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<virtual>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"override"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<override>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"new"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<new>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"readonly"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<readonly>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"event"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"<<event>>"})})]})]})]}),(0,r.jsx)(t.h4,{id:"property-accessors",children:"Property Accessors"}),(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"C#"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"PlantUML"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"int Prop {get; set;}"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"Prop : int <<get>> <<set>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"int Prop {get;}"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"Prop : int <get>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"int Prop {get; private set }"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"Prop : int <<get>><<private set>>"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"int Prop => 100;"})}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:(0,r.jsx)(t.code,{children:"Prop : int <<get>>"})})]})]})]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:'abstract class AbstractClass\n{\n    protected int _x;\n    internal int _y;\n    protected internal int _z;\n    public abstract void AbstractMethod();\n    protected virtual void VirtualMethod(string s){\n\n    }\n    public string BaseMethod(int n){\n        return "";\n    }\n}\nclass ClassM : AbstractClass\n{\n    public static readonly double PI =3.141592;\n    public int PropA { get; set; }\n    public int PropB { get; protected set; }\n    public event EventHandler SomeEvent;\n    public override void AbstractMethod(){\n        \n    }\n    protected override void VirtualMethod(string s)\n    {\n\n    }\n    public override string ToString()\n    {\n        return "override";\n    }\n    public new string BaseMethod(int n){\n        return "new";\n    }\n}\n'})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"abstract class AbstractClass {\n    # _x : int\n    <<internal>> _y : int\n    # <<internal>> _z : int\n    + {abstract} AbstractMethod() : void\n    # <<virtual>> VirtualMethod(s:string) : void\n    + BaseMethod(n:int) : string\n}\nclass ClassM {\n    + {static} <<readonly>> PI : double = 3.141592\n    + PropA : int <<get>> <<set>>\n    + PropB : int <<get>> <<protected set>>\n    +  <<event>> SomeEvent : EventHandler \n    + <<override>> AbstractMethod() : void\n    # <<override>> VirtualMethod(s:string) : void\n    + <<override>> ToString() : string\n    + <<new>> BaseMethod(n:int) : string\n}\nAbstractClass <|-- ClassM\n"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/MemberDeclaration.png",alt:"MemberDeclaration.png"})}),(0,r.jsx)(t.h4,{id:"field-and-property-initializers",children:"Field and Property Initializers"}),(0,r.jsxs)(t.p,{children:["Only ",(0,r.jsx)(t.strong,{children:"literal"})," initializers are output."]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"class ClassC\n{\n    private int fieldA = 123;\n    public double Pi {get;} = 3.14159;\n    protected List<string> Items = new List<string>(); \n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"class ClassC {\n  - fieldA : int = 123\n  + Pi : double = 3.14159\n  # Items : List<string>\n}\n"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/Initializer.png",alt:"Initializer.png"})}),(0,r.jsx)(t.h3,{id:"nested-class-declaration",children:"Nested Class Declaration"}),(0,r.jsx)(t.p,{children:'Nested classes are expanded and associated with "OuterClass + - InnerClass".'}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"class OuterClass \n{\n  class InnerClass \n  {\n    struct InnerStruct \n    {\n\n    }\n  }\n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"class OuterClass{\n\n}\nclass InnerClass{\n\n}\n<<struct>> class InnerStruct {\n\n}\nOuterClass +- InnerClass\nInnerClass +- InnerStruct\n"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/NestedClass.png",alt:"NestedClass.png"})}),(0,r.jsx)(t.h3,{id:"inheritance-relationsips",children:"Inheritance Relationsips"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"abstract class BaseClass\n{\n    public abstract void AbstractMethod();\n    protected virtual int VirtualMethod(string s) => 0;\n}\nclass SubClass : BaseClass\n{\n    public override void AbstractMethod() { }\n    protected override int VirtualMethod(string s) => 1;\n}\n\ninterface IInterfaceA {}\ninterface IInterfaceA<T>:IInterfaceA\n{\n    T Value { get; }\n}\nclass ImplementClass : IInterfaceA<int>\n{\n    public int Value { get; }\n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'abstract class BaseClass {\n    + {abstract} AbstractMethod() : void\n    # <<virtual>> VirtualMethod(s:string) : int\n}\nclass SubClass {\n    + <<override>> AbstractMethod() : void\n    # <<override>> VirtualMethod(s:string) : int\n}\ninterface IInterfaceA {\n}\ninterface "IInterfaceA`1"<T> {\n    Value : T <<get>>\n}\nclass ImplementClass {\n    + Value : int <<get>>\n}\nBaseClass <|-- SubClass\nIInterfaceA <|-- "IInterfaceA`1"\n"IInterfaceA`1" "<int>" <|-- ImplementClass\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/InheritanceRelationsips.png",alt:"InheritanceRelationsips.png"})}),(0,r.jsx)(t.h3,{id:"associations-from-references-of-fields-and-properties",children:"Associations (from references of fields and properties)"}),(0,r.jsx)(t.p,{children:'If you specify the "createAssociation" option, object associations is created from field and property references.'}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"class ClassA{\n    public IList<string> Strings{get;} = new List<string>();\n    public Type1 Prop1{get;set;}\n    public Type2 field1;\n}\n\nclass Type1 {\n    public int value1{get;set;}\n}\n\nclass Type2{\n    public string string1{get;set;}\n    public ExternalType Prop2 {get;set;}\n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'@startuml\nclass ClassA {\n}\nclass Type1 {\n    + value1 : int <<get>> <<set>>\n}\nclass Type2 {\n    + string1 : string <<get>> <<set>>\n}\nclass "IList`1"<T> {\n}\nClassA o-> "Strings<string>" "IList`1"\nClassA --\x3e "Prop1" Type1\nClassA --\x3e "field1" Type2\nType2 --\x3e "Prop2" ExternalType\n@enduml\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/Associations.png",alt:"InheritanceRelationsips.png"})}),(0,r.jsx)(t.h3,{id:"record-types-with-parameter-list",children:"Record types (with parameter list)"}),(0,r.jsx)(t.p,{children:"Record types in C# 9 can have a parameter list. In these cases these parameters\nare added as properties to the class."}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"C#"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"record Person(string Name, int Age);\n\nrecord Group(string GroupName) {\n    public Person[] Members { get; init; }\n}\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PlantUML"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"@startuml\nclass Person <<record>> {\n    + Name : string <<get>> <<init>>\n    + Age : int <<get>> <<init>>\n}\nclass Group <<record>> {\n    + GroupName : string <<get>> <<init>>\n    + Members : Person[] <<get>> <<init>>\n}\n@enduml\n"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/RecordParameterList.png",alt:"InheritanceRelationsips.png"})}),(0,r.jsx)(t.h2,{id:"attribute-based-configuration",children:"Attribute-based configuration"}),(0,r.jsxs)(t.p,{children:["You can add the package ",(0,r.jsx)(t.a,{href:"https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.Attributes",children:"PlantUmlClassDiagramGenerator.Attributes"})," to your C# project for attribute-based configuration."]}),(0,r.jsx)(t.h3,{id:"plantumldiagramattribute",children:"PlantUmlDiagramAttribute"}),(0,r.jsx)(t.p,{children:"Only types to which PlantUmlDiagramAttribute has been added will be output.\nThis attribute is enabled if the -attributeRequired switch is added to the command line argument."}),(0,r.jsx)(t.p,{children:"This attribute can be added only to type declalerations."}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"class"}),"\n",(0,r.jsx)(t.li,{children:"struct"}),"\n",(0,r.jsx)(t.li,{children:"enum"}),"\n",(0,r.jsx)(t.li,{children:"record"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"class ClassA\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n[PlantUmlDiagram]\nclass ClassB\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n"})}),(0,r.jsx)(t.p,{children:"Only ClassB with PlantUmlDiagramAttribute will be output."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"@startuml\nclass ClassB {\n    + Name : string <<get>> <<set>>\n    + Age : int <<get>> <<set>>\n}\n@enduml\n"})}),(0,r.jsx)(t.h3,{id:"plantumlignoreattribute",children:"PlantUmlIgnoreAttribute"}),(0,r.jsx)(t.p,{children:"Elements with this attribute added are excluded from the output."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"[PlantUmlIgnore]\nclass ClassA\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nclass ClassB\n{\n    public string Name { get; set; }\n    [PlantUmlIgnore]\n    public int Age { get; set; }\n}\n\nclass ClassC\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    [PlantUmlIgnore]\n    public ClassC(string name, int age) => (Name, Age) = (name, age);\n    \n    public void MethodA();\n    \n    [PlantUmlIgnore]\n    public void MethodB();\n}\n"})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"@startuml\nclass ClassB {\n    + Name : string\n}\nclass ClassC {\n    + Name : string\n    + Age : int\n    + MethodA() : void\n}\n@enduml\n"})}),(0,r.jsx)(t.h3,{id:"plantumlassociationattribute",children:"PlantUmlAssociationAttribute"}),(0,r.jsx)(t.p,{children:"By adding this attribute, you can define association between classes.\nThis attribute can be added to properties, fields and method parameters."}),(0,r.jsx)(t.p,{children:"The details of the association are defined in the following properties."}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.em,{children:"Name"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Specifies the type name on the leaf node side."}),"\n",(0,r.jsx)(t.li,{children:"If omitted, the name of the element to which the attribute is added is used."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.em,{children:"Association"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Specifies the edge portion of the association.Sets a valid string in PlantUML."}),"\n",(0,r.jsx)(t.li,{children:'If omitted, "--" is used.'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.em,{children:"RootLabel"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Specifies the label to be displayed on the root node side."}),"\n",(0,r.jsx)(t.li,{children:"If omitted, nothing is displayed."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.em,{children:"Label"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Specifies the label to be displayed in the center of the edge."}),"\n",(0,r.jsx)(t.li,{children:"If omitted, nothing is displayed."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.em,{children:"LeafLabel"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Specifies the label to be displayed on the leaf node side."}),"\n",(0,r.jsx)(t.li,{children:"If omitted, nothing is displayed."}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:'class Parameters\n{\n    public string A { get; set; }\n    public string B { get; set; }\n}\n\nclass CustomAssociationSample\n{\n    [PlantUmlAssociation(Name = "Name", Association = "*--\x3e", LeafLabel = "LeafLabel", Label= "Label", RootLabel = "RootLabel")] \n    public ClassA A { get; set; }\n}\n\nclass CollectionItemsSample\n{\n    [PlantUmlAssociation(Name = "Item", Association = "o--", LeafLabel = "0..*", Label = "Items")]\n    public IList<Item> Items { get; set; }\n}\n\nclass MethodParamtersSample\n{\n    public void Run([PlantUmlAssociation(Association = "..>", Label = "use")] Parameters p)\n    {\n        Console.WriteLine($"{p.A},{p.B}");\n    }\n\n    private ILogger logger;\n    public MyClass([PlantUmlAssociation(Association = "..>", Label = "Injection")] ILogger logger)\n    {\n        this.logger = logger;\n    }\n}\n'})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'@startuml\nclass Parameters {\n    + A : string <<get>> <<set>>\n    + B : string <<get>> <<set>>\n}\nclass CustomAssociationSample {\n}\nclass CollectionItemsSample {\n}\nclass MethodParamtersSample {\n    + Run(p:Parameters) : void\n    + MyClass(logger:ILogger)\n}\nCustomAssociationSample "RootLabel" *--\x3e "LeafLabel" Name : "Label"\nCollectionItemsSample o-- "0..*" Item : "Items"\nMethodParamtersSample ..> Parameters : "use"\nMethodParamtersSample ..> ILogger : "Injection"\n@enduml\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/CustomAssociation.png",alt:"CustomAssociation.png"})}),(0,r.jsx)(t.h3,{id:"plantumlignoreassociationattribute",children:"PlantUmlIgnoreAssociationAttribute"}),(0,r.jsx)(t.p,{children:"This attribute can be added to properties and fields.\nProperties (or fields) with this attribute are described as members of the class without any association."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:'class User\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nclass ClassA\n{\n    public static User DefaultUser { get; }\n    public IList<User> Users { get; }\n\n    public ClassA(IList<User> users)\n    {\n        Users = users;\n        DefaultUser = new User()\n        {\n            Name = "DefaultUser",\n            Age = "20"\n        };\n    }\n}\n\nclass ClassB\n{\n    [PlantUmlIgnoreAssociation]\n    public static User DefaultUser { get; }\n\n    [PlantUmlIgnoreAssociation]\n    public IList<User> Users { get; }\n\n    public ClassB(IList<User> users)\n    {\n        Users = users;\n        DefaultUser = new User()\n        {\n            Name = "DefaultUser",\n            Age = "20"\n        };\n    }\n}\n'})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'@startuml\nclass User {\n    + Name : string <<get>> <<set>>\n    + Age : int <<get>> <<set>>\n}\nclass ClassA {\n    + ClassA(users:IList<User>)\n}\nclass ClassB {\n    + {static} DefaultUser : User <<get>>\n    + Users : IList<User> <<get>>\n    + ClassB(users:IList<User>)\n}\nclass "IList`1"<T> {\n}\nClassA --\x3e "DefaultUser" User\nClassA --\x3e "Users<User>" "IList`1"\n@enduml\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/pierre3/PlantUmlClassDiagramGenerator//uml/IgnoreAssociation.png",alt:"IgnoreAssociation.png"})})]}),"\n",(0,r.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"Generating UML from class definitions"})}),"\n",(0,r.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,r.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,r.jsx)(t.strong,{children:"PlantUmlClassDiagramGenerator"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {12}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    \x3c!--<PackageReference Include="PlantUmlClassDiagramGenerator.Attributes" Version="1.3.0.1" />--\x3e\n    <PackageReference Include="PlantUmlClassDiagramGenerator.SourceGenerator" Version="0.1.9-alpha">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n\n\t<PropertyGroup>\n\t\x3c!--<PropertyGroup Condition="\'$(Configuration)|$(Platform)\'==\'Release|AnyCPU\'">--\x3e\n\t\t<DefineConstants>$(DefineConstants);GENERATE_PLANTUML</DefineConstants>\n\t</PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t\n\t\n\t\n</Project>\n\n'})})]}),(0,r.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\Program.cs",label:"Program.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"PlantUmlClassDiagramGenerator"})," in ",(0,r.jsx)(t.em,{children:"Program.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing DemoClass2Text;\n\nPerson person = new()\n{\n    FirstName = "Andrei",\n    LastName = "Ignat"\n};\nConsole.WriteLine(person.FullName());\n\n'})})]}),(0,r.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\Person.cs",label:"Person.cs",children:[(0,r.jsxs)(t.p,{children:["This is the use of ",(0,r.jsx)(t.strong,{children:"PlantUmlClassDiagramGenerator"})," in ",(0,r.jsx)(t.em,{children:"Person.cs"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nnamespace DemoClass2Text\n{\n    [PlantUmlClassDiagramGenerator.SourceGenerator.Attributes.PlantUmlDiagram]\n    internal class Person\n    {\n        public string? FirstName { get; set; }\n        public string? LastName { get; set; }\n        public string? FullName() => $"{FirstName} {LastName}";\n    }\n}\n'})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,r.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\obj\\GX\\PlantUmlClassDiagramGenerator.SourceGenerator\\PlantUmlClassDiagramGenerator.SourceGenerator.PlantUmlSourceGenerator\\Attributes.cs",label:"Attributes.cs",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace PlantUmlClassDiagramGenerator.SourceGenerator.Attributes;\n\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Enum | System.AttributeTargets.Struct)]\ninternal class PlantUmlDiagramAttribute : System.Attribute\n{ }\n"})})}),(0,r.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\PlantUmlClassDiagramGenerator\\src\\DemoClass2Text\\DemoClass2Text\\generated-uml\\Person.puml",label:"Person.puml",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"@startuml Person\nclass Person  {\n    + FirstName : string? <<get>> <<set>>\n    + LastName : string? <<get>> <<set>>\n    + FullName() : string?\n    + Person()\n}\n@enduml\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,r.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(56365).A+"",children:"Download Example project PlantUmlClassDiagramGenerator "})})}),"\n",(0,r.jsx)(t.h3,{id:"share-plantumlclassdiagramgenerator",children:"Share PlantUmlClassDiagramGenerator"}),"\n",(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&quote=PlantUmlClassDiagramGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&text=PlantUmlClassDiagramGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&title=PlantUmlClassDiagramGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator&title=PlantUmlClassDiagramGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FPlantUmlClassDiagramGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/PlantUmlClassDiagramGenerator"})}),"\n",(0,r.jsx)(t.h3,{id:"in-the-same-category-enhancementproject---17-other-generators",children:"In the same category (EnhancementProject) - 17 other generators"}),"\n",(0,r.jsx)(t.h4,{id:"autoinvokegenerator",children:(0,r.jsx)(t.a,{href:"/docs/AutoInvoke.Generator",children:"AutoInvoke.Generator"})}),"\n",(0,r.jsx)(t.h4,{id:"autospectre",children:(0,r.jsx)(t.a,{href:"/docs/AutoSpectre",children:"AutoSpectre"})}),"\n",(0,r.jsx)(t.h4,{id:"buildinfo",children:(0,r.jsx)(t.a,{href:"/docs/BuildInfo",children:"BuildInfo"})}),"\n",(0,r.jsx)(t.h4,{id:"commandline",children:(0,r.jsx)(t.a,{href:"/docs/CommandLine",children:"CommandLine"})}),"\n",(0,r.jsx)(t.h4,{id:"credfetoversioninformationgenerator",children:(0,r.jsx)(t.a,{href:"/docs/Credfeto.Version.Information.Generator",children:"Credfeto.Version.Information.Generator"})}),"\n",(0,r.jsx)(t.h4,{id:"larcanumgitinfo",children:(0,r.jsx)(t.a,{href:"/docs/Larcanum.GitInfo",children:"Larcanum.GitInfo"})}),"\n",(0,r.jsx)(t.h4,{id:"linqgengenerator",children:(0,r.jsx)(t.a,{href:"/docs/LinqGen.Generator",children:"LinqGen.Generator"})}),"\n",(0,r.jsx)(t.h4,{id:"peksprobuildinformationgenerator",children:(0,r.jsx)(t.a,{href:"/docs/Pekspro.BuildInformationGenerator",children:"Pekspro.BuildInformationGenerator"})}),"\n",(0,r.jsx)(t.h4,{id:"rscg_ams",children:(0,r.jsx)(t.a,{href:"/docs/RSCG_AMS",children:"RSCG_AMS"})}),"\n",(0,r.jsx)(t.h4,{id:"rscg_exportdiagram",children:(0,r.jsx)(t.a,{href:"/docs/RSCG_ExportDiagram",children:"RSCG_ExportDiagram"})}),"\n",(0,r.jsx)(t.h4,{id:"rscg_functionswithdi",children:(0,r.jsx)(t.a,{href:"/docs/RSCG_FunctionsWithDI",children:"RSCG_FunctionsWithDI"})}),"\n",(0,r.jsx)(t.h4,{id:"rscg_namegenerator",children:(0,r.jsx)(t.a,{href:"/docs/RSCG_NameGenerator",children:"RSCG_NameGenerator"})}),"\n",(0,r.jsx)(t.h4,{id:"rscg_timebombcomment",children:(0,r.jsx)(t.a,{href:"/docs/RSCG_TimeBombComment",children:"RSCG_TimeBombComment"})}),"\n",(0,r.jsx)(t.h4,{id:"rscg_wait",children:(0,r.jsx)(t.a,{href:"/docs/RSCG_Wait",children:"RSCG_Wait"})}),"\n",(0,r.jsx)(t.h4,{id:"thisassembly",children:(0,r.jsx)(t.a,{href:"/docs/ThisAssembly",children:"ThisAssembly"})}),"\n",(0,r.jsx)(t.h4,{id:"thisassemblyconstants",children:(0,r.jsx)(t.a,{href:"/docs/ThisAssembly.Constants",children:"ThisAssembly.Constants"})}),"\n",(0,r.jsx)(t.h4,{id:"thisassemblymetadata",children:(0,r.jsx)(t.a,{href:"/docs/ThisAssembly.Metadata",children:"ThisAssembly.Metadata"})})]})}function x(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},56365:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/files/PlantUmlClassDiagramGenerator-cb96388fadc35aad5a867b075c756c5f.zip"}}]);