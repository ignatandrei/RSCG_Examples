"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[3039],{3774:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"RSCG-Examples/Datacute.EmbeddedResourcePropertyGenerator","title":"166 - Datacute.EmbeddedResourcePropertyGenerator","description":"Generating class to access easy the embedded resource","source":"@site/docs/RSCG-Examples/Datacute.EmbeddedResourcePropertyGenerator.md","sourceDirName":"RSCG-Examples","slug":"/Datacute.EmbeddedResourcePropertyGenerator","permalink":"/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Datacute.EmbeddedResourcePropertyGenerator.md","tags":[],"version":"current","sidebarPosition":1660,"frontMatter":{"sidebar_position":1660,"title":"166 - Datacute.EmbeddedResourcePropertyGenerator","description":"Generating class to access easy the embedded resource","slug":"/Datacute.EmbeddedResourcePropertyGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"165 - rscg_queryables","permalink":"/RSCG_Examples/v2/docs/rscg_queryables"},"next":{"title":"167 - polytype","permalink":"/RSCG_Examples/v2/docs/polytype"}}');var n=r(74848),a=r(28453),d=r(11470),o=r(19365),i=r(14252);const l={sidebar_position:1660,title:"166 - Datacute.EmbeddedResourcePropertyGenerator",description:"Generating class to access easy the embedded resource",slug:"/Datacute.EmbeddedResourcePropertyGenerator"},c="Datacute.EmbeddedResourcePropertyGenerator  by Stephen Denne",u={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Why not just use a resx file?",id:"why-not-just-use-a-resx-file",level:2},{value:"What&#39;s wrong with just using Assembly.GetManifestResourceStream?",id:"whats-wrong-with-just-using-assemblygetmanifestresourcestream",level:2},{value:"Usage",id:"usage",level:2},{value:"Localisation and External Overrides",id:"localisation-and-external-overrides",level:2},{value:"Non-text File Types",id:"non-text-file-types",level:2},{value:"Extending the Behaviour",id:"extending-the-behaviour",level:2},{value:"Partial methods:",id:"partial-methods",level:3},{value:"Thanks",id:"thanks",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Datacute.EmbeddedResourcePropertyGenerator",id:"share-datacuteembeddedresourcepropertygenerator",level:3},{value:"In the same category (FilesToCode) - 13 other generators",id:"in-the-same-category-filestocode---13-other-generators",level:3},{value:"Chorn.EmbeddedResourceAccessGenerator",id:"chornembeddedresourceaccessgenerator",level:4},{value:"corecraft",id:"corecraft",level:4},{value:"DotnetYang",id:"dotnetyang",level:4},{value:"EmbedResourceCSharp",id:"embedresourcecsharp",level:4},{value:"LingoGen",id:"lingogen",level:4},{value:"NotNotAppSettings",id:"notnotappsettings",level:4},{value:"Podimo.ConstEmbed",id:"podimoconstembed",level:4},{value:"ResXGenerator",id:"resxgenerator",level:4},{value:"RSCG_JSON2Class",id:"rscg_json2class",level:4},{value:"RSCG_Utils",id:"rscg_utils",level:4},{value:"ThisAssembly_Resources",id:"thisassembly_resources",level:4},{value:"ThisAssembly.Strings",id:"thisassemblystrings",level:4},{value:"Weave",id:"weave",level:4}];function m(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"datacuteembeddedresourcepropertygenerator--by-stephen-denne",children:"Datacute.EmbeddedResourcePropertyGenerator  by Stephen Denne"})}),"\n",(0,n.jsx)(i.A,{toc:h}),"\n",(0,n.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://www.nuget.org/packages/Datacute.EmbeddedResourcePropertyGenerator/",children:(0,n.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/Datacute.EmbeddedResourcePropertyGenerator?label=Datacute.EmbeddedResourcePropertyGenerator",alt:"Nuget"})}),"\n",(0,n.jsx)(t.a,{href:"https://github.com/datacute/EmbeddedResourcePropertyGenerator/",children:(0,n.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/datacute/EmbeddedResourcePropertyGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,n.jsx)(t.img,{src:"https://img.shields.io/github/stars/datacute/EmbeddedResourcePropertyGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,n.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,n.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,n.jsxs)(t.admonition,{type:"info",children:[(0,n.jsxs)(t.p,{children:["Name: ",(0,n.jsx)(t.strong,{children:"Datacute.EmbeddedResourcePropertyGenerator"})]}),(0,n.jsx)(t.p,{children:"This project generates properties for embedded resources in a project."}),(0,n.jsx)(t.p,{children:"Author: Stephen Denne"}),(0,n.jsxs)(t.p,{children:["NuGet:\n",(0,n.jsx)(t.em,{children:(0,n.jsx)(t.a,{href:"https://www.nuget.org/packages/Datacute.EmbeddedResourcePropertyGenerator/",children:"https://www.nuget.org/packages/Datacute.EmbeddedResourcePropertyGenerator/"})})]}),(0,n.jsxs)(t.p,{children:["You can find more details at ",(0,n.jsx)(t.a,{href:"https://github.com/datacute/EmbeddedResourcePropertyGenerator/",children:"https://github.com/datacute/EmbeddedResourcePropertyGenerator/"})]}),(0,n.jsxs)(t.p,{children:["Source: ",(0,n.jsx)(t.a,{href:"https://github.com/datacute/EmbeddedResourcePropertyGenerator/",children:"https://github.com/datacute/EmbeddedResourcePropertyGenerator/"})]})]}),"\n",(0,n.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,n.jsxs)(t.admonition,{type:"note",children:[(0,n.jsx)(t.h1,{id:"embedded-resource-property-generator",children:"Embedded Resource Property Generator"}),(0,n.jsx)(t.p,{children:"The Embedded Resource Property Generator is a Source Generator\nwhich generates properties for text file embedded resources in a\nproject, in a similar way to how properties are generated from the string\nresources in .resx files."}),(0,n.jsxs)(t.p,{children:["By adding the ",(0,n.jsx)(t.code,{children:"[EmbeddedResourceProperties]"})," attribute to a partial class,\nand specifying the filename extension and folder path to search, the\nsource generator will add a property to the class for each matching\nembedded resource file. Accessing the property will return the text\ncontent of the embedded resource file."]}),(0,n.jsx)(t.h2,{id:"why-not-just-use-a-resx-file",children:"Why not just use a resx file?"}),(0,n.jsx)(t.p,{children:"The use case for this project is when you have a large number of text\nfiles that you want to embed in your project, such as SQL queries, and you\nwish to  develop these files with an external editor that supports syntax\nhighlighting, execution, debugging, and other features."}),(0,n.jsx)(t.p,{children:"While resx files do support including files, doing so requires either\nthe use of another custom editor, or manipulating the xml of the resx\nfile directly."}),(0,n.jsx)(t.h2,{id:"whats-wrong-with-just-using-assemblygetmanifestresourcestream",children:"What's wrong with just using Assembly.GetManifestResourceStream?"}),(0,n.jsx)(t.p,{children:"The purpose of providing properties to access the text, is to aid the\ndeveloper by generating doc-comments for the properties, showing the first\nfew lines of the file."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:"/// <summary>Text value of the Embedded Resource: GoodIndenting.cypher</summary>\n/// <value>\n/// <code>\n/// MERGE (n)\n///   ON CREATE SET n.prop = 0\n/// MERGE (a:A)-[:T]-(b:B)\n///   ON CREATE SET a.name = 'me'\n///   ON MATCH SET b.name = 'you'\n/// RETURN a.prop\n/// </code>\n/// </value>\n/// <remarks>\n/// The value is read from the embedded resource on first access.\n/// </remarks>\npublic static string GoodIndenting => \n  // Generated code to read the resource \"Namespace.ClassName.GoodIndenting.cypher\";\n"})}),(0,n.jsx)(t.p,{children:"The full names of the embedded resources are also generated, and no longer\nneed to be supplied by the developer, making it easy to move the location\nof the resource files to another directory, without needing to find and\nfix all the references to the resource names."}),(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a reference to the ",(0,n.jsx)(t.code,{children:"EmbeddedResourcePropertyGenerator"})," project."]}),"\n",(0,n.jsxs)(t.li,{children:["Add the following section to your .csproj file, to include all\nEmbeddedResource files as Additional Files for the source generators:","\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:"  <PropertyGroup>\n    <AdditionalFileItemNames>$(AdditionalFileItemNames);EmbeddedResource</AdditionalFileItemNames>\n  </PropertyGroup>\n"})}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Add a directory to your project to group the files you want to embed."}),"\n",(0,n.jsxs)(t.li,{children:["Add text files to your project, in that directory, and set their Build\nAction to ",(0,n.jsx)(t.code,{children:"EmbeddedResource"}),".","\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"> SqlQueries\n    SelectAll.sql\n    SelectById.sql\nProgram.cs\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <ItemGroup>\n    <EmbeddedResource Include="SqlQueries\\SelectAll.sql" />\n    <EmbeddedResource Include="SqlQueries\\SelectById.sql"/>\n  </ItemGroup>\n'})}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Add a partial class to your code."}),"\n",(0,n.jsx)(t.li,{children:"Include a using statement to the namespace of the code generator."}),"\n",(0,n.jsxs)(t.li,{children:["Put the attribute ",(0,n.jsx)(t.code,{children:"[EmbeddedResourcePropertyGenerator]"})," on the class."]}),"\n",(0,n.jsx)(t.li,{children:"Specify the extension and folder path to search for embedded resources."}),"\n",(0,n.jsxs)(t.li,{children:["Use the properties generated on the partial class.","\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using Datacute.EmbeddedResourcePropertyGenerator;\n\n[EmbeddedResourceProperties(".sql", "SqlQueries")]\npublic static partial class SqlQuery;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(SqlQuery.SelectAll);\n    }\n}\n'})}),"\n"]}),"\n"]}),(0,n.jsx)(t.h2,{id:"localisation-and-external-overrides",children:"Localisation and External Overrides"}),(0,n.jsx)(t.p,{children:"Localisation and External Overrides are not supported. If you need these\nfeatures, consider using a resx file instead."}),(0,n.jsx)(t.h2,{id:"non-text-file-types",children:"Non-text File Types"}),(0,n.jsx)(t.p,{children:"This project expects text files so that it can generate properties that\nare strings. It currently expects UTF-8 encoded files."}),(0,n.jsxs)(t.p,{children:["If you need to embed other types of files, use the\n",(0,n.jsx)(t.code,{children:"Assembly.GetManifestResourceStream"})," method directly."]}),(0,n.jsx)(t.h2,{id:"extending-the-behaviour",children:"Extending the Behaviour"}),(0,n.jsxs)(t.p,{children:["The generated code includes a private nested class ",(0,n.jsx)(t.code,{children:"EmbeddedResource"})," containing:"]}),(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Method or Class"}),(0,n.jsx)(t.th,{children:"Purpose"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Read(string resourceName)"})}),(0,n.jsx)(t.td,{children:"Method for reading embedded resources"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"BackingField"})}),(0,n.jsx)(t.td,{children:"Nested class caching the property values"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"ResourceName"})}),(0,n.jsx)(t.td,{children:"Nested class holding the resource names"})]})]})]}),(0,n.jsxs)(t.p,{children:["The implementation supports including two ",(0,n.jsx)(t.em,{children:(0,n.jsx)(t.strong,{children:"partial methods"})})," that can\nbe implemented in the same partial class as the generated properties."]}),(0,n.jsx)(t.p,{children:"If the partial methods are not implemented, the calls to them are removed,\nand the code effectively reduces to:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:"public static string Example =>\n        EmbeddedResource.BackingField.Example ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Example);\n"})}),(0,n.jsx)(t.h3,{id:"partial-methods",children:"Partial methods:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"ReadEmbeddedResourceValue"})," - This method is called to allow the class\nto override how the value representing the content of the embedded\nresource is obtained. If the ",(0,n.jsx)(t.code,{children:"backingField"})," parameter is null when this\nmethod ends, the default implementation will be used."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"AlterEmbeddedResourceReturnValue"})," - This method is called after the\ntext content has been read, and can be used to modify the text content\nbefore it is returned. Altering the returned value does not affect the\nvalue stored in the backing field."]}),"\n"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'    [EmbeddedResourceProperties(".sql", "SqlQueries")]\n    public static partial class SqlQuery\n    {\n        static partial void ReadEmbeddedResourceValue(\n            ref string? backingField, \n            string resourceName, \n            string propertyName)\n        {\n            // This method is called before the default implementation.\n\n            // The default implementation only reads the resource\n            // if the backingField is null, so by setting it in this method,\n            // the default implementation can be bypassed.\n\n            // The backingField is a reference to a static field\n            // for the property, and will be null for the first call,\n            // but will retain the value for subsequent calls\n            // for the same property.\n\n            // Use custom logic to read the text content given the names\n            // of the resource, and of the property.\n            backingField ??= CustomReader(resourceName, propertyName);\n        }\n\n        static partial void AlterEmbeddedResourceReturnValue(\n            ref string value,\n            string resourceName,\n            string propertyName);\n        {\n            // The value parameter is a reference to a variable that \n            // will be returned as the value of the property.\n            \n            // Implement custom logic to alter the value.\n            value = CustomValueAlteringMethod(value, resourceName, propertyName);\n        }\n    }\n'})}),(0,n.jsx)(t.p,{children:"This is an example of the code generated for a property, showing how the partial methods are called:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'/// <summary>Text value of the Embedded Resource: Example.txt</summary>\n/// <value>\n/// <code>\n/// This is the content of the Example.txt file.\n/// Only the first few lines are shown here.\n/// </code>\n/// </value>\n/// <remarks>\n/// The value is read from the embedded resource on first access.\n/// </remarks>\npublic static string Example\n{\n    get\n    {\n        ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Example, EmbeddedResource.ResourceName.Example, "Example");\n        var value = EmbeddedResource.BackingField.Example ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Example);\n        AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Example, "Example");\n        return value;\n    }\n}\n'})}),(0,n.jsx)(t.h2,{id:"thanks",children:"Thanks"}),(0,n.jsxs)(t.p,{children:["Thanks to Andrew Lock for his Series: ",(0,n.jsx)(t.a,{href:"https://andrewlock.net/series/creating-a-source-generator/",children:"Creating a source generator"}),"."]}),(0,n.jsx)(t.h2,{id:"future-enhancements",children:"Future Enhancements"}),(0,n.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,n.jsxs)(t.li,{className:"task-list-item",children:[(0,n.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Add an option to leave out the Read method.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["It is now included in the generated code for each class,\nbut an implementation of the ",(0,n.jsx)(t.code,{children:"ReadEmbeddedResourceValue"})," partial\nmethod might make it unnecessary."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{className:"task-list-item",children:[(0,n.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Support for alternative text encodings.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Overriding ",(0,n.jsx)(t.code,{children:"ReadEmbeddedResourceValue"})," is a technique that can be\nused to read the text content of the embedded resource with a\ndifferent encoding, but the doc-comment will still be generated\nexpecting UTF-8."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{className:"task-list-item",children:[(0,n.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Support for specifying the number of lines to include in the\ndoc-comment (including zero to exclude the code section).","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"This is currently set to 10 lines."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{className:"task-list-item",children:[(0,n.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Support generating text formatting methods.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Call ",(0,n.jsx)(t.code,{children:"CompositeFormat.Parse"})," on the loaded text, and additionally count\nthe number of format items, and generate a method that takes the\nsame number of arguments."]}),"\n",(0,n.jsx)(t.li,{children:"Using a resx file is probably a better fit that adding this feature."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{className:"task-list-item",children:[(0,n.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Support generating ",(0,n.jsx)(t.code,{children:"ReadOnlySpan<byte>"})," properties instead of ",(0,n.jsx)(t.code,{children:"string"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"The decoding from utf-8 may not be needed."}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,n.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"Generating class to access easy the embedded resource"})}),"\n",(0,n.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,n.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,n.jsxs)(d.A,{children:[(0,n.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,n.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,n.jsx)(t.strong,{children:"Datacute.EmbeddedResourcePropertyGenerator"})]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  \n  <ItemGroup>\n    <EmbeddedResource Include="TestData\\Countries.txt" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Datacute.EmbeddedResourcePropertyGenerator" Version="1.0.0" >\n    </PackageReference>\n  </ItemGroup>\n\t<PropertyGroup>\n\t\t<AdditionalFileItemNames>$(AdditionalFileItemNames);EmbeddedResource</AdditionalFileItemNames>\n\t</PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,n.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Datacute.EmbeddedResourcePropertyGenerator\\src\\EmbedDemo\\Program.cs",label:"Program.cs",children:[(0,n.jsxs)(t.p,{children:["This is the use of ",(0,n.jsx)(t.strong,{children:"Datacute.EmbeddedResourcePropertyGenerator"})," in ",(0,n.jsx)(t.em,{children:"Program.cs"})]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// See https://aka.ms/new-console-template for more information\nusing EmbedDemo;\n\nConsole.WriteLine("Hello, World!");\n\nvar data= TestData.Countries;\n\nConsole.WriteLine(data);\n'})})]}),(0,n.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Datacute.EmbeddedResourcePropertyGenerator\\src\\EmbedDemo\\TestData.cs",label:"TestData.cs",children:[(0,n.jsxs)(t.p,{children:["This is the use of ",(0,n.jsx)(t.strong,{children:"Datacute.EmbeddedResourcePropertyGenerator"})," in ",(0,n.jsx)(t.em,{children:"TestData.cs"})]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Datacute.EmbeddedResourcePropertyGenerator;\nnamespace EmbedDemo;\n[EmbeddedResourceProperties(".txt", "TestData")]\npublic static partial class TestData;\n\n'})})]}),(0,n.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Datacute.EmbeddedResourcePropertyGenerator\\src\\EmbedDemo\\TestData\\Countries.txt",label:"Countries.txt",children:[(0,n.jsxs)(t.p,{children:["This is the use of ",(0,n.jsx)(t.strong,{children:"Datacute.EmbeddedResourcePropertyGenerator"})," in ",(0,n.jsx)(t.em,{children:"Countries.txt"})]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"USA\nGermany\nFrance\nRomania\nItaly\n\n"})})]})]}),"\n",(0,n.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,n.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,n.jsx)(d.A,{children:(0,n.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Datacute.EmbeddedResourcePropertyGenerator\\src\\EmbedDemo\\obj\\GX\\Datacute.EmbeddedResourcePropertyGenerator\\Datacute.EmbeddedResourcePropertyGenerator.Generator\\EmbedDemo.TestData.g.cs",label:"EmbedDemo.TestData.g.cs",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n#nullable enable\n\nnamespace EmbedDemo;\n/// <summary>\n/// This class\'s properties are generated from project files meeting the criteria:\n/// <list type="bullet">\n/// <item>\n/// <description>they are both an <c>EmbeddedResource</c> and an <c>AdditionalFile</c></description>\n/// </item>\n/// <item>\n/// <description>they are in the project folder <c>TestData</c></description>\n/// </item>\n/// <item>\n/// <description>they have the extension <c>.txt</c></description>\n/// </item>\n/// </list>\n/// </summary>\npublic static partial class TestData\n{\n    private static class EmbeddedResource\n    {\n        public static string Read(string resourceName)\n        {\n            var assembly = typeof(TestData).Assembly;\n            using var stream = assembly.GetManifestResourceStream(resourceName)!;\n            using var streamReader = new global::System.IO.StreamReader(stream, global::System.Text.Encoding.UTF8);\n            var resourceText = streamReader.ReadToEnd();\n            return resourceText;\n        }\n        public static class BackingField\n        {\n            public static string? Countries;\n        }\n        public static class ResourceName\n        {\n            public const string Countries = "EmbedDemo.TestData.Countries.txt";\n        }\n    }\n    static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName);\n    static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName);\n\n    /// <summary>Text value of the Embedded Resource: Countries.txt</summary>\n    /// <value>\n    /// <code>\n    /// USA\n    /// Germany\n    /// France\n    /// Romania\n    /// Italy\n    /// \n    /// </code>\n    /// </value>\n    /// <remarks>\n    /// The value is read from the embedded resource on first access.\n    /// </remarks>\n    public static string Countries\n    {\n        get\n        {\n            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Countries, EmbeddedResource.ResourceName.Countries, "Countries");\n            var value = EmbeddedResource.BackingField.Countries ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Countries);\n            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Countries, "Countries");\n            return value;\n        }\n    }\n}\n\n'})})})}),"\n",(0,n.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,n.jsx)(t.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(67923).A+"",children:"Download Example project Datacute.EmbeddedResourcePropertyGenerator "})})}),"\n",(0,n.jsx)(t.h3,{id:"share-datacuteembeddedresourcepropertygenerator",children:"Share Datacute.EmbeddedResourcePropertyGenerator"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDatacute.EmbeddedResourcePropertyGenerator&quote=Datacute.EmbeddedResourcePropertyGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDatacute.EmbeddedResourcePropertyGenerator&text=Datacute.EmbeddedResourcePropertyGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDatacute.EmbeddedResourcePropertyGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDatacute.EmbeddedResourcePropertyGenerator&title=Datacute.EmbeddedResourcePropertyGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDatacute.EmbeddedResourcePropertyGenerator&title=Datacute.EmbeddedResourcePropertyGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDatacute.EmbeddedResourcePropertyGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Datacute.EmbeddedResourcePropertyGenerator"})}),"\n",(0,n.jsx)(t.h3,{id:"in-the-same-category-filestocode---13-other-generators",children:"In the same category (FilesToCode) - 13 other generators"}),"\n",(0,n.jsx)(t.h4,{id:"chornembeddedresourceaccessgenerator",children:(0,n.jsx)(t.a,{href:"/docs/Chorn.EmbeddedResourceAccessGenerator",children:"Chorn.EmbeddedResourceAccessGenerator"})}),"\n",(0,n.jsx)(t.h4,{id:"corecraft",children:(0,n.jsx)(t.a,{href:"/docs/corecraft",children:"corecraft"})}),"\n",(0,n.jsx)(t.h4,{id:"dotnetyang",children:(0,n.jsx)(t.a,{href:"/docs/DotnetYang",children:"DotnetYang"})}),"\n",(0,n.jsx)(t.h4,{id:"embedresourcecsharp",children:(0,n.jsx)(t.a,{href:"/docs/EmbedResourceCSharp",children:"EmbedResourceCSharp"})}),"\n",(0,n.jsx)(t.h4,{id:"lingogen",children:(0,n.jsx)(t.a,{href:"/docs/LingoGen",children:"LingoGen"})}),"\n",(0,n.jsx)(t.h4,{id:"notnotappsettings",children:(0,n.jsx)(t.a,{href:"/docs/NotNotAppSettings",children:"NotNotAppSettings"})}),"\n",(0,n.jsx)(t.h4,{id:"podimoconstembed",children:(0,n.jsx)(t.a,{href:"/docs/Podimo.ConstEmbed",children:"Podimo.ConstEmbed"})}),"\n",(0,n.jsx)(t.h4,{id:"resxgenerator",children:(0,n.jsx)(t.a,{href:"/docs/ResXGenerator",children:"ResXGenerator"})}),"\n",(0,n.jsx)(t.h4,{id:"rscg_json2class",children:(0,n.jsx)(t.a,{href:"/docs/RSCG_JSON2Class",children:"RSCG_JSON2Class"})}),"\n",(0,n.jsx)(t.h4,{id:"rscg_utils",children:(0,n.jsx)(t.a,{href:"/docs/RSCG_Utils",children:"RSCG_Utils"})}),"\n",(0,n.jsx)(t.h4,{id:"thisassembly_resources",children:(0,n.jsx)(t.a,{href:"/docs/ThisAssembly_Resources",children:"ThisAssembly_Resources"})}),"\n",(0,n.jsx)(t.h4,{id:"thisassemblystrings",children:(0,n.jsx)(t.a,{href:"/docs/ThisAssembly.Strings",children:"ThisAssembly.Strings"})}),"\n",(0,n.jsx)(t.h4,{id:"weave",children:(0,n.jsx)(t.a,{href:"/docs/Weave",children:"Weave"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},67923:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/files/Datacute.EmbeddedResourcePropertyGenerator-76e5620e56c75ff67875c6955dfde84c.zip"}}]);