"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[8593],{49209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"RSCG-Examples/Gedaq","title":"29 - Gedaq","description":"Generating code from attribute query","source":"@site/docs/RSCG-Examples/Gedaq.md","sourceDirName":"RSCG-Examples","slug":"/Gedaq","permalink":"/RSCG_Examples/v2/docs/Gedaq","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RSCG-Examples/Gedaq.md","tags":[],"version":"current","sidebarPosition":290,"frontMatter":{"sidebar_position":290,"title":"29 - Gedaq","description":"Generating code from attribute query","slug":"/Gedaq"},"sidebar":"tutorialSidebar","previous":{"title":"28 - Lombok.NET","permalink":"/RSCG_Examples/v2/docs/Lombok.NET"},"next":{"title":"30 - Refit","permalink":"/RSCG_Examples/v2/docs/Refit"}}');var s=t(74848),r=t(28453),i=t(11470),l=t(19365),o=t(14252);const d={sidebar_position:290,title:"29 - Gedaq",description:"Generating code from attribute query",slug:"/Gedaq"},c="Gedaq  by Vyacheslav Brevnov",m={},p=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:".NET 7 Benchmark:",id:"net-7-benchmark",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Gedaq",id:"share-gedaq",level:3},{value:"In the same category (Database) - 4 other generators",id:"in-the-same-category-database---4-other-generators",level:3},{value:"Breezy",id:"breezy",level:4},{value:"Dapper.AOT",id:"dapperaot",level:4},{value:"EntityLengths.Generator",id:"entitylengthsgenerator",level:4},{value:"TableStorage",id:"tablestorage",level:4}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gedaq--by-vyacheslav-brevnov",children:"Gedaq  by Vyacheslav Brevnov"})}),"\n",(0,s.jsx)(o.A,{toc:p}),"\n",(0,s.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Gedaq/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Gedaq?label=Gedaq",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/SoftStoneDevelop/Gedaq?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/SoftStoneDevelop/Gedaq?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Name: ",(0,s.jsx)(n.strong,{children:"Gedaq"})]}),(0,s.jsx)(n.p,{children:"ORM Gedaq is roslyn generator of methods for obtaining data from databases."}),(0,s.jsx)(n.p,{children:"Author: Vyacheslav Brevnov"}),(0,s.jsxs)(n.p,{children:["NuGet:\n",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Gedaq/",children:"https://www.nuget.org/packages/Gedaq/"})})]}),(0,s.jsxs)(n.p,{children:["You can find more details at ",(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq",children:"https://github.com/SoftStoneDevelop/Gedaq"})]}),(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq",children:"https://github.com/SoftStoneDevelop/Gedaq"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)("h1",{align:"center",children:(0,s.jsx)("a",{children:"Gedaq"})}),(0,s.jsx)("h1",{align:"center",children:(0,s.jsx)("a",{href:"https://discord.gg/xsR5EYU4ZM",children:(0,s.jsx)("img",{height:"30px",src:"https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white"})})}),(0,s.jsx)("h3",{align:"center",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Gedaq/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/v/Gedaq?logo=Gedaq",alt:"Nuget"})}),"\n",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Gedaq/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/Gedaq.svg",alt:"Downloads"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq/stargazers",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/SoftStoneDevelop/Gedaq?color=brightgreen",alt:"Stars"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq/LICENSE",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/license-MIT-blue.svg",alt:"License"})})]})}),(0,s.jsx)(n.p,{children:"Generator for obtaining and mapping data from the database.\nGenerates methods (synchronous and/or asynchronous):"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Creating a Command for a query"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Method of setting parameters in a Command"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Command execution, with data mapping"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Creating a QueryBatch Command"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Setting parameters in a QueryBatch Command"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Get data from a batch Command"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Receiving data from a batch of queries, with data mapping"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Getting data based on a query, with data mapping"}),"\n"]}),"\n"]}),(0,s.jsx)(n.p,{children:"There are versions for all of these methods (if possible):"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query"}),"\n",(0,s.jsx)(n.li,{children:"NonQuery"}),"\n",(0,s.jsx)(n.li,{children:"\u0415ecuteScalar (return type is determined automatically at the generation stage)"}),"\n"]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:"It also generates methods specific to each provider, such as BinaryImport and BinaryExport in PostgreSQL."}),(0,s.jsxs)(n.p,{children:["Supported databases(see examples and documentation in the relevant DB package):",(0,s.jsx)("br",{})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq.Npgsql",children:"Npgsql"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq.DbConnection",children:"DbConnection"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq.SqlClient",children:"SqlClient"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq.MySqlConnector",children:"MySqlConnector"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq/issues/6",children:"Oracle.ManagedDataAccess.Core"})}),"\n"]}),(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:"Usage:"}),(0,s.jsx)(n.p,{children:"For example, we have a Person class:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-C#",children:"\npublic class Person\n{\n    public int Id { get; set; }\n\n    public string FirstName { get; set; }\n\n    public string MiddleName { get; set; }\n\n    public string LastName { get; set; }\n    \n    public Identification Identification { get; set; }\n}\n\npublic class Identification\n{\n    public int Id { get; set; }\n    public string TypeName { get; set; }\n}\n\n"})}),(0,s.jsx)(n.p,{children:"We just mark anywhere in the code with a special attribute (class, structure, method) that tells the analyzer to generate the code.\nLet's mark the Person class itself with an attribute:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-C#",children:'\n[Query(\n            @"\nSELECT \n    p.id,\n    p.firstname,\n~StartInner::Identification:id~\n    i.id,\n    i.typename,\n~EndInner::Identification~\n    p.middlename,\n    p.lastname\nFROM person p\nLEFT JOIN identification i ON i.id = p.identification_id\nWHERE p.id > $1\n",\n        "GetAllPerson",\n        typeof(Person),\n        MethodType.Sync | MethodType.Async\n        ),\n        Parametr(parametrType: typeof(int), position: 1)\n        ]\npublic class Person\n//...\n\n'})}),(0,s.jsx)(n.p,{children:"Now in the code we can call the ready method:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-C#",children:"\nvar persons = \n        connection\n        .GetAllPerson(49999)\n        .ToList();\n        \nvar personsAsync = \n        await connection\n        .GetAllPersonAsync(49999)\n        .ToListAsync();\n\n"})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SoftStoneDevelop/Gedaq.Npgsql/blob/main/Src/NpgsqlBenchmark/Benchmarks/CompareDapper.cs",children:"Comparison"})," with ",(0,s.jsx)(n.a,{href:"https://github.com/DapperLib/Dapper",children:"Dapper"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/DapperLib/DapperAOT",children:"DapperAOT"})," of getting 50000 Person in a loop(Size is number of loop iterations) from the database:"]}),(0,s.jsx)(n.h2,{id:"net-7-benchmark",children:".NET 7 Benchmark:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{style:{textAlign:"right"},children:"Mean"}),(0,s.jsx)(n.th,{style:{textAlign:"right"},children:"Ratio"}),(0,s.jsx)(n.th,{style:{textAlign:"right"},children:"Allocated"}),(0,s.jsx)(n.th,{style:{textAlign:"right"},children:"Alloc Ratio"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Gedaq.Npgsql"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"10"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"445.5 ms"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1.00"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"132.09 MB"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1.00"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Dapper"}),(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"749.2 ms"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.68"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"150.41 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.14"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DapperAOT"}),(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"777.5 ms"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.75"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"150.4 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.14"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{style:{textAlign:"right"}}),(0,s.jsx)(n.td,{style:{textAlign:"right"}}),(0,s.jsx)(n.td,{style:{textAlign:"right"}}),(0,s.jsx)(n.td,{style:{textAlign:"right"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Gedaq.Npgsql"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"20"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"901.9 ms"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1.00"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"264.17 MB"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1.00"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Dapper"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1,510.0 ms"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.68"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"300.81 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.14"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DapperAOT"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1,505.3 ms"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.67"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"300.81 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.14"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{style:{textAlign:"right"}}),(0,s.jsx)(n.td,{style:{textAlign:"right"}}),(0,s.jsx)(n.td,{style:{textAlign:"right"}}),(0,s.jsx)(n.td,{style:{textAlign:"right"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Gedaq.Npgsql"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"30"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1,366.2 ms"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1.00"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"396.28 MB"})}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:(0,s.jsx)(n.strong,{children:"1.00"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Dapper"}),(0,s.jsx)(n.td,{children:"30"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"2,276.7 ms"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.67"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"451.22 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.14"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DapperAOT"}),(0,s.jsx)(n.td,{children:"30"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"2,279.6 ms"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.67"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"451.22 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"1.14"})]})]})]}),(0,s.jsx)(n.p,{children:"But with Gedaq, we can prepare the command in advance."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-C#",children:"\nvar personsCmd = connection.CreateGetAllPersonCommand(prepare: true);\npersonsCmd.SetGetAllPersonParametrs(49999);\nvar persons = personsCmd.ExecuteGetAllPersonCommand().ToList();\n\n//or\n\nvar personsCmd = await connection.CreateGetAllPersonCommandAsync(prepare: true);\npersonsCmd.SetGetAllPersonParametrs(49999);\nvar persons = await personsCmd.ExecuteGetAllPersonCommandAsync().ToListAsync();\n\n\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Generating code from attribute query"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(l.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(n.strong,{children:"Gedaq"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {12}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\t<PropertyGroup>\n\t\t<OutputType>Exe</OutputType>\n\t\t<TargetFramework>net7.0</TargetFramework>\n\t\t<ImplicitUsings>enable</ImplicitUsings>\n\t</PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="Gedaq" Version="1.5.0" OutputItemType="Analyzer" ReferenceOutputAssembly="True" />\n\t  <PackageReference Include="Gedaq.Npgsql" Version="1.2.6" />\n\t</ItemGroup>\n</Project>\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Model\\Person.cs",label:"Person.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"Person.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace GedaqDemoConsole.Model\n{\n    public class Person\n    {\n        public int Id { get; set; }\n\n        public string FirstName { get; set; }\n\n        public string MiddleName { get; set; }\n\n        public string LastName { get; set; }\n\n        public Address Address { get; set; }\n    }\n}\n"})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Model\\Address.cs",label:"Address.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"Address.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"namespace GedaqDemoConsole.Model\n{\n    public class Address\n    {\n        public int Id { get; set; }\n\n        public string Street { get; set; }\n\n        public string City { get; set; }\n    }\n}\n"})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Example1\\ExampleRun.cs",label:"ExampleRun.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"ExampleRun.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using GedaqDemoConsole.Model;\nusing Npgsql;\n\nnamespace GedaqDemoConsole.Example1\n{\n    internal class ExampleRun\n    {\n        public static async Task Run()\n        {\n            var repository = new PersonRepository();\n\n            await using (var connection = new NpgsqlConnection("you connection string"))\n            {\n                IEnumerable<Person> list = repository.GetPerson(\n                    connection: connection, \n                    person_id: 1\n                    );\n\n                IAsyncEnumerable<Person> listAsync = repository.GetPersonAsync(\n                    connection: connection, \n                    person_id: 1\n                    );\n            }\n        }\n    }\n}\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Example1\\PersonRepository.cs",label:"PersonRepository.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"PersonRepository.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Gedaq.Common.Enums;\nusing GedaqDemoConsole.Model;\n\nnamespace GedaqDemoConsole.Example1\n{\n    public partial class PersonRepository\n    {\n        [Gedaq.Npgsql.Attributes.Query(\n            query: @"\nSELECT \n    p.id,\n    p.firstname,\n~StartInner::Address:Id~\n    a.id,\n    a.street,\n    a.city\n~EndInner::Address~\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n",\n            methodName: "GetPerson",\n            queryMapType: typeof(Person),\n            methodType: MethodType.Sync | MethodType.Async\n            ),\n            Gedaq.Npgsql.Attributes.Parametr(typeof(int), position: 1, methodParametrName: "person_id")\n            ]\n        private void GetPersonConfig()\n        {\n        }\n    }\n}\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Example2\\ExampleRun.cs",label:"ExampleRun.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"ExampleRun.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using GedaqDemoConsole.Model;\nusing Npgsql;\n\nnamespace GedaqDemoConsole.Example2\n{\n    internal class ExampleRun\n    {\n        public static async Task Run()\n        {\n            var repository = new PersonRepository2();\n\n            await using (var connection = new NpgsqlConnection("you connection string"))\n            {\n                IEnumerable<IEnumerable<Person>> list = repository.BatchPersons(\n                    connection: connection, \n                    person_idBatch1: 1, \n                    person_idBatch2: 2\n                    );\n\n                IAsyncEnumerable<IAsyncEnumerable<Person>> listAsync = repository.BatchPersonsAsync(\n                    connection: connection, \n                    person_idBatch1: 1, \n                    person_idBatch2: 2\n                    );\n            }\n        }\n    }\n}\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Example2\\PersonRepository.cs",label:"PersonRepository.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"PersonRepository.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Gedaq.Common.Enums;\nusing GedaqDemoConsole.Model;\n\nnamespace GedaqDemoConsole.Example2\n{\n    public partial class PersonRepository2\n    {\n        [Gedaq.Npgsql.Attributes.Query(\n            query: @"\nSELECT \n    p.id,\n    p.firstname,\n~StartInner::Address:Id~\n    a.id,\n    a.street,\n    a.city\n~EndInner::Address~\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n",\n            methodName: "GetPersonById",\n            queryMapType: typeof(Person),\n            methodType: MethodType.Sync | MethodType.Async,\n            accessModifier: AccessModifier.Private,\n            generate: false\n            ),\n            Gedaq.Npgsql.Attributes.Parametr(typeof(int), position: 1, methodParametrName: "person_id")\n            ]\n        private void GetPersonConfig()\n        {\n        }\n\n        [Gedaq.Npgsql.Attributes.QueryBatch(\n            batchName: "BatchPersons",\n            queryType: QueryType.Read,\n            methodType: MethodType.Sync | MethodType.Async\n            ),\n            Gedaq.Npgsql.Attributes.BatchPart("GetPersonById", 1),\n            Gedaq.Npgsql.Attributes.BatchPart("GetPersonById", 2)\n            ]\n        private void BatchPersonsConfig()\n        {\n        }\n    }\n}\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Example3\\ExampleRun.cs",label:"ExampleRun.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"ExampleRun.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using GedaqDemoConsole.Model;\nusing Npgsql;\n\nnamespace GedaqDemoConsole.Example3\n{\n    internal class ExampleRun\n    {\n        public static async Task Run()\n        {\n            var repository = new PersonRepository3();\n            var queryRepository = (IQueryPersonRepository)repository;\n            var commandRepository = (ICommandPersonRepository)repository;\n\n            await using (var connection = new NpgsqlConnection("you connection string"))\n            {\n                IEnumerable<Person> list = queryRepository.GetPersons(connection: connection);\n                IAsyncEnumerable<Person> listAsync = queryRepository.GetPersonsAsync(connection: connection);\n\n                commandRepository.AddPersons(connection: connection, id: 1, firstname: "name1");\n                await commandRepository.AddPersonsAsync(connection: connection, id: 2, firstname: "name2");\n            }\n        }\n    }\n}\n'})})]}),(0,s.jsxs)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\Example3\\PersonRepository.cs",label:"PersonRepository.cs",children:[(0,s.jsxs)(n.p,{children:["This is the use of ",(0,s.jsx)(n.strong,{children:"Gedaq"})," in ",(0,s.jsx)(n.em,{children:"PersonRepository.cs"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using Gedaq.Common.Enums;\nusing GedaqDemoConsole.Model;\n\nnamespace GedaqDemoConsole.Example3\n{\n    public partial interface IPersonRepository : IQueryPersonRepository, ICommandPersonRepository\n    {\n    }\n\n    public partial interface IQueryPersonRepository\n    {\n    }\n\n    public partial interface ICommandPersonRepository\n    {\n    }\n\n    public partial class PersonRepository3 : IPersonRepository\n    {\n        [Gedaq.Npgsql.Attributes.Query(\n            query: @"\nSELECT \n    p.id,\n    p.firstname,\n~StartInner::Address:Id~\n    a.id,\n    a.street,\n    a.city\n~EndInner::Address~\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\n",\n            methodName: "GetPersons",\n            queryMapType: typeof(Person),\n            methodType: MethodType.Sync | MethodType.Async,\n            accessModifier: AccessModifier.Public,\n            asPartInterface: typeof(IQueryPersonRepository)\n            )\n            ]\n        private void GetPersonsConfig()\n        {\n        }\n\n        [Gedaq.Npgsql.Attributes.Query(\n            query: @"\nINSERT INTO person(\n\tid,\n    firstname\n)\nVALUES (\n    $1,\n    $2\n)\n",\n            methodName: "AddPersons",\n            queryMapType: typeof(Person),\n            methodType: MethodType.Sync | MethodType.Async,\n            accessModifier: AccessModifier.Public,\n            queryType: QueryType.NonQuery,\n            asPartInterface: typeof(ICommandPersonRepository)\n            ),\n            Gedaq.Npgsql.Attributes.Parametr(typeof(int), position: 1, methodParametrName: "id"),\n            Gedaq.Npgsql.Attributes.Parametr(typeof(string), position: 2, methodParametrName: "firstname")\n            ]\n        private void AddPersonsConfig()\n        {\n        }\n    }\n}\n'})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\obj\\GX\\Gedaq\\Gedaq.Gedaq\\PersonRepository2BatchPersonsNpgsql.g.cs",label:"PersonRepository2BatchPersonsNpgsql.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing Npgsql;\nusing System;\nusing System.Data;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Runtime.CompilerServices;\n\nnamespace GedaqDemoConsole.Example2\n{\n    public  partial class PersonRepository2\n    {\n        \n        public  IEnumerable<IEnumerable<GedaqDemoConsole.Model.Person>> BatchPersons(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 person_idBatch1,\n            System.Int32 person_idBatch2,\n            int? timeout = null\n            )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                connection.Open();\n            }\n            NpgsqlBatch batch = null;\n            NpgsqlDataReader reader = null;\n            try\n            {\n                batch = \n                CreateBatchPersonsBatch(connection\n                , false)\n                ;\n                SetBatchPersonsParametrs(\n                    batch,\n                    person_idBatch1,\n                    person_idBatch2,\n                    timeout\n                    );\n                reader = batch.ExecuteReader();\n                yield return BatchItem0(reader);\n                reader.NextResult();\n                yield return BatchItem1(reader);\n                reader.NextResult();\n                reader.Dispose();\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            batch.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    reader.Dispose();\n                }\n                if (needClose)\n                {\n                    connection.Close();\n                }\n                if(batch != null)\n                {\n                    batch.BatchCommands.Clear();\n                    batch.Dispose();\n                }\n            }\n        }\n        \n        public  async IAsyncEnumerable<IAsyncEnumerable<GedaqDemoConsole.Model.Person>> BatchPersonsAsync(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 person_idBatch1,\n            System.Int32 person_idBatch2,\n            int? timeout = null,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n            )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                await connection.OpenAsync(cancellationToken).ConfigureAwait(false);\n            }\n            NpgsqlBatch batch = null;\n            NpgsqlDataReader reader = null;\n            try\n            {\n                batch = \n                await CreateBatchPersonsBatchAsync(connection\n                , false, cancellationToken)\n                ;\n                SetBatchPersonsParametrs(\n                    batch,\n                    person_idBatch1,\n                    person_idBatch2,\n                    timeout\n                    );\n                reader = await batch.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);\n                yield return BatchItem0Async(reader, cancellationToken);\n                await reader.NextResultAsync(cancellationToken).ConfigureAwait(false);\n                yield return BatchItem1Async(reader, cancellationToken);\n                await reader.NextResultAsync(cancellationToken).ConfigureAwait(false);\n                await reader.DisposeAsync().ConfigureAwait(false);\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            batch.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    await reader.DisposeAsync().ConfigureAwait(false);\n                }\n                if (needClose)\n                {\n                    await connection.CloseAsync().ConfigureAwait(false);\n                }\n                if(batch != null)\n                {\n                    batch.BatchCommands.Clear();\n                    await batch.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        private static async IAsyncEnumerable<GedaqDemoConsole.Model.Person> BatchItem0Async(\n            NpgsqlDataReader reader,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n            )\n        {\n            while(await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n            {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n            }\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        private static async IAsyncEnumerable<GedaqDemoConsole.Model.Person> BatchItem1Async(\n            NpgsqlDataReader reader,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n            )\n        {\n            while(await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n            {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n            }\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        private static IEnumerable<GedaqDemoConsole.Model.Person> BatchItem0(NpgsqlDataReader reader)\n        {\n            while(reader.Read())\n            {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n            }\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        private static IEnumerable<GedaqDemoConsole.Model.Person> BatchItem1(NpgsqlDataReader reader)\n        {\n            while(reader.Read())\n            {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n            }\n        }\n\n        public  NpgsqlBatch CreateBatchPersonsBatch(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false\n            )\n        {\n            var batch = connection.CreateBatch();\n            var command = batch.CreateBatchCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n\n";\n            {\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            }\n            batch.BatchCommands.Add(command);\n            command = batch.CreateBatchCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n\n";\n            {\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            }\n            batch.BatchCommands.Add(command);\n            if(prepare)\n            {\n                try\n                {\n                    batch.Prepare();\n                }\n                catch\n                {\n                    batch.Dispose();\n                    throw;\n                }\n            }\n            return batch;\n        }\n\n        public  async ValueTask<NpgsqlBatch> CreateBatchPersonsBatchAsync(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false,\n            CancellationToken cancellationToken = default\n            )\n        {\n            var batch = connection.CreateBatch();\n            var command = batch.CreateBatchCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n\n";\n            {\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            }\n            batch.BatchCommands.Add(command);\n            command = batch.CreateBatchCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n\n";\n            {\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            }\n            batch.BatchCommands.Add(command);\n            if(prepare)\n            {\n                try\n                {\n                    await batch.PrepareAsync(cancellationToken).ConfigureAwait(false);\n                }\n                catch\n                {  \n                    await batch.DisposeAsync().ConfigureAwait(false);\n                    throw;\n                }\n            }\n            return batch;\n        }\n\n        public  void SetBatchPersonsParametrs(\n            NpgsqlBatch batch,\n            System.Int32 person_idBatch1,\n            System.Int32 person_idBatch2,\n            int? timeout = null\n            )\n        {\n\n            if(timeout.HasValue)\n            {\n                batch.Timeout = timeout.Value;\n            }\n            var batchCommand = batch.BatchCommands[0];\n            ((NpgsqlParameter<System.Int32>)batchCommand.Parameters[0]).TypedValue = person_idBatch1;\n            batchCommand = batch.BatchCommands[1];\n            ((NpgsqlParameter<System.Int32>)batchCommand.Parameters[0]).TypedValue = person_idBatch2;\n        }\n\n        public  IEnumerable<IEnumerable<GedaqDemoConsole.Model.Person>> ExecuteBatchPersonsBatch(\n            NpgsqlBatch batch\n            )\n        {\n            NpgsqlDataReader reader = null;\n            try\n            {\n                reader = batch.ExecuteReader();\n                yield return BatchItem0(reader);\n                reader.NextResult();\n                yield return BatchItem1(reader);\n                reader.NextResult();\n                reader.Dispose();\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            batch.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    reader.Dispose();\n                }\n            }\n        }\n\n        public  async IAsyncEnumerable<IAsyncEnumerable<GedaqDemoConsole.Model.Person>> ExecuteBatchPersonsBatchAsync(\n            NpgsqlBatch batch,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n            )\n        {\n            NpgsqlDataReader reader = null;\n            try\n            {\n                reader = await batch.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);\n                yield return BatchItem0Async(reader, cancellationToken);\n                await reader.NextResultAsync(cancellationToken).ConfigureAwait(false);\n                yield return BatchItem1Async(reader, cancellationToken);\n                await reader.NextResultAsync(cancellationToken).ConfigureAwait(false);\n                await reader.DisposeAsync().ConfigureAwait(false);\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            batch.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    await reader.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n    }\n}\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\obj\\GX\\Gedaq\\Gedaq.Gedaq\\PersonRepository3AddPersonsICommandPersonRepository.g.cs",label:"PersonRepository3AddPersonsICommandPersonRepository.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing Npgsql;\nusing System;\nusing System.Data;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Runtime.CompilerServices;\n\nnamespace GedaqDemoConsole.Example3\n{\n    public partial interface ICommandPersonRepository\n    {\n        \n        public  System.Int32 AddPersons(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 id,\n            System.String firstname,\n            int? timeout = null\n        );\n        \n        public  ValueTask<System.Int32> AddPersonsAsync(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 id,\n            System.String firstname,\n            int? timeout = null,\n            CancellationToken cancellationToken = default\n        );\n\n        public  NpgsqlCommand CreateAddPersonsCommand(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false\n        );\n\n        public  ValueTask<NpgsqlCommand> CreateAddPersonsCommandAsync(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false,\n            CancellationToken cancellationToken = default\n        );\n\n        public  void SetAddPersonsParametrs(\n            NpgsqlCommand command,\n            System.Int32 id,\n            System.String firstname,\n            int? timeout = null\n            );\n\n    }\n}\n\n"})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\obj\\GX\\Gedaq\\Gedaq.Gedaq\\PersonRepository3AddPersonsNpgsql.g.cs",label:"PersonRepository3AddPersonsNpgsql.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing Npgsql;\nusing System;\nusing System.Data;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Runtime.CompilerServices;\n\nnamespace GedaqDemoConsole.Example3\n{\n    public  partial class PersonRepository3\n    {\n        \n        public  System.Int32 AddPersons(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 id,\n            System.String firstname,\n            int? timeout = null\n        )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                connection.Open();\n            }\n            NpgsqlCommand command = null;\n            try\n            {\n                command =\n                CreateAddPersonsCommand(connection\n                , false)\n                ;\n                SetAddPersonsParametrs(\n                    command,\n                    id,\n                    firstname,\n                    timeout\n                    );\n                var result = (System.Int32)command.ExecuteNonQuery();\n                return result;\n            }\n            finally\n            {\n                if (needClose)\n                {\n                    connection.Close();\n                }\n                if(command != null)\n                {\n                    command.Parameters.Clear();\n                    command.Dispose();\n                }\n            }\n        }\n        \n        public  async ValueTask<System.Int32> AddPersonsAsync(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 id,\n            System.String firstname,\n            int? timeout = null,\n            CancellationToken cancellationToken = default\n        )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                await connection.OpenAsync(cancellationToken).ConfigureAwait(false);\n            }\n            NpgsqlCommand command = null;\n            try\n            {\n                command =\n                await CreateAddPersonsCommandAsync(connection\n                , false, cancellationToken)\n                ;\n                SetAddPersonsParametrs(\n                    command,\n                    id,\n                    firstname,\n                    timeout\n                    );\n                var result = (System.Int32)await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);\n                return result;\n            }\n            finally\n            {\n                if (needClose)\n                {\n                    await connection.CloseAsync().ConfigureAwait(false);\n                }\n                if(command != null)\n                {\n                    command.Parameters.Clear();\n                    await command.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n        public  NpgsqlCommand CreateAddPersonsCommand(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false\n        )\n        {\n            var command = connection.CreateCommand();\n            command.CommandText = @"\n\nINSERT INTO person(\n\tid,\n    firstname\n)\nVALUES (\n    $1,\n    $2\n)\n\n"\n;\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n                {\n                var parametr = new NpgsqlParameter<System.String>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            if(prepare)\n            {\n                try\n                {\n                    command.Prepare();\n                }\n                catch\n                {\n                    command.Dispose();\n                    throw;\n                }\n            }\n            return command;\n        }\n\n        public  async ValueTask<NpgsqlCommand> CreateAddPersonsCommandAsync(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false,\n            CancellationToken cancellationToken = default\n        )\n        {\n            var command = connection.CreateCommand();\n            command.CommandText = @"\n\nINSERT INTO person(\n\tid,\n    firstname\n)\nVALUES (\n    $1,\n    $2\n)\n\n"\n;\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n                {\n                var parametr = new NpgsqlParameter<System.String>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            if(prepare)\n            {\n                try\n                {\n                    await command.PrepareAsync(cancellationToken).ConfigureAwait(false);\n                }\n                catch\n                {  \n                    await command.DisposeAsync().ConfigureAwait(false);\n                    throw;\n                }\n            }\n            return command;\n        }\n\n        public  void SetAddPersonsParametrs(\n            NpgsqlCommand command,\n            System.Int32 id,\n            System.String firstname,\n            int? timeout = null\n            )\n        {\n\n            if(timeout.HasValue)\n            {\n                command.CommandTimeout = timeout.Value;\n            }\n                ((NpgsqlParameter<System.Int32>)command.Parameters[0]).TypedValue = id;\n            if(firstname == null)\n            {\n                ((NpgsqlParameter<System.String>)command.Parameters[1]).TypedValue = null;\n            }\n            else\n            {\n                ((NpgsqlParameter<System.String>)command.Parameters[1]).TypedValue = firstname;\n            }\n        }\n\n    }\n}\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\obj\\GX\\Gedaq\\Gedaq.Gedaq\\PersonRepository3GetPersonsIQueryPersonRepository.g.cs",label:"PersonRepository3GetPersonsIQueryPersonRepository.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing Npgsql;\nusing System;\nusing System.Data;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Runtime.CompilerServices;\n\nnamespace GedaqDemoConsole.Example3\n{\n    public partial interface IQueryPersonRepository\n    {\n        \n        public  IEnumerable<GedaqDemoConsole.Model.Person> GetPersons(\n            Npgsql.NpgsqlConnection connection,\n            int? timeout = null\n        );\n        \n        public  IAsyncEnumerable<GedaqDemoConsole.Model.Person> GetPersonsAsync(\n            Npgsql.NpgsqlConnection connection,\n            int? timeout = null,\n             CancellationToken cancellationToken = default\n        );\n\n        public  NpgsqlCommand CreateGetPersonsCommand(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false\n        );\n\n        public  ValueTask<NpgsqlCommand> CreateGetPersonsCommandAsync(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false,\n            CancellationToken cancellationToken = default\n        );\n\n        public  IEnumerable<GedaqDemoConsole.Model.Person> ExecuteGetPersonsCommand(\n            NpgsqlCommand command\n            );\n\n        public  IAsyncEnumerable<GedaqDemoConsole.Model.Person> ExecuteGetPersonsCommandAsync(\n            NpgsqlCommand command,\n             CancellationToken cancellationToken = default\n\n            );\n\n        public  void SetGetPersonsParametrs(\n            NpgsqlCommand command,\n            int? timeout = null\n            );\n\n    }\n}\n\n"})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\obj\\GX\\Gedaq\\Gedaq.Gedaq\\PersonRepository3GetPersonsNpgsql.g.cs",label:"PersonRepository3GetPersonsNpgsql.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing Npgsql;\nusing System;\nusing System.Data;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Runtime.CompilerServices;\n\nnamespace GedaqDemoConsole.Example3\n{\n    public  partial class PersonRepository3\n    {\n        \n        public  IEnumerable<GedaqDemoConsole.Model.Person> GetPersons(\n            Npgsql.NpgsqlConnection connection,\n            int? timeout = null\n        )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                connection.Open();\n            }\n            NpgsqlCommand command = null;\n            NpgsqlDataReader reader = null;\n            try\n            {\n                command =\n                CreateGetPersonsCommand(connection\n                , false)\n                ;\n                SetGetPersonsParametrs(\n                    command,\n                    timeout\n                    );\n                reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (reader.NextResult())\n                {\n                }\n\n                reader.Dispose();\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    reader.Dispose();\n                }\n                if (needClose)\n                {\n                    connection.Close();\n                }\n                if(command != null)\n                {\n                    command.Parameters.Clear();\n                    command.Dispose();\n                }\n            }\n        }\n        \n        public  async IAsyncEnumerable<GedaqDemoConsole.Model.Person> GetPersonsAsync(\n            Npgsql.NpgsqlConnection connection,\n            int? timeout = null,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n        )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                await connection.OpenAsync(cancellationToken).ConfigureAwait(false);\n            }\n            NpgsqlCommand command = null;\n            NpgsqlDataReader reader = null;\n            try\n            {\n                command =\n                await CreateGetPersonsCommandAsync(connection\n                , false, cancellationToken)\n                ;\n                SetGetPersonsParametrs(\n                    command,\n                    timeout\n                    );\n                reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (await reader.NextResultAsync(cancellationToken).ConfigureAwait(false))\n                {\n                }\n\n                await reader.DisposeAsync().ConfigureAwait(false);\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    await reader.DisposeAsync().ConfigureAwait(false);\n                }\n                if (needClose)\n                {\n                    await connection.CloseAsync().ConfigureAwait(false);\n                }\n                if(command != null)\n                {\n                    command.Parameters.Clear();\n                    await command.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n        public  NpgsqlCommand CreateGetPersonsCommand(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false\n        )\n        {\n            var command = connection.CreateCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\n\n"\n;\n            if(prepare)\n            {\n                try\n                {\n                    command.Prepare();\n                }\n                catch\n                {\n                    command.Dispose();\n                    throw;\n                }\n            }\n            return command;\n        }\n\n        public  async ValueTask<NpgsqlCommand> CreateGetPersonsCommandAsync(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false,\n            CancellationToken cancellationToken = default\n        )\n        {\n            var command = connection.CreateCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\n\n"\n;\n            if(prepare)\n            {\n                try\n                {\n                    await command.PrepareAsync(cancellationToken).ConfigureAwait(false);\n                }\n                catch\n                {  \n                    await command.DisposeAsync().ConfigureAwait(false);\n                    throw;\n                }\n            }\n            return command;\n        }\n\n        public  IEnumerable<GedaqDemoConsole.Model.Person> ExecuteGetPersonsCommand(\n            NpgsqlCommand command\n            )\n        {\n            NpgsqlDataReader reader = null;\n            try\n            {\n                reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (reader.NextResult())\n                {\n                }\n                reader.Dispose();\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    reader.Dispose();\n                }\n            }\n        }\n\n        public  async IAsyncEnumerable<GedaqDemoConsole.Model.Person> ExecuteGetPersonsCommandAsync(\n            NpgsqlCommand command,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n\n            )\n        {\n            NpgsqlDataReader reader = null;\n            try\n            {\n                reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (await reader.NextResultAsync(cancellationToken).ConfigureAwait(false))\n                {\n                }\n                await reader.DisposeAsync().ConfigureAwait(false);\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    await reader.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n        public  void SetGetPersonsParametrs(\n            NpgsqlCommand command,\n            int? timeout = null\n            )\n        {\n\n            if(timeout.HasValue)\n            {\n                command.CommandTimeout = timeout.Value;\n            }\n        }\n\n    }\n}\n'})})}),(0,s.jsx)(l.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Gedaq\\src\\GedaqDemoConsole\\obj\\GX\\Gedaq\\Gedaq.Gedaq\\PersonRepositoryGetPersonNpgsql.g.cs",label:"PersonRepositoryGetPersonNpgsql.g.cs",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing Npgsql;\nusing System;\nusing System.Data;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Runtime.CompilerServices;\n\nnamespace GedaqDemoConsole.Example1\n{\n    public  partial class PersonRepository\n    {\n        \n        public  IEnumerable<GedaqDemoConsole.Model.Person> GetPerson(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 person_id,\n            int? timeout = null\n        )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                connection.Open();\n            }\n            NpgsqlCommand command = null;\n            NpgsqlDataReader reader = null;\n            try\n            {\n                command =\n                CreateGetPersonCommand(connection\n                , false)\n                ;\n                SetGetPersonParametrs(\n                    command,\n                    person_id,\n                    timeout\n                    );\n                reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (reader.NextResult())\n                {\n                }\n\n                reader.Dispose();\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    reader.Dispose();\n                }\n                if (needClose)\n                {\n                    connection.Close();\n                }\n                if(command != null)\n                {\n                    command.Parameters.Clear();\n                    command.Dispose();\n                }\n            }\n        }\n        \n        public  async IAsyncEnumerable<GedaqDemoConsole.Model.Person> GetPersonAsync(\n            Npgsql.NpgsqlConnection connection,\n            System.Int32 person_id,\n            int? timeout = null,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n        )\n        {\n            bool needClose = connection.State == ConnectionState.Closed;\n            if(needClose)\n            {\n                await connection.OpenAsync(cancellationToken).ConfigureAwait(false);\n            }\n            NpgsqlCommand command = null;\n            NpgsqlDataReader reader = null;\n            try\n            {\n                command =\n                await CreateGetPersonCommandAsync(connection\n                , false, cancellationToken)\n                ;\n                SetGetPersonParametrs(\n                    command,\n                    person_id,\n                    timeout\n                    );\n                reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (await reader.NextResultAsync(cancellationToken).ConfigureAwait(false))\n                {\n                }\n\n                await reader.DisposeAsync().ConfigureAwait(false);\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    await reader.DisposeAsync().ConfigureAwait(false);\n                }\n                if (needClose)\n                {\n                    await connection.CloseAsync().ConfigureAwait(false);\n                }\n                if(command != null)\n                {\n                    command.Parameters.Clear();\n                    await command.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n        public  NpgsqlCommand CreateGetPersonCommand(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false\n        )\n        {\n            var command = connection.CreateCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n\n"\n;\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            if(prepare)\n            {\n                try\n                {\n                    command.Prepare();\n                }\n                catch\n                {\n                    command.Dispose();\n                    throw;\n                }\n            }\n            return command;\n        }\n\n        public  async ValueTask<NpgsqlCommand> CreateGetPersonCommandAsync(\n            Npgsql.NpgsqlConnection connection,\n            bool prepare = false,\n            CancellationToken cancellationToken = default\n        )\n        {\n            var command = connection.CreateCommand();\n            command.CommandText = @"\n\nSELECT \n    p.id,\n    p.firstname,\n\n    a.id,\n    a.street,\n    a.city\n\nFROM person p\nLEFT JOIN address a ON a.id = p.address_id\nWHERE\n    p.id = $1\n\n"\n;\n                {\n                var parametr = new NpgsqlParameter<System.Int32>();\n\n                command.Parameters.Add(parametr);\n\n                }\n            if(prepare)\n            {\n                try\n                {\n                    await command.PrepareAsync(cancellationToken).ConfigureAwait(false);\n                }\n                catch\n                {  \n                    await command.DisposeAsync().ConfigureAwait(false);\n                    throw;\n                }\n            }\n            return command;\n        }\n\n        public  IEnumerable<GedaqDemoConsole.Model.Person> ExecuteGetPersonCommand(\n            NpgsqlCommand command\n            )\n        {\n            NpgsqlDataReader reader = null;\n            try\n            {\n                reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (reader.NextResult())\n                {\n                }\n                reader.Dispose();\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    reader.Dispose();\n                }\n            }\n        }\n\n        public  async IAsyncEnumerable<GedaqDemoConsole.Model.Person> ExecuteGetPersonCommandAsync(\n            NpgsqlCommand command,\n            [EnumeratorCancellation] CancellationToken cancellationToken = default\n\n            )\n        {\n            NpgsqlDataReader reader = null;\n            try\n            {\n                reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);\n                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))\n                {\n                    var item = new GedaqDemoConsole.Model.Person();\n                        if(!reader.IsDBNull(0))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.Id = reader.GetFieldValue<System.Int32>(0);\n                        }\n                        if(!reader.IsDBNull(1))\n                        {\n                            if(item == null)\n                            {\n                                 item = new GedaqDemoConsole.Model.Person();\n                            }\n                            item.FirstName = reader.GetFieldValue<System.String>(1);\n                        }\n                        if(!reader.IsDBNull(2))\n                        {\n                            var item1 = new GedaqDemoConsole.Model.Address();\n                            if(!reader.IsDBNull(2))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Id = reader.GetFieldValue<System.Int32>(2);\n                        }\n                            if(!reader.IsDBNull(3))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.Street = reader.GetFieldValue<System.String>(3);\n                        }\n                            if(!reader.IsDBNull(4))\n                        {\n                                if(item1 == null)\n                                {\n                                     item1 = new GedaqDemoConsole.Model.Address();\n                                }\n                                item1.City = reader.GetFieldValue<System.String>(4);\n                        }\n                            item.Address = item1;\n                        } \n                    yield return item;\n                }\n\n                while (await reader.NextResultAsync(cancellationToken).ConfigureAwait(false))\n                {\n                }\n                await reader.DisposeAsync().ConfigureAwait(false);\n                reader = null;\n            }\n            finally\n            {\n                if (reader != null)\n                {\n                    if (!reader.IsClosed)\n                    {\n                        try \n                        {\n                            command.Cancel();\n                        }\n                        catch { /* ignore */ }\n                    }\n                \n                    await reader.DisposeAsync().ConfigureAwait(false);\n                }\n            }\n        }\n\n        public  void SetGetPersonParametrs(\n            NpgsqlCommand command,\n            System.Int32 person_id,\n            int? timeout = null\n            )\n        {\n\n            if(timeout.HasValue)\n            {\n                command.CommandTimeout = timeout.Value;\n            }\n                ((NpgsqlParameter<System.Int32>)command.Parameters[0]).TypedValue = person_id;\n        }\n\n    }\n}\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(n.h3,{id:"download-example-net--c-",children:"Download Example (.NET  C# )"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(49340).A+"",children:"Download Example project Gedaq "})})}),"\n",(0,s.jsx)(n.h3,{id:"share-gedaq",children:"Share Gedaq"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGedaq&quote=Gedaq",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGedaq&text=Gedaq:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGedaq",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGedaq&title=Gedaq",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGedaq&title=Gedaq&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FGedaq",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Gedaq",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Gedaq"})}),"\n",(0,s.jsx)(n.h3,{id:"in-the-same-category-database---4-other-generators",children:"In the same category (Database) - 4 other generators"}),"\n",(0,s.jsx)(n.h4,{id:"breezy",children:(0,s.jsx)(n.a,{href:"/docs/Breezy",children:"Breezy"})}),"\n",(0,s.jsx)(n.h4,{id:"dapperaot",children:(0,s.jsx)(n.a,{href:"/docs/Dapper.AOT",children:"Dapper.AOT"})}),"\n",(0,s.jsx)(n.h4,{id:"entitylengthsgenerator",children:(0,s.jsx)(n.a,{href:"/docs/EntityLengths.Generator",children:"EntityLengths.Generator"})}),"\n",(0,s.jsx)(n.h4,{id:"tablestorage",children:(0,s.jsx)(n.a,{href:"/docs/TableStorage",children:"TableStorage"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},49340:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/files/Gedaq-4547fe6635c592d2da0926ece286a957.zip"}}]);