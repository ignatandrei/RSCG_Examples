"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2774],{32469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"RSCG-Examples/mvvmgen","title":"228 - mvvmgen","description":"Generate MVVM boilerplate code","source":"@site/docs/RSCG-Examples/mvvmgen.md","sourceDirName":"RSCG-Examples","slug":"/mvvmgen","permalink":"/RSCG_Examples/v2/docs/mvvmgen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2280,"frontMatter":{"sidebar_position":2280,"title":"228 - mvvmgen","description":"Generate MVVM boilerplate code","slug":"/mvvmgen"},"sidebar":"tutorialSidebar","previous":{"title":"227 - UtilityVerse.Copy","permalink":"/RSCG_Examples/v2/docs/UtilityVerse.Copy"},"next":{"title":"229 - Facet","permalink":"/RSCG_Examples/v2/docs/Facet"}}');var a=t(74848),s=t(28453),i=t(11470),o=t(19365),m=t(14252),l=t(72866);const c={sidebar_position:2280,title:"228 - mvvmgen",description:"Generate MVVM boilerplate code",slug:"/mvvmgen"},u="mvvmgen  by Thomas Claudius Huber",p={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Author",id:"author",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Your Friend Who Writes the Boilerplate for You",id:"your-friend-who-writes-the-boilerplate-for-you",level:2},{value:"Get Started",id:"get-started",level:2},{value:"Quick intro",id:"quick-intro",level:2},{value:"Installing the MvvmGen NuGet Package",id:"installing-the-mvvmgen-nuget-package",level:3},{value:"Generating a ViewModel class",id:"generating-a-viewmodel-class",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share mvvmgen",id:"share-mvvmgen",level:3},...l.RM];function v(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"mvvmgen--by-thomas-claudius-huber",children:"mvvmgen  by Thomas Claudius Huber"})}),"\n",(0,a.jsx)(m.A,{toc:h}),"\n",(0,a.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/mvvmgen/",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/mvvmgen?label=mvvmgen",alt:"Nuget"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/thomasclaudiushuber/mvvmgen?label=updated",alt:"GitHub last commit"})}),"\n",(0,a.jsx)(n.img,{src:"https://img.shields.io/github/stars/thomasclaudiushuber/mvvmgen?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,a.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,a.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["Name: ",(0,a.jsx)(n.strong,{children:"mvvmgen"})]}),(0,a.jsx)(n.p,{children:"MvvmGen is a next generation MVVM library for XAML applications built with C# source generators. MvvmGen helps you to efficently build your WPF, WinUI, and MAUI apps with the Model-View-ViewModel pattern, as it generates all the boilerplate for you."}),(0,a.jsx)(n.p,{children:"Author: Thomas Claudius Huber"}),(0,a.jsxs)(n.p,{children:["NuGet:\n",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/mvvmgen/",children:"https://www.nuget.org/packages/mvvmgen/"})})]}),(0,a.jsxs)(n.p,{children:["You can find more details at ",(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen",children:"https://github.com/thomasclaudiushuber/mvvmgen"})]}),(0,a.jsxs)(n.p,{children:["Source: ",(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen",children:"https://github.com/thomasclaudiushuber/mvvmgen"})]})]}),"\n",(0,a.jsx)(n.h3,{id:"author",children:"Author"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Thomas Claudius Huber\n",(0,a.jsx)(n.img,{src:"https://github.com/thomasclaudiushuber.png",alt:"Alt text"})]})}),"\n",(0,a.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.h1,{id:"-mvvmgen",children:"\u26a1 MvvmGen"}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen/actions/workflows/build_mvvmgen.yml",children:(0,a.jsx)(n.img,{src:"https://github.com/thomasclaudiushuber/mvvmgen/actions/workflows/build_mvvmgen.yml/badge.svg",alt:"Build MvvmGen"})}),"\n",(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/Mvvmgen",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/nuget/v/MvvmGen.svg?label=NuGet%20MvvmGen",alt:"NuGet MvvmGen"})}),"\n",(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/Mvvmgen.PureCodeGeneration",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/nuget/v/MvvmGen.PureCodeGeneration.svg?label=NuGet%20MvvmGen.PureCodeGeneration",alt:"NuGet MvvmGen"})})]}),(0,a.jsx)(n.h2,{id:"your-friend-who-writes-the-boilerplate-for-you",children:"Your Friend Who Writes the Boilerplate for You"}),(0,a.jsxs)(n.p,{children:["Hey there, welcome to the ",(0,a.jsx)(n.strong,{children:"MvvmGen"})," repository. ",(0,a.jsx)(n.strong,{children:"MvvmGen"})," is a lightweight\nand modern MVVM library (.NET Standard 2.0) built with C# Source Generators\nthat helps you to apply the popular Model-View-ViewModel-pattern (MVVM)\nin your XAML applications that you build with WPF, WinUI, Uno Platform,\nAvalonia, Xamarin Forms, or .NET MAUI."]}),(0,a.jsxs)(n.p,{children:["MvvmGen is licensed under the ",(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen/LICENSE",children:"MIT license"}),"."]}),(0,a.jsx)(n.h2,{id:"get-started",children:"Get Started"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen/docs/00_start_here.md",children:"Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen-samples",children:"Samples"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.thomasclaudiushuber.com/2021/05/12/introducing-the-mvvmgen-library",children:"Blog post that introduces MvvmGen"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.thomasclaudiushuber.com/2021/05/19/mvvmgen-the-special-edition-pure-code-generation",children:"Blog post about pure code generation"})}),"\n"]}),(0,a.jsx)(n.h2,{id:"quick-intro",children:"Quick intro"}),(0,a.jsxs)(n.p,{children:["In this quick intro, you'll learn that creating a ViewModel is a lot of fun with ",(0,a.jsx)(n.strong,{children:"MvvmGen"}),"! \ud83d\udd25"]}),(0,a.jsx)(n.h3,{id:"installing-the-mvvmgen-nuget-package",children:"Installing the MvvmGen NuGet Package"}),(0,a.jsxs)(n.p,{children:["Reference the NuGet package ",(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/MvvmGen/",children:"MvvmGen"}),"\nin your .NET application, and then you're ready to go:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Install-Package MvvmGen\n"})}),(0,a.jsx)(n.p,{children:"MvvmGen will register itself as a C# source generator in your project,\nand it will be your friend who writes the boilerplate for you."}),(0,a.jsx)(n.h3,{id:"generating-a-viewmodel-class",children:"Generating a ViewModel class"}),(0,a.jsxs)(n.p,{children:["To generate a ViewModel class, you create a new class, you mark it as ",(0,a.jsx)(n.code,{children:"partial"}),",\nand you put MvvmGen's ",(0,a.jsx)(n.code,{children:"ViewModel"})," attribute on the class:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"using MvvmGen;\n\nnamespace MyWpfApp.ViewModel\n{\n  [ViewModel]\n  public partial class EmployeeViewModel\n  {\n  }\n}\n"})}),(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ViewModel"})," attribute tells MvvmGen to generate another\npartial ",(0,a.jsx)(n.code,{children:"EmployeeViewModel"})," class. Right now, it will be a class\nthat looks like this:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"using MvvmGen.Commands;\nusing MvvmGen.Events;\nusing MvvmGen.ViewModels;\n\nnamespace MyWpfApp.ViewModel\n{\n    partial class EmployeeViewModel : ViewModelBase\n    {\n        public EmployeeViewModel()\n        {\n            this.OnInitialize();\n        }\n\n        partial void OnInitialize();\n    }\n}\n"})}),(0,a.jsxs)(n.p,{children:["You can see that generated class in Visual Studio under Dependencies->Analyzers:\n",(0,a.jsx)(n.img,{src:"https://github.com/thomasclaudiushuber/mvvmgen/docs/images/generate_a_viewModel_01.png",alt:"Generated class"})]}),(0,a.jsxs)(n.p,{children:["Beside the ",(0,a.jsx)(n.code,{children:"ViewModel"})," attribute, you find many other attributes in the ",(0,a.jsx)(n.code,{children:"MvvmGen"})," namespace\nthat you can use to decorate your ViewModel class. These attributes allow you to\nbuild a full ViewModel like this:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"using MvvmGen;\nusing MvvmGen.Events;\n\nnamespace MyWpfApp.ViewModel\n{\n  public record EmployeeSavedEvent(string FirstName, string LastName);\n\n  [Inject(typeof(IEventAggregator))]\n  [ViewModel]\n  public partial class EmployeeViewModel\n  {\n    [Property] private string _firstName;\n    [Property] private string _lastName;\n\n    [Command(CanExecuteMethod = nameof(CanSave))]\n    private void Save()\n    {\n      EventAggregator.Publish(new EmployeeSavedEvent(FirstName, LastName));\n    }\n\n    [CommandInvalidate(nameof(FirstName))]\n    private bool CanSave()\n    {\n      return !string.IsNullOrEmpty(FirstName);\n    }\n  }\n}\n"})}),(0,a.jsx)(n.p,{children:"For this ViewModel, MvvmGen will generate the following partial class definition for you"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using MvvmGen.Commands;\nusing MvvmGen.Events;\nusing MvvmGen.ViewModels;\n\nnamespace MyWpfApp.ViewModel\n{\n  partial class EmployeeViewModel : ViewModelBase\n  {\n    private IDelegateCommand? _saveCommand;\n\n    public EmployeeViewModel(MvvmGen.Events.IEventAggregator eventAggregator)\n    {\n      this.EventAggregator = eventAggregator;\n      this.OnInitialize();\n    }\n\n    partial void OnInitialize();\n\n    public IDelegateCommand SaveCommand => _saveCommand ??= new DelegateCommand(_ => Save(), _ => CanSave());\n\n    public string FirstName\n    {\n      get => _firstName;\n      set\n      {\n        if (_firstName != value)\n        {\n          _firstName = value;\n          OnPropertyChanged("FirstName");\n        }\n      }\n    }\n\n    public string LastName\n    {\n      get => _lastName;\n      set\n      {\n        if (_lastName != value)\n        {\n          _lastName = value;\n          OnPropertyChanged("LastName");\n        }\n      }\n    }\n\n    protected MvvmGen.Events.IEventAggregator EventAggregator \\{ get; private set; }\n    \n    protected override void InvalidateCommands(string? propertyName)\n    {\n      base.InvalidateCommands(propertyName);\n      if(propertyName == "FirstName")\n      {\n          SaveCommand.RaiseCanExecuteChanged();\n      }\n    }\n  }\n}\n'})}),(0,a.jsxs)(n.p,{children:["To learn all the details, go to the ",(0,a.jsx)(n.a,{href:"https://github.com/thomasclaudiushuber/mvvmgen/docs/00_start_here.md",children:"documentation in this repo"}),"."]})]}),"\n",(0,a.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Generate MVVM boilerplate code"})}),"\n",(0,a.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"csproj",label:"CSharp Project",children:[(0,a.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,a.jsx)(n.strong,{children:"mvvmgen"})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {11}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n\t<ItemGroup>\n\t\t<PackageReference Include="MvvmGen.PureCodeGeneration" Version="1.4.0">\n\t\t\t<PrivateAssets>all</PrivateAssets>\n\t\t\t<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t\t</PackageReference>\n\t</ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,a.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\Program.cs",label:"Program.cs",children:[(0,a.jsxs)(n.p,{children:["This is the use of ",(0,a.jsx)(n.strong,{children:"mvvmgen"})," in ",(0,a.jsx)(n.em,{children:"Program.cs"})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using PropChangeDemo;\n\nPerson person = new ();\nperson.FirstName = "Andrei";\nConsole.WriteLine (person.FirstName);\n'})})]}),(0,a.jsxs)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\Person.cs",label:"Person.cs",children:[(0,a.jsxs)(n.p,{children:["This is the use of ",(0,a.jsx)(n.strong,{children:"mvvmgen"})," in ",(0,a.jsx)(n.em,{children:"Person.cs"})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using MvvmGen;\nnamespace PropChangeDemo;\n\n[ViewModel]\npartial class Person\n{\n    [Property] private string _FirstName;\n\n    \n}\n\n"})})]})]}),"\n",(0,a.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,a.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.CommandAttribute.g.cs",label:"MvvmGen.Attributes.CommandAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that a DelegateCommand property in the ViewModel should be generated for a method. Set this attribute on methods of a class that has the <see cref="ViewModelAttribute"/> set.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class CommandAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="CommandAttribute"/> class.\n        /// </summary>\n        public CommandAttribute() \\{ }\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref="CommandAttribute"/> class.\n        /// </summary>\n        /// <param name="canExecuteMethod">The name of the method with the can-execute logic</param>\n        public CommandAttribute(string canExecuteMethod)\n        {\n            CanExecuteMethod = canExecuteMethod;\n        }\n\n        /// <summary>\n        /// Gets or sets the name of the method with the can-execute logic.\n        /// </summary>\n        public string? CanExecuteMethod \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets the name of the command property.\n        /// </summary>\n        public string? PropertyName \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.CommandInvalidateAttribute.g.cs",label:"MvvmGen.Attributes.CommandInvalidateAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\nusing System.Linq;\nusing MvvmGen.Commands;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies a property, in which the <see cref="DelegateCommand.RaiseCanExecuteChanged"/> method of a DelegateCommand is called to refresh controls in the UI that are using the <see cref="DelegateCommand"/>. Set this one or more instances of this attribute on the execute or can-execute method of a command that you have defined with the <see cref="CommandAttribute"/>.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\n    public class CommandInvalidateAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="CommandInvalidateAttribute"/> class.\n        /// </summary>\n        /// <param name="propertyName">The name of the property in which the DelegateCommand\'s <see cref="DelegateCommand.RaiseCanExecuteChanged"/> method is called</param>\n        /// <param name="morePropertyNames">More properties in which the DelegateCommand\'s <see cref="DelegateCommand.RaiseCanExecuteChanged"/> method is called</param>\n        public CommandInvalidateAttribute(string propertyName, params string[] morePropertyNames)\n        {\n            PropertyNames = new[] \\{ propertyName }.Concat(morePropertyNames).ToArray();\n        }\n\n        /// <summary>\n        /// Gets the property names in which the DelegateCommand\'s <see cref="DelegateCommand.RaiseCanExecuteChanged"/> method is called.\n        /// </summary>\n        public string[] PropertyNames \\{ get; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.InjectAttribute.g.cs",label:"MvvmGen.Attributes.InjectAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that a type is injected into a ViewModel. Generates a constructor parameter and initializes a property with the injected type. Set this attribute on a class that has the <see cref="ViewModelAttribute"/> set.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]\n    public class InjectAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="InjectAttribute"/> class.\n        /// </summary>\n        /// <param name="type">The type that is injected into the ViewModel.</param>\n        public InjectAttribute(Type type)\n        {\n            Type = type;\n        }\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref="InjectAttribute"/> class.\n        /// </summary>\n        /// <param name="type">The type that is injected into the ViewModel.</param>\n        /// <param name="propertyName">The name of the property that stores the injected type.</param>\n        public InjectAttribute(Type type, string propertyName)\n        {\n            Type = type;\n            PropertyName = propertyName;\n        }\n\n        /// <summary>\n        /// Gets the type that is injected into the ViewModel.\n        /// </summary>\n        public Type Type \\{ get; }\n\n        /// <summary>\n        /// Gets or sets the name of the property that stores the injected type.\n        /// </summary>\n        public string? PropertyName \\{ get; set; }\n\n\n        /// <summary>\n        /// Gets or sets the access modifier of the property that stores the injected type.\n        /// </summary>\n        public AccessModifier PropertyAccessModifier \\{ get; set; }\n    }\n\n    public enum AccessModifier\n    {\n        Private = 1,\n        ProtectedInternal = 2,\n        Protected = 3,\n        Internal = 4,\n        Public = 5\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.PropertyAttribute.g.cs",label:"MvvmGen.Attributes.PropertyAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that a property in the ViewModel should be generated for a field. Set this attribute on a field of a class that has the <see cref="ViewModelAttribute"/> set.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]\n    public class PropertyAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="PropertyAttribute"/> class.\n        /// </summary>\n        public PropertyAttribute() \\{ }\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref="PropertyAttribute"/> class.\n        /// </summary>\n        /// <param name="propertyName">The name of the property to generate</param>\n        public PropertyAttribute(string propertyName)\n        {\n            PropertyName = propertyName;\n        }\n\n        /// <summary>\n        /// Gets or sets the name of property to generate.\n        /// </summary>\n        public string? PropertyName \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.PropertyCallMethodAttribute.g.cs",label:"MvvmGen.Attributes.PropertyCallMethodAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that a method should be called in the setter of a generated property. Set this attribute a field that has the <see cref="PropertyAttribute"/> set.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)]\n    public class PropertyCallMethodAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="PropertyCallMethodAttribute"/> class.\n        /// </summary>\n        /// <param name="methodName">The method to call</param>\n        public PropertyCallMethodAttribute(string methodName)\n        {\n            MethodName = methodName;\n        }\n\n        /// <summary>\n        /// Gets or sets the method to call.\n        /// </summary>\n        public string MethodName \\{ get; }\n\n        /// <summary>\n        /// Gets or sets the method arguments that are passed to the method that is called. As the method is called in the setter of a property, you can specify for example "value" to pass the value of the property as an argument to the method.\n        /// </summary>\n        public string? MethodArgs \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.PropertyInvalidateAttribute.g.cs",label:"MvvmGen.Attributes.PropertyInvalidateAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Set this attribute once or multiple times on a readonly property that depends on another property.\n    /// Typical case is you define a FullName property in your ViewModel that depends on FirstName and LastName.\n    /// You would create it like this:\n    /// <code>\n    /// [PropertyInvalidate(nameof(LastName))]\n    /// [PropertyInvalidate(nameof(FirstName))]\n    /// public string FullName => $"{FirstName} {LastName}";\n    /// </code>\n    /// Then the <see cref="INotifyPropertyChanged.PropertyChanged"/> event is raised for the FullName property in the setters of the properties FirstName and LastName.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\n    public class PropertyInvalidateAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="PropertyInvalidateAttribute"/> class.\n        /// </summary>\n        /// <param name="propertyName">The name of the property in which the <see cref="INotifyPropertyChanged.PropertyChanged"/> event is raised.</param>\n        /// /// <param name="morePropertyNames">More properties in which the <see cref="INotifyPropertyChanged.PropertyChanged"/> event is raised.</param>\n        public PropertyInvalidateAttribute(string propertyName, params string[] morePropertyNames)\n        {\n            PropertyNames = new[] \\{ propertyName }.Concat(morePropertyNames).ToArray();\n        }\n\n        /// <summary>\n        /// Gets the property names in which the <see cref="INotifyPropertyChanged.PropertyChanged"/> event is raised.\n        /// </summary>\n        public string[] PropertyNames \\{ get; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.PropertyPublishEventAttribute.g.cs",label:"MvvmGen.Attributes.PropertyPublishEventAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\nusing MvvmGen.Events;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that an event should be published in the setter of a generated property. Set this attribute a field that has the <see cref="PropertyAttribute"/> set.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)]\n    public class PropertyPublishEventAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="PropertyPublishEventAttribute"/> class.\n        /// </summary>\n        /// <param name="eventType">The event type to publish</param>\n        public PropertyPublishEventAttribute(Type eventType)\n        {\n            EventType = eventType;\n        }\n\n        /// <summary>\n        /// Gets or sets the event type to publish\n        /// </summary>\n        public Type EventType \\{ get; }\n\n        /// <summary>\n        /// Gets or sets the constructor arguments that are passed to the constructor of the <see cref="EventType"/> class. As the event is published in the setter of a property, you can specify for example <code>"value"</code> to pass the value of the property as an argument to the constructor of the event, or you can specify <code>"value?.Id, value?.FirstName"</code> to pass two arguments to the event constructor.\n        /// </summary>\n        public string? EventConstructorArgs \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets the name of the member that contains the <see cref="IEventAggregator"/> instance. The default value is "EventAggregator".\n        /// </summary>\n        public string EventAggregatorMemberName \\{ get; set; \\} = "EventAggregator";\n\n        /// <summary>\n        /// Gets or sets a condition that must be met to publish the event. Pass for example in a string like <code>"value is not null"</code>\n        /// </summary>\n        public string? PublishCondition \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.ViewModelAttribute.g.cs",label:"MvvmGen.Attributes.ViewModelAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that a class is a ViewModel. With this attribute set on a class, a partial class definition is generated.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\n    public class ViewModelAttribute : Attribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref="ViewModelAttribute"/> class.\n        /// </summary>\n        public ViewModelAttribute() \\{ }\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref="ViewModelAttribute"/> class.\n        /// </summary>\n        /// <param name="modelType">The type of the model that is wrapped by the ViewModel. All properties of the model type will be generated in the ViewModel.</param>\n        public ViewModelAttribute(Type modelType)\n        {\n            ModelType = modelType;\n        }\n\n        /// <summary>\n        /// Gets or sets the type of the model that is wrapped by the ViewModel. All properties of the model type will be generated in the ViewModel.\n        /// </summary>\n        public Type? ModelType \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets the name of generated property that contains the wrapped ModelType. If not set, the property has the name Model\n        /// </summary>\n        public string? ModelPropertyName \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets a comma separated list of model properties that should not be generated\n        /// in the ViewModel for the model that you specified with the <see cref="ModelType"/> property.\n        /// </summary>\n        public string? ModelPropertiesToIgnore \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets if a constructor is generated. Default value is true.\n        /// </summary>\n        public bool GenerateConstructor \\{ get; set; \\} = true;\n\n        /// <summary>\n        /// Gets or sets the <see cref="MvvmGen.Commands.IDelegateCommand"/> implementation to use.\n        /// That your <see cref="MvvmGen.Commands.IDelegateCommand"/> implementation works seemlessly \n        /// with MvvmGen, it must have a constructor with the following signature:\n        /// <code>\n        /// public YourCommand(Action<object?> execute, Func<object?, bool>? canExecute = null)\n        /// {\n        /// \\}  \n        /// </code>\n        /// If this property is not set, the <see cref="MvvmGen.Commands.DelegateCommand"/> class is used\n        /// as an <see cref="MvvmGen.Commands.IDelegateCommand"/> implementation.\n        /// </summary>\n        public Type? CommandType \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.ViewModelGenerateFactoryAttribute.g.cs",label:"MvvmGen.Attributes.ViewModelGenerateFactoryAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\nusing MvvmGen.ViewModels;\n\nnamespace MvvmGen\n{\n    /// <summary>\n    /// Specifies that an <see cref="IViewModelFactory{T}"/> is generated, where T is your ViewModel class. Set this attribute on a class that has the <see cref="ViewModelAttribute"/> set.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\n    public class ViewModelGenerateFactoryAttribute : Attribute\n    {\n        /// <summary>\n        /// Gets or sets the name of the generated factory class.\n        /// </summary>\n        public string? ClassName \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets the name of the generated factory interface.\n        /// </summary>\n        public string? InterfaceName \\{ get; set; }\n\n        /// <summary>\n        /// Gets or sets the return type of the Create method. By default, this will be\n        /// - either the ViewModel type\n        /// - or the generated interface by the ViewModelGenerateInterface attribute\n        /// But you can explicitly specify here a custom return type if needed. \n        /// </summary>\n        public Type? ReturnType \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Attributes.ViewModelGenerateInterfaceAttribute.g.cs",label:"MvvmGen.Attributes.ViewModelGenerateInterfaceAttribute.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\n\nnamespace MvvmGen\n\n{\n    /// <summary>\n    /// Specifies that an interface is generated for your ViewModel class. \n    /// Set this attribute on a class that has the <see cref="ViewModelAttribute"/> set,\n    /// and then the generated ViewModel will automatically implement the generated interface\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\n    public class ViewModelGenerateInterfaceAttribute : Attribute\n    {\n        /// <summary>\n        /// Gets or sets the name of the generated interface.\n        /// </summary>\n        public string? InterfaceName \\{ get; set; }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Commands.DelegateCommand.g.cs",label:"MvvmGen.Commands.DelegateCommand.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\nusing System.Windows.Input;\n\nnamespace MvvmGen.Commands\n{\n    /// <summary>\n    /// An <see cref="ICommand"/> implementation that works with delegates for the execute and can-execute logic\n    /// </summary>\n    public class DelegateCommand : IDelegateCommand\n    {\n        private readonly Action<object?> _execute;\n        private readonly Func<object?, bool>? _canExecute;\n\n        public DelegateCommand(Action<object?> execute, Func<object?, bool>? canExecute = null)\n        {\n            _execute = execute ?? throw new ArgumentNullException(nameof(execute));\n            _canExecute = canExecute;\n        }\n\n        /// <inheritdoc/>\n        public event EventHandler? CanExecuteChanged;\n\n        /// <summary>\n        /// Raises the <see cref="CanExecuteChanged"/> event.\n        /// </summary>\n        public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);\n\n        /// <inheritdoc/>\n        public void Execute(object? parameter) => _execute(parameter);\n\n        /// <inheritdoc/>\n        public bool CanExecute(object? parameter) => _canExecute == null || _canExecute(parameter);\n\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Commands.IDelegateCommand.g.cs",label:"MvvmGen.Commands.IDelegateCommand.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System.Windows.Input;\n\nnamespace MvvmGen.Commands\n{\n    public interface IDelegateCommand : ICommand\n    {\n        void RaiseCanExecuteChanged();\n    }\n}\n\n"})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Events.EventAggregator.g.cs",label:"MvvmGen.Events.EventAggregator.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace MvvmGen.Events\n{\n    /// <summary>\n    /// A class to communicate between loosely coupled objects, like for example ViewModels\n    /// </summary>\n    public class EventAggregator : IEventAggregator\n    {\n        internal Dictionary<Type, List<WeakReference>> _subscribersByEvent = new();\n\n        /// <inheritdoc/>\n        public void Publish<TEvent>(TEvent eventToPublish)\n        {\n            if (eventToPublish is null)\n            {\n                throw new ArgumentNullException(nameof(eventToPublish));\n            }\n            lock (_subscribersByEvent)\n            {\n                if (!_subscribersByEvent.ContainsKey(typeof(TEvent)))\n                {\n                    return;\n                }\n\n                var subscribersToRemove = new List<WeakReference>();\n\n                foreach (var subscriber in _subscribersByEvent[typeof(TEvent)])\n                {\n                    if (subscriber.IsAlive)\n                    {\n                        var target = subscriber.Target;\n                        if (target is not null)\n                        {\n                            target.GetType()\n                              .GetMethod(nameof(IEventSubscriber<object>.OnEvent), new[] \\{ typeof(TEvent) })\n                              ?.Invoke(target, new object[] \\{ eventToPublish });\n                        }\n                    }\n                    else\n                    {\n                        subscribersToRemove.Add(subscriber);\n                    }\n                }\n\n                foreach (var subscriber in subscribersToRemove)\n                {\n                    _subscribersByEvent[typeof(TEvent)].Remove(subscriber);\n                }\n            }\n        }\n\n        /// <inheritdoc/>\n        public void RegisterSubscriber<TSubscriber>(TSubscriber subscriber)\n        {\n            if (subscriber is null)\n            {\n                throw new ArgumentNullException(nameof(subscriber));\n            }\n\n            var subscriberInterfaces = typeof(TSubscriber).GetInterfaces()\n                .Where(t => t.IsGenericType && t.FullName?.StartsWith("MvvmGen.Events.IEventSubscriber") == true).ToList();\n            if (!subscriberInterfaces.Any())\n            {\n                return;\n            }\n\n            var weakReference = new WeakReference(subscriber);\n\n            var eventTypes = subscriberInterfaces.SelectMany(x => x.GenericTypeArguments).Distinct();\n            lock (_subscribersByEvent)\n            {\n                foreach (var eventType in eventTypes)\n                {\n                    if (!_subscribersByEvent.ContainsKey(eventType))\n                    {\n                        _subscribersByEvent.Add(eventType, new());\n                    }\n\n                    if (!_subscribersByEvent[eventType].Any(x => x.IsAlive && x.Target?.Equals(subscriber) == true))\n                    {\n                        _subscribersByEvent[eventType].Add(weakReference);\n                    }\n                }\n            }\n        }\n\n        /// <summary>\n        /// Unregisters an MvvmGen.Events.IEventSubscriber, so that it won\'t receive events anymore from the IEventAggregator instance.\n        /// Note that calling this method is optional for an instance of this <see cref="EventAggregator"/> class, because the\n        /// <see cref="EventAggregator"/> stores a subscriber internally in a <see cref="WeakReference"/>, which means\n        /// the subscriber can get garbage collected, even if you don\'t call this UnregisterSubscriber method.\n        /// Calling this method though will immediately unregister a subscriber, even before it got garbage collected.\n        /// </summary>\n        /// <typeparam name="TSubscriber">The subscriber type</typeparam>\n        /// <param name="subscriber">The subscriber instance to unregister</param>\n        public void UnregisterSubscriber<TSubscriber>(TSubscriber subscriber)\n        {\n            if (subscriber is null)\n            {\n                throw new ArgumentNullException(nameof(subscriber));\n            }\n            lock (_subscribersByEvent)\n            {\n                foreach (var subscribersByEvent in _subscribersByEvent)\n                {\n                    var subscribersToRemove = new List<WeakReference>();\n                    foreach (var weakReference in subscribersByEvent.Value)\n                    {\n                        if (!weakReference.IsAlive\n                         || weakReference.Target?.Equals(subscriber) == true)\n                        {\n                            subscribersToRemove.Add(weakReference);\n                        }\n                    }\n\n                    foreach (var subscriberToRemove in subscribersToRemove)\n                    {\n                        subscribersByEvent.Value.Remove(subscriberToRemove);\n                    }\n                }\n            }\n        }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Events.IEventAggregator.g.cs",label:"MvvmGen.Events.IEventAggregator.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nnamespace MvvmGen.Events\n{\n    /// <summary>\n    /// Provides methods to communicate between loosely coupled objects.\n    /// </summary>\n    public interface IEventAggregator\n    {\n        /// <summary>\n        /// Publishes an event.\n        /// </summary>\n        /// <typeparam name="TEvent">The event type to publish</typeparam>\n        /// <param name="eventToPublish">The event instance to publish</param>\n        void Publish<TEvent>(TEvent eventToPublish);\n\n        /// <summary>\n        /// Registers an MvvmGen.Events.IEventSubscriber, so that it will receive events from the <see cref="IEventAggregator"/> instance.\n        /// </summary>\n        /// <typeparam name="TSubscriber">The subscriber type</typeparam>\n        /// <param name="subscriber">The subscriber instance to register</param>\n        void RegisterSubscriber<TSubscriber>(TSubscriber subscriber);\n\n        /// <summary>\n        /// Unregisters an <see cref="IEventSubscriber{TEvent}"/>, so that it won\'t receive events anymore from the <see cref="IEventAggregator"/> instance.\n        /// </summary>\n        /// <typeparam name="TSubscriber">The subscriber type</typeparam>\n        /// <param name="subscriber">The subscriber instance to unregister</param>\n        void UnregisterSubscriber<TSubscriber>(TSubscriber subscriber);\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.Events.IEventSubscriber.g.cs",label:"MvvmGen.Events.IEventSubscriber.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nnamespace MvvmGen.Events\n{\n    /// <summary>\n    /// Subscribes to an event of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent">The event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2> : IEventSubscriber<TEvent1>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent2 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3> : IEventSubscriber<TEvent1, TEvent2>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent3 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4> : IEventSubscriber<TEvent1, TEvent2, TEvent3>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent4 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    /// <typeparam name="TEvent5">The fifth event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5> : IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent5 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    /// <typeparam name="TEvent5">The fifth event to subscribe</typeparam>\n    /// <typeparam name="TEvent6">The sixth event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6> : IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent6 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    /// <typeparam name="TEvent5">The fifth event to subscribe</typeparam>\n    /// <typeparam name="TEvent6">The sixth event to subscribe</typeparam>\n    /// <typeparam name="TEvent7">The seventh event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7> : IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent7 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    /// <typeparam name="TEvent5">The fifth event to subscribe</typeparam>\n    /// <typeparam name="TEvent6">The sixth event to subscribe</typeparam>\n    /// <typeparam name="TEvent7">The seventh event to subscribe</typeparam>\n    /// <typeparam name="TEvent8">The eighth event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7, TEvent8> : IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent8 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    /// <typeparam name="TEvent5">The fifth event to subscribe</typeparam>\n    /// <typeparam name="TEvent6">The sixth event to subscribe</typeparam>\n    /// <typeparam name="TEvent7">The seventh event to subscribe</typeparam>\n    /// <typeparam name="TEvent8">The eighth event to subscribe</typeparam>\n    /// <typeparam name="TEvent9">The ninth event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7, TEvent8, TEvent9> : IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7, TEvent8>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent9 eventData);\n    }\n\n    /// <summary>\n    /// Subscribes to events of an <see cref="IEventAggregator"/>.\n    /// </summary>\n    /// <typeparam name="TEvent1">The first event to subscribe</typeparam>\n    /// <typeparam name="TEvent2">The second event to subscribe</typeparam>\n    /// <typeparam name="TEvent3">The third event to subscribe</typeparam>\n    /// <typeparam name="TEvent4">The fourth event to subscribe</typeparam>\n    /// <typeparam name="TEvent5">The fifth event to subscribe</typeparam>\n    /// <typeparam name="TEvent6">The sixth event to subscribe</typeparam>\n    /// <typeparam name="TEvent7">The seventh event to subscribe</typeparam>\n    /// <typeparam name="TEvent8">The eighth event to subscribe</typeparam>\n    /// <typeparam name="TEvent9">The ninth event to subscribe</typeparam>\n    /// <typeparam name="TEvent10">The tenth event to subscribe</typeparam>\n    public interface IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7, TEvent8, TEvent9, TEvent10> : IEventSubscriber<TEvent1, TEvent2, TEvent3, TEvent4, TEvent5, TEvent6, TEvent7, TEvent8, TEvent9>\n    {\n        /// <summary>\n        /// Gets called when the event was published\n        /// </summary>\n        /// <param name="eventData">The event instance</param>\n        void OnEvent(TEvent10 eventData);\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.ViewModels.IViewModelFactory.g.cs",label:"MvvmGen.ViewModels.IViewModelFactory.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nnamespace MvvmGen.ViewModels\n{\n    /// <summary>\n    /// Represents a factory that can create ViewModel instances with a parameterless <see cref="Create"/> method.\n    /// You get a generated implementation of this interface by setting the <see cref="ViewModelGenerateFactoryAttribute"/> on your ViewModel.\n    /// </summary>\n    public interface IViewModelFactory<out T>\n    {\n        /// <summary>\n        /// Creates and returns a ViewModel instance.\n        /// </summary>\n        /// <returns>The created ViewModel instance</returns>\n        T Create();\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\MvvmGen.ViewModels.ViewModelBase.g.cs",label:"MvvmGen.ViewModels.ViewModelBase.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// ***********************************************************************\n// \u26a1 MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen\n// Copyright \xa9 by Thomas Claudius Huber\n// Licensed under the MIT license => See LICENSE file in repository root\n// ***********************************************************************\n\n#nullable enable\n\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace MvvmGen.ViewModels\n{\n    /// <summary>\n    /// A base class for view models\n    /// </summary>\n    public class ViewModelBase : INotifyPropertyChanged\n    {\n        /// <inheritdoc cref="INotifyPropertyChanged.PropertyChanged"/>\n        public event PropertyChangedEventHandler? PropertyChanged;\n\n        /// <summary>\n        /// Raises the <see cref="PropertyChanged"/> event\n        /// </summary>\n        /// <param name="e">A <see cref="PropertyChangedEventArgs"/> that contains the name of the changed property.</param>\n        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)\n        {\n            PropertyChanged?.Invoke(this, e);\n        }\n\n        /// <summary>\n        /// Raises the <see cref="PropertyChanged"/> event\n        /// </summary>\n        /// <param name="propertyName">(optional) The name of the changed property.</param>\n        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n        {\n            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));\n            InvalidateCommands(propertyName);\n        }\n\n        /// <summary>\n        /// Invalidates the commands for the changed propertyName\n        /// </summary>\n        /// <param name="propertyName">The name of the changed property.</param>\n        protected virtual void InvalidateCommands(string? propertyName) \\{ }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\MvvmGen.PureCodeGeneration.SourceGenerators\\MvvmGen.ViewModelGenerator\\PropChangeDemo.Person.g.cs",label:"PropChangeDemo.Person.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated>\n//   This code was generated for you by\n//   \u26a1 MvvmGen, a tool created by Thomas Claudius Huber (https://www.thomasclaudiushuber.com)\n//   Generator version: 1.4.0\n// </auto-generated>\n#nullable enable\nusing MvvmGen.Commands;\nusing MvvmGen.Events;\nusing MvvmGen.ViewModels;\n\nnamespace PropChangeDemo\n{\n    partial class Person : global::MvvmGen.ViewModels.ViewModelBase\n    {\n        public Person()\n        {\n            this.OnInitialize();\n        }\n\n        partial void OnInitialize();\n\n        public string FirstName\n        {\n            get => _FirstName;\n            set\n            {\n                if (_FirstName != value)\n                {\n                    _FirstName = value;\n                    OnPropertyChanged("FirstName");\n                }\n            }\n        }\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\PropertyChanged.SourceGenerator\\PropertyChanged.SourceGenerator.PropertyChangedSourceGenerator\\Attributes.cs",label:"Attributes.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated>\n//     Auto-generated by PropertyChanged.SourceGenerator 1.0.8.0\n// </auto-generated>\nnamespace PropertyChanged.SourceGenerator\n{\n    /// <summary>\n    /// Specifies the accessibility of a generated property getter\n    /// </summary>\n    internal enum Getter\n    {\n        Public = 6,\n        ProtectedInternal = 5,\n        Internal = 4,\n        Protected = 3,\n        PrivateProtected = 2,\n        Private = 1,\n    }\n\n    /// <summary>\n    /// Specifies the accessibility of a generated property getter\n    /// </summary>\n    internal enum Setter\n    {\n        Public = 6,\n        ProtectedInternal = 5,\n        Internal = 4,\n        Protected = 3,\n        PrivateProtected = 2,\n        Private = 1,\n    }\n\n    /// <summary>\n    /// Instruct PropertyChanged.SourceGenerator to generate a property which implements INPC using this backing field\n    /// </summary>\n    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = false)]\n    [global::System.Diagnostics.Conditional("DEBUG")]\n    internal class NotifyAttribute : global::System.Attribute\n    {\n        /// <summary>\n        /// Generate a property whose name is derived from the name of this field, with a public getter and setter\n        /// </summary>\n        public NotifyAttribute() \\{ }\n\n        /// <summary>\n        /// Generate a property with the given name, and optionally the given getter and setter accessibilities\n        /// </summary>\n        /// <param name="name">Name of the generated property</param>\n        /// <param name="get">Accessibility of the generated getter</param>\n        /// <param name="set">Accessibility of the generated setter</param>\n        public NotifyAttribute(string name, Getter get = Getter.Public, Setter set = Setter.Public) \\{ }\n\n        /// <summary>\n        /// Generate a property whose name is derived from the name of this field, with the given getter and optionally setter accessibilities\n        /// </summary>\n        /// <param name="get">Accessibility of the generated getter</param>\n        /// <param name="set">Accessibility of the generated setter</param>\n        public NotifyAttribute(Getter get, Setter set = Setter.Public) \\{ }\n\n        /// <summary>\n        /// Generate a property whose name is derived from the name of this field, with a public getter and the given setter accessibility\n        /// </summary>\n        /// <param name="set">Accessibility of the generated setter</param>\n        public NotifyAttribute(Setter set) \\{ }\n\n        /// <summary>\n        /// If <c>true</c>, the generated property will be <c>virtual</c>.\n        /// </summary>\n        public bool IsVirtual \\{ get; set; }\n    }\n\n    /// <summary>\n    /// Instruct PropertyChanged.SourceGenerator to also raise INPC notifications for the named properties whenever the property this is applied to changes\n    /// </summary>\n    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)]\n    [global::System.Diagnostics.Conditional("DEBUG")]\n    internal class AlsoNotifyAttribute : global::System.Attribute\n    {\n        /// <summary>\n        /// Raise INPC notifications for the given properties when the property generated for this backing field changes\n        /// </summary>\n        /// <param name="otherProperties">Other properties to raise INPC notifications for</param>\n        public AlsoNotifyAttribute(params string[] otherProperties) \\{ }\n    }\n\n    /// <summary>\n    /// Instruct PropertyChanged.SourceGenerator to raise INPC notifications for this property whenever one of the named generated properties is changed\n    /// </summary>\n    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = false)]\n    [global::System.Diagnostics.Conditional("DEBUG")]\n    internal class DependsOnAttribute : global::System.Attribute\n    {\n        /// <summary>\n        /// Raise an INPC notification for this property whenever one of the named properties is changed\n        /// </summary>\n        /// <param name="dependsOn">Other properties this property depends on</param>\n        public DependsOnAttribute(params string[] dependsOn) \\{ }\n    }\n\n    /// <summary>\n    /// Instruct PropertyChanged.SourceGenerator to assign true to this boolean property whenver any generated member changes\n    /// </summary>\n    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)]\n    [global::System.Diagnostics.Conditional("DEBUG")]\n    internal class IsChangedAttribute : global::System.Attribute\n    {\n    }\n\n    /// <summary>\n    /// Specifies an attribute which will be added to the generated property for this backing field\n    /// </summary>\n    /// <remarks>\n    /// The string passed to this attribute will be placed verbatim into the generated code. All types must therefore by fully-qualified.\n    /// </remarks>\n    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)]\n    [global::System.Diagnostics.Conditional("DEBUG")]\n    internal class PropertyAttributeAttribute : global::System.Attribute\n    {\n        /// <summary>\n        /// Specify an attribute which iwll be added to the generated property for this backing field\n        /// </summary>\n        /// <param name="attribute">An attribute to place on the generated property</param>\n        public PropertyAttributeAttribute(string attribute) \\{ }\n    }\n}\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\PropertyChanged.SourceGenerator\\PropertyChanged.SourceGenerator.PropertyChangedSourceGenerator\\EventArgsCache.g.cs",label:"EventArgsCache.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated>\n//     Auto-generated by PropertyChanged.SourceGenerator 1.0.8.0\n// </auto-generated>\nnamespace PropertyChanged.SourceGenerator.Internal\n{\n    internal static class EventArgsCache\n    {\n        private static global::System.ComponentModel.PropertyChangedEventArgs _PropertyChanged_FirstName;\n        public static global::System.ComponentModel.PropertyChangedEventArgs PropertyChanged_FirstName => _PropertyChanged_FirstName ??= new global::System.ComponentModel.PropertyChangedEventArgs(@"FirstName");\n    }\n}\n\n'})})}),(0,a.jsx)(o.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\mvvmgen\\src\\PropChangeDemo\\obj\\GX\\PropertyChanged.SourceGenerator\\PropertyChanged.SourceGenerator.PropertyChangedSourceGenerator\\Person.g.cs",label:"Person.g.cs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'// <auto-generated>\n//     Auto-generated by PropertyChanged.SourceGenerator 1.0.8.0\n// </auto-generated>\n#nullable enable\nnamespace PropChangeDemo\n{\n    partial class Person : global::System.ComponentModel.INotifyPropertyChanged\n    {\n        /// <inheritdoc />\n        public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;\n        public string? FirstName\n        {\n            get => this._FirstName;\n            set\n            {\n                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(value, this._FirstName))\n                {\n                    this._FirstName = value;\n                    this.OnPropertyChanged(global::PropertyChanged.SourceGenerator.Internal.EventArgsCache.PropertyChanged_FirstName);\n                }\n            }\n        }\n        /// <summary>\n        /// Raises the PropertyChanged event\n        /// </summary>\n        /// <param name="eventArgs">The EventArgs to use to raise the event</param>\n        protected virtual void OnPropertyChanged(global::System.ComponentModel.PropertyChangedEventArgs eventArgs)\n        {\n            this.PropertyChanged?.Invoke(this, eventArgs);\n        }\n    }\n}\n\n'})})})]}),"\n",(0,a.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,a.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(81630).A+"",children:"Download Example project mvvmgen "})})}),"\n",(0,a.jsx)(n.h3,{id:"share-mvvmgen",children:"Share mvvmgen"}),"\n",(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fmvvmgen&quote=mvvmgen",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fmvvmgen&text=mvvmgen:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fmvvmgen",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fmvvmgen&title=mvvmgen",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fmvvmgen&title=mvvmgen&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2Fmvvmgen",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/mvvmgen",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/mvvmgen"})}),"\n",(0,a.jsx)(l.Ay,{})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}},72866:(e,n,t)=>{t.d(n,{Ay:()=>o,RM:()=>s});var r=t(74848),a=t(28453);const s=[{value:"Category &quot;Serializer&quot; has the following generators:",id:"category-serializer-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function i(e){const n={a:"a",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"category-serializer-has-the-following-generators",children:'Category "Serializer" has the following generators:'}),"\n",(0,r.jsxs)(n.p,{children:["1 ",(0,r.jsx)(n.a,{href:"/docs/GenPack",children:"GenPack"})]}),"\n",(0,r.jsxs)(n.p,{children:["2 ",(0,r.jsx)(n.a,{href:"/docs/jsonConverterSourceGenerator",children:"jsonConverterSourceGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["3 ",(0,r.jsx)(n.a,{href:"/docs/JsonPolymorphicGenerator",children:"JsonPolymorphicGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["4 ",(0,r.jsx)(n.a,{href:"/docs/Nino",children:"Nino"})]}),"\n",(0,r.jsxs)(n.p,{children:["5 ",(0,r.jsx)(n.a,{href:"/docs/ProtobufSourceGenerator",children:"ProtobufSourceGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["6 ",(0,r.jsx)(n.a,{href:"/docs/Schema",children:"Schema"})]}),"\n",(0,r.jsxs)(n.p,{children:["7 ",(0,r.jsx)(n.a,{href:"/docs/StackXML",children:"StackXML"})]}),"\n",(0,r.jsxs)(n.p,{children:["8 ",(0,r.jsx)(n.a,{href:"/docs/System.Text.Json",children:"System.Text.Json"})]}),"\n",(0,r.jsxs)(n.p,{children:["9 ",(0,r.jsx)(n.a,{href:"/docs/VYaml",children:"VYaml"})]}),"\n",(0,r.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/Categories/Serializer",children:"Serializer"})})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},81630:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/mvvmgen-70c425024cb7ca1cb66366e1112d8a43.zip"}}]);