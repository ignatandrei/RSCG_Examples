"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7449],{61007:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/files/StackXML-98fd5d1df8667320d7784a8a463cf686.zip"},72866:(e,t,n)=>{n.d(t,{Ay:()=>a,RM:()=>l});var i=n(74848),s=n(28453);const l=[{value:"Category &quot;Serializer&quot; has the following generators:",id:"category-serializer-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function r(e){const t={a:"a",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"category-serializer-has-the-following-generators",children:'Category "Serializer" has the following generators:'}),"\n",(0,i.jsxs)(t.p,{children:["1 ",(0,i.jsx)(t.a,{href:"/docs/Csvcsharp",children:"Csvcsharp"})]}),"\n",(0,i.jsxs)(t.p,{children:["2 ",(0,i.jsx)(t.a,{href:"/docs/GenPack",children:"GenPack"})]}),"\n",(0,i.jsxs)(t.p,{children:["3 ",(0,i.jsx)(t.a,{href:"/docs/jsonConverterSourceGenerator",children:"jsonConverterSourceGenerator"})]}),"\n",(0,i.jsxs)(t.p,{children:["4 ",(0,i.jsx)(t.a,{href:"/docs/JsonPolymorphicGenerator",children:"JsonPolymorphicGenerator"})]}),"\n",(0,i.jsxs)(t.p,{children:["5 ",(0,i.jsx)(t.a,{href:"/docs/Nino",children:"Nino"})]}),"\n",(0,i.jsxs)(t.p,{children:["6 ",(0,i.jsx)(t.a,{href:"/docs/ProtobufSourceGenerator",children:"ProtobufSourceGenerator"})]}),"\n",(0,i.jsxs)(t.p,{children:["7 ",(0,i.jsx)(t.a,{href:"/docs/Schema",children:"Schema"})]}),"\n",(0,i.jsxs)(t.p,{children:["8 ",(0,i.jsx)(t.a,{href:"/docs/StackXML",children:"StackXML"})]}),"\n",(0,i.jsxs)(t.p,{children:["9 ",(0,i.jsx)(t.a,{href:"/docs/System.Text.Json",children:"System.Text.Json"})]}),"\n",(0,i.jsxs)(t.p,{children:["10 ",(0,i.jsx)(t.a,{href:"/docs/VYaml",children:"VYaml"})]}),"\n",(0,i.jsx)(t.h3,{id:"see-category",children:"See category"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/docs/Categories/Serializer",children:"Serializer"})})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},94727:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>x,contentTitle:()=>o,default:()=>m,frontMatter:()=>h,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"RSCG-Examples/StackXML","title":"212 - StackXML","description":"Generating XML serializer without reflection","source":"@site/docs/RSCG-Examples/StackXML.md","sourceDirName":"RSCG-Examples","slug":"/StackXML","permalink":"/RSCG_Examples/v2/docs/StackXML","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2120,"frontMatter":{"sidebar_position":2120,"title":"212 - StackXML","description":"Generating XML serializer without reflection","slug":"/StackXML"},"sidebar":"tutorialSidebar","previous":{"title":"211 - ShadowWriterNullobjects","permalink":"/RSCG_Examples/v2/docs/ShadowWriterNullobjects"},"next":{"title":"213 - Blazor.TSRuntime","permalink":"/RSCG_Examples/v2/docs/Blazor.TSRuntime"}}');var s=n(74848),l=n(28453),r=n(11470),a=n(19365),d=n(14252),c=n(72866);const h={sidebar_position:2120,title:"212 - StackXML",description:"Generating XML serializer without reflection",slug:"/StackXML"},o="StackXML  by Zing",x={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Why",id:"why",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Features",id:"features",level:2},{value:"Quirks",id:"quirks",level:2},{value:"Performance",id:"performance",level:2},{value:"Example data classes",id:"example-data-classes",level:2},{value:"Simple Attribute",id:"simple-attribute",level:3},{value:"Text body",id:"text-body",level:3},{value:"Lists",id:"lists",level:3},{value:"Delimited attributes",id:"delimited-attributes",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share StackXML",id:"share-stackxml",level:3},...c.RM];function g(e){const t={a:"a",admonition:"admonition",code:"code",del:"del",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"stackxml--by-zing",children:"StackXML  by Zing"})}),"\n",(0,s.jsx)(d.A,{toc:u}),"\n",(0,s.jsx)(t.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/StackXML/",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/nuget/dt/StackXML?label=StackXML",alt:"Nuget"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/ZingBallyhoo/StackXML",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/last-commit/ZingBallyhoo/StackXML?label=updated",alt:"GitHub last commit"})}),"\n",(0,s.jsx)(t.img,{src:"https://img.shields.io/github/stars/ZingBallyhoo/StackXML?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,s.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.h3,{id:"info",children:"Info"}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["Name: ",(0,s.jsx)(t.strong,{children:"StackXML"})]}),(0,s.jsx)(t.p,{children:"Stack based zero-allocation XML serializer and deserializer powered by C# 9 source generators"}),(0,s.jsx)(t.p,{children:"Author: Zing"}),(0,s.jsxs)(t.p,{children:["NuGet:\n",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/StackXML/",children:"https://www.nuget.org/packages/StackXML/"})})]}),(0,s.jsxs)(t.p,{children:["You can find more details at ",(0,s.jsx)(t.a,{href:"https://github.com/ZingBallyhoo/StackXML",children:"https://github.com/ZingBallyhoo/StackXML"})]}),(0,s.jsxs)(t.p,{children:["Source: ",(0,s.jsx)(t.a,{href:"https://github.com/ZingBallyhoo/StackXML",children:"https://github.com/ZingBallyhoo/StackXML"})]})]}),"\n",(0,s.jsx)(t.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsx)(t.h1,{id:"stackxml",children:"StackXML"}),(0,s.jsx)(t.p,{children:"Stack based zero*-allocation XML serializer and deserializer powered by C# 9 source generators."}),(0,s.jsx)(t.h2,{id:"why",children:"Why"}),(0,s.jsx)(t.p,{children:"Premature optimisation :)"}),(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"From Nuget"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.nuget.org/packages/StackXML",children:"https://www.nuget.org/packages/StackXML"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"As a submodule"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Add the following to your project to reference the serializer and enable the source generator"}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<ItemGroup>\n    <ProjectReference Include="..\\StackXML\\StackXML\\StackXML.csproj" />\n    <ProjectReference Include="..\\StackXML\\StackXML.Generator\\StackXML.Generator.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />\n</ItemGroup>\n'})}),(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The common entrypoint for deserializing is ",(0,s.jsx)(t.code,{children:"XmlReadBuffer.ReadStatic(ReadOnlySpan<char>)"})]}),"\n",(0,s.jsxs)(t.li,{children:["The common entrypoint for serializing is ",(0,s.jsx)(t.code,{children:"XmlWriteBuffer.SerializeStatic(IXmlSerializable)"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["This method returns a string, to avoid this allocation you will need create your own instance of XmlWriteBuffer and ensure it is disposed safely like ",(0,s.jsx)(t.code,{children:"SerializeStatic"})," does. The ",(0,s.jsx)(t.code,{children:"ToSpan"})," method returns the char span containing the serialized text"]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(t.h2,{id:"features",children:"Features"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Fully structured XML serialization and deserialization with 0 allocations, apart from the output data structure when deserializing. Serialization uses a pooled buffer from ",(0,s.jsx)(t.code,{children:"ArrayPool<char>.Shared"})," that is released when the serializer is disposed.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"XmlReadBuffer"})," handles deserialization"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"XmlWriteBuffer"})," handles serialization"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"XmlCls"})," maps a type to an element","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Used for the serializer to know what the element name should be"}),"\n",(0,s.jsx)(t.li,{children:"Used by the deserializer to map to IXmlSerializable bodies with no explicit name"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"XmlField"})," maps to attributes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"XmlBody"})," maps to child elements"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"IXmlSerializable"})," (not actually an interface, see quirks) represents a type that can be read from or written to XML","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Can be manually added as a base, or the source generator will add it automatically to any type that has XML attributes"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Parsing delimited attributes into typed lists","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"<test list='1,2,3,4,6,7,8,9'>"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"[XmlField(\"list\")] [XmlSplitStr(',')] public List<int> m_list;"})}),"\n",(0,s.jsx)(t.li,{children:"Using StrReader and StrWriter, see below"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["StrReader and StrWriter classes, for reading and writing (comma usually) delimited strings with 0 allocations.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Can be used in a fully structured way by adding ",(0,s.jsx)(t.code,{children:"StrField"})," attributes to fields on a ",(0,s.jsx)(t.code,{children:"ref partial struct"})," (not compatible with XmlSplitStr, maybe future consideration)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Agnostic logging through ",(0,s.jsx)(t.a,{href:"https://github.com/damianh/LibLog",children:"LibLog"})]}),"\n"]}),(0,s.jsx)(t.h2,{id:"quirks",children:"Quirks"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Invalid data inside or between elements is ignored","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"<int>0<this still deserializes as zero with no errors</int>"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"<test>anything here is completely missed<testInner/><test/>"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Spaces between attributes is not required by the deserializer","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["e.g ",(0,s.jsx)(t.code,{children:"<test one='aa'two='bb'>"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["XmlSerializer must be disposed otherwise the pooled buffer will be leaked.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"XmlSerializer.SerializeStatic gives of an example of how this should be done in a safe way"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.del,{children:"Data types can only be classes, not structs."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.del,{children:"All types must inherit from IXmlSerializable (either manually or added by the source generator) which is actually an abstract class and not an interface"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.del,{children:"Using structs would be possible but I don't think its worth the box"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.del,{children:"Types from another assembly can't be used as a field/body. Needs fixing"})}),"\n",(0,s.jsxs)(t.li,{children:["All elements in the data to parse must be defined in the type in one way or another, otherwise an exception will be thrown.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The deserializer relies on complete parsing and has no way of skipping elements"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Comments within a primitive type body will cause the parser to crash (future consideration...)","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"<n>\x3c!--uh oh--\x3ehi<n>"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Null strings are currently output exactly the same as empty strings... might need changing"}),"\n",(0,s.jsxs)(t.li,{children:["The source generator emits a parameterless constructor on all XML types that initializes ",(0,s.jsx)(t.code,{children:"List<T>"})," bodies to an empty list","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Trying to serialize a null list currently crashes the serializer...."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["When decoding XML text an extra allocation of the input string is required","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"WebUtility.HtmlDecode does not provide an overload taking a span, but the method taking a string turns it into a span anyway.. hmm"}),"\n",(0,s.jsx)(t.li,{children:"The decode is avoided where possible"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Would be nice to be able to use ",(0,s.jsx)(t.a,{href:"https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/System/Text/ValueStringBuilder.cs",children:"ValueStringBuilder"}),". See ",(0,s.jsx)(t.a,{href:"https://github.com/dotnet/runtime/issues/25587",children:"https://github.com/dotnet/runtime/issues/25587"})]}),"\n"]}),(0,s.jsx)(t.h2,{id:"performance",children:"Performance"}),(0,s.jsxs)(t.p,{children:["Very simple benchmark, loading a single element and getting the string value of its attribute ",(0,s.jsx)(t.code,{children:"attribute"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ini",children:"\nBenchmarkDotNet=v0.13.0, OS=Windows 10.0.19045\nIntel Core i5-6600K CPU 3.50GHz (Skylake), 1 CPU, 4 logical and 4 physical cores\n.NET SDK=9.0.200\n  [Host]     : .NET 9.0.2 (9.0.225.6610), X64 RyuJIT\n  DefaultJob : .NET 9.0.2 (9.0.225.6610), X64 RyuJIT\n"})}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Mean"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Error"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"StdDev"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Ratio"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"RatioSD"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Gen 0"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Gen 1"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Gen 2"}),(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Allocated"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ReadBuffer"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"60.16 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.791 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.740 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"1.00"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.00"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.0178"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"56 B"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"XmlReader_"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"823.91 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"6.864 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"6.421 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"13.70"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.23"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"3.2892"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"10,336 B"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"XDocument_"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"1,047.87 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"17.032 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"15.931 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"17.42"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.27"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"3.4218"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"10,760 B"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"XmlDocument"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"1,435.48 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"15.425 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"14.428 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"23.87"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0.43"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"3.9063"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"12,248 B"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"XmlSerializer"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"6,398.11 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"88.037 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"82.350 ns"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"106.37"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"2.14"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"4.5471"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"-"}),(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"14,305 B"})]})]})]}),(0,s.jsx)(t.h2,{id:"example-data-classes",children:"Example data classes"}),(0,s.jsx)(t.h3,{id:"simple-attribute",children:"Simple Attribute"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<test attribute='value'/>\n"})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[XmlCls("test"))]\npublic partial class Test\n{\n    [XmlField("attribute")]\n    public string m_attribute;\n}\n'})}),(0,s.jsx)(t.h3,{id:"text-body",children:"Text body"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<test2>\n    <name><![CDATA[Hello world]]></name>\n</test2>\n"})}),(0,s.jsxs)(t.p,{children:["CData can be configured by setting ",(0,s.jsx)(t.code,{children:"cdataMode"})," for serializing and deserializing"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<test2>\n    <name>Hello world</name>\n</test2>\n"})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[XmlCls("test2"))]\npublic partial class Test2\n{\n    [XmlBody("name")]\n    public string m_name;\n}\n'})}),(0,s.jsx)(t.h3,{id:"lists",children:"Lists"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<container>\n    <listItem name=\"hey\" age='25'/>\n    <listItem name=\"how\" age='2'/>\n    <listItem name=\"are\" age='4'/>\n    <listItem name=\"you\" age='53'/>\n</container>\n"})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[XmlCls("listItem"))]\npublic partial class ListItem\n{\n    [XmlField("name")]\n    public string m_name;\n    \n    [XmlField("age")]\n    public int m_age; // could also be byte, uint etc\n}\n\n[XmlCls("container")]\npublic partial class ListContainer\n{\n    [XmlBody()]\n    public List<ListItem> m_items; // no explicit name, is taken from XmlCls\n}\n'})}),(0,s.jsx)(t.h3,{id:"delimited-attributes",children:"Delimited attributes"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<musicTrack id='5' artists='5,6,1,24,535'>\n    <n><![CDATA[Awesome music]]></n>\n    <tags>cool</tags>\n    <tags>awesome</tags>\n    <tags>fresh</tags>\n</musicTrack>\n"})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[XmlCls("musicTrack"))]\npublic partial class MusicTrack\n{\n    [XmlField("id")]\n    public int m_id;\n    \n    [XmlBody("n")]\n    public string m_name;\n    \n    [XmlField("artists"), XmlSplitStr(\',\')]\n    public List<int> m_artists;\n    \n    [XmlBody("tags")]\n    public List<string> m_tags;\n}\n'})})]}),"\n",(0,s.jsx)(t.h3,{id:"about",children:"About"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Generating XML serializer without reflection"})}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(t.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(a.A,{value:"csproj",label:"CSharp Project",children:[(0,s.jsxs)(t.p,{children:["This is the CSharp Project that references ",(0,s.jsx)(t.strong,{children:"StackXML"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers {10}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<ItemGroup>\n\t\t<PackageReference Include="StackXML" Version="1.0.0" OutputItemType="Analyzer"  />\n\t</ItemGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n</Project>\n\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StackXML\\src\\Serializer\\Program.cs",label:"Program.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"StackXML"})," in ",(0,s.jsx)(t.em,{children:"Program.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using SerializerDemo;\nusing StackXML;\n\nvar p= new Person() \\{ Name= "Andrei Ignat" , Age=55};\nvar str= XmlWriteBuffer.SerializeStatic(p);\nConsole.WriteLine(str);\nvar entity = XmlReadBuffer.ReadStatic<Person>(str);\nConsole.WriteLine("name is "+entity.Name);\n'})})]}),(0,s.jsxs)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StackXML\\src\\Serializer\\Person.cs",label:"Person.cs",children:[(0,s.jsxs)(t.p,{children:["This is the use of ",(0,s.jsx)(t.strong,{children:"StackXML"})," in ",(0,s.jsx)(t.em,{children:"Person.cs"})]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nusing StackXML;\n\nnamespace SerializerDemo;\n[XmlCls("person")]\npublic partial class Person\n{\n    [XmlField("age")]\n    public int Age;\n    [XmlField("name")]\n    public string Name = string.Empty;\n\n    \n}\n\n\n'})})]})]}),"\n",(0,s.jsx)(t.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,s.jsx)(t.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(a.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\StackXML\\src\\Serializer\\obj\\GX\\StackXML.Generator\\StackXML.Generator.XmlGenerator\\SerializerDemo.Person.cs",label:"SerializerDemo.Person.cs",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing StackXML;\nusing StackXML.Str;\n\n// <auto-generated/>\n#pragma warning disable\n\nnamespace SerializerDemo\n{\n    /// <inheritdoc cref="Person"/>\n    partial class Person : IXmlSerializable\n    {\n        public virtual ReadOnlySpan<char> GetNodeName()\n        {\n            return "person";\n        }\n\n        public virtual bool ParseAttribute(ref XmlReadBuffer buffer, ReadOnlySpan<char> name, ReadOnlySpan<char> value)\n        {\n            switch (name)\n            {\n                case "age": {\n                    this.Age = buffer.m_params.m_stringParser.Parse<System.Int32>(value);\n                    return true;\n                }\n                case "name": {\n                    this.Name = value.ToString();\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public virtual void SerializeAttributes(ref XmlWriteBuffer buffer)\n        {\n            buffer.PutAttribute("age", Age);\n            buffer.PutAttribute("name", Name);\n        }\n\n        public virtual bool ParseFullBody(ref XmlReadBuffer buffer, ReadOnlySpan<char> bodySpan, ref int end)\n        {\n            return false;\n        }\n        public virtual bool ParseSubBody(ref XmlReadBuffer buffer, ReadOnlySpan<char> name, ReadOnlySpan<char> bodySpan, ReadOnlySpan<char> innerBodySpan, ref int end, ref int endInner)\n        {\n            return false;\n        }\n\n        public virtual void SerializeBody(ref XmlWriteBuffer buffer)\n        {\n        }\n    }\n}\n'})})})}),"\n",(0,s.jsx)(t.h2,{id:"useful",children:"Useful"}),"\n",(0,s.jsx)(t.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(61007).A+"",children:"Download Example project StackXML "})})}),"\n",(0,s.jsx)(t.h3,{id:"share-stackxml",children:"Share StackXML"}),"\n",(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStackXML&quote=StackXML",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStackXML&text=StackXML:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStackXML",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStackXML&title=StackXML",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStackXML&title=StackXML&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FStackXML",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StackXML",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/StackXML"})}),"\n",(0,s.jsx)(t.p,{children:"aaa"}),"\n",(0,s.jsx)(c.Ay,{})]})}function m(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);