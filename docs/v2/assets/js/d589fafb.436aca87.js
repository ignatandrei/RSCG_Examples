"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2998],{2542:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>k,toc:()=>p});var o=a(7462),n=(a(7294),a(4137)),s=a(3992),l=a(425),i=a(8839);const c={sidebar_position:240,title:"24 - Rocks",description:"Creating mocks for testing interfaces/classes",slug:"/Rocks"},r="Rocks  by Json Bock",k={unversionedId:"RSCG-Examples/Rocks",id:"RSCG-Examples/Rocks",title:"24 - Rocks",description:"Creating mocks for testing interfaces/classes",source:"@site/docs/RSCG-Examples/Rocks.md",sourceDirName:"RSCG-Examples",slug:"/Rocks",permalink:"/RSCG_Examples/v2/docs/Rocks",draft:!1,tags:[],version:"current",sidebarPosition:240,frontMatter:{sidebar_position:240,title:"24 - Rocks",description:"Creating mocks for testing interfaces/classes",slug:"/Rocks"},sidebar:"tutorialSidebar",previous:{title:"23 - Microsoft.NET.Sdk.Razor.SourceGenerators",permalink:"/RSCG_Examples/v2/docs/Microsoft.NET.Sdk.Razor.SourceGenerators"},next:{title:"25 - mapperly",permalink:"/RSCG_Examples/v2/docs/mapperly"}},m={},p=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Download PDF",id:"download-pdf",level:3},{value:"Share Rocks",id:"share-rocks",level:3}],d={toc:p},u="wrapper";function h(e){let{components:t,...c}=e;return(0,n.kt)(u,(0,o.Z)({},d,c,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"rocks--by-json-bock"},"Rocks  by Json Bock"),(0,n.kt)(i.Z,{toc:p,mdxType:"TOCInline"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Rocks/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Rocks?label=Rocks",alt:"Nuget"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/JasonBock/Rocks/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/JasonBock/Rocks?label=updated",alt:"GitHub last commit"})),"\n",(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/JasonBock/Rocks?style=social",alt:"GitHub Repo stars"})),(0,n.kt)("h2",{id:"details"},"Details"),(0,n.kt)("h3",{id:"info"},"Info"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Name: ",(0,n.kt)("strong",{parentName:"p"},"Rocks")),(0,n.kt)("p",{parentName:"admonition"},"A mocking library based on the Compiler API."),(0,n.kt)("p",{parentName:"admonition"},"Author: Json Bock"),(0,n.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Rocks/"},"https://www.nuget.org/packages/Rocks/")),"   "),(0,n.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md"},"https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md")),(0,n.kt)("p",{parentName:"admonition"},"Source : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/JasonBock/Rocks/"},"https://github.com/JasonBock/Rocks/"))),(0,n.kt)("h3",{id:"original-readme"},"Original Readme"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("h1",{parentName:"admonition",id:"rocks"},"Rocks"),(0,n.kt)("p",{parentName:"admonition"},"A mocking library based on the Compiler APIs (Roslyn + Mocks)"),(0,n.kt)("h2",{parentName:"admonition",id:"getting-started"},"Getting Started"),(0,n.kt)("p",{parentName:"admonition"},"Reference the ",(0,n.kt)("inlineCode",{parentName:"p"},"Rocks")," ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Rocks"},"NuGet package")," - that's it."),(0,n.kt)("h3",{parentName:"admonition",id:"prerequisites"},"Prerequisites"),(0,n.kt)("p",{parentName:"admonition"},"The Rocks package targets .NET Standard 2.0 for host flexibility. Note that Rocks looks for, and generates, code that targets .NET 7."),(0,n.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,n.kt)("p",{parentName:"admonition"},"To make a mock, you take an interface or an unsealed class that has virtual members:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IAmSimple\n{\n  void TargetAction();\n}\n")),(0,n.kt)("p",{parentName:"admonition"},"and you use Rocks to create a mock with expectations, along with verifying its usage:"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"var expectations = Rock.Create<IAmSimple>();\nexpectations.Methods().TargetAction();\n\nvar mock = expectations.Instance();\nmock.TargetAction();\n\nexpectations.Verify();\n")),(0,n.kt)("p",{parentName:"admonition"},"More details can be found on the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/JasonBock/Rocks/blob/main/docs/Quickstart.md"},"Quickstart page"),"."),(0,n.kt)("h2",{parentName:"admonition",id:"additional-documentation"},"Additional Documentation"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://discord.com/channels/1035376645864955974/1035376646326321194"},"Discord Server")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/JasonBock/Rocks/blob/main/changelog.md"},"Changelog")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices"},"Unit testing best practices with .NET Core and .NET Standard")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ecoAPM/BenchmarkMockNet"},"BenchmarkMockNet"))),(0,n.kt)("h2",{parentName:"admonition",id:"feedback"},"Feedback"),(0,n.kt)("p",{parentName:"admonition"},"If you run into any issues, please add them ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/JasonBock/Rocks/issues"},"here"),".")),(0,n.kt)("h3",{id:"about"},"About"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Creating mocks for testing interfaces/classes")),(0,n.kt)("h2",{id:"how-to-use"},"How to use"),(0,n.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,n.kt)("p",null,"This is the CSharp Project that references ",(0,n.kt)("strong",{parentName:"p"},"Rocks")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {17}",showLineNumbers:!0,"{17}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.5.0" />\n    <PackageReference Include="MSTest.TestAdapter" Version="2.2.10" />\n    <PackageReference Include="MSTest.TestFramework" Version="2.2.10" />\n    <PackageReference Include="coverlet.collector" Version="3.2.0" />\n    <PackageReference Include="Rocks" Version="7.1.0" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include="..\\MockRock\\MockRock.csproj" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n</Project>\n\n'))),(0,n.kt)(l.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Rocks\\src\\TestClock\\TestClock.cs",label:"TestClock.cs",mdxType:"TabItem"},(0,n.kt)("p",null,"  This is the use of ",(0,n.kt)("strong",{parentName:"p"},"Rocks")," in ",(0,n.kt)("em",{parentName:"p"},"TestClock.cs")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"\nnamespace TestClock;\n\n[TestClass]\npublic class TestClock\n{\n    [TestMethod]\n    public void TestMyClock()\n    {\n        var expectations = Rock.Create<IMyClock>();\n        expectations.Methods().GetNow().Returns(DateTime.Now.AddYears(-1));\n        \n        var mock = expectations.Instance();\n        var data= mock.GetNow();\n        Assert.AreEqual(DateTime.Now.Year -1, data.Year);\n        expectations.Verify();\n    }\n}\n")))),(0,n.kt)("h3",{id:"generated-files"},"Generated Files"),(0,n.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Rocks\\src\\TestClock\\obj\\GX\\Rocks\\Rocks.RockCreateGenerator\\IMyClock_Rock_Create.g.cs",label:"IMyClock_Rock_Create.g.cs",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Rocks.Extensions;\nusing System.Collections.Generic;\nusing System.Collections.Immutable;\n#nullable enable\n\nnamespace MockRock\n{\n    internal static class CreateExpectationsOfIMyClockExtensions\n    {\n        internal static global::Rocks.Expectations.MethodExpectations<global::MockRock.IMyClock> Methods(this global::Rocks.Expectations.Expectations<global::MockRock.IMyClock> @self) =>\n            new(@self);\n        \n        internal static global::MockRock.IMyClock Instance(this global::Rocks.Expectations.Expectations<global::MockRock.IMyClock> @self)\n        {\n            if (!@self.WasInstanceInvoked)\n            {\n                @self.WasInstanceInvoked = true;\n                var @mock = new RockIMyClock(@self);\n                @self.MockType = @mock.GetType();\n                return @mock;\n            }\n            else\n            {\n                throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");\n            }\n        }\n        \n        private sealed class RockIMyClock\n            : global::MockRock.IMyClock\n        {\n            private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;\n            \n            public RockIMyClock(global::Rocks.Expectations.Expectations<global::MockRock.IMyClock> @expectations)\n            {\n                this.handlers = @expectations.Handlers;\n            }\n            \n            [global::Rocks.MemberIdentifier(0, "global::System.DateTime GetNow()")]\n            public global::System.DateTime GetNow()\n            {\n                if (this.handlers.TryGetValue(0, out var @methodHandlers))\n                {\n                    var @methodHandler = @methodHandlers[0];\n                    @methodHandler.IncrementCallCount();\n                    var @result = @methodHandler.Method is not null ?\n                        ((global::System.Func<global::System.DateTime>)@methodHandler.Method)() :\n                        ((global::Rocks.HandlerInformation<global::System.DateTime>)@methodHandler).ReturnValue;\n                    return @result!;\n                }\n                \n                throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.DateTime GetNow()");\n            }\n            \n            [global::Rocks.MemberIdentifier(1, "global::System.DateTime GetUtcNow()")]\n            public global::System.DateTime GetUtcNow()\n            {\n                if (this.handlers.TryGetValue(1, out var @methodHandlers))\n                {\n                    var @methodHandler = @methodHandlers[0];\n                    @methodHandler.IncrementCallCount();\n                    var @result = @methodHandler.Method is not null ?\n                        ((global::System.Func<global::System.DateTime>)@methodHandler.Method)() :\n                        ((global::Rocks.HandlerInformation<global::System.DateTime>)@methodHandler).ReturnValue;\n                    return @result!;\n                }\n                \n                throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.DateTime GetUtcNow()");\n            }\n            \n        }\n    }\n    \n    internal static class MethodExpectationsOfIMyClockExtensions\n    {\n        internal static global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime> GetNow(this global::Rocks.Expectations.MethodExpectations<global::MockRock.IMyClock> @self) =>\n            new global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime>(@self.Add<global::System.DateTime>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));\n        internal static global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime> GetUtcNow(this global::Rocks.Expectations.MethodExpectations<global::MockRock.IMyClock> @self) =>\n            new global::Rocks.MethodAdornments<global::MockRock.IMyClock, global::System.Func<global::System.DateTime>, global::System.DateTime>(@self.Add<global::System.DateTime>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));\n    }\n}\n\n')))),(0,n.kt)("h2",{id:"usefull"},"Usefull"),(0,n.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{target:"_blank",href:a(715).Z},"Download Example project Rocks "))),(0,n.kt)("h3",{id:"download-pdf"},"Download PDF"),(0,n.kt)("p",null,(0,n.kt)("a",{target:"_blank",href:a(2596).Z},"Download PDF Rocks ")),(0,n.kt)("h3",{id:"share-rocks"},"Share Rocks"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&quote=Rocks",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&text=Rocks:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&title=Rocks",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,n.kt)("li",null,(0,n.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks&title=Rocks&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FRocks",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Rocks"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Rocks")))}h.isMDXComponent=!0},2596:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/files/Rocks-2a2bb4aa4f885f6648963e62dfd423df.pdf"},715:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/files/Rocks-c1652c83ce48e9fc987240c9227a4b3c.zip"}}]);