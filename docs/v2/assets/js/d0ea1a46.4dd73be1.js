"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[7393],{8679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>x,frontMatter:()=>p,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"RSCG-Examples/UnitGenerator","title":"76 - UnitGenerator","description":"Generating classes instead of value objects( e.g. int)","source":"@site/docs/RSCG-Examples/UnitGenerator.md","sourceDirName":"RSCG-Examples","slug":"/UnitGenerator","permalink":"/RSCG_Examples/v2/docs/UnitGenerator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":760,"frontMatter":{"sidebar_position":760,"title":"76 - UnitGenerator","description":"Generating classes instead of value objects( e.g. int)","slug":"/UnitGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"75 - StaticReflection","permalink":"/RSCG_Examples/v2/docs/StaticReflection"},"next":{"title":"77 - DynamicsMapper","permalink":"/RSCG_Examples/v2/docs/DynamicsMapper"}}');var i=t(74848),a=t(28453),o=t(11470),s=t(19365),l=t(14252),c=t(82474);const p={sidebar_position:760,title:"76 - UnitGenerator",description:"Generating classes instead of value objects( e.g. int)",slug:"/UnitGenerator"},d="UnitGenerator  by Cysharp, Inc",u={},h=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Introduction",id:"introduction",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"UnitOfAttribute",id:"unitofattribute",level:2},{value:"UnitGenerateOptions",id:"unitgenerateoptions",level:2},{value:"ImplicitOperator",id:"implicitoperator",level:3},{value:"ParseMethod",id:"parsemethod",level:3},{value:"MinMaxMethod",id:"minmaxmethod",level:3},{value:"ArithmeticOperator",id:"arithmeticoperator",level:3},{value:"ValueArithmeticOperator",id:"valuearithmeticoperator",level:3},{value:"Comparable",id:"comparable",level:3},{value:"WithoutComparisonOperator",id:"withoutcomparisonoperator",level:3},{value:"Validate",id:"validate",level:3},{value:"Normalize",id:"normalize",level:3},{value:"JsonConverter",id:"jsonconverter",level:3},{value:"JsonConverterDictionaryKeySupport",id:"jsonconverterdictionarykeysupport",level:3},{value:"MessagePackFormatter",id:"messagepackformatter",level:3},{value:"DapperTypeHandler",id:"dappertypehandler",level:3},{value:"EntityFrameworkValueConverter",id:"entityframeworkvalueconverter",level:3},{value:"Use for Unity",id:"use-for-unity",level:2},{value:"License",id:"license",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share UnitGenerator",id:"share-unitgenerator",level:3},...c.RM];function m(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"unitgenerator--by-cysharp-inc",children:"UnitGenerator  by Cysharp, Inc"})}),"\n",(0,i.jsx)(l.A,{toc:h}),"\n",(0,i.jsx)(n.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/UnitGenerator/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nuget/dt/UnitGenerator?label=UnitGenerator",alt:"Nuget"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/UnitGenerator",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/last-commit/Cysharp/UnitGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,i.jsx)(n.img,{src:"https://img.shields.io/github/stars/Cysharp/UnitGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,i.jsx)(n.h2,{id:"details",children:"Details"}),"\n",(0,i.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Name: ",(0,i.jsx)(n.strong,{children:"UnitGenerator"})]}),(0,i.jsx)(n.p,{children:"C# Source Generator to create value-object, inspired by units of measure."}),(0,i.jsx)(n.p,{children:"Author: Cysharp, Inc"}),(0,i.jsxs)(n.p,{children:["NuGet:\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/UnitGenerator/",children:"https://www.nuget.org/packages/UnitGenerator/"})})]}),(0,i.jsxs)(n.p,{children:["You can find more details at ",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/UnitGenerator",children:"https://github.com/Cysharp/UnitGenerator"})]}),(0,i.jsxs)(n.p,{children:["Source: ",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/UnitGenerator",children:"https://github.com/Cysharp/UnitGenerator"})]})]}),"\n",(0,i.jsx)(n.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.h1,{id:"unitgenerator",children:"UnitGenerator"}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/UnitGenerator/actions",children:(0,i.jsx)(n.img,{src:"https://github.com/Cysharp/UnitGenerator/workflows/Build-Debug/badge.svg",alt:"GitHub Actions"})})," ",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/UnitGenerator/releases",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/release/Cysharp/UnitGenerator.svg",alt:"Releases"})})]}),(0,i.jsxs)(n.p,{children:["C# Source Generator to create ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Value_object",children:"Value object"})," pattern, also inspired by ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/units-of-measure",children:"units of measure"})," to support all arithmetic operators and serialization."]}),(0,i.jsxs)(n.p,{children:["NuGet: ",(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/UnitGenerator",children:"UnitGenerator"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Install-Package UnitGenerator\n"})}),(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),(0,i.jsx)(n.p,{children:"For example, Identifier, UserId is comparable only to UserId, and cannot be assigned to any other type. Also, arithmetic operations are not allowed."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using UnitGenerator;\n\n[UnitOf(typeof(int))]\npublic readonly partial struct UserId { }\n"})}),(0,i.jsx)(n.p,{children:"will generates"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[System.ComponentModel.TypeConverter(typeof(UserIdTypeConverter))]\npublic readonly partial struct UserId : IEquatable<UserId> \n{\n    readonly int value;\n    \n    public UserId(int value)\n    {\n        this.value = value;\n    }\n\n    public readonly int AsPrimitive() => value;\n    public static explicit operator int(UserId value) => value.value;\n    public static explicit operator UserId(int value) => new UserId(value);\n    public bool Equals(UserId other) => value.Equals(other.value);\n    public override bool Equals(object? obj) => // snip...\n    public override int GetHashCode() => value.GetHashCode();\n    public override string ToString() => value.ToString();\n    public static bool operator ==(in UserId x, in UserId y) => x.value.Equals(y.value);\n    public static bool operator !=(in UserId x, in UserId y) => !x.value.Equals(y.value);\n\n    private class UserIdTypeConverter : System.ComponentModel.TypeConverter\n    {\n        // snip...\n    }\n}\n"})}),(0,i.jsxs)(n.p,{children:["However, Hp in games, should not be allowed to be assigned to other types, but should support arithmetic operations with int. For example double heal = ",(0,i.jsx)(n.code,{children:"target.Hp = Hp.Min(target.Hp * 2, target.MaxHp)"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[UnitOf(typeof(int), UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod)]\npublic readonly partial struct Hp { }\n\n// -- generates\n\n[System.ComponentModel.TypeConverter(typeof(HpTypeConverter))]\npublic readonly partial struct Hp\n    : IEquatable<Hp>\n#if NET7_0_OR_GREATER\n    , IEqualityOperators<Hp, Hp, bool>\n#endif    \n    , IComparable<Hp>\n#if NET7_0_OR_GREATER\n    , IComparisonOperators<Hp, Hp, bool>\n#endif\n#if NET7_0_OR_GREATER\n    , IAdditionOperators<Hp, Hp, Hp>\n    , ISubtractionOperators<Hp, Hp, Hp>\n    , IMultiplyOperators<Hp, Hp, Hp>\n    , IDivisionOperators<Hp, Hp, Hp>\n    , IUnaryPlusOperators<Hp, Hp>\n    , IUnaryNegationOperators<Hp, Hp>\n    , IIncrementOperators<Hp>\n    , IDecrementOperators<Hp>\n#endif    \n{\n    readonly int value;\n\n    public Hp(int value)\n    {\n        this.value = value;\n    }\n\n    public int AsPrimitive() => value;\n    public static explicit operator int(Hp value) => value.value;\n    public static explicit operator Hp(int value) => new Hp(value);\n    public bool Equals(Hp other) => value.Equals(other.value);\n    public override bool Equals(object? obj) => // snip...\n    public override int GetHashCode() => value.GetHashCode();\n    public override string ToString() => value.ToString();\n    public static bool operator ==(in Hp x, in Hp y) => x.value.Equals(y.value);\n    public static bool operator !=(in Hp x, in Hp y) => !x.value.Equals(y.value);\n    private class HpTypeConverter : System.ComponentModel.TypeConverter { /* snip... */ }\n\n    // UnitGenerateOptions.ArithmeticOperator\n    public static Hp operator +(Hp x, Hp y) => new Hp(checked((int)(x.value + y.value)));\n    public static Hp operator -(Hp x, Hp y) => new Hp(checked((int)(x.value - y.value)));\n    public static Hp operator *(Hp x, Hp y) => new Hp(checked((int)(x.value * y.value)));\n    public static Hp operator /(Hp x, Hp y) => new Hp(checked((int)(x.value / y.value)));\n    public static Hp operator ++(Hp x) => new Hp(checked((int)(x.value + 1)));\n    public static Hp operator --(Hp x) => new Hp(checked((int)(x.value - 1)));\n    public static Hp operator +(A value) => new((int)(+value.value));\n    public static Hp operator -(A value) => new((int)(-value.value));\n\n    // UnitGenerateOptions.ValueArithmeticOperator\n    public static Hp operator +(Hp x, in int y) => new Hp(checked((int)(x.value + y)));\n    public static Hp operator -(Hp x, in int y) => new Hp(checked((int)(x.value - y)));\n    public static Hp operator *(Hp x, in int y) => new Hp(checked((int)(x.value * y)));\n    public static Hp operator /(Hp x, in int y) => new Hp(checked((int)(x.value / y)));\n\n    // UnitGenerateOptions.Comparable\n    public int CompareTo(Hp other) => value.CompareTo(other.value);\n    public static bool operator >(Hp x, Hp y) => x.value > y.value;\n    public static bool operator <(Hp x, Hp y) => x.value < y.value;\n    public static bool operator >=(Hp x, Hp y) => x.value >= y.value;\n    public static bool operator <=(Hp x, Hp y) => x.value <= y.value;\n\n    // UnitGenerateOptions.MinMaxMethod\n    public static Hp Min(Hp x, Hp y) => new Hp(Math.Min(x.value, y.value));\n    public static Hp Max(Hp x, Hp y) => new Hp(Math.Max(x.value, y.value));\n}\n"})}),(0,i.jsxs)(n.p,{children:["You can configure with ",(0,i.jsx)(n.code,{children:"UnitGenerateOptions"}),", which method to implement."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Flags]\nenum UnitGenerateOptions\n{\n    None = 0,\n    ImplicitOperator = 1,\n    ParseMethod = 1 << 1,\n    MinMaxMethod = 1 << 2,\n    ArithmeticOperator = 1 << 3,\n    ValueArithmeticOperator = 1 << 4,\n    Comparable = 1 << 5,\n    Validate = 1 << 6,\n    JsonConverter = 1 << 7,\n    MessagePackFormatter = 1 << 8,\n    DapperTypeHandler = 1 << 9,\n    EntityFrameworkValueConverter = 1 << 10,\n    WithoutComparisonOperator = 1 << 11,\n    JsonConverterDictionaryKeySupport = 1 << 12,\n    Normalize = 1 << 13,\n}\n"})}),(0,i.jsxs)(n.p,{children:["UnitGenerateOptions has some serializer support. For example, a result like ",(0,i.jsx)(n.code,{children:"Serialize(userId) => { Value = 1111 }"})," is awful. The value-object should be serialized natively, i.e. ",(0,i.jsx)(n.code,{children:"Serialize(useId) => 1111"}),", and should be able to be added directly to a database, etc."]}),(0,i.jsxs)(n.p,{children:["Currently UnitGenerator supports ",(0,i.jsx)(n.a,{href:"https://github.com/neuecc/MessagePack-CSharp",children:"MessagePack for C#"}),", System.Text.Json(JsonSerializer), ",(0,i.jsx)(n.a,{href:"https://github.com/StackExchange/Dapper",children:"Dapper"})," and EntityFrameworkCore."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[UnitOf(typeof(int), UnitGenerateOptions.MessagePackFormatter)]\npublic readonly partial struct UserId { }\n\n// -- generates\n\n[MessagePackFormatter(typeof(UserIdMessagePackFormatter))]\npublic readonly partial struct UserId \n{\n    class UserIdMessagePackFormatter : IMessagePackFormatter<UserId>\n    {\n        public void Serialize(ref MessagePackWriter writer, UserId value, MessagePackSerializerOptions options)\n        {\n            options.Resolver.GetFormatterWithVerify<int>().Serialize(ref writer, value.value, options);\n        }\n\n        public UserId Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\n        {\n            return new UserId(options.Resolver.GetFormatterWithVerify<int>().Deserialize(ref reader, options));\n        }\n    }\n}\n"})}),(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#unitofattribute",children:"UnitOfAttribute"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#unitgenerateoptions",children:"UnitGenerateOptions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#implicitoperator",children:"ImplicitOperator"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#parsemethod",children:"ParseMethod"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#minmaxmethod",children:"MinMaxMethod"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#arithmeticoperator",children:"ArithmeticOperator"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#valuearithmeticoperator",children:"ValueArithmeticOperator"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#comparable",children:"Comparable"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#withoutcomparisonoperator",children:"WithoutComparisonOperator"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#validate",children:"Validate"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#normalize",children:"Normalize"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#jsonconverter",children:"JsonConverter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#jsonconverterdictionarykeysupport",children:"JsonConverterDictionaryKeySupport"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#messagepackformatter",children:"MessagePackFormatter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dappertypehandler",children:"DapperTypeHandler"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#entityframeworkvalueconverter",children:"EntityFrameworkValueConverter"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#use-for-unity",children:"Use for Unity"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#license",children:"License"})}),"\n"]}),(0,i.jsx)(n.h2,{id:"unitofattribute",children:"UnitOfAttribute"}),(0,i.jsxs)(n.p,{children:["When referring to the UnitGenerator, it generates a internal ",(0,i.jsx)(n.code,{children:"UnitOfAttribute"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace UnitGenerator\n{\n    [AttributeUsage(AttributeTargets.Struct, AllowMultiple = false)]\n    internal class UnitOfAttribute : Attribute\n    {\n        public Type Type { get; }\n        public UnitGenerateOptions Options { get; }\n        public UnitArithmeticOperators ArithmeticOperators { get; set; }\n        public string ToStringFormat { get; set; }\n        \n        public UnitOfAttribute(Type type, UnitGenerateOptions options = UnitGenerateOptions.None) { ... }\n    }\n}\n"})}),(0,i.jsxs)(n.p,{children:["You can attach this attribute with any specified underlying type to ",(0,i.jsx)(n.code,{children:"readonly partial struct"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[UnitOf(typeof(Guid))]\npublic readonly partial struct GroupId { }\n\n[UnitOf(typeof(string))]\npublic readonly partial struct Message { }\n\n[UnitOf(typeof(long))]\npublic readonly partial struct Power { }\n\n[UnitOf(typeof(byte[]))]\npublic readonly partial struct Image { }\n\n[UnitOf(typeof(DateTime))]\npublic readonly partial struct StartDate { }\n\n[UnitOf(typeof((string street, string city)))]\npublic readonly partial struct StreetAddress { }\n"})}),(0,i.jsxs)(n.p,{children:["Standard UnitOf(",(0,i.jsx)(n.code,{children:"UnitGenerateOptions.None"}),") generates value constructor, ",(0,i.jsx)(n.code,{children:"explicit operator"}),", ",(0,i.jsx)(n.code,{children:"implement IEquatable "}),", ",(0,i.jsx)(n.code,{children:"override GetHashCode"}),", ",(0,i.jsx)(n.code,{children:"override ToString"}),", ",(0,i.jsx)(n.code,{children:"=="})," and ",(0,i.jsx)(n.code,{children:"!="})," operator, ",(0,i.jsx)(n.code,{children:"TypeConverter"})," for ASP.NET Core binding, ",(0,i.jsx)(n.code,{children:"AsPrimitive"})," method."]}),(0,i.jsxs)(n.p,{children:["If you want to retrieve primitive value, use ",(0,i.jsx)(n.code,{children:"AsPrimitive()"})," instead of ",(0,i.jsx)(n.code,{children:".Value"}),". This is intended to avoid casual getting of primitive values (using the arithmetic operator option if available)."]}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["When type is bool, also implements ",(0,i.jsx)(n.code,{children:"true"}),", ",(0,i.jsx)(n.code,{children:"false"}),", ",(0,i.jsx)(n.code,{children:"!"})," operators."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static bool operator true(Foo x) => x.value;\npublic static bool operator false(Foo x) => !x.value;\npublic static bool operator !(Foo x) => !x.value;\n"})}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["When type is Guid or ",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/Ulid",children:"Ulid"}),", also implements ",(0,i.jsx)(n.code,{children:"New()"})," and ",(0,i.jsx)(n.code,{children:"New***()"})," static operator."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static GroupId New();\npublic static GroupId NewGroupId();\n"})}),(0,i.jsxs)(n.p,{children:["Second parameter ",(0,i.jsx)(n.code,{children:"UnitGenerateOptions options"})," can configure which method to implement, default is ",(0,i.jsx)(n.code,{children:"None"}),"."]}),(0,i.jsxs)(n.p,{children:["Optional named parameter: ",(0,i.jsx)(n.code,{children:"ArithmeticOperators"})," can configure which generates operators specifically. Default is ",(0,i.jsx)(n.code,{children:"Number"}),". (This can be used if UnitGenerateOptions.ArithmeticOperator is specified.)"]}),(0,i.jsxs)(n.p,{children:["Optional named parameter: ",(0,i.jsx)(n.code,{children:"ToStringFormat"})," can configure ",(0,i.jsx)(n.code,{children:"ToString"})," format. Default is null and output as $",(0,i.jsx)(n.code,{children:"{0}"}),"."]}),(0,i.jsx)(n.h2,{id:"unitgenerateoptions",children:"UnitGenerateOptions"}),(0,i.jsxs)(n.p,{children:["When referring to the UnitGenerator, it generates a internal ",(0,i.jsx)(n.code,{children:"UnitGenerateOptions"})," that is bit flag of which method to implement."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Flags]\ninternal enum UnitGenerateOptions\n{\n    None = 0,\n    ImplicitOperator = 1,\n    ParseMethod = 2,\n    MinMaxMethod = 4,\n    ArithmeticOperator = 8,\n    ValueArithmeticOperator = 16,\n    Comparable = 32,\n    Validate = 64,\n    JsonConverter = 128,\n    MessagePackFormatter = 256,\n    DapperTypeHandler = 512,\n    EntityFrameworkValueConverter = 1024,\n}\n"})}),(0,i.jsxs)(n.p,{children:["You can use this with ",(0,i.jsx)(n.code,{children:"[UnitOf]"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[UnitOf(typeof(int), UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod)]\npublic readonly partial struct Strength { }\n\n[UnitOf(typeof(DateTime), UnitGenerateOptions.Validate | UnitGenerateOptions.ParseMethod | UnitGenerateOptions.Comparable)]\npublic readonly partial struct EndDate { }\n\n[UnitOf(typeof(double), UnitGenerateOptions.ParseMethod | UnitGenerateOptions.MinMaxMethod | UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.Validate | UnitGenerateOptions.JsonConverter | UnitGenerateOptions.MessagePackFormatter | UnitGenerateOptions.DapperTypeHandler | UnitGenerateOptions.EntityFrameworkValueConverter)]\npublic readonly partial struct AllOptionsStruct { }\n"})}),(0,i.jsx)(n.p,{children:"You can setup project default options like this."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"internal static class UnitOfOptions\n{\n    public const UnitGenerateOptions Default = UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod;\n}\n\n[UnitOf(typeof(int), UnitOfOptions.Default)]\npublic readonly partial struct Hp { }\n"})}),(0,i.jsx)(n.h3,{id:"implicitoperator",children:"ImplicitOperator"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Default\npublic static explicit operator U(T value) => value.value;\npublic static explicit operator T(U value) => new T(value);\n\n// UnitGenerateOptions.ImplicitOperator\npublic static implicit operator U(T value) => value.value;\npublic static implicit operator T(U value) => new T(value);\n"})}),(0,i.jsx)(n.h3,{id:"parsemethod",children:"ParseMethod"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static T Parse(string s)\npublic static bool TryParse(string s, out T result)\n"})}),(0,i.jsx)(n.h3,{id:"minmaxmethod",children:"MinMaxMethod"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static T Min(T x, T y)\npublic static T Max(T x, T y)\n"})}),(0,i.jsx)(n.h3,{id:"arithmeticoperator",children:"ArithmeticOperator"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static T operator +(in T x, in T y) => new T(checked((U)(x.value + y.value)));\npublic static T operator -(in T x, in T y) => new T(checked((U)(x.value - y.value)));\npublic static T operator *(in T x, in T y) => new T(checked((U)(x.value * y.value)));\npublic static T operator /(in T x, in T y) => new T(checked((U)(x.value / y.value)));\npublic static T operator +(T value) => new((U)(+value.value));\npublic static T operator -(T value) => new((U)(-value.value));\npublic static T operator ++(T x) => new T(checked((U)(x.value + 1)));\npublic static T operator --(T x) => new T(checked((U)(x.value - 1)));\n"})}),(0,i.jsxs)(n.p,{children:["In addition,  all members conforming to ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/ja-jp/dotnet/api/system.numerics.inumber-1",children:"System.Numerics.INumber"})," are generated."]}),(0,i.jsxs)(n.p,{children:["If you want to suppress this and generate only certain operators, you can use the the ",(0,i.jsx)(n.code,{children:"ArithmeticOperatros"})," option of ",(0,i.jsx)(n.code,{children:"[UnitOf]"})," attribute as follows:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[UnitOf(\n    typeof(int), \n    UnitGenerateOptions.ArithmeticOperator,\n    ArithmeticOperators = UnitArithmeticOperators.Addition | UnitArithmeticOperators.Subtraction)]\npublic readonly partial struct Hp { }\n"})}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Generates"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"UnitArithmeticOperators.Addition"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T operator +(T, T)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"UnitArithmeticOperators.Subtraction"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T operator -(T, T)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"UnitArithmeticOperators.Multiply"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"T operator *(T, T)"}),",  ",(0,i.jsx)(n.code,{children:"T operator +(T)"}),", ",(0,i.jsx)(n.code,{children:"T operator-(T)"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"UnitArithmeticOperators.Division"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"T operator /(T, T)"}),",  ",(0,i.jsx)(n.code,{children:"T operator +(T)"}),", ",(0,i.jsx)(n.code,{children:"T operator-(T)"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"UnitArithmeticOperators.Increment"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T operator ++(T)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"UnitArithmeticOperators.Decrement"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T operator --(T)"})})]})]})]}),(0,i.jsx)(n.h3,{id:"valuearithmeticoperator",children:"ValueArithmeticOperator"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static T operator +(in T x, in U y) => new T(checked((U)(x.value + y)));\npublic static T operator -(in T x, in U y) => new T(checked((U)(x.value - y)));\npublic static T operator *(in T x, in U y) => new T(checked((U)(x.value * y)));\npublic static T operator /(in T x, in U y) => new T(checked((U)(x.value / y)));\n"})}),(0,i.jsx)(n.h3,{id:"comparable",children:"Comparable"}),(0,i.jsxs)(n.p,{children:["Implements ",(0,i.jsx)(n.code,{children:"IComparable"})," and ",(0,i.jsx)(n.code,{children:">"}),", ",(0,i.jsx)(n.code,{children:"<"}),", ",(0,i.jsx)(n.code,{children:">="}),", ",(0,i.jsx)(n.code,{children:"<="})," operators."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public U CompareTo(T other) => value.CompareTo(other.value);\npublic static bool operator >(in T x, in T y) => x.value > y.value;\npublic static bool operator <(in T x, in T y) => x.value < y.value;\npublic static bool operator >=(in T x, in T y) => x.value >= y.value;\npublic static bool operator <=(in T x, in T y) => x.value <= y.value;\n"})}),(0,i.jsx)(n.h3,{id:"withoutcomparisonoperator",children:"WithoutComparisonOperator"}),(0,i.jsxs)(n.p,{children:["Without implements ",(0,i.jsx)(n.code,{children:">"}),", ",(0,i.jsx)(n.code,{children:"<"}),", ",(0,i.jsx)(n.code,{children:">="}),", ",(0,i.jsx)(n.code,{children:"<="})," operators. For example, useful for Guid."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[UnitOf(typeof(Guid), UnitGenerateOptions.Comparable | UnitGenerateOptions.WithoutComparisonOperator)]\npublic readonly partial struct FooId { }\n"})}),(0,i.jsx)(n.h3,{id:"validate",children:"Validate"}),(0,i.jsxs)(n.p,{children:["Implements ",(0,i.jsx)(n.code,{children:"partial void Validate()"})," method that is called on constructor."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// You can implement this custom validate method.\n[UnitOf(typeof(int), UnitGenerateOptions.Validate)]\npublic readonly partial struct SampleValidate\n{\n    // impl here.\n    private partial void Validate()\n    {\n        if (value > 9999) throw new Exception("Invalid value range: " + value);\n    }\n}\n\n// Source generator generate this codes.\npublic T(int value)\n{\n    this.value = value;\n    this.Validate();\n}\n \nprivate partial void Validate();\n'})}),(0,i.jsx)(n.h3,{id:"normalize",children:"Normalize"}),(0,i.jsxs)(n.p,{children:["Implements ",(0,i.jsx)(n.code,{children:"partial void Normalize(ref T value)"})," method that is called on constructor."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// You can implement this custom normalize method to change value during initialization\n[UnitOf(typeof(int), UnitGenerateOptions.Normalize)]\npublic readonly partial struct SampleValidate\n{\n    // impl here.\n    private partial void Normalize(ref int value)\n    {\n        value = Math.Max(value, 9999);\n    }\n}\n\n// Source generator generate this codes.\npublic T(int value)\n{\n    this.value = value;\n    this.Normalize(ref this.value);\n}\n \nprivate partial void Normalize(ref int value);\n"})}),(0,i.jsx)(n.h3,{id:"jsonconverter",children:"JsonConverter"}),(0,i.jsxs)(n.p,{children:["Implements ",(0,i.jsx)(n.code,{children:"System.Text.Json"}),"'s ",(0,i.jsx)(n.code,{children:"JsonConverter"}),". It will be used ",(0,i.jsx)(n.code,{children:"JsonSerializer"})," automatically."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[JsonConverter(typeof(UserIdJsonConverter))]\npublic readonly partial struct UserId\n{\n    class UserIdJsonConverter : JsonConverter<UserId>\n}\n"})}),(0,i.jsx)(n.h3,{id:"jsonconverterdictionarykeysupport",children:"JsonConverterDictionaryKeySupport"}),(0,i.jsxs)(n.p,{children:["Implements ",(0,i.jsx)(n.code,{children:"JsonConverter"}),"'s ",(0,i.jsx)(n.code,{children:"WriteAsPropertyName/ReadAsPropertyName"}),". It supports from .NET 6, supports Dictionary's Key."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var dict = Dictionary<UserId, int>\nJsonSerializer.Serialize(dict);\n"})}),(0,i.jsx)(n.h3,{id:"messagepackformatter",children:"MessagePackFormatter"}),(0,i.jsxs)(n.p,{children:["Implements MessagePack for C#'s ",(0,i.jsx)(n.code,{children:"MessagePackFormatter"}),". It will be used ",(0,i.jsx)(n.code,{children:"MessagePackSerializer"})," automatically."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[MessagePackFormatter(typeof(UserIdMessagePackFormatter))]\npublic readonly partial struct UserId\n{\n    class UserIdMessagePackFormatter : IMessagePackFormatter<UserId>\n}\n"})}),(0,i.jsx)(n.h3,{id:"dappertypehandler",children:"DapperTypeHandler"}),(0,i.jsx)(n.p,{children:"Implements Dapper's TypeHandler by public accessibility. TypeHandler is automatically registered at the time of Module initialization."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public readonly partial struct UserId\n{\n    public class UserIdTypeHandler : Dapper.SqlMapper.TypeHandler<UserId>\n}\n\n[ModuleInitializer]\npublic static void AddTypeHandler()\n{\n    Dapper.SqlMapper.AddTypeHandler(new A.ATypeHandler());\n}\n"})}),(0,i.jsx)(n.h3,{id:"entityframeworkvalueconverter",children:"EntityFrameworkValueConverter"}),(0,i.jsx)(n.p,{children:"Implements EntityFrameworkCore's ValueConverter by public accessibility. It is not registered automatically so you need to register manually."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public readonly partial struct UserId\n{\n    public class UserIdValueConverter : ValueConverter<UserId, int>\n}\n\n// setup handler manually\nbuilder.HasConversion(new UserId.UserIdValueConverter());\n"})}),(0,i.jsx)(n.h2,{id:"use-for-unity",children:"Use for Unity"}),(0,i.jsxs)(n.p,{children:["C# Source Generator feature is rely on C# 9.0. If you are using Unity 2021.2, that supports ",(0,i.jsx)(n.a,{href:"https://docs.unity3d.com/2021.2/Documentation/Manual/roslyn-analyzers.html",children:"Source Generators"}),". Add the ",(0,i.jsx)(n.code,{children:"UnitGenerator.dll"})," from the ",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/UnitGenerator/releases",children:"releases page"}),", disable Any Platform, disable Include all platforms and set label as ",(0,i.jsx)(n.code,{children:"RoslynAnalyzer"}),"."]}),(0,i.jsxs)(n.p,{children:["It works in Unity Editor however does not work on IDE because Unity does not generate analyzer reference to ",(0,i.jsx)(n.code,{children:".csproj"}),". We provides ",(0,i.jsx)(n.a,{href:"https://github.com/Cysharp/CsprojModifier",children:"CsprojModifer"})," to analyzer support, uses ",(0,i.jsx)(n.code,{children:"Add analyzer references to generated .csproj"})," supports both IDE and Unity Editor."]}),(0,i.jsx)(n.p,{children:"Unity(2020) does not support C# 9.0 so can not use directly. However, C# Source Genertor supports output source as file."}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create ",(0,i.jsx)(n.code,{children:"UnitSourceGen.csproj"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n    <PropertyGroup>\n        <TargetFramework>net5.0</TargetFramework>\n\n        \x3c!-- add this two lines and configure output path --\x3e\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(ProjectDir)..\\Generated</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n\n    <ItemGroup>\n        \x3c!-- reference UnitGenerator --\x3e\n        <PackageReference Include="UnitGenerator" Version="1.0.0" />\n\n        \x3c!-- add target sources path from Unity --\x3e\n        <Compile Include="..\\MyUnity\\Assets\\Scripts\\Models\\**\\*.cs" />\n    </ItemGroup>\n</Project>\n'})}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["install ",(0,i.jsx)(n.a,{href:"https://dotnet.microsoft.com/download",children:".NET SDK"})," and run this command."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"dotnet build UnitSourceGen.csproj\n"})}),(0,i.jsxs)(n.p,{children:["File will be generated under ",(0,i.jsx)(n.code,{children:"UnitGenerator\\UnitGenerator.SourceGenerator\\*.Generated.cs"}),". ",(0,i.jsx)(n.code,{children:"UnitOfAttribute"})," is also included in generated folder, so at first, run build command and get attribute to configure."]}),(0,i.jsx)(n.h2,{id:"license",children:"License"}),(0,i.jsx)(n.p,{children:"This library is under the MIT License."})]}),"\n",(0,i.jsx)(n.h3,{id:"about",children:"About"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Generating classes instead of value objects( e.g. int)"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(n.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsxs)(s.A,{value:"csproj",label:"CSharp Project",children:[(0,i.jsxs)(n.p,{children:["This is the CSharp Project that references ",(0,i.jsx)(n.strong,{children:"UnitGenerator"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"showLineNumbers {16}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="UnitGenerator" Version="1.5.1">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n</Project>\n\n'})})]}),(0,i.jsxs)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnitGenerator\\src\\UnitDemo\\Program.cs",label:"Program.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"UnitGenerator"})," in ",(0,i.jsx)(n.em,{children:"Program.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// See https://aka.ms/new-console-template for more information\nusing StronglyDemo;\n\nPerson p = new();\n//p.SetBirthDate(1970, 4, 16);\np.SetBirthDate(new YearId(1970) , new MonthId(4),new DayId( 16));\nConsole.WriteLine(p.BirthDate);\n"})})]}),(0,i.jsxs)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnitGenerator\\src\\UnitDemo\\Person.cs",label:"Person.cs",children:[(0,i.jsxs)(n.p,{children:["This is the use of ",(0,i.jsx)(n.strong,{children:"UnitGenerator"})," in ",(0,i.jsx)(n.em,{children:"Person.cs"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"\nusing UnitGenerator;\n\nnamespace StronglyDemo;\n\n\n[UnitOf(typeof(int))]\npublic partial struct YearId { }\n\n[UnitOf(typeof(int))]\npublic partial struct MonthId { }\n\n[UnitOf(typeof(int))]\npublic partial struct DayId { }\n\ninternal class Person\n{\n    public DateTime BirthDate { get; internal set; }\n    public void SetBirthDate(YearId yearId,MonthId monthId,DayId dayId)\n    {\n        BirthDate = new DateTime(yearId.AsPrimitive(), monthId.AsPrimitive(), dayId.AsPrimitive());\n    }\n}\n\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,i.jsx)(n.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnitGenerator\\src\\UnitDemo\\obj\\GX\\UnitGenerator\\UnitGenerator.SourceGenerator\\StronglyDemo.DayId.g.cs",label:"StronglyDemo.DayId.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY UnitGenerator. DO NOT CHANGE IT.\n// </auto-generated>\n#pragma warning disable CS8669\nusing System;\nusing System.Globalization;\n#if NET7_0_OR_GREATER\nusing System.Numerics;\n#endif\nnamespace StronglyDemo\n{\n    [System.ComponentModel.TypeConverter(typeof(DayIdTypeConverter))]\n    readonly partial struct DayId \n        : IEquatable<DayId>\n#if NET7_0_OR_GREATER\n        , IEqualityOperators<DayId, DayId, bool>\n#endif    \n    {\n        readonly int value;\n\n        public int AsPrimitive() => value;\n\n        public DayId(int value)\n        {\n            this.value = value;\n        }\n        \n        public static explicit operator int(DayId value)\n        {\n            return value.value;\n        }\n\n        public static explicit operator DayId(int value)\n        {\n            return new DayId(value);\n        }\n\n        public bool Equals(DayId other)\n        {\n            return value.Equals(other.value);\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            var t = obj.GetType();\n            if (t == typeof(DayId))\n            {\n                return Equals((DayId)obj);\n            }\n            if (t == typeof(int))\n            {\n                return value.Equals((int)obj);\n            }\n\n            return value.Equals(obj);\n        }\n        \n        public static bool operator ==(DayId x, DayId y)\n        {\n            return x.value.Equals(y.value);\n        }\n\n        public static bool operator !=(DayId x, DayId y)\n        {\n            return !x.value.Equals(y.value);\n        }\n\n        public override int GetHashCode()\n        {\n            return value.GetHashCode();\n        }\n\n        public override string ToString() => value.ToString();\n\n        // Default\n        \n        private class DayIdTypeConverter : System.ComponentModel.TypeConverter\n        {\n            private static readonly Type WrapperType = typeof(DayId);\n            private static readonly Type ValueType = typeof(int);\n\n            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType)\n            {\n                if (sourceType == WrapperType || sourceType == ValueType)\n                {\n                    return true;\n                }\n\n                return base.CanConvertFrom(context, sourceType);\n            }\n\n            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType)\n            {\n                if (destinationType == WrapperType || destinationType == ValueType)\n                {\n                    return true;\n                }\n\n                return base.CanConvertTo(context, destinationType);\n            }\n\n            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n            {\n                if (value != null)\n                {\n                    var t = value.GetType();\n                    if (t == typeof(DayId))\n                    {\n                        return (DayId)value;\n                    }\n                    if (t == typeof(int))\n                    {\n                        return new DayId((int)value);\n                    }\n                }\n\n                return base.ConvertFrom(context, culture, value);\n            }\n\n            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)\n            {\n                if (value is DayId wrappedValue)\n                {\n                    if (destinationType == WrapperType)\n                    {\n                        return wrappedValue;\n                    }\n\n                    if (destinationType == ValueType)\n                    {\n                        return wrappedValue.AsPrimitive();\n                    }\n                }\n\n                return base.ConvertTo(context, culture, value, destinationType);\n            }\n        }\n    }\n}\n\n"})})}),(0,i.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnitGenerator\\src\\UnitDemo\\obj\\GX\\UnitGenerator\\UnitGenerator.SourceGenerator\\StronglyDemo.MonthId.g.cs",label:"StronglyDemo.MonthId.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY UnitGenerator. DO NOT CHANGE IT.\n// </auto-generated>\n#pragma warning disable CS8669\nusing System;\nusing System.Globalization;\n#if NET7_0_OR_GREATER\nusing System.Numerics;\n#endif\nnamespace StronglyDemo\n{\n    [System.ComponentModel.TypeConverter(typeof(MonthIdTypeConverter))]\n    readonly partial struct MonthId \n        : IEquatable<MonthId>\n#if NET7_0_OR_GREATER\n        , IEqualityOperators<MonthId, MonthId, bool>\n#endif    \n    {\n        readonly int value;\n\n        public int AsPrimitive() => value;\n\n        public MonthId(int value)\n        {\n            this.value = value;\n        }\n        \n        public static explicit operator int(MonthId value)\n        {\n            return value.value;\n        }\n\n        public static explicit operator MonthId(int value)\n        {\n            return new MonthId(value);\n        }\n\n        public bool Equals(MonthId other)\n        {\n            return value.Equals(other.value);\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            var t = obj.GetType();\n            if (t == typeof(MonthId))\n            {\n                return Equals((MonthId)obj);\n            }\n            if (t == typeof(int))\n            {\n                return value.Equals((int)obj);\n            }\n\n            return value.Equals(obj);\n        }\n        \n        public static bool operator ==(MonthId x, MonthId y)\n        {\n            return x.value.Equals(y.value);\n        }\n\n        public static bool operator !=(MonthId x, MonthId y)\n        {\n            return !x.value.Equals(y.value);\n        }\n\n        public override int GetHashCode()\n        {\n            return value.GetHashCode();\n        }\n\n        public override string ToString() => value.ToString();\n\n        // Default\n        \n        private class MonthIdTypeConverter : System.ComponentModel.TypeConverter\n        {\n            private static readonly Type WrapperType = typeof(MonthId);\n            private static readonly Type ValueType = typeof(int);\n\n            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType)\n            {\n                if (sourceType == WrapperType || sourceType == ValueType)\n                {\n                    return true;\n                }\n\n                return base.CanConvertFrom(context, sourceType);\n            }\n\n            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType)\n            {\n                if (destinationType == WrapperType || destinationType == ValueType)\n                {\n                    return true;\n                }\n\n                return base.CanConvertTo(context, destinationType);\n            }\n\n            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n            {\n                if (value != null)\n                {\n                    var t = value.GetType();\n                    if (t == typeof(MonthId))\n                    {\n                        return (MonthId)value;\n                    }\n                    if (t == typeof(int))\n                    {\n                        return new MonthId((int)value);\n                    }\n                }\n\n                return base.ConvertFrom(context, culture, value);\n            }\n\n            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)\n            {\n                if (value is MonthId wrappedValue)\n                {\n                    if (destinationType == WrapperType)\n                    {\n                        return wrappedValue;\n                    }\n\n                    if (destinationType == ValueType)\n                    {\n                        return wrappedValue.AsPrimitive();\n                    }\n                }\n\n                return base.ConvertTo(context, culture, value, destinationType);\n            }\n        }\n    }\n}\n\n"})})}),(0,i.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnitGenerator\\src\\UnitDemo\\obj\\GX\\UnitGenerator\\UnitGenerator.SourceGenerator\\StronglyDemo.YearId.g.cs",label:"StronglyDemo.YearId.g.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY UnitGenerator. DO NOT CHANGE IT.\n// </auto-generated>\n#pragma warning disable CS8669\nusing System;\nusing System.Globalization;\n#if NET7_0_OR_GREATER\nusing System.Numerics;\n#endif\nnamespace StronglyDemo\n{\n    [System.ComponentModel.TypeConverter(typeof(YearIdTypeConverter))]\n    readonly partial struct YearId \n        : IEquatable<YearId>\n#if NET7_0_OR_GREATER\n        , IEqualityOperators<YearId, YearId, bool>\n#endif    \n    {\n        readonly int value;\n\n        public int AsPrimitive() => value;\n\n        public YearId(int value)\n        {\n            this.value = value;\n        }\n        \n        public static explicit operator int(YearId value)\n        {\n            return value.value;\n        }\n\n        public static explicit operator YearId(int value)\n        {\n            return new YearId(value);\n        }\n\n        public bool Equals(YearId other)\n        {\n            return value.Equals(other.value);\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            var t = obj.GetType();\n            if (t == typeof(YearId))\n            {\n                return Equals((YearId)obj);\n            }\n            if (t == typeof(int))\n            {\n                return value.Equals((int)obj);\n            }\n\n            return value.Equals(obj);\n        }\n        \n        public static bool operator ==(YearId x, YearId y)\n        {\n            return x.value.Equals(y.value);\n        }\n\n        public static bool operator !=(YearId x, YearId y)\n        {\n            return !x.value.Equals(y.value);\n        }\n\n        public override int GetHashCode()\n        {\n            return value.GetHashCode();\n        }\n\n        public override string ToString() => value.ToString();\n\n        // Default\n        \n        private class YearIdTypeConverter : System.ComponentModel.TypeConverter\n        {\n            private static readonly Type WrapperType = typeof(YearId);\n            private static readonly Type ValueType = typeof(int);\n\n            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType)\n            {\n                if (sourceType == WrapperType || sourceType == ValueType)\n                {\n                    return true;\n                }\n\n                return base.CanConvertFrom(context, sourceType);\n            }\n\n            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType)\n            {\n                if (destinationType == WrapperType || destinationType == ValueType)\n                {\n                    return true;\n                }\n\n                return base.CanConvertTo(context, destinationType);\n            }\n\n            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n            {\n                if (value != null)\n                {\n                    var t = value.GetType();\n                    if (t == typeof(YearId))\n                    {\n                        return (YearId)value;\n                    }\n                    if (t == typeof(int))\n                    {\n                        return new YearId((int)value);\n                    }\n                }\n\n                return base.ConvertFrom(context, culture, value);\n            }\n\n            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)\n            {\n                if (value is YearId wrappedValue)\n                {\n                    if (destinationType == WrapperType)\n                    {\n                        return wrappedValue;\n                    }\n\n                    if (destinationType == ValueType)\n                    {\n                        return wrappedValue.AsPrimitive();\n                    }\n                }\n\n                return base.ConvertTo(context, culture, value, destinationType);\n            }\n        }\n    }\n}\n\n"})})}),(0,i.jsx)(s.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\UnitGenerator\\src\\UnitDemo\\obj\\GX\\UnitGenerator\\UnitGenerator.SourceGenerator\\UnitOfAttribute.cs",label:"UnitOfAttribute.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"// <auto-generated>\n// THIS (.cs) FILE IS GENERATED BY UnitGenerator. DO NOT CHANGE IT.\n// </auto-generated>\n#pragma warning disable CS8669\n#pragma warning disable CS8625\nusing System;\n#if NET7_0_OR_GREATER\nusing System.Numerics;\n#endif\n\nnamespace UnitGenerator\n{\n    [AttributeUsage(AttributeTargets.Struct, AllowMultiple = false)]\n    internal class UnitOfAttribute : Attribute\n    {\n        public Type Type { get; }\n        public UnitGenerateOptions Options { get; }\n        public UnitArithmeticOperators ArithmeticOperators { get; set; } = UnitArithmeticOperators.All;\n        public string ToStringFormat { get; set; }\n\n        public UnitOfAttribute(Type type, UnitGenerateOptions options = UnitGenerateOptions.None)\n        {\n            this.Type = type;\n            this.Options = options;\n        }\n    }\n    \n    [Flags]\n    internal enum UnitGenerateOptions\n    {\n        None = 0,\n        ImplicitOperator = 1,\n        ParseMethod = 1 << 1,\n        MinMaxMethod = 1 << 2,\n        ArithmeticOperator = 1 << 3,\n        ValueArithmeticOperator = 1 << 4,\n        Comparable = 1 << 5,\n        Validate = 1 << 6,\n        JsonConverter = 1 << 7,\n        MessagePackFormatter = 1 << 8,\n        DapperTypeHandler = 1 << 9,\n        EntityFrameworkValueConverter = 1 << 10,\n        WithoutComparisonOperator = 1 << 11,\n        JsonConverterDictionaryKeySupport = 1 << 12,\n        Normalize = 1 << 13,\n    }\n\n    [Flags]\n    internal enum UnitArithmeticOperators\n    {\n        All = Addition | Subtraction | Multiply | Division | Increment | Decrement,\n        Addition = 1,\n        Subtraction = 1 << 1,\n        Multiply = 1 << 2,\n        Division = 1 << 3,\n        Increment = 1 << 4,\n        Decrement = 1 << 5,\n    }\n}\n\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"useful",children:"Useful"}),"\n",(0,i.jsx)(n.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(89047).A+"",children:"Download Example project UnitGenerator "})})}),"\n",(0,i.jsx)(n.h3,{id:"share-unitgenerator",children:"Share UnitGenerator"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnitGenerator&quote=UnitGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnitGenerator&text=UnitGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnitGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnitGenerator&title=UnitGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnitGenerator&title=UnitGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FUnitGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnitGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/UnitGenerator"})}),"\n",(0,i.jsx)(n.p,{children:"aaa"}),"\n",(0,i.jsx)(c.Ay,{})]})}function x(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},82474:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>a});var r=t(74848),i=t(28453);const a=[{value:"Category &quot;PrimitiveObsession&quot; has the following generators:",id:"category-primitiveobsession-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function o(e){const n={a:"a",h3:"h3",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"category-primitiveobsession-has-the-following-generators",children:'Category "PrimitiveObsession" has the following generators:'}),"\n",(0,r.jsxs)(n.p,{children:["1 ",(0,r.jsx)(n.a,{href:"/docs/DomainPrimitives",children:"DomainPrimitives"})]}),"\n",(0,r.jsxs)(n.p,{children:["2 ",(0,r.jsx)(n.a,{href:"/docs/Strongly",children:"Strongly"})]}),"\n",(0,r.jsxs)(n.p,{children:["3 ",(0,r.jsx)(n.a,{href:"/docs/StronglyTypedUid",children:"StronglyTypedUid"})]}),"\n",(0,r.jsxs)(n.p,{children:["4 ",(0,r.jsx)(n.a,{href:"/docs/UnitGenerator",children:"UnitGenerator"})]}),"\n",(0,r.jsxs)(n.p,{children:["5 ",(0,r.jsx)(n.a,{href:"/docs/Vogen",children:"Vogen"})]}),"\n",(0,r.jsx)(n.h3,{id:"see-category",children:"See category"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/Categories/PrimitiveObsession",children:"PrimitiveObsession"})})]})}function s(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},89047:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/UnitGenerator-71d18e2b6eb6834aa6f1b3d7d84a5cb5.zip"}}]);