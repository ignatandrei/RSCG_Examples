"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[6060],{42044:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>k,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var n=a(87462),o=(a(67294),a(3905)),r=a(73992),i=a(18679),s=a(68839);const l={sidebar_position:280,title:"28 - Lombok.NET",description:"Generating toString from props/fields. Other demos on site",slug:"/Lombok.NET"},p="Lombok.NET  by Colin Alpert",m={unversionedId:"RSCG-Examples/Lombok.NET",id:"RSCG-Examples/Lombok.NET",title:"28 - Lombok.NET",description:"Generating toString from props/fields. Other demos on site",source:"@site/docs/RSCG-Examples/Lombok.NET.md",sourceDirName:"RSCG-Examples",slug:"/Lombok.NET",permalink:"/RSCG_Examples/v2/docs/Lombok.NET",draft:!1,tags:[],version:"current",sidebarPosition:280,frontMatter:{sidebar_position:280,title:"28 - Lombok.NET",description:"Generating toString from props/fields. Other demos on site",slug:"/Lombok.NET"},sidebar:"tutorialSidebar",previous:{title:"27 - EmbedResourceCSharp",permalink:"/RSCG_Examples/v2/docs/EmbedResourceCSharp"},next:{title:"29 - Gedaq",permalink:"/RSCG_Examples/v2/docs/Gedaq"}},d={},c=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Lombok.NET",id:"share-lomboknet",level:3},{value:"In the same category (EnhancementClass) - 27 other generators",id:"in-the-same-category-enhancementclass---27-other-generators",level:3},{value:"ApparatusAOT",id:"apparatusaot",level:4},{value:"AspectGenerator",id:"aspectgenerator",level:4},{value:"CommonCodeGenerator",id:"commoncodegenerator",level:4},{value:"CopyTo",id:"copyto",level:4},{value:"DudNet",id:"dudnet",level:4},{value:"Enhanced.GetTypes",id:"enhancedgettypes",level:4},{value:"FastGenericNew",id:"fastgenericnew",level:4},{value:"GeneratorEquals",id:"generatorequals",level:4},{value:"HsuSgSync",id:"hsusgsync",level:4},{value:"Immutype",id:"immutype",level:4},{value:"Ling.Audit",id:"lingaudit",level:4},{value:"M31.FluentAPI",id:"m31fluentapi",level:4},{value:"MemoryPack",id:"memorypack",level:4},{value:"Meziantou.Polyfill",id:"meziantoupolyfill",level:4},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:4},{value:"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator",id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator",level:4},{value:"Microsoft.Interop.JavaScript.JSImportGenerator",id:"microsoftinteropjavascriptjsimportgenerator",level:4},{value:"OptionToStringGenerator",id:"optiontostringgenerator",level:4},{value:"QueryStringGenerator",id:"querystringgenerator",level:4},{value:"RSCG_Decorator",id:"rscg_decorator",level:4},{value:"RSCG_UtilityTypes",id:"rscg_utilitytypes",level:4},{value:"StaticReflection",id:"staticreflection",level:4},{value:"SyncMethodGenerator",id:"syncmethodgenerator",level:4},{value:"System.Runtime.InteropServices",id:"systemruntimeinteropservices",level:4},{value:"System.Text.RegularExpressions",id:"systemtextregularexpressions",level:4},{value:"TelemetryLogging",id:"telemetrylogging",level:4},{value:"ThisClass",id:"thisclass",level:4}],u={toc:c},h="wrapper";function k(e){let{components:t,...l}=e;return(0,o.kt)(h,(0,n.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lomboknet--by-colin-alpert"},"Lombok.NET  by Colin Alpert"),(0,o.kt)(s.Z,{toc:c,mdxType:"TOCInline"}),(0,o.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Lombok.NET/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Lombok.NET?label=Lombok.NET",alt:"Nuget"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CollinAlpert/Lombok.NET"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/CollinAlpert/Lombok.NET?label=updated",alt:"GitHub last commit"})),"\n",(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/CollinAlpert/Lombok.NET?style=social",alt:"GitHub Repo stars"})),(0,o.kt)("h2",{id:"details"},"Details"),(0,o.kt)("h3",{id:"info"},"Info"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Name: ",(0,o.kt)("strong",{parentName:"p"},"Lombok.NET")),(0,o.kt)("p",{parentName:"admonition"},"This library is to .NET what Lombok is to Java. It generates constructors and other fun stuff using Source Generators for those classes you specify special attributes for."),(0,o.kt)("p",{parentName:"admonition"},"Author: Colin Alpert"),(0,o.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Lombok.NET/"},"https://www.nuget.org/packages/Lombok.NET/")),"   "),(0,o.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CollinAlpert/Lombok.NET"},"https://github.com/CollinAlpert/Lombok.NET")),(0,o.kt)("p",{parentName:"admonition"},"Source : ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CollinAlpert/Lombok.NET"},"https://github.com/CollinAlpert/Lombok.NET"))),(0,o.kt)("h3",{id:"original-readme"},"Original Readme"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("h1",{parentName:"admonition",id:"lomboknet"},"Lombok.NET"),(0,o.kt)("p",{parentName:"admonition"},"This library is to .NET what Lombok is to Java.\nIt generates constructors and other fun stuff using Source Generators for those classes you specify special attributes for. Check out the examples for more info."),(0,o.kt)("h3",{parentName:"admonition",id:"installation"},"Installation"),(0,o.kt)("p",{parentName:"admonition"},"At least Visual Studio 17.3 (or any JetBrains Rider version) is required for projects using this library. The generators generate code compliant with C# 10.\nYou can install Lombok.NET either via ",(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Lombok.NET"},"NuGet")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"Install-Package Lombok.NET\n")),(0,o.kt)("p",{parentName:"admonition"},"Or via the .NET Core command-line interface:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"dotnet add package Lombok.NET\n")),(0,o.kt)("h3",{parentName:"admonition",id:"building-and-debugging"},"Building and Debugging"),(0,o.kt)("p",{parentName:"admonition"},'When building from source in the "Debug" configuration, the build will be suspended until a debugger is attached to the build process.\\\nDuring this time it is possible to set break points inside the generators or analyzers, before attaching to the build process in order for it to continue.\\\nThis behavior does not exist for the "Release" configuration, so if you just want to run tests or see if a build succeeds, this is best done in the "Release" configuration.'),(0,o.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#constructors"},"Constructors")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#with-methods"},'"With" methods')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#singletons"},"Singletons")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#lazy"},"Lazy")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#property-change-pattern"},"INotifyPropertyChanged/INotifyPropertyChanging")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#async-overloads"},"Async overloads")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#tostring"},"ToString")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#decorator-pattern"},"Decorator pattern"))),(0,o.kt)("h2",{parentName:"admonition",id:"usage"},"Usage"),(0,o.kt)("h3",{parentName:"admonition",id:"demo"},"Demo"),(0,o.kt)("p",{parentName:"admonition"},"This demonstrates the generating of the ",(0,o.kt)("inlineCode",{parentName:"p"},"With")," pattern. Simply apply an attribute and the library will do the rest. Remember you are not bound to using fields, but can also use properties and supply the appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"MemberType")," value to the attribute's constructor."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/14217185/140986601-83424d22-57a5-43cb-a491-9234036d245c.gif",alt:"LombokNetDemo"})),(0,o.kt)("h3",{parentName:"admonition",id:"constructors"},"Constructors"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes-structs-allargsconstructor-only"},"Supported types: Classes, Structs (AllArgsConstructor only)"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[AllArgsConstructor]\npublic partial class Person {\n    private string _name;\n    private int _age;\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"By supplying the ",(0,o.kt)("inlineCode",{parentName:"p"},"AllArgsConstructor")," attribute and making the type ",(0,o.kt)("inlineCode",{parentName:"p"},"partial"),", you allow the Source Generator to create a constructor for it containing all of the classes private fields.\\\nIf you wish to modify this behavior and would instead like to have a constructor generated off of public properties, you can specify this in the attribute's constructor, e.g.:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[AllArgsConstructor(MemberType = MemberType.Property, AccessTypes = AccessType.Public)]\npublic partial class Person {\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"The default is ",(0,o.kt)("inlineCode",{parentName:"p"},"Field")," for the ",(0,o.kt)("inlineCode",{parentName:"p"},"MemberType")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Private")," for the ",(0,o.kt)("inlineCode",{parentName:"p"},"AccessType"),".\\\nIt is crucial to make the type ",(0,o.kt)("inlineCode",{parentName:"p"},"partial"),", otherwise the Source Generator will not be able to generate a constructor and will throw an exception."),(0,o.kt)("p",{parentName:"admonition"},"If you only wish to have a constructor generated containing the required fields or properties, Lombok.NET offers the ",(0,o.kt)("inlineCode",{parentName:"p"},"RequiredArgsConstructor")," attribute. Fields are required if they are ",(0,o.kt)("inlineCode",{parentName:"p"},"readonly"),", properties are required if they don't have a ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," accessor.\\\nThere is also a ",(0,o.kt)("inlineCode",{parentName:"p"},"NoArgsConstructor")," attribute which generates an empty constructor."),(0,o.kt)("h3",{parentName:"admonition",id:"with-methods"},"With Methods"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes"},"Supported types: Classes"),(0,o.kt)("p",{parentName:"admonition"},"For modifying objects after they were created, a common pattern using ",(0,o.kt)("inlineCode",{parentName:"p"},"With...")," methods is used. Lombok.NET will generate these methods for you based on members in your class. Here's an example:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},'[AllArgsConstructor]\n[With]\npublic partial class Person {\n    private string _name;\n    private int _age;\n}\n\nclass Program {\n    public static void Main() {\n        var person = new Person("Steve", 22);\n        person = person.WithName("Collin");\n        \n        Console.WriteLine(person.Name); // Prints "Collin"\n    }\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"With methods will only be generated for properties with a setter and fields without the ",(0,o.kt)("inlineCode",{parentName:"p"},"readonly")," modifier."),(0,o.kt)("h3",{parentName:"admonition",id:"singletons"},"Singletons"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes-1"},"Supported types: Classes"),(0,o.kt)("p",{parentName:"admonition"},"Apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"Singleton")," attribute to a partial class and Lombok.NET will generate all the boilerplate code required for making your class a thread-safe, lazy singleton. It will create a property called ",(0,o.kt)("inlineCode",{parentName:"p"},"Instance")," in order to access the singleton's instance. Note that the type needs to have a parameterless constructor.\\\n",(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[Singleton]\npublic partial class PersonRepository {\n}\n\npublic class MyClass {\n    public MyClass() {\n        var personRepository = PersonRepository.Instance;\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"lazy"},"Lazy"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes-structs"},"Supported types: Classes, Structs"),(0,o.kt)("p",{parentName:"admonition"},"Apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"Lazy")," attribute to a partial class or struct and Lombok.NET will generate a ",(0,o.kt)("inlineCode",{parentName:"p"},"Lazy<T>")," property which can be used to create an instance of the object lazily. Note that the type needs to have a parameterless constructor.\n",(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[Lazy]\npublic partial class HeavyInitialization {\n    private HeavyInitialization() {\n        Thread.Sleep(1000);\n    }\n}\n\npublic class Program {\n    public Program() {\n        var lazy = HeavyInitialization.Lazy;\n        if(Random.Shared.Next() == 2) {\n            var value = lazy.Value;\n            // do something with value\n        }\n    }\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"tostring"},"ToString"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes-structs-enums"},"Supported types: Classes, Structs, Enums"),(0,o.kt)("p",{parentName:"admonition"},"To generate a descriptive ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString")," method to your type, make it partial and add the ",(0,o.kt)("inlineCode",{parentName:"p"},"[ToString]")," attribute to it. By default, it will include private fields in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString")," method, but this is customizable in the attribute's constructor."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[ToString]\npublic partial class Person {\n    private string _name;\n    private int _age;\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"When applying this attribute to an enum, Lombok.NET will create an extension class with a ",(0,o.kt)("inlineCode",{parentName:"p"},"ToText")," method. This is due to the fact that enums can't be partial, thus an extension method is needed and the extension method will not be found if it is called ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString"),"."),(0,o.kt)("p",{parentName:"admonition"},"If you have sensitive data in your objects which should not be contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString")," method, you can apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Masked]")," attribute to the property or field containing sensitive data. This will cause the value to be replaced by four asterisks (****) in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString")," method.   "),(0,o.kt)("h3",{parentName:"admonition",id:"properties"},"Properties"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes-structs-1"},"Supported types: Classes, Structs"),(0,o.kt)("p",{parentName:"admonition"},"Generating properties from fields while using them as backing fields is possible using the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Property]")," attribute. Example:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"public partial class MyViewModel {\n    \n    [Property]\n    private int _result;\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"This will create the following property:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"public int Result {\n    get => _result;\n    set => _result = value;\n}\n")),(0,o.kt)("h3",{parentName:"admonition",id:"property-change-pattern"},"Property change pattern"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-classes-2"},"Supported types: Classes"),(0,o.kt)("p",{parentName:"admonition"},"All of the boilerplate code surrounding ",(0,o.kt)("inlineCode",{parentName:"p"},"\xccNotifyPropertyChanged/\xccNotifyPropertyChanging")," can be generated using a conjunction of the ",(0,o.kt)("inlineCode",{parentName:"p"},"[NotifyPropertyChanged]"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"[NotifyPropertyChanging]")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Property]")," attributes.\\\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"[NotifyPropertyChanged]")," attribute will implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"INotifyPropertyChanged")," interface and the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyChanged")," event. It will also create a method called ",(0,o.kt)("inlineCode",{parentName:"p"},"SetFieldAndRaisePropertyChanged")," which sets a backing field and raises the event. The event as well as the method can be used in your ViewModels to implement desired behavior.\\\nIf you would like to take it a step further, you can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Property]")," attribute on backing fields while passing the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyChangeType")," parameter to generate properties off of backing fields which will include the raising of the specific event in their setters. Here's an example:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},'[NotifyPropertyChanged]\npublic partial class CustomViewModel {\n\n    private int _result;\n    \n    public int Result {\n        get => _result;\n        set => SetFieldAndRaisePropertyChanged(out _result, value);\n    }\n    \n    // -- OR --\n    \n    [Property(PropertyChangeType = PropertyChangeType.PropertyChanged)]\n    private int _result;\n}\n\npublic class Program {\n\n    public static void Main() {\n        var vm = new CustomViewModel();\n        vm.PropertyChanged += (sender, args) => Console.WriteLine("A property was changed");\n        \n        vm.Result = 42;\n    }\n}\n')),(0,o.kt)("p",{parentName:"admonition"},"If you are using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.reactiveui.net/"},"ReactiveUI")," library (e.g. when using Avalonia), you can also specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyChangeType.ReactivePropertyChange")," to leverage ReactiveUI's property change handling. "),(0,o.kt)("p",{parentName:"admonition"},"To be able to generate the properties with the property change-raising behavior, the class must have the ",(0,o.kt)("inlineCode",{parentName:"p"},"[NotifyPropertyChanged]")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"[NotifyPropertyChanging]")," (depending on desired behavior) attribute placed above it."),(0,o.kt)("h3",{parentName:"admonition",id:"async-overloads"},"Async overloads"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-abstract-classes-interfaces-methods"},"Supported types: Abstract Classes, Interfaces, Methods"),(0,o.kt)("p",{parentName:"admonition"},"If you want to have ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," overloads for every method in your interface, you can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"[AsyncOverloads]")," attribute to it. This also works for abstract classes:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[AsyncOverloads]\npublic partial interface IRepository<T> {\n    T GetById(int id);\n    \n    void Save(T entity);\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"This will add the following methods to your interface:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"Task<T> GetByIdAsync(int id);\nTask SaveAsync(T entity);\n")),(0,o.kt)("p",{parentName:"admonition"},"For abstract classes, it will do the same for every abstract method. The inheriting class will be forced to implement the async versions as well. This may also be achieved by using the ",(0,o.kt)("a",{parentName:"p",href:"#async-methods"},"[Async]")," attribute."),(0,o.kt)("h4",{parentName:"admonition",id:"async-methods"},"Async methods"),(0,o.kt)("p",{parentName:"admonition"},"If you would like to create a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," version of your method, you can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Async]")," attribute to it:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"public partial class MyViewModel {\n\n    [Async]\n    public int Square(int i) {\n        return i * i;\n    }\n}\n")),(0,o.kt)("p",{parentName:"admonition"},"This will add the following method:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"public Task<int> SquareAsync(int i) => Task.FromResult(Square(i));\n")),(0,o.kt)("p",{parentName:"admonition"},"This works for classes and structs, however it must be ",(0,o.kt)("inlineCode",{parentName:"p"},"partial"),"."),(0,o.kt)("h3",{parentName:"admonition",id:"decorator-pattern"},"Decorator Pattern"),(0,o.kt)("h4",{parentName:"admonition",id:"supported-types-abstract-classes-interfaces"},"Supported types: Abstract Classes, Interfaces"),(0,o.kt)("p",{parentName:"admonition"},"Lombok.NET also provides an option to generate the boilerplate code when it comes to the decorator pattern. Simply apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"Decorator")," attribute to an abstract class or an interface and let the Source Generator do the rest."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"[Decorator]\npublic interface IVehicle {\n    void Drive();\n    int GetNumberOfWheels();\n} \n")),(0,o.kt)("p",{parentName:"admonition"},"This will add the following class to your namespace:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-c#"},"public class VehicleDecorator {\n\n    private readonly IVehicle _vehicle;\n    \n    public VehicleDecorator(IVehicle vehicle) {\n        _vehicle = vehicle;\n    }\n    \n    public virtual void Drive() {\n        _vehicle.Drive();\n    }\n    \n    public virtual int GetNumberOfWheels() {\n        return _vehicle.GetNumberOfWheels();\n    }\n} \n")),(0,o.kt)("p",{parentName:"admonition"},"Please let me know if there is any other functionality you would like to see in this library. I am happy to add more features.")),(0,o.kt)("h3",{id:"about"},"About"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Generating toString from props/fields. Other demos on site")),(0,o.kt)("h2",{id:"how-to-use"},"How to use"),(0,o.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,o.kt)("p",null,"This is the CSharp Project that references ",(0,o.kt)("strong",{parentName:"p"},"Lombok.NET")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {11}",showLineNumbers:!0,"{11}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include="Lombok.NET" Version="2.1.2" />\n  </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Lombok.NET\\src\\Lombok.NETDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"Lombok.NET")," in ",(0,o.kt)("em",{parentName:"p"},"Program.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// See https://aka.ms/new-console-template for more information\nusing Lombok.NETDemo;\n\nConsole.WriteLine("Hello, World!");\nPerson p = new();\np.FirstName = "Andrei";\np.LastName="Ignat";\nConsole.WriteLine(p.ToString());\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Lombok.NET\\src\\Lombok.NETDemo\\Person.cs",label:"Person.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"Lombok.NET")," in ",(0,o.kt)("em",{parentName:"p"},"Person.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing Lombok.NET;\n\nnamespace Lombok.NETDemo;\n\n[ToString(AccessTypes=AccessTypes.Public,  MemberType=MemberType.Property)]\n//[AllArgsConstructor(AccessTypes=AccessTypes.Public,MemberType = MemberType.Property)]\npublic partial class Person\n{\n    public Person()\n    {\n        \n    }\n    public string? FirstName{ get; set; }\n    public string? LastName { get; set; }\n    public string FullName\n    {\n        get\n        {\n            return FirstName + " " + LastName;\n        }\n    }\n}\n\n')))),(0,o.kt)("h3",{id:"generated-files"},"Generated Files"),(0,o.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Lombok.NET\\src\\Lombok.NETDemo\\obj\\GX\\Lombok.NET\\Lombok.NET.MethodGenerators.ToStringGenerator\\Lombok_NETDemo_Person.g.cs",label:"Lombok_NETDemo_Person.g.cs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated/>\nnamespace Lombok.NETDemo;\n#nullable enable\npublic partial class Person\n{\n    public override string ToString()\n    {\n        return $"Person: FirstName={FirstName}; LastName={LastName}; FullName={FullName}";\n    }\n}\n')))),(0,o.kt)("h2",{id:"usefull"},"Usefull"),(0,o.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{target:"_blank",href:a(57767).Z},"Download Example project Lombok.NET "))),(0,o.kt)("h3",{id:"share-lomboknet"},"Share Lombok.NET"),(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLombok.NET&quote=Lombok.NET",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLombok.NET&text=Lombok.NET:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLombok.NET",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLombok.NET&title=Lombok.NET",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLombok.NET&title=Lombok.NET&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FLombok.NET",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Lombok.NET"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Lombok.NET")),(0,o.kt)("h3",{id:"in-the-same-category-enhancementclass---27-other-generators"},"In the same category (EnhancementClass) - 27 other generators"),(0,o.kt)("h4",{id:"apparatusaot"},(0,o.kt)("a",{parentName:"h4",href:"/docs/ApparatusAOT"},"ApparatusAOT")),(0,o.kt)("h4",{id:"aspectgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/AspectGenerator"},"AspectGenerator")),(0,o.kt)("h4",{id:"commoncodegenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/CommonCodeGenerator"},"CommonCodeGenerator")),(0,o.kt)("h4",{id:"copyto"},(0,o.kt)("a",{parentName:"h4",href:"/docs/CopyTo"},"CopyTo")),(0,o.kt)("h4",{id:"dudnet"},(0,o.kt)("a",{parentName:"h4",href:"/docs/DudNet"},"DudNet")),(0,o.kt)("h4",{id:"enhancedgettypes"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Enhanced.GetTypes"},"Enhanced.GetTypes")),(0,o.kt)("h4",{id:"fastgenericnew"},(0,o.kt)("a",{parentName:"h4",href:"/docs/FastGenericNew"},"FastGenericNew")),(0,o.kt)("h4",{id:"generatorequals"},(0,o.kt)("a",{parentName:"h4",href:"/docs/GeneratorEquals"},"GeneratorEquals")),(0,o.kt)("h4",{id:"hsusgsync"},(0,o.kt)("a",{parentName:"h4",href:"/docs/HsuSgSync"},"HsuSgSync")),(0,o.kt)("h4",{id:"immutype"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Immutype"},"Immutype")),(0,o.kt)("h4",{id:"lingaudit"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Ling.Audit"},"Ling.Audit")),(0,o.kt)("h4",{id:"m31fluentapi"},(0,o.kt)("a",{parentName:"h4",href:"/docs/M31.FluentAPI"},"M31.FluentAPI")),(0,o.kt)("h4",{id:"memorypack"},(0,o.kt)("a",{parentName:"h4",href:"/docs/MemoryPack"},"MemoryPack")),(0,o.kt)("h4",{id:"meziantoupolyfill"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Meziantou.Polyfill"},"Meziantou.Polyfill")),(0,o.kt)("h4",{id:"microsoftextensionslogging"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Logging"},"Microsoft.Extensions.Logging")),(0,o.kt)("h4",{id:"microsoftextensionsoptionsgeneratorsoptionsvalidatorgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator"},"Microsoft.Extensions.Options.Generators.OptionsValidatorGenerator")),(0,o.kt)("h4",{id:"microsoftinteropjavascriptjsimportgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Microsoft.Interop.JavaScript.JSImportGenerator"},"Microsoft.Interop.JavaScript.JSImportGenerator")),(0,o.kt)("h4",{id:"optiontostringgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/OptionToStringGenerator"},"OptionToStringGenerator")),(0,o.kt)("h4",{id:"querystringgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/QueryStringGenerator"},"QueryStringGenerator")),(0,o.kt)("h4",{id:"rscg_decorator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/RSCG_Decorator"},"RSCG_Decorator")),(0,o.kt)("h4",{id:"rscg_utilitytypes"},(0,o.kt)("a",{parentName:"h4",href:"/docs/RSCG_UtilityTypes"},"RSCG_UtilityTypes")),(0,o.kt)("h4",{id:"staticreflection"},(0,o.kt)("a",{parentName:"h4",href:"/docs/StaticReflection"},"StaticReflection")),(0,o.kt)("h4",{id:"syncmethodgenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/SyncMethodGenerator"},"SyncMethodGenerator")),(0,o.kt)("h4",{id:"systemruntimeinteropservices"},(0,o.kt)("a",{parentName:"h4",href:"/docs/System.Runtime.InteropServices"},"System.Runtime.InteropServices")),(0,o.kt)("h4",{id:"systemtextregularexpressions"},(0,o.kt)("a",{parentName:"h4",href:"/docs/System.Text.RegularExpressions"},"System.Text.RegularExpressions")),(0,o.kt)("h4",{id:"telemetrylogging"},(0,o.kt)("a",{parentName:"h4",href:"/docs/TelemetryLogging"},"TelemetryLogging")),(0,o.kt)("h4",{id:"thisclass"},(0,o.kt)("a",{parentName:"h4",href:"/docs/ThisClass"},"ThisClass")))}k.isMDXComponent=!0},57767:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/Lombok.NET-9a833931d6adb7ee0a9892f8de8f9276.zip"}}]);