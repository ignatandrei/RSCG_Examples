"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[8704],{3169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(7462),i=(n(7294),n(4137)),r=n(3992),o=n(425),s=n(8839);const l={sidebar_position:470,title:"47 - Injectio",description:"Attributes to DI helper",slug:"/Injectio"},c="Injectio  by LoreSoft",p={unversionedId:"RSCG-Examples/Injectio",id:"RSCG-Examples/Injectio",title:"47 - Injectio",description:"Attributes to DI helper",source:"@site/docs/RSCG-Examples/Injectio.md",sourceDirName:"RSCG-Examples",slug:"/Injectio",permalink:"/RSCG_Examples/v2/docs/Injectio",draft:!1,tags:[],version:"current",sidebarPosition:470,frontMatter:{sidebar_position:470,title:"47 - Injectio",description:"Attributes to DI helper",slug:"/Injectio"},sidebar:"tutorialSidebar",previous:{title:"46 - NextGenMapper",permalink:"/RSCG_Examples/v2/docs/NextGenMapper"},next:{title:"48 - PropertyChangedSourceGenerator",permalink:"/RSCG_Examples/v2/docs/PropertyChangedSourceGenerator"}},m={},d=[{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share Injectio",id:"share-injectio",level:3}],g={toc:d},u="wrapper";function k(e){let{components:t,...l}=e;return(0,i.kt)(u,(0,a.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"injectio--by-loresoft"},"Injectio  by LoreSoft"),(0,i.kt)(s.Z,{toc:d,mdxType:"TOCInline"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Injectio/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/Injectio?label=Injectio",alt:"Nuget"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Injectio"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/loresoft/Injectio?label=updated",alt:"GitHub last commit"})),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/loresoft/Injectio?style=social",alt:"GitHub Repo stars"})),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Name: ",(0,i.kt)("strong",{parentName:"p"},"Injectio")),(0,i.kt)("p",{parentName:"admonition"},"Source generator that automatically registers discovered services in dependency injection"),(0,i.kt)("p",{parentName:"admonition"},"Author: LoreSoft"),(0,i.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/Injectio/"},"https://www.nuget.org/packages/Injectio/")),"   "),(0,i.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Injectio"},"https://github.com/loresoft/Injectio")),(0,i.kt)("p",{parentName:"admonition"},"Source : ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Injectio"},"https://github.com/loresoft/Injectio"))),(0,i.kt)("h3",{id:"original-readme"},"Original Readme"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h1",{parentName:"admonition",id:"injectio"},"Injectio"),(0,i.kt)("p",{parentName:"admonition"},"Source generator that helps register attribute marked services in the dependency injection ServiceCollection"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/loresoft/Injectio"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/loresoft/Injectio/main/media/Injectio.Genertors.png",alt:"Source generator"}))),(0,i.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Transient, Singleton, Scoped service registration"),(0,i.kt)("li",{parentName:"ul"},"Factory registration"),(0,i.kt)("li",{parentName:"ul"},"Module method registration"),(0,i.kt)("li",{parentName:"ul"},"Duplicate Strategy - Skip,Replace,Append"),(0,i.kt)("li",{parentName:"ul"},"Registration Strategy - Self, Implemented Interfaces, Self With Interfaces")),(0,i.kt)("h3",{parentName:"admonition",id:"usage"},"Usage"),(0,i.kt)("h4",{parentName:"admonition",id:"add-package"},"Add package"),(0,i.kt)("p",{parentName:"admonition"},"Add the nuget package project to your projects."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"dotnet add package Injectio")),(0,i.kt)("p",{parentName:"admonition"},"Prevent dependances from including Injectio"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<PackageReference Include="Injectio" PrivateAssets="all" />\n')),(0,i.kt)("h3",{parentName:"admonition",id:"registration-attributes"},"Registration Attributes"),(0,i.kt)("p",{parentName:"admonition"},"Place registration attribute on class.  The class will be discovered and registered."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterSingleton]")," Marks the class as a singleton service"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterScoped]")," Marks the class as a scoped service"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterTransient]")," Marks the class as a transient service"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[RegisterServices]")," Marks the method to be called to register services")),(0,i.kt)("h4",{parentName:"admonition",id:"attribute-properties"},"Attribute Properties"),(0,i.kt)("table",{parentName:"admonition"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ImplementationType"),(0,i.kt)("td",{parentName:"tr",align:null},"The type that implements the service.  If not set, the class the attribute is on will be used.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ServiceType"),(0,i.kt)("td",{parentName:"tr",align:null},"The type of the service. If not set, the Registration property used to determine what is registered.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Factory"),(0,i.kt)("td",{parentName:"tr",align:null},"Name of a factory method to create new instances of the service implementation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Duplicate"),(0,i.kt)("td",{parentName:"tr",align:null},"How the generator handles duplicate registrations. See Duplicate Strategy")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Registration"),(0,i.kt)("td",{parentName:"tr",align:null},"How the generator determines what to register. See Registration Strategy")))),(0,i.kt)("h4",{parentName:"admonition",id:"duplicate-strategy"},"Duplicate Strategy"),(0,i.kt)("table",{parentName:"admonition"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Skip"),(0,i.kt)("td",{parentName:"tr",align:null},"Skips registrations for services that already exists")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Replace"),(0,i.kt)("td",{parentName:"tr",align:null},"Replaces existing service registrations")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Append"),(0,i.kt)("td",{parentName:"tr",align:null},"Appends a new registration for existing services")))),(0,i.kt)("h4",{parentName:"admonition",id:"registration-strategy"},"Registration Strategy"),(0,i.kt)("table",{parentName:"admonition"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Self"),(0,i.kt)("td",{parentName:"tr",align:null},"Registers each matching concrete type as itself")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ImplementedInterfaces"),(0,i.kt)("td",{parentName:"tr",align:null},"Registers each matching concrete type as all of its implemented interfaces")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SelfWithInterfaces"),(0,i.kt)("td",{parentName:"tr",align:null},"Registers each matching concrete type as all of its implemented interfaces and itself")))),(0,i.kt)("h4",{parentName:"admonition",id:"singleton-services"},"Singleton services"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterSingleton]\npublic class SingletonService : IService { }\n")),(0,i.kt)("p",{parentName:"admonition"},"Explicit service type"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterSingleton(ServiceType = typeof(IService))]\npublic class SingletonService : IService { }\n")),(0,i.kt)("p",{parentName:"admonition"},"Support resolving multiple services with ",(0,i.kt)("inlineCode",{parentName:"p"},"IEnumerable<T>")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterSingleton(Duplicate = DuplicateStrategy.Append)]\npublic class SingletonService : IService { }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"scoped-services"},"Scoped Services"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterScoped]\npublic class ScopedService : IService { }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"transient-services"},"Transient Services"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterTransient]\npublic class TransientService : IService { }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"factories"},"Factories"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterTransient(Factory = nameof(ServiceFactory))]\npublic class FactoryService : IFactoryService\n{\n    private readonly IService _service;\n\n    public FactoryService(IService service)\n    { \n        _service = service;\n    }\n\n    public static IFactoryService ServiceFactory(IServiceProvider serviceProvider)\n    {\n        return new FactoryService(serviceProvider.GetService<IService>());\n    }\n}\n")),(0,i.kt)("h4",{parentName:"admonition",id:"generic-attributes"},"Generic Attributes"),(0,i.kt)("p",{parentName:"admonition"},"You can use generic attributes to register services if your project targets net7.0."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<Project Sdk="Microsoft.NET.Sdk">\n  <PropertyGroup>\n    <TargetFrameworks>net7.0</TargetFrameworks>\n  </PropertyGroup>\n</Project>\n')),(0,i.kt)("p",{parentName:"admonition"},"Generic attributes allow declaration to be more compact by avoiding the typeof calls"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterSingleton<IService>]\npublic class ServiceImplementation : IService { }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"open-generic"},"Open Generic"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"[RegisterSingleton(ImplementationType = typeof(OpenGeneric<>), ServiceType = typeof(IOpenGeneric<>))]\npublic class OpenGeneric<T> : IOpenGeneric<T> { }\n")),(0,i.kt)("h4",{parentName:"admonition",id:"register-method"},"Register Method"),(0,i.kt)("p",{parentName:"admonition"},"When the service registration is complex, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"RegisterServices")," attribute on a method that has a parameter of ",(0,i.kt)("inlineCode",{parentName:"p"},"IServiceCollection")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceCollection")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public class RegistrationModule\n{\n    [RegisterServices]\n    public static void Register(IServiceCollection services)\n    {\n        services.TryAddTransient<IModuleService, ModuleService>();\n    }\n}\n")),(0,i.kt)("h4",{parentName:"admonition",id:"add-to-container"},"Add to container"),(0,i.kt)("p",{parentName:"admonition"},"The source generator creates an extension method with all the discovered services registered.  Call the generated extension method to add the services to the container.  The extension method will be called ",(0,i.kt)("inlineCode",{parentName:"p"},"Add[AssemblyName]"),".  The assembly name will have the dots removed."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"var services = new ServiceCollection();\nservices.AddInjectioTestsConsole();\n")),(0,i.kt)("p",{parentName:"admonition"},"Override the extension method name by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectioName")," MSBuild property."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<PropertyGroup>\n  <InjectioName>Library</InjectioName>\n</PropertyGroup>\n")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"var services = new ServiceCollection();\nservices.AddLibrary();\n")),(0,i.kt)("h4",{parentName:"admonition",id:"registration-tags"},"Registration Tags"),(0,i.kt)("p",{parentName:"admonition"},"Control what is registered when calling the generated extension method using Tags"),(0,i.kt)("p",{parentName:"admonition"},"Tag the service"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'public interface IServiceTag\n{\n}\n\n[RegisterSingleton(Tags = "Client,FrontEnd")]\npublic class ServiceTag : IServiceTag\n{\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Specify tags when adding to service collection.  Note, if no tags specified, all services are registered"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'var services = new ServiceCollection();\nservices.AddInjectioTestsLibrary("Client");\n'))),(0,i.kt)("h3",{id:"about"},"About"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Attributes to DI helper")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,i.kt)("p",null,"This is the CSharp Project that references ",(0,i.kt)("strong",{parentName:"p"},"Injectio")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {10}",showLineNumbers:!0,"{10}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <ItemGroup>\n        <PackageReference Include="Injectio" Version="2.6.1" />\n        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="7.0.0" />\n    </ItemGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n</Project>\n\n'))),(0,i.kt)(o.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Injectio\\src\\InjectioDemo\\InjectioDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Injectio")," in ",(0,i.kt)("em",{parentName:"p"},"Program.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using InjectioDemo;\nusing Microsoft.Extensions.DependencyInjection;\n\nConsole.WriteLine("Hello, World!");\nServiceCollection sc = new();\nsc.AddInjectioDemo();\nvar b = sc.BuildServiceProvider();\nvar con = b.GetRequiredService<DatabaseCon>();\nvar db = b.GetRequiredService<IDatabase>();\ndb.Open();\n\n'))),(0,i.kt)(o.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Injectio\\src\\InjectioDemo\\InjectioDemo\\Database.cs",label:"Database.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Injectio")," in ",(0,i.kt)("em",{parentName:"p"},"Database.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using Injectio.Attributes;\n\nnamespace InjectioDemo;\n\n[RegisterScoped]\ninternal class Database : IDatabase\n{\n    private readonly DatabaseCon con;\n\n    public Database(DatabaseCon con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open {con.Connection}");\n    }\n\n}\n\n\n'))),(0,i.kt)(o.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Injectio\\src\\InjectioDemo\\InjectioDemo\\IDatabase.cs",label:"IDatabase.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Injectio")," in ",(0,i.kt)("em",{parentName:"p"},"IDatabase.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace InjectioDemo\n{\n    internal interface IDatabase\n    {\n        public void Open();\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Injectio\\src\\InjectioDemo\\InjectioDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",mdxType:"TabItem"},(0,i.kt)("p",null,"  This is the use of ",(0,i.kt)("strong",{parentName:"p"},"Injectio")," in ",(0,i.kt)("em",{parentName:"p"},"DatabaseCon.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using Injectio.Attributes;\n\nnamespace InjectioDemo;\n\n[RegisterSingleton]\ninternal class DatabaseCon\n{\n    public string? Connection { get; set; }\n}\n\n\n")))),(0,i.kt)("h3",{id:"generated-files"},"Generated Files"),(0,i.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"C:\\gth\\RSCG_Examples\\v2\\rscg_examples\\Injectio\\src\\InjectioDemo\\InjectioDemo\\obj\\GX\\Injectio.Generators\\Injectio.Generators.ServiceRegistrationGenerator\\Injectio.g.cs",label:"Injectio.g.cs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'// <auto-generated />\n#nullable enable\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    /// <summary>\n    /// Extension methods for discovered service registrations\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode("Injectio.Generators", "2.6.1.0")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    [global::System.Diagnostics.DebuggerStepThroughAttribute]\n    public static class DiscoveredServicesExtensions\n    {\n        /// <summary>\n        /// Adds discovered services from InjectioDemo to the specified service collection\n        /// </summary>\n        /// <param name="serviceCollection">The service collection.</param>\n        /// <param name="tags">The service registration tags to include.</param>\n        /// <returns>The service collection</returns>\n        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddInjectioDemo(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, params string[]? tags)\n        {\n            var tagSet = new global::System.Collections.Generic.HashSet<string>(tags ?? global::System.Linq.Enumerable.Empty<string>());\n\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(\n                serviceCollection,\n                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(\n                    typeof(global::InjectioDemo.IDatabase),\n                    typeof(global::InjectioDemo.Database), \n                    global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\n                )\n            );\n\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(\n                serviceCollection,\n                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(\n                    typeof(global::InjectioDemo.Database),\n                    typeof(global::InjectioDemo.Database), \n                    global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\n                )\n            );\n\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(\n                serviceCollection,\n                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(\n                    typeof(global::InjectioDemo.DatabaseCon),\n                    typeof(global::InjectioDemo.DatabaseCon), \n                    global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton\n                )\n            );\n\n            return serviceCollection;\n        }\n    }\n}\n\n')))),(0,i.kt)("h2",{id:"usefull"},"Usefull"),(0,i.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{target:"_blank",href:n(7765).Z},"Download Example project Injectio "))),(0,i.kt)("h3",{id:"share-injectio"},"Share Injectio"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInjectio&quote=Injectio",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInjectio&text=Injectio:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInjectio",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInjectio&title=Injectio",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInjectio&title=Injectio&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FInjectio",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Injectio"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/Injectio")))}k.isMDXComponent=!0},7765:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/Injectio-ee611c7097cac250675b5882e0e312b1.zip"}}]);