"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2504],{26146:(e,r,n)=>{n.d(r,{Ay:()=>c,RM:()=>s});var t=n(74848),i=n(28453);const s=[{value:"Category &quot;DependencyInjection&quot; has the following generators:",id:"category-dependencyinjection-has-the-following-generators",level:3},{value:"See category",id:"see-category",level:3}];function a(e){const r={a:"a",h3:"h3",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h3,{id:"category-dependencyinjection-has-the-following-generators",children:'Category "DependencyInjection" has the following generators:'}),"\n",(0,t.jsxs)(r.p,{children:["1 ",(0,t.jsx)(r.a,{href:"/docs/AutoRegisterInject",children:"AutoRegisterInject"})]}),"\n",(0,t.jsxs)(r.p,{children:["2 ",(0,t.jsx)(r.a,{href:"/docs/BunnyTailServiceRegistration",children:"BunnyTailServiceRegistration"})]}),"\n",(0,t.jsxs)(r.p,{children:["3 ",(0,t.jsx)(r.a,{href:"/docs/DependencyModules.SourceGenerator",children:"DependencyModules.SourceGenerator"})]}),"\n",(0,t.jsxs)(r.p,{children:["4 ",(0,t.jsx)(r.a,{href:"/docs/depso",children:"depso"})]}),"\n",(0,t.jsxs)(r.p,{children:["5 ",(0,t.jsx)(r.a,{href:"/docs/FactoryGenerator",children:"FactoryGenerator"})]}),"\n",(0,t.jsxs)(r.p,{children:["6 ",(0,t.jsx)(r.a,{href:"/docs/Injectio",children:"Injectio"})]}),"\n",(0,t.jsxs)(r.p,{children:["7 ",(0,t.jsx)(r.a,{href:"/docs/jab",children:"jab"})]}),"\n",(0,t.jsxs)(r.p,{children:["8 ",(0,t.jsx)(r.a,{href:"/docs/Pure.DI",children:"Pure.DI"})]}),"\n",(0,t.jsxs)(r.p,{children:["9 ",(0,t.jsx)(r.a,{href:"/docs/ServiceScan.SourceGenerator",children:"ServiceScan.SourceGenerator"})]}),"\n",(0,t.jsx)(r.h3,{id:"see-category",children:"See category"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"/docs/Categories/DependencyInjection",children:"DependencyInjection"})})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},41987:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>h,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"RSCG-Examples/ServiceScan.SourceGenerator","title":"152 - ServiceScan.SourceGenerator","description":"Generating service collection / DI registration","source":"@site/docs/RSCG-Examples/ServiceScan.SourceGenerator.md","sourceDirName":"RSCG-Examples","slug":"/ServiceScan.SourceGenerator","permalink":"/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1520,"frontMatter":{"sidebar_position":1520,"title":"152 - ServiceScan.SourceGenerator","description":"Generating service collection / DI registration","slug":"/ServiceScan.SourceGenerator"},"sidebar":"tutorialSidebar","previous":{"title":"151 - ThisAssembly.Strings","permalink":"/RSCG_Examples/v2/docs/ThisAssembly.Strings"},"next":{"title":"153 - RSCG_ExportDiagram","permalink":"/RSCG_Examples/v2/docs/RSCG_ExportDiagram"}}');var i=n(74848),s=n(28453),a=n(11470),c=n(19365),o=n(14252),l=n(26146);const d={sidebar_position:1520,title:"152 - ServiceScan.SourceGenerator",description:"Generating service collection / DI registration",slug:"/ServiceScan.SourceGenerator"},h="ServiceScan.SourceGenerator  by Oleksandr Liakhevych",p={},u=[{value:"NuGet / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Register all FluentValidation validators",id:"register-all-fluentvalidation-validators",level:3},{value:"Add MediatR handlers",id:"add-mediatr-handlers",level:3},{value:"Add all repository types from your project based on name filter as their implemented interfaces:",id:"add-all-repository-types-from-your-project-based-on-name-filter-as-their-implemented-interfaces",level:3},{value:"Parameters",id:"parameters",level:2},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example (source csproj, source files)",id:"example-source-csproj-source-files",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Useful",id:"useful",level:2},{value:"Download Example (.NET  C#)",id:"download-example-net--c",level:3},{value:"Share ServiceScan.SourceGenerator",id:"share-servicescansourcegenerator",level:3},...l.RM];function S(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"servicescansourcegenerator--by-oleksandr-liakhevych",children:"ServiceScan.SourceGenerator  by Oleksandr Liakhevych"})}),"\n",(0,i.jsx)(o.A,{toc:u}),"\n",(0,i.jsx)(r.h2,{id:"nuget--site-data",children:"NuGet / site data"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.a,{href:"https://www.nuget.org/packages/ServiceScan.SourceGenerator/",children:(0,i.jsx)(r.img,{src:"https://img.shields.io/nuget/dt/ServiceScan.SourceGenerator?label=ServiceScan.SourceGenerator",alt:"Nuget"})}),"\n",(0,i.jsx)(r.a,{href:"https://github.com/Dreamescaper/ServiceScan.SourceGenerator",children:(0,i.jsx)(r.img,{src:"https://img.shields.io/github/last-commit/Dreamescaper/ServiceScan.SourceGenerator?label=updated",alt:"GitHub last commit"})}),"\n",(0,i.jsx)(r.img,{src:"https://img.shields.io/github/stars/Dreamescaper/ServiceScan.SourceGenerator?style=social",alt:"GitHub Repo stars"})]}),"\n",(0,i.jsx)(r.h2,{id:"details",children:"Details"}),"\n",(0,i.jsx)(r.h3,{id:"info",children:"Info"}),"\n",(0,i.jsxs)(r.admonition,{type:"info",children:[(0,i.jsxs)(r.p,{children:["Name: ",(0,i.jsx)(r.strong,{children:"ServiceScan.SourceGenerator"})]}),(0,i.jsx)(r.p,{children:"Package Description"}),(0,i.jsx)(r.p,{children:"Author: Oleksandr Liakhevych"}),(0,i.jsxs)(r.p,{children:["NuGet:\n",(0,i.jsx)(r.em,{children:(0,i.jsx)(r.a,{href:"https://www.nuget.org/packages/ServiceScan.SourceGenerator/",children:"https://www.nuget.org/packages/ServiceScan.SourceGenerator/"})})]}),(0,i.jsxs)(r.p,{children:["You can find more details at ",(0,i.jsx)(r.a,{href:"https://github.com/Dreamescaper/ServiceScan.SourceGenerator",children:"https://github.com/Dreamescaper/ServiceScan.SourceGenerator"})]}),(0,i.jsxs)(r.p,{children:["Source: ",(0,i.jsx)(r.a,{href:"https://github.com/Dreamescaper/ServiceScan.SourceGenerator",children:"https://github.com/Dreamescaper/ServiceScan.SourceGenerator"})]})]}),"\n",(0,i.jsx)(r.h3,{id:"original-readme",children:"Original Readme"}),"\n",(0,i.jsxs)(r.admonition,{type:"note",children:[(0,i.jsx)(r.h1,{id:"servicescansourcegenerator",children:"ServiceScan.SourceGenerator"}),(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"https://www.nuget.org/packages/ServiceScan.SourceGenerator/",children:(0,i.jsx)(r.img,{src:"https://img.shields.io/nuget/v/ServiceScan.SourceGenerator",alt:"NuGet Version"})})}),(0,i.jsxs)(r.p,{children:["Source generator for services registrations inspired by ",(0,i.jsx)(r.a,{href:"https://github.com/khellang/Scrutor/",children:"Scrutor"}),".\nCode generation allows to have AOT-compatible code, without an additional hit on startup performance due to runtime assembly scanning."]}),(0,i.jsx)(r.h2,{id:"installation",children:"Installation"}),(0,i.jsx)(r.p,{children:"Add the NuGet Package to your project:"}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"dotnet add package ServiceScan.SourceGenerator\n"})}),(0,i.jsx)(r.h2,{id:"usage",children:"Usage"}),(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"ServiceScan"})," generates a partial method implementation based on ",(0,i.jsx)(r.code,{children:"GenerateServiceRegistrations"})," attribute. This attribute can be added to a partial method with ",(0,i.jsx)(r.code,{children:"IServiceCollection"})," parameter.\nFor example, based on the following partial method:"]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"public static partial class ServicesExtensions\n{\n    [GenerateServiceRegistrations(AssignableTo = typeof(IMyService), Lifetime = ServiceLifetime.Scoped)]\n    public static partial IServiceCollection AddServices(this IServiceCollection services);\n}\n"})}),(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"ServiceScan"})," will generate the following implementation:"]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"public static partial class ServicesExtensions\n{\n    public static partial IServiceCollection AddServices(this IServiceCollection services)\n    {\n        return services\n            .AddScoped<IMyService, ServiceImplementation1>()\n            .AddScoped<IMyService, ServiceImplementation2>();\n    }\n}\n"})}),(0,i.jsxs)(r.p,{children:["The only thing left is to invoke this method on your ",(0,i.jsx)(r.code,{children:"IServiceCollection"})," instance."]}),(0,i.jsx)(r.h2,{id:"examples",children:"Examples"}),(0,i.jsxs)(r.h3,{id:"register-all-fluentvalidation-validators",children:["Register all ",(0,i.jsx)(r.a,{href:"https://github.com/FluentValidation/FluentValidation",children:"FluentValidation"})," validators"]}),(0,i.jsxs)(r.p,{children:["Unlike using ",(0,i.jsx)(r.code,{children:"FluentValidation.DependencyInjectionExtensions"})," package, ",(0,i.jsx)(r.code,{children:"ServiceScan"})," is AOT-compatible, and doesn't affect startup performance:"]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"[GenerateServiceRegistrations(AssignableTo = typeof(IValidator<>), Lifetime = ServiceLifetime.Singleton)]\npublic static partial IServiceCollection AddValidators(this IServiceCollection services);\n"})}),(0,i.jsxs)(r.h3,{id:"add-mediatr-handlers",children:["Add ",(0,i.jsx)(r.a,{href:"https://github.com/jbogard/MediatR",children:"MediatR"})," handlers"]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"public static IServiceCollection AddMediatR(this IServiceCollection services)\n{\n    return services\n        .AddTransient<IMediator, Mediator>()\n        .AddMediatRHandlers();\n}\n\n[GenerateServiceRegistrations(AssignableTo = typeof(IRequestHandler<>), Lifetime = ServiceLifetime.Transient)]\n[GenerateServiceRegistrations(AssignableTo = typeof(IRequestHandler<,>), Lifetime = ServiceLifetime.Transient)]\nprivate static partial IServiceCollection AddMediatRHandlers(this IServiceCollection services);\n"})}),(0,i.jsx)(r.p,{children:"It adds MediatR handlers, which would work for simple cases, although you might need to add other types like PipelineBehaviors or NotificationHandlers."}),(0,i.jsx)(r.h3,{id:"add-all-repository-types-from-your-project-based-on-name-filter-as-their-implemented-interfaces",children:"Add all repository types from your project based on name filter as their implemented interfaces:"}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'[GenerateServiceRegistrations(\n    TypeNameFilter = "*Repository",\n    AsImplemetedInterfaces = true,\n    Lifetime = ServiceLifetime.Scoped)]\nprivate static partial IServiceCollection AddRepositories(this IServiceCollection services);\n'})}),(0,i.jsx)(r.h2,{id:"parameters",children:"Parameters"}),(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"GenerateServiceRegistrations"})," attribute has the following properties:"]}),(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"FromAssemblyOf"})}),(0,i.jsx)(r.td,{children:"Set the assembly containing the given type as the source of types to register. If not specified, the assembly containing the method with this attribute will be used."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"AssignableTo"})}),(0,i.jsxs)(r.td,{children:["Set the type that the registered types must be assignable to. Types will be registered with this type as the service type, unless ",(0,i.jsx)(r.code,{children:"AsImplementedInterfaces"})," or ",(0,i.jsx)(r.code,{children:"AsSelf"})," is set."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Lifetime"})}),(0,i.jsxs)(r.td,{children:["Set the lifetime of the registered services. ",(0,i.jsx)(r.code,{children:"ServiceLifetime.Transient"})," is used if not specified."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"AsImplementedInterfaces"})}),(0,i.jsx)(r.td,{children:"If true, the registered types will be registered as implemented interfaces instead of their actual type."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"AsSelf"})}),(0,i.jsxs)(r.td,{children:["If true, types will be registered with their actual type. It can be combined with ",(0,i.jsx)(r.code,{children:"AsImplementedInterfaces"}),'. In that case implemeted interfaces will be "forwarded" to an actual implementation type']})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"TypeNameFilter"})}),(0,i.jsx)(r.td,{children:"Set this value to filter the types to register by their full name. You can use '*' wildcards. You can also use ',' to separate multiple filters."})]})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"about",children:"About"}),"\n",(0,i.jsx)(r.admonition,{type:"note",children:(0,i.jsx)(r.p,{children:"Generating service collection / DI registration"})}),"\n",(0,i.jsx)(r.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(r.h3,{id:"example-source-csproj-source-files",children:"Example (source csproj, source files)"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(c.A,{value:"csproj",label:"CSharp Project",children:[(0,i.jsxs)(r.p,{children:["This is the CSharp Project that references ",(0,i.jsx)(r.strong,{children:"ServiceScan.SourceGenerator"})]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",metastring:"showLineNumbers {14}",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\t<PropertyGroup>\n\t\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t\t<CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n\t</PropertyGroup>\n\t<ItemGroup>\n\t  <PackageReference Include="ServiceScan.SourceGenerator" Version="1.1.2">\n\t    <PrivateAssets>all</PrivateAssets>\n\t    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n\t  </PackageReference>\n\t\t<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />\n\t</ItemGroup>\n</Project>\n\n'})})]}),(0,i.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ServiceScan.SourceGenerator\\src\\InjectDemo\\Program.cs",label:"Program.cs",children:[(0,i.jsxs)(r.p,{children:["This is the use of ",(0,i.jsx)(r.strong,{children:"ServiceScan.SourceGenerator"})," in ",(0,i.jsx)(r.em,{children:"Program.cs"})]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using InjectDemo;\nusing Microsoft.Extensions.DependencyInjection;\nvar sc=new ServiceCollection();\nsc.AddMyServices();\nvar sp=sc.BuildServiceProvider();\nvar con = sp.GetService(typeof(Database)) as IDatabase;\nArgumentNullException.ThrowIfNull(con);\ncon.Open();\n\n\n\npublic static partial class MyServiceProvider\n{\n    [ServiceScan.SourceGenerator.GenerateServiceRegistrations(AssignableTo = typeof(Database),AsSelf =true, Lifetime = ServiceLifetime.Scoped)]\n\n    [ServiceScan.SourceGenerator.GenerateServiceRegistrations(AssignableTo = typeof(IDatabase), Lifetime = ServiceLifetime.Scoped)]\n    public static partial IServiceCollection AddMyServices(this IServiceCollection services)\n    ;\n}\n"})})]}),(0,i.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ServiceScan.SourceGenerator\\src\\InjectDemo\\Database.cs",label:"Database.cs",children:[(0,i.jsxs)(r.p,{children:["This is the use of ",(0,i.jsx)(r.strong,{children:"ServiceScan.SourceGenerator"})," in ",(0,i.jsx)(r.em,{children:"Database.cs"})]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'namespace InjectDemo;\n\npartial class Database : IDatabase\n{\n    private readonly IDatabase con;\n\n    public Database(IDatabase con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open from database");\n        con.Open();\n    }\n\n}\n\n\n'})})]}),(0,i.jsxs)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ServiceScan.SourceGenerator\\src\\InjectDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",children:[(0,i.jsxs)(r.p,{children:["This is the use of ",(0,i.jsx)(r.strong,{children:"ServiceScan.SourceGenerator"})," in ",(0,i.jsx)(r.em,{children:"DatabaseCon.cs"})]}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'\nnamespace InjectDemo;\n\npublic partial class DatabaseCon:IDatabase\n{\n    public string? Connection { get; set; }\n    public void Open()\n    {\n        Console.WriteLine("open from database con" );\n    }\n}\n\n\n'})})]})]}),"\n",(0,i.jsx)(r.h3,{id:"generated-files",children:"Generated Files"}),"\n",(0,i.jsx)(r.p,{children:"Those are taken from $(BaseIntermediateOutputPath)\\GX"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ServiceScan.SourceGenerator\\src\\InjectDemo\\obj\\GX\\ServiceScan.SourceGenerator\\ServiceScan.SourceGenerator.DependencyInjectionGenerator\\GenerateServiceRegistrationsAttribute.Generated.cs",label:"GenerateServiceRegistrationsAttribute.Generated.cs",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:'#nullable enable\n\nusing System;\nusing System.Diagnostics;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace ServiceScan.SourceGenerator;\n\n[Conditional("CODE_ANALYSIS")]\n[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\ninternal class GenerateServiceRegistrationsAttribute : Attribute\n{\n    /// <summary>\n    /// Set the assembly containing the given type as the source of types to register.\n    /// If not specified, the assembly containing the method with this attribute will be used.\n    /// </summary>\n    public Type? FromAssemblyOf { get; set; }\n\n    /// <summary>\n    /// Set the type that the registered types must be assignable to.\n    /// Types will be registered with this type as the service type,\n    /// unless <see cref="AsImplementedInterfaces"/> or <see cref="AsSelf"/> is set.\n    /// </summary>\n    public Type? AssignableTo { get; set; }\n\n    /// <summary>\n    /// Set the lifetime of the registered services.\n    /// <see cref="ServiceLifetime.Transient"/> is used if not specified.\n    /// </summary>\n    public ServiceLifetime Lifetime { get; set; }\n\n    /// <summary>\n    /// If set to true, types will be registered as implemented interfaces instead of their actual type.\n    /// </summary>\n    public bool AsImplementedInterfaces { get; set; }\n\n    /// <summary>\n    /// If set to true, types will be registered with their actual type.\n    /// It can be combined with <see cref="AsImplementedInterfaces"/>, in that case implemeted interfaces will be\n    /// "forwarded" to "self" implementation.\n    /// </summary>\n    public bool AsSelf { get; set; }\n\n    /// <summary>\n    /// Set this value to filter the types to register by their full name. \n    /// You can use \'*\' wildcards.\n    /// You can also use \',\' to separate multiple filters.\n    /// </summary>\n    /// <example>Namespace.With.Services.*</example>\n    /// <example>*Service,*Factory</example>\n    public string? TypeNameFilter { get; set; }\n}\n'})})}),(0,i.jsx)(c.A,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\ServiceScan.SourceGenerator\\src\\InjectDemo\\obj\\GX\\ServiceScan.SourceGenerator\\ServiceScan.SourceGenerator.DependencyInjectionGenerator\\MyServiceProvider_AddMyServices.Generated.cs",label:"MyServiceProvider_AddMyServices.Generated.cs",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"using Microsoft.Extensions.DependencyInjection;\n\n\n\npublic static partial class MyServiceProvider\n{\n    public static partial IServiceCollection AddMyServices(this IServiceCollection services)\n    {\n        return services\n            .AddScoped<InjectDemo.Database, InjectDemo.Database>()\n            .AddScoped<InjectDemo.IDatabase, InjectDemo.Database>()\n            .AddScoped<InjectDemo.IDatabase, InjectDemo.DatabaseCon>();\n    }\n}\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"useful",children:"Useful"}),"\n",(0,i.jsx)(r.h3,{id:"download-example-net--c",children:"Download Example (.NET  C#)"}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(66484).A+"",children:"Download Example project ServiceScan.SourceGenerator "})})}),"\n",(0,i.jsx)(r.h3,{id:"share-servicescansourcegenerator",children:"Share ServiceScan.SourceGenerator"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FServiceScan.SourceGenerator&quote=ServiceScan.SourceGenerator",title:"Share on Facebook",target:"_blank",children:"Share on Facebook"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FServiceScan.SourceGenerator&text=ServiceScan.SourceGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FServiceScan.SourceGenerator",target:"_blank",title:"Tweet",children:"Share in Twitter"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FServiceScan.SourceGenerator&title=ServiceScan.SourceGenerator",target:"_blank",title:"Submit to Reddit",children:"Share on Reddit"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FServiceScan.SourceGenerator&title=ServiceScan.SourceGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FServiceScan.SourceGenerator",target:"_blank",title:"Share on LinkedIn",children:"Share on Linkedin"})})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator",children:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/ServiceScan.SourceGenerator"})}),"\n",(0,i.jsx)(r.p,{children:"aaa"}),"\n",(0,i.jsx)(l.Ay,{})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(S,{...e})}):S(e)}},66484:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/files/ServiceScan.SourceGenerator-4f11fa3f39c97008bbb6a93928f7053e.zip"}}]);