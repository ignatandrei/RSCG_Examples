"use strict";(self.webpackChunkrscg_examples=self.webpackChunkrscg_examples||[]).push([[2051],{1412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var a=t(87462),o=(t(67294),t(3905)),r=t(73992),i=t(18679),s=t(68839);const l={sidebar_position:1850,title:"185 - DependencyModules.SourceGenerator",description:"Generating service dependencies from attributes.",slug:"/DependencyModules.SourceGenerator"},d="DependencyModules.SourceGenerator  by Ian Johnson",c={unversionedId:"RSCG-Examples/DependencyModules.SourceGenerator",id:"RSCG-Examples/DependencyModules.SourceGenerator",title:"185 - DependencyModules.SourceGenerator",description:"Generating service dependencies from attributes.",source:"@site/docs/RSCG-Examples/DependencyModules.SourceGenerator.md",sourceDirName:"RSCG-Examples",slug:"/DependencyModules.SourceGenerator",permalink:"/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator",draft:!1,tags:[],version:"current",sidebarPosition:1850,frontMatter:{sidebar_position:1850,title:"185 - DependencyModules.SourceGenerator",description:"Generating service dependencies from attributes.",slug:"/DependencyModules.SourceGenerator"},sidebar:"tutorialSidebar",previous:{title:"184 - MockMe",permalink:"/RSCG_Examples/v2/docs/MockMe"},next:{title:"v1",permalink:"/RSCG_Examples/v2/docs/v1"}},p={},u=[{value:"Nuget / site data",id:"nuget--site-data",level:2},{value:"Details",id:"details",level:2},{value:"Info",id:"info",level:3},{value:"Original Readme",id:"original-readme",level:3},{value:"About",id:"about",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example ( source csproj, source files )",id:"example--source-csproj-source-files-",level:3},{value:"Generated Files",id:"generated-files",level:3},{value:"Usefull",id:"usefull",level:2},{value:"Download Example (.NET  C# )",id:"download-example-net--c-",level:3},{value:"Share DependencyModules.SourceGenerator",id:"share-dependencymodulessourcegenerator",level:3},{value:"In the same category (DependencyInjection) - 7 other generators",id:"in-the-same-category-dependencyinjection---7-other-generators",level:3},{value:"AutoRegisterInject",id:"autoregisterinject",level:4},{value:"depso",id:"depso",level:4},{value:"FactoryGenerator",id:"factorygenerator",level:4},{value:"Injectio",id:"injectio",level:4},{value:"jab",id:"jab",level:4},{value:"Pure.DI",id:"puredi",level:4},{value:"ServiceScan.SourceGenerator",id:"servicescansourcegenerator",level:4}],m={toc:u},g="wrapper";function h(e){let{components:n,...l}=e;return(0,o.kt)(g,(0,a.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dependencymodulessourcegenerator--by-ian-johnson"},"DependencyModules.SourceGenerator  by Ian Johnson"),(0,o.kt)(s.Z,{toc:u,mdxType:"TOCInline"}),(0,o.kt)("h2",{id:"nuget--site-data"},"Nuget / site data"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/DependencyModules.SourceGenerator/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/DependencyModules.SourceGenerator?label=DependencyModules.SourceGenerator",alt:"Nuget"})),(0,o.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/DependencyModules.Runtime/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/dt/DependencyModules.Runtime?label=DependencyModules.Runtime",alt:"Nuget"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ipjohnson/DependencyModules"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/github/last-commit/ipjohnson/DependencyModules?label=updated",alt:"GitHub last commit"})),"\n",(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/github/stars/ipjohnson/DependencyModules?style=social",alt:"GitHub Repo stars"})),(0,o.kt)("h2",{id:"details"},"Details"),(0,o.kt)("h3",{id:"info"},"Info"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Name: ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")),(0,o.kt)("p",{parentName:"admonition"},"Package Description"),(0,o.kt)("p",{parentName:"admonition"},"Author: Ian Johnson"),(0,o.kt)("p",{parentName:"admonition"},"NuGet:\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/DependencyModules.SourceGenerator/"},"https://www.nuget.org/packages/DependencyModules.SourceGenerator/")),"   "),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://www.nuget.org/packages/DependencyModules.Runtime/"},"https://www.nuget.org/packages/DependencyModules.Runtime/")),"   "),(0,o.kt)("p",{parentName:"admonition"},"You can find more details at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ipjohnson/DependencyModules"},"https://github.com/ipjohnson/DependencyModules")),(0,o.kt)("p",{parentName:"admonition"},"Source : ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ipjohnson/DependencyModules"},"https://github.com/ipjohnson/DependencyModules"))),(0,o.kt)("h3",{id:"original-readme"},"Original Readme"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("h1",{parentName:"admonition",id:"dependencymodules"},"DependencyModules"),(0,o.kt)("p",{parentName:"admonition"},"DependencyModules is a C# source generator package that uses attributes to create\ndependency injection registration modules. These modules can then be used to populate\nan IServiceCollection instance."),(0,o.kt)("h2",{parentName:"admonition",id:"installation"},"Installation"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"dotnet add package DependencyModules.Runtime\ndotnet add package DependencyModules.SourceGenerator\n")),(0,o.kt)("h2",{parentName:"admonition",id:"service-attributes"},"Service Attributes"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[DependencyModule]")," - used to attribute class that will become dependency module (must be partial)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[SingletonService]")," - registers service as ",(0,o.kt)("inlineCode",{parentName:"li"},"AddSingleton")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[ScopedService]")," - registers service as ",(0,o.kt)("inlineCode",{parentName:"li"},"AdddScoped")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[TransientService]")," - registers service as ",(0,o.kt)("inlineCode",{parentName:"li"},"AddTransient"))),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Registration example\n[DependencyModule]\npublic partial class MyModule { }\n\n// registers SomeClass implementation for ISomeService\n[SingletonService]\npublic class SomeClass : ISomeService \n{\n  public string SomeProp => "SomeString";\n}\n\n// registers OtherSerice implementation\n[TransientService]\npublic class OtherService\n{\n  public OtherService(ISomeService service)\n  { \n    SomeProp = service.SomeProp;\n  }\n  public string SomeProp { get; }\n}\n')),(0,o.kt)("h2",{parentName:"admonition",id:"container-instantiation"},"Container Instantiation"),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"AddModule")," - method adds modules to service collection"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"var serviceCollection = new ServiceCollection();\n\nserviceCollection.AddModule<MyModule>();\n\nvar provider = serviceCollection.BuildServiceProvider();\n\nvar service = provider.GetService<OtherService>();\n")),(0,o.kt)("h2",{parentName:"admonition",id:"module-re-use"},"Module Re-use"),(0,o.kt)("p",{parentName:"admonition"},"DependencyModules creates an ",(0,o.kt)("inlineCode",{parentName:"p"},"Attribute")," class that can be used to apply sub dependencies."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// Modules can be re-used with the generated attributes\n[DependencyModule]\n[MyModule.Attribute]\npublic partial class AnotherModule { }\n")),(0,o.kt)("h2",{parentName:"admonition",id:"parameters"},"Parameters"),(0,o.kt)("p",{parentName:"admonition"},"Sometimes you want to provide extra registration for your module.\nThis can be achieved by adding a constructor to your module or optional properties.\nNote these parameters and properties will be correspondingly implemented in the module attribute."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'[DependencyModule]\npublic partial class SomeModule : IServiceCollectionConfiguration \n{\n  private bool _someFlag;\n  public SomeModule(bool someFlag = false)\n  {\n    _someFlag = someFlag;\n  }\n  \n  public string OptionalString { get; set; } = "";\n  \n  public void ConfigureServices(IServiceCollection services) \n  {\n    if (_someFlag) \n    {\n      // custom registration\n    } \n  }\n}\n\n[DependencyModule]\n[SomeModule.Attribute(true, OptionalString = "otherString")]\npublic partial class SomeOtherModule \n{\n\n}\n')),(0,o.kt)("h2",{parentName:"admonition",id:"managing-duplicate-registration"},"Managing duplicate registration"),(0,o.kt)("p",{parentName:"admonition"},"By default a module will only be loaded once, assuming attributes are used or the modules are specified in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"AddModules")," call. Seperate calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"AddModule")," will result in modules being loaded multiple times. If a module uses parameters it can be useful to load a module more than once. That can be accompilished by overriding the ",(0,o.kt)("inlineCode",{parentName:"p"},"Equals")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"GetHashcode")," methods to allow for multiple loads."),(0,o.kt)("p",{parentName:"admonition"},"Services will be registered using an ",(0,o.kt)("inlineCode",{parentName:"p"},"Add")," method by default. This can be overriden using the ",(0,o.kt)("inlineCode",{parentName:"p"},"With")," property on individual service or at the ",(0,o.kt)("inlineCode",{parentName:"p"},"DepedencyModule")," level."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"[SingletonService(With = RegistrationType.Try)]\npublic class SomeService { }\n\n[DependencyModule(With = RegistrationType.Try)]\npublic partial class SomeModule { }\n")),(0,o.kt)("h2",{parentName:"admonition",id:"realm"},"Realm"),(0,o.kt)("p",{parentName:"admonition"},"By default, all dependencies are registered in all modules within the same assembly.\nThe realm allows the developer to scope down the registration within a given module."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// register only dependencies specifically marked for this realm\n[DependencyModule(OnlyRealm = true)]\npublic partial class AnotherModule { }\n\n[SingletonService(ServiceType = typeof(ISomeInterface), \n  Realm = typeof(AnotherModule))]\npublic class SomeDep : ISomeInterface { }\n")),(0,o.kt)("h2",{parentName:"admonition",id:"keyed-registration"},"Keyed Registration"),(0,o.kt)("p",{parentName:"admonition"},"Registration attributes have a ",(0,o.kt)("inlineCode",{parentName:"p"},"Key")," property that allows for specifying the key at registration time."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'[SingletonService(Key = "SomeKey")]\npublic class KeyService : IKeyService { }\n\n// yields this registration line\nservices.AddKeyedSingleton(typeof(IKeyService), "SomeKey", typeof(KeyService));\n')),(0,o.kt)("h2",{parentName:"admonition",id:"unit-testing--mocking"},"Unit testing & Mocking"),(0,o.kt)("p",{parentName:"admonition"},"DependencyModules provides an xUnit extension to make testing much easier.\nIt handles the population and construction of a service provider using specified modules."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'> dotnet add package DependencyModules.xUnit\n> dotnet add package DependencyModules.xUnit.NSubstitute\n\n// applies module & nsubstitute support to all tests.\n// test attributes can be applied at the assembly, class, and test method level\n[assemlby: MyModule.Attribute]\n[assembly: NSubstituteSupport]\n\npublic class OtherServiceTests \n{\n  [ModuleTest]\n  public void SomeTest(OtherService test, [Mock]ISomeService service)\n  {\n     service.SomeProp.Returns("some mock value");\n     Assert.Equals("some mock value", test.SomeProp);\n  }\n  \n  public void \n}\n\n')),(0,o.kt)("h2",{parentName:"admonition",id:"implementation"},"Implementation"),(0,o.kt)("p",{parentName:"admonition"},"Behind the scenes the library generates registration code that can be used with any ",(0,o.kt)("inlineCode",{parentName:"p"},"IServiceCollection")," compatible DI container."),(0,o.kt)("p",{parentName:"admonition"},"Example generated code for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ipjohnson/DependencyModules/integ-tests/SutProject/SutModule.cs"},"SutModule.cs")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    // SutModule.Dependencies.g.cs\n    public partial class SutModule\n    {\n        private static int moduleField = DependencyRegistry<SutModule>.Add(ModuleDependencies);\n\n        private static void ModuleDependencies(IServiceCollection services)\n        {\n            services.AddTransient(typeof(IDependencyOne), typeof(DependencyOne));\n            services.AddSingleton(typeof(IGenericInterface<>), typeof(GenericClass<>));\n            services.AddScoped(typeof(IScopedService), typeof(ScopedService));\n            services.AddSingleton(typeof(ISingletonService), typeof(SingletonService));\n            services.AddSingleton(typeof(IGenericInterface<string>), typeof(StringGeneric));\n        }\n    }\n\n    // SutModule.Modules.g.cs\n    public partial class SutModule : IDependencyModule\n    {\n        static SutModule()\n        {\n        }\n\n        // this method loads all dependencies into IServiceCollection.\n        public void PopulateServiceCollection(IServiceCollection services)\n        {\n            DependencyRegistry<SutModule>.LoadModules(services, this);\n        }\n\n        void IDependencyModule.InternalApplyServices(IServiceCollection services)\n        {\n            DependencyRegistry<SutModule>.ApplyServices(services);\n        }\n\n        public override bool Equals(object? obj)\n        {\n            return obj is SutModule;\n        }\n\n        public override int GetHashCode()\n        {\n            return HashCode.Combine(base.GetHashCode());\n        }\n\n        public class Attribute : System.Attribute, IDependencyModuleProvider\n        {\n            public IDependencyModule GetModule()\n            {\n                var newModule = new SutModule();\n                return newModule;\n            }\n        }\n    }\n"))),(0,o.kt)("h3",{id:"about"},"About"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Generating service dependencies from attributes. "),(0,o.kt)("p",{parentName:"admonition"},"Also,by the author, a more advanced example you will find in the DemoWithTest.zip inside the zip file")),(0,o.kt)("h2",{id:"how-to-use"},"How to use"),(0,o.kt)("h3",{id:"example--source-csproj-source-files-"},"Example ( source csproj, source files )"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"csproj",label:"CSharp Project",mdxType:"TabItem"},(0,o.kt)("p",null,"This is the CSharp Project that references ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:"showLineNumbers {15}",showLineNumbers:!0,"{15}":!0},'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n    <PropertyGroup>\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\GX</CompilerGeneratedFilesOutputPath>\n    </PropertyGroup>\n    <ItemGroup>\n      <PackageReference Include="DependencyModules.Runtime" Version="1.0.0-RC9074" />\n      <PackageReference Include="DependencyModules.SourceGenerator" Version="1.0.0-RC9074" />\n     <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.2" />\n\n    </ItemGroup>\n</Project>\n\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\Program.cs",label:"Program.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")," in ",(0,o.kt)("em",{parentName:"p"},"Program.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using DependencyModules.Runtime;\nusing InjectDemo;\nusing Microsoft.Extensions.DependencyInjection;\n\n\nvar serviceCollection = new ServiceCollection();\n\nserviceCollection.AddModule<MyModule>();\n\nvar provider = serviceCollection.BuildServiceProvider();\n\nvar service = provider.GetService<Database>();\n\nif(service == null)\n    throw new Exception("Service not found");\nelse\n    service.Open();\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\MyModule.cs",label:"MyModule.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")," in ",(0,o.kt)("em",{parentName:"p"},"MyModule.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using DependencyModules.Runtime.Attributes;\n\n[DependencyModule]\npublic partial class MyModule \n{ \n\n}\n"))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\IDatabase.cs",label:"IDatabase.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")," in ",(0,o.kt)("em",{parentName:"p"},"IDatabase.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"namespace InjectDemo\n{\n    internal interface IDatabase\n    {\n        public void Open();\n    }\n}\n"))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\Database.cs",label:"Database.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")," in ",(0,o.kt)("em",{parentName:"p"},"Database.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'using DependencyModules.Runtime.Attributes;\n\nnamespace InjectDemo;\n[SingletonService(ServiceType = typeof(Database))]\npartial class Database : IDatabase\n{\n    private readonly IDatabase con;\n\n    public Database(IDatabase con)\n    {\n        this.con = con;\n    }\n    public void Open()\n    {\n        Console.WriteLine($"open from database");\n        con.Open();\n    }\n\n}\n\n\n'))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\DatabaseCon.cs",label:"DatabaseCon.cs",mdxType:"TabItem"},(0,o.kt)("p",null,"  This is the use of ",(0,o.kt)("strong",{parentName:"p"},"DependencyModules.SourceGenerator")," in ",(0,o.kt)("em",{parentName:"p"},"DatabaseCon.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'\nusing DependencyModules.Runtime.Attributes;\n\nnamespace InjectDemo;\n[SingletonService]\npublic partial class DatabaseCon:IDatabase\n{\n    public string? Connection { get; set; }\n    public void Open()\n    {\n        Console.WriteLine("open from database con" );\n    }\n}\n\n\n')))),(0,o.kt)("h3",{id:"generated-files"},"Generated Files"),(0,o.kt)("p",null,"Those are taken from $(BaseIntermediateOutputPath)\\GX"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\obj\\GX\\DependencyModules.SourceGenerator\\DependencyModules.SourceGenerator.SourceGenerator\\MyModule.858.Dependencies.g.cs",label:"MyModule.858.Dependencies.g.cs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using DependencyModules.Runtime.Helpers;\nusing InjectDemo;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\n\npublic partial class MyModule\n{\n    private static int moduleField = DependencyRegistry<MyModule>.Add(ModuleDependencies);\n\n    private static void ModuleDependencies(IServiceCollection services)\n    {\n        services.AddSingleton(typeof(Database), typeof(Database));\n        services.AddSingleton(typeof(IDatabase), typeof(DatabaseCon));\n    }\n}\n\n"))),(0,o.kt)(i.Z,{value:"D:\\gth\\RSCG_Examples\\v2\\rscg_examples\\DependencyModules.SourceGenerator\\src\\InjectDemo\\obj\\GX\\DependencyModules.SourceGenerator\\DependencyModules.SourceGenerator.SourceGenerator\\MyModule.858.Module.g.cs",label:"MyModule.858.Module.g.cs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},"using BaseAttribute = System.Attribute;\nusing DependencyModules.Runtime.Helpers;\nusing DependencyModules.Runtime.Interfaces;\nusing Microsoft.Extensions.DependencyInjection;\n\n#nullable enable\npublic partial class MyModule : IDependencyModule\n{\n\n    static MyModule()\n    {\n    }\n\n    public void PopulateServiceCollection(IServiceCollection services)\n    {\n        DependencyRegistry<MyModule>.LoadModules(services, this);\n    }\n\n    void IDependencyModule.InternalApplyServices(IServiceCollection services)\n    {\n        DependencyRegistry<MyModule>.ApplyServices(services);\n    }\n\n    public override bool Equals(object? obj)\n    {\n        return obj is MyModule;\n    }\n\n    public override int GetHashCode()\n    {\n        return HashCode.Combine(base.GetHashCode());\n    }\n\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Assembly | AttributeTargets.Method | AttributeTargets.Parameter, AllowMultiple = true)]\n    public partial class Attribute : BaseAttribute, IDependencyModuleProvider\n    {\n\n        public IDependencyModule GetModule()\n        {\n            var newModule = new MyModule();\n            return newModule;\n        }\n    }\n}\n#nullable disable\n\n")))),(0,o.kt)("h2",{id:"usefull"},"Usefull"),(0,o.kt)("h3",{id:"download-example-net--c-"},"Download Example (.NET  C# )"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{target:"_blank",href:t(82300).Z},"Download Example project DependencyModules.SourceGenerator "))),(0,o.kt)("h3",{id:"share-dependencymodulessourcegenerator"},"Share DependencyModules.SourceGenerator"),(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&quote=DependencyModules.SourceGenerator",title:"Share on Facebook",target:"_blank"},"Share on Facebook")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"https://twitter.com/intent/tweet?source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&text=DependencyModules.SourceGenerator:%20https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator",target:"_blank",title:"Tweet"},"Share in Twitter")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.reddit.com/submit?url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&title=DependencyModules.SourceGenerator",target:"_blank",title:"Submit to Reddit"},"Share on Reddit")),(0,o.kt)("li",null,(0,o.kt)("a",{href:"http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator&title=DependencyModules.SourceGenerator&summary=&source=https%3A%2F%2Fignatandrei.github.io%2FRSCG_Examples%2Fv2%2Fdocs%2FDependencyModules.SourceGenerator",target:"_blank",title:"Share on LinkedIn"},"Share on Linkedin"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator"},"https://ignatandrei.github.io/RSCG_Examples/v2/docs/DependencyModules.SourceGenerator")),(0,o.kt)("h3",{id:"in-the-same-category-dependencyinjection---7-other-generators"},"In the same category (DependencyInjection) - 7 other generators"),(0,o.kt)("h4",{id:"autoregisterinject"},(0,o.kt)("a",{parentName:"h4",href:"/docs/AutoRegisterInject"},"AutoRegisterInject")),(0,o.kt)("h4",{id:"depso"},(0,o.kt)("a",{parentName:"h4",href:"/docs/depso"},"depso")),(0,o.kt)("h4",{id:"factorygenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/FactoryGenerator"},"FactoryGenerator")),(0,o.kt)("h4",{id:"injectio"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Injectio"},"Injectio")),(0,o.kt)("h4",{id:"jab"},(0,o.kt)("a",{parentName:"h4",href:"/docs/jab"},"jab")),(0,o.kt)("h4",{id:"puredi"},(0,o.kt)("a",{parentName:"h4",href:"/docs/Pure.DI"},"Pure.DI")),(0,o.kt)("h4",{id:"servicescansourcegenerator"},(0,o.kt)("a",{parentName:"h4",href:"/docs/ServiceScan.SourceGenerator"},"ServiceScan.SourceGenerator")))}h.isMDXComponent=!0},82300:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/DependencyModules.SourceGenerator-8d9993aa98e540fe14cc44723524ce17.zip"}}]);