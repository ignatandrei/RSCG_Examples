// <auto-generated>
// This file was last generated by the RhoMicro.CodeAnalysis.CopyToGenerator on 2/18/2024 10:52:42 AM +02:00
// </auto-generated>
#pragma warning disable
namespace CopyToDemo
{
	partial class Person
	{
		/// <summary>
		/// Copies this instances public properties to another ones.
		/// </summary>
		/// <param name = "target">The instance to copy this instances properties' values to.</param>
		public void CopyTo(Person target)
		{
			if (this == target || target == null)
			{
				return;
			}

			if (AvoidCopy(this, target))
			{
				return;
			}

			target.FirstName = this.FirstName;
			target.LastName = this.LastName;
		}

		/// <summary>
		/// Evaluates whether copying between two instances of <see cref = "Person"/> should be avoided due to equivalence. This can help avoid unnecessary copying or infinite copying in nested recursive relationships.
		/// </summary>
		/// <param name = "a">The first instance to compare.</param>
		/// <param name = "b">The second instance to compare.</param>
		/// <param name = "result">Upon returning, contains <see langword="true"/> if copying between <paramref name = "a"/> and <paramref name = "b"/> should be avoided; otherwise, <see langword="false"/>.</param>
		static partial void AvoidCopy(Person a, Person b, ref global::System.Boolean result);
		/// <summary>
		/// Evaluates whether copying between two instances of <see cref = "Person"/> should be avoided due to equivalence. This can help avoid unnecessary copying or infinite copying in nested recursive relationships.
		/// </summary>
		/// <param name = "a">The first instance to compare.</param>
		/// <param name = "b">The second instance to compare.</param>
		/// <returns><see langword="true"/> if copying between <paramref name = "a"/> and <paramref name = "b"/> should be avoided; otherwise, <see langword="false"/>.</returns>
		static global::System.Boolean AvoidCopy(Person a, Person b)
		{
			{
				var result = false;
				AvoidCopy(a, b, ref result);
				return result;
			}
		}
	}
}