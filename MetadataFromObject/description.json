{
  "generator": {
   "name": "Metadata from object",
   "nuget": ["https://www.nuget.org/packages/AOPMethodsCommon/",
                "https://www.nuget.org/packages/AOPMethodsGenerator/"                 
               ],
   "link": "http://msprogrammer.serviciipeweb.ro/category/roslyn/",  
   "author":"Andrei Ignat"   ,
   "source":"http://github.com/ignatandrei/aop_With_Roslyn/"   
  },
  "data":{
     "goodFor":"This will generate code to retrieve the values of properties directly, not by reflection",
     "existingCode":[
"[AutoMethods(template = TemplateMethod.CustomTemplateFile, CustomTemplateFileName = \"GenerateFromPOCO.txt\")]",
"public partial class Person",
"{",
"    public string FirstName { get; set; }",
"    public string LastName { get; set; }",
"}"
     ],
     "usage":[
"var p = new Person();                                      ",
"p.FirstName = \"Andrei\";",
"p.LastName = \"Ignat\";",
"var last = p.ValueProperty(Person_EnumProps.LastName);",
"var first = p.ValueProperty(\"FirstName\");",
"",
"Console.WriteLine(last + \" \"+first);"          
     ],
     "generatedCode":[
"public enum Person_EnumProps{                                                                  ",
"    None",
"    ,FirstName // Public ",
"    ,LastName // Public ",
"}",
"partial class Person{",
"    public object ValueProperty(Person_EnumProps val){",
"        if(val == Person_EnumProps.FirstName) {",
"            return this.FirstName;",
"        }",
"        if(val == Person_EnumProps.LastName) {",
"            return this.LastName;",
"        }",
"    throw new ArgumentException(\"cannot find \"+ val);",
"    }",
"    public object ValueProperty(string val){",
"        if(string.Compare(\"FirstName\",val,StringComparison.CurrentCultureIgnoreCase)==0) {",
"            return this.FirstName;",
"        }",
"        if(string.Compare(\"LastName\",val,StringComparison.CurrentCultureIgnoreCase)==0) {",
"            return this.LastName;",
"        }",
"    throw new ArgumentException(\"cannot find \"+ val);",
"    }",
"}"
	 
	 
     ]
  },
  "links":{
     "blog":"",
     "video":""
  }
  
}