//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Diagnostics;
namespace {{NamespaceName}} {

    [GeneratedCode("AOPMethods", "{{version}}")]
    [CompilerGenerated]
    public partial class {{ClassName}}{
        {{~ for mi in Methods ~}}
            {{

            strAwait = ""
            strAsync =""
            if mi.ShouldUseAsync == true
                strAwait = " await "
                strAsync  = " async "
            end
            separator = "" 
            if(mi.NrParameters > 0)
                separator = "," 
            end
            returnString = ""
            if mi.ReturnsVoid == false 
                returnString = " return "
            end
            }}
            //{{mi.ShouldUseAsync }}
        public {{strAsync}} {{mi.ReturnType}} {{mi.NewName}} ({{mi.parametersDefinitionCSharp }}
            {{separator}}  
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0){
            var sw=new Stopwatch();
            try{
                Console.WriteLine("--{{mi.Name}} start ");
                Console.WriteLine("called from class :"+memberName );
                Console.WriteLine("called from file :"+sourceFilePath );
                Console.WriteLine("called from line :"+sourceLineNumber );
                {{returnString}} {{  strAwait }} {{mi.Name}}({{ mi.parametersCallCSharp }});
            }
            catch(Exception ex){
                Console.WriteLine("error in {{mi.Name}}:" + ex.Message);
                throw;
            }
            finally{
                Console.WriteLine($"--------{{mi.Name}} end in {sw.Elapsed.TotalMilliseconds}");
            }


        }//end {{mi.NewName}}
        
        {{ end}}
    }
 }