//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Linq.Expressions;
namespace {{NamespaceName}} {

    [CompilerGenerated]
    public partial class Metadata_{{ClassName}}{
    
        {{~ for pi in Properties ~}}
        public const string prop_{{pi.Name}} = "{{pi.Name}}";    
        public static readonly Func<{{ClassName}},{{pi.ReturnType}}> func_{{pi.Name}} = (it=>it.{{pi.Name}});
        public static readonly Expression<Func<{{ClassName}},{{pi.ReturnType}}>> expr_{{pi.Name}} = (it=>it.{{pi.Name}});
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_equal({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}} == value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_diff({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}} != value);
        //{{pi.ReturnType}}
        
        {{
            isNumeric =((pi.ReturnType  ==  "short?" ) || (pi.ReturnType  ==  "short" ) || (pi.ReturnType  ==  "System.DateTime?" ) || (pi.ReturnType  ==  "System.DateTime" ) || (pi.ReturnType  ==  "int?" ) || (pi.ReturnType  ==  "int" ) || (pi.ReturnType  ==  "long")|| (pi.ReturnType  ==  "long?") )
            isString = (pi.ReturnType  ==  "string")
        }}
        {{ if isString }}   

        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Ends({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}}.StartsWith (value));
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Starts({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}}.EndsWith(value));
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Contains({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}}.Contains(value));    
        {{ end }}
        
        {{ if isNumeric  }}   
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Greater({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}} > value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_GreaterOrEqual({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}} >= value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Less({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}} < value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_LessOrEqual({{pi.ReturnType}} value)=> (it=>it.{{pi.Name}} <= value);
        {{ end }}
        
        {{end}}
    }

}