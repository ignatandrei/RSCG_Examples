//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Linq.Expressions;
using System.Linq;
namespace {{NamespaceName}} {

    [CompilerGenerated]
    public partial class Metadata_{{ClassName}}{
    
        {{~ for pi in Properties ~}}
        {{ retType = pi.ReturnType }}
        {{
            isNumeric =((retType  ==  "short?" ) || (retType  ==  "short" ) || (retType  ==  "System.DateTime?" ) || (retType  ==  "System.DateTime" ) || (retType  ==  "int?" ) || (retType  ==  "int" ) || (retType  ==  "long")|| (retType  ==  "long?") )
            isString = (retType  ==  "string")
            isNullable = isString || (string.contains retType "?" );
            
        }}
        //public const string prop_{{pi.Name}} = "{{pi.Name}}";    
        //public static readonly Func<{{ClassName}},{{retType}}> func_{{pi.Name}} = (it=>it.{{pi.Name}});
        //public static readonly Expression<Func<{{ClassName}},{{retType}}>> expr_{{pi.Name}} = (it=>it.{{pi.Name}});
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Equal({{retType}} value)=> (it=>it.{{pi.Name}} == value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Diff({{retType}} value)=> (it=>it.{{pi.Name}} != value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Contains(params {{retType}}[] value)=> (it=> value.Contains(it.{{pi.Name}}) );
        
        //{{retType}}
        
        
        {{ if isNullable  }}  
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Null()=> (it=>it.{{pi.Name}} == null);            
        {{ end }}
        {{ if isString }}   
        

        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_NullOrWhite()=> (it=>string.IsNullOrWhiteSpace(it.{{pi.Name}}));

        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Ends({{retType}} value)=> (it=>it.{{pi.Name}}.StartsWith (value));
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Starts({{retType}} value)=> (it=>it.{{pi.Name}}.EndsWith(value));
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Contains({{retType}} value)=> (it=>it.{{pi.Name}}.Contains(value));    
        {{ end }}
        
        {{ if isNumeric  }}   
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Greater({{retType}} value)=> (it=>it.{{pi.Name}} > value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_GreaterOrEqual({{retType}} value)=> (it=>it.{{pi.Name}} >= value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_Less({{retType}} value)=> (it=>it.{{pi.Name}} < value);
        public static Expression<Func<{{ClassName}},bool>> expr_{{pi.Name}}_LessOrEqual({{retType}} value)=> (it=>it.{{pi.Name}} <= value);
        {{ end }}
        
        {{end}}

        public static Expression<Func<{{ClassName}},bool>> FindEx(string nameProp, SearchCriteria search, object value = null)
        {
            
            {{~ for pi in Properties ~}}
            {{ retType = pi.ReturnType }}
            {{
                isNumeric =((retType  ==  "short?" ) || (retType  ==  "short" ) || (retType  ==  "System.DateTime?" ) || (retType  ==  "System.DateTime" ) || (retType  ==  "int?" ) || (retType  ==  "int" ) || (retType  ==  "long")|| (retType  ==  "long?") )
                isString = (retType  ==  "string")
                isNullable = isString || (string.contains retType "?" );
            
            }}
            if(string.Compare("{{pi.Name}}",nameProp,StringComparison.CurrentCultureIgnoreCase) == 0)
            switch(search){
                case SearchCriteria.None:
                    return null;
                {{ if isNullable }}
                case SearchCriteria.FindNull:
                    return expr_{{pi.Name}}_Null();
                {{ end }}
                case SearchCriteria.Equal:
                    var orig= ({{pi.ReturnType}}) value;
                    return expr_{{pi.Name}}_Equal(orig);
                default:
                    throw new ArgumentException("cannot find for {{ pi.Name }} case  "+search);
            }
            
            {{end}}
            throw new ArgumentException("cannot find property  "+nameProp);
            
        }

    }

}