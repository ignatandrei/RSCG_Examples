//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Diagnostics;
namespace {{NamespaceName}} {

    [GeneratedCode("AOPMethods", "{{version}}")]
    [CompilerGenerated]
    public partial class {{ClassName}}{
      {{~ for mi in Methods ~}}
        //{{mi.Name}}
            {{

            strAwait = ""
            strAsync =""
            if mi.CouldUseAsync == true
                strAwait = " await "
                strAsync  = " async "
            end
            separator = "" 
            if(mi.NrParameters > 0)
                separator = "," 
            end
            returnString = ""
            if mi.CouldReturnVoidFromAsync == false 
                returnString = " return "
            end
            }}
        public {{strAsync}} {{mi.ReturnType}} {{mi.NewName}} ({{mi.parametersDefinitionCSharp }}){
			var utcTime =System.DateTime.UtcNow;
             
			Console.WriteLine("start method {{mi.NewName}} at " +utcTime);
            {{~ for miArg in mi.Parameters  ~}}
                string val{{ miArg.Key }} ;
                try{
                    val{{ miArg.Key }} = System.Text.Json.JsonSerializer.Serialize({{ miArg.Key }});
                }
                catch(Exception ex){
                    val{{ miArg.Key }} = "Error serializing parameter {{ miArg.Key }} : "+ ex.Message;
                }
                Console.WriteLine("Argument_{{ miArg.Key }} :" + val{{ miArg.Key }});
                
             
            {{ end}}

            try{
                {{returnString}} {{  strAwait }} {{mi.Name}}({{ mi.parametersCallCSharp }});
            }
            catch(Exception ex){
                Console.WriteLine($"--{{mi.NewName}} exception {ex.Message}");
                throw;
            }
            finally{
				utcTime =System.DateTime.UtcNow;
                Console.WriteLine("end method {{mi.NewName}}");                
            }


        }//end {{mi.NewName}}
        
        {{ end}}
    }
 }

